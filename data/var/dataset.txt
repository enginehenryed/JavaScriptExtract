var a = new constantNode ( 2 ) ; var n:==:new operatorNode ( ' - ' , ' unaryMinus ' , [ a ] ) ;
var accessContext = ctx . accessContext ; var principal:==:ctx . principal ;
var internalArray = utils . internalArray ; var internalPackedArray:==:utils . internalPackedArray ;
var k = this . keys ; var n:==:k . indexOf ( value . i d ) ;
var arrayNode = math . expression . node . arrayNode ; var assignmentNode:==:math . expression . node . assignmentNode ;
var concat   = emptyArray . concat ; var push:==:emptyArray . push ;
var traits = identify . traits ( ) ; var username:==:identify . username ( ) ;
var toJSON = schema . options . toJSON ; var toObject:==:schema . options . toObject ;
var y = cartesian3 . y ; var z:==:cartesian3 . z ;
var tx = m . tx ; var ty:==:m . ty ;
var key = this . key ; var arc:==:this . arc ;
var type = aEvent . type ; var timeStamp:==:aEvent . timeStamp ;
var folder_view = require ( ' folder_view ' ) ; var gui:==:require ( ' nw . gui ' ) ;
var w = this . image . width ; var h:==:this . image . height ;
var reactInstrumentation = require ( ' reactInstrumentation ' ) ; var reactNodeTypes:==:require ( ' reactNodeTypes ' ) ;
var image = this . image ; var aspectRatio:==:image . aspectRatio ;
var scrollToIndex = _ props . scrollToIndex ; var width:==:_ props . width ;
var background = _ img . attr ( ' data - background ' ) ; var src:==:_ img . attr ( ' data - src ' ) ;
var start = Math . max ( range . start , this . start ) ; var end:==:Math . min ( range . end , this . end ) ;
var Application = Ember . Application ; var Controller:==:Ember . Controller ;
var assert   = require ( ' chai ' ) . assert ; var connect:==:require ( ' connect ' ) ;
var muk = require ( ' muk ' ) ; var thinkit:==:require ( ' thinkit ' ) ;
var processedLength = evt . processedLength ; var fileLength:==:evt . fileLength ;
var width = svg . width ( )  |  |  Chartist . quantity ( options . width ) . value  |  |  0 ; var height:==:svg . height ( )  |  |  Chartist . quantity ( options . height ) . value  |  |  0 ;
var crop = this . texture . crop ; var frame:==:this . texture . frame ;
var action = this . action ; var container:==:this . container ;
var contextOptions = options . contextOptions ; var creditContainer:==:options . creditContainer ;
var name = skin . name  |  |  ' skin ' + skinNode . skin ; var babylonSkeleton:==:skin . babylonSkeleton ;
var scrollLeft = parallax . scrollLeft ; var overScroll:==:this . overScrollFix ? parallax . overScroll : 0 ;
var path = require ( ' path ' ) ; var crypto:==:require ( ' crypto ' ) ;
var doc_id = doc_id_rev . substring ( 0 , idx ) ; var rev:==:doc_id_rev . substring ( idx + 2 ) ;
var weightedSample = global . weightedSample ; var getopt:==:global . getopt ;
var c = math . complex ( ) ; var flat:==:flatten ( [ c ] ) ;
var sampleDraftInlineStyle = require ( ' sampleDraftInlineStyle ' ) ; var createCharacterList:==:require ( ' createCharacterList ' ) ;
var distance = input . distance ; var direction:==:input . direction ;
var isEOF = coreParser . iseof ; var pdfImage:==:coreImage . pdfImage ;
var start = selection . start ; var end:==:selection . end ;
var placeholder = el [ 0 ] . querySelector ( ' . md - placeholder ' ) ; var label:==:el . find ( ' label ' ) [ 0 ] ;
var Promise = typeof global . Promise = = = ' function ' ? global . Promise : _ dereq _ ( ' lie ' ) ; var collate:==:pouchCollate . collate ;
var callback = opt_callback  |  |  goog . nullFunction ; var errback:==:opt_errback  |  |  goog . nullFunction ;
var element = elements [ i ] ; var parent:==:element . parentNode ;
var tree = imports . tree ; var util:==:imports . util ;
var init = findSymbolModes [ mode ] . init ; var isComplete:==:findSymbolModes [ mode ] . isComplete ;
var q = $ q . defer ( ) ; var navigate:==:appRate . navigateToAppStore ( ) ;
var fs = require ( ' fs - extra ' ) ; var when:==:require ( ' when ' ) ;
var header = this . header = newRecords . header ; var body:==:this . body    newRecords . body ;
var version = req . params . version ; var user:==:req . user ;
var selectionBehavior = library . selectionBehavior ; var selectionMode:==:library . selectionMode ;
var util = require ( ' util ' ) ; var detectBinary:==:promise . denodeify ( mozrunner . detectBinary ) ;
var node2 = new goog . ui . tree . treeNode ( ' node2 ' ) ; var node3:==:new goog . ui . tree . treeNode ( ' node3 ' ) ;
var template = view . template ; var list:==:view . owner . list ;
var nonasciIidentifierStart = new regExp ( ' [ ' + nonasciIidentifierStartChars + ' ] ' ) ; var nonasciIidentifier:==:new regExp ( ' [ ' + nonasciIidentifierStartChars + nonasciIidentifierChars + ' ] ' ) ;
var m00 = this . m00 _ ; var m10:==:this . m10 _ ;
var moment = require ( ' moment ' ) ; var util:==:require ( ' hexo - util ' ) ;
var ctx = this . ctx ; var width:==:dom . width ;
var email = ( user . email  |  |  '' ) . trim ( ) . toLowerCase ( ) ; var name:==:user . name  |  |  ' default ' ;
var env = process . env . NODE_ENV ; var write:==:process . stdout . write ;
var VARIABLE_DECLARATION_LIST = ' VARIABLE_DECLARATION_LIST ' ; var VARIABLE_STATEMENT:==:' VARIABLE_STATEMENT ' ;
var i = findChunkIndex ( chunks , mid , isOrig ) ; var ch:==:chunks [ i ] ;
var iteratedString = symbol ( ' iteratedString ' ) ; var stringIteratorNextIndex:==:symbol ( ' stringIteratorNextIndex ' ) ;
var charCode = charCodes [ i ] ; var charCodeToGlyphId:==:newMapping . charCodeToGlyphId ;
var doc = window . document ; var script:==:doc . createElement ( ' script ' ) ;
var objectLoader = coreObj . objectLoader ; var xRef:==:coreObj . xRef ;
var rx = this . attribute ( ' rx ' ) . toPixels ( ' x ' ) ; var ry:==:this . attribute ( ' ry ' ) . toPixels ( ' y ' ) ;
var saveOption = util . saveOption ; var fillDropdown:==:util . fillDropdown ;
var source = link . source ; var target:==:link . target ;
var string = _ react$PropTypes . string ; var object:==:_ react$PropTypes . object ;
var center = SIMD . float32x4 ( centerVec . x , centerVec . y , centerVec . z , 0 . 0 ) ; var eye:==:simd . float32x4 ( eyeVec . x , eyeVec . y , eyeVec . z , 0 . 0 ) ;
var pin = this . _ elements . pinInput . value ; var newPin:==:this . _ elements . newPinInput . value ;
var setInnerhtml = scope . setInnerhtml ; var unwrap:==:scope . unwrap ;
var CANCELLED = ' CANCELLED ' ; var FLUSH:==:' FLUSH ' ;
var command2 = commandManager . register ( ' enabled when previous is checked ' , ' extensionTest . command2 ' , testCommand2 ) ; var command3:==:commandManager . register ( ' enabled when text selected ' , ' extensionTest . command3 ' , testCommand3 ) ;
var a = foo : 123 , bar : 456 ; var b:==:bar : 789 ;
var Comment = window . Comment ; var domParser:==:window . domParser ;
var slide = s . slides . eq ( s . activeIndex ) ; var hash:==:slide . attr ( ' data - hash ' )  |  |  slide . attr ( ' data - history ' ) ;
var end = this . newBlock ( ' end for ' + genIndex ) ; var ge:==:generators [ genIndex ] ;
var prefix = typeof o . prefix = = = ' undefined ' & & ' assert '  |  |  o . prefix ; var includeFail:==:typeof o . includeFail      ' undefined '  |  |  ! ! o . includeFail ;
var s = ctx . strokeStyle ; var f:==:ctx . fillStyle ;
var row = Math . min ( this . rows , this . lines . length ) - 1 ; var line:==:this . lines [ row ] ;
var featurePrefix = context [ ' featurePrefix ' ] ; var featurens:==:context [ ' featurens ' ] ;
var Bridge = require ( ' hap - nodejs ' ) . Bridge ; var Accessory:==:require ( ' hap - nodejs ' ) . Accessory ;
var Dialog = imports . Dialog ; var apf:==:imports . apf ;
var nconf = require ( ' nconf ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var should = require ( ' should ' ) ; var nssocket:==:require ( ' nssocket ' ) ;
var container = this . els . container ; var seekBar:==:this . els . seekBar ;
var parseTreeVisitor = traceur . syntax . parseTreeVisitor ; var moduleSymbol:==:traceur . semantics . symbols . moduleSymbol ;
var proc = imports . proc ; var fs:==:imports . fs ;
var save = imports . save ; var proc:==:imports . proc ;
var Imaging = Windows . Graphics . Imaging ; var Media:==:Windows . Media ;
var casper = require ( ' casper ' ) . create ( ) ; var json:==:require ( ' json ' ) ;
var field = row . find ( ' . field ' ) . val ( ) ; var op:==:row . find ( ' . op ' ) . val ( ) ;
var penetrationDeceleration = self . options . penetrationDeceleration ; var penetrationAcceleration:==:self . options . penetrationAcceleration ;
var walk = require ( ' pug - walk ' ) ; var assign:==:require ( ' object - assign ' ) ;
var floor = stdlib . Math . floor ; var sqrt:==:stdlib . Math . sqrt ;
var params = ob . params ; var app_id:==:params . qstring . app_id ;
var body = this . getDom ( ' body ' ) ; var width:==:uiUtils . getClientRect ( this . getDom ( ' content ' ) ) . width ;
var merge = PouchDB . utils . merge ; var winningRev:==:pouchdb . utils . winningRev ;
var weibo = validator . trim ( req . body . weibo ) ; var signature:==:validator . trim ( req . body . signature ) ;
var sinon = require ( ' sinon ' ) ; var should:==:require ( ' should ' ) ;
var keyUtils = jsCommon . keyUtils ; var stringExtensions:==:jsCommon . stringExtensions ;
var fs = require ( ' fs ' ) ; var ncp:==:require ( ' ncp ' ) . ncp ;
var crossPageChannelRole = goog . net . xpc . crossPageChannelRole ; var transportTypes:==:goog . net . xpc . transportTypes ;
var groundColor = new three . color ( data . groundColor ) . getHex ( ) ; var intensity:==:data . intensity ;
var neq = semver . neq ; var cmp:==:semver . cmp ;
var omit = require ( ' omit ' ) ; var pick:==:require ( ' pick ' ) ;
var https = require ( ' https ' ) ; var bhttp:==:require ( ' bhttp ' ) ;
var accessors = gltf . accessors ; var meshes:==:gltf . meshes ;
var shaders = shader . shaders ; var shaderNames:==:shader . shaderNames ;
var auth = imports . auth ; var nw:==:nativeRequire ( ' nw . gui ' ) ;
var on = bind$1 ( vm . $ on , vm ) ; var off:==:bind$1 ( vm . $ off , vm ) ;
var OBJECT_PATTERN = ' OBJECT_PATTERN ' ; var OBJECT_PATTERN_FIELD:==:' OBJECT_PATTERN_FIELD ' ;
var warn = sharedUtil . warn ; var customStyle:==:displaydomUtils . customStyle ;
var component = components . get ( utils . getParentComponent ( ) ) ; var usedPropTypes:==:( component & & component . usedPropTypes  |  |  [ ] ) . slice ( ) ;
var path = require ( ' path ' ) ; var docs:==:path . join ( _ _ dirname , ' docs ' ) ;
var objectEnumerationBuilder = powerbi . visuals . objectEnumerationBuilder ; var axisScale:==:powerbi . visuals . axisScale ;
var width = Math . max ( bounds . width , graph . scrollTileSize . width * graph . view . scale ) ; var height:==:math . max ( bounds . height , graph . scrollTileSize . height * graph . view . scale ) ;
var find = ' local find ' ; var findIndex:==:' local findIndex ' ;
var $ container = this . $ container ; var $ cropper:==:this . $ cropper ;
var attribution = attributionList [ attributionIndex ] ; var coverageAreas:==:attribution . coverageAreas ;
var x = obj . x = = null ? 0 : obj . x ; var x2:==:obj . x2     null ? 1 : obj . x2 ;
var index = items . indexOf ( li ) ; var section:==:li . dataset . section ;
var lineInfo = this . _ codeMirror . lineInfo ( lineNumber ) ; var wrapClass:==:lineInfo . wrapClass  |  |  ' ' ;
var d = tree . d = sr . firstChild ; var content:==:tree . content    d . firstChild ;
var _ sass_compile_emscripten = Module [ ' _ sass_compile_emscripten ' ] = asm [ ' _ sass_compile_emscripten ' ] ; var _ memmove:==:Module [ ' _ memmove ' ]    asm [ ' _ memmove ' ] ;
var materials = template . materials ; var components:==:template . components ;
var utc = time . utc ; var tzid:==:time . tzid ;
var getTailoredTextOrDefault = powerbi . textMeasurementService . getTailoredTextOrDefault ; var legendData:==:powerbi . visuals . legendData ;
var getSampleStateForTesting = require ( ' getSampleStateForTesting ' ) ; var removeEntitiesAtEdges:==:require ( ' removeEntitiesAtEdges ' ) ;
var isDefined = leafletHelpers . isDefined ; var isFunction:==:leafletHelpers . isFunction ;
var originalEvent = e . originalEvent ; var clientx:==:originalEvent . clientx ;
var standardCertificateStoreNames = windows . security . cryptography . certificates . standardCertificateStoreNames ; var cryptographicBuffer:==:windows . security . cryptography . cryptographicBuffer ;
var port = process . env . PORT  |  |  port ; var host:==:process . env . HOST  |  |  serverUrl . hostname ;
var contacts = document . getElementById ( ' option - contacts ' ) ; var keypad:==:document . getElementById ( ' option - keypad ' ) ;
var q = require ( ' q ' ) ; var webdriver:==:require ( ' selenium - webdriver ' ) ;
var g = pixel . g ; var b:==:pixel . b ;
var x : x : string = x : ' hello ' ; var x : x : string:==:x : ' hello ' ;
var video = window . video = document . querySelector ( ' video ' ) ; var canvas:==:window . canvas    document . querySelector ( ' canvas ' ) ;
var file = grunt . file ; var log:==:grunt . log ;
var Post = hexo . model ( ' Post ' ) ; var postTag:==:hexo . model ( ' postTag ' ) ;
var reactServerRenderer = require ( ' reactServerRenderer ' ) ; var reactVersion:==:require ( ' reactVersion ' ) ;
var dataLabelUtils = powerbi . visuals . dataLabelUtils ; var converterHelper:==:powerbi . visuals . converterHelper ;
var gridlines = axis . _ gridlines = [ ] ; var minorgridlines:==:axis . _ minorgridlines    [ ] ;
var elementArray = group . elementArray ; var layoutVertexArray:==:group . layoutVertexArray ;
var U32 = new primitiveType ( ' u32 ' , 4 , ' i ' , 0 , 0xffffffff ) ; var u64:==:new primitiveType ( ' u64 ' , 8 , ' i ' ) ;
var mainEl = $ ( mainEl ) ; var i d:==:mainEl . attr ( ' data - draggable - id ' ) ;
var shapes = this . shapes = options . shapes ; var highlightShapes:==:this . highlightShapes    options . highlightShapes ;
var item = event . detail . item ; var index:==:this . _ list . indexOfKey ( key ) ;
var ejs = require ( ' ejs ' ) ; var exists:==:fs . existsSync  |  |  path . existsSync ;
var runPostSets = module [ ' runPostSets ' ] = asm [ ' runPostSets ' ] ; var dyncall_iiiiiiii:==:module [ ' dyncall_iiiiiiii ' ]    asm [ ' dyncall_iiiiiiii ' ] ;
var isArray = _ _ dependency2 _ _ . isArray ; var slice:==:[ ] . slice ;
var functionName = frame . functionName  |  |  ' ( anonymous ) ' ; var url:==:frame . url ? frame . url : inspectorTest . _ scriptMap . get ( frame . location . scriptId ) . url ;
var options = context . options [ 0 ]  |  |  ; var defaultAssignment:==:options . defaultAssignment !    false ;
var paramNames = match . paramNames ; var paramValues:==:match . paramValues ;
var configManager = window . parent . configManager ; var costControl:==:window . parent . costControl ;
var cyan700 = exports . cyan700 = ' # 0097a7 ' ; var cyan800:==:exports . cyan800    ' # 00838f ' ;
var Writable = require ( ' readable - stream ' ) . Writable ; var util:==:require ( ' util ' ) ;
var I16 = new primitiveType ( ' i16 ' , 2 , ' i ' , -32768 , 32767 ) ; var i32:==:new primitiveType ( ' i32 ' , 4 , ' i ' , -0x80000000 , 0x7fffffff ) ;
var sqrt = Math . sqrt ; var atan:==:Math . atan ;
var $ element = this . $ element ; var element:==:$ element [ 0 ] ;
var edgeFieldsCount = this . _ edgeFieldsCount ; var edgeInternalType:==:this . _ edgeInternalType ;
var dropOverride = params . dropOverride = = = true ; var proxied:==:params . proxied !    false ;
var quatNormalize = stepnumber % ( this . quatNormalizeSkip+1 ) = = = 0 ; var quatNormalizeFast:==:this . quatNormalizeFast ;
var left = bounds . left  |  |  0 ; var right:==:bounds . right  |  |  0 ;
var days    = this . _ days ; var months:==:this . _ months ;
var uuid = require ( ' uuid ' ) ; var vasync:==:require ( ' vasync ' ) ;
var nextCellSize = _ ref . nextCellSize ; var nextScrollToIndex:==:_ ref . nextScrollToIndex ;
var nconf = require ( ' nconf ' ) ; var request:==:require ( ' request ' ) ;
var originalEvent = event . originalEvent ; var touches:==:originalEvent & & originalEvent . touches ;
var start = this . newBlock ( ' start for ' + genIndex ) ; var skip:==:this . newBlock ( ' skip for ' + genIndex ) ;
var type = options . type  |  |  ( this . is_post ( ) ? ' article ' : ' website ' ) ; var url:==:options . url  |  |  this . url ;
var offset = active . bounds . offset ; var size:==:active . bounds . size ;
var server = opts . server ; var printLog:==:opts . printLog ;
var creators = opts . creators  |  |  [ ] ; var role:==:opts . role  |  |  ' initiator ' ;
var request = require ( ' request ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var rightCalendar = this . rightCalendar ; var startDate:==:this . startDate ;
var offsetVector = _ _ webpack_require _ _ ( 13 ) . offsetVector ; var fontStringify:==:_ _ webpack_require _ _ ( 13 ) . fontStringify ;
var Lax = db . model ( ' embeddedLax ' , new schema ( dox : [ lax ] , strict : false ) , ' embdoc ' + random ( ) ) ; var strict:==:db . model ( ' embeddedStrict ' , new schema ( dox : [ strict ] , strict : false ) , ' embdoc ' + random ( ) ) ;
var items = this . itemsData . get ( ) ; var fieldId:==:this . itemsData . _ fieldId ;
var c = computed ( function ( ) return String ( a . get ( ) * b . get ( ) ) ) ; var buf:==:buffer ( ) ;
var createStatementList = parseTreeFactory . createStatementList ; var createStringLiteral:==:parseTreeFactory . createStringLiteral ;
var tween = tweens [ i ] ; var target:==:tween . _ target ;
var valueDim = opt . valueDim ; var animationModel:==:symbolMeta . animationModel ;
var moment = require ( ' moment ' ) ; var fs:==:require ( ' fs ' ) ;
var SCALE_BY_DISTANCE_INDEX = pointPrimitive . scale_by_distance_index = 6 ; var translucency_by_distance_index:==:pointPrimitive . translucency_by_distance_index    7 ;
var jsunit = goog . require ( ' goog . testing . jsunit ' ) ; var testSuite:==:goog . require ( ' goog . testing . testSuite ' ) ;
var integration = require ( ' analytics . js - integration ' ) ; var foldl:==:require ( ' foldl ' ) ;
var frames = this . channel _ . peerWindowObject _ . frames ; var length:==:frames . length ;
var options = this . options ; var scale:==:Math . pow ( viewport . _ scale , options . scaleResponse ) ;
var dataset = me . chart . data . datasets [ point . _ datasetIndex ] ; var index:==:point . _ index ;
var w = rect . width ; var h:==:rect . height ;
var proc = imports . proc ; var api:==:imports . api ;
var plugins = this . plugins ; var verbose:==:this . verbose ;
var passwordException = sharedUtil . passwordException ; var passwordResponses:==:sharedUtil . passwordResponses ;
var fontType = fontType  |  |  ' helvetica ' ; var textColorFreq:==:textColorFreq  |  |  ' # fff ' ;
var mag = ID ( ' mag ' ) ; var r:==:document . createElementns ( svg_ns , ' rect ' ) ;
var name = fn . name ; var stack:==:new Error ( ) . stack ;
var width = crunch . _ crn_get_width ( src , srcSize ) ; var height:==:crunch . _ crn_get_height ( src , srcSize ) ;
var encode = compiler . encode ; var escape:==:compiler . escape ;
var xAxisTitle = lineDotChart . defaultSettings . xAxisTitle ; var yAxisTitle:==:lineDotChart . defaultSettings . yAxisTitle ;
var data = this . data ; var viewport:==:options . viewport ;
var u = o . core . utils ; var Runtime:==:o . runtime . Runtime ;
var max = req . query . max  |  |  10 ; var prefix:==:req . query . prefix  |  |  '' ;
var protractor = require ( ' gulp - protractor ' ) . protractor ; var typescript:==:require ( ' gulp - typescript ' ) ;
var INVALID_CHARACTER_ERR   = exceptionCode . invalid_character_err   = ( ( exceptionMessage [ 5 ] = ' invalid character ' ) , 5 ) ; var no_data_allowed_err:==:exceptionCode . no_data_allowed_err      ( ( exceptionMessage [ 6 ]   ' no data allowed ' ) , 6 ) ;
var div = ownerDocument . createElement ( ' div ' ) ; var type:==:this . _ currentElement . type ;
var offsetX = event . offsetX = = = undefined ? event . layerX : event . offsetX ; var offsetY:==:event . offsetY      undefined ? event . layerY : event . offsetY ;
var fclone = require ( ' fclone ' ) ; var fs:==:require ( ' fs ' ) ;
var memberLookupExpression = traceur . syntax . trees . memberLookupExpression ; var moduleDeclaration:==:traceur . syntax . trees . moduleDeclaration ;
var transparency = powerbi . dataViewObject . getValue ( forecastObject , forecastPropertyNames . transparency , forecastHelper . defaults . transparency ) ; var style:==:powerbi . dataViewObject . getValue ( forecastObject , forecastPropertyNames . style , forecastHelper . defaults . style ) ;
var data = this . data ; var type:==:this . _ getNodeType ( data . type ) ;
var i d = parsed . i d ; var path:==:parsed . path ;
var anchor   = options . anchor  |  |  source . position ; var cap:==:options . cap ;
var dx = Math . max ( 0 , Math . min ( bounds . width , mxUtils . getValue ( this . state . style , ' dx ' , internalStorageShape . prototype . dx ) ) ) ; var dy:==:math . max ( 0 , math . min ( bounds . height , mxUtils . getValue ( this . state . style , ' dy ' , internalStorageShape . prototype . dy ) ) ) ;
var setActive = docSet . getByLongname ( ' setActive ' ) [ 0 ] ; var setBirthYear:==:docSet . getByLongname ( ' setBirthYear ' ) [ 0 ] ;
var _ bitshift64Lshr = module [ ' _ bitshift64Lshr ' ] = asm [ ' _ bitshift64Lshr ' ] ; var _ bitshift64Shl:==:module [ ' _ bitshift64Shl ' ]    asm [ ' _ bitshift64Shl ' ] ;
var value = this . value ; var error:==:[ this . error ] ;
var vertSizef = this . morph . _ vertSizef ; var offsetpf:==:this . morph . _ offsetpf ;
var t = HTMLCSS . TeX . rule_thickness * scale ; var h:==:( sub |  | presub ) . bbox . h , d    ( sup |  | presup ) . bbox . d ;
var bone = this . bones [ slotData . boneData . index ] ; var slot:==:new spine . slot ( slotData , bone ) ;
var colors    = require ( ' colors ' ) ; var child_process:==:require ( ' child_process ' ) ;
var path = require ( ' path ' ) ; var assert:==:require ( ' assert ' ) . ok ;
var Animated = require ( ' Animated ' ) ; var nativeModules:==:require ( ' nativeModules ' ) ;
var numberPatternre = number . _ numberPatternre ; var numberPattern:==:positivePattern . match ( numberPatternre ) ;
var instance = hello ( ' instance ' ) ; var descendent:==:instance . use ( ' descendent ' ) ;
var currency = order . first_currency ; var issuer:==:order . first_issuer ;
var w , h , win = window , doc = document ; var body:==:doc . body ;
var command = commands [ i ] ; var pass:==:defined ( command . pass ) ? command . pass : Pass . OPAQUE ;
var timeline = this . timeline ; var node:==:this . node ;
var which = require ( ' which ' ) ; var proxyquire:==:require ( ' proxyquire ' ) . noCallThru ( ) . noPreserveCache ( ) ;
var target = $ ( e . target ) ; var name:==:get_name ( target ) ;
var lastRenderedStartIndex = _ ref2 . lastRenderedStartIndex ; var lastRenderedStopIndex:==:_ ref2 . lastRenderedStopIndex ;
var dynCall_iiiiiiiii = Module [ ' dynCall_iiiiiiiii ' ] = asm [ ' dynCall_iiiiiiiii ' ] ; var dynCall_iiiii:==:Module [ ' dynCall_iiiii ' ]    asm [ ' dynCall_iiiii ' ] ;
var southSkirtHeight = isNorthChild ? ( shortestSkirt * 0 . 5 ) : this . _ southSkirtHeight ; var eastSkirtHeight:==:isEastChild ? this . _ eastSkirtHeight : ( shortestSkirt * 0 . 5 ) ;
var style = _ props . style ; var transitionEnabled:==:_ props . transitionEnabled ;
var start = pointToRangeBound ( selection . startPoint ) ; var end:==:pointToRangeBound ( selection . endPoint ) ;
var left = $ ( currentCell ) . offset ( ) . left ; var top:==:$ ( currentCell ) . offset ( ) . top ;
var span = document . getElementById ( ' span ' ) ; var p:==:document . getElementById ( ' p ' ) ;
var statusText = xhr . statusText  |  |  '' ; var response:==:( ' response ' in xhr ) ? xhr . response : xhr . responseText ;
var rimraf = require ( ' rimraf ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var grey400 = exports . grey400 = ' # bdbdbd ' ; var grey500:==:exports . grey500    ' # 9e9e9e ' ;
var length = rawStrings . length ; var other:==:other . raw ;
var isNumber = leafletHelpers . isNumber ; var isValidPoint:==:leafletHelpers . isValidPoint ;
var ops = unpacked . ops ; var charBank:==:unpacked . charBank ;
var search = this . searches [ s ] ; var operator:==:$ ( ' # grid_'+ this . name + ' _ operator_'+s ) . val ( ) ;
var O = Object ( this ) ; var len:==:O . length > > > 0 ;
var fluxStoreGroup = require ( ' fluxStoreGroup ' ) ; var invariant:==:require ( ' invariant ' ) ;
var Program = traceur . syntax . trees . Program ; var propertyMethodAssignment:==:traceur . syntax . trees . propertyMethodAssignment ;
var editor = env . editor ; var session:==:editor . session ;
var pointer = this . o . pointers [ key ] ; var label:==:this . o . labels [ pointer . uid ] ;
var corner = choice . corner ; var pos:==:choice . pos ;
var key = element . key ; var ref:==:element . ref ;
var data = this . props . data ; var status:==:data . get ( ' status ' ) ;
var createThisExpression = parseTreeFactory . createThisExpression ; var createTrueLiteral:==:parseTreeFactory . createTrueLiteral ;
var monthDay = app . monthDay ; var events:==:monthDay . events ;
var url = require ( ' url ' ) ; var path:==:require ( ' path ' ) ;
var draftModifier = require ( ' draftModifier ' ) ; var draftPasteProcessor:==:require ( ' draftPasteProcessor ' ) ;
var combo = theScope . combo ; var dropDown:==:theScope . dropDown ;
var older = slot . older ; var newer:==:slot . newer ;
var fs = require ( ' fs - extra ' ) ; var async:==:require ( ' async ' ) ;
var warn = sharedUtil . warn ; var pdfjs:==:sharedGlobal . pdfjs ;
var xhr = goog . labs . net . xhr ; var httpStatus:==:goog . net . httpStatus ;
var aspectRatio = canvas . aspectRatio ; var cropBox:==:self . cropBox ;
var request = require ( ' request ' ) ; var zlib:==:require ( ' zlib ' ) ;
var minY = this . minY ; var maxX:==:this . maxX ;
var createMemberExpression = parseTreeFactory . createMemberExpression ; var createStringLiteral:==:parseTreeFactory . createStringLiteral ;
var stdin = FS . createDevice ( devFolder , ' stdin ' , input ) ; var stdout:==:fs . createDevice ( devFolder , ' stdout ' , null , output ) ;
var slot = skeleton . slots [ this . slotIndex ] ; var frames:==:this . frames ;
var path = e . data . path ; var identifiers:==:e . data . identifiers ;
var optionComponent = _ ref . optionComponent ; var optionRenderer:==:_ ref . optionRenderer ;
var ownerDocument = anchor . ownerDocument ; var defaultView:==:ownerDocument . defaultView  |  |  ownerDocument . parentWindow ;
var i d = item . i d ; var download:==:downloadsCache [ i d ] ;
var maxmin = global . maxmin ; var randperm:==:global . randperm ;
var registerWrapper = scope . registerWrapper ; var setTreeScope:==:scope . setTreeScope ;
var format = require ( ' util ' ) . format ; var webpack:==:require ( ' webpack - stream ' ) ;
var spy = sinon . spy ( ) ; var p:==:new L . Popup ( ) . setLatLng ( new l . latLng ( 55 . 8 , 37 . 6 ) ) ;
var sortOrder = userFieldsRes . sortOrder ; var index:==:findBestMatchingIndex ( selector , userFields , sortOrder , indexes ) ;
var comp2 = name : ' key2 ' , content : ' some thing in comp2 ' ; var key3:==:' key3 ' ;
var xRange = this . xRange ; var yRange:==:this . yRange ;
var n = _ n ; var i:==:_ i ;
var timestamp = req . query . timestamp ; var nonce:==:req . query . nonce ;
var orderBy = rewriter . rewriteOrderBy ( this . orderByItems , from ) ; var select:==:rewriter . rewriteSelect ( this . selectItems , from ) ;
var a13 = this . a13 ; var a21:==:this . a21 ;
var c9 = imports . c9 ; var language:==:imports . language ;
var context = frameState . context ; var attributeLocations:==:primitive . _ attributeLocations ;
var extension = ( json . extensions & & json . extensions [ EXTENSIONS . KHR_MATERIALS_COMMON ] )  |  |  ; var lights:==:extension . lights  |  |  ;
var PI = stdlib . Math . PI ; var SQRT1_2:==:stdlib . Math . SQRT1_2 ;
var input = $ ( ' # input ' ) . val ( ) ; var delim:==:$ ( ' # delimiter ' ) . val ( ) ;
var root = config . root ; var context:==:config . context ;
var reactInputSelection = require ( ' reactInputSelection ' ) ; var reactInstanceMap:==:require ( ' reactInstanceMap ' ) ;
var $ wrap = self . $ wrap ; var cookieRedirect:==:conf . cookieRedirect ;
var editor = this . jsoneditor . getEditorClass ( schema_copy , this . jsoneditor ) ; var row:==:this . row_holder . appendChild ( this . theme . getTableRow ( ) ) ;
var startLoc = this . state . startLoc ; var potentialArrowAt:==:this . state . potentialArrowAt ;
var body = message . body ; var uid:==:body . uid ;
var shape = polylineVolume . shape ; var show:==:polylineVolume . show ;
var points = options . points ; var instance:==:options . instance ;
var x = wc . x ; var y:==:wc . y ;
var readdir = Promise . promisify ( require ( ' recursive - readdir ' ) ) ; var ejs:==:require ( ' ejs ' ) ;
var options   = bs . options ; var port:==:options . get ( ' port ' ) ;
var minimumBatchSize = _ ref3 . minimumBatchSize ; var rowCount:==:_ ref3 . rowCount ;
var end = ' endkey ' in opts ? opts . endkey : false ; var descending:==:' descending ' in opts ? opts . descending : false ;
var allOptions = _ _ webpack_require _ _ ( 49 ) . allOptions ; var configureOptions:==:_ _ webpack_require _ _ ( 49 ) . configureOptions ;
var STATUS_ERROR    = exports . STATUS_ERROR    = -1 ; var STATUS_INACTIVE:==:exports . STATUS_INACTIVE     0 ;
var width = params . width  |  |  20 ; var fillStyle:==:params . fillStyle  |  |  ' black ' ;
var checked = this . checkedWaypoints [ mwpid ] ; var label:==:container . appendChild ( document . createElement ( ' label ' ) ) ;
var queryFile = require ( ' pg - promise ' ) . queryFile ; var path:==:require ( ' path ' ) ;
var renderer = this . _ renderer ; var ele:==:this . _ elementRef . nativeElement ;
var Ref = Git . Ref ; var Branch:==:Git . Branch ;
var width = this . width ; var height:==:this . params . height * this . params . pixelRatio ;
var rounded = _ props . rounded ; var style:==:_ props . style ;
var fs = require ( ' fs ' ) ; var uglify:==:require ( ' uglify - js ' ) ;
var bone1 = this . _ bone1 ; var target:==:this . targetPosition ;
var express = require ( ' express ' ) ; var sinon:==:require ( ' sinon ' ) ;
var width = parsePercent ( detailModel . get ( ' width ' ) , posInfo . r ) ; var height:==:parsePercent ( detailModel . get ( ' height ' ) , posInfo . r ) ;
var n = A . length , i , k , flag = false , B = QB . B , H = numeric . dot ( QB . Q , numeric . dot ( QH . H , numeric . transpose ( QB . Q ) ) ) ; var Q:==:new T ( numeric . dot ( QB . Q , QH . Q ) ) , Q0 ;
var filename = attrs . filename = node . file . fullPath ; var str:==:node . file . str ;
var context = scene . _ context ; var shadowsEnabled:==:frameState . shadowHints . shadowsEnabled ;
var src = Blockly . utils . replaceMessageReferences ( options [ ' src ' ] ) ; var width:==:number ( blockly . utils . replaceMessageReferences ( options [ ' width ' ] ) ) ;
var $ ref = resolveUrl ( baseId , schema . $ ref ) ; var res:==:resolveSchema . call ( this , root , $ ref ) ;
var through2 = require ( ' through2 ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var net = require ( ' net ' ) ; var fs:==:require ( ' fs ' ) ;
var claimedLineDisplay = windows . devices . pointOfService . claimedLineDisplay ; var lineDisplayTextAttribute:==:windows . devices . pointOfService . lineDisplayTextAttribute ;
var createPostfixExpression = parseTreeFactory . createPostfixExpression ; var createUnaryExpression:==:parseTreeFactory . createUnaryExpression ;
var c = wt . c ; var d:==:wt . d ;
var objectHasOwnProperty = utils . importNow ( ' objectHasOwnProperty ' ) ; var overrideFunction:==:utils . overrideFunction ;
var bootstrap = require ( ' bootstrap ' ) ; var moment:==:require ( ' moment ' ) ;
var Product = db . model ( ' Product ' ) ; var Comment:==:db . model ( ' Comment ' ) ;
var record_include_mousemove = Test . anotherWay . _ record_control_get_element ( ' record_include_mousemove ' ) ; var record_omit_mousemove:==:test . anotherWay . _ record_control_get_element ( ' record_omit_mousemove ' ) ;
var search = location . search ; var state:==:location . state ;
var createPromiseCapability = sharedUtil . createPromiseCapability ; var customStyle:==:displaydomUtils . customStyle ;
var posts = config . posts ; var pages:==:config . pages ;
var y = options . y ; var low:==:options . low ;
var msg = payload : ' foo ' , _ msgid : ' 987654321 ' ; var m:==:n . metric ( ' info',msg,'15 mb ' ) ;
var shape = instance . shape ; var shapeArrow:==:instance . shapeArrow ;
var limeA700 = exports . limeA700 = ' # aeea00 ' ; var yellow50:==:exports . yellow50    ' # fffde7 ' ;
var util = require ( ' util ' ) ; var mime:==:require ( ' mime ' ) ;
var Person = db . model ( ' gh4263 ' , personSchema ) ; var blogPost:==:db . model ( ' gh4263_0 ' , blogPostSchema ) ;
var lightBlue500 = exports . lightBlue500 = ' # 03a9f4 ' ; var lightBlue600:==:exports . lightBlue600    ' # 039be5 ' ;
var cellWidth = self . cellWidth ( ) ; var cellHeight:==:self . cellHeight ( ) ;
var restoreOptions = that . restoreOptions ; var doc:==:$ ( document ) ;
var screenSpaceCameraController = scene . screenSpaceCameraController ; var enableCollisionDetection:==:screenSpaceCameraController . enableCollisionDetection ;
var denom = this . _ denominators = new Array ( order + 1 ) ; var xTable:==:this . _ xTable    new array ( order + 1 ) ;
var message = error . message  |  |  String ( error ) ; var filename:==:( error . filename ? ' ' + error . filename : ' ' ) ;
var path   = require ( ' path ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var jumpList = startScreen . jumpList ; var jumpListItem:==:startScreen . jumpListItem ;
var stream = this . mp3_stream ; var frame:==:this . frame ;
var message = error . message  |  |  error ; var next:==:domLib ( el ) . next ( ' . ' + class_invalid ) ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , sinewave ( 0 , 6 , 0 . 1 ) , opts ) ;
var fixedRowsTop = this . wot . getSetting ( ' fixedRowsTop ' ) ; var totalRows:==:this . wot . getSetting ( ' totalRows ' ) ;
var x = ( left . x < right . x ) ? left . x : right . x ; var y:==:( left . y < right . y ) ? left . y : right . y ;
var sinon = require ( ' sinon ' ) ; var path:==:require ( ' path ' ) ;
var event = track . event ( ) ; var properties:==:track . properties ( mapping ) ;
var source = channelManager . currentTuners . tuner1 . sources . source1 ; var channel:==:source . channels [ 1 ] ;
var isName = corePrimitives . isName ; var stream:==:coreStream . stream ;
var sel = provider . selectedItems ; var i:==:sel . indexOf ( node ) ;
var flags   = opts . cli . flags ; var output:==:flags . output ? path . resolve ( flags . output ) : path . join ( process . cwd ( ) , input ) ;
var createCaseClause = parseTreeFactory . createCaseClause ; var createStatementList:==:parseTreeFactory . createStatementList ;
var leftBoundary = this . _ leftBoundary ; var rightBoundary:==:this . _ rightBoundary ;
var emit = typeof emit = = ' boolean ' ? emit : true ; var $ dropdown:==:this . $ dropdown ;
var webpack = require ( ' webpack - stream ' ) ; var del:==:require ( ' del ' ) ;
var renderSelection = t . renderSelection ; var clearSelection:==:t . clearSelection ;
var vertexArray = defined ( computeCommand . vertexArray ) ? computeCommand . vertexArray : context . getViewportQuadVertexArray ( ) ; var shaderProgram:==:defined ( computeCommand . shaderProgram ) ? computeCommand . shaderProgram : createViewportQuadShader ( context , computeCommand . fragmentShaderSource ) ;
var unwrapIfNeeded = scope . unwrapIfNeeded ; var wrapNodeList:==:scope . wrapNodeList ;
var gulp    = require ( ' gulp ' ) ; var fs:==:require ( ' fs ' ) ;
var r = Math . round ( cpGlobal . hueTorgb ( p , q , tr ) * 255 ) ; var g:==:math . round ( cpGlobal . hueTorgb ( p , q , tg ) * 255 ) ;
var indent = self . indent ( now . line ) ; var length:==:value . length ;
var crypto = require ( ' crypto ' ) ; var path:==:require ( ' path ' ) ;
var tab = e . tab ; var doc:==:tab . path & & documents [ tab . path ] ;
var start = requestParameters & & requestParameters . startDate ; var end:==:requestParameters & & requestParameters . endDate ;
var height = parseInt ( localStorage . height ? localStorage . height : settings . defaultHeight ) ; var isMaximized:==:boolean ( parseInt ( localStorage . isMaximized ) ) ;
var batches = this . _ batches ; var length:==:batches . length ;
var api = scope . api . instance . styles ; var STYLE_SCOPE_ATTRIBUTE:==:api . STYLE_SCOPE_ATTRIBUTE ;
var draftModifier = require ( ' draftModifier ' ) ; var draftOffsetKey:==:require ( ' draftOffsetKey ' ) ;
var node = this . nodes [ 0 ] ; var tagName:==:node . tagName ;
var view = views [ name ] ; var pointer:==:view . pointer ;
var p = element . _ _ proto _ _ ; var meta:==:element . meta & & element . meta . properties ;
var flatten = require ( ' array - flatten ' ) ; var merge:==:require ( ' utils - merge ' ) ;
var State = traceur . codegeneration . generator . State ; var tryState:==:traceur . codegeneration . generator . tryState ;
var clearGlobeDepth = environmentState . clearGlobeDepth ; var useDepthPlane:==:environmentState . useDepthPlane ;
var textureIndexBuffer = this . _ textureIndexBuffer ; var uvPositionBuffer:==:this . _ uvPositionBuffer ;
var filter = require ( ' gulp - filter ' ) ; var fs:==:require ( ' fs ' ) ;
var activity = this . app . controllers . activity ; var controls:==:this . app . controllers . controls ;
var res = result . rows . item ( i ) ; var metadata:==:JSON . parse ( res . metadata ) ;
var font = this . _ font ; var actors:==:diagram . actors ;
var props = this . props ; var columns:==:props . columns ;
var sigma = options . get ( ' sigma ' ) ; var wilsonInterval:==:options . get ( ' wilsonInterval ' ) ;
var packageName = p . packageName ; var requestedVersion:==:p . requestedVersion ;
var type = S . token . type ; var name:==:as_property_name ( ) ;
var toFixed = fn . toFixed ; var uint16:==:fn . uint16 ;
var panels = imports . panels ; var commands:==:imports . commands ;
var tile = context . tiles [ tileIndex ] ; var packetsIterator:==:tile . packetsIterator ;
var initialState = ' initialState ' ; var realState:==:' realState ' ;
var insert = require ( ' gulp - insert ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var selenium = require ( ' selenium - standalone ' ) ; var querystring:==:require ( ' querystring ' ) ;
var pagexOffset = _ window . pagexOffset ; var pageyOffset:==:_ window . pageyOffset ;
var i d = docInfo . data . _ i d ; var rev:==:docInfo . data . _ rev ;
var x = Math . max ( readState . x  |  |  0 , 0 ) ; var y:==:math . max ( readState . y  |  |  0 , 0 ) ;
var _ im_get_fixed_len = Module [ ' _ im_get_fixed_len ' ] = asm [ ' _ im_get_fixed_len ' ] ; var _ im_cancel_last_choice:==:Module [ ' _ im_cancel_last_choice ' ]    asm [ ' _ im_cancel_last_choice ' ] ;
var connect = require ( ' gulp - connect ' ) ; var eslint:==:require ( ' gulp - eslint ' ) ;
var item = listbox1 . items ( ) . eq ( 0 ) ; var dataItem:==:listbox1 . dataItem ( item ) ;
var registerHandler = exports . registerHandler = proxySupportCode ( ' registerHandler ' ) ; var registerListener:==:exports . registerListener    proxySupportCode ( ' registerListener ' ) ;
var c9 = imports . c9 ; var tabManager:==:imports . tabManager ;
var url = require ( ' url ' ) ; var dns:==:require ( ' dns ' ) ;
var style = this . style ; var text:==:style . text ;
var type = result . type ; var value:==:result . value ;
var notify   = require ( ' gulp - notify ' ) ; var livereload:==:require ( ' gulp - livereload ' ) ;
var bRetrieve = oInit . bRetrieve ! = = undefined ? oInit . bRetrieve : defaults . bRetrieve ; var bDestroy:==:oInit . bDestroy !    undefined ? oInit . bDestroy : defaults . bDestroy ;
var V = new Vol ( this . sx , this . sy , this . depth , 0 . 0 ) ; var n:==:this . w . length ;
var min = this . minContainerOffset ( ) ; var max:==:this . maxContainerOffset ( ) ;
var util = require ( ' util ' ) ; var kaefer:==:require ( ' kaefer ' ) ;
var onCellEdit = this . props . options . onCellEdit ; var afterSaveCell:==:this . props . cellEdit . afterSaveCell ;
var name = content . getAttribute ( ' data - name ' ) ; var address:==:content . getAttribute ( ' data - address ' ) ;
var createMarker = leafletMarkersHelpers . createMarker ; var deleteMarker:==:leafletMarkersHelpers . deleteMarker ;
var promise = promiseData [ i ] ; var status:==:createElementWithClass ( ' div ' , ' status ' ) ;
var href = link . href ; var extensions:==:link . extensions ;
var gl = renderSession . gl ; var projection:==:renderSession . projection ;
var min = Math . min ( this . selectionStart , this . selectionEnd ) ; var max:==:math . max ( this . selectionStart , this . selectionEnd ) ;
var session = manager . session ; var pointers:==:input . pointers ;
var element = animationDetails . element ; var options:==:animationDetails . options  |  |  ;
var a3 = expected [ i ] . locals . a3 ; var b3:==:expected [ i ] . locals . b3 ;
var t = value_type ( s ) ; var mut:==:mutability ( s ) ;
var now = Date . now ( ) ; var target:==:ev . domEvent . target ;
var propertyPath = this . propertyPath ; var isDesc:==:this . isDesc ;
var Locale = require ( ' Locale ' ) ; var React:==:require ( ' React ' ) ;
var channel = value . channel ; var priority:==:value . priority ;
var path = require ( ' path ' ) ; var readFile:==:promise . promisify ( require ( ' fs ' ) . readFile ) ;
var label = textTrackQueue [ i ] . label ! = = undefined ? textTrackQueue [ i ] . label : textTrackQueue [ i ] . lang ; var lang:==:textTrackQueue [ i ] . lang ;
var exec = require ( ' child_process ' ) . exec ; var crypto:==:require ( ' crypto ' ) ;
var script = document . _ _ webdriver_evaluate [ ' script ' ] ; var args:==:document . _ _ webdriver_evaluate [ ' args ' ] ;
var min = typeof options . min ! = = ' undefined ' ? options . min . getTime ( ) : 1 ; var max:==:typeof options . max !    ' undefined ' ? options . max . getTime ( ) : 8640000000000000 ;
var iks = this . mesh . geometry . iks ; var bones:==:this . mesh . skeleton . bones ;
var post = m . post ; var p:==:pre . split ( ' , ' ) ;
var elementMultiplier = structure . elementMultiplier ; var isBigEndian:==:structure . isBigEndian ;
var totalColumns = priv . totalColumns ; var viewportWidth:==:priv . viewportWidth ;
var latitude = cartographic . latitude ; var longitude:==:cartographic . longitude ;
var getColCnt = t . getColCnt ; var getColWidth:==:t . getColWidth ;
var karma = require ( ' karma ' ) . server ; var argv:==:require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ;
var name = tree . name . literalToken ; var type:==:tree . typeAnnotation ;
var data = datastorage . allstatsrecords ; var days:==:datastorage . alldays ;
var reactdomNullInputValuePropHook = require ( ' reactdomNullInputValuePropHook ' ) ; var reactdomInvalidariaHook:==:require ( ' reactdomInvalidariaHook ' ) ;
var disableTouchRipple = _ props3 . disableTouchRipple ; var focusRippleColor:==:_ props3 . focusRippleColor ;
var Geolocation = Windows . Devices . Geolocation ; var App:==:WinJS . Application ;
var expandMemberLookupExpression = traceur . codegeneration . expandMemberLookupExpression ; var createArgumentList:==:parseTreeFactory . createArgumentList ;
var row = rowCache [ i ] ; var docRow:==:this . $ docRowCache [ i ] ;
var t = this ; var time:==:this . factory . time . getTime ( false , this . showSeconds ) ;
var index = event . detail . index ; var oldValue:==:event . detail . oldValue ;
var host = keystone . get ( ' ssl host ' )  |  |  keystone . get ( ' host ' ) ; var port:==:keystone . get ( ' ssl port ' ) ;
var selection = this . selection ; var rangeList:==:selection . rangeList ;
var startAngle = math . pi * options . series . pie . startAngle ; var radius:==:options . series . pie . radius > 1 ? options . series . pie . radius : maxRadius * options . series . pie . radius ;
var PRIMITIVE = emitValue ( s_primitive ) ; var offset:==:emitValue ( s_offset ) ;
var rollup = require ( ' rollup ' ) . rollup ; var path:==:require ( ' path ' ) ;
var type = args . type ; var items:==:args . items ;
var traits = identify . traits ( ) ; var i d:==:identify . userId ( ) ;
var width = chatspace . width ( ) ; var chat:==:$ ( ' # chatconversation ' ) ;
var array = $ ( this ) . attr ( ' array ' ) ; var pos:==:$ ( this ) . attr ( ' pos ' ) ;
var _ im_flush_cache = Module [ ' _ im_flush_cache ' ] = asm [ ' _ im_flush_cache ' ] ; var _ im_get_candidate_char:==:Module [ ' _ im_get_candidate_char ' ]    asm [ ' _ im_get_candidate_char ' ] ;
var uglify = require ( ' gulp - uglify ' ) ; var esformatter:==:require ( ' gulp - esformatter ' ) ;
var GET_GITHUB_FAIL = exports . GET_GITHUB_FAIL = ' GET_GITHUB_FAIL ' ; var CHAGE_USER_ID:==:exports . CHAGE_USER_ID    ' CHAGE_USER_ID ' ;
var node = child . node ; var width:==:( widthArray [ i ] . triggerWidth ) + 15 ;
var vfsid = req . params . vfsid ; var scope:==:req . params . scope ;
var scrollToRow = _ props3 . scrollToRow ; var width:==:_ props3 . width ;
var x = self . endPoints [ 0 ] . x ; var y:==:self . endPoints [ 0 ] . y ;
var A = recordsA [ i ] ; var B:==:recordsB [ i ] ;
var sceneCamera = shadowMap . _ sceneCamera ; var shadowMapCamera:==:shadowMap . _ shadowMapCamera ;
var textNode = textNodes [ j ] ; var text:==:textNode . textContent ;
var punct = ' punct ' ; var rel:==:' rel ' ;
var control = document . getElementById ( ' control ' ) ; var clientWidth:==:document . getElementById ( ' clientWidth ' ) ;
var origin = apps [ app ] . origin  |  |  null ; var installOrigin:==:apps [ app ] . installOrigin  |  |  null ;
var strict = options . strict ; var container:==:this . container ;
var e = locations [ ei ] ; var x:==:xmldoc . createElement ( ' wpt ' ) ;
var tint = tilingSprite . tint ; var verticies:==:this . vertices ;
var dataBound = this . dataBound ; var formatter:==:option . formatter ;
var getEncoding = coreEncodings . getEncoding ; var getStdFontMap:==:coreStandardFonts . getStdFontMap ;
var startDate = dateSrc . startDate ; var endDate:==:dateSrc . endDate ;
var realRoot = options . realRoot ; var alwaysScope:==:options . alwaysScope ;
var buffer = this . view . buffer ; var defaultColor:==:this . view . defaultColor ;
var isString = zrUtil . isString ; var defaults:==:zrUtil . defaults ;
var passwordFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' passwordFieldTestObject ' ) ) ; var textFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ;
var view = this . _ viewportRect ( ) ; var scale:==:view . _ scale ;
var pos = data . pos ; var session:==:doc . getSession ( ) . session ;
var x = v . x ; var y:==:v . y ;
var d = new assignmentNode ( a , i , v ) ; var e:==:d . clone ( ) ;
var NUMBER3 = C . NUMBER3 = 0x53 ; var STRING1:==:C . STRING1    0x61 ;
var width = billboard . width ; var height:==:billboard . height ;
var http = imports . http ; var c9:==:imports . c9 ;
var options = options  |  |  ; var name:==:options . name  |  |  ' template ' ;
var diffs = this . diffs = [ ] ; var realOut:==:this . realOut    [ ] ;
var tilePosition = sprite . tilePosition ; var tileScale:==:sprite . tileScale ;
var key = $ target . data ( ' key ' ) ; var snippet:==:$ target . data ( ' snippet ' ) ;
var defaults = Chart . defaults ; var helpers:==:Chart . helpers ;
var col = db . collection ( ' find_one_and_delete_with_generators ' ) ; var r:==:yield col . insertMany ( [ a : 1 , b : 1 ] , w : 1 ) ;
var el = this . el ; var testComponent:==:this . testComponent . prototype ;
var fs = require ( ' fs ' ) ; var nconf:==:require ( ' nconf ' ) ;
var babel = require ( ' babel ' ) ; var gaze:==:require ( ' gaze ' ) ;
var ext = extname ( path ) . slice ( 1 ) ; var filter:==:filters [ ext ] ;
var Person = db . model ( ' Person ' , personSchema ) ; var boss:==:person . discriminator ( ' boss ' , bossSchema ) ;
var rename = require ( ' gulp - rename ' ) ; var header:==:require ( ' gulp - header ' ) ;
var prop = property . data ( ' prop ' ) ; var empty:==:helper . isTrue ( property . data ( ' empty ' ) ) ;
var dotSizeMin = lineDotChart . defaultSettings . dotSizeMin ; var dotSizeMax:==:lineDotChart . defaultSettings . dotSizeMax ;
var ns1 = sphereBox_ns1 ; var ns2:==:sphereBox_ns2 ;
var DOMSTRING_SIZE_ERR    = exceptionCode . domstring_size_err    = ( ( exceptionMessage [ 2 ] = ' domString size error ' ) , 2 ) ; var hierarchy_request_err:==:exceptionCode . hierarchy_request_err     ( ( exceptionMessage [ 3 ]   ' hierarchy request error ' ) , 3 ) ;
var path = require ( ' path ' ) ; var exists:==:require ( ' fs ' ) . existsSync ;
var opts = _ _ alloyId35 . opts  |  |  ; var models:==:_ _ alloyId34 . models ;
var marginRight = options . marginRight ; var paddingTop:==:options . paddingTop ;
var utils = require ( ' keystone - utils ' ) ; var DISABLE_CSRF:==:process . env . DISABLE_CSRF      ' true ' ;
var x = vertexNode . getAttribute ( ' x ' ) ; var y:==:vertexNode . getAttribute ( ' y ' ) ;
var getRowHeader = window . getRowHeader ; var getRowAction:==:window . getRowAction ;
var i d = $ dialog . attr ( ' i d ' ) ; var scope:==:scopes [ i d ] ;
var enable = states . enable ; var length:==:enable . length ;
var number = options . number ; var enabled:==:! ! options . enabled ;
var temporary = opts . temporary ; var pluginName:==:opts . pluginName ;
var CP_APN_KEY = apnConst . cp_apn_key ; var default_apn_key:==:apnConst . default_apn_key ;
var y = Math . max ( Math . abs ( a . y ) , Math . abs ( b . y ) ) ; var z:==:Math . max ( Math . abs ( a . z ) , Math . abs ( b . z ) ) ;
var payload = ref . payload ; var options:==:ref . options ;
var element = this . element , o = this . options , colors = this . colorsDim ; var bar:==:element . children ( ' . bar : last - child ' ) ;
var containerAttrs = options . _ containerAttrs ; var replacerAttrs:==:options . _ replacerAttrs ;
var reverseOptions = localUtils . reverseOptions ; var filterInclusiveStart:==:localUtils . filterInclusiveStart ;
var high = options . high ; var direction:==:options . direction ;
var createBinaryOperator = parseTreeFactory . createBinaryOperator ; var createCallExpression:==:parseTreeFactory . createCallExpression ;
var Header = require ( ' Header ' ) ; var React:==:require ( ' React ' ) ;
var argumentMatcher = goog . require ( ' goog . testing . mockmatchers . argumentMatcher ' ) ; var mockControl:==:goog . require ( ' goog . testing . mockControl ' ) ;
var getColumnHeader = window . getColumnHeader ; var iNumberOfCols:==:window . iNumberOfCols ;
var relatedTarget = defaultValue ( options . relatedTarget , null ) ; var offsetx:==:defaultValue ( options . offsetx , 0 ) ;
var width = this . width ; var height:==:this . height ;
var broadcastService = _ appJsServicesBroadcastService [ ' default ' ] ; var deviceNameService:==:_ appJsServicesDeviceNameService [ ' default ' ] ;
var pos = settings . position ; var indent:==:settings . indent  |  |  [ ] ;
var assert = require ( ' assert ' ) ; var muk:==:require ( ' muk ' ) ;
var createdAt = timestamps . createdAt  |  |  ' createdAt ' ; var updatedAt:==:timestamps . updatedAt  |  |  ' updatedAt ' ;
var LITERAL_PROPERTY_NAME = ' LITERAL_PROPERTY_NAME ' ; var MEMBER_EXPRESSION:==:' MEMBER_EXPRESSION ' ;
var chalk = require ( ' chalk ' ) ; var table:==:require ( ' text - table ' ) ;
var a = a : b : 1 , c : 2 , y : 0 ; var b:==:a : b : 3 , d : 4 , z : 0 ;
var path   = require ( ' path ' ) ; var sinon:==:require ( ' sinon ' ) ;
var modelMatrix = collection . _ modelMatrix ; var polylineBuckets:==:collection . _ polylineBuckets    ;
var i = 4 * ( x * this . scale + this . imageData _ . width * y * this . scale ) ; var d:==:this . imageData _ . data ;
var s = memento & & memento . substring ( 1 ) ; var t:==:s ? s . capitalize ( ) : ' All ' ;
var range = math . range ; var cube:==:math . cube ;
var isDefined = leafletHelpers . isDefined ; var errorHeader:==:leafletHelpers . errorHeader ;
var Stream = require ( ' stream ' ) . Stream ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var syntheticuiEvent = require ( ' syntheticuiEvent ' ) ; var getEventCharCode:==:require ( ' getEventCharCode ' ) ;
var a = fulfillSoon ( ' a ' , 40 ) ; var b:==:' b ' ;
var maxForce = ( typeof ( options . maxForce ) = = = ' undefined ' ? number . max_value : options . maxForce ) ; var localAngleb:==:options . localAngleb  |  |  0 ;
var keyCommandDeleteWord = require ( ' keyCommandDeleteWord ' ) ; var keyCommandInsertNewline:==:require ( ' keyCommandInsertNewline ' ) ;
var programTree = traceur . syntax . trees . programTree ; var propertyNameShorthandTransformer:==:traceur . codegeneration . propertyNameShorthandTransformer ;
var points = this . points ; var point:==:( points . length - 1 ) * t ;
var svg = ! ! argv . svg ; var optipng:==:! ! argv . optipng ;
var decimalPlaces = $ . data ( this , ' numeric . decimalPlaces ' ) ; var key:==:e . charCode ? e . charCode : e . keyCode ? e . keyCode : 0 ;
var backdrop = new Animation ( ele . querySelector ( ' ion - backdrop ' ) ) ; var wrapper:==:new animation ( ele . querySelector ( ' . alert - wrapper ' ) ) ;
var jpxStream = coreStream . jpxStream ; var lzwStream:==:coreStream . lzwStream ;
var n = that . point2 . p . subtract ( that . point1 . p ) . normalize ( ) . normal ( ) ; var ac:==:point . p . subtract ( that . point1 . p ) ;
var size = props . size ; var avatar:==:context . muiTheme . avatar ;
var max = config . max  |  |  MAX ; var text:==:trim ( config . text ) ;
var reactInstrumentation = require ( ' reactInstrumentation ' ) ; var createMicrosoftUnsafeLocalFunction:==:require ( ' createMicrosoftUnsafeLocalFunction ' ) ;
var dx3 = Math . max ( parseFloat ( mxUtils . getValue ( this . state . style , ' dx2 ' , 0 ) ) , math . min ( parseFloat ( mxUtils . getValue ( this . state . style , ' dx4 ' , 0 ) ) , parseFloat ( mxUtils . getValue ( this . state . style , ' dx3 ' , 0 ) ) ) ) ; var dy3:==:math . max ( 0 , math . min ( 100 , parseFloat ( mxUtils . getValue ( this . state . style , ' dy3 ' , 0 ) ) ) ) ;
var y = xy . y + heightOverTwo ; var radius:==:dataPoint . radius * radiusScale ;
var services = app . ns ( ' services ' ) ; var ux:==:app . ns ( ' ux ' ) ;
var request = require ( ' request ' ) ; var validator:==:require ( ' validator ' ) ;
var nodemailer = require ( ' nodemailer ' ) ; var moment:==:require ( ' moment ' ) ;
var logger = common . logger ; var $ q:==:common . $ q ;
var x = this . x _ - xy . x ; var y:==:this . y _ - xy . y ;
var glob = require ( ' glob ' ) ; var fs:==:require ( ' fs . extra ' ) ;
var d16 = _ addDiv ( ' d16 ' ) , d17 = _ addDiv ( ' d17 ' ) , d18 = _ addDiv ( ' d18 ' ) ; var ep:==:_ jsPlumb . addEndpoint ( d18 ) , ep2    _ jsPlumb . addEndpoint ( d18 ) ;
var authority = _ ref . authority ; var client_id:==:_ ref . client_id ;
var core = breeze . core ; var metadataStore:==:breeze . metadataStore ;
var fs = r ( ' fs ' ) ; var path:==:r ( ' path ' ) ;
var promise = ctx . promise ; var receiver:==:ctx . receiver ;
var section = contents . createChild ( ' div ' , ' section ' ) ; var container:==:section . createChild ( ' div ' , ' settings - list - container ' ) ;
var start = message . data . start ; var granularity:==:message . data . granularity ;
var mongodb = require ( ' mongodb ' ) ; var sentiment:==:require ( ' sentiment ' ) ;
var View = require ( ' View ' ) ; var requireNativeComponent:==:require ( ' requireNativeComponent ' ) ;
var titleBar = this . titleBar ; var chromeBar:==:this . chromeBar ;
var valueSpec = options . valueSpec ; var key:==:options . key ;
var visibility = this . findEffectiveStyleProperty ( element , ' visibility ' ) ; var _ isDisplayed:==:this . _ isDisplayed ( element ) ;
var pair = pairs [ p ] ; var key:==:queryStringValue ( pair , ' key ' , namespaces . kml ) ;
var minutes   = makeGetter ( ' minutes ' ) ; var hours:==:makeGetter ( ' hours ' ) ;
var send = require ( ' send ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var c = document . createElement ( ' canvas ' ) ; var w:==:c . width    posterCache . width ;
var attributeExpressions = this . _ attributeExpressions ; var dataId:==:this . _ attributes [ dataIdAttr ] ;
var d = $ ( ' . edui - autotypesetpicker - body tr ' ) ; var e:==:d [ 7 ] . getElementsByTagName ( ' input ' ) ;
var colContentRight = t . colContentRight ; var getDaySegmentContainer:==:t . getDaySegmentContainer ;
var ui = imports . ui ; var save:==:imports . save ;
var u = uv [ 0 ] ; var v:==:uv [ 1 ] ;
var x = this . x ; var yl:==:this . yl ;
var dynCall_fii = Module [ ' dynCall_fii ' ] = asm [ ' dynCall_fii ' ] ; var dynCall_iii:==:Module [ ' dynCall_iii ' ]    asm [ ' dynCall_iii ' ] ;
var net = require ( ' net ' ) ; var os:==:require ( ' os ' ) ;
var trim = require ( ' trim ' ) ; var inherit:==:utils . inherit ;
var strict = ! ! this . opts . strict ; var noInterop:==:! ! this . opts . noInterop ;
var data = $ element . data ( ) ; var options:==:this . options ;
var hoverColor = _ props . hoverColor ; var onMouseEnter:==:_ props . onMouseEnter ;
var chai = require ( ' chai ' ) ; var url:==:require ( ' url ' ) ;
var casper = require ( ' casper ' ) . create ( ) ; var dump:==:require ( ' utils ' ) . dump ;
var tag = validator . escape ( String ( req . params . tag ) ) ; var page:==:parseInt ( req . query . page , 10 )  |  |  1 ;
var height = options [ ' height ' ] ; var size:==:option_consume ( options , ' size ' ) ;
var stream = this . stream ; var len:==:chunk . length ;
var url = require ( ' url ' ) ; var crypto:==:require ( ' crypto ' ) ;
var leaveToClass = data . leaveToClass ; var leaveActiveClass:==:data . leaveActiveClass ;
var location = win . location ; var doc:==:document ;
var dim = _ dim  |  |  false ; var text:==:_ text  |  |  ' Warning ' ;
var teal300 = exports . teal300 = ' # 4db6ac ' ; var teal400:==:exports . teal400    ' # 26a69a ' ;
var inner = view . inner ; var template:==:view . template ;
var d = document & & document . documentElement ; var b:==:document & & document . getElementsByTagName ( ' body ' ) [ 0 ] ;
var w = this . view . w , h = this . view . h ; var buffer:==:this . view . buffer ;
var camera = editor . camera ; var scene:==:editor . scene ;
var params = data . params ; var changeToken:==:+ + this . _ changeToken ;
var dynCall_iiii = Module [ ' dynCall_iiii ' ] = asm [ ' dynCall_iiii ' ] ; var dynCall_viiiiiiiiiiiiiii:==:Module [ ' dynCall_viiiiiiiiiiiiiii ' ]    asm [ ' dynCall_viiiiiiiiiiiiiii ' ] ;
var xtend = require ( ' xtend ' ) ; var inherits:==:require ( ' inherits ' ) ;
var _ strlen = Module [ ' _ strlen ' ] = asm [ ' _ strlen ' ] ; var _ memset:==:Module [ ' _ memset ' ]    asm [ ' _ memset ' ] ;
var iframe = this . _ iframe ; var location:==:this . _ location ;
var unyield = require ( ' unyield ' ) ; var utf8:==:require ( ' is - utf8 ' ) ;
var type = opts . type  |  |  ' cpu ' ; var timeoutMs:==:opts . timeoutMs  |  0 ;
var r = goog . color . alpha . hexToRgba ( testColors [ i ] [ 0 ] ) ; var t:==:testColors [ i ] [ 1 ] ;
var webdriver = require ( ' selenium - webdriver ' ) ; var chromedriver:==:require ( ' chromedriver ' ) ;
var fontStringify = _ _ webpack_require _ _ ( 13 ) . fontStringify ; var pack:==:_ _ webpack_require _ _ ( 13 ) . pack ;
var beforeLeave = data . beforeLeave ; var leave:==:data . leave ;
var naturalWidth = canvas . naturalWidth ; var naturalHeight:==:canvas . naturalHeight ;
var identifiers = parserConf . identifiers |  |  new regExp ( ' ^ [ _ a - za - z ] [ _ a - za - z0 - 9 ] * ' ) ; var hangingIndent:==:parserConf . hangingIndent  |  |  parserConf . indentUnit ;
var firstRect = firstRectList [ 0 ] ; var lastRect:==:lastRectList [ lastListLength - 1 ] ;
var title = _ . trim ( req . body . title ) ; var tab:==:_ . trim ( req . body . tab ) ;
var gulp = require ( ' gulp ' ) ; var wrench:==:require ( ' wrench ' ) ;
var images = [ ' gulpfile . js ' ] . concat ( pkg . paths . images ) ; var js:==:[ ' gulpfile . js ' ] . concat ( pkg . paths . js ) ;
var denseMatrix = math . type . denseMatrix ; var det:==:math . det ;
var i d = data . _ i d ; var rev:==:data . _ rev ;
var fs = require ( ' fs ' ) ; var url:==:require ( ' url ' ) ;
var _ strlen = Module [ ' _ strlen ' ] = asm [ ' _ strlen ' ] ; var _ im_reset_search:==:Module [ ' _ im_reset_search ' ]    asm [ ' _ im_reset_search ' ] ;
var s2 = _ s2 ; var i2:==:_ i2 ;
var h1 = this . h1 ; var h2:==:this . h2 ;
var doc = win . document ; var style:==:doc . createElement ( ' style ' ) ;
var component = components [ i d ] ; var entity:==:component . entity ;
var serie = n . series [ i ] ; var data:==:serie . data ;
var pos = symbol . position ; var quadraticAt:==:curveUtil . quadraticAt ;
var first_issuer = $ scope . order . first_issuer ; var second_currency:==:$ scope . order . second_currency ;
var SHOW_INDEX = pointPrimitive . show_index = 0 ; var position_index:==:pointPrimitive . position_index    1 ;
var Container = Hilo . Container ; var canvasRenderer:==:hilo . canvasRenderer ;
var User = mongoose . model ( ' User ' , userSchema ) ; var user:==:db . collection ( ' user ' ) ;
var properties = track . properties ( )  |  |  ; var total:==:track . revenue ( )  |  |  track . total ( )  |  |  0 ;
var vertices = node . _ vertices ; var uvs:==:node . _ uvs ;
var channelRequest = goog . labs . net . webChannel . channelRequest ; var requestStats:==:goog . labs . net . webChannel . requestStats ;
var a = event . bodyA . parent ; var b:==:event . bodyB . parent ;
var dataLabelUtils = powerbi . visuals . dataLabelUtils ; var svgUtil:==:powerbi . visuals . svgUtil ;
var _ htOption = this . _ htOption ; var _ el:==:this . _ el ;
var extensionPanel = declareInterfaceClass ( extensionPanelImpl ) ; var extensionSidebarPane:==:declareInterfaceClass ( extensionSidebarPaneImpl ) ;
var gulp = require ( ' gulp ' ) ; var run:==:require ( ' run - sequence ' ) ;
var nodemailer = require ( ' nodemailer ' ) ; var moment:==:require ( ' moment - timezone ' ) ;
var indices = _ ref5 . indices ; var isScrolling:==:_ ref5 . isScrolling ;
var computed = mobx . computed ; var transaction:==:mobx . transaction ;
var center = ' center ' in options ? lngLat . convert ( options . center ) : this . getCenter ( ) ; var zoom:==:' zoom ' in options ? + options . zoom : startZoom ;
var showExpandableButton = _ props . showExpandableButton ; var style:==:_ props . style ;
var dynCall_vi = Module [ ' dynCall_vi ' ] = asm [ ' dynCall_vi ' ] ; var dynCall_v:==:Module [ ' dynCall_v ' ]    asm [ ' dynCall_v ' ] ;
var userManager = exports . userManager = _ _ webpack_require _ _ ( 326 ) ; var accessTokenEvents:==:exports . accessTokenEvents    _ _ webpack_require _ _ ( 335 ) ;
var timeline = vis . timeline ; var Range:==:timeline . Range ;
var disableFocusRipple = _ props2 . disableFocusRipple ; var disableKeyboardFocus:==:_ props2 . disableKeyboardFocus ;
var bounds = globe . bounds ( view ) ; var velocityScale:==:bounds . height * primaryGrid . particles . velocityScale ;
var hierarchyNav = this . owner . hierarchyNavigator ; var row:==:this . _ grid . getOrCreateRow ( rowIndex + this . _ rowLayoutManager . _ gridOffset ) ;
var del = require ( ' del ' ) ; var glob:==:require ( ' glob ' ) ;
var MUST_USE_ATTRIBUTE = domProperty . injection . must_use_attribute ; var must_use_property:==:domProperty . injection . must_use_property ;
var expect = require ( ' chai ' ) . expect ; var rollup:==:require ( ' rollup ' ) . rollup ;
var NO_MODIFICATION_ALLOWED_ERR = exceptionCode . no_modification_allowed_err = ( ( exceptionMessage [ 7 ] = ' no modification allowed ' ) , 7 ) ; var not_found_err:==:exceptionCode . not_found_err       ( ( exceptionMessage [ 8 ]   ' not found ' ) , 8 ) ;
var headers = responseCache [ cacheKey ] . headers ; var statusCode:==:responseCache [ cacheKey ] . statusCode ;
var Y = cs . YW * fn_g ( M ) ; var Z:==:cs . ZW * fn_g ( N ) ;
var user = data & & data . userId & & workspace . getUser ( data . userId ) ; var type:==:msg . type ;
var userId = this . getOption ( ' userId ' , ref . push ( ) . key ) ; var userColor:==:this . getOption ( ' userColor ' , colorFromUserId ( userId ) ) ;
var x = mpos . x - THIS . pickerFace - this . pickerInset ; var y:==:mpos . y - this . pickerFace - this . pickerInset ;
var entities = dataSource . entities . values ; var polyline:==:entities [ 0 ] . polyline ;
var showModalAnimation = animation . showModalAnimation ; var hideModalAnimation:==:animation . hideModalAnimation ;
var removeAttribute = htmlElement . prototype . removeAttribute ; var setAttribute:==:htmlElement . prototype . setAttribute ;
var dispatchListener = event . _ dispatchListeners ; var dispatchid:==:event . _ dispatchiDs ;
var hash = context . hash ; var minLength:==:parseInt ( hash . minLength , 10 ) ;
var columnCount = parseFloat ( params . columnCount ) ; var columnxUnit:==:parseFloat ( params . columnxUnit ) ;
var start = this . startTime ; var end:==:this . endTime ;
var name = get_string_from_ptr ( ptr_name ) ; var flags:==:get_string_from_ptr ( ptr_flags ) ;
var lower = aabb . lowerBound [ axis ] ; var upper:==:aabb . upperBound [ axis ] ;
var observers = this . observers . slice ( 0 ) ; var len:==:observers . length ;
var isArray = sharedUtil . isArray ; var isString:==:sharedUtil . isString ;
var printStyle = _ _ webpack_require _ _ ( 144 ) . printStyle ; var allOptions:==:_ _ webpack_require _ _ ( 145 ) . allOptions ;
var serializeDate = typeof options . serializeDate = = = ' function ' ? options . serializeDate : defaults . serializeDate ; var encodeValuesOnly:==:typeof options . encodeValuesOnly      ' boolean ' ? options . encodeValuesOnly : defaults . encodeValuesOnly ;
var body = dom . getDocument ( ) . body ; var documentElement:==:dom . getDocument ( ) . documentElement ;
var user = this . analytics . user ( ) ; var products:==:track . products ( ) ;
var quests = _ getFormattedItemReference ( ' items . quests ' , _ . keys ( content . quests ) , ' numeric quantity ' ) ; var mounts:==:_ getFormattedItemReference ( ' items . mounts ' , _ . keys ( content . mountInfo ) , ' boolean ' ) ;
var badRequestError = errors . badRequestError ; var preconditionFailedError:==:errors . preconditionFailedError ;
var assert = require ( ' assert ' ) ; var equal:==:require ( ' assert - dir - equal ' ) ;
var word = Sk . builtin . list . prototype [ ' list_subscript _ ' ] . call ( words , i ) ; var cap:==:Sk . misceval . callsim ( mod . capitalize , word ) ;
var util = imports . util ; var ui:==:imports . ui ;
var yellow100 = exports . yellow100 = ' # fff9c4 ' ; var yellow200:==:exports . yellow200    ' # fff59d ' ;
var position = Cartesian3 . clone ( camera . position ) ; var right:==:Cartesian3 . clone ( camera . right ) ;
var events = goog . require ( ' goog . events ' ) ; var multiTestRunner:==:goog . require ( ' goog . testing . multiTestRunner ' ) ;
var blueGrey50 = exports . blueGrey50 = ' # eceff1 ' ; var blueGrey100:==:exports . blueGrey100    ' # cfd8dc ' ;
var delta = timeKeeper . delta ; var active:==:skeletons [ activeSkeleton ] ;
var scrollView = require ( ' scrollView ' ) ; var deprecatedPropType:==:require ( ' deprecatedPropType ' ) ;
var legendIcon = powerbi . visuals . legendIcon ; var legend:==:powerbi . visuals . legend ;
var touchmove = isTouch ? ' touchmove ' : ' mousemove ' ; var touchend:==:isTouch ? ' touchend ' : ' mouseup ' ;
var win = window ; var doc:==:document ;
var screen = document . getElementById ( ' si - sl - screen ' ) ; var container:==:screen . querySelector ( ' . container ' ) ;
var helper = instance . get ( ' helper ' ) ; var placeholder:==:instance . get ( ' placeholder ' ) ;
var p = this . el . up ( ' form ' )  |  |  Ext . getBody ( ) ; var c:==:p . child ( ' input [ name ' ' + this . el . dom . name+ ' ' ] : checked ' , true ) ;
var debug = require ( ' debug ' ) ( ' jsbin : upgrade ' ) ; var request:==:require ( ' request ' ) ;
var lastCameraView = this . _ lastCameraView ; var camera:==:this . _ camera ;
var fixedRowsBottom = this . wtSettings . getSetting ( ' fixedRowsBottom ' ) ; var fixedColumns:==:this . wtSettings . getSetting ( ' fixedColumnsLeft ' ) ;
var occurrence = occurrences [ eventId ] ; var len:==:occurrence . length ;
var s = new Schema ( mix : type : Schema . Types . Mixed , default : , shared : true ) ; var M:==:mongoose . model ( ' M2 ' , s ) ;
var delta = opt_delta  |  |  0 ; var order:==:opt_order  |  |  Blockly . PHP . ORDER_NONE ;
var b = this . beginValue ; var f:==:this . finishValue ;
var nunjucks = require ( ' nunjucks ' ) ; var inherits:==:require ( ' util ' ) . inherits ;
var fs = require ( ' fs ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var setup = config . setup  |  |  $ . noop ; var teardown:==:config . teardown  |  |  $ . noop ;
var element = elementFinder . findElement ( msg . element ) ; var el:==:createFocusElement ( msg . peer , element ) ;
var reactFiberReconciler = require ( ' reactFiberReconciler ' ) ; var reactGenericBatching:==:require ( ' reactGenericBatching ' ) ;
var indexNode = math . expression . node . indexNode ; var rangeNode:==:math . expression . node . rangeNode ;
var processColor = require ( ' processColor ' ) ; var requireNativeComponent:==:require ( ' requireNativeComponent ' ) ;
var ariadomPropertyConfig = require ( ' ariadomPropertyConfig ' ) ; var beforeInputEventPlugin:==:require ( ' beforeInputEventPlugin ' ) ;
var source = rawActivity . source ; var data:==:source . data ;
var eventproxy = require ( ' eventproxy ' ) ; var Message:==:models . Message ;
var assert = require ( ' assert ' ) ; var Parser:==:common . Parser ;
var curves = this . curves ; var i:==:frameIndex * curveTimeline . bezier_size ;
var cache = isUndefined ( v [ ' cache ' ] ) ? 1 : v [ ' cache ' ] ; var drag:==:isUndefined ( v [ ' drag ' ] ) ? '' : v [ ' drag ' ] ;
var stop = options . stop ; var isStartIncluded:==:options . isStartIncluded ;
var x = this . _ positionDelta . x * dt ; var y:==:this . _ positionDelta . y * dt ;
var cx = require ( ' cx ' ) ; var debounceCore:==:require ( ' debounceCore ' ) ;
var tabIds = response . tabIds ; var n:==:entries . length ;
var png = ! ! argv . png ; var svg:==:! ! argv . svg ;
var data = this . series . map ( function ( s ) return s . data ) ; var min:==:d3 . min ( data . map ( function ( d ) return d [ 0 ] . x ) ) ;
var env = CKEDITOR . env ; var i d:==:' cke _ ' + this . i d ;
var tab = e . tab ; var session:==:e . session ;
var key = keys [ i ] ; var actionCreator:==:actionCreators [ key ] ;
var name = this . transformAny ( tree . name ) ; var attributes:==:this . transformList ( tree . attributes ) ;
var Promise = _ _ dependency2 _ _ . Promise ; var denodeify:==:_ _ dependency3 _ _ . denodeify ;
var position = powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' runnerCounter ' ] [ ' position ' ] , pulseChart . defaultSettings . runnerCounter . position ) ; var fontSize:==:parseInt ( powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' runnerCounter ' ] [ ' fontSize ' ] , pulseChart . defaultSettings . runnerCounter . fontSize ) , 10 ) ;
var profile = sbx . data . profile ; var prop:==:sbx . properties . basal ;
var TASK = sym ( ' TASK ' ) ; var HELPER:==:sym ( ' HELPER ' ) ;
var merge = imports . threewaymerge ; var Menu:==:imports . Menu ;
var sets = params . sets ; var start:==:params . hasOwnProperty ( ' start ' ) ? params . start : 0 ;
var x1 = layer . x1  |  |  layer . frame . x ; var y1:==:layer . y1  |  |  layer . frame . y ;
var capLevelController = new config . capLevelController ( this ) ; var fpsController:==:new config . fpsController ( this ) ;
var lat = self . position . coords . latitude ; var lon:==:self . position . coords . longitude ;
var path = options . path . split ( ' ? ' ) [ 0 ] ; var settings:==:this . settings ( path ) ;
var align = _ ref3$align = = = undefined ? ' auto ' : _ ref3$align ; var containerSize:==:_ ref3 . containerSize ;
var IMPORT_SPECIFIER_SET = ' IMPORT_SPECIFIER_SET ' ; var IMPORT_TYPE_CLAUSE:==:' IMPORT_TYPE_CLAUSE ' ;
var text = message . data . text ; var padId:==:sessioninfos [ client . i d ] . padId ;
var pixelConverter = jsCommon . pixelConverter ; var createClassAndSelector:==:jsCommon . cssConstants . createClassAndSelector ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var debug:==:require ( ' debug ' ) ( ' connector ' ) ;
var fs   = require ( ' fs ' ) ; var io:==:require ( ' socket . io ' ) ;
var entityManager = firepad . entityManager ; var parseHtml:==:firepad . parseHtml ;
var busy = this . camera . emit . withArgs ( ' busy ' ) ; var ready:==:this . camera . emit . withArgs ( ' ready ' ) ;
var skipShapeProps = configuration . skipShapeProps ; var customValidators:==:configuration . customValidators  |  |  [ ] ;
var spawn = require ( ' child_process ' ) . spawn ; var exec:==:require ( ' child_process ' ) . exec ;
var force   = this . force ; var disp:==:this . disp ;
var normal = intersectConvex_normal ; var vector:==:intersectConvex_vector ;
var indigoA100 = exports . indigoA100 = ' # 8c9eff ' ; var indigoA200:==:exports . indigoA200    ' # 536dfe ' ;
var textDivs = task . _ textDivs ; var capability:==:task . _ capability ;
var istanbul = require ( ' istanbul ' ) ; var path:==:require ( ' path ' ) ;
var app = ns ( ' app ' ) ; var acx:==:ns ( ' acx ' ) ;
var inSelection = ev . inSelection ( ) ; var pagex:==:ev . pagex ;
var cellToDate = t . cellToDate ; var getColCnt:==:t . getColCnt ;
var multiValue = _ state . multiValue ; var options:==:_ state . options ;
var updateMarker = leafletMarkersHelpers . updateMarker ; var listenMarkerEvents:==:leafletMarkersHelpers . listenMarkerEvents ;
var a = locations [ ai ] ; var b:==:locations [ bi ] ;
var symbolSize = normalizeSymbolSize ( data . getItemVisual ( idx , ' symbolSize ' ) ) ; var color:==:data . getItemVisual ( idx , ' color ' ) ;
var name = path . node . name ; var remap:==:this . remaps [ name ] ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var token:==:require ( ' cst ' ) . token ;
var w = $ ( ' body ' ) . width ( ) ; var h:==:$ ( ' body ' ) . height ( ) ;
var y = this . position . y ; var z:==:this . position . z ;
var fs = require ( ' fs ' ) ; var five:==:require ( ' johnny - five ' ) ;
var props = this . props ; var dom:==:this . dom ;
var actionSheetios = require ( ' actionSheetios ' ) ; var f8Button:==:require ( ' f8Button ' ) ;
var r = this . _ rgba [ 0 ] ; var g:==:this . _ rgba [ 1 ] ;
var writeBinaryOptions = struct ( ' writeBinaryOptions ' ) ; var writer:==:struct ( ' writer ' ) ;
var op = opt_op  |  |  ' GET ' ; var params:==:opt_params  |  |  [ ] ;
var attribute = geometry . attributes [ attributeName ] ; var values:==:attribute . values ;
var abs = Math . abs ; var now:==:Date . now ;
var options = me . options ; var canvas:==:chart . canvas ;
var preservedValues = this . _ preservedValues ; var limit:==:this . _ limit ;
var parentSelector = conf . tearPage . parentSelector  |  |  ' div [ alog - alias = p-1 ] ' ; var body:==:$ ( document . body ) ;
var filePath = status . filePath ; var getSong:==:client . method ( ' getSong ' , filePath ) ;
var minimumHeights = wall . minimumHeights ; var maximumHeights:==:wall . maximumHeights ;
var uiSourceCode = searchResult . uiSourceCode ; var searchMatches:==:searchResult . searchMatches ;
var observableStringDictionary = babylon . observableStringDictionary ; var propertyChangedBase:==:babylon . propertyChangedBase ;
var innerHeight = win . innerHeight ; var scrollHeight:==:win . document . documentElement . scrollHeight ;
var regExp = platform . regExp ; var number:==:platform . number ;
var mm = require ( ' mm ' ) ; var should:==:require ( ' should ' ) ;
var pDiff = this . pDiff ; var vDiff:==:this . vDiff ;
var $ wrapper = node . $ wrapper ; var children:==:node . children ;
var styleSheet = require ( ' styleSheet ' ) ; var paragraph , heading1:==:require ( ' f8Text ' ) ;
var s = this . orientation . s ; var x:==:this . orientation . x ;
var width = options . width ; var marginLeft:==:options . marginLeft ;
var paths = ob . paths ; var lines:==:params . qstring . lines  |  |  0 ;
var provider = this . provider ; var i:==:layerConfig . vRange . indexOf ( node ) ;
var menu = $ ( ' # menu ' ) . show ( ) ; var scorecard:==:$ ( ' # scorecard ' ) . hide ( ) ;
var l = Number ( regExpResultArray [ 3 ] ) ; var a:==:number ( regExpResultArray [ 4 ] ) ;
var localRepo = options . localRepo ; var treeString:==:options . treeString ;
var spdy = require ( ' spdy ' ) ; var uuid:==:require ( ' uuid ' ) ;
var fontFamily = opts . fontFamily  |  |  constants . hoverfont ; var fontSize:==:opts . fontSize  |  |  constants . hoverfontsize ;
var flatCoordinates = gxTrackObject . flatCoordinates ; var when s:==:gxTrackObject . when s ;
var dracula = ' dracula ' ; var piggy:==:' misspiggy ' ;
var scale = BABYLON . Vector3 . fromArray ( node . scale  |  |  [ 1 , 1 , 1 ] ) ; var rotation:==:babylon . quaternion . fromArray ( node . rotation  |  |  [ 0 , 0 , 0 , 1 ] ) ;
var rel = link . rel ; var extensions:==:link . extensions ;
var defineStep = exports . defineStep = proxySupportCode ( ' defineStep ' ) ; var addTransform:==:exports . addTransform    proxySupportCode ( ' addTransform ' ) ;
var allTests = goog . global [ ' g_paralleltestrunner ' ] [ ' allTests ' ] ; var parallelFrames:==:goog . global [ ' g_paralleltestrunner ' ] [ ' parallelFrames ' ] ;
var left = _ left  |  |  function ( x ) return x ; var right:==:_ right  |  |  function ( x ) return x ;
var angle = data . angle ; var color:==:new THREE . Color ( data . color ) . getHex ( ) ;
var spriteMaterial = game . physics . p2 . createMaterial ( ' spriteMaterial ' , player . body ) ; var worldMaterial:==:game . physics . p2 . createMaterial ( ' worldMaterial ' ) ;
var denodeify = RSVP . denodeify ; var readFile:==:denodeify ( fs . readFile ) ;
var el = e . target . querySelector ( ' . control ' )  |  |  e . target ; var checked:==:el . checked ;
var promise = goog . require ( ' goog . labs . promise ' ) ; var mockClock:==:goog . require ( ' goog . testing . mockClock ' ) ;
var deepPurplea200 = exports . deepPurplea200 = ' # 7c4dff ' ; var deepPurplea400:==:exports . deepPurplea400    ' # 651fff ' ;
var contactManager = contacts . contactManager ; var contact:==:contacts . contact ;
var max = Math . max ( x0 , x1 , x2 ) ; var min:==:Math . min ( x0 , x1 , x2 ) ;
var atan = Math . atan ; var atan2:==:Math . atan2 ;
var ellipsoid = projection . ellipsoid ; var maximumHeight:==:options . maximumHeight ;
var point = options & & options . point ; var tolerance:==:options & & options . tolerance ;
var name = descriptor . name ; var config:==:descriptor . config ;
var block = this . block _ ; var blockLength:==:this . blockLength _ ;
var stateMachine = traceur . syntax . trees . stateMachine ; var switchStatement:==:traceur . syntax . trees . switchStatement ;
var y = positions [ i + 1 ] + center . y ; var z:==:positions [ i + 2 ] + center . z ;
var period   = options . period ; var dampingRatio:==:options . dampingRatio ;
var axisType = powerbi . visuals . axisType ; var axisScale:==:powerbi . visuals . axisScale ;
var cssnano = require ( ' gulp - cssnano ' ) ; var autoprefixer:==:require ( ' gulp - autoprefixer ' ) ;
var createDisplayNameGetter = powerbi . data . createDisplayNameGetter ; var selectionManager:==:powerbi . visuals . utility . selectionManager ;
var node = startnode ; var len:==:( 0 - startnode . length )  |  |  0 ;
var timeWindowRight = this . _ timeWindowRight ; var timeWindowLeft:==:this . _ timeWindowLeft - this . _ paddingLeftTime ;
var ui = imports . ui ; var focusManager:==:imports . focusManager ;
var guardBits = quantizationParameters . guardBits ; var transformation:==:codingStyleParameters . transformation ;
var Package = protocol . Package ; var logger:==:require ( ' pomelo - logger ' ) . getLogger ( ' pomelo ' , _ _ filename ) ;
var q = readmpInt ( der , ' q ' ) ; var g:==:readmpInt ( der , ' g ' ) ;
var inc = semver . inc ; var diff:==:semver . diff ;
var right = this . transformAny ( tree . right ) ; var home:==:this . peekState ( ) . home ;
var texthScale = current . texthScale * fontDirection ; var fontMatrix:==:current . fontMatrix  |  |  font_identity_matrix ;
var Unit = math . type . Unit ; var prod:==:math . prod ;
var lon = coerce ( ' lon ' )  |  |  [ ] ; var lat:==:coerce ( ' lat ' )  |  |  [ ] ;
var fork = require ( ' child_process ' ) . fork ; var fs:==:require ( ' fs ' ) ;
var clone = require ( ' clone ' ) ; var assert:==:require ( ' assert ' ) ;
var brfs = require ( ' brfs ' ) ; var ecstatic:==:require ( ' ecstatic ' ) ;
var User = db . model ( ' userWithStringId ' , userSchema , random ( ) ) ; var note:==:db . model ( ' noteWithStringId ' , noteSchema , random ( ) ) ;
var y = point . y ; var radius:==:point . radius ;
var tr = d . createElement ( ' tr ' ) ; var th:==:d . createElement ( ' th ' ) ;
var v = goog . vec . vec3f . createFromValues ( 3 , 4 , 5 ) ; var s:==:goog . vec . vec3f . createFromValues ( 6 , 7 , 8 ) ;
var editors = imports . editors ; var ui:==:imports . ui ;
var initRowActions = window . initRowActions ; var setFocusOutsideOfTable:==:window . setFocusOutsideOfTable ;
var arg = a . arg ( ) ; var abs:==:a . abs ( ) ;
var http    = require ( ' http ' ) ; var https:==:require ( ' https ' ) ;
var request = require ( ' request ' ) ; var unzip:==:require ( ' unzip ' ) ;
var source = element . _ source ; var owner:==:element . _ owner ;
var parseQueryString = _ props . parseQueryString ; var stringifyQuery:==:_ props . stringifyQuery ;
var OBJECT_PATTERN_FIELD = ' OBJECT_PATTERN_FIELD ' ; var OBJECT_TYPE:==:' OBJECT_TYPE ' ;
var g = _ addGroupAndDomElement ( _ jsPlumb , ' g1 ' ) ; var d1:==:_ addDiv ( ' d1 ' ) ;
var user = getAttribute ( ' data - user ' , ' user ' ) ; var host:==:getAttribute ( ' data - host ' , ' localhost ' ) ;
var cancel = this . cancel ; var bounds:==:globe . bounds ( view ) ;
var dynamic = ref . dynamic ; var classResult:==:ref . classResult ;
var cssVar = require ( ' cssVar ' ) ; var cx:==:require ( ' cx ' ) ;
var op = $ . extend ( data : , dialogId : ' ' , callback : null , options ) ; var dialog:==:( op . dialogId & & $ ( ' body ' ) . data ( op . dialogId ) )  |  |  this . _ current ;
var p1 = triangleNode . getAttribute ( ' p1 ' ) ; var p2:==:triangleNode . getAttribute ( ' p2 ' ) ;
var buttons = buttonsDefaults ( selectorIn , selectorOut , calendar ) ; var visible:==:coerce ( ' visible ' , buttons . length > 0 ) ;
var circle = _ props . circle ; var rounded:==:_ props . rounded ;
var reactdomFeatureFlags = require ( ' reactdomFeatureFlags ' ) ; var reactFeatureFlags:==:require ( ' reactFeatureFlags ' ) ;
var parent = $ ( this ) . parents ( ' [ data - id ] ' ) ; var i d:==:parent . attr ( ' data - id ' ) ;
var hasZ = context [ ' hasZ ' ] ; var srsName:==:context [ ' srsName ' ] ;
var ellipsoid = Ellipsoid . clone ( parameters . ellipsoid ) ; var exaggeration:==:parameters . exaggeration ;
var templateFile = required ( options , ' templateFile ' ) ; var outputDir:==:required ( options , ' outputDir ' ) ;
var createPromiseCapability = sharedUtil . createPromiseCapability ; var util:==:sharedUtil . util ;
var index = e . index ; var section:==:e . section ;
var exec = require ( ' child_process ' ) . exec ; var read:==:require ( ' read ' ) ;
var util = require ( ' util ' ) ; var Pins:==:Board . Pins ;
var type = types [ j ] ; var value:==:values [ j ] ;
var assert = require ( ' assert ' ) ; var extend:==:require ( ' util ' ) . _ extend ;
var os = require ( ' os ' ) ; var url:==:require ( ' url ' ) ;
var reason = event . args [ ' data ' ] [ ' reason ' ] ; var stackTrace:==:event . args [ ' data ' ] [ ' stackTrace ' ] ;
var frame = args . frame ; var fileName:==:context . fileName . replace ( ' . jpg ' , ' _ reference . jpg ' ) ;
var startWindowEvery = this . startWindowEvery > 0 ? this . startWindowEvery : this . windowSize ; var windowSize:==:this . windowSize ;
var mkdirp    = require ( ' mkdirp ' ) ; var shelljs:==:require ( ' shelljs ' ) ;
var denodeify = _ _ dependency3 _ _ . denodeify ; var all:==:_ _ dependency4 _ _ . all ;
var Dialog = imports . Dialog ; var ui:==:imports . ui ;
var addPath = buildUtils . addPath ; var doUglify:==:buildUtils . doUglify ;
var writeCon = finalOptions . writeConcern ? finalOptions . writeConcern : ; var capabilities:==:self . s . topology . capabilities ( ) ;
var direction = ray . direction ; var hitPointWorld:==:intersectcapsule_hitpointworld ;
var bottomOverlay = this . bottomOverlay . clone ? this . bottomOverlay . clone . wtTable . holder : null ; var leftOverlay:==:this . leftOverlay . clone . wtTable . holder ;
var device = argv . device  |  |  ' iPhone6 + ' ; var verbose:==:( argv . verbose  |  |  argv . v ) ;
var forOfStatement = traceur . syntax . trees . forOfStatement ; var forStatement:==:traceur . syntax . trees . forStatement ;
var elementMultiplier = defaultValue ( structure . elementMultiplier , heightmapTessellator . default_structure . elementMultiplier ) ; var isBigEndian:==:defaultValue ( structure . isBigEndian , heightmapTessellator . default_structure . isBigEndian ) ;
var re = result . elements ; var me:==:m3 . elements ;
var x = xAnchor ; var y:==:yAnchor + ( i * height ) ;
var f8Header = require ( ' f8Header ' ) ; var statusBar:==:require ( ' statusBar ' ) ;
var Flags = reactdomComponentFlags ; var deleteListener:==:eventPluginHub . deleteListener ;
var currentConfig = localDiff . currentConfig ; var newConfig:==:localDiff . newConfig ;
var valueType = powerbi . valueType ; var primitiveType:==:powerbi . primitiveType ;
var array = event . data . array ; var postMessage:==:self . webkitPostMessage  |  |  self . postMessage ;
var createArrayLiteralExpression = traceur . codegeneration . parseTreeFactory . createArrayLiteralExpression ; var createBlock:==:traceur . codegeneration . parseTreeFactory . createBlock ;
var parseTreeVisitor = traceur . syntax . parseTreeVisitor ; var identifierToken:==:traceur . syntax . identifierToken ;
var width = doc . documentElement . boxObject . width ; var height:==:doc . documentElement . boxObject . height ;
var dxydj = trace . dxydj ( null , i0 , j0 , u , v ) ; var dbdj:==:trace . dbdj ( j0 , v ) ;
var eventHandler = goog . events . eventHandler ; var timer:==:goog . timer ;
var events = require ( ' events ' ) ; var path:==:require ( ' path ' ) ;
var symbolNode = math . expression . node . symbolNode ; var accessorNode:==:math . expression . node . accessorNode ;
var statTimer = sharedUtil . statTimer ; var unexpectedResponseException:==:sharedUtil . unexpectedResponseException ;
var oldId = event . data . oldId ; var newName:==:event . data . newName ;
var fulfill = ret . _ fulfill ; var reject:==:ret . _ reject ;
var blameData = this . blameColumn . blameData ; var selectedText:==:this . selectedText ;
var assert = require ( ' assert ' ) ; var vows:==:require ( ' vows ' ) ;
var cssbeautify = require ( ' gulp - cssbeautify ' ) ; var gulp:==:require ( ' gulp ' ) ;
var toWorldPoint = orbitCameraInputTouch . toWorldPoint ; var worldDiff:==:orbitCameraInputTouch . worldDiff ;
var registration = registrations [ j ] ; var options:==:registration . options ;
var height = _ ref3 . height ; var width:==:_ ref3 . width ;
var htmlTag = util . htmlTag ; var striphtml:==:util . striphtml ;
var codeMirror   = this . codeMirror ; var previewContainer:==:this . previewContainer ;
var sessionDescription = window . mozrtcSessionDescription  |  |  window . rtcSessionDescription ; var mediaStream:==:window . webkitMediaStream  |  |  window . mediaStream ;
var babel = require ( ' babelify ' ) ; var browserify:==:require ( ' browserify ' ) ;
var x = this . xAxisProperties . scale ( dataPoints [ index ] . x ) ; var y:==:this . yAxisProperties . scale ( dataPoints [ index ] . y ) ;
var maxFileSize = setting . get ( ' maxFileSizeBytes ' ) ; var exclude:==:setting . get ( ' exclude ' ) ;
var path      = require ( ' path ' ) ; var chalk:==:require ( ' chalk ' ) ;
var user = req . session . user  |  |  ; var production:==:( req . cookies & & req . cookies . debug ) ? false : helpers . production ;
var activityHelper = _ jsLibHelpers . activityHelper ; var achievementsHelper:==:_ jsLibHelpers . achievementsHelper ;
var rimraf = require ( ' rimraf ' ) ; var wiredep:==:require ( ' wiredep ' ) . stream ;
var fs = require ( ' fs ' ) ; var execSync:==:require ( ' child_process ' ) . execSync ;
var Promise = goog . require ( ' goog . Promise ' ) ; var Timer:==:goog . require ( ' goog . Timer ' ) ;
var s0 = Cartesian2 . fromArray ( texCoords , i0 * 2 , s0Scratch ) ; var s1:==:cartesian2 . fromArray ( texCoords , i1 * 2 , s1Scratch ) ;
var url   = config . url ; var complete:==:config . complete ;
var className = state . className ; var superClass:==:state . superClass ;
var offset = el . offset ( ) ; var left:==:offset . left - ( origin ? origin . left : 0 ) ;
var premultiply = options . premultiply ; var transparent:==:options . transparent ;
var chai = require ( ' chai ' ) ; var should:==:chai . should ( ) ;
var input = $ ( ' input . togetherjs - share - link ' ) ; var link:==:$ ( ' a . togetherjs - share - link ' ) ;
var title = tokens [ idx ] . title ? ( ' title= ' ' + escapeHtml ( replaceEntities ( tokens [ idx ] . title ) ) + ' ' ' ) : '' ; var alt:==:' alt ' ' + self . renderInlineAsText ( tokens [ idx ] . tokens , options , env ) + ' ' ' ;
var _ children = this . _ children ; var len:==:_ children . length , i , j , tmp ;
var picker = document . getElementById ( ' picker ' ) ; var values:==:document . getElementById ( ' values ' ) ;
var tweet = tweets [ c ] . text ; var user:==:tweets [ c ] . user . screen_name ;
var amber100 = exports . amber100 = ' # ffecb3 ' ; var amber200:==:exports . amber200    ' # ffe082 ' ;
var target = event . target  |  |  event . srcElement ; var dom:==:this . dom ;
var textDiv = textDivs [ i ] ; var textDivProperties:==:task . _ textDivProperties . get ( textDiv ) ;
var breakpoints = aceSession . $ breakpoints ; var doc:==:aceSession . c9doc ;
var state = this . props . node . get ( ' state ' ) ; var context:==:this . props . node . get ( ' context ' ) ;
var value = response [ ' value ' ]  |  |  ; var os:==:value [ ' os ' ] ;
var values = A . _ values ; var index:==:A . _ index ;
var tabs = parent . Ext . getCmp ( ' tabs ' ) ; var tab1:==:parent . ext . getCmp ( ' tab1 ' ) ;
var forkContext = this . forkContext ; var returned:==:context . returnedForkContext ;
var webpack = require ( ' webpack ' ) ; var uglify:==:require ( ' uglify - js ' ) ;
var r = processFeature ( dataSource , parent , groundOverlay , entityCollection , styleCollection , sourceUri , uriResolver , promises , context ) ; var entity:==:r . entity ;
var height = requiredHeight  |  |  this . _ renderingCanvas . height ; var x:==:viewport . x  |  |  0 ;
var ctx = me . _ chart . ctx ; var spanGaps:==:vm . spanGaps ;
var wrap = scope . wrap ; var wrappers:==:scope . wrappers ;
var code_point = utf8_code_point ; var lower_boundary:==:utf8_lower_boundary ;
var EOF = goog . labs . format . csv . Sentinels _ . EOF ; var EOR:==:goog . labs . format . csv . Sentinels _ . EOR ;
var plus = panel . nodes . plus ; var timer:==:panel . timer ;
var Frame = debug . Frame ; var Source:==:debug . Source ;
var source = mapping . source ; var consumer:==:consumers [ source ] ;
var max_size_y = this . resize_max_size_y ; var min_size_y:==:this . resize_min_size_y ;
var layer = layui . layer ; var device:==:layui . device ( ) ;
var fs = require ( ' fs ' ) ; var mustache:==:require ( ' mustache ' ) ;
var win = this . _ win ; var innerWidth:==:win [ ' innerWidth ' ] ;
var Column = require ( ' fixedDataTableColumnNew . react ' ) ; var columnGroup:==:require ( ' fixedDataTableColumnGroupNew . react ' ) ;
var target   = opt . get ( ' target ' ) ; var proxyReq:==:getProxyReqFunctions ( opt . get ( ' proxyReq ' ) , opt , bs ) ;
var menu = $ ( ' # acp - search . dropdown - menu ' ) ; var input:==:$ ( ' # acp - search input ' ) ;
var filters = parsedQuery . filters ; var n:==:parsedQuery . filters . length ;
var CONSTRUCTOR_TYPE = ' CONSTRUCTOR_TYPE ' ; var CONTINUE_STATEMENT:==:' CONTINUE_STATEMENT ' ;
var open = require ( ' open ' ) ; var path:==:require ( ' path ' ) ;
var body = this . transformAny ( tree . body ) ; var parameterList:==:this . transformAny ( tree . parameterList ) ;
var dataViewTransform = powerbi . data . dataViewTransform ; var valueType:==:powerbi . valueType ;
var func = this . func ( ) ; var receiver:==:this . receiver ( ) ;
var Ref = corePrimitives . ref ; var localPdfManager:==:corePdfManager . localPdfManager ;
var scheduler = instance . get ( ' scheduler ' ) ; var todayDate:==:scheduler . get ( ' todayDate ' ) ;
var body = this . client . findElement ( ' body ' ) ; var menuButton:==:this . client . findElement ( this . selectors . menuButton ) ;
var wrapper = this . wrapper ; var filterInput:==:this . filterInput ;
var exec = childProcess . exec ; var spawn:==:childProcess . spawn ;
var fragmentShaderSource = options . fragmentShaderSource ; var attributeLocations:==:options . attributeLocations ;
var autoprefixer = require ( ' autoprefixer ' ) ; var noErrorsPlugin:==:webpack . noErrorsPlugin ;
var bax = trace . baxis ; var a:==:trace . _ a    trace . a ;
var zapfDingbatsEncoding = coreEncodings . zapfDingbatsEncoding ; var getEncoding:==:coreEncodings . getEncoding ;
var match = sinon . match ; var stub:==:sinon . stub ;
var zlib = require ( ' zlib ' ) ; var fs:==:require ( ' fs ' ) ;
var kind = e . kind ; var userid:==:e . remoteUser  |  |  e . userid ;
var lineNumber = currentFrame . _ location . lineNumber ; var columnNumber:==:currentFrame . _ location . columnNumber ;
var getCellsPerWeek = t . getCellsPerWeek ; var formatDate:==:calendar . formatDate ;
var layers = leafletScope . layers ; var createLayer:==:leafletLayerHelpers . createLayer ;
var createAssignmentStatement = parseTreeFactory . createAssignmentStatement ; var createAssignStateStatement:==:parseTreeFactory . createAssignStateStatement ;
var speed = options . speed  |  |  100 ; var whileTrue:==:options . whileTrue  |  |  null ;
var assert = require ( ' assert - diff ' ) ; var async:==:require ( ' async ' ) ;
var tt = p * p , ttt = tt * p , u = 1 - p , uu = u * u , uuu = uu * u ; var ut:==:u * p , ut3    ut * 3 , uut3    u * ut3 , utt3    ut3 * p ;
var s = goog . vec . vec3f . createFromValues ( 6 , 7 , 8 ) ; var o:==:goog . vec . vec3f . createFromValues ( 9 , 10 , -11 ) ;
var width = depthTexture . width ; var height:==:depthTexture . height ;
var ecma = extra . ecmaFeatures ; var type:==:parser . type ;
var gl = this . gl ; var renderer:==:this . renderer ;
var type = this . type ; var layers:==:map . layers ;
var planes = this . planes ; var me:==:m . elements ;
var path = require ( ' path ' ) ; var lie:==:require ( ' lie ' ) ;
var dataType = $ ( this ) . attr ( ' dataType ' ) ; var dataLink:==:$ ( this ) . attr ( ' dataLink ' ) ;
var w = a . mb_w _ ; var h:==:a . mb_h _ ;
var t0 = shape . t0 ; var t1:==:shape . t1 ;
var sgvdata = require ( ' sgvdata ' ) ; var expand:==:require ( ' expand - braces ' ) ;
var reactNativeComponentTree = require ( ' reactNativeComponentTree ' ) ; var reactNativeInjection:==:require ( ' reactNativeInjection ' ) ;
var editor   = this . editor ; var classPrefix:==:this . classPrefix ;
var getCategoryIndexOfRole = powerbi . data . dataRoleHelper . getCategoryIndexOfRole ; var getMeasureIndexOfRole:==:powerbi . data . dataRoleHelper . getMeasureIndexOfRole ;
var prevSegment = prevSegments [ i ] ; var nextSegment:==:nextSegments [ i ] ;
var videoSendCodec = options . videoSendCodec  |  |  '' ; var videoRecvCodec:==:options . videoRecvCodec  |  |  '' ;
var dirname = require ( ' path ' ) . dirname ; var constantinople:==:require ( ' constantinople ' ) ;
var createBlock = traceur . codegeneration . parseTreeFactory . createBlock ; var createBooleanLiteral:==:traceur . codegeneration . parseTreeFactory . createBooleanLiteral ;
var callbacks = me . _ options . callbacks ; var beforeFooter:==:callbacks . beforeFooter . apply ( me , arguments ) ;
var yawObject = this . yawObject ; var previousMouseEvent:==:this . previousMouseEvent ;
var pre = m . pre ; var post:==:m . post . length ? expand ( m . post , false ) : [ '' ] ;
var EPOCHJD = constants . EPOCHJD ; var ONEDAY:==:constants . ONEDAY ;
var fs   = require ( ' fs - extra ' ) ; var path:==:require ( ' path ' ) ;
var selectionId = powerbi . visuals . selectionId ; var selectionIdBuilder:==:powerbi . visuals . selectionIdBuilder ;
var ev = event . originalEvent  |  |  event ; var timeStamp:==:ev . timeStamp  |  |  date . now ( ) ;
var url = joinUrls ( that . _ url , ' dbRoot . v5?output = proto ' ) ; var proxy:==:that . _ proxy ;
var containmentEdges = this . containmentEdges ; var edgeFieldsCount:==:this . _ edgeFieldsCount ;
var fulfill = follower . _ fulfillmentHandlerAt ( index ) ; var reject:==:follower . _ rejectionHandlerAt ( index ) ;
var legendData = powerbi . visuals . legendData ; var dataViewObject:==:powerbi . dataViewObject ;
var recordingModule = require ( ' nativeModules ' ) . shareRecordingModule ; var share:==:require ( ' share ' ) ;
var dataViewObject = powerbi . dataViewObject ; var visualDataRoleKind:==:powerbi . visualDataRoleKind ;
var port = serverOptions & & serverOptions . port  |  |  options . port  |  |  27017 ; var host:==:serverOptions & & serverOptions . host  |  |  ' localhost ' ;
var fs = require ( ' fs ' ) ; var etpl:==:require ( ' etpl ' ) ;
var health = this . health ; var pluginManager:==:this . pluginManager ;
var input1 = window . document . getElementById ( ' form1-input1 ' ) ; var input2:==:window . document . getElementById ( ' form1-input2 ' ) ;
var destructuringTransformer = traceur . codegeneration . destructuringTransformer ; var forOfTransformer:==:traceur . codegeneration . forOfTransformer ;
var min = Math . min ( r , g , b ) ; var max:==:Math . max ( r , g , b ) ;
var transport = content . transport ; var payloads:==:desc . payloads  |  |  [ ] ;
var QUX = docSet . getByLongname ( ' qux ' ) [ 0 ] ; var socket:==:docSet . getByLongname ( ' socket ' ) [ 0 ] ;
var proc = imports . proc ; var bridge:==:imports [ ' bridge . client ' ] ;
var from = nodes [ e . from ] ; var to:==:nodes [ e . to ] ;
var amount = ripple . Amount . from_json ( amountValue ) ; var currency:==:amount . currency ( ) ;
var width = Math . ceil ( dimensions . width ) + x + doublePadding ; var height:==:dimensions . height + doublePadding ;
var title = item . title ; var style:==:item . style ? ' style ' ' + item . style + ' ' ' : '' ;
var resolution = texture . baseTexture . resolution ; var textureIndex:==:texture . baseTexture . textureIndex ;
var isStream = corePrimitives . isStream ; var cipherTransformFactory:==:coreCrypto . cipherTransformFactory ;
var postAsset = hexo . model ( ' postAsset ' ) ; var post:==:hexo . model ( ' post ' ) ;
var right = getPropertyAsFloat ( style , ' border - right - width ' ) ; var bottom:==:getPropertyAsFloat ( style , ' border - bottom - width ' ) ;
var isExpressionTransformer = traceur . codegeneration . isExpressionTransformer ; var moduleTransformer:==:traceur . codegeneration . moduleTransformer ;
var vertexShader = material . _ _ webglShader . vertexShader ; var fragmentShader:==:material . _ _ webglShader . fragmentShader ;
var min = new Date ( range . min . valueOf ( ) - interval * 0 . 01 ) ; var max:==:new date ( range . max . valueOf ( ) + interval * 0 . 01 ) ;
var MODULE_SPECIFIER = ' MODULE_SPECIFIER ' ; var NAME_SPACE_EXPORT:==:' NAME_SPACE_EXPORT ' ;
var n = k . bitLength ( ) ; var s:==:k . getLowestSetBit ( ) ;
var update = aggregator . _ update ; var isDown:==:aggregator . _ isDown ;
var cyan300 = exports . cyan300 = ' # 4dd0e1 ' ; var cyan400:==:exports . cyan400    ' # 26c6da ' ;
var pixelConverter = jsCommon . pixelConverter ; var labelUtils:==:visuals . newDataLabelUtils ;
var userAgent = require ( ' userAgent ' ) ; var findAncestorOffsetKey:==:require ( ' findAncestorOffsetKey ' ) ;
var group = $ ( ' . controlgroup - single - select ' ) . controlgroup ( ) ; var select:==:group . find ( ' . ui - selectmenu - button ' ) ;
var textRenderingMode = sharedUtil . textRenderingMode ; var util:==:sharedUtil . util ;
var extrude = rectangleGeometry . _ extrude ; var extrudedHeight:==:rectangleGeometry . _ extrudedHeight ;
var isStaticOrKinematic = this . isStaticOrKinematic ( ) ; var mass:==:isStaticOrKinematic ? 0 : this . mass ;
var util = require ( ' util ' ) ; var path:==:require ( ' path ' ) ;
var dirname = require ( ' path ' ) . dirname ; var VFSROOT:==:terminal . VFSROOT ;
var velocityX = e . gesture . velocityX ; var velocityY:==:e . gesture . velocityY ;
var target = this . target ; var source:==:this . source ;
var isName = corePrimitives . isName ; var isStream:==:corePrimitives . isStream ;
var PDFJS = sharedGlobal . pdfjs ; var globalScope:==:sharedGlobal . globalScope ;
var dynCall_iiii = Module [ ' dynCall_iiii ' ] = asm [ ' dynCall_iiii ' ] ; var dynCall_viiiiiii:==:Module [ ' dynCall_viiiiiii ' ]    asm [ ' dynCall_viiiiiii ' ] ;
var grey700 = exports . grey700 = ' # 616161 ' ; var grey800:==:exports . grey800    ' # 424242 ' ;
var settings = editor . settings ; var skin:==:settings . skin !    false ? settings . skin  |  |  ' lightgray ' : false ;
var fs = require ( ' fs ' ) ; var zlib:==:require ( ' zlib ' ) ;
var space = config . space - BUFFER ; var min:==:config . min  |  |  MIN ;
var denseMatrix = math . type . denseMatrix ; var immutableDenseMatrix:==:math . type . immutableDenseMatrix ;
var gltf = model . gltf ; var accessor:==:gltf . accessors [ accessorId ] ;
var is = require ( ' is ' ) ; var keys:==:require ( ' keys ' ) ;
var clientX = e . clientX - pos . left + scrollLeft ; var clienty:==:e . clienty - pos . top + scrollTop ;
var duplex = dom . _ ms_duplex _ ; var vdom:==:( duplex  |  |  ) . vdom ;
var U1 = db . model ( ' U1 ' , uniqueUsernameSchema ) ; var u2:==:db . model ( ' u2 ' , uniqueUsernameSchema ) ;
var options = this . options ( ) ; var buildDir:==:options . buildDir ;
var commands = imports . commands ; var language:==:imports . language ;
var raw = o . raw ; var defval:==:o . defval ;
var createExpressionStatement = parseTreeFactory . createExpressionStatement ; var createFinally:==:parseTreeFactory . createFinally ;
var reversedAuthorPool = workspace . reversedAuthorPool ; var firstRow:==:config . firstRow ;
var stun = iceRestrictions . stun ; var turn:==:iceRestrictions . turn ;
var FINALLY = ' FINALLY ' ; var FOR_IN_STATEMENT:==:' FOR_IN_STATEMENT ' ;
var title = task . title ; var completed:==:task . completed ;
var writeFile = bluebird . promisify ( fs . writeFile ) ; var beautify:==:require ( ' js - beautify ' ) . js_beautify ;
var auth = imports . auth ; var http:==:imports . http ;
var progressDialogController = _ appJsControllersProgressDialogController [ ' default ' ] ; var proximityAppsController:==:_ appJsControllersProximityAppsController [ ' default ' ] ;
var took = logEntry . took ; var nextState:==:logEntry . nextState ;
var callback = task . callback ; var args:==:task . args ;
var JSX_ATTRIBUTE = ' JSX_ATTRIBUTE ' ; var JSX_ELEMENT:==:' JSX_ELEMENT ' ;
var sparse = math . sparse ; var mod:==:math . mod ;
var IMAGE_INDEX_INDEX = Billboard . IMAGE_INDEX_INDEX ; var COLOR_INDEX:==:Billboard . COLOR_INDEX ;
var createClassAndSelector = jsCommon . cssConstants . createClassAndSelector ; var newDataLabelUtils:==:powerbi . visuals . newDataLabelUtils ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var url:==:require ( ' url ' ) ;
var getMaxTime = t . getMaxTime ; var calendar:==:t . calendar ;
var tabManager = imports . tabManager ; var preview:==:imports . preview ;
var base64StreamDecoder = goog . require ( ' goog . net . streams . base64StreamDecoder ' ) ; var pbStreamParser:==:goog . require ( ' goog . net . streams . pbStreamParser ' ) ;
var save = imports . save ; var tooltip:==:imports . tooltip ;
var version = option_consume ( options , ' version ' ) ; var format:==:option_consume ( options , ' format ' ) ;
var inherits = utils . inherits ; var fs:==:require ( ' fs ' ) ;
var expectedUrl = params . expectedUrl ; var expectedUnsafeUrl:==:params . expectedUnsafeUrl ;
var up = SIMD . float32x4 ( upVec . x , upVec . y , upVec . z , 0 . 0 ) ; var f:==:simd . float32x4 . sub ( center , eye ) ;
var minificationFilter = defaultValue ( options . minificationFilter , textureMinificationFilter . linear ) ; var magnificationFilter:==:defaultValue ( options . magnificationFilter , textureMagnificationFilter . linear ) ;
var Stream = coreStream . stream ; var lexer:==:coreParser . lexer ;
var describe = lab . describe ; var it:==:lab . it ;
var renderTarget = this . renderTarget ; var generateMipmaps:==:renderTarget . generateMipmaps ;
var webChannelDebug = goog . labs . net . webChannel . webChannelDebug ; var wire:==:goog . labs . net . webChannel . wire ;
var locale = locale_locales__getLocale ( ) ; var utc:==:create_utc__createUTC ( ) . set ( setter , index ) ;
var type = msg . type ; var docId:==:data . docId ;
var right = ( this . right - origx ) * ratio + origx ; var top:==:( this . top - origy ) * ratio + origy ;
var r = resourceManager . getResource ( shape . resourceId ) ; var serialize:==:shape . serialize ( ) ;
var VERTICAL    = ' VERTICAL ' ; var HORIZONTAL:==:' HORIZONTAL ' ;
var coefficentsSign = this . coefficentsSign ; var contextLabels:==:this . contextLabels ;
var before = ! options  |  |  options . before ! = = false ; var after:==:! options  |  |  options . after !    false ;
var g = f . getGeometry ( ) ; var flatCoordinates:==:g . flatCoordinates ;
var index = this . lastMarker . index ; var line:==:this . lastMarker . lineNumber ;
var w = style . strokeWidth * widthFactor ; var str:==:style . strokeDashstyle ;
var Restaurant = db . model ( ' gh5162 ' , restaurantSchema ) ; var r:==:new restaurant ( ) ;
var vertexFormat = wallGeometry . _ vertexFormat ; var granularity:==:wallGeometry . _ granularity ;
var indigoA400 = exports . indigoA400 = ' # 3d5afe ' ; var indigoA700:==:exports . indigoA700    ' # 304ffe ' ;
var p = _ dereq _ ( ' path ' ) ; var dirname:==:p . dirname ;
var path = this . path . eval ( context ) ; var rootpath:==:this . _ fileInfo & & this . _ fileInfo . rootpath ;
var polylines = this . polylines ; var length:==:polylines . length ;
var satisfactory = getRangeValue ( categoricalValues . satisfactory , settings . values . satisfactoryPercent ) ; var good:==:getRangeValue ( categoricalValues . good , settings . values . goodPercent ) ;
var fs = require ( ' fs ' ) ; var bunyan:==:require ( ' bunyan ' ) ;
var name = req . params . name ; var user:==:userRepos [ name ] ;
var basename = path . basename ; var join:==:path . join ;
var fromPointToPixel = jsCommon . pixelConverter . fromPointToPixel ; var createEnumType:==:powerbi . createEnumType ;
var y = obj . y = = null ? 0 . 5 : obj . y ; var r:==:obj . r     null ? 0 . 5 : obj . r ;
var type = args . type  |  |  Constants . RESERVED . ALL ; var startId:==:args . startId ;
var   CODELENS = 19 ; var    LEN _:==:20 ;
var e = oEvent . originalEvent  |  |  oEvent ; var button:==:e . buttons  |  |  e . which ;
var sfField = sfBuilderProvider . builders . sfField ; var condition:==:sfBuilderProvider . builders . condition ;
var scope = cb . scope ; var args:==:cb . args ;
var table = document . getElementById ( ' testtable ' ) ; var record_select:==:document . getElementById ( ' record_select ' ) ;
var textOne = this . textOne ; var textTwo:==:this . textTwo ;
var View = require ( ' View ' ) ; var findSessionByuri:==:require ( ' findSessionByuri ' ) ;
var MATERIAL_INDEX = Polyline . MATERIAL_INDEX = 3 ; var POSITION_SIZE_INDEX:==:Polyline . POSITION_SIZE_INDEX    4 ;
var cx = require ( ' cx ' ) ; var emptyFunction:==:require ( ' emptyFunction ' ) ;
var set = Ember . set ; var run:==:Ember . run ;
var options = that . options ; var minHeight:==:options . minHeight ;
var port = this . rootImportForElement ( elt . _ _ importElement  |  |  elt ) ; var l:==:port . _ _ insertedElements    port . _ _ insertedElements  |  |  0 ;
var average = results [ ' average ' ] ; var standardDeviation:==:results [ ' standardDeviation ' ] ;
var http = require ( ' http ' ) ; var fresh:==:require ( ' fresh ' ) ;
var isArrayBuffer = sharedUtil . isArrayBuffer ; var isSameOrigin:==:sharedUtil . isSameOrigin ;
var anchor = document . getElementById ( ' anchor1 ' ) ; var popup:==:document . getElementById ( ' popup3 ' ) ;
var fullWidth = props . fullWidth ; var icon:==:props . icon ;
var minSize = me . minSize ; var isHorizontal:==:me . isHorizontal ( ) ;
var aoData = oSettings . aoData ; var aiDisplay:==:oSettings . aiDisplay ;
var db = this . _ db ; var transaction:==:this . _ db . transaction ( [ objType ] , ' readwrite ' ) ;
var playback = util . Module ( ' playback ' ) ; var assert:==:util . assert ;
var x = this . start . x ; var y:==:this . start . y ;
var seleniumPort   = this . options . seleniumPort  |  |  this . options . selenium_port ; var seleniumHost:==:this . options . seleniumHost  |  |  this . options . selenium_host ;
var upperCanvasEl = canvas . upperCanvasEl ; var lowerCanvasEl:==:canvas . lowerCanvasEl ;
var title = req . body . title ; var tab:==:req . body . tab ;
var mom = $ . fullCalendar . moment . utc ( ' 2014 - 06 - 08t00 : 00 : 00 ' ) ; var time:==:mom . time ( ) ;
var dynCall_di = Module [ ' dynCall_di ' ] = asm [ ' dynCall_di ' ] ; var dynCall_iiiiiiiiiii:==:Module [ ' dynCall_iiiiiiiiiii ' ]    asm [ ' dynCall_iiiiiiiiiii ' ] ;
var reactVersion = require ( ' reactVersion ' ) ; var onlyChild:==:require ( ' onlyChild ' ) ;
var htmlparser   = require ( ' htmlparser2 ' ) ; var exit:==:require ( ' exit ' ) ;
var createForStatement = parseTreeFactory . createForStatement ; var createIdentifierExpression:==:parseTreeFactory . createIdentifierExpression ;
var counters = metrics . counters ; var timers:==:metrics . timers ;
var prefs = require ( ' prefs ' ) ; var tabs:==:require ( ' tabs ' ) ;
var emberNew = blueprintHelpers . emberNew ; var emberGenerateDestroy:==:blueprintHelpers . emberGenerateDestroy ;
var postTag = hexo . model ( ' postTag ' ) ; var postCategory:==:hexo . model ( ' postCategory ' ) ;
var x2 = this . x2 _ ; var y1:==:this . y1 _ ;
var shapes = powerbi . visuals . shapes ; var Rect:==:powerbi . visuals . shapes . Rect ;
var valid = test . valid ; var warning:==:test . warning ;
var cactuar = game . add . sprite ( 0 , 0 , ' atlas ' , ' cactuar ' ) ; var contra:==:game . add . sprite ( 300 , 0 , ' atlas ' , ' contra1 ' ) ;
var beta = parsedCamera . beta ; var radius:==:parsedCamera . radius ;
var dateToDayOffset = t . dateToDayOffset ; var dayOffsetToCellOffset:==:t . dayOffsetToCellOffset ;
var theme = ' edui- ' + ( this . theme  |  |  this . editor . options . theme ) ; var layer:==:document . getElementById ( ' edui_fixedlayer ' ) ;
var e = parse ( event ) ; var el:==:this . el ;
var durationTween = this . _ movementData . durationTween = = = 0 ? this . _ rawDuration : this . _ movementData . durationTween ; var tweenEasing:==:this . _ movementData . tweenEasing ;
var b = math . bignumber ( 2 ) . div ( 3 ) ; var f:==:math . fraction ( b ) ;
var alert = find ( ' . jasmine - alert ' ) ; var order:==:doneResult & & doneResult . order ;
var d = c1 . distanceTo ( c2 ) ; var a:==:math . atan2 ( c2 . y - c1 . y , c2 . x - c1 . x ) ;
var uploadImgParams = config . uploadImgParams  |  |  ; var uploadImgHeaders:==:config . uploadImgHeaders  |  |  ;
var tags = contactsTag . filterTags ( type , null , config . tags ) ; var container:==:config . container ;
var readInt8 = sharedUtil . readInt8 ; var readUint16:==:sharedUtil . readUint16 ;
var scheduler = this . scheduler ; var promise:==:this . promise ;
var debug = require ( ' debug ' ) ( ' nodemon ' ) ; var fs:==:require ( ' fs ' ) ;
var inlineLoaderCompiler = traceur . loader . inlineLoaderCompiler ; var options:==:traceur . util . options ;
var ONEDAY = constants . ONEDAY ; var ONEHOUR:==:constants . ONEHOUR ;
var table = document . createElement ( ' table ' ) ; var tbody:==:document . createElement ( ' tbody ' ) ;
var forOfStatement = traceur . syntax . trees . forOfStatement ; var forInStatement:==:traceur . syntax . trees . forInStatement ;
var topic_id = row . _ i d . topic_id ; var count:==:row . count ;
var near = this . cameraP . near ; var far:==:this . cameraP . far ;
var defaultSelectionEnd = t . defaultSelectionEnd ; var renderSelection:==:t . renderSelection ;
var fs = require ( ' fs ' ) ; var mkpath:==:require ( ' mkpath ' ) ;
var scrollTop = htmlNode . scrollTop ; var clientx:==:e . clientx - pos . left + scrollLeft ;
var host = document . location . host ; var protocol:==:document . location . protocol ;
var vf = goog . i18n . pluralRules . get_vf _ ( n , opt_precision ) ; var wt:==:goog . i18n . pluralRules . get_wt _ ( vf . v , vf . f ) ;
var gulp = require ( ' gulp ' ) ; var jscs:==:require ( ' gulp - jscs ' ) ;
var start = node . loc . start . line ; var end:==:node . loc . end . line ;
var rowPositionGetter = props . rowPositionGetter ; var rowsToRender:==:this . state . rowsToRender ;
var img = nd . img ; var icon:==:nd . icon ;
var n = + + Node . indentLevel ; var s:==:' \n ' + indentation . repeat ( n ) + ' type : ' + tokenString ( this . type ) ;
var t1l = t1l + Wil ; var t1h:==:t1h + Wih + ( ( t1l > > > 0 ) < ( Wil > > > 0 ) ? 1 : 0 ) ;
var all = imports [ ' test . all ' ] ; var Node:==:test . Node ;
var newValue = event . detail . newValue ; var oldValue:==:event . detail . oldValue ;
var renderer = this . renderer ; var canvas:==:renderer . canvas ;
var left = ast . left . visit ( this ) ; var right:==:ast . right . visit ( this ) ;
var missingDataException = sharedUtil . missingDataException ; var assert:==:sharedUtil . assert ;
var attributes = vertexArray . _ attributes ; var length:==:attributes . length ;
var Assertion = chai . Assertion ; var assert:==:chai . assert ;
var banner = container . querySelector ( ' . banner ' ) ; var title:==:banner . querySelector ( ' a . title ' ) ;
var imul = stdlib . Math . imul ; var E:==:stdlib . Math . E ;
var util = imports . util ; var Plugin:==:imports . Plugin ;
var param = this . params [ i ] ; var conversion:==:param . conversions [ 0 ] ;
var layerStatesArray = frameState . layerStatesArray ; var attributions:==:ol . obj . assign ( , frameState . attributions ) ;
var detect = kendo . support . detectOS ; var detectBrowser:==:kendo . support . detectBrowser ;
var options = opt_options  |  |  ; var params:==:options . params  |  |  ;
var async = require ( ' async ' ) ; var parley:==:require ( ' parley ' ) ;
var info = this . props . info ; var type:==:this . props . type ;
var object = goog . require ( ' goog . object ' ) ; var testSuite:==:goog . require ( ' goog . testing . testSuite ' ) ;
var DateTimeSymbols_en = goog . require ( ' goog . i18n . DateTimeSymbols_en ' ) ; var DateTimeSymbols_fr_CA:==:goog . require ( ' goog . i18n . DateTimeSymbols_fr_CA ' ) ;
var bump   = require ( ' gulp - bump ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var source = state . source ; var queue:==:source . queue ;
var types = this . types = ; var fields:==:this . fields    ;
var value = element ( by . binding ( ' value ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var interactivityUtils = powerbi . visuals . interactivityUtils ; var yAxisPosition:==:powerbi . visuals . yAxisPosition ;
var cellDataKey = _ ref . cellDataKey ; var columnData:==:_ ref . columnData ;
var replace = require ( ' gulp - replace ' ) ; var mocha:==:require ( ' gulp - spawn - mocha ' ) ;
var fileUploadSelect = plugin . getElement ( ' fileUploadSelect ' ) ; var folderUploadSelect:==:plugin . getElement ( ' folderUploadSelect ' ) ;
var h = image . height ; var w:==:image . width ;
var verticalOverscanSize = _ props3 . verticalOverscanSize ; var width:==:_ props3 . width ;
var etpl = require ( ' etpl ' ) ; var argv:==:require ( ' optimist ' ) . argv ;
var template = this . options . get ( ' templateSelection ' ) ; var escapeMarkup:==:this . options . get ( ' escapeMarkup ' ) ;
var language = imports . language ; var watcher:==:imports . watcher ;
var touchstart = isTouch ? ' touchstart ' : ' mousedown ' ; var touchmove:==:isTouch ? ' touchmove ' : ' mousemove ' ;
var ownerDocument = hostContainerInfo . _ ownerDocument ; var node:==:ownerDocument . createComment ( nodeValue ) ;
var positions = computedPositions . positions ; var corners:==:computedPositions . corners ;
var btn2 = document . getElementById ( ' btn2 ' ) ; var btn3:==:document . getElementById ( ' btn3 ' ) ;
var caption = options . caption ; var noscroll:==:options . noscroll ;
var logscale = this . attributes _ . getForAxis ( ' logscale ' , i ) ; var includeZero:==:this . attributes _ . getForAxis ( ' includeZero ' , i ) ;
var tab   = validator . trim ( req . body . tab ) ; var content:==:validator . trim ( req . body . t_content ) ;
var Uri = Windows . Foundation . Uri ; var tileNotification:==:windows . ui . notifications . tileNotification ;
var util = require ( ' util ' ) ; var vm:==:require ( ' vm ' ) ;
var exists = require ( ' fs ' ) . existsSync ; var engine:==:require ( ' engine . io ' ) ;
var utils = require ( ' utils ' ) ; var env:==:require ( ' system ' ) . env ;
var remotes = this . remotes ( ) ; var handler:==:this . _ handlers [ type ]    remotes . handler ( type , options ) ;
var layout = imports . layout ; var watcher:==:imports . watcher ;
var wrap = this . $ element [ 0 ] . querySelector ( ' md - chips - wrap ' ) ; var chip:==:this . $ element [ 0 ] . querySelector ( ' md - chip [ index ' ' + index + ' ' ] ' ) ;
var b = Number ( regExpResultArray [ 3 ] ) ; var a:==:number ( regExpResultArray [ 4 ] ) ;
var openPath = imports . openPath ; var upload:==:imports . upload ;
var d = new symbolNode ( ' x ' ) ; var e:==:new operatorNode ( ' - ' , ' subtract ' , [ c , d ] ) ;
var createBlock = parseTreeFactory . createBlock ; var createBooleanLiteral:==:parseTreeFactory . createBooleanLiteral ;
var labelKey = _ ref3 . labelKey ; var valueKey:==:_ ref3 . valueKey ;
var sideOrientation = this . updateSideOrientation ( options . sideOrientation , scene ) ; var instance:==:options . instance ;
var namespace = pair . namespace ; var value:==:pair . value ;
var isOpened = _ props2 . isOpened ; var springConfig:==:_ props2 . springConfig ;
var header = $ ( ' # grid_'+ this . name + ' _ header ' ) ; var toolbar:==:$ ( ' # grid_'+ this . name + ' _ toolbar ' ) ;
var job = e . job ; var i:==:mdlUploadActivity . visibleItems . indexOf ( job . node ) ;
var NODE = setup . NODE ; var uri:==:setup . uri ;
var isArray = zrUtil . isArray ; var each:==:zrUtil . each ;
var cdn_subdomain = option_consume ( options , ' cdn_subdomain ' , $ . cloudinary . config ( ) . cdn_subdomain ) ; var shorten:==:option_consume ( options , ' shorten ' , $ . cloudinary . config ( ) . shorten ) ;
var boundElementIndex = viewContainerLocation . boundElementIndex ; var viewContainer:==:parentView . viewContainers [ boundElementIndex ] ;
var options = that . options ; var status:==:STATUS [ file . status ] ;
var backgroundColor = defaultValue ( options . backgroundColor , color . transparent ) ; var padding:==:defaultValue ( options . padding , 0 ) ;
var utc = transport . utc ; var offset:==:transport . offset ;
var gl = this . gl ; var shaderProgram:==:pixi . shaderProgram ;
var windowTimeSpan = state . windowTimeSpan ; var window:==:state . window ;
var a = new assignmentNode ( new symbolNode ( ' a ' ) , value ) ; var q:==:new assignmentNode ( new symbolNode ( ' q ' ) , a ) ;
var values = dict . values [ key ] ; var types:==:dict . types [ key ] ;
var getElementsByTagName = document . getElementsByTagName ; var createDocumentFragment:==:document . createDocumentFragment ;
var createThrowStatement = parseTreeFactory . createThrowStatement ; var createTrueLiteral:==:parseTreeFactory . createTrueLiteral ;
var tab = element ( by . i d ( ' tab3 ' ) ) ; var page3:==:element ( by . i d ( ' page3 ' ) ) ;
var Plugin = imports . Plugin ; var save:==:imports . save ;
var target = this . target ; var ta:==:target . a , tb    target . b , tc    target . c , td    target . d ;
var operator = kw ( ' operator ' ) , atom = type : ' atom ' , style : ' atom ' , attribute = type : ' attribute ' , style : ' attribute ' ; var type:==:kw ( ' typedef ' ) ;
var alias = this . alias ; var iterator:==:this . iterator ;
var text = credit . text ; var link:==:credit . link ;
var dynCall_vii = Module [ ' dynCall_vii ' ] = asm [ ' dynCall_vii ' ] ; var dynCall_iiiiiii:==:Module [ ' dynCall_iiiiiii ' ]    asm [ ' dynCall_iiiiiii ' ] ;
var dirs = util . dirs ( ) ; var events:==:require ( ' events ' ) ;
var value = event . detail . value ; var item:==:event . detail . item ;
var skipHiddenDays = t . skipHiddenDays ; var formatDate:==:calendar . formatDate ;
var locale = this . options . locales [ this . options . locale ] ; var button:==:this . _ createButton ( ' editMode ' , ' vis - button vis - edit vis - edit - mode ' , locale [ ' edit ' ]  |  |  this . options . locales [ ' en ' ] [ ' edit ' ] ) ;
var chalk = require ( ' chalk ' ) ; var EOL:==:require ( ' os ' ) . EOL ;
var endpoint = imports [ ' vfs . endpoint ' ] ; var analytics:==:imports [ ' c9 . analytics ' ] ;
var disabled = _ props3 . disabled ; var disableFocusRipple:==:_ props3 . disableFocusRipple ;
var bitsCached = this . bitsCached ; var cachedData:==:this . cachedData ;
var shell = require ( ' shelljs ' ) ; var child_process:==:require ( ' child_process ' ) ;
var data = this . _ data ; var req:==:this . req ;
var castShadows = shadowMode . castShadows ( primitive . shadows ) ; var receiveShadows:==:shadowMode . receiveShadows ( primitive . shadows ) ;
var path = route . format ( item . path ) ; var data:==:item . data ;
var scene3dOnly = frameState . scene3dOnly ; var nodeCommands:==:model . _ nodeCommands ;
var slices = cylinderGeometry . _ slices ; var numberOfVerticalLines:==:cylinderGeometry . _ numberOfVerticalLines ;
var https = require ( ' https ' ) ; var fs:==:require ( ' fs ' ) ;
var predefinedName = traceur . syntax . predefinedName ; var propertyMethodAssignment:==:traceur . syntax . trees . propertyMethodAssignment ;
var arg = process . argv [ i ] ; var a:==:arg . split ( ' ' ) ;
var length = polylinesToUpdate . length ; var polylineBuckets:==:this . _ polylineBuckets ;
var followSurface = polyline . followSurface ; var granularity:==:polyline . granularity ;
var imageKind = sharedUtil . imageKind ; var assert:==:sharedUtil . assert ;
var scm = imports . scm ; var ui:==:imports . ui ;
var y = queryNumericValue ( iconNode , ' y ' , namespaces . gx ) ; var w:==:queryNumericValue ( iconNode , ' w ' , namespaces . gx ) ;
var query = url . query ; var pathname:==:url . pathname ;
var height = state . parent . node . getAttribute ( ' height ' )  |  |  null ; var width:==:state . parent . node . getAttribute ( ' width ' )  |  |  null ;
var masterCallback = jasmine . createSpy ( ' masterCallback ' ) ; var topOverlayCallback:==:jasmine . createSpy ( ' topOverlayCallback ' ) ;
var styleSheet = require ( ' styleSheet ' ) ; var tabBarItemios:==:require ( ' tabBarItemios ' ) ;
var crypto = require ( ' crypto ' ) ; var uuid:==:require ( ' hap - nodejs ' ) . uuid ;
var createAssignmentStatement = parseTreeFactory . createAssignmentStatement ; var createBinaryOperator:==:parseTreeFactory . createBinaryOperator ;
var zoomingOnVector = object . _ zoomingOnVector ; var rotatingZoom:==:object . _ rotatingZoom ;
var hooks = trans & & trans . hooks ; var hook:==:hooks & & ( hooks [ type ]  |  |  hooks . stagger ) ;
var atNameExpression = traceur . syntax . trees . atNameExpression ; var awaitStatement:==:traceur . syntax . trees . awaitStatement ;
var controller = this . controller ; var controllerEuler:==:this . controllerEuler ;
var yAxisModel = foundCpts . yAxisModel ; var gridModel:==:foundCpts . gridModel ;
var object = this . _ object ; var keys:==:this . _ keys ;
var routes = _ ref . routes ; var location:==:_ ref . location ;
var ellipsoid = controller . _ ellipsoid ; var scene:==:controller . _ scene ;
var shadows = this . _ geometryUpdater . shadowsProperty . getValue ( time ) ; var distanceDisplayConditionProperty:==:this . _ geometryUpdater . distanceDisplayConditionProperty ;
var wordArray = c_lib . wordArray ; var hasher:==:c_lib . hasher ;
var top = rect . top + ( parseInt ( style . borderTopWidth )  |  |  0 ) ; var left:==:rect . left + ( parseInt ( rect . borderLeftWidth )  |  |  0 ) ;
var generateRandomKey = require ( ' generateRandomKey ' ) ; var removeEntitiesAtEdges:==:require ( ' removeEntitiesAtEdges ' ) ;
var importsToAdd = paths . importsToAdd . slice ( ) ; var src:==:gulp . src ( paths . files ) ;
var resources = options . resources ; var addAsset:==:options . addAsset ;
var now = this . defaultArg ( event . playbackTime , this . now ( ) ) ; var bufferSize:==:this . _ jsNode . bufferSize ;
var model = this . model ; var schema:==:model . schema ;
var child = ( childLinks [ i ] . source = = = n ) ? childLinks [ i ] . target : childLinks [ i ] . source ; var i d:==:child . i d ;
var BSON = require ( ' mongodb ' ) . bsonPure ; var mongodb:==:require ( ' mongodb ' ) ;
var wrap = scope . wrap ; var wrapEventTargetMethods:==:scope . wrapEventTargetMethods ;
var bucketCount = ( opts & & opts . bucketCount )  |  |  4 ; var bucketMins:==:( opts & & opts . bucketMins )  |  |  5 ;
var extend = require ( ' extend ' ) ; var slug:==:require ( ' slug ' ) ;
var usageSilentSms = mockasyncStorage . keys . usageSilentSms ; var alarmId:==:usageSilentSms [ message . type ] . alarmId ;
var a = mobx . observable ( 1 ) ; var b:==:mobx . observable ( 1 ) ;
var x = data . x = = = 0 ? zeroScale : data . x ; var y:==:data . y      0 ? zeroScale : data . y ;
var scrollLeft = body . scrollLeft  |  |  documentElement . scrollLeft ; var scrollTop:==:body . scrollTop  |  |  documentElement . scrollTop ;
var Subscribable = require ( ' Subscribable ' ) ; var textInputState:==:require ( ' textInputState ' ) ;
var pickerOptions = merge ( , this . pickerOptions ) ; var picker:==:this . _ pickerCtrl . create ( pickerOptions ) ;
var listView = that . listView ; var initialIndex:==:that . _ initialIndex ;
var pooledClass = require ( ' pooledClass ' ) ; var reactReconciler:==:require ( ' reactReconciler ' ) ;
var w = object [ ' width ' ] ; var h:==:object [ ' height ' ] ;
var arrayExtensions = jsCommon . arrayExtensions ; var dataViewMetadataColumnUtils:==:powerbi . data . dataViewMetadataColumnUtils ;
var path = require ( ' path ' ) ; var stream:==:require ( ' stream ' ) ;
var contentState = require ( ' contentState ' ) ; var editorBidiService:==:require ( ' editorBidiService ' ) ;
var cname = option_consume ( options , ' cname ' , $ . cloudinary . config ( ) . cname ) ; var cdn_subdomain:==:option_consume ( options , ' cdn_subdomain ' , $ . cloudinary . config ( ) . cdn_subdomain ) ;
var section = sections [ commit . type ] ; var component:==:commit . component  |  |  EMPTY_COMPONENT ;
var sqExprBuilder = powerbi . data . sqExprBuilder ; var createDataViewScopeIdentity:==:powerbi . data . createDataViewScopeIdentity ;
var line = location . line ; var column:==:location . column ;
var o4 = foo : foo4 , that4 : ' that4 ' ; var o5:==:foo : foo5 , that5 : ' that5 ' ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var finalhandler:==:require ( ' finalhandler ' ) ;
var asin = math . asin ; var sin:==:math . sin ;
var imagesPath = this . config . imagesPath ; var config:==:this . config ;
var error = require ( ' http - error ' ) ; var kaefer:==:require ( ' kaefer ' ) ;
var specular = originalMaterial . specular ; var shininess:==:originalMaterial . shininess ;
var yellow500 = exports . yellow500 = ' # ffeb3b ' ; var yellow600:==:exports . yellow600    ' # fdd835 ' ;
var code = task . code ; var context:==:task . context ;
var reactTestUtils = require ( ' reactTestUtils ' ) ; var inputValueTracking:==:require ( ' inputValueTracking ' ) ;
var rotateMix = this . rotateMix , translateMix = this . translateMix ; var translate:==:translateMix > 0 , rotate    rotateMix > 0 ;
var fs     = require ( ' fs ' ) ; var path:==:require ( ' path ' ) ;
var c = m . c ; var d:==:m . d ;
var addr = isDTOA ? pinValue : ( isPin ? opts : opts . addr ) ; var type:==:opts . type  |  |  ( isAnalogInput ? ' analog ' : ' digital ' ) ;
var polygonHierarchy = polygonGeometry . _ polygonHierarchy ; var perPositionHeight:==:polygonGeometry . _ perPositionHeight ;
var Keywords = traceur . syntax . Keywords ; var predefinedName:==:traceur . syntax . predefinedName ;
var unread = liEl . hasClass ( ' unread ' ) ; var nid:==:liEl . attr ( ' data - nid ' ) ;
var sel = ace . selection ; var session:==:ace . session ;
var zoom = document . getElementById ( ' chk - zoom ' ) . checked ; var selection:==:document . getElementById ( ' chk - selection ' ) . checked ;
var helperNode2 = helper . getNode ( ' helperNode2 ' ) ; var helperNode3:==:helper . getNode ( ' helperNode3 ' ) ;
var node = this . _ node ; var children:==:node . _ children , locBakeSprite    this . _ bakeSprite ;
var maxSimple = natives . importNow ( ' maxSimple ' ) ; var minSimple:==:natives . importNow ( ' minSimple ' ) ;
var concat = require ( ' concat - stream ' ) ; var inherits:==:require ( ' inherits ' ) ;
var tabBarios = require ( ' tabBarios ' ) ; var tabBarItemios:==:require ( ' tabBarItemios ' ) ;
var source = this . source ; var items:==:this . _ items ;
var debug = require ( ' debug ' ) ( ' express : router : route ' ) ; var flatten:==:require ( ' array - flatten ' ) ;
var vertexArrays = polylineCollection . _ vertexArrays ; var debugShowBoundingVolume:==:polylineCollection . debugShowBoundingVolume ;
var createParenExpression = parseTreeFactory . createParenExpression ; var createProgram:==:parseTreeFactory . createProgram ;
var filter = require ( ' gulp - filter ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var bufferIndex = lastState . bufferIndex ; var componentBuffer:==:lastState . componentBuffer ;
var n = new indexNode ( [ b , c ] ) ; var e:==:new constantNode ( 5 ) ;
var onError = jasmine . createSpy ( ' onError ' ) ; var onSuccess:==:jasmine . createSpy ( ' onSuccess ' ) ;
var FP_SAFE = numConstants . fp_safe ; var badnum:==:numConstants . badnum ;
var spawn = require ( ' child_process ' ) . spawn ; var interpreter:==:pm2_env . exec_interpreter  |  |  ' node ' ;
var rQ = this . _ sock . get_rQ ( ) ; var rQi:==:this . _ sock . get_rqi ( ) ;
var custom = point . custom  |  |  ; var index:==:point . _ index ;
var keys = this . keys ; var len:==:keys . length ;
var isDefined = leafletHelpers . isDefined ; var isObject:==:leafletHelpers . isObject ;
var strokeStyle = params . strokeStyle  |  |  ' yellow ' ; var lineWidth:==:params . lineWidth  |  |  1 ;
var featureType = context [ ' featureType ' ] ; var featurens:==:context [ ' featurens ' ] ;
var timestamp = query . timestamp ; var nonce:==:query . nonce ;
var Pane = imports . Pane ; var ui:==:imports . ui ;
var pink500 = exports . pink500 = ' # e91e63 ' ; var pink600:==:exports . pink600    ' # d81b60 ' ;
var Str = Alias ( ' Str ' , Ptr ( U8 ) ) ; var strLen:==:alias ( ' strLen ' , u32 ) ;
var dx1 = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx1 ' , this . dx1 ) ) ) ) ; var dy2:==:math . max ( 0 , math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' dy2 ' , this . dy2 ) ) ) ) ;
var s = graph . view . scale ; var tr:==:graph . view . translate ;
var source = require ( ' vinyl - source - stream ' ) ; var touch:==:require ( ' touch ' ) ;
var label = createElement ( ' label ' ) ; var input:==:createElement ( ' input ' ) ;
var glyph = label . _ glyphs [ 0 ] ; var billboard:==:glyph . billboard ;
var n = this . tn ; var d:==:vdot ( vsub ( this . ta , a ) , n ) ;
var encoding = ' transfer - encoding ' in req . headers ; var length:==:' content - length ' in req . headers & & req . headers [ ' content - length ' ] !    ' 0 ' ;
var neighborsSignificance = this . neighborsSignificance ; var width:==:this . width , height    this . height ;
var unwrap = shadowdomPolyfill . unwrap ; var wrap:==:shadowdomPolyfill . wrap ;
var inherits = util . inherits ; var notEnumerableProp:==:util . notEnumerableProp ;
var identifierExpression = traceur . syntax . trees . identifierExpression ; var propertyNameAssignment:==:traceur . syntax . trees . propertyNameAssignment ;
var b = bProp : 1 ; var aSymbol:==:symbol ( ' aSymbol ' ) ;
var n = a ( j . join ( '' ) ) . appendTo ( m ) ; var o:==:n . children ( ' # jbox ' ) ;
var amount = send . amount_feedback ; var address:==:$ scope . send . recipient_address ;
var blogPost = db . model ( ' gh4073_2 ' , blogPostSchema ) ; var event:==:db . model ( ' gh4073_3 ' , eventSchema ) ;
var label = element . closest ( ' label ' ) ; var i d:==:element . attr ( ' i d ' ) ;
var p = defPos ? defPos : k . p ; var r:==:defRot ? defRot : k . r ;
var assets = response [ ' assets ' ] ; var scripts:==:response [ ' scripts ' ] ;
var r1 = this . r1 ; var r2:==:this . r2 ;
var name = _ ref . name ; var author:==:_ ref . author ;
var className = ( 0 , _ classnames3 . default ) ( _ this . props . className , _ defineProperty ( , outsideClickIgnoreClass , _ this . state . open ) ) ; var customInput:==:_ this . props . customInput  |  |  _ react2 . default . createElement ( ' input ' , type : ' text ' ) ;
var deepPurple100 = exports . deepPurple100 = ' # d1c4e9 ' ; var deepPurple200:==:exports . deepPurple200    ' # b39ddb ' ;
var method = defaultValue ( options . method , ' get ' ) ; var data:==:options . data ;
var Divider = imports . Divider ; var all:==:imports [ ' test . all ' ] ;
var reactFiberInstrumentation = require ( ' reactFiberInstrumentation ' ) ; var reactDebugCurrentFiber:==:require ( ' reactDebugCurrentFiber ' ) ;
var timings = elementData . timings ; var itemIndex:==:elementData . itemIndex ;
var c9 = imports . c9 ; var preferences:==:imports . preferences ;
var LOG2E = stdlib . Math . LOG2E ; var LOG10E:==:stdlib . Math . LOG10E ;
var format = option_consume ( options , ' format ' ) ; var cloud_name:==:option_consume ( options , ' cloud_name ' , $ . cloudinary . config ( ) . cloud_name ) ;
var parentNode = elem . parentNode ; var nextSibling:==:elem . nextSibling ;
var traceType = inJs . traceType ; var jsCommon:==:window . jsCommon ;
var styles = this . _ textContent . styles ; var textDivs:==:this . _ textDivs ;
var jade = require ( ' jade ' ) ; var util:==:require ( ' util ' ) ;
var bindingElement = traceur . syntax . trees . bindingElement ; var block:==:traceur . syntax . trees . block ;
var Encodings = nativeFileSystem . encodings ; var _ fsEncodings:==:nativeFileSystem . _ fsEncodings ;
var b = rejectBuiltInSoon ( ' rejected - b ' , 30 ) ; var c:==:rejectBuiltInSoon ( ' rejected - c ' , 10 ) ;
var cellToDate = t . cellToDate ; var cellToCellOffset:==:t . cellToCellOffset ;
var message = error . message ; var status:==:error . status ;
var comprehensionTransformer = traceur . codegeneration . comprehensionTransformer ; var createYieldStatement:==:traceur . codegeneration . parseTreeFactory . createYieldStatement ;
var normalScale = this . normalScale & & this . normal ? this . normalScale . buildCode ( builder , ' v2 ' ) : undefined ; var light:==:this . light ? this . light . buildCode ( builder , ' v3 ' , cache : ' light ' ) : undefined ;
var bytesToString = sharedUtil . bytesToString ; var error:==:sharedUtil . error ;
var max = Math . max , min = Math . min , abs = Math . abs , norminf = numeric . norminf , pow = Math . pow ; var any:==:numeric . any , lt    numeric . lt , and    numeric . and , sub    numeric . sub ;
var yeoman = require ( ' yeoman - generator ' ) ; var yosay:==:require ( ' yosay ' ) ;
var assert = util . assert ; var walkthrough:==:util . Module ( ' walkthrough ' ) ;
var a = require ( ' a ' ) ; var test:==:require ( ' test ' ) ;
var c9 = imports . c9 ; var commands:==:imports . commands ;
var t1 = sfv_t1 ; var t2:==:sfv_t2 ;
var POSITION_INDEX = Billboard . POSITION_INDEX = 1 ; var PIXEL_OFFSET_INDEX:==:Billboard . PIXEL_OFFSET_INDEX    2 ;
var el = elements [ x ] ; var parent:==:el . parentNode ;
var flatten = util . flatten ; var unflattenr:==:util . unflattenr ;
var handlerPath = event . data . handlerPath ; var method:==:event . data . method ;
var getInnerhtml = scope . getInnerhtml ; var getTreeScope:==:scope . getTreeScope ;
var lineWidgets = this . session . lineWidgets ; var w:==:lineWidgets & & lineWidgets [ row ] ;
var m = Matrix3 . fromScale ( new cartesian3 ( 1 . 5 , 80 . 4 , 2 . 6 ) , new matrix3 ( ) ) ; var n:==:matrix3 . fromQuaternion ( quaternion . fromAxisAngle ( new cartesian3 ( 0 . 5 , 1 . 5 , -1 . 2 ) , 1 . 2 ) , new matrix3 ( ) ) ;
var createTryStatement = parseTreeFactory . createTryStatement ; var createVariableStatement:==:parseTreeFactory . createVariableStatement ;
var J   = this . J ; var options:==:this . options ;
var Category = ctx . model ( ' Category ' ) ; var i d:==:this . _ i d ;
var username = $ ( ' # weui - prompt - username ' ) . val ( ) ; var password:==:$ ( ' # weui - prompt - password ' ) . val ( ) ;
var options = this . options ; var isPopup:==:this . isPopup ;
var reqwest = _ dereq _ ( ' reqwest ' ) ; var opentype:==:_ dereq _ ( ' opentype . js ' ) ;
var connection = client . serverConfig . connections ( ) [ 0 ] ; var collection:==:client . collection ( ' test ' ) ;
var indexType = this . transformAny ( tree . indexType ) ; var typeAnnotation:==:this . transformAny ( tree . typeAnnotation ) ;
var express = require ( ' express ' ) ; var log4js:==:require ( ' log4js ' ) ;
var unit = math . unit ; var range:==:math . range ;
var concat = Array . prototype . concat . call . bind ( Array . prototype . concat ) ; var slice:==:Array . prototype . slice . call . bind ( Array . prototype . slice ) ;
var oLang = oSettings . oLanguage ; var sZero:==:oLang . sZeroRecords ;
var source = new ol . source . OSM ( ) ; var layer:==:new ol . layer . Tile ( ) ;
var snapshot = this . _ snapshot ; var nodes:==:snapshot . nodes ;
var groups = geometry . groups ; var materials:==:material . materials ;
var a = merge ( args , arguments ) , c = context ; var c:==:this instanceof bound ? this : context ;
var options = $ . options ; var subpages:==:options . subpages  |  |  [ ] ;
var notify = require ( ' gulp - notify ' ) ; var autoprefixer:==:require ( ' gulp - autoprefixer ' ) ;
var fixedRowsTop = this . wtSettings . getSetting ( ' fixedRowsTop ' ) ; var fixedRowsBottom:==:this . wtSettings . getSetting ( ' fixedRowsBottom ' ) ;
var data = message . data ; var clientId:==:data . clientId ;
var points = polygon [ ' points ' ] ; var len:==:points . length ;
var spawn = require ( ' child_process ' ) . spawn ; var assert:==:require ( ' assert ' ) ;
var lat = utils . number ( values [ valuePaths . geo_lat ] ) ; var lng:==:utils . number ( values [ valuePaths . geo_lng ] ) ;
var prev = contact . prev ; var next:==:contact . next ;
var parseTreeType = traceur . syntax . trees . parseTreeType ; var program:==:traceur . syntax . trees . program ;
var baz = ' baz inner ' ; var goo:==:' goo ' ;
var scrollPositionChangeReason = _ state . scrollPositionChangeReason ; var scrollToAlignment:==:_ state . scrollToAlignment ;
var start = ' start ' ; var end:==:' end ' ;
var groups = options . groups  |  |  '' ; var iq:==:$ iq ( type : ' set ' ) ;
var w = Math . max ( 0 , Math . min ( rect . width , parseFloat ( mxUtils . getValue ( this . style , ' width ' , this . width ) ) * this . scale ) ) ; var h:==:math . max ( 0 , math . min ( rect . height , parseFloat ( mxUtils . getValue ( this . style , ' height ' , this . height ) ) * this . scale ) ) ;
var position1 = property . getValue ( time , position1Scratch ) ; var position2:==:property . getValue ( julianDate . addSeconds ( time , step , timeScratch ) , position2Scratch ) ;
var foo = ol . events . listen ( target , ' foo ' , function ( ) ) ; var bar:==:ol . events . listen ( target , ' bar ' , function ( ) ) ;
var fetchStartOffset = request . fetchStartOffset ; var start:==:fetchStartOffset + request . startTime ;
var fields = this . _ fields  |  |  ( this . _ fields = ) ; var type:==:typeof arg ;
var w = this . width = visibleRect . width ; var h:==:this . height    visibleRect . height ;
var sx = style . sx ; var sy:==:style . sy ;
var x = float32Array [ index + i*5 ] ; var y:==:float32Array [ index + i*5 + 1 ] ;
var status = $ ( ' # status ' ) . val ( ) ; var body:==:$ ( ' # body ' ) . val ( ) ;
var key = options . key  |  |  options ; var passphrase:==:options . passphrase  |  |  null ;
var createArgumentList = traceur . codegeneration . parseTreeFactory . createArgumentList ; var createBinaryOperator:==:traceur . codegeneration . parseTreeFactory . createBinaryOperator ;
var property = context . property ; var entityAspect:==:context . entityAspect ;
var sy = step . sy ; var ex:==:step . ex ;
var juggler = require ( ' loopback - datasource - juggler ' ) ; var remoting:==:require ( ' strong - remoting ' ) ;
var customBubblingEventTypes = uiManager . customBubblingEventTypes ; var customDirectEventTypes:==:uiManager . customDirectEventTypes ;
var f8Colors = require ( ' f8Colors ' ) ; var f8SessionCell:==:require ( ' f8SessionCell ' ) ;
var normal = normals [ i ] ; var face:==:faces [ i ] ;
var removedElements = this . _ removedElements ; var itemMoveRecords:==:this . _ itemMoveRecords ;
var c = rejectBuiltInSoon ( ' rejected - c ' , 10 ) ; var d:==:fulfillBuiltInSoon ( ' d ' , 20 ) ;
var EXPORT_MAPPING_LIST = parseTreeType . export_mapping_list ; var export_specifier:==:parseTreeType . export_specifier ;
var reactNoopUpdateQueue = require ( ' reactNoopUpdateQueue ' ) ; var canDefineProperty:==:require ( ' canDefineProperty ' ) ;
var accessType = context . accessType ; var modelName:==:context . modelName ;
var tx = ( wt . tx * resolution ) + renderSession . shakex ; var ty:==:( wt . ty * resolution ) + renderSession . shakey ;
var debug = require ( ' debug ' ) ( ' pm2 : serve ' ) ; var probe:==:require ( ' pmx ' ) . probe ( ) ;
var fs    = require ( ' fs ' ) ; var should:==:require ( ' should ' ) ;
var skin = this . skins [ name [ 0 ] ] ; var template:==:skin . templates [ name [ 1 ] ] ;
var createLegend = powerbi . visuals . createLegend ; var legendPosition:==:powerbi . visuals . legendPosition ;
var test = require ( ' test ' ) ; var a:==:require ( ' a ' ) ;
var models = _ _ alloyId14 . models ; var len:==:models . length ;
var tr = state . view . translate ; var s:==:state . view . scale ;
var scrollTop = hostDocumentElement . $ . scrollTop ; var scrollLeft:==:hostDocumentElement . $ . scrollLeft ;
var ext = imports . ext ; var Plugin:==:imports . Plugin ;
var d = data . portal . options . data ; var health:==:d . health ;
var superName = this . superName ; var file:==:this . file ;
var memberName = tree . operand . memberName ; var operand:==:this . transformAny ( tree . operand . operand ) ;
var keys = Object . keys ( obj ) ; var len:==:keys . length ;
var syntheticEvent = require ( ' syntheticEvent ' ) ; var getEventTarget:==:require ( ' getEventTarget ' ) ;
var range = this . _ range . slice ( ) ; var axisModel:==:coordInfo . axisModels [ 0 ] ;
var horizontalOrigin = label . _ horizontalOrigin ; var verticalOrigin:==:label . _ verticalOrigin ;
var repl = require ( ' repl ' ) ; var vm:==:require ( ' vm ' ) ;
var nodeNativeType = this . _ nodeNativeType ; var nodeCodeType:==:this . _ nodeCodeType ;
var width = root . width ; var height:==:root . height ;
var ALL = ' ALL ' ; var RACE:==:' RACE ' ;
var fs = require ( ' fs ' ) ; var net:==:require ( ' net ' ) ;
var symbolRepeat = itemModel . get ( ' symbolRepeat ' ) ; var symbolClip:==:itemModel . get ( ' symbolClip ' ) ;
var gulp = require ( ' gulp ' ) ; var opener:==:require ( ' opener ' ) ;
var HOVERARROWSIZE = constants . HOVERARROWSIZE ; var HOVERTEXTPAD:==:constants . HOVERTEXTPAD ;
var a = o . a ; var b:==:o . b ;
var first = lc ? chars . first : chars . FIRST ; var middle:==:lc ? chars . middle : chars . MIDDLE ;
var feedback = _ feedback  |  |  0 ; var delayTime:==:_ delayTime  |  |  0 ;
var svgUtil = powerbi . visuals . svgUtil ; var tooltipManager:==:powerbi . visuals . tooltipManager ;
var cellLayoutManager = _ props4 . cellLayoutManager ; var onSectionRendered:==:_ props4 . onSectionRendered ;
var params = this . params ; var bones:==:this . mesh . skeleton . bones ;
var bindingElement = traceur . syntax . trees . bindingElement ; var bindingIdentifier:==:traceur . syntax . trees . bindingIdentifier ;
var assert = require ( ' assert ' ) ; var format:==:require ( ' util ' ) . format ;
var get = Object . getOwnPropertyDescriptor ( foo ( ) , ' callee ' ) . get ; var set:==:object . getOwnPropertyDescriptor ( foo ( ) , ' callee ' ) . set ;
var semVerRegExp = system . semVerRegExp _ ( ) ; var m:==:semVerRegExp . exec ( ' 1 . 2 . 3-a . b . c . 5 . d . 100 ' ) ;
var Post = ctx . model ( ' Post ' ) ; var post:==:Post . findById ( this . post ) ;
var edgeShortcutType = this . _ edgeShortcutType ; var containmentEdges:==:this . containmentEdges ;
var si = sideInfo . si ; var data_bitlen:==:sideInfo . data_bitlen ;
var events = require ( ' events ' ) ; var async:==:require ( ' async ' ) ;
var b = goog . Promise . resolve ( ' b ' ) ; var c:==:' c ' ;
var bridge = imports . bridge ; var tabManager:==:imports . tabManager ;
var axisIndex = seriesModel . get ( dimNames . axisIndex ) ; var axisId:==:seriesModel . get ( dimNames . axisId ) ;
var createInteractivityService = powerbi . visuals . createInteractivityService ; var isCategoryColumnSelected:==:powerbi . visuals . isCategoryColumnSelected ;
var http = require ( ' http ' ) ; var stream:==:require ( ' stream ' ) ;
var topic_id = req . params . topic_id ; var content:==:req . body . content  |  |  '' ;
var event = segment . event ; var url:==:event . url ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var createArgumentList:==:parseTreeFactory . createArgumentList ;
var options = props . options ; var valueKey:==:props . valueKey ;
var spreadPatternElement = traceur . syntax . trees . spreadPatternElement ; var superExpression:==:traceur . syntax . trees . superExpression ;
var o = options  |  |  ; var prefix:==:typeof o . prefix      ' undefined ' & & ' assert '  |  |  o . prefix ;
var fillDropdown = util . fillDropdown ; var bindCheckbox:==:util . bindCheckbox ;
var createBindingIdentifier = parseTreeFactory . createBindingIdentifier ; var createCallExpression:==:parseTreeFactory . createCallExpression ;
var nodeFrom = adj . nodeFrom ; var nodeTo:==:adj . nodeTo ;
var uv = attributes [ ' uv ' ] ; var color:==:attributes [ ' color ' ] ;
var chart = me . chart ; var chartArea:==:chart . chartArea ;
var config = utils . pkg . config ( packageJSON )  |  |  ; var plugins:==:config . plugins  |  |  [ ] ;
var util = require ( ' gulp - util ' ) ; var clone:==:require ( ' gulp - clone ' ) ;
var mkdirp = require ( ' mkdirp ' ) ; var mime:==:require ( ' mime ' ) ;
var badge = item . find ( ' . badge ' ) ; var step:==:item . attr ( ' data - step ' ) ;
var fs = require ( ' fs ' ) ; var cache:==:App . Providers . _ cache    ;
var sum32 = utils . sum32 ; var sum32_4:==:utils . sum32_4 ;
var options = this . _ options ; var coordinates:==:Property . getValueOrUndefined ( rectangle . coordinates , time , options . rectangle ) ;
var type = result . type ; var value:==:result . value  |  |  ;
var coverInitializedNameCount = this . coverInitializedNameCount _ ; var expression:==:this . parseExpressionAllowPattern _ ( expressionIn ) ;
var addCommas = formatUtil . addCommas ; var encodehtml:==:formatUtil . encodehtml ;
var menus = imports . menus ; var panels:==:imports . panels ;
var createInteractivityService = powerbi . visuals . createInteractivityService ; var appendClearCatcher:==:powerbi . visuals . appendClearCatcher ;
var contactCardOptions = contacts . contactCardOptions ; var contactCardTabKind:==:contacts . contactCardTabKind ;
var util = require ( ' hexo - util ' ) ; var sinon:==:require ( ' sinon ' ) ;
var pid = req . params . pid ; var path:==:req . params . path ;
var algoliaDocSearch = require ( ' algoliaDocSearch ' ) ; var react:==:require ( ' react ' ) ;
var options = self . options ; var pointers:==:self . pointers ;
var dynCall_viiiiiii = Module [ ' dynCall_viiiiiii ' ] = asm [ ' dynCall_viiiiiii ' ] ; var dynCall_viiiiiiiii:==:Module [ ' dynCall_viiiiiiiii ' ]    asm [ ' dynCall_viiiiiiiii ' ] ;
var x = location . x ; var y:==:location . y ;
var Gq = this . computeGq ( ) ; var giMf:==:this . computeGiMf ( ) ;
var faceSize = this . state . faceSize ; var isOpaque:==:this . props . isOpaque ;
var addEvent = addEventEasy ; var removeEvent:==:removeEventEasy ;
var y = center . y ; var z:==:center . z ;
var http = require ( ' http ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var Polygon = visuals . shapes . Polygon ; var dataRoleHelper:==:powerbi . data . dataRoleHelper ;
var hostServices = this . hostServices = slicerInitOptions . visualInitOptions . host ; var settings:==:this . settings    visuals . dataConversion . defaultSlicerProperties ( ) ;
var dataIndex = symbolMeta . dataIndex ; var itemModel:==:symbolMeta . itemModel ;
var edges = this [ ' edges ' ] ; var normals:==:this [ ' normals ' ] ;
var num = exposureTime . numerator ; var den:==:exposureTime . denominator ;
var frameObject = frameObjectList [ i ] ; var frame:==:dataParser . parseTransformFrame ( frameObject , frameRate ) ;
var tree = imports . tree ; var fs:==:imports . fs ;
var addDone = jasmine . createSpy ( ' addDone ' ) ; var removeDone:==:jasmine . createSpy ( ' removeDone ' ) ;
var textOperation = firepad . textOperation ; var wrappedOperation:==:firepad . wrappedOperation ;
var margin = ( style & & resolveBoxStyle ( ' margin ' , style ) )  |  |  blank ; var padding:==:( style & & resolveBoxStyle ( ' padding ' , style ) )  |  |  blank ;
var symbolSize = normalize ( itemModel . getShallow ( ' symbolSize ' , true ) ) ; var color:==:itemModel . get ( colorQuery ) ;
var password = document . getElementById ( ' wifi_password ' ) . value ; var user:==:document . getElementById ( ' wifi_user ' ) . value ;
var y = value . y ; var z:==:value . z ;
var mi = cTop . appendToken ( parentNode,'mi',cTop . getTextContent ( contentmmlNode ) ) ; var type:==:contentmmlNode . getAttribute ( ' type ' ) ;
var eventType = $ ( ' # eventType ' ) . val ( ) ; var reasons:==:inputMatrix [ eventType ] [ ' reasons ' ] ;
var fri = $ ( ' . fc - day - header . fc - fri ' ) [ 0 ] ; var we d:==:$ ( ' . fc - day - header . fc - wed ' ) [ 0 ] ;
var a_visc = SPHSystem_update_a_visc ; var gradW:==:SPHSystem_update_gradW ;
var dialog = dialogObject . element ; var offset:==:dialogObject . wrapper . offset ( ) ;
var selectionStart = self . selectionStart ; var selectionEnd:==:self . selectionEnd ;
var code = options . code ; var baseUrl:==:options . baseUrl ;
var geometry = this . line . geometry ; var components:==:geometry . components ;
var source = this . source ; var geo:==:this . geometry ;
var store = new datastore ( data : data ) ; var d:==:new doh . Deferred ( ) ;
var isBackspaceKey = utilities . isBackspaceKey ; var isDeleteKey:==:utilities . isDeleteKey ;
var index = attributes [ ' index ' ] ; var position:==:attributes [ ' position ' ] ;
var Parser = traceur . syntax . Parser ; var sourceFile:==:traceur . syntax . sourceFile ;
var name = options . name ; var left:==:options . left ;
var paymentProviderId = identify . proxy ( ' traits . paymentProviderId ' ) ; var accountStatus:==:identify . proxy ( ' traits . accountStatus ' ) ;
var m = mobx ; var observable:==:mobx . observable ;
var safeApply = leafletHelpers . safeApply ; var isValidCenter:==:leafletHelpers . isValidCenter ;
var colors = polylineGeometry . _ colors ; var colorsPerVertex:==:polylineGeometry . _ colorsPerVertex ;
var willLabelsWordBreak = powerbi . visuals . axisHelper . labelLayoutStrategy . willLabelsWordBreak ; var axisScale:==:powerbi . visuals . axisScale ;
var y = v . y ; var z:==:v . z ;
var debug = imports [ ' debugger ' ] ; var c9:==:imports . c9 ;
var name = event_data . script ( ) . name ( ) ; var i d:==:event_data . script ( ) . i d ( ) ;
var u = b . y . toBigInteger ( ) . multiply ( this . z ) . subtract ( this . y . toBigInteger ( ) . multiply ( b . z ) ) . mod ( this . curve . q ) ; var v:==:b . x . toBigInteger ( ) . multiply ( this . z ) . subtract ( this . x . toBigInteger ( ) . multiply ( b . z ) ) . mod ( this . curve . q ) ;
var useWindowsLineEndings = this . data . useWindowsLineEndings ; var flags:==:grunt . option . flags ( ) ;
var httpServerService = _ appJsServicesHttpServerService [ ' default ' ] ; var shareService:==:_ appJsServicesShareService [ ' default ' ] ;
var createClassAndSelector = jsCommon . cssConstants . createClassAndSelector ; var getCategoryIndexOfRole:==:powerbi . data . dataRoleHelper . getCategoryIndexOfRole ;
var errorCallback = self . _ subscriptions [ msg . i d ] . errorCallback ; var stopCallback:==:self . _ subscriptions [ msg . i d ] . stopCallback ;
var crossOrigin = getCrossOrigin ( this . crossOrigin ) ; var url:==:crossOrigin ? this . crossOriginUrl : this . url ;
var center = ellipsoid . cartographicToCartesian ( rectangle . center ( rectangle ) ) ; var structure:==:this . _ structure ;
var l = _ l ; var k:==:_ k ;
var vPad = this . get ( ' vPad ' ) ; var hPad:==:this . get ( ' hPad ' ) ;
var subModelTypeAttribute = attributes [ this . prototype . subModelTypeAttribute ] ; var subModelType:==:this . _ subModels [ subModelTypeAttribute ] ;
var fs = require ( ' fs ' ) ; var resolve:==:require ( ' path ' ) . resolve ;
var beforeAppear = data . beforeAppear ; var appear:==:data . appear ;
var zfail = value . zfail  |  |  ' keep ' ; var zpass:==:value . zpass  |  |  ' keep ' ;
var form = that . _ send_form = _ document . createElement ( ' form ' ) ; var area:==:that . _ send_area    _ document . createElement ( ' textarea ' ) ;
var doc = win [ ' document ' ] ; var factory:==:doc [ ' getElementById ' ] ( ' gears - factory ' ) ;
var concat   = require ( ' gulp - concat ' ) ; var notify:==:require ( ' gulp - notify ' ) ;
var upgradeDocumentTree = scope . upgradeDocumentTree ; var upgradeDocument:==:scope . upgradeDocument ;
var width = _ props4 . width ; var isScrolling:==:this . state . isScrolling ;
var dynCall_iiii = Module [ ' dynCall_iiii ' ] = asm [ ' dynCall_iiii ' ] ; var dynCall_dii:==:Module [ ' dynCall_dii ' ]    asm [ ' dynCall_dii ' ] ;
var width = Base . window . width * . 75  |  0 ; var total:==:runner . total ;
var i d = data . i d ; var value:==:data . value ;
var domain = fullSceneLayout . domain ; var size:==:scene . fullLayout . _ size ;
var tryCatch = tryCatchUtils . tryCatch , errorObj = tryCatchUtils . errorObj ; var inherits:==:require ( ' inherits ' ) ;
var sid1 = ' sid1 ' , sid2 = ' sid2 ' ; var uid1:==:' uid1 ' , uid2    ' uid2 ' , uid3    ' uid3 ' ;
var data = component . data ; var assets:==:this . system . app . assets ;
var rows = this . _ rows ; var columns:==:this . _ columns ;
var b = document . createElement ( ' b ' ) ; var c:==:document . createTextNode ( ' c ' ) ;
var x = this . x , y = this . y , z = this . z , retVec = new cc . math . vec3 ( vec ) ; var uv:==:new cc . math . vec3 ( x , y , z ) , uuv    new cc . math . vec3 ( x , y , z ) ;
var node = e . node ; var config:==:model . session . config ;
var ele = _ getElementObject ( element ) ; var i d:==:_ getAttribute ( ele , ' i d ' ) ;
var fs    = require ( ' fs ' ) ; var path:==:require ( ' path ' ) ;
var filenames = this . _ index . filenames ; var objects:==:this . _ index . objects ;
var n = new indexNode ( [ b , c ] ) ; var e:==:new symbolNode ( ' c ' ) ;
var setWrapper = scope . setWrapper ; var unwrap:==:scope . unwrap ;
var LN2 = stdlib . Math . LN2 ; var LOG2E:==:stdlib . Math . LOG2E ;
var path = require ( ' path ' ) ; var session:==:require ( ' express - session ' ) ;
var createArgumentList = parseTreeFactory . createArgumentList ; var createArrayLiteralExpression:==:parseTreeFactory . createArrayLiteralExpression ;
var minute = calendar . month . minute ( ) ; var second:==:calendar . month . second ( ) ;
var tzid = time . tzid ; var offset:==:time . offset ;
var red50 = exports . red50 = ' # ffebee ' ; var red100:==:exports . red100    ' # ffcdd2 ' ;
var iframe = element ( ' < iframe name='iframeTransport ' + date . now ( ) + ' ' > ' ) ; var input:==:item . _ input ;
var STRING_UNARY_OPERATORS = exports . STRING_UNARY_OPERATORS = [ ' typeof ' ] ; var UNARY_OPERATORS:==:exports . UNARY_OPERATORS    [ ' void ' ] . concat ( BOOLEAN_UNARY_OPERATORS , NUMBER_UNARY_OPERATORS , STRING_UNARY_OPERATORS ) ;
var match = matches [ i ] ; var begin:==:Math . max ( clearedUntilDivIdx , match . begin . divIdx ) ;
var color = layer . paint [ ' line - color ' ] ; var tr:==:painter . transform ;
var Project = traceur . semantics . symbols . Project ; var moduleTransformer:==:traceur . codegeneration . moduleTransformer ;
var canvas = document . createElement ( ' canvas ' ) ; var supportsImageRenderingPixelated:==:featureDetection . supportsImageRenderingPixelated ( ) ;
var options = opt_options ? opt_options : ; var className:==:options . className !    undefined ? options . className : ' ol - rotate ' ;
var b = ref . b ; var max:==:Math . max ( r , g , b ) ;
var unescapeMd   = _ _ webpack_require _ _ ( 1023 ) . unescapeMd ; var replaceEntities:==:_ _ webpack_require _ _ ( 1023 ) . replaceEntities ;
var path   = require ( ' path ' ) ; var util:==:require ( ' util ' ) ;
var spring = obj . spring  |  |  null ; var motor:==:obj . motor  |  |  null ;
var createEmptyArrayLiteralExpression = parseTreeFactory . createEmptyArrayLiteralExpression ; var createForInStatement:==:parseTreeFactory . createForInStatement ;
var willEnter = _ props . willEnter ; var willLeave:==:_ props . willLeave ;
var body = resp . httpResponse . body  |  |  '' ; var headers:==:resp . httpResponse . headers  |  |  ;
var def = $ ( ' def-3 ' ) ; var jkl:==:$ ( ' jkl-3 ' ) ;
var t = doc . types . pop ( ) ; var n:==:doc . nums . pop ( ) ;
var module = qUnit . module ; var test:==:qUnit . test ;
var key = element . data ( ' keyData ' ) ; var separator:==:element . data ( ' split ' )  |  |  element . data ( ' separator ' )  |  |  ' + ' ;
var scheduledAnimation = scheduledAnimations [ i ] ; var runtimeAnimation:==:scheduledAnimation . _ runtimeAnimation ;
var lt = semver . lt ; var neq:==:semver . neq ;
var View = require ( ' View ' ) ; var scrollView:==:require ( ' scrollView ' ) ;
var operations = flush . operations ; var treeSnapshot:==:flush . treeSnapshot ;
var toIndexableString = pouchCollate . toIndexableString ; var parseIndexableString:==:pouchCollate . parseIndexableString ;
var textNode = textNodes [ 0 ] ; var block:==:blocks [ 0 ] ;
var iccId = conns [ i ] . iccId ; var icc:==:iccManager . getIccById ( iccId ) ;
var indigo200 = exports . indigo200 = ' # 9fa8da ' ; var indigo300:==:exports . indigo300    ' # 7986cb ' ;
var parse = _ _ dependency3 _ _ . parse ; var Compiler:==:_ _ dependency4 _ _ . Compiler ;
var eventEmitter = exports . eventEmitter = function ( ) ; var toString:==:object . prototype . toString ;
var children = this . appBarEl . children ; var length:==:children . length ;
var stringify = utils . stringify ; var type:==:utils . type ;
var scale = queryNumericValue ( node , ' scale ' , namespaces . kml ) ; var heading:==:queryNumericValue ( node , ' heading ' , namespaces . kml ) ;
var utils = mocha . utils ; var path:==:require ( ' path ' ) ;
var tar = require ( ' gulp - tar ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var symbolDraw = this . _ symbolDraw ; var polyline:==:this . _ polyline ;
var network = _ mobileConnection . voice . network ; var iccInfo:==:iccCard & & iccCard . iccInfo ;
var data = layer . data ; var width:==:layer . width ;
var Text = require ( ' Text ' ) ; var renderApplication:==:require ( ' renderApplication ' ) ;
var canvasHeight = this . options . canvasHeight ; var canvasWidth:==:this . options . canvasWidth ;
var width = svg . attr ( ' width ' ) ; var height:==:svg . attr ( ' height ' ) ;
var util = require ( ' util ' ) ; var format:==:require ( ' util ' ) . format ;
var oKey = this . _ oKey = key . clone ( ) ; var iKey:==:this . _ iKey    key . clone ( ) ;
var name = args [ 0 ] . name ; var xobj:==:xobjs . get ( name ) ;
var Plugin = imports . Plugin ; var fs:==:imports . fs ;
var bind = zrUtil . bind ; var group:==:graphic . group ;
var expectedUnsafeUrl = params . expectedUnsafeUrl ; var expectedNewWindow:==:params . expectedNewWindow ;
var fillAlpha = g . getNumericOption ( ' fillAlpha ' , setName ) ; var stepPlot:==:g . getBooleanOption ( ' stepPlot ' , setName ) ;
var svgUtil = powerbi . visuals . svgUtil ; var objectEnumerationBuilder:==:powerbi . visuals . objectEnumerationBuilder ;
var tree = imports . tree ; var vfs:==:imports . vfs ;
var position = this . position ; var scale:==:this . scale ;
var props = vm . _ props ; var propKeys:==:vm . $ options . _ propKeys  |  |  [ ] ;
var x = viewport . x  |  |  0 ; var y:==:viewport . y  |  |  0 ;
var ifStatement = traceur . syntax . trees . ifStatement ; var importBinding:==:traceur . syntax . trees . importBinding ;
var m = create ( matcher ) ; var type:==:typeOf ( expectation ) ;
var assign = require ( ' object - assign ' ) ; var copy:==:require ( ' clipboard - js ' ) ;
var integerOverflow = caml_exceptions . create ( ' numeric_error . integerOverflow ' ) ; var integerDivideByZero:==:caml_exceptions . create ( ' numeric_error . integerDivideByZero ' ) ;
var w = Math . min ( Math . max ( obj . width , o . minWidth ) , o . maxWidth ) ; var h:==:math . min ( math . max ( obj . height , o . minHeight ) , o . maxHeight ) ;
var responderSyntheticEvent = require ( ' responderSyntheticEvent ' ) ; var responderTouchHistoryStore:==:require ( ' responderTouchHistoryStore ' ) ;
var step = TICK_PLACEMENT [ granularity ] . step ; var spacing:==:TICK_PLACEMENT [ granularity ] . spacing ;
var array = this . _ array ; var offset:==:this . _ offset ;
var glob = require ( ' glob ' ) ; var join:==:require ( ' path ' ) . join ;
var red900 = exports . red900 = ' # b71c1c ' ; var redA100:==:exports . redA100    ' # ff8a80 ' ;
var assert = require ( ' chai ' ) . assert ; var path:==:require ( ' path ' ) ;
var FORK = ' FORK ' ; var JOIN:==:' JOIN ' ;
var url = decodeuriComponent ( req . query . url ) ; var hostname:==:urllib . parse ( url ) . hostname ;
var a = new constantNode ( 2 ) ; var b:==:new symbolNode ( ' x ' ) ;
var menus = imports . menus ; var tree:==:imports . tree ;
var collisionBoxArray = this . collisionBoxArray ; var rotationMatrix:==:this . rotationMatrix ;
var r = this . r . toArray ( ) ; var s:==:this . s . toArray ( ) ;
var a = goog . functions . partialRight ( f , ' foo ' ) ; var b:==:goog . functions . partialRight ( a , ' bar ' ) ;
var token = options . token ; var lineNumber:==:options . lineNumber ;
var data = this . data ; var camera:==:this . camera ;
var inj = this . injectorStrategy ; var p:==:inj . protoStrategy ;
var x = Math . min ( sourcePos [ 0 ] , targetPos [ 0 ] ) - xo ; var y:==:math . min ( sourcePos [ 1 ] , targetPos [ 1 ] ) - yo ;
var coverage = ' coverage ' in conf ? conf . coverage : false ; var reporter:==:' reporter ' in conf ? conf . reporter : ' spec ' ;
var getUserConfirmation = options . getUserConfirmation ; var keyLength:==:options . keyLength ;
var to = _ props2 . to ; var query:==:_ props2 . query ;
var kpiArcs = this . kpiArcs = [ ] ; var kpiArcPaths:==:this . kpiArcPaths    [ ] ;
var a = document . createElement ( ' a ' ) ; var span:==:document . createElement ( ' span ' ) ;
var doc = document ; var documentElement:==:doc . documentElement ;
var startCol = this . startCol ; var startLine:==:this . startLine ;
var cpx2 = shape . cpx2 ; var cpy2:==:shape . cpy2 ;
var destPath = ref . destPath ; var filename:==:ref . filename ;
var ast = parse ( stream , astFactory ) ; var val:==:new evaluator ( doc ) . val ( ast , nodes : [ context ] ) ;
var STATUS_CONNECTING   = exports . STATUS_CONNECTING = 1 ; var STATUS_LOADING_AGENTS:==:exports . STATUS_LOADING_AGENTS    2 ;
var high = encodedP . high ; var low:==:encodedP . low ;
var tildify = require ( ' tildify ' ) ; var Transform:==:require ( ' stream ' ) . Transform ;
var assert = require ( ' assert ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var network = options . network ; var networkStatus:==:options . networkStatus ;
var fs   = require ( ' fs ' ) ; var async:==:require ( ' async ' ) ;
var getStdFontMap = coreStandardFonts . getStdFontMap ; var getSerifFonts:==:coreStandardFonts . getSerifFonts ;
var POSITION_INDEX = Billboard . POSITION_INDEX ; var PIXEL_OFFSET_INDEX:==:Billboard . PIXEL_OFFSET_INDEX ;
var dontPush = opt_dontpush  |  |  false ; var curSlide:==:this . curSlide _ ;
var list = this . props . list ; var nameField:==:this . props . list . nameField ;
var updatersWithAttributes = this . updatersWithAttributes . values ; var length:==:updatersWithAttributes . length ;
var itemsIndom = this . _ itemsIndom ; var geo:==:this . geometry ;
var i d = json . request_id ; var div:==:$ ( ' < div > ' ) . attr ( ' i d ' , ' alert_div ' + i d ) . addClass ( ' vcode_div ' ) ;
var cbs = this . _ cbs = this . _ cbs  |  |  ; var name:==:options . name  |  |  options ;
var domProperty = require ( ' domProperty ' ) ; var changeEventPlugin:==:require ( ' changeEventPlugin ' ) ;
var fromName = itemModel . get ( ' fromName ' ) ; var toName:==:itemModel . get ( ' toName ' ) ;
var proc = imports . proc ; var bashBin:==:options . bashBin  |  |  ' bash ' ;
var textareaStyle = _ props . textareaStyle ; var valueLink:==:_ props . valueLink ;
var x = eventPosition . x ; var y:==:eventPosition . y ;
var loader = require ( ' @loader ' ) ; var dep1:==:require ( ' dep1 ' ) ;
var i d = node . i d ; var module:==:get_module_details ( id , token ) ;
var messageHandler = this . messageHandler ; var loadingTask:==:this . loadingTask ;
var i d = PUSH . i d ; var cacheForwardStack:==:json . parse ( cacheMapping . cacheForwardStack  |  |  ' [ ] ' ) ;
var Microsoft = window . Microsoft ; var jsCommon:==:window . jsCommon ;
var text = element ( by . binding ( ' text ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var old = that . _ old ; var element:==:that . element [ 0 ] ;
var label = $ ( input ) . next ( ' label ' ) ; var text:==:label . text ( ) ;
var row = this . selection . getCursor ( ) . row ; var column:==:this . selection . getCursor ( ) . column ;
var foo = bar`wow\na$ 42 b $ _ . foobar ( ) ` ; var bar:==:bar`wow\nab$ 42 $ _ . foobar ( ) ` ;
var isDict = corePrimitives . isDict ; var decryptStream:==:coreStream . decryptStream ;
var forceState = opts . forceState ; var visualMapModel:==:this . visualMapModel ;
var fs = require ( ' fs ' ) ; var falafel:==:require ( ' falafel ' ) ;
var networkMapping = this . _ breakpointManager . _ networkMapping ; var debuggerWorkspaceBinding:==:this . _ breakpointManager . _ debuggerWorkspaceBinding ;
var b = observable ( 3 ) ; var c:==:computed ( function ( ) return String ( a . get ( ) * b . get ( ) ) ) ;
var doc = opt_doc  |  |  document ; var cache:==:doc [ bot . inject . cache . CACHE_KEY _ ] ;
var isNegative = math . isNegative ; var bignumber:==:math . bignumber ;
var streamify = require ( ' gulp - streamify ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var options = prop . options ; var type:==:options . type ;
var reject = follower . _ rejectionHandlerAt ( index ) ; var promise:==:follower . _ promiseAt ( index ) ;
var styleSheet = require ( ' f8StyleSheet ' ) ; var text:==:require ( ' f8Text ' ) ;
var getRowAction = window . getRowAction ; var iNumberOfRows:==:window . iNumberOfRows ;
var left = position . left ; var top:==:position . top ;
var topRadius = options . topRadius ; var bottomRadius:==:options . bottomRadius ;
var encoding = this . _ mesh . encoding ; var skirtHeight:==:this . _ skirtHeight ;
var sqrt = Math . sqrt ; var abs:==:Math . abs ;
var change = changes [ i ] ; var start:==:change . start , end    change . end , text    change . text , removed    change . removed , origin    change . origin ;
var yScale3 = chart . scales . yScale3 ; var yScale4:==:chart . scales . yScale4 ;
var fixedTop = this . options . fixedTop ; var scrollTop:==:$ scroller . scrollTop ( ) ;
var emptyItemWidth = layoutParam . emptyItemWidth ; var height:==:seriesModel . get ( ' breadcrumb . height ' ) ;
var supportConstant = exports . supportConstant = ' absolute | after - edge | after | all - scroll | all | alphabetic | always | antialiased | armenian | auto | avoid - column | avoid - page | avoid | balance | baseline | before - edge | before | below | bidi - override | block - line - height | block | bold | bolder | border - box | both | bottom | box | break - all | break - word | capitalize | caps - height | caption | center | central | char | circle | cjk - ideographic | clone | close - quote | col - resize | collapse | column | consider - shifts | contain | content - box | cover | crosshair | cubic - bezier | dashed | decimal - leading - zero | decimal | default | disabled | disc | disregard - shifts | distribute - all - lines | distribute - letter | distribute - space | distribute | dotted | double | e - resize | ease - in | ease - in - out | ease - out | ease | ellipsis | end | exclude - ruby | fill | fixed | georgian | glyphs | grid - height | groove | hand | hanging | hebrew | help | hidden | hiragana - iroha | hiragana | horizontal | icon | ideograph - alpha | ideograph - numeric | ideograph - parenthesis | ideograph - space | ideographic | inactive | include - ruby | inherit | initial | inline - block | inline - box | inline - line - height | inline - table | inline | inset | inside | inter - ideograph | inter - word | invert | italic | justify | katakana - iroha | katakana | keep - all | last | left | lighter | line - edge | line - through | line | linear | list - item | local | loose | lower - alpha | lower - greek | lower - latin | lower - roman | lowercase | lr - tb | ltr | mathematical | max - height | max - size | medium | menu | message - box | middle | move | n - resize | ne - resize | newspaper | no - change | no - close - quote | no - drop | no - open - quote | no - repeat | none | normal | not - allowed | nowrap | nw - resize | oblique | open - quote | outset | outside | overline | padding - box | page | pointer | pre - line | pre - wrap | pre | preserve-3d | progress | relative | repeat - x | repeat - y | repeat | replaced | reset - size | ridge | right | round | row - resize | rtl | s - resize | scroll | se - resize | separate | slice | small - caps | small - caption | solid | space | square | start | static | status - bar | step - end | step - start | steps | stretch | strict | sub | super | sw - resize | table - caption | table - cell | table - column - group | table - column | table - footer - group | table - header - group | table - row - group | table - row | table | tb - rl | text - after - edge | text - before - edge | text - bottom | text - size | text - top | text | thick | thin | transparent | underline | upper - alpha | upper - latin | upper - roman | uppercase | use - script | vertical - ideographic | vertical - text | visible | w - resize | wait | whitespace | z - index | zero ' ; var supportConstantColor:==:exports . supportConstantColor    ' aqua | black | blue | fuchsia | gray | green | lime | maroon | navy | olive | orange | purple | red | silver | teal | white | yellow ' ;
var obj = node . object ; var prop:==:node . property ;
var Group = reactCanvas . group ; var image:==:reactCanvas . image ;
var width = ( u1-u0 ) * texture . width ; var height:==:( v1-v0 ) * texture . height ;
var htmlTemplateElement = scope . wrappers . htmlTemplateElement ; var mixin:==:scope . mixin ;
var t = this . height - pbottom . size ; var w:==:this . width ;
var update = program . update ; var subscriptions:==:program . subscriptions ;
var b = parseInt ( hexColor . substr ( 5 , 2 ) , 16 ) ; var a:==:parseInt ( hexColor . substr ( 7 , 2 ) , 16 ) ;
var animate = angular . isDefined ( $ attrs . animate ) ? $ scope . $ eval ( $ attrs . animate ) : progressConfig . animate ; var autoType:==:angular . isDefined ( $ attrs . autoType ) ? $ scope . $ eval ( $ attrs . autoType ) : progressConfig . autoType ;
var g = Math . round ( rgb [ 1 ] * 255 ) ; var b:==:Math . round ( rgb [ 2 ] * 255 ) ;
var serviceName = data [ ' serviceName ' ] ; var payload:==:data [ ' payload ' ] ;
var lat = basic_map . getCenter ( ) . lat ( ) ; var lng:==:basic_map . getCenter ( ) . lng ( ) ;
var action = ui . actions . get ( ' find ' ) ; var graph:==:ui . editor . graph ;
var d1 = _ addDiv ( ' d1 ' , null , null , 0 , 0 , 500 , 500 ) ; var d2:==:_ addDiv ( ' d2 ' , d1 , null , 200 , 200 , 50 , 50 ) ;
var viewport = axesLayout . viewport ; var margin:==:axesLayout . margin ;
var socketTimeout = red . settings . socketTimeout |  | null ; var net:==:require ( ' net ' ) ;
var content = this . content ; var resources:==:this . resources ;
var brown900 = exports . brown900 = ' # 3e2723 ' ; var blueGrey50:==:exports . blueGrey50    ' # eceff1 ' ;
var testIdentifier = this . props . testIdentifier  |  |  ' test ' ; var onSnapshotReady:==:this . props . onSnapshotReady  |  |  this . onDefaultAction ;
var params = ob . params ; var validateUserForDataReadapi:==:ob . validateUserForDataReadapi ;
var wtree = this . wtree ; var btree:==:this . btree ;
var uglify   = require ( ' gulp - uglify ' ) ; var sequence:==:require ( ' run - sequence ' ) ;
var symbolQuadsArray = tile . symbolQuadsArray . serialize ( ) ; var transferables:==:[ rawTileData ] . concat ( featureIndex _ . transferables ) . concat ( collisionTile _ . transferables ) ;
var findreplace = imports . findreplace ; var commands:==:imports . commands ;
var currentTime = clockViewModel . currentTime ; var startTime:==:clockViewModel . startTime ;
var stageWidth = window . stageWidth |  | winWidth ; var stageHeight:==:window . stageHeight |  |  ( winHeight - gameContainer . offsetTop ) ;
var async = require ( ' async ' ) ; var closure:==:require ( ' closure - util ' ) ;
var fs = require ( ' fs ' ) ; var argparse:==:require ( ' argparse ' ) ;
var error = _ . partial ( print , ' error ' ) ; var log:==:_ . partial ( print , ' log ' ) ;
var etag = webapp . metaData . etag  |  |  null ; var packageEtag:==:webapp . metaData . packageEtag  |  |  null ;
var dynCall_viidddddd = Module [ ' dynCall_viidddddd ' ] = asm [ ' dynCall_viidddddd ' ] ; var dynCall_iiiiiiiiii:==:Module [ ' dynCall_iiiiiiiiii ' ]    asm [ ' dynCall_iiiiiiiiii ' ] ;
var offset = req . query [ ' offset ' ] * 1 ; var limit:==:req . query [ ' limit ' ] * 1 ;
var gl = options . context . _ gl ; var bufferTarget:==:options . bufferTarget ;
var diameterTop = ( options . diameterTop = = = 0 ) ? 0 : options . diameterTop  |  |  options . diameter  |  |  1 ; var diameterBottom:==:options . diameterBottom  |  |  options . diameter  |  |  1 ;
var cellOffsetToDayOffset = t . cellOffsetToDayOffset ; var dateToDayOffset:==:t . dateToDayOffset ;
var w = c . width = img . width ; var h:==:c . height    img . height ;
var x = mercX ( lon ) - cx ; var y:==:mercY ( lat ) - cy ;
var torrent = this . model . get ( ' torrents ' ) [ this . model . get ( ' quality ' ) ] ; var health:==:torrent . health . capitalize ( ) ;
var target = event . target  |  |  event . srcElement ; var ctrlKey:==:event . ctrlKey ;
var n1 = new redNode ( i d : ' n1',type : ' abc',wires : [ [ ' n2 ' ] , [ ' n3 ' ] , [ ' n4','n5 ' ] ] ) ; var n2:==:new redNode ( i d : ' n2',type : ' abc ' ) ;
var stringify = _ _ webpack_require _ _ ( 11 ) . stringify ; var extend:==:_ _ webpack_require _ _ ( 5 ) . extend ;
var Group = conn . model ( ' gh4049_0 ' , groupSchema ) ; var now:==:date . now ( ) ;
var display_name = DDG . getProperty ( item , ' channel . display_name ' ) ; var status:==:ddg . getProperty ( item,'channel . status ' ) ;
var isZero = math . isZero ; var bignumber:==:math . bignumber ;
var sourcePosition = traceur . util . sourcePosition ; var token:==:traceur . syntax . token ;
var bidi = coreBidi . bidi ; var winAnsiEncoding:==:coreEncodings . winAnsiEncoding ;
var c = processDiagramCanvas . g . ellipse ( targetx , targety , 2 , 2 ) . attr ( fill : color . red ) ; var c:==:processDiagramCanvas . g . ellipse ( nextSrcx , nextSrcy , 2 , 2 ) . attr ( fill : color . red ) ;
var isChromeApp = platformInfo . isChromeApp ; var isnw:==:platformInfo . isnw ;
var d = a . width ; var e:==:a . height ;
var prefixer = $ mdUtil . prefixer ( ) ; var animator:==:$ mdUtil . dom . animator ;
var httpClient = windows . web . http . httpClient ; var httpFormUrlEncodedContent:==:windows . web . http . httpFormUrlEncodedContent ;
var x = x0 + progress * ( x1 - x0 ) ; var y:==:y0 + progress * ( y1 - y0 ) ;
var frameRateLogger = require ( ' frameRateLogger ' ) ; var keyboard:==:require ( ' keyboard ' ) ;
var opts = this . _ opts ; var wh:==:[ ' width ' , ' height ' ] [ whIdx ] ;
var samples = eop . _ samples = eopData . samples ; var dates:==:eop . _ dates    [ ] ;
var format = require ( ' util ' ) . format ; var assert:==:require ( ' assert ' ) ;
var fs = imports . fs ; var settings:==:imports . settings ;
var showPlayBtn = showControl & & controlModel . get ( ' showPlayBtn ' , true ) ; var showPrevBtn:==:showControl & & controlModel . get ( ' showPrevBtn ' , true ) ;
var dsvString = dataset . dsvString ; var metadata:==:dataset . metadata  |  |  ;
var reactNative = require ( ' reactNative ' ) ; var statusBar:==:require ( ' statusBar ' ) ;
var body = editor . body ; var br:==:UE . browser . ie ? ' ' : ' < br > ' ;
var out = commandLine . out ; var dir:==:commandLine . dir ;
var client = this . client ; var protocol:==:this . protocol ;
var identifierExpression = traceur . syntax . trees . identifierExpression ; var identifierToken:==:traceur . syntax . identifierToken ;
var footer = require ( ' gulp - footer ' ) ; var zip:==:require ( ' gulp - zip ' ) ;
var tooltipManager = powerbi . visuals . tooltipManager ; var svgUtil:==:powerbi . visuals . svgUtil ;
var arg = _ arg ; var cmd:==:_ cmd ;
var scrollLeft = self . _ _ scrollLeft ; var scrollTop:==:self . _ _ scrollTop ;
var color = dataViewObjects . getFillColor ( objects , mekkoChart . properties [ ' columnBorder ' ] [ ' color ' ] , mekkoChart . defaultSettings . columnBorder . color ) ; var width:==:dataViewObjects . getValue ( objects , mekkoChart . properties [ ' columnBorder ' ] [ ' width ' ] , mekkoChart . defaultSettings . columnBorder . width ) ;
var callback = obj . callback ; var limit:==:obj . limit ;
var test   = require ( ' utest ' ) ; var poolConfig:==:common . poolConfig ;
var r = Math . round ( rgb [ 0 ] * 255 ) ; var g:==:Math . round ( rgb [ 1 ] * 255 ) ;
var projection = globe . projection ; var bounds:==:globe . bounds ( view ) ;
var vcard = presence . c ( ' x ' , xmlns : ' vcard - temp : x : update ' ) ; var photo:==:vcard . c ( ' photo ' ) ;
var w = x + width ; var h:==:y + height ;
var editors = imports . editors ; var c9:==:imports . c9 ;
var el = seg . el ; var event:==:seg . event ;
var tabManager = imports . tabManager ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var touches = this . createTouchList ( options . touches , target ) ; var targetTouches:==:this . createTouchList ( options . targetTouches , target ) ;
var size = _ _ webpack_require _ _ ( 3 ) . size ; var maxArgumentCount:==:_ _ webpack_require _ _ ( 37 ) . maxArgumentCount ;
var position = labelPos . position ; var width:==:textRect . width + paddings [ 1 ] + paddings [ 3 ] ;
var blockMapBuilder = require ( ' blockMapBuilder ' ) ; var contentBlock:==:require ( ' contentBlock ' ) ;
var post_logout_redirect_uri = _ ref . post_logout_redirect_uri ; var data:==:_ ref . data ;
var blur = layer . paint [ ' line - blur ' ] + antialiasing ; var color:==:layer . paint [ ' line - color ' ] ;
var output = document . getElementById ( ' output ' ) ; var flag:==:document . getElementById ( ' flag ' ) ;
var loginname = validator . trim ( req . body . loginname ) . toLowerCase ( ) ; var email:==:validator . trim ( req . body . email ) . toLowerCase ( ) ;
var fs = require ( ' fs ' ) ; var debug:==:require ( ' debug ' ) ( ' keystone : core : importer ' ) ;
var stringTopdfString = sharedUtil . stringTopdfString ; var stringToutf8String:==:sharedUtil . stringToutf8String ;
var menus = this . menus ; var editor:==:this . editor ;
var f8NotificationsView = require ( ' f8NotificationsView ' ) ; var react:==:require ( ' react ' ) ;
var x = ( snakePath [ i * snakeSpacer ] ) . x ; var y:==:( snakePath [ i * snakeSpacer ] ) . y ;
var init = Widget . fn . init ; var destroy:==:Widget . fn . destroy ;
var skirtHeight = this . _ skirtHeight ; var stride:==:structure . stride ;
var metadata = imports . metadata ; var installer:==:imports . installer ;
var util = require ( ' util ' ) ; var yeoman:==:require ( ' yeoman - generator ' ) ;
var path = d3 . select ( ' g . hovertext ' ) . select ( ' path ' ) ; var text:==:d3 . select ( ' g . hovertext ' ) . select ( ' text . nums ' ) ;
var digest = attachment . digest ; var type:==:attachment . content_type ;
var node = this . _ node ; var contentSize:==:node . _ contentSize ;
var x0 = this . x0 ; var y0:==:this . y0 ;
var reactInstrumentation = require ( ' reactInstrumentation ' ) ; var reactUpdates:==:require ( ' reactUpdates ' ) ;
var sideOrientation = ( options . sideOrientation = = = 0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ; var instance:==:options . instance ;
var pooledClass = require ( ' pooledClass ' ) ; var reactBrowserEventEmitter:==:require ( ' reactBrowserEventEmitter ' ) ;
var key = element . key ; var value:==:element . value ;
var confirmDownloadController = _ appJsControllersConfirmDownloadController [ ' default ' ] ; var deviceNameController:==:_ appJsControllersDeviceNameController [ ' default ' ] ;
var normalizeError = settings . normalizeError ; var normalizeSuccess:==:settings . normalizeSuccess ;
var boost = $ ( ' # boost ' , documents_form ) . val ( ) ; var overwrite:==:$ ( ' # overwrite ' , documents_form ) . val ( ) ;
var e = URI . encode ; var d:==:URI . decode ;
var name = names [ i ] ; var c:==:new mockContactAllFields ( ) ;
var Header = require ( ' Header ' ) ; var Prism:==:require ( ' Prism ' ) ;
var imdb_id = _ this . model . get ( ' imdb_id ' ) ; var episodes:==:this . model . get ( ' episodes ' ) ;
var Background = Windows . applicationModel . background ; var backgroundExecutionManager:==:background . backgroundExecutionManager ;
var datefield = TICK_PLACEMENT [ granularity ] . datefield ; var step:==:TICK_PLACEMENT [ granularity ] . step ;
var error = new Error ( ' some error ' ) ; var operation:==:retry . operation ( retries : 3 , forever : true ) ;
var reactReconciler = require ( ' reactReconciler ' ) ; var transaction:==:require ( ' transaction ' ) ;
var path    = require ( ' path ' ) ; var eventEmitter2:==:require ( ' eventemitter2 ' ) . eventEmitter2 ;
var type = this . props . type ; var value:==:this . state . value ;
var i d = this . token . i d ; var userId:==:this . token . userId ;
var status = axisPointerModel . get ( ' status ' ) ; var value:==:axisPointerModel . get ( ' value ' ) ;
var b = color . b ; var max:==:Math . max ( Math . max ( r , g ) , b ) ;
var type = track . type ; var i d:==:track . streamInfo . i d ;
var vertexCacheOptimize = parameters . vertexCacheOptimize ; var compressVertices:==:parameters . compressVertices ;
var to = codeMirror . indexFromPos ( change . to ) ; var text:==:change . text . join ( ' \n ' ) ;
var appState = alloy . models . appState ; var heroes:==:alloy . collections . heroes ;
var db = new PouchDB ( dbs . name ) ; var remote:==:new PouchDB ( dbs . remote ) ;
var lport = splitlhostlport [ 1 ] ; var redir:==:hash . substring ( hash . indexOf ( ' redir ' ) + 6 , hash . length ) ;
var scale = this . shared . scale ; var next:==:this . shared . next ;
var send = require ( ' send ' ) ; var extname:==:path . extname ;
var key = String ( log [ i ] . params [ ' key ' ] ) ; var value:==:String ( log [ i ] . params [ ' value ' ] ) ;
var exec   = require ( ' child_process ' ) . exec ; var fclone:==:require ( ' fclone ' ) ;
var Script = Struct ( ' Script ' ) ; var sourceErrorHandler:==:struct ( ' sourceErrorHandler ' ) ;
var popoverOptions = getValue ( options . popoverOptions , null ) ; var cameraDirection:==:getValue ( options . cameraDirection , camera . direction . back ) ;
var receiveShadows = shadowMode . receiveShadows ( model . shadows ) ; var nodeCommands:==:model . _ nodeCommands ;
var generatorTransformPass = traceur . codegeneration . generatorTransformPass ; var isExpressionTransformer:==:traceur . codegeneration . isExpressionTransformer ;
var keyCommandMoveSelectionToStartOfBlock = require ( ' keyCommandMoveSelectionToStartOfBlock ' ) ; var keyCommandTransposeCharacters:==:require ( ' keyCommandTransposeCharacters ' ) ;
var min = extremes . min ; var max:==:extremes . max ;
var samplesPerLine = frame . samplesPerLine ; var scanLines:==:frame . scanLines ;
var domain = opts . domain ; var enhanced:==:opts . enhancedLinkAttribution ;
var enterActiveClass = ref . enterActiveClass ; var appearClass:==:ref . appearClass ;
var button = originalEvent . button ; var fromElement:==:originalEvent . fromElement ;
var proxy_server_proc = unblock_youku . default_proxy_server_proc ; var proxy_server_addr:==:unblock_youku . default_proxy_server_addr ;
var is = require ( ' is ' ) ; var tick:==:require ( ' next - tick ' ) ;
var beep = fs . readFileSync ( path . join ( pubdir , ' beep . js ' ) ) ; var boop:==:fs . readFileSync ( path . join ( pubdir , ' boop . js ' ) ) ;
var assert = chai . assert ; var sinon:==:require ( ' sinon ' ) ;
var each = zrUtil . each ; var eachAxisDim:==:helper . eachAxisDim ;
var entity = geometryUpdater . _ entity ; var polylineVolume:==:entity . polylineVolume ;
var predefinedName = traceur . syntax . predefinedName ; var keywords:==:traceur . syntax . keywords ;
var gl = this . gl ; var projection:==:this . renderSession . projection ;
var b = document . createElement ( ' b ' ) ; var c:==:document . createElement ( ' c ' ) ;
var addedObjects = this . _ addedObjects ; var added:==:addedObjects . values ;
var https = require ( ' https ' ) ; var path:==:require ( ' path ' ) ;
var deepPurple500 = exports . deepPurple500 = ' # 673ab7 ' ; var deepPurple600:==:exports . deepPurple600    ' # 5e35b1 ' ;
var multiplier = attribute . multiplier  |  |  1 ; var components:==:attribute . components  |  |  1 ;
var programNode = jsProfileModel . programNode ; var gcNode:==:jsProfileModel . gcNode ;
var headers = ref . headers ; var status:==:ref . status ;
var scrollToAlignment = _ props6 . scrollToAlignment ; var scrollToCell:==:_ props6 . scrollToCell ;
var dragonBonesData = buildArmatureDataPackage . dragonBonesData ; var armatureData:==:buildArmatureDataPackage . armatureData ;
var Cipher = des . Cipher ; var DES:==:des . DES ;
var values = $ ( element ) . data ( ) . values ; var valueMin:==:$ ( element ) . data ( ) . valueMin ;
var moveFromCol = settings . moveFromCol ; var moveToRow:==:settings . moveToRow ;
var menus = imports . menus ; var login:==:imports . login ;
var Finally = traceur . syntax . trees . Finally ; var forOfStatement:==:traceur . syntax . trees . forOfStatement ;
var notImplementedException = sharedUtil . notImplementedException ; var missingDataException:==:sharedUtil . missingDataException ;
var scale = this . get ( ' scale ' ) ; var axisLine:==:this . get ( ' axisLine ' ) ;
var assert = require ( ' assert ' ) ; var through:==:require ( ' through2 ' ) ;
var dx = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx ' , this . dx ) ) ) ) ; var arrowHead:==:math . max ( 0 , math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' arrowHead ' , this . arrowHead ) ) ) ) ;
var gltf = model . gltf ; var skins:==:gltf . skins ;
var viewPropTypes = require ( ' viewPropTypes ' ) ; var colorPropType:==:require ( ' colorPropType ' ) ;
var traverse = authorAttributes . traverse ; var valueAtIndex:==:authorAttributes . valueAtIndex ;
var name = sanitize ( ( ( o . name?o . name : o . i d )  |  |  ' ' ) . toString ( ) ) ; var topic:==:sanitize ( ( o . topic |  |  ' ' ) . toString ( ) ) ;
var Progress = reporters . Progress ; var Base:==:reporters . Base ;
var bind = utils . bind ; var warn:==:utils . debug ( ' core : a - node : warn ' ) ;
var layoutAttributes = geo . layoutAttributes ; var supplyLayoutDefaults:==:geo . supplyLayoutDefaults ;
var createSpreadExpression = parseTreeFactory . createSpreadExpression ; var createVariableStatement:==:parseTreeFactory . createVariableStatement ;
var path = require ( ' path ' ) ; var dirname:==:path . dirname ;
var startTime = formatTime ( this . arg ( ' startTime ' ) ) ; var endTime:==:formatTime ( this . arg ( ' endTime ' ) ) ;
var creditDisplay = frameState . creditDisplay ; var terrainData:==:surfaceTile . terrainData ;
var width = svgInfo . width ; var height:==:svgInfo . height ;
var providers = that . providers ; var providerInfo:==:defaultValue ( dbRoot . providerInfo , [ ] ) ;
var combineUrl = sharedUtil . combineUrl ; var error:==:sharedUtil . error ;
var commands = imports . commands ; var save:==:imports . save ;
var clientHeight = _ state . clientHeight ; var clientWidth:==:_ state . clientWidth ;
var path = require ( ' path ' ) ; var through:==:require ( ' through2 ' ) ;
var reactdomComponentTree = require ( ' reactdomComponentTree ' ) ; var reactdomContainerInfo:==:require ( ' reactdomContainerInfo ' ) ;
var subdivisions = options . subdivisions  |  |  1 ; var minHeight:==:options . minHeight ;
var selectionIdBuilder = powerbi . visuals . selectionIdBuilder ; var tooltipBuilder:==:powerbi . visuals . tooltipBuilder ;
var path   = require ( ' path ' ) ; var winston:==:require ( ' winston ' ) ;
var path = options . path ; var shape:==:options . shape ;
var aug = this . vexpr ( auge ) ; var val:==:this . vexpr ( s . value ) ;
var itemStyle = seriesScope & & seriesScope . itemStyle ; var hoverItemStyle:==:seriesScope & & seriesScope . hoverItemStyle ;
var utils = client . utils ; var renderer:==:client . renderer ;
var atNameExpression = traceur . syntax . trees . atNameExpression ; var atNameDeclaration:==:traceur . syntax . trees . atNameDeclaration ;
var options = mod . options ; var isVirtual:==:mod . isVirtual ;
var async = require ( ' async ' ) ; var nomnom:==:require ( ' nomnom ' ) ;
var isRef = corePrimitives . isRef ; var isStream:==:corePrimitives . isStream ;
var declareIdentInLocalScope = utils . declareIdentInLocalScope ; var initScopeMetadata:==:utils . initScopeMetadata ;
var commands = imports . commands ; var console:==:imports . console ;
var menus = imports . menus ; var gotoline:==:imports [ ' ace . gotoline ' ] ;
var rawIds = o . rawIds ; var options:==:o . options ;
var reactTestUtils = require ( ' reactTestUtils ' ) ; var sampleDraftInlineStyle:==:require ( ' sampleDraftInlineStyle ' ) ;
var S = new Schema ( _ i d : String ) ; var N:==:new Schema ( _ i d : Number ) ;
var formidable = common . formidable ; var http:==:require ( ' http ' ) ;
var word = Words . findOne ( word_id ) ; var game:==:games . findOne ( word . game_id ) ;
var timeZone = goog . require ( ' goog . i18n . timeZone ' ) ; var dateIntervalPatterns:==:goog . require ( ' goog . i18n . dateIntervalPatterns ' ) ;
var querystring = require ( ' querystring ' ) ; var async:==:require ( ' async ' ) ;
var step = this . step ; var end:==:this . end ;
var a = mobx . observable ( 3 ) ; var b:==:mobx . observable ( 4 ) ;
var createFunctionExpression = traceur . codegeneration . parseTreeFactory . createFunctionExpression ; var createMemberExpression:==:traceur . codegeneration . parseTreeFactory . createMemberExpression ;
var LU = LUP . LU ; var n:==:LU . length ;
var scale = Fn . scale ; var toFixed:==:fn . toFixed ;
var values = attribute . values ; var length:==:values . length ;
var util = imports . util ; var find:==:imports . find ;
var blockBindingTransformer = traceur . codegeneration . blockBindingTransformer ; var cascadeExpressionTransformer:==:traceur . codegeneration . cascadeExpressionTransformer ;
var superTransformer = traceur . codegeneration . superTransformer ; var tempVarTransformer:==:traceur . codegeneration . tempVarTransformer ;
var isString = _ _ webpack_require _ _ ( 11 ) . isString ; var format:==:_ _ webpack_require _ _ ( 11 ) . format ;
var startCap = ( settings . startCap = = null ) ? 0 : settings . startCap ; var endCap:==:( settings . endCap     null ) ? 0 : settings . endCap ;
var propertyNameShorthand = traceur . syntax . trees . propertyNameShorthand ; var quasiLiteralExpression:==:traceur . syntax . trees . quasiLiteralExpression ;
var model = me . _ model = getBaseModel ( opts ) ; var active:==:me . _ active ;
var createIdentifierExpression = parseTreeFactory . createIdentifierExpression ; var createNumberLiteral:==:parseTreeFactory . createNumberLiteral ;
var helper = this . helper ; var params:==:this . params ;
var _ initPrediction = module [ ' _ initPrediction ' ] = asm [ ' _ initPrediction ' ] ; var _ characterRecognize:==:module [ ' _ characterRecognize ' ]    asm [ ' _ characterRecognize ' ] ;
var GET_TODO_ERROR = exports . GET_TODO_ERROR = ' GET_TODO_ERROR ' ; var GET_TODO_OK:==:exports . GET_TODO_OK    ' GET_TODO_OK ' ;
var startContainer = rangeObject . startContainer ; var endContainer:==:rangeObject . endContainer ;
var gammaOutput = renderer . gammaOutput ; var toneMapping:==:renderer . toneMapping ;
var dynCall_iiiiiiiiii = Module [ ' dynCall_iiiiiiiiii ' ] = asm [ ' dynCall_iiiiiiiiii ' ] ; var dynCall_viii:==:Module [ ' dynCall_viii ' ]    asm [ ' dynCall_viii ' ] ;
var a = this . ta ; var b:==:this . tb ;
var type = typeof options = = = ' function ' , rskin = ready . config . skin ; var skin:==:( rskin ? rskin + ' ' + rskin + ' -msg ' : '' )  |  | 'layui - layer - msg ' ;
var title = options . title  |  |  gettext ( ' Are you sure ? ' ) ; var message:==:options . message  |  |  ' ' ;
var entities = dataSource . entities . values ; var label:==:entities [ 0 ] . label ;
var good = getRangeValue ( categoricalValues . good , settings . values . goodPercent ) ; var veryGood:==:getRangeValue ( categoricalValues . veryGood , settings . values . veryGoodPercent ) ;
var left = drawOptions . left ; var top:==:drawOptions . top ;
var h = this . _ hsv [ 0 ] ; var s:==:this . _ hsv [ 1 ] ;
var predefinedName = traceur . syntax . predefinedName ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var applyFuncToEach = graphDataWindow . applyFuncToEach . createDelegate ( graphDataWindow ) ; var applyFuncToEachWithInput:==:graphDataWindow . applyFuncToEachWithInput . createDelegate ( graphDataWindow ) ;
var b = o . b ; var m:==:o . m ;
var path = query & & query . path + ' ' ; var nakBin:==:vfsOptions . nakBin ;
var to = msginfo . getAttribute ( ' to ' )  |  |  '' ; var type:==:msginfo . getAttribute ( ' type ' )  |  |  '' ;
var y = this . attribute ( ' y ' ) . Length . toPixels ( ' y ' ) ; var width:==:this . attribute ( ' width ' ) . length . toPixels ( ' x ' ) ;
var modelMatrix = billboardCollection . modelMatrix ; var position:==:this . _ position ;
var crossPageChannel = goog . net . xpc . crossPageChannel ; var crossPageChannelRole:==:goog . net . xpc . crossPageChannelRole ;
var noop = angular . noop ; var forEach:==:angular . forEach ;
var password = req . fields . password ; var repassword:==:req . fields . repassword ;
var outer = hotspot . getObjectByName ( ' outer ' ) ; var inner:==:hotspot . getObjectByName ( ' inner ' ) ;
var expect = require ( ' expect . js ' ) ; var md5:==:require ( ' md5-hex ' ) ;
var object = dirty . object ; var old:==:dirty . old ;
var obj = ast . obj . visit ( this ) ; var key:==:ast . key . visit ( this ) ;
var onScroll = this . props . onScroll ; var scrolly:==:' scrolly ' in window ? window . scrolly : document . documentElement . scrollTop ;
var heading = queryNumericValue ( node , ' heading ' , namespaces . kml ) ; var color:==:queryColorValue ( node , ' color ' , namespaces . kml ) ;
var gulp = require ( ' gulp ' ) ; var less:==:require ( ' gulp - less ' ) ;
var net = require ( ' net ' ) ; var vm:==:require ( ' vm ' ) ;
var font = current . font ; var textRenderingMode:==:current . textRenderingMode ;
var key = e . keyCode ; var ctrlKey:==:e . ctrlKey ;
var alert = imports [ ' dialog . alert ' ] . show ; var confirm:==:imports [ ' dialog . confirm ' ] . show ;
var contours = trace . contours ; var uid:==:trace . uid ;
var center = options . center ; var granularity:==:options . granularity * 8 . 0 ;
var months = w2utils . settings . fullmonths ; var days:==:w2utils . settings . fulldays ;
var eventStartPosition = aggregator . _ eventStartPosition ; var pressTime:==:aggregator . _ pressTime ;
var s1 = Cartesian2 . fromArray ( texCoords , i1 * 2 , s1Scratch ) ; var s2:==:cartesian2 . fromArray ( texCoords , i2 * 2 , s2Scratch ) ;
var order = fallback_order [ this . _ placement ] ; var length:==:order . length ;
var dep1 = require ( ' dep1 ' ) ; var dep2:==:require ( ' dep2 ' ) ;
var io = board . io ; var pins:==:io . pins . slice ( ) ;
var b = new jsbn ( params . b ) ; var n:==:new jsbn ( params . n ) ;
var util = require ( ' util ' ) ; var express:==:require ( ' express ' ) ;
var optionals = isPresent ( extra ) ? stringMapWrapper . get ( extra , ' optionals ' ) : null ; var validator:==:isPresent ( extra ) ? stringMapWrapper . get ( extra , ' validator ' ) : null ;
var x = translation . x ; var y:==:translation . y ;
var height = element . height ; var canvas:==:document . createElement ( ' canvas ' ) ;
var mousedown = fakeDispatch ( ' mousedown ' , 100 , 0 ) ; var mousemove:==:fakeDispatch ( ' mousemove ' , 100 , 2 ) ;
var createStatementList = parseTreeFactory . createStatementList ; var createAssignmentStatement:==:parseTreeFactory . createAssignmentStatement ;
var context = result . context ; var request:==:result . request ;
var Footer = require ( ' Footer ' ) ; var Header:==:require ( ' Header ' ) ;
var filter = utils . filter ; var indexOf:==:utils . indexOf ;
var fullBlack = exports . fullBlack = ' rgba ( 0 , 0 , 0 , 1 ) ' ; var darkBlack:==:exports . darkBlack    ' rgba ( 0 , 0 , 0 , 0 . 87 ) ' ;
var blueGrey200 = exports . blueGrey200 = ' # b0bec5 ' ; var blueGrey300:==:exports . blueGrey300    ' # 90a4ae ' ;
var mouse = e . type . indexOf ( ' mouse ' ) = = = 0 ; var pointer:==:e . type . indexOf ( ' pointer ' )      0 ;
var dir = camera . direction ; var right:==:camera . right ;
var e2 = _ e2 ; var e1:==:_ e1 ;
var Linking = require ( ' Linking ' ) ; var React:==:require ( ' React ' ) ;
var log = window . logFlags  |  |  ; var api:==:scope . api . instance . styles ;
var Image = reactCanvas . image ; var text:==:reactCanvas . text ;
var leaveToClass = ref . leaveToClass ; var leaveActiveClass:==:ref . leaveActiveClass ;
var addr = this . address ( ) ; var pathname:==:opt_pathname  |  |  '' ;
var identifierToken = traceur . syntax . identifierToken ; var parseTree:==:traceur . syntax . trees . parseTree ;
var xFormatter = series . xFormatter  |  |  this . xFormatter ; var yFormatter:==:series . yFormatter  |  |  this . yFormatter ;
var path = require ( ' path ' ) ; var which:==:require ( ' which ' ) ;
var edgeShortcutType = this . _ edgeShortcutType ; var edgeElementType:==:this . _ edgeElementType ;
var onlyStrict = onlyStrictPattern . test ( src ) ; var noStrict:==:noStrictPattern . test ( src ) ;
var watched = ! this . model . get ( ' watched ' ) ; var imdb:==:this . model . get ( ' imdb_id ' ) ;
var pixelFormat = defaultValue ( options . pixelFormat , pixelFormat . rgba ) ; var pixelDatatype:==:defaultValue ( options . pixelDatatype , pixelDatatype . unsigned_byte ) ;
var loc = parentSection . location ( ) ; var size:==:parentSection . size ( ) ;
var treeNode = testSet . treeNode ; var displayNode:==:testSet . displayNode ;
var sass = require ( ' node - sass ' ) ; var fs:==:require ( ' fs ' ) ;
var Wire = goog . labs . net . webChannel . wire ; var wirev8:==:goog . labs . net . webChannel . wirev8 ;
var dataMin = me . dataMin ; var dataMax:==:me . dataMax ;
var surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj ; var wheelInfos:==:this . wheelInfos ;
var createCommaExpression = parseTreeFactory . createCommaExpression ; var createIdentifierExpression:==:parseTreeFactory . createIdentifierExpression ;
var column = this . column ; var start:==:range . start ;
var cssnano = require ( ' cssnano ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var Widget = ui . Widget ; var keys:==:kendo . keys ;
var logger = require ( ' gulp - logger ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var fromValue = rangeColor . fromValue ; var toValue:==:rangeColor . toValue ;
var object = compile ( node . object , defs , args ) ; var index:==:compile ( node . index , defs , args ) ;
var contactPicker = contacts . contactPicker ; var contactFieldType:==:contacts . contactFieldType ;
var pbStreamParser = goog . require ( ' goog . net . streams . pbStreamParser ' ) ; var streamParser:==:goog . require ( ' goog . net . streams . streamParser ' ) ;
var result = bookKeeping . result ; var keyPrefix:==:bookKeeping . keyPrefix ;
var protectedDate = goog . testing . testCase . protectedDate _ ; var d:==:new protectedDate ( ) ;
var SYNTAX_ERROR_TREE = ' SYNTAX_ERROR_TREE ' ; var TEMPLATE_LITERAL_EXPRESSION:==:' TEMPLATE_LITERAL_EXPRESSION ' ;
var startPage = extensionInfo . startPage ; var name:==:extensionInfo . name ;
var delta = opt_delta  |  |  0 ; var order:==:opt_order  |  |  Blockly . Dart . ORDER_NONE ;
var Editor = imports . Editor ; var scm:==:imports . scm ;
var Text = require ( ' f8Text ' ) ; var touchableOpacity:==:require ( ' touchableOpacity ' ) ;
var filter = typeof filter ! = = ' undefined ' ? filter : Array . prototype . filter ; var trim:==:typeof trim !    ' undefined ' ? trim : String . prototype . trim ;
var lightGreen900 = exports . lightGreen900 = ' # 33691e ' ; var lightGreena100:==:exports . lightGreena100    ' # ccff90 ' ;
var find = imports . find ; var save:==:imports . save ;
var markers = parseMarkersOption ( config [ type ] & & config [ type ] . markers  |  |  config . markers ) ; var exceptions:==:config [ type ] & & config [ type ] . exceptions  |  |  config . exceptions  |  |  [ ] ;
var success = source . success ; var error:==:source . error ;
var repeat = motionArgs . repeat ; var ch:==:motionArgs . forward ? cur . ch + repeat : cur . ch - repeat ;
var xmin = options . xmin ; var zmin:==:options . zmin ;
var cyanA700 = exports . cyanA700 = ' # 00b8d4 ' ; var teal50:==:exports . teal50    ' # e0f2f1 ' ;
var parent = tElement . parent ( ) ; var theme:==:getAttribute ( parent , ' theme ' )  |  |  uiSelectConfig . theme ;
var ifr = goog . dom . createElement ( ' iframe ' ) ; var s:==:ifr . style ;
var format = info . format ; var type:==:info . type ;
var south = Math . max ( rectangle . south , otherRectangle . south ) ; var north:==:math . min ( rectangle . north , otherRectangle . north ) ;
var Node = kendo . data . Node ; var hierarchicalDataSource:==:kendo . data . hierarchicalDataSource ;
var Buffer = require ( ' buffer ' ) . Buffer ; var fs:==:require ( ' fs ' ) ;
var values = khrMaterialsCommon . values ; var keys:==:object . keys ( values ) . sort ( ) ;
var st = this . styles , allText = this . text , marked = this . marked ; var len:==:allText . length ;
var isopackCache = options . isopackCache ; var acceptableWeakPackages:==:options . acceptableWeakPackages  |  |  ;
var Stream = require ( ' stream ' ) . Stream ; var crypto:==:require ( ' crypto ' ) ;
var height = this . _ image . height ; var tileWidth:==:this . _ tileWidth  |  |  width ;
var overrideFn = priv . overrideFn ; var rowHeightFn:==:priv . rowHeightFn ;
var rimraf = denodeify ( require ( ' rimraf ' ) ) ; var mkdirp:==:denodeify ( require ( ' mkdirp ' ) ) ;
var g = new Backbone . Model ( i d : 21 , label : ' g ' ) ; var h:==:new Backbone . Model ( i d : 22 , label : ' h ' ) ;
var text = _ text  |  |  ' Warning ' ; var position:==:_ position  |  |  ' center ' ;
var positions = Property . getValueOrUndefined ( polylineVolume . positions , time , options . polylinePositions ) ; var shape:==:property . getValueOrUndefined ( polylineVolume . shape , time ) ;
var c = mc ( aRot ) ; var s:==:ms ( aRot ) ;
var createIdentifierExpression = parseTreeFactory . createIdentifierExpression ; var createMemberLookupExpression:==:parseTreeFactory . createMemberLookupExpression ;
var end = $ end . datepicker ( ' getDate ' ) ; var start:==:$ start . datepicker ( ' getDate ' ) ;
var columnData = _ ref . columnData ; var dataKey:==:_ ref . dataKey ;
var condition = this . transformAny ( tree . condition ) ; var body:==:this . transformAny ( tree . body ) ;
var createEmptyParameterList = parseTreeFactory . createEmptyParameterList ; var createForOfStatement:==:parseTreeFactory . createForOfStatement ;
var sBox = this . sBox ; var invsBox:==:this . invsBox ;
var data = device . data . bind ( this ) ; var setup:==:device . setup ;
var splitUnit = math . splitUnit ; var unit:==:math . type . unit ;
var Column = fixedDataTable . column ; var cell:==:fixedDataTable . cell ;
var payload = payloads [ i ] ; var callback:==:payload_callbacks [ payload . source ] ;
var d = $ . Deferred ( ) ; var gridster:==:this . gridster ;
var reactElement = require ( ' reactElement ' ) ; var reactVersion:==:require ( ' reactVersion ' ) ;
var body = this . transformToBlockOrStatement ( tree . body ) ; var condition:==:this . transformAny ( tree . condition ) ;
var strict = ! ! this . opts . strict ; var scope:==:path . scope ;
var searchResults = this . _ searchResults ; var searchResult:==:searchResults [ index ] ;
var controllerQuaternion = this . controllerQuaternion ; var controllerEuler:==:this . controllerEuler ;
var templates = require ( ' templates . js ' ) ; var nodemailer:==:require ( ' nodemailer ' ) ;
var visualDataView = visualdataviews_1 [ _ i ] ; var regressionDataView:==:this . linearRegressionTransform ( visualDataView , dataRoles , regressionDataViewMapping , objectDescriptors , objectDefinitions , colorAllocatorFactory ) ;
var layer = layui [ ' layer - mobile ' ] ; var device:==:layui . device ( ) ;
var pooledClass = require ( ' pooledClass ' ) ; var reactdomComponentTree:==:require ( ' reactdomComponentTree ' ) ;
var host = hostAndPort . host ; var port:==:hostAndPort . port ;
var fs = require ( ' fs ' ) ; var glob:==:require ( ' glob ' ) ;
var css = ref . css ; var attrs:==:ref . attrs ;
var util = require ( ' util ' ) ; var q:==:require ( ' qq ' ) ;
var property = path . get ( ' property ' ) ; var object:==:path . get ( ' object ' ) ;
var W = body . documentWidth ; var h:==:body . documentHeight ;
var c = model . constraints [ i ] ; var keys:==:Object . keys ( c ) ;
var style = props . style ; var text:==:props . text ;
var Stream = coreStream . stream ; var streamsSequenceStream:==:coreStream . streamsSequenceStream ;
var div = $ ( this ) . data ( ' div ' ) ; var settings:==:$ ( this ) . data ( ' settings ' ) ;
var string = require ( ' string ' ) ; var path:==:require ( ' path ' ) ;
var tooltipBuilder = powerbi . visuals . tooltipBuilder ; var textMeasurementService:==:powerbi . textMeasurementService ;
var forInStatement = traceur . syntax . trees . forInStatement ; var forOfStatement:==:traceur . syntax . trees . forOfStatement ;
var head = $ ( ' head , body ' ) [ 0 ] ; var style:==:document . createElement ( ' style ' ) ;
var syntheticFocusEvent = require ( ' syntheticFocusEvent ' ) ; var syntheticKeyboardEvent:==:require ( ' syntheticKeyboardEvent ' ) ;
var Uri = Windows . Foundation . Uri ; var badgeUpdateManager:==:windows . ui . notifications . badgeUpdateManager ;
var Keywords = traceur . syntax . Keywords ; var literalExpression:==:traceur . syntax . trees . literalExpression ;
var ellipsoid = circleGeometry . _ ellipseGeometry . _ ellipsoid ; var minHeight:==:minHeightFunc ( granularity , ellipsoid ) ;
var settings = modelCtor . settings ; var modelName:==:modelCtor . modelName ;
var proto = protocol = = = ' https ' ? https : http ; var log:==:config . logger  |  |  debug ;
var t = ast . trueExp . visit ( this ) ; var f:==:ast . falseExp . visit ( this ) ;
var http = require ( ' http ' ) ; var read:==:require ( ' fs ' ) . readFileSync ;
var tsb = require ( ' gulp - tsb ' ) ; var gulp:==:require ( ' gulp ' ) ;
var config = textLayer . config ; var session:==:textLayer . session ;
var g = from . g + ( to . g - from . g ) * p . progress ; var b:==:from . b + ( to . b - from . b ) * p . progress ;
var lights = scene . userData . lights ; var keys:==:object . keys ( lights ) ;
var len = points . length ; var cos:==:Math . cos ( angle ) ;
var assignment = this . transformAny ( tree . assignment ) ; var initializer:==:this . transformAny ( tree . initializer ) ;
var apps = requestParameters & & requestParameters . apps ; var start:==:requestParameters & & requestParameters . startDate ;
var template = this . options . get ( ' templateResult ' ) ; var escapeMarkup:==:this . options . get ( ' escapeMarkup ' ) ;
var reactInputSelection = require ( ' reactInputSelection ' ) ; var reactInstrumentation:==:require ( ' reactInstrumentation ' ) ;
var data = this . data ; var series:==:this . data . series ;
var signedXml = require ( ' xml - crypto ' ) . signedXml ; var uuid:==:require ( ' uuid ' ) ;
var gulp = require ( ' gulp ' ) ; var nodemon:==:require ( ' gulp - nodemon ' ) ;
var w = width ; var h:==:height ;
var coords = bot . action . prepareToInteractWith _ ( element , opt_coords ) ; var touchscreen:==:opt_touchscreen  |  |  new bot . touchscreen ( ) ;
var bottomRadius = cylinderGeometry . _ bottomRadius ; var vertexFormat:==:cylinderGeometry . _ vertexFormat ;
var User = mongoose . model ( ' User ' ) ; var find:==:User . find ( ) ;
var createCatch = parseTreeFactory . createCatch ; var createEmptyStatement:==:parseTreeFactory . createEmptyStatement ;
var href = link . href ; var type:==:link . type ;
var load = require ( ' pug - load ' ) ; var filters:==:require ( ' pug - filters ' ) ;
var example = examples [ i ] ; var pos:==:cm . posFromIndex ( example . index ) ;
var opts   = current . opts ; var caption:==:opts . caption ;
var metadata = this . get ( ' metadata ' ) ; var content:==:this . get ( ' content ' )  |  |  '' ;
var width = this . _ $ element . data ( ' width ' )  |  |  560 ; var height:==:this . _ $ element . data ( ' height ' )  |  |  560 ;
var nonEnumConfig = ' nonEnumConfig ' ; var nonEnumNonConfig:==:' nonEnumNonConfig ' ;
var testRunner = imports . testRunner ; var proc:==:imports . proc ;
var ARRAY_TYPE = ' ARRAY_TYPE ' ; var ARROW_FUNCTION_EXPRESSION:==:' ARROW_FUNCTION_EXPRESSION ' ;
var remote = new PouchDB ( dbs . remote ) ; var db:==:new PouchDB ( dbs . name ) ;
var HIERARCHY_REQUEST_ERR   = exceptionCode . hierarchy_request_err   = ( ( exceptionMessage [ 3 ] = ' hierarchy request error ' ) , 3 ) ; var wrong_document_err:==:exceptionCode . wrong_document_err      ( ( exceptionMessage [ 4 ]   ' wrong document ' ) , 4 ) ;
var touches = originalEvent . touches & & originalEvent . touches . length ? originalEvent . touches : [ originalEvent ] ; var e:==:touches [ 0 ] ;
var denodeify = require ( ' denodeify ' ) ; var mkdirp:==:denodeify ( require ( ' mkdirp ' ) ) ;
var language = imports . language ; var debug:==:imports [ ' debugger ' ] ;
var fs = require ( ' fs - extra ' ) ; var request:==:require ( ' request ' ) ;
var trim = require ( ' trim ' ) ; var type:==:require ( ' type ' ) ;
var from = + this . options . from . valueOf ( ) ; var to:==:+ this . options . to . valueOf ( ) ;
var slice = array . slice ; var map:==:array . map ;
var superOrder = challengeSpec . superOrder ; var isBeta:==:! ! challengeSpec . isBeta ;
var sourcemaps = require ( ' gulp - sourcemaps ' ) ; var stylish:==:require ( ' jshint - stylish ' ) ;
var mom = $ . fullCalendar . moment . parseZone ( ' 2014 - 06 - 08 ' ) ; var clone:==:mom . clone ( ) ;
var css = obj . css ; var sourceMap:==:obj . sourceMap ;
var . . . x = a . b ; var . . . x:==:a ( ) ;
var min = Math . min ; var max:==:Math . max ;
var brightness = params . brightness ; var blackPoint:==:params . blackPoint ;
var nodeA = new goog . ui . tree . treeNode ( ' nodea ' ) ; var nodeb:==:new goog . ui . tree . treeNode ( ' nodeb ' ) ;
var UNSUPPORTED_FEATURES = sharedUtil . unsupported_features ; var missingDataException:==:sharedUtil . missingDataException ;
var events = require ( ' events ' ) ; var mockery:==:require ( ' mockery ' ) ;
var bufferSize = this . bufferSize ; var _ windowTime:==:this . _ windowTime ;
var GET_GITHUB_SUCCESS = exports . GET_GITHUB_SUCCESS = ' GET_GITHUB_SUCCESS ' ; var GET_GITHUB_FAIL:==:exports . GET_GITHUB_FAIL    ' GET_GITHUB_FAIL ' ;
var width = endpointStyle . width  |  |  self . width ; var height:==:endpointStyle . height  |  |  self . height ;
var typeError = errors . typeError ; var cancellationError:==:errors . cancellationError ;
var book = data . goodreadsResponse . book ; var description:==:book . description . text  |  |  ' description unavailable ' ;
var b = new functionNode ( new symbolNode ( ' add ' ) , [ new constantNode ( 2 ) , new constantNode ( 3 ) ] ) ; var c:==:new functionNode ( new symbolNode ( ' subtract ' ) , [ new constantNode ( 2 ) , new constantNode ( 3 ) ] ) ;
var sgv = sgvs [ sgvsLength - i ] ; var sensor:==:sensors [ sensorsLength - i ] ;
var isCmd = corePrimitives . isCmd ; var isDict:==:corePrimitives . isDict ;
var uvs    = opts & & opts . uvs ! = = undefined ? opts . uvs : null ; var uvs1:==:opts & & opts . uvs1 !    undefined ? opts . uvs1 : null ;
var name = docSet . getByLongname ( ' person#name ' ) ; var age:==:docSet . getByLongname ( ' person#age ' ) ;
var emberGenerate = blueprintHelpers . emberGenerate ; var emberDestroy:==:blueprintHelpers . emberDestroy ;
var col = db . collection ( ' batch_write_unordered_ops_legacy_5 ' ) ; var writeConcern:==:configuration . writeConcernMax ( ) ;
var key = e . keyCode ; var target:==:e . target ;
var module = entry . module = getOrCreateModuleRecord ( entry . name ) ; var exports:==:entry . module . exports ;
var parent = $ ( obj ) . parent ( ) ; var height:==:parent . height ( ) - ( ( $ ( ' . accordionHeader ' , obj ) . size ( ) ) * ( $ ( ' . accordionHeader : first - child ' , obj ) . outerHeight ( ) ) ) -2 ;
var bunyan = require ( ' bunyan ' ) ; var httpError:==:require ( ' restify - errors ' ) . httpError ;
var rsync = require ( ' gulp - rsync ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var n = TO_LENGTH ( array . length ) ; var m:==:arguments . length ;
var Media = Windows . Media ; var storageLibrary:==:windows . storage . storageLibrary ;
var mockAngular = jasmine . createSpyObj ( ' mockAngular ' , [ ' element ' ] ) ; var mockElement:==:jasmine . createSpyObj ( ' mockElement ' , [ ' focus ' ] ) ;
var height = op . height > op . minH?op . height : op . minH ; var width:==:op . width > op . minW?op . width : op . minW ;
var lineHeight = config . lineHeight ; var columnWidth:==:config . columnWidth ;
var styles = _ props . styles ; var willEnter:==:_ props . willEnter ;
var HAS_NUMERIC_VALUE = domProperty . injection . has_numeric_value ; var has_positive_numeric_value:==:domProperty . injection . has_positive_numeric_value ;
var passes = frameState . passes ; var nodeCommands:==:this . _ nodeCommands ;
var strokeStyle = state . strokeStyle ; var lineWidth:==:state . lineWidth ;
var scroll = this . $ vbox ? ' scrollWidth ' : ' scrollHeight ' ; var offset:==:this . $ vbox ? ' offsetWidth ' : ' offsetHeight ' ;
var createCallExpression = parseTreeFactory . createCallExpression ; var createEmptyParameterList:==:parseTreeFactory . createEmptyParameterList ;
var onEffects = info . onEffects ; var onSelfMsg:==:info . onSelfMsg ;
var scrollToAlignment = _ props3 . scrollToAlignment ; var scrollToColumn:==:_ props3 . scrollToColumn ;
var el = c . elm ; var s:==:el . style ;
var writeBits = this . sandbox . spy ( lcd , ' writeBits ' ) ; var pulse:==:this . sandbox . spy ( lcd , ' pulse ' ) ;
var project = this . project ; var destination:==:this . destination ;
var createArrayLiteralExpression = parseTreeFactory . createArrayLiteralExpression ; var createCallExpression:==:parseTreeFactory . createCallExpression ;
var ux = app . ns ( ' ux ' ) ; var extend:==:ux . Observable . extend ;
var s = c . sqlinfo ; var tree:==:quadtree ( 0 , 0 , c . gameWidth , c . gameHeight ) ;
var join = require ( ' path ' ) . join ; var basename:==:require ( ' path ' ) . basename ;
var store = this . store ; var idProperty:==:this . idProperty ;
var returned = this . returnedForkContext = [ ] ; var thrown:==:this . thrownForkContext    [ ] ;
var cellDataGetter = _ column$props . cellDataGetter ; var cellRenderer:==:_ column$props . cellRenderer ;
var opacity = current . opts . opacity ; var $ thumb:==:current . opts . $ thumb ;
var doc = document . documentElement ; var body:==:document . body ;
var setters = this . setters ; var len:==:setters . length ;
var token = options . token ; var nextToken:==:options . nextToken ;
var img = document . createElement ( ' img ' ) ; var ip:==:long2ip ( ip_from_long ) ;
var browserSupportCore = require ( ' browserSupportCore ' ) ; var getVendorPrefixedName:==:require ( ' getVendorPrefixedName ' ) ;
var center = sphere . center ; var r:==:new Cartesian3 ( radius , radius , radius ) ;
var validatorResult = helpers . validatorResult ; var schemaError:==:helpers . schemaError ;
var numThreads = options & & options . numThreads ; var batchSize:==:options & & options . batchSize ;
var through = require ( ' through ' ) ; var hyperglue:==:require ( ' hyperglue ' ) ;
var focusRippleColor = _ props2 . focusRippleColor ; var focusRippleOpacity:==:_ props2 . focusRippleOpacity ;
var v1 = b2Math . mulx ( xf , this . m_v1 ) ; var v2:==:b2Math . mulx ( xf , this . m_v2 ) ;
var scrollX = ( ( typeof window . scrollX ! = = ' undefined ' ) ? window . scrollX : window . pagexOffset ) ; var scrolly:==:( ( typeof window . scrolly !    ' undefined ' ) ? window . scrolly : window . pageyOffset ) ;
var size = dom . size . value ; var offsetX:==:parseInt ( dom . offsetx . value , 10 ) ;
var reactReconciler = require ( ' reactReconciler ' ) ; var reactChildReconciler:==:require ( ' reactChildReconciler ' ) ;
var videoSendInitialBitrate = options . videoSendInitialBitrate ; var audioSendCodec:==:options . audioSendCodec  |  |  '' ;
var semver = require ( ' semver ' ) ; var archy:==:require ( ' archy ' ) ;
var slide = s . _ slides [ i ] ; var progress:==:slide . progress ;
var height = this . height ; var numComps:==:this . numComps ;
var csslint   = require ( ' gulp - csslint ' ) ; var browserify:==:require ( ' gulp - browserify ' ) ;
var vertexNode = vertexNodes [ i ] ; var x:==:vertexNode . getAttribute ( ' x ' ) ;
var frame = this . client . findElement ( ' # lockscreen - frame ' ) ; var hidden:==:frame . getAttribute ( ' aria - hidden ' )      ' true ' ;
var z = value1 . z - value2 . z ; var w:==:value1 . w - value2 . w ;
var left = offset . left - ( origin ? origin . left : 0 ) ; var top:==:offset . top - ( origin ? origin . top : 0 ) ;
var d = opts . direction  |  |  ' left ' ; var w:==:$ cont . css ( ' overflow','hidden ' ) . width ( ) ;
var boneDataList = armatureData . boneDataList ; var i:==:boneDataList . length ;
var expression = expressionData . expression ; var attributeName:==:expressionData . attributeName ;
var p = p : 123 ; var o:==:_ _ proto _ _ : p ;
var resource = this . resource ( ) ; var context:==:this . _ context ;
var Element = db . model ( ' Element ' , el ) ; var Some:==:db . model ( ' Some ' , so ) ;
var target = event . target ; var events:==:target . getData ( ' events ' ) ;
var person1 = element ( by . model ( ' person1 ' ) ) ; var person2:==:element ( by . model ( ' person2 ' ) ) ;
var prefix = opt_prefix  |  |  '' ; var suffix:==:opt_suffix  |  |  '' ;
var replace = require ( ' gulp - replace ' ) ; var run:==:require ( ' run - sequence ' ) ;
var nested = toJSON : nestedTojson ; var replaced:==:a : false , replaced : true , nested ;
var width = getcssProperty ( element , container , ' width ' )  |  |  ( element . clientWidth + ' px ' ) ; var height:==:getcssProperty ( element , container , ' height ' )  |  |  ( element . clientHeight + ' px ' ) ;
var w = window ; var d:==:document & & document . documentElement ;
var id_token_hint = _ ref2 . id_token_hint ; var data:==:_ ref2 . data ;
var nodecaLoader = window . nodecaLoader = booted : false ; var alert:==:window . alert ;
var gulp = require ( ' gulp ' ) ; var shell:==:require ( ' gulp - shell ' ) ;
var prefix = new Blockly . fieldLabel ( ' prefix ' ) ; var field:==:new blockly . fieldLabel ( ' field ' ) ;
var tokenType = traceur . syntax . tokenType ; var parseTree:==:traceur . syntax . trees . parseTree ;
var autoload = ! ! opt_autoload ; var name:==:opt_name  |  |  ds . getDataName ( ) ;
var pkgMeta = entry . pkgMeta ; var version:==:pkgMeta . version  |  |  pkgMeta . _ target ;
var path = require ( ' path ' ) ; var jsdom:==:require ( ' jsdom ' ) ;
var scrollLeft = math . min ( math . max ( 0 , totalColumnsWidth - width + scrollbarSize ) , event . target . scrollLeft ) ; var scrollTop:==:math . min ( math . max ( 0 , totalRowsHeight - height + scrollbarSize ) , event . target . scrollTop ) ;
var pluckFn = transformUtils . pluckFn ; var identity:==:transformUtils . identity ;
var postActivate = _ ref$postActivate = = = undefined ? false : _ ref$postActivate ; var processData:==:_ ref . processData ;
var g = convertRGB ( this . g ) ; var b:==:convertRGB ( this . b ) ;
var height = _ ref2 . height ; var scrollLeft:==:_ ref2 . scrollLeft ;
var pathname = url . parse ( req . url ) . pathname . slice ( 1 )  |  |  ' index . html ' ; var contentType:==:contentTypes [ path . extname ( pathname ) ] ;
var win = processRules ( path . join ( _ _ dirname , ' doc . keybindings . win . json ' ) ) ; var osx:==:processRules ( path . join ( _ _ dirname , ' doc . keybindings . osx . json ' ) ) ;
var worldNormal = intersecttrimesh_worldnormal ; var faceList:==:( options & & options . faceList )  |  |  null ;
var value = el . value  |  |  text ; var label:==:el . label  |  |  text ;
var Unit = math . type . Unit ; var Complex:==:math . type . Complex ;
var inp = this . inp ; var shadowInp:==:this . shadowInp ;
var readmeInfo = options . readmeInfo ; var name:==:packageSource . name ;
var aspectRatio = options . aspectRatio ; var autoCropArea:==:number ( options . autoCropArea )  |  |  0 . 8 ;
var index = self . $ panes . indexOf ( pane ) ; var active:==:self . $ panes . $ active ;
var path = require ( ' path ' ) ; var zipWriter:==:require ( ' moxie - zip ' ) . zipWriter ;
var script = scripts [ i ] ; var src:==:script . src  |  |  script . getAttribute ( ' src ' ) ;
var p = this . positions [ index ] ; var b:==:glyph . bbox ;
var canAttach = errors . canAttach ; var thrower:==:util . thrower ;
var c = processDiagramCanvas . g . ellipse ( bx , by , 2 , 2 ) . attr ( stroke : color . slateGrey ) ; var c:==:processDiagramCanvas . g . ellipse ( cx , cy , this . radius , this . radius ) . attr ( stroke : color . gainsboro ) ;
var getHostComponentFromComposite = require ( ' getHostComponentFromComposite ' ) ; var instantiateReactComponent:==:require ( ' instantiateReactComponent ' ) ;
var g3 = new pc . graphNode ( ' g3 ' ) ; var g4:==:new pc . graphNode ( ' g4 ' ) ;
var webglValidation = argv . webglValidation ? argv . webglValidation : false ; var webglStub:==:argv . webglStub ? argv . webglStub : false ;
var name = attribute . name ; var arg:==:args . attributes [ name ] ;
var crypto = Npm . require ( ' crypto ' ) ; var http:==:Npm . require ( ' http ' ) ;
var context = opts . context  |  |  ; var log:==:opts . log      false ? false : true ;
var baby = require ( ' babyparse ' ) ; var keystone:==:req . keystone ;
var objects = categoryColumn . objects & & categoryColumn . objects [ categoryIndex ] ; var color:==:colorHelper . getColorForSeriesValue ( objects , categoryColumn . identityFields , categoryColumn . values [ categoryIndex ] ) ;
var spy = this . sandbox . spy ( ) ; var analogRead:==:this . analogRead . lastCall . args [ 1 ] ;
var cardSizes = opts . cardSizes  |  |  [ ' 6x6 ' ] ; var initialResults:==:opts . initialResults  |  |  resources . length ;
var content = msg . content ; var start:==:content . cursor_start ;
var children = _ props4 . children ; var fixedHeight:==:_ props4 . fixedHeight ;
var schema = this . model . schema  |  |  ; var consumes:==:this . model . consumes  |  |  [ ] ;
var getSongFile = client . method ( ' getSongFile ' , filePath ) ; var getSongThumbnail:==:client . method ( ' getSongThumbnail ' , filePath ) ;
var nativeModules = require ( ' nativeModules ' ) ; var react:==:require ( ' react ' ) ;
var semiMajorAxis = options . semiMajorAxis ; var semiMinorAxis:==:options . semiMinorAxis ;
var path = require ( ' path ' ) ; var serialize:==:require ( ' serialize - javascript ' ) ;
var typeParameters = this . transformAny ( tree . typeParameters ) ; var parameterList:==:this . transformAny ( tree . parameterList ) ;
var firstName = this . firstName ( ) ; var lastName:==:this . lastName ( ) ;
var width = $ ( window ) . width ( ) ; var breakpoints:==:this . c . breakpoints ;
var FOR_OF_STATEMENT = ' FOR_OF_STATEMENT ' ; var FOR_ON_STATEMENT:==:' FOR_ON_STATEMENT ' ;
var spring = Math . pow ( this . params . spring , delta ) ; var friction:==:Math . pow ( this . params . friction , delta ) ;
var sourceUri = options . sourceUri ; var uriResolver:==:options . uriResolver ;
var protocol = require ( ' protocol ' ) ; var send:==:require ( ' send - json ' ) ;
var clientX = evt . clientX ; var clientY:==:evt . clientY ;
var extensions = link . extensions ; var metadata:==:feed . _ _ metadata ;
var i = [ ' foo ' + bar , null , baz + ' moo ' ] . join ( ' ' ) ; var j:==:[ foo + ' bar ' , baz ] . join ( ' ' ) ;
var isNew = params . isNew  |  |  false ; var start:==:params . hasOwnProperty ( ' start ' ) ? params . start : 0 ;
var beforeExpr = beforeExpr : true ; var startsExpr:==:startsExpr : true ;
var moment = require ( ' moment ' ) ; var cp:==:require ( dirs . core + ' cp ' ) ;
var t = pathItem . create ( ' m283 . 8,165 . 2l283 . 8,227 . 2l248 . 6,227 . 2l248 . 6,257 . 2l283 . 8,257 . 2l283 . 8,388 . 8q283 . 8,403 . 2,286 . 6,412q289 . 4,420 . 8,295 . 2,425 . 6q301,430 . 4,310 . 4,432 . 2q319 . 8,434,333,434l359,434l359,404l343 . 4,404q335 . 4,404,330 . 4,403 . 4q325 . 4,402 . 8,322 . 6,400 . 8q319 . 8,398 . 8,318 . 8,395 . 2q317 . 8,391 . 6,317 . 8,385 . 6l317 . 8,257 . 2l359,257 . 2l359,227 . 2l317 . 8,227 . 2l317 . 8,165 . 2z ' ) ; var r:==:pathItem . create ( ' m192 . 38,277 . 21l176 . 71,307 . 39l258 . 34,349 . 8q276 . 09,359 . 03,287 . 91,369 . 68q299 . 73,380 . 33,305 . 26,393 . 11q310 . 79,405 . 9,309 . 12,421 . 26q307 . 45,436 . 62,298 . 04,454 . 72l329 . 99,471 . 32q330 . 82,469 . 82,331 . 6,468 . 32q343 . 27,445 . 86,341 . 07,425 . 7q338 . 72,404 . 19,322 . 08,381 . 57l322 . 45,380 . 86l361 . 14,400 . 96l375 . 89,372 . 56l192 . 38,277 . 21z ' ) ;
var info = sharedUtil . info ; var isNum:==:sharedUtil . isNum ;
var treeScope = scope . treeScope ; var elementFromPoint:==:scope . elementFromPoint ;
var name = this . transformAny ( tree . name ) ; var element:==:this . transformAny ( tree . element ) ;
var cell = cells [ ci ] ; var colspan:==:Utils . colspan ( cell ) ;
var type = utils . type ; var undefinedError:==:utils . undefinedError ;
var last_multi = this . last_multi ; var last_logic:==:this . last_logic ;
var x = box . x  |  0 ; var y:==:box . y  |  0 ;
var Date = platform . Date ; var Error:==:platform . Error ;
var beforeFooter = callbacks . beforeFooter . apply ( me , arguments ) ; var footer:==:callbacks . footer . apply ( me , arguments ) ;
var keyLoader = new _ keyLoader2 . default ( this ) ; var id3TrackController:==:new _ id3TrackController2 . default ( this ) ;
var ace = imports . ace ; var save:==:imports . save ;
var BREAK_STATEMENT = ' BREAK_STATEMENT ' ; var CALL_EXPRESSION:==:' CALL_EXPRESSION ' ;
var validatedomNesting = require ( ' validatedomNesting ' ) ; var voidElementTags:==:require ( ' voidElementTags ' ) ;
var minFilter = ( data . minFilter ) ? data . minFilter : gl . linear ; var wraps:==:( data . wraps ) ? data . wraps : gl . clamp_to_edge ;
var width = polylineGeometry . _ width ; var vertexFormat:==:polylineGeometry . _ vertexFormat ;
var shadowOffsetx = style . shadowOffsetx ; var shadowOffsety:==:style . shadowOffsety ;
var b = parseInt ( hex . substring ( 5 , 7 ) , 16 ) ; var a:==:parseInt ( hex . substring ( 7 , 9 ) , 16 ) ;
var _ rand_r = Module [ ' _ rand_r ' ] = asm [ ' _ rand_r ' ] ; var _ realloc:==:Module [ ' _ realloc ' ]    asm [ ' _ realloc ' ] ;
var Menu = imports . Menu ; var ace:==:imports . ace ;
var assert = utils . assert ; var cachedProperty:==:utils . cachedProperty ;
var vertices = intersectCache . vertices ; var positive:==:intersectCache . positive ;
var preMultiplyAlpha = options . preMultiplyAlpha  |  |  pixelFormat = = = pixelFormat . rgb  |  |  pixelFormat = = = pixelFormat . luminance ; var flipy:==:defaultValue ( options . flipy , true ) ;
var geocoder = viewer . _ geocoder ; var homeButton:==:viewer . _ homeButton ;
var headerCursor = this . headerCursor ; var items:==:headerCursor . messagesSlice . items ;
var load = args . load  |  |  [ ] ; var scope:==:args . scope  |  |  [ ] ;
var commonmark = self . options . commonmark ; var gfm:==:self . options . gfm ;
var all = options . all ; var cancel:==:options . cancel ;
var commands = imports . commands ; var proc:==:imports . proc ;
var touch = _ props . touch ; var verticalPosition:==:_ props . verticalPosition ;
var data = node . data ; var len:==:data . length ;
var tap = entry . indexOf ( ' tap ' ) > = 0 ; var drag:==:entry . indexOf ( ' drag ' ) >   0 ;
var transformA = input . transformA ; var transformB:==:input . transformB ;
var BINDING_IDENTIFIER = ' BINDING_IDENTIFIER ' ; var BLOCK:==:' BLOCK ' ;
var a = Object . create ( null ) ; var b:==:Object . create ( null ) ;
var rangeNode = math . expression . node . rangeNode ; var complex:==:math . type . complex ;
var logRecord = goog . debug . logRecord ; var logger:==:goog . debug . logger ;
var Uri = Windows . Foundation . Uri ; var messageDialog:==:windows . ui . popups . messageDialog ;
var i d = row . dataset . uuid ; var group:==:row . dataset . group ;
var sub_port = opts & & opts . sub_port  |  |  cst . DAEMON_PUB_PORT ; var rpc_port:==:opts & & opts . rpc_port  |  |  cst . DAEMON_RPC_PORT ;
var Lexer = coreParser . lexer ; var linearization:==:coreParser . linearization ;
var EQUALITY_BINARY_OPERATORS = exports . EQUALITY_BINARY_OPERATORS = [ ' = = ' , ' = = = ' , ' ! = ' , ' ! = = ' ] ; var COMPARISON_BINARY_OPERATORS:==:exports . COMPARISON_BINARY_OPERATORS    [ ] . concat ( EQUALITY_BINARY_OPERATORS , [ ' in ' , ' instanceof ' ] ) ;
var isIdentifierStart = _ identifier . isIdentifierStart ; var isIdentifierChar:==:_ identifier . isIdentifierChar ;
var prepareStyles = _ context$muiTheme . prepareStyles ; var enhancedButton:==:_ context$muiTheme . enhancedButton ;
var c = new symbolNode ( ' c ' ) ; var d:==:new symbolNode ( 'd ' ) ;
var characterMetadata = require ( ' characterMetadata ' ) ; var contentBlock:==:require ( ' contentBlock ' ) ;
var util = require ( ' util ' ) ; var logger:==:require ( ' pomelo - logger ' ) . getLogger ( ' pomelo ' , _ _ filename ) ;
var dataKey = _ ref . dataKey ; var disableSort:==:_ ref . disableSort ;
var partialEvaluator = coreEvaluator . partialEvaluator ; var annotation:==:coreAnnotation . annotation ;
var path = require ( ' path ' ) ; var test:==:require ( ' utest ' ) ;
var top = shadowFrustum . top ; var near:==:shadowFrustum . near ;
var tr = graph . view . translate ; var s:==:graph . view . scale ;
var switchState = traceur . codegeneration . generator . switchState ; var switchClause:==:traceur . codegeneration . generator . switchClause ;
var force = args . f  |  |  args . force ; var route:==:this . route ;
var requireSupportedForProcessing = _ baseUtils . requireSupportedForProcessing ; var insertAdjacenthtmlUnsafe:==:_ safeHtml . insertAdjacenthtmlUnsafe ;
var fs = require ( ' fs ' ) ; var join:==:require ( ' path ' ) . join ;
var sax = require ( ' sax ' ) ; var inherits:==:require ( ' util ' ) . inherits ;
var DIRECTION_RIGHT = gestureDetector . direction_right = ' right ' ; var pointer_mouse:==:gestureDetector . pointer_mouse    ' mouse ' ;
var engine = require ( ' engine . io ' ) ; var client:==:require ( ' engine . io - client ' ) ;
var dx = options . dx ; var dy:==:options . dy ;
var slice = Array . prototype . slice ; var toStr:==:object . prototype . toString ;
var g = spColor . g ; var b:==:spColor . b ;
var canDefineProperty = require ( ' canDefineProperty ' ) ; var getComponentName:==:require ( ' getComponentName ' ) ;
var dropdown = $ ( ' # acp - search . dropdown ' ) ; var menu:==:$ ( ' # acp - search . dropdown - menu ' ) ;
var createClassAndSelector = jsCommon . cssConstants . createClassAndSelector ; var keyUtils:==:jsCommon . keyUtils ;
var relatedTarget = eventData . relatedTarget  |  |  element ; var keys:==:eventData . keys ;
var menus = imports . menus ; var fs:==:imports . fs ;
var isObject = angular . isObject ; var isUndefined:==:angular . isUndefined ;
var referer = headers . referer  |  |  '' ; var data:==:( ( payload  |  |  ) . data  |  |  [ ] ) ;
var expression = expressions [ i ] ; var feature:==:expression . feature ( ) ;
var postfixExpression = traceur . syntax . trees . postfixExpression ; var program:==:traceur . syntax . trees . program ;
var autoType = angular . isDefined ( $ attrs . autoType ) ? $ scope . $ eval ( $ attrs . autoType ) : progressConfig . autoType ; var stackedTypes:==:angular . isDefined ( $ attrs . stackedTypes ) ? $ scope . $ eval ( ' [ ' + $ attrs . stackedTypes + ' ] ' ) : progressConfig . stackedTypes ;
var stats = testSet . stats ; var treeNode:==:testSet . treeNode ;
var value = element ( by . binding ( ' example . value  |  date : ' yyyy - MM ' ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var sIcon = parameters . _ getThemeImage ( ' _ sap_ui_ux3_feed_toolsiconurl ' ) ; var sIconHover:==:parameters . _ getThemeImage ( ' _ sap_ui_ux3_feed_toolsiconhoverurl ' ) ;
var sanitize = require ( ' htmlescape ' ) . sanitize ; var shasum:==:require ( ' shasum ' ) ;
var placement = $ attrs . popupPlacement ? $ attrs . popupPlacement : datepickerPopupConfig . placement ; var position:==:$ position . positionElements ( $ element , dpElement , placement , appendToBody ) ;
var keys = ! _ isArrayLike ( obj ) & & _ keys ( obj ) ; var length:==:( keys  |  |  obj ) . length ;
var offset = _ ref5 . offset ; var totalSize:==:_ ref5 . totalSize ;
var style = item . style ? ' style= ' ' + item . style + ' ' ' : '' ; var className:==:item . className ? ' class ' ' + item . className + ' ' ' : '' ;
var end = options . end ; var done:==:options . done ;
var ul = element . querySelector ( ' ul ' ) ; var children:==:array . prototype . slice . apply ( ul . children ) ;
var rotation = target . rotation  |  |  0 ; var position:==:target . position  |  |  [ 0 , 0 ] ;
var xAxisProperties = this . xAxisProperties = visuals . axisHelper . createAxis ( xAxisCreationOptions ) ; var yAxisProperties:==:this . yAxisProperties    visuals . axisHelper . createAxis ( yAxisCreationOptions ) ;
var totalRows = this . wtSettings . getSetting ( ' totalRows ' ) ; var fixedRowsTop:==:this . wtSettings . getSetting ( ' fixedRowsTop ' ) ;
var f = math . fraction ( 2,3 ) ; var b:==:math . bignumber ( f ) ;
var deferred = config . _ deferred = config . _ deferred  |  |  $ q . defer ( ) ; var promise:==:deferred . promise ;
var resolveAuthorLinks = helper . resolveAuthorLinks ; var scopeToPunc:==:helper . scopeToPunc ;
var fs = require ( ' fs ' ) ; var os:==:require ( ' os ' ) ;
var querystring = require ( ' querystring ' ) ; var util:==:require ( ' util ' ) ;
var outlineWidth = ellipse . outlineWidth ; var numberOfVerticalLines:==:ellipse . numberOfVerticalLines ;
var style = label . _ style ; var verticalOrigin:==:label . _ verticalOrigin ;
var func = _ react . propTypes . func ; var object:==:_ react . propTypes . object ;
var cos = Math . cos ( theta ) ; var sin:==:Math . sin ( theta ) ;
var linearization = this . linearization ; var num:==:linearization ? linearization . numPages : this . catalog . numPages ;
var textContent = object . getOwnPropertyDescriptor ( node . prototype , ' textContent ' ) ; var removeAttribute:==:htmlElement . prototype . removeAttribute ;
var CLOSE_BRACKET = [ SPACES , RAW_CLOSE_BRACKET , SPACES ] . join ( ' ' ) ; var COMMA:==:[ SPACES , RAW_COMMA , SPACES ] . join ( ' ' ) ;
var first = cm . firstLine ( ) ; var last:==:cm . lastLine ( ) ;
var _ im_get_candidate_char = Module [ ' _ im_get_candidate_char ' ] = asm [ ' _ im_get_candidate_char ' ] ; var _ realloc:==:Module [ ' _ realloc ' ]    asm [ ' _ realloc ' ] ;
var name = this . _ formatParameter ( params [ i ] . name + ' : ' , ' header - name ' , this . _ decodeRequestParameters ) ; var value:==:this . _ formatParameter ( params [ i ] . value , ' header - value source - code ' , this . _ decodeRequestParameters ) ;
var context = frameState . context ; var ellipsoid:==:frameState . mapProjection . ellipsoid ;
var eventTarget = _ _ dependency1 _ _ . eventTarget ; var promise:==:_ _ dependency2 _ _ . promise ;
var counter = this . _ counters [ i ] ; var value:==:counter . value ;
var children = instance . get ( ' children ' ) ; var type:==:instance . get ( ' type ' ) ;
var multi = this . multiple & & isArray ( value ) ; var options:==:el . options ;
var settings = settings  |  |  ; var handler:==:handler  |  |  function ( ) ;
var installPath = options . installPath ; var settingDir:==:options . settingDir  |  |  installPath ;
var blueGrey600 = exports . blueGrey600 = ' # 546e7a ' ; var blueGrey700:==:exports . blueGrey700    ' # 455a64 ' ;
var l = this . getStyle ( left ) ; var t:==:this . getStyle ( top ) ;
var fileWithoutQuery = ref . fileWithoutQuery ; var asType:==:ref . asType ;
var plumber = require ( ' gulp - plumber ' ) ; var filter:==:require ( ' gulp - filter ' ) ;
var Menu = imports . Menu ; var Datagrid:==:imports . Datagrid ;
var Dict = corePrimitives . dict ; var name:==:corePrimitives . name ;
var GET_ACCESSOR = ' GET_ACCESSOR ' ; var IDENTIFIER_EXPRESSION:==:' IDENTIFIER_EXPRESSION ' ;
var reactTypeOfWork = require ( ' reactTypeOfWork ' ) ; var getEventTarget:==:require ( ' getEventTarget ' ) ;
var anchor = cm . getCursor ( ' anchor ' ) ; var head:==:cm . getCursor ( ' head ' ) ;
var message = this . _ options . message ; var title:==:this . _ options . title ;
var cx = require ( ' cx ' ) ; var translatedomPositionxy:==:require ( ' translatedomPositionxy ' ) ;
var binaryOperator = traceur . syntax . trees . binaryOperator ; var parseTree:==:traceur . syntax . trees . parseTree ;
var c = stream . read ( quantclass . bits ) ; var nlevels:==:quantclass . nlevels ;
var emptyStatement = traceur . syntax . trees . emptyStatement ; var exportDeclaration:==:traceur . syntax . trees . exportDeclaration ;
var obj = getobj ( ) ; var length:==:arguments . length ;
var quadraticSubdivide = curveTool . quadraticSubdivide ; var cubicSubdivide:==:curveTool . cubicSubdivide ;
var parent = opts . parent  |  |  null ; var client:==:opts . client ;
var Replacer = goog . require ( ' goog . testing . propertyReplacer ' ) ; var jsunit:==:goog . require ( ' goog . testing . jsunit ' ) ;
var Previewer = imports . Previewer ; var tabManager:==:imports . tabManager ;
var channelName = msg . channelName ; var service:==:msg . service ;
var eventResize = t . eventResize ; var getRowCnt:==:t . getRowCnt ;
var video = document . getElementById ( ' video ' ) ; var btnPlay:==:document . getElementById ( ' btnPlay ' ) ;
var multi = this . helpers . multi ; var suffix:==:this . helpers . suffix ;
var feature = this . feature ; var geom:==:feature . geometry ;
var offset = pickOffset . offset ; var count:==:pickOffset . count ;
var arrayLiteralExpression = traceur . syntax . trees . arrayLiteralExpression ; var arrayPattern:==:traceur . syntax . trees . arrayPattern ;
var backdrop = new Animation ( ele . querySelector ( ' ion - backdrop ' ) ) ; var wrapper:==:new animation ( ele . querySelector ( ' . loading - wrapper ' ) ) ;
var forces = this . physicsBody . forces ; var nodeDistance:==:this . options . nodeDistance ;
var tab = tabManager . findTab ( path ) ; var doc:==:documents [ path ] ;
var height = defaultValue ( options . height , gl . drawingBufferHeight ) ; var framebuffer:==:options . framebuffer ;
var disabled = _ props . disabled ; var disableTouchRipple:==:_ props . disableTouchRipple ;
var minDvrWindow = model . get ( ' minDvrWindow ' ) ; var streamType:==:utils . streamType ( duration , minDvrWindow ) ;
var mass = cfg . mass  |  |  1 ; var type:==:cfg . type  |  |  Physics . SHAPE_RECT ;
var height = this . viewport . height ; var div:==:this . div ;
var parameter = this . transformAny ( tree . parameter ) ; var body:==:this . transformSuperInBlock _ ( tree , tree . body ) ;
var position = Cartesian3 . clone ( camera . position ) ; var up:==:Cartesian3 . clone ( camera . up ) ;
var opts = _ _ alloyId13 . opts  |  |  ; var models:==:_ _ alloyId12 . models ;
var titleColor = this . context . muiTheme . cardMedia . titleColor ; var subtitleColor:==:this . context . muiTheme . cardMedia . subtitleColor ;
var getLookupTableFactory = sharedUtil . getLookupTableFactory ; var warn:==:sharedUtil . warn ;
var NODE_FIELDS = exports . NODE_FIELDS = ; var BUILDER_KEYS:==:exports . BUILDER_KEYS    ;
var l0 = raycast_l0 ; var l1:==:raycast_l1 ;
var extent = frameState . extent ; var viewState:==:frameState . viewState ;
var minChar = ast . minChar ; var limChar:==:ast . limChar ;
var a2 = expected [ i ] . locals . a2 ; var b2:==:expected [ i ] . locals . b2 ;
var buffer = require ( ' vinyl - buffer ' ) ; var connect:==:require ( ' gulp - connect ' ) ;
var View = require ( ' View ' ) ; var Item:==:Picker . Item ;
var replace = require ( ' gulp - replace ' ) ; var util:==:require ( ' gulp - util ' ) ;
var c = new Tracker . Dependency ; var d:==:new Tracker . Dependency ;
var browser = grunt . option ( ' browser ' ) ; var specs:==:grunt . option ( ' specs ' ) ;
var ribbonClosePath = options . ribbonClosePath  |  |  false ; var cap:==:( options . cap      0 ) ? 0 : options . cap  |  |  babylon . mesh . no_cap ;
var context = this . context ; var wordWrapWidth:==:this . style . wordWrapWidth ;
var purpleA700 = exports . purpleA700 = ' # aa00ff ' ; var deepPurple50:==:exports . deepPurple50    ' # ede7f6 ' ;
var font = template . font ? template . font : ' Arial , Helvetica , sans - serif ' ; var text:==:template . text ? template . text : ( Math . floor ( dimensions . width ) + ' x ' + Math . floor ( dimensions . height ) ) ;
var domProperty = require ( ' domProperty ' ) ; var reactDebugCurrentFiber:==:require ( ' reactDebugCurrentFiber ' ) ;
var p = b . prob [ cw [ n ] ] [ a ] ; var t:==:b . cost [ cw [ n ] ] [ a ] ;
var url   = require ( ' url ' ) ; var express:==:require ( ' express ' ) ;
var grad4 = this . grad4 ; var simplex:==:this . simplex ;
var ellipsoid = geometry . _ ellipsoid ; var surfaceHeight:==:geometry . _ surfaceHeight ;
var channel = node . channels [ 0 ] ; var m:==:channel . sampler . output [ frame ] ;
var addWrapNodeListMethod = scope . addWrapNodeListMethod ; var mixin:==:scope . mixin ;
var len = ( s . length + left  |  0 ) + right  |  0 ; var r:==:Caml_string . caml_create_string ( len ) ;
var c = new objectNode ( a : a , b : b ) ; var d:==:new constantNode ( 3 ) ;
var condition = this . transformAny ( tree . condition ) ; var left:==:this . transformAny ( tree . left ) ;
var getValue = argscheck . getValue ; var quality:==:getValue ( options . quality , 50 ) ;
var fs = require ( ' fs - extra ' ) ; var gulp:==:require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ;
var moduleExpression = this . transformAny ( tree . moduleExpression ) ; var specifierSet:==:this . transformAny ( tree . specifierSet ) ;
var installer = imports . installer ; var question:==:imports [ ' dialog . question ' ] ;
var node = node_list [ i ] ; var i d:==:node . getAttribute ( ' i d ' ) ;
var h = p . _ handler ; var t:==:setTimeout ( onTimeout , ms , reason , p . _ handler ) ;
var setTreeScope = scope . setTreeScope ; var unsafeUnwrap:==:scope . unsafeUnwrap ;
var type = attributeProperties . type ; var bytesPerElement:==:attributeProperties . bytesPerElement ;
var texture = cc . textureCache . addImage ( fileName ) ; var rect:==:cc . rect ( 0 , 0 , 0 , 0 ) ;
var line = lineAtHeight ( cm . view . doc , my ) ; \n\var gutter:==:cm . options . gutters [ i ] ; \n\
var queue = nextTick . queue ; var digest:==:nextTick . digest ;
var dbContext = dbContexts [ dbInfo . name ] ; var deferredOperation:==:dbContext . deferredOperations . pop ( ) ;
var isTabKey = utilities . isTabKey ; var isUpArrow:==:utilities . isUpArrow ;
var latitude = document . getElementById ( ' latitude ' ) ; var longitude:==:document . getElementById ( ' longitude ' ) ;
var active = this . $ menu . find ( ' . active ' ) . removeClass ( ' active ' ) ; var prev:==:active . prev ( ) ;
var mongoose = require ( ' mongoose ' ) ; var Post:==:mongoose . model ( ' Post ' ) ;
var outlineWidth = corridor . outlineWidth ; var cornerType:==:corridor . cornerType ;
var height = this . height ; var width:==:this . width ;
var INUSE_ATTRIBUTE_ERR    = exceptionCode . inuse_attribute_err    = ( ( exceptionMessage [ 10 ] = ' attribute in use ' ) , 10 ) ; var invalid_state_err:==:exceptionCode . invalid_state_err      ( ( exceptionMessage [ 11 ]   ' invalid state ' ) , 11 ) ;
var isNumber = _ angular . isNumber ; var isDefined:==:_ angular . isDefined ;
var Syntax = jsdoc . src . Syntax ; var util:==:require ( ' util ' ) ;
var name = this . transformAny ( tree . name ) ; var args:==:this . transformAny ( tree . args ) ;
var cp_decache = function cp_decache ( cp ) cpdcache [ cp ] = cpecache [ cp ] = undefined ; ; var decache:==:function decache ( )
var assert = chai . assert ; var expect:==:chai . expect ;
var length = children . length ; var state:==:this . _ state ;
var depth = this . depth ; var left:==:typeof leftOrRbp      ' number ' ? null : leftOrRbp ;
var walletId = client . credentials . walletId ; var config:==:configService . getSync ( ) ;
var newIndex = event . detail . newIndex ; var list:==:this . _ list ;
var inherit = require ( ' component - inherit ' ) ; var debug:==:require ( ' debug ' ) ( ' engine . io - client : websocket ' ) ;
var prevContext = context . prevContext ; var element:==:prevContext ? ' where each element ' + getMessage ( prevContext , v ) : ' ' ;
var vid2 = document . getElementById ( ' vid2 ' ) ; var btn1:==:document . getElementById ( ' btn1 ' ) ;
var collection = db . collection ( ' test_correctly_access_collections2_with_generators ' ) ; var collections:==:yield db . collections ( ) ;
var isScrolling = _ state2 . isScrolling ; var scrollLeft:==:_ state2 . scrollLeft ;
var fromId = transferEdge . fromId ; var toId:==:transferEdge . toId ;
var sliced = require ( ' sliced ' ) ; var jsesc:==:require ( ' jsesc ' ) ;
var subviews = this . subviews ; var defaults:==:this . model . get ( ' defaults ' )  |  |  [ ] ;
var Role = loopback . Role ; var roleMapping:==:loopback . roleMapping ;
var crypto = require ( ' crypto ' ) ; var logger:==:require ( ' pomelo - logger ' ) . getLogger ( ' pomelo ' , _ _ filename ) ;
var Flags = reactdomComponentFlags ; var getNode:==:reactdomComponentTree . getNodeFromInstance ;
var timelineSignal = tone_signal_timelinesignal ; var tone:==:tone_core_tone ;
var pathname = decodeuriComponent ( document . location . pathname ) ; var p:==:pathname . indexOf ( ' ? ' ) ;
var body = req . body  |  |  ; var query:==:req . parsedUrl . query ;
var componentsPerAttribute = attribute . componentsPerAttribute ; var functionName:==:attribute . functionName ;
var maxCallInterval = event . data . maxCallInterval ! = null ? event . data . maxCallInterval : 2000 ; var semaphore:==:event . data . semaphore ;
var start = delta . start ; var end:==:delta . end ;
var symbolRotate = seriesScope & & seriesScope . symbolRotate ; var symbolOffset:==:seriesScope & & seriesScope . symbolOffset ;
var t = this . getItem ( node . i d ) ; var n:==:node . cloneNode ( true ) ;
var listModel = _ jsModelListModel [ ' default ' ] ; var listView:==:_ jsViewListView [ ' default ' ] ;
var h = rect . height ; var r:==:new mxRectangle ( rect . x , rect . y , w , h ) ;
var Model = kendo . data . Model ; var dataSource:==:kendo . data . dataSource ;
var min = global . Math . min ; var kendo:==:global . kendo ;
var assign = require ( ' object - assign ' ) ; var di:==:require ( ' asyncdi ' ) ;
var r = imGet ( srcData . data , x , y , width , height , 0 ) ; var g:==:imGet ( srcData . data , x , y , width , height , 1 ) ;
var title = this . _ getTitle ( evt . detail . title ) ; var elements:==:this . elements ;
var r = this . pointSize + this . blurSize ; var canvas:==:this . canvas ;
var debug = require ( ' debug ' ) ( ' analytics . js : cookie ' ) ; var defaults:==:require ( ' defaults ' ) ;
var Company = db . model ( ' Company ' , companySchema ) ; var user:==:db . model ( ' user ' , userSchema ) ;
var fastMode = config . fastMode ; var quoteChar:==:config . quoteChar  |  |  ' ' ' ;
var reactMarkupChecksum = require ( ' reactMarkupChecksum ' ) ; var assertValidProps:==:require ( ' assertValidProps ' ) ;
var Hook = mocha . Hook ; var path:==:require ( ' path ' ) ;
var isInt = sharedUtil . isInt ; var isEmptyObj:==:sharedUtil . isEmptyObj ;
var isObj = isObject ( data ) ; var type:==:this . _ header [ ' content - type ' ] ;
var boxWidthList = groupItem . boxWidthList = [ ] ; var boxOffsetList:==:groupItem . boxOffsetList    [ ] ;
var htmlShadowElement = scope . wrappers . htmlShadowElement ; var htmlTemplateElement:==:scope . wrappers . htmlTemplateElement ;
var _ memmove = Module [ ' _ memmove ' ] = asm [ ' _ memmove ' ] ; var _ tolower:==:Module [ ' _ tolower ' ]    asm [ ' _ tolower ' ] ;
var View = require ( ' View ' ) ; var interactionManager:==:require ( ' interactionManager ' ) ;
var path = require ( ' path ' ) ; var sliced:==:require ( ' sliced ' ) ;
var album = items [ i ] . tags . album ; var artist:==:items [ i ] . tags . artist ;
var position = shadowMapCamera . positionwc ; var direction:==:shadowMapCamera . directionwc ;
var frameState = scene . _ frameState ; var shadowMaps:==:frameState . shadowMaps ;
var cascade = this . shared . cascade ; var interval:==:this . shared . interval ;
var read = require ( ' file - reader ' ) ; var fs:==:require ( ' fs ' ) ;
var getIconQuads = quads . getIconQuads ; var extent:==:bucket . extent ;
var shaderProgram = pixi . shaderProgram ; var tilePosition:==:sprite . tilePosition ;
var granule = granules [ gr ] ; var modes:==:this . modes ;
var amber600 = exports . amber600 = ' # ffb300 ' ; var amber700:==:exports . amber700    ' # ffa000 ' ;
var test = qUnit . test ; var matrix2d:==:crafty . math . matrix2d ;
var mrow = cTop . createElement ( ' mrow ' ) ; var mo:==:cTop . createElement ( ' mo ' ) ;
var scriptVisualEnabled = featureSwitches ? featureSwitches . scriptVisualEnabled : false ; var scriptVisualAuthoringEnabled:==:featureSwitches ? featureSwitches . scriptVisualAuthoringEnabled : false ;
var createBlock = parseTreeFactory . createBlock ; var createBreakStatement:==:parseTreeFactory . createBreakStatement ;
var exclusiveMinimum = args . form . exclusiveMinimum  |  |  false ; var multipleOf:==:args . form . multipleOf  |  |  false ;
var assert = require ( ' assert ' ) ; var profile:==:require ( ' mozilla - profile - builder ' ) ;
var displayName = powerbi . dataViewObject . getValue ( forecastObject , forecastPropertyNames . displayName ) ; var lineColor:==:powerbi . dataViewObject . getValue ( forecastObject , forecastPropertyNames . lineColor , forecastHelper . defaults . lineColor ) ;
var level = _ levelMap [ i d ] ; var sequenceName:==:level . sequenceName ;
var core = require ( ' core ' ) ; var router:==:require ( ' router ' ) ;
var client = helper . client ( ) ; var con:==:client . connection ;
var ctor = typedArrayConstructors [ i ] ; var a:==:makeSharedTypedArray ( ctor , 10 ) ;
var s = this . _ attachViewInContainerScope ( ) ; var view:==:view_ref_1 . internalView ( viewRef ) ;
var data = vnode . data ; var children:==:vnode . children ;
var encoding = mesh . encoding ; var length:==:indices . length ;
var MurmurHash3_64 = coreMurmurHash3 . murmurhash3_64 ; var errorFont:==:coreFonts . errorFont ;
var addNetworkUsageAlarm = window . parent . addNetworkUsageAlarm ; var resetTelephony:==:window . parent . resetTelephony ;
var textStyle = _ props . textStyle ; var title:==:_ props . title ;
var indigoA700 = exports . indigoA700 = ' # 304ffe ' ; var blue50:==:exports . blue50    ' # e3f2fd ' ;
var el = this . el ; var position:==:el . getAttribute ( ' position ' ) ;
var name = header . name ; var value:==:header . value ;
var boundingVolume = command . boundingVolume ; var orientedBoundingBox:==:command . orientedBoundingBox ;
var frameList = timeline . frameList ; var i:==:frameList . length ;
var name = req . params . name ; var page:==:Number ( req . query . page )  |  |  1 ;
var module = buildMap [ moduleName ] ; var deps:==:module . deps ;
var w = image . width  |  |  data [ 0 ] . length ; var h:==:image . height  |  |  data . length ;
var test = imports . test ; var fs:==:imports . fs ;
var channelName = this . channelName ; var requests:==:this . _ requests ;
var Firepad = firepad . Firepad ; var Headless:==:Firepad . Headless ;
var end = atEnd ? to : pos ( endLine , 0 ) ; var mark:==:cm . markText ( start , end , className : cls ) ;
var http = imports . http ; var util:==:imports . util ;
var currentRoute = this . _ currentRoute ; var currentTransition:==:this . _ currentTransition ;
var target = e . target ; var uid:==:target . dataset . uuid ;
var position = vertex . position ; var positionWorld:==:vertex . positionWorld ;
var deepPurple700 = exports . deepPurple700 = ' # 512da8 ' ; var deepPurple800:==:exports . deepPurple800    ' # 4527a0 ' ;
var message = exception & & exception . message ; var l10n:==:self . l10n ;
var file = fileUtils . getFile ( this . testSuite . file . parent . path ) ; var filename:==:this . filename ;
var e = extensions [ key ] ; var o:==:Object . assign ( , options ) ;
var start = util . convert ( this . body . range . start , ' Number ' ) ; var end:==:util . convert ( this . body . range . end , ' Number ' ) ;
var originalEvent = event . originalEvent ; var e:==:originalEvent ;
var inherits = util . inherits ; var assert:==:require ( ' assert ' ) ;
var seg = data . _ segments ; var path:==:data . path ;
var refLine = this . refLine ; var codingLine:==:this . codingLine ;
var dataAttr = dataAttrs [ attrName ] ; var cachedAttr:==:cachedAttrs [ attrName ] ;
var winston = require ( ' winston ' ) ; var path:==:require ( ' path ' ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var schemaType:==:mongoose . schemaType ;
var axisA = this . axisA ; var axisB:==:this . axisB ;
var isLtr = goog . i18n . bidi . isLtrChar ( newInput ) ; var isRtl:==:! isLtr & & goog . i18n . bidi . isRtlChar ( newInput ) ;
var centerY = widget . _ centerY ; var svg:==:widget . _ svgNode ;
var uid = trace . uid ; var xa:==:plotinfo . xaxis ;
var labelColor = _ props . labelColor ; var labelPosition:==:_ props . labelPosition ;
var categoryAxis = group . categoryAxis ; var valueAxis:==:group . valueAxis ;
var h = mipData . height ; var c:==:mipData . channels ;
var elements = this . transformList ( tree . elements ) ; var annotations:==:this . transformList ( tree . annotations ) ;
var ws = require ( ' ws ' ) ; var inspect:==:require ( ' util ' ) . inspect ;
var getNodeLength = dom . getNodeLength ; var arrayContains:==:dom . arrayContains ;
var height = $ ( this ) . parent ( ) . height ( ) ; var width:==:$ ( this ) . parent ( ) . width ( ) ;
var name = re . name ; var path:==:re . path ;
var topBoundary = this . _ topBoundary ; var bottomBoundary:==:this . _ bottomBoundary ;
var alias = doclet . alias ; var name:==:doclet . name ;
var should = require ( ' should ' ) ; var fixtures:==:path . join ( _ _ dirname , ' fixtures ' ) ;
var sweepA = input . sweepA ; var sweepB:==:input . sweepB ;
var clientWidth = _ state . clientWidth ; var scrollHeight:==:_ state . scrollHeight ;
var fill = Bytes . fill ; var blit:==:Bytes . blit_string ;
var Suite = mocha . Suite ; var Test:==:mocha . Test ;
var r = signature . r ; var s:==:signature . s ;
var filterOptions = _ props2 . filterOptions ; var isValidNewOption:==:_ props2 . isValidNewOption ;
var bulkOutPipes = usbInterface . bulkOutPipes ; var interruptInPipes:==:usbInterface . interruptInPipes ;
var clone = zrUtil . clone ; var bind:==:zrUtil . bind ;
var H = require ( ' Header ' ) ; var React:==:require ( ' React ' ) ;
var Types = require ( ' frontdoor ' ) . Types ; var error:==:require ( ' http - error ' ) ;
var createMicrosoftUnsafeLocalFunction = require ( ' createMicrosoftUnsafeLocalFunction ' ) ; var setTextContent:==:require ( ' setTextContent ' ) ;
var l = 0 + ( sleft ? pleft . sizeCalculated + this . padding : 0 ) ; var t:==:0 + ( stop ? ptop . sizeCalculated + this . padding : 0 ) ;
var leavingView = this . leavingView ; var opts:==:this . opts ;
var keys = kendo . keys ; var create:==:splitterHelpers . create ;
var valueCollection = values . valueCollection ; var functionValue:==:values . functionValue ;
var remote = new PouchDB ( dbs . remote ) ; var changes:==:remote . changes ;
var z = temp . z ; var w:==:temp . w ;
var dependencies = splitArgs ( deps ) . dependencies ; var constraints:==:splitArgs ( deps ) . constraints ;
var recipient = message . recipient ; var type:==:message . type ;
var jsep = callbacks . jsep ; var media:==:callbacks . media ;
var param = _ param ; var pos:==:_ pos ;
var fileSystemPath = entry . fileSystemPath ; var urlPrefix:==:entry . urlPrefix ;
var requireConfig = data . requireConfig ; var dojoConfig:==:data . dojoConfig ;
var scene = layout [ sceneIds [ i ] ] ; var cameraposition:==:scene . cameraposition ;
var west = queryNumericValue ( latLonBox , ' west ' , namespaces . kml ) ; var south:==:queryNumericValue ( latLonBox , ' south ' , namespaces . kml ) ;
var td = goog . bind ( this . dom _ . createDom , this . dom _ , ' td ' ) ; var a:==:goog . bind ( this . dom _ . createDom , this . dom _ , ' a ' ) ;
var color = _ props . color ; var opacity:==:_ props . opacity ;
var cropBox = this . cropBox ; var isCropped:==:this . isCropped & & cropBox ;
var dynCall_iid = Module [ ' dynCall_iid ' ] = asm [ ' dynCall_iid ' ] ; var dynCall_viiiiiii:==:Module [ ' dynCall_viiiiiii ' ]    asm [ ' dynCall_viiiiiii ' ] ;
var children = this . _ children ; var row:==:rows [ rowNum ] ;
var commonObjs = this . commonObjs ; var objs:==:this . objs ;
var line = getLine ( cm . doc , linen ) ; var visual:==:visualLine ( line ) ;
var IF_STATEMENT = ' IF_STATEMENT ' ; var IMPORT_CLAUSE_PAIR:==:' IMPORT_CLAUSE_PAIR ' ;
var axisHelper = powerbi . visuals . axisHelper ; var axisScale:==:powerbi . visuals . axisScale ;
var spawn = child_process . spawn ; var path:==:require ( ' path ' ) ;
var rowStopIndex = _ ref . rowStopIndex ; var scrollLeft:==:_ ref . scrollLeft ;
var domMouseMoveTracker = require ( ' domMouseMoveTracker ' ) ; var locale:==:require ( ' locale ' ) ;
var save = imports . save ; var build:==:imports . build ;
var useSeleniumJar = grunt . option ( ' useSeleniumJar ' ) ; var seleniumAddressProxy:==:grunt . option ( ' seleniumAddressProxy ' ) ;
var skip = options . skip ; var limit:==:options . limit ;
var selector = selectors [ j ] ; var match:==:selector . matchElementAncestry ( elementAncestry ) ;
var data = this . data ; var dataPoints:==:data . dataPoints ;
var f8InfoView = require ( ' f8InfoView ' ) ; var f8Colors:==:require ( ' f8Colors ' ) ;
var assignment = self . _ assignment ; var formula:==:formulaOrBits ;
var edgeNameOffset = this . _ edgeNameOffset ; var edgeFieldsCount:==:this . _ edgeFieldsCount ;
var f = objf . f ; var fAsync:==:objf . fAsync ;
var sw = node . _ sw & & rectangleContainsPosition ( node . _ sw . extent , position ) ; var se:==:node . _ se & & rectangleContainsPosition ( node . _ se . extent , position ) ;
var onValidate = jasmine . createSpy ( ' onValidate ' ) ; var onAfterValidate:==:jasmine . createSpy ( ' onAfterValidate ' ) ;
var Recording = require ( ' nativeModules ' ) . recording ; var styleSheet:==:require ( ' styleSheet ' ) ;
var replacer = opts . replacer  |  |  function ( key , value ) return value ; ; var cmp:==:opts . cmp & & ( function ( f )
var monthCtrl = this . monthCtrl ; var calendarCtrl:==:this . calendarCtrl ;
var options = this . options ; var context:==:this . context ;
var maximum = this . _ options . maximum ; var ignoreBrackets:==:this . _ options . ignoreBrackets ;
var Parent = Parse . Object . extend ( ' Parent ' ) ; var Child:==:Parse . Object . extend ( ' Child ' ) ;
var tooltipBuilder = powerbi . visuals . tooltipBuilder ; var objectEnumerationBuilder:==:powerbi . visuals . objectEnumerationBuilder ;
var colorsPerVertex = simplePolylineGeometry . _ colorsPerVertex ; var followSurface:==:simplePolylineGeometry . _ followSurface ;
var Subscribable = require ( ' Subscribable ' ) ; var Text:==:require ( ' f8Text ' ) ;
var net = require ( ' net ' ) ; var url:==:require ( ' url ' ) ;
var args = command_obj . args ; var command:==:command_obj . command ;
var scrollTop = this . elInput _ . scrollTop ; var scrollLeft:==:this . elInput _ . scrollLeft ;
var dynCall_iiiii = Module [ ' dynCall_iiiii ' ] = asm [ ' dynCall_iiiii ' ] ; var dynCall_iiiddddiii:==:Module [ ' dynCall_iiiddddiii ' ]    asm [ ' dynCall_iiiddddiii ' ] ;
var p = SCM . position ( ) ; var d:==:SCM . duration ( ) ;
var hw_name    = zombie_array [ index ] [ ' hw_name ' ] ; var hw_icon:==:zombie_array [ index ] [ ' hw_icon ' ] ;
var start = changeRange . start ; var end:==:changeRange . end ;
var selectorsInterface = scope . selectorsInterface ; var mixin:==:scope . mixin ;
var changeNode1 = helper . getNode ( ' changeNode1 ' ) ; var helperNode1:==:helper . getNode ( ' helperNode1 ' ) ;
var y = value1 . y - value2 . y ; var z:==:value1 . z - value2 . z ;
var readFile = bluebird . promisify ( fs . readFile ) ; var writeFile:==:bluebird . promisify ( fs . writeFile ) ;
var activeStyle = _ props2 . activeStyle ; var onlyActiveOnIndex:==:_ props2 . onlyActiveOnIndex ;
var n = readmpInt ( der , ' modulus ' ) ; var e:==:readmpInt ( der , ' exponent ' ) ;
var path = require ( ' path ' ) ; var textFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ;
var granularity = rectangle . granularity ; var stRotation:==:rectangle . stRotation ;
var first = this . transformAny ( tree . first ) ; var second:==:this . transformAny ( tree . second ) ;
var td = d . createElement ( ' td ' ) ; var tr:==:d . createElement ( ' tr ' ) ;
var System = this . baseSystem ; var loader:==:this . loader    system . clone ( ) ;
var iconButtonSize = _ context$muiTheme . button . iconButtonSize ; var zIndex:==:_ context$muiTheme . zIndex ;
var streamqueue = require ( ' streamqueue ' ) ; var merge:==:require ( ' merge - stream ' ) ;
var mnuWrap = handle . getElement ( ' mnuWrap ' ) ; var mnuWrapPrintMargin:==:handle . getElement ( ' mnuWrapPrintMargin ' ) ;
var mkdirp = require ( ' mkdirp ' ) ; var mout:==:require ( ' mout ' ) ;
var spy = sinon . spy ( ) ; var a:==:new Element ( ' a [ text ' Hello World ' ] ' ) ;
var minSize = this . minSize ; var isHorizontal:==:this . isHorizontal ( ) ;
var colors = plug . util . colors ; var env:==:plug . util . env ;
var hitPointWorld = intersectcapsule_hitpointworld ; var normal:==:intersectcapsule_normal ;
var entities = this . _ entitiesToVisualize . values ; var modelHash:==:this . _ modelHash ;
var skins = model . skins ; var meshes:==:model . meshes ;
var push = deletedIds . push ; var indexOf:==:deletedIds . indexOf ;
var getValueAtIndexOrDefault = helpers . getValueAtIndexOrDefault ; var labels:==:chart . data . labels ;
var start = tokens [ index ] . start ; var end:==:tokens [ index ] . end ;
var winningRev = metadata . winningRev ; var deleted:==:metadata . deleted ;
var conn = simslot . conn ; var index:==:simslot . index ;
var center = Rectangle . center ( rectangle ) ; var southwest:==:Rectangle . southwest ( rectangle ) ;
var aSelectedIndices = this . aSelectedIndices ; var iLeadIndex:==:this . iLeadIndex ;
var rect = this . camera . rect ; var width:==:Math . floor ( rect . z * this . app . graphicsDevice . width * this . renderTargetScale ) ;
var linkButton = _ props3 . linkButton ; var touchRippleColor:==:_ props3 . touchRippleColor ;
var mout = require ( ' mout ' ) ; var retry:==:require ( ' retry ' ) ;
var l1 = intersectHeightfield_l1 ; var localFrom:==:intersectheightfield_localfrom ;
var k = bn . fromBits ( h . toBits ( vectors [ i ] . k ) ) ; var r:==:bn . fromBits ( h . toBits ( vectors [ i ] . r ) ) ;
var diameterBottom = options . diameterBottom  |  |  options . diameter  |  |  1 ; var tessellation:==:options . tessellation  |  |  24 ;
var distance = data . distance ; var groundColor:==:new three . color ( data . groundColor ) . getHex ( ) ;
var pdfDocument = windows . data . pdf . pdfDocument ; var pdfPage:==:windows . data . pdf . pdfPage ;
var nodes = this . _ nodes ; var cells:==:this . _ cells ;
var backdrop = new Animation ( ele . querySelector ( ' ion - backdrop ' ) ) ; var wrapper:==:new animation ( ele . querySelector ( ' . modal - wrapper ' ) ) ;
var el = this . el ; var tag:==:el . tagName ;
var subtitle = _ props . subtitle ; var subtitleColor:==:_ props . subtitleColor ;
var tick = require ( ' next - tick ' ) ; var type:==:require ( ' type ' ) ;
var lat = center . lat ; var lon:==:center . lon ;
var i18n = require ( ' i18next ' ) ; var when:==:require ( ' when ' ) ;
var Keywords = traceur . syntax . Keywords ; var literalToken:==:traceur . syntax . literalToken ;
var engineSettings = renderSettings . engineSettings ; var stylesheets:==:engineSettings . stylesheets ;
var type = accessor . type ; var count:==:accessor . count ;
var createYieldStatement = traceur . codegeneration . parseTreeFactory . createYieldStatement ; var createIdentifierExpression:==:traceur . codegeneration . parseTreeFactory . createIdentifierExpression ;
var webpack = require ( ' webpack ' ) ; var commonsChunkPlugin:==:webpack . optimize . commonsChunkPlugin ;
var resize = configNode . getAttribute ( ' resize ' ) ; var border:==:number ( configNode . getAttribute ( ' border ' )  |  |  0 ) ;
var closePath = options . closePath  |  |  false ; var invertuv:==:options . invertuv  |  |  false ;
var func = this . vexpr ( e . func ) ; var args:==:this . vseqexpr ( e . args ) ;
var clientTop = element . clientTop  |  |  document . body . clientTop  |  |  0 ; var clientLeft:==:element . clientLeft  |  |  document . body . clientLeft  |  |  0 ;
var y = this . y ; var z:==:this . hasAxis ( az ) ? this . z : 1 ;
var exists = fs . exists  |  |  path . exists ; var async:==:require ( ' async ' ) ;
var data = this . _ data ; var records:==:this . _ records ;
var prev = tangentPlane . projectPointOntoPlane ( cartesian3 . add ( position , end , prevScratch ) , prevScratch ) ; var angle:==:cartesian2 . angleBetween ( next , prev ) ;
var ref = way . getAttribute ( ' ref ' ) ; var role:==:way . getAttribute ( ' role ' ) ;
var concat = require ( ' gulp - concat ' ) ; var connect:==:require ( ' gulp - connect ' ) ;
var gutter = this . editor . renderer . $ gutterLayer ; var index:==:parseInt ( target . getAttribute ( ' index ' ) , 10 ) ;
var authorizationUrl = security . authorizationUrl ; var tokenUrl:==:security . tokenUrl ;
var exports = node . body . exports ; var modDefns:==:node . body . modDefns ;
var length = this . operatorList . fnArray . length ; var operatorList:==:this . operatorList ;
var crossOrigin = getCrossOrigin ( this . crossOrigin ) ; var url:==:this . url ;
var firstRetainerIndex = this . _ firstRetainerIndex ; var retainingNodes:==:this . _ retainingNodes ;
var scalarExpounded = quantizationParameters . scalarExpounded ; var guardBits:==:quantizationParameters . guardBits ;
var data = this . data ; var mesh:==:this . el . getOrCreateObject3d ( ' mesh ' , three . mesh ) ;
var i d = this . h ( ' i d ' ) ; var instance:==:this . h ( ' instance ' ) ;
var width = nearestPow2 ( image . width ) ; var height:==:nearestPow2 ( image . height ) ;
var cellOffset = _ ref . cellOffset ; var cellSize:==:_ ref . cellSize ;
var create = panel . nodes . create ; var nodes:==:panel . picker . nodes ;
var Node = scope . wrappers . Node ; var assert:==:scope . assert ;
var daySelectionMousedown = t . daySelectionMousedown ; var slotSegHtml:==:t . slotSegHtml ;
var parser = _ dereq _ ( ' engine . io - parser ' ) ; var inherit:==:_ dereq _ ( ' component - inherit ' ) ;
var shell = require ( ' gulp - shell ' ) ; var browserify:==:require ( ' browserify ' ) ;
var turn = iceCandidates . turn ; var host:==:iceCandidates . host ;
var dirname = p . dirname ; var basename:==:p . basename ;
var inputs = params . inputs ; var outputs:==:params . outputs ;
var actuals = rd . actuals ; var exactCandidates:==:rd . exactCandidates ;
var payloadTooLargeError = errors . payloadTooLargeError ; var unsupportedMediaTypeError:==:errors . unsupportedMediaTypeError ;
var config = descriptor . config ; var definition:==:descriptor . definition ;
var parameterList = this . transformAny ( tree . parameterList ) ; var returnType:==:this . transformAny ( tree . returnType ) ;
var gitError = errors . gitError ; var warning:==:errors . warning ;
var height = codeView . height ( ) ; var scrollTop:==:codeView . scrollTop ( ) ;
var Types = keystone . Field . Types ; var manyRelationship:==:new keystone . list ( ' manyRelationship ' ) ;
var transformConstraints = this . transformConstraints ; var pathConstraints:==:this . pathConstraints ;
var q = require ( ' q ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var installPath = options . settingDir  |  |  options . installPath  |  |  ' ' ; var workspaceDir:==:options . options . workspaceDir ;
var ref = $ this . attr ( ' ref ' ) ; var refUrl:==:$ this . attr ( ' refUrl ' )  |  |  '' ;
var language = getLanguageCode ( platformid , languageid , ltag ) ; var encoding:==:getEncoding ( platformid , encodingid , languageid ) ;
var timestamp = parseInt ( getData ( btn , ' data - timestamp ' ) , 10 ) ; var postDeleteDuration:==:parseInt ( ajaxify . data . postDeleteDuration , 10 ) ;
var browser_name   = zombie_array [ index ] [ ' browser_name ' ] ; var browser_version:==:zombie_array [ index ] [ ' browser_version ' ] ;
var Schema = mongoose . Schema ; var validatorError:==:mongoose . error . validatorError ;
var list = this . _ list ; var map:==:this . _ map ;
var x = x1 + u * px ; var y:==:y1 + u * py ;
var stack = err . stack  |  |  message ; var index:==:stack . indexOf ( message ) ;
var Nil = mod . Nil ; var sbTree:==:mod . sbTree ;
var deepOrangea100 = exports . deepOrangea100 = ' # ff9e80 ' ; var deepOrangea200:==:exports . deepOrangea200    ' # ff6e40 ' ;
var brown50 = exports . brown50 = ' # efebe9 ' ; var brown100:==:exports . brown100    ' # d7ccc8 ' ;
var timers = metrics . timers ; var timer_counters:==:metrics . timer_counters ;
var options = optionsIn  |  |  ; var pane:==:_ getPane ( paneId ) ;
var max = data . max ; var radi:==:data . radi ;
var helpers = this . helpers ; var version:==:helpers . set ( ' version ' ) ;
var reactInstrumentation = require ( ' reactInstrumentation ' ) ; var reactNativeContainerInfo:==:require ( ' reactNativeContainerInfo ' ) ;
var wd = require ( ' wd ' ) ; var path:==:require ( ' path ' ) ;
var Node = _ . Node ; var sourceLocation:==:_ . sourceLocation ;
var videoRecvCodec = options . videoRecvCodec  |  |  '' ; var stereo:==:options . stereo ;
var autoHeight = _ props4 . autoHeight ; var className:==:_ props4 . className ;
var images = DOM . getNodeArray ( options . images ) ; var bgnodes:==:dom . getNodeArray ( options . bgnodes ) ;
var allowExt = getExtRegex ( this . settings . allowExt ) ; var denyExt:==:getExtRegex ( this . settings . denyExt ) ;
var preventFirstCall = ! ! options . preventFirstCall ; var preventLastCall:==:! ! options . preventLastCall ;
var predefinedName = traceur . syntax . predefinedName ; var setAccessor:==:traceur . syntax . trees . setAccessor ;
var scrollLeft = _ state2 . scrollLeft ; var scrollTop:==:_ state2 . scrollTop ;
var det = math . det ; var diag:==:math . diag ;
var interval = result . interval ; var niceTickExtent:==:result . niceTickExtent ;
var perf = window . performance ; var string:==:counter . string ;
var startAngle = -seriesModel . get ( ' startAngle ' ) * radian ; var minAngle:==:seriesModel . get ( ' minAngle ' ) * radian ;
var surface = this . _ surface ; var tileProvider:==:surface . tileProvider ;
var base = this . base ; var Cache:==:this . Cache ;
var emptyStatement = traceur . syntax . trees . emptyStatement ; var expressionStatement:==:traceur . syntax . trees . expressionStatement ;
var Plugin = imports . Plugin ; var clipboard:==:imports . clipboard ;
var defines = fs . defines . slice ( 0 ) ; var sources:==:fs . sources . slice ( 0 ) ;
var head = doc . getElementsByTagName ( ' head ' ) [ 0 ] ; var sc:==:doc . createElement ( ' script ' ) ;
var arrayExtensions = jsCommon . arrayExtensions ; var lazy:==:jsCommon . lazy ;
var nx = vNode . getElementsByTagName ( ' nx ' ) [ 0 ] . textContent ; var ny:==:vNode . getElementsByTagName ( ' ny ' ) [ 0 ] . textContent ;
var dataset = logItem . dataset ; var phoneNumber:==:dataset . phoneNumber ;
var fs = require ( ' fs - extra ' ) ; var postcss:==:require ( ' postcss ' ) ;
var before = helper . before ; var test:==:helper . test ;
var createMemberExpression = parseTreeFactory . createMemberExpression ; var createObjectLiteralExpression:==:parseTreeFactory . createObjectLiteralExpression ;
var draftStringKey = require ( ' draftStringKey ' ) ; var unicodeUtils:==:require ( ' unicodeUtils ' ) ;
var width = shape . width ; var angle:==:shape . angle ;
var providers = this . model . get ( ' providers ' ) ; var quality:==:this . model . get ( ' quality ' ) ;
var canvas = this . canvas ; var antialias:==:this . getAttribute ( ' antialias ' )      ' true ' ;
var position = entity . position ; var radii:==:ellipsoid . radii ;
var sec = math . sec ; var complex:==:math . complex ;
var a = new constantNode ( 1 ) ; var add:==:new operatorNode ( ' + ' , ' add ' , [ a , a ] ) ;
var description = _ ref . description ; var image:==:_ ref . image ;
var drawCalls = scene . drawCalls ; var shadowCasters:==:scene . shadowCasters ;
var dy = options . dy ; var duration:==:options . duration ;
var group = groups [ j ] ; var start:==:group . start ;
var imageryProvider = layer . _ imageryProvider ; var tilingScheme:==:imageryProvider . tilingScheme ;
var legendData = powerbi . visuals . legendData ; var visualDataRoleKind:==:powerbi . visualDataRoleKind ;
var o = this . o = $ . extend ( , this . _ o ) ; var lang:==:o . language ;
var guess = options ? ! ! options . guess : true ; var p:==:new printStackTrace . implementation ( ) ;
var defineWrapGetter = scope . defineWrapGetter ; var assert:==:scope . assert ;
var abs = m . abs ; var sqrt:==:m . sqrt ;
var c = new symbolNode ( ' c ' ) ; var add:==:new operatorNode ( ' + ' , ' add ' , [ a , b , c ] ) ;
var type = opts . type ; var token:==:opts . token ;
var Hilo = window . Hilo ; var htmlAudio:==:hilo . htmlAudio ;
var constantNode = math . expression . node . constantNode ; var node:==:math . expression . node . node ;
var props = ref . props ; var children:==:ref . children ;
var groups = util . _ extend ( defaultConfig . groups , userConfig . groups ) ; var order:==:userConfig . order  |  |  defaultConfig . order ;
var boneInverses = this . boneInverses ; var boneMatrices:==:this . boneMatrices ;
var babel = require ( ' babel - core ' ) ; var transform:==:require ( ' es3ify ' ) . transform ;
var type = properties . type ; var subtype:==:properties . subtype ;
var locations = this . _ locations ; var length:==:locations . length ;
var longitude = latLon . longitude ; var latitude:==:latLon . latitude ;
var v1 = currVolumeNode . getElementsByTagName ( ' v1 ' ) [ 0 ] . textContent ; var v2:==:currVolumeNode . getElementsByTagName ( ' v2 ' ) [ 0 ] . textContent ;
var strictRegion = query . region  |  |  options . strictRegion ; var ignoreProtocolVersion:==:options . ignoreProtocolVersion ;
var cropper = $ image . data ( ' cropper ' ) ; var options:==:cropper . options ;
var reactUpdateQueue = require ( ' reactUpdateQueue ' ) ; var reactUpdates:==:require ( ' reactUpdates ' ) ;
var teal50 = exports . teal50 = ' # e0f2f1 ' ; var teal100:==:exports . teal100    ' # b2dfdb ' ;
var superExpression = traceur . syntax . trees . superExpression ; var superTransformer:==:traceur . codegeneration . superTransformer ;
var preview    = this . preview ; var settings:==:this . settings ;
var wrap    = options . utils . wrapPattern ; var assert:==:require ( ' chai ' ) . assert ;
var focusHeight = chart . focusHeight = chartHeight * . 7 ; var contextHeight:==:chart . contextHeight    chartHeight * . 2 ;
var identifier = this . transformAny ( tree . identifier ) ; var typeAnnotation:==:this . transformAny ( tree . typeAnnotation ) ;
var nconf = require ( ' nconf ' ) ; var util:==:require ( ' util ' ) ;
var bignumber = math . bignumber ; var matrix:==:math . matrix ;
var indices = this . indices ; var length:==:indices . length ;
var dynCall_iiiidd = Module [ ' dynCall_iiiidd ' ] = asm [ ' dynCall_iiiidd ' ] ; var dynCall_vii:==:Module [ ' dynCall_vii ' ]    asm [ ' dynCall_vii ' ] ;
var camera = frameState . camera ; var direction:==:camera . directionwc ;
var cookieAccess = require ( ' cookiejar ' ) . cookieAccessInfo ; var parse:==:require ( ' url ' ) . parse ;
var offsets = this . _ offsets ; var len:==:points . length ;
var rel = tag . rel ? ' rel= ' ' + tag . rel + ' ' ' : '' ; var type:==:tag . type ? ' type ' ' + tag . type + ' ' ' : '' ;
var step = options . step  |  |  0 ; var coneFactor:==:options . coneFactor  |  |  0 ;
var status = ref . status ; var statusText:==:ref . statusText ;
var uiManager = require ( ' uiManager ' ) ; var viewPropTypes:==:require ( ' viewPropTypes ' ) ;
var Plugin = imports . Plugin ; var panels:==:imports . panels ;
var template = ref . template ; var inject:==:ref . inject ;
var y = shape . y ; var r:==:shape . r ;
var scene = editor . scene ; var sceneHelpers:==:editor . sceneHelpers ;
var alt = this . find ( ' [ data - alt ] ' ) . val ( ) ; var link:==:this . find ( ' [ data - link ] ' ) . val ( ) ;
var uid = params . uid ; var roomId:==:params . roomId ;
var join = require ( ' path ' ) . join ; var exec:==:require ( ' child_process ' ) . exec ;
var expectedResult = expectations [ i ] . expectedResult ; var command:==:expectations [ i ] . command ;
var pink300 = exports . pink300 = ' # f06292 ' ; var pink400:==:exports . pink400    ' # ec407a ' ;
var after = helper . after ; var before:==:helper . before ;
var suffix = kTransforms [ transform ] . suffix ; var t:==:kTransforms [ transform ] . transform ;
var size = sizes [ index ] . size ; var url:==:sizes [ index ] . formats [ 0 ] . preview_url ;
var target = select ( evt . target ) ; var relatedTarget:==:evt . relatedTarget ;
var expression = this . transformAny ( tree . expression ) ; var body:==:this . transformAny ( tree . body ) ;
var annotationType = sharedUtil . annotationType ; var ops:==:sharedUtil . ops ;
var Service = require ( ' hap - nodejs ' ) . Service ; var Characteristic:==:require ( ' hap - nodejs ' ) . Characteristic ;
var b = a . nextSibling ; var c:==:document . createElement ( ' c ' ) ;
var TRY_STATEMENT = ' TRY_STATEMENT ' ; var TYPE_ALIAS_DECLARATION:==:' TYPE_ALIAS_DECLARATION ' ;
var d = promise . defer ( ) ; var p:==:d . promise . then ( ) ;
var escape = utils . escape ; var mkdirp:==:require ( ' mkdirp ' ) ;
var lat = $ el . data ( ' lat ' ) ; var long:==:$ el . data ( ' long ' ) ;
var x = style . x  |  |  0 ; var y:==:style . y  |  |  0 ;
var stdout = process . stdout . write . getCall ( 0 ) ? process . stdout . write . getCall ( 0 ) . args [ 0 ] : '' ; var stderr:==:process . stderr . write . getCall ( 0 ) ? process . stderr . write . getCall ( 0 ) . args [ 0 ] : '' ;
var codeblock = packet . codeblocks [ i ] ; var precinct:==:codeblock . precinct ;
var setAccessor = traceur . syntax . trees . setAccessor ; var tempVarTransformer:==:traceur . codegeneration . tempVarTransformer ;
var appearActiveClass = ref . appearActiveClass ; var beforeEnter:==:ref . beforeEnter ;
var height = $ ( document ) . height ( ) ; var scrollTop:==:$ ( window ) . scrollTop ( ) ;
var name = pkg . name ; var version:==:pkg . version ;
var i d = ids [ i ] ; var edge:==:edges [ i d ] ;
var neighborsSignificance = this . neighborsSignificance ; var coefficentsMagnitude:==:this . coefficentsMagnitude ;
var height = $ ( this ) . height ( ) ; var scrollTop:==:$ ( this ) . scrollTop ( ) ;
var connect = imports . connect ; var db:==:imports . db ;
var options = this . options ; var $ slides:==:this . $ slides ;
var yfov = camera . perspective . yfov ; var aspectRatio:==:camera . perspective . aspectRatio !    undefined ? camera . perspective . aspectRatio : 1 ;
var VISITOR_KEYS = exports . VISITOR_KEYS = ; var ALIAS_KEYS:==:exports . ALIAS_KEYS    ;
var functionNode = math . expression . node . functionNode ; var operatorNode:==:math . expression . node . operatorNode ;
var createPropertyNameAssignment = parseTreeFactory . createPropertyNameAssignment ; var createRestParameter:==:parseTreeFactory . createRestParameter ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var cpsTransformer:==:traceur . codegeneration . generator . cpsTransformer ;
var postDigestQueue = $ rootScope . $ $ postDigestQueue = [ ] ; var applyAsyncQueue:==:$ rootScope . $ $ applyAsyncQueue    [ ] ;
var overflowWrapper = that . _ overflowWrapper ( ) ; var element:==:( overflowWrapper  |  |  that . element ) ;
var concat   = require ( ' gulp - concat ' ) ; var header:==:require ( ' gulp - header ' ) ;
var media = obj . media ; var sourceMap:==:obj . sourceMap ;
var sc = graph . view . scale ; var tr:==:graph . view . translate ;
var errorClient = raygun . errorClient ; var warningClient:==:raygun . warningClient ;
var gulp = require ( ' gulp ' ) ; var assets:==:require ( ' gulp - bower - assets ' ) ;
var tildify = require ( ' tildify ' ) ; var interpret:==:require ( ' interpret ' ) ;
var shape = data . shape ; var stride:==:data . stride ;
var IMPORT_DECLARATION = parseTreeType . import_declaration ; var module_declaration:==:parseTreeType . module_declaration ;
var clipPoints1 = b2Collision . s_clippoints1 ; var clipPoints2:==:b2Collision . s_clippoints2 ;
var t1 = Prim2DBase_1 . _ t1 ; var t2:==:Prim2DBase_1 . _ t2 ;
var e = new gd ( 2008 , 9 , 10 ) ; var i:==:new gdr ( s , e ) . iterator ( ) ;
var git = ' https : ilovegit . git ' ; var summary:==:' Test summary ' ;
var w = this . width - xs ; var h:==:this . height - xs ;
var d16 = _ addDiv ( ' d16 ' ) , d17 = _ addDiv ( ' d17 ' ) , d18 = _ addDiv ( ' d18 ' ) ; var c:==:_ jsPlumb . connect ( source : ' d16 ' , target : d17 , endpoint : ' rectangle ' ) ;
var hideEvents = t . hideEvents ; var eventDrop:==:t . eventDrop ;
var unsafeUnwrap = scope . unsafeUnwrap ; var unwrap:==:scope . unwrap ;
var crossOrigin = self . crossOrigin ; var url:==:crossOrigin ? self . crossOriginUrl : self . url ;
var arrayExtensions = jsCommon . arrayExtensions ; var semanticFilter:==:powerbi . data . semanticFilter ;
var decorations = job . decorations ; var numberLines:==:job . numberLines ;
var frame = this . texture . frame ; var context:==:renderSession . context ;
var clockViewModel = that . _ clockViewModel ; var clockRange:==:clockViewModel . clockRange ;
var valueField = this . cfg . valueField  |  |  ' value ' ; var data:==:data . data ;
var layout = imports . layout ; var tooltip:==:imports . tooltip ;
var dy = Math . max ( 0 , Math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' dy ' , this . dy ) ) ) ) ; var r:==:math . max ( 0 , math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' size ' , this . size ) ) ) ) ;
var rowIndex = _ ref3 . rowIndex ; var cellRenderer:==:this . props . cellRenderer ;
var elements = $ document . elements ( ) ; var href:==:elements . attr ( ' href ' ) ;
var reactCurrentOwner = require ( ' reactCurrentOwner ' ) ; var reactElement:==:require ( ' reactElement ' ) ;
var expected = ret . value . expected ; var rendered:==:ret . value . rendered ;
var timers = require ( ' timers ' ) ; var Buffer:==:require ( ' buffer ' ) . Buffer ;
var _ memmove = Module [ ' _ memmove ' ] = asm [ ' _ memmove ' ] ; var _ malloc:==:Module [ ' _ malloc ' ]    asm [ ' _ malloc ' ] ;
var minimist = require ( ' minimist ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var duration = scheduledAnimation . _ duration ; var stopTime:==:scheduledAnimation . stopTime ;
var r = rgba [ 0 ] ; var g:==:rgba [ 1 ] ;
var labels = axis . _ labels = [ ] ; var gridlines:==:axis . _ gridlines ;
var neighborsSignificance = this . neighborsSignificance ; var significanceState:==:this . significanceState ;
var slot = filterChoice . slot ; var filters:==:filterChoice . filters ;
var edgeFieldsCount = this . _ edgeFieldsCount ; var edgeWeakType:==:this . _ edgeWeakType ;
var pmx = require ( ' pmx ' ) ; var http:==:require ( ' http ' ) ;
var line = gcode [ i ] . line ; var percentage:==:gcode [ i ] . percentage ;
var startBufferEvery = this . startBufferEvery = = null ? bufferSize : this . startBufferEvery ; var buffers:==:this . buffers ;
var dispatch = _ ref . dispatch ; var getState:==:_ ref . getState ;
var db = BrowserDB . db . _ db ; var transaction:==:db . transaction ( ' icons ' , ' readwrite ' ) ;
var task = tasks [ i ] ; var index:==:indexOf ( workersList , task , 0 ) ;
var fromJS = Immutable . fromJS ; var assert:==:require ( ' chai ' ) . assert ;
var width = svg . viewPort . width ( ) ; var height:==:svg . viewPort . height ( ) ;
var appView = _ appJsViewsAppView [ ' default ' ] ; var confirmDownloadView:==:_ appJsViewsConfirmDownloadView [ ' default ' ] ;
var guid = element . attr ( ' data - guid ' ) ; var lat:==:element . attr ( ' data - lat ' ) ;
var testPanel = imports . testPanel ; var settings:==:imports . settings ;
var action = e . action ; var items:==:e . items ;
var nullTree = traceur . syntax . trees . nullTree ; var objectLiteralExpression:==:traceur . syntax . trees . objectLiteralExpression ;
var map = this . map _ ; var version:==:this . version _ ;
var includeFields = options [ ' includeFields ' ]  |  |  this . fieldsIncludedWithJsonPost ; var url:==:urlOrForm ;
var uploadImgServer = config . uploadImgServer ; var uploadImgShowBase64:==:config . uploadImgShowBase64 ;
var x = this . xData ; var y:==:this . yData ;
var links = configNode . getAttribute ( ' links ' ) ; var hl:==:configNode . getAttribute ( ' highlight ' ) ;
var fillColor = label . _ fillColor ; var outlineColor:==:label . _ outlineColor ;
var assert   = require ( ' assert ' ) ; var Connection:==:common . Connection ;
var others = collisions [ guid ] . others ; var length:==:others . length ;
var bar_px = document . getElementById ( ' bar_px ' ) ; var bar_mozmm:==:document . getElementById ( ' bar_mozmm ' ) ;
var KIND_PACKAGE = scopeAnalyzer . kind_package ; var kind_hidden:==:scopeAnalyzer . kind_hidden ;
var defaults     = $ . fn . selectize . defaults ; var settings:==:$ . extend ( , defaults , settings_user ) ;
var Note = db . model ( ' noteWithStringId ' , noteSchema , random ( ) ) ; var alice:==:new user ( _ i d : ' alice ' , name : ' alice ' ) ;
var rowId = e . data . rowId ; var colId:==:e . data . colId ;
var Marked = require ( ' Marked ' ) ; var React:==:require ( ' React ' ) ;
var p = a . opaque ; var b:==:a . mb_w ;
var a = typeof ma ; var b:==:typeof mb ;
var tiptip_content = $ ( ' # tiptip_content ' ) ; var tiptip_arrow:==:$ ( ' # tiptip_arrow ' ) ;
var def = this . definition ( ) ; var s:==:this . scope ;
var data = this . data ; var el:==:this . el ;
var marky = require ( ' marky ' ) ; var median:==:require ( ' median ' ) ;
var tabManager = imports . tabManager ; var ui:==:imports . ui ;
var lvalue = this . transformAny ( tree . lvalue ) ; var initializer:==:this . transformAny ( tree . initializer ) ;
var x = this . bounds . upperLeft ( ) . x ; var y:==:this . bounds . upperLeft ( ) . y ;
var data = this . data ; var raycaster:==:this . raycaster ;
var shadow = tree . shadow = b . firstChild ; var sr3:==:tree . sr3    div . createShadowRoot ( ) ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , [ [ 1,1 ] , [ 4,4 ] ] , opts ) ;
var observable = observation . observable ; var observer:==:observation . observer ;
var path = require ( ' path ' ) ; var stylish:==:require ( ' jshint - stylish ' ) ;
var ip = hosts . hosts [ key ] . ip ; var hostname:==:hosts . hosts [ key ] . hostname ;
var pad = this . padDigit ; var r:==:this . r . toString ( 16 ) ;
var iconpos = this . iconpos ; var icon:==:this . options . morebuttonicon ;
var dur = + conf . dur ; var type:==:conf . type ;
var menuItem = imports . menuItem ; var divider:==:imports . divider ;
var once = Error ( ' once ' ) ; var twice:==:Error ( ' twice ' ) ;
var createMemberExpression = parseTreeFactory . createMemberExpression ; var createParenExpression:==:parseTreeFactory . createParenExpression ;
var attribute = attributes [ key ] ; var array:==:Array . prototype . slice . call ( attribute . array ) ;
var titleLayout = meta . config . titleLayout  |  |  ' pageTitle  |  browserTitle ' ; var browserTitle:==:validator . escape ( string ( meta . config . browserTitle  |  |  meta . config . title  |  |  ' nodebb ' ) ) ;
var matrix = math . matrix ; var sparse:==:math . sparse ;
var mathord = ' mathord ' ; var op:==:' op ' ;
var order = options . order  |  |  1 ; var unit:==:options . unit  |  |  ' px ' ;
var $ cells = that . $ cells = $ dataSpans . find ( ' td , th ' ) ; var $ dataCells:==:that . $ dataCells    $ cells . filter ( ' td ' ) ;
var programs = model . gltf . programs ; var shaders:==:model . _ loadResources . shaders ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var path:==:require ( ' path ' ) ;
var width = style . width ; var height:==:style . height ;
var root = seriesModel . getData ( ) . tree . root ; var targetNode:==:payload . targetNode ;
var strm = this . strm ; var chunkSize:==:this . options . chunkSize ;
var next = diff . next ; var stackedOnNext:==:diff . stackedOnNext ;
var or = Parsers . or ; var and:==:Parsers . and ;
var nodes = this . nodes ; var node:==:exists ? nodes [ idx ] : undefined ;
var appear = data . appear ; var afterAppear:==:data . afterAppear ;
var min = element . querySelector ( ' limits min ' ) ? parseFloat ( element . querySelector ( ' limits min ' ) . textContent ) : -360 ; var max:==:element . querySelector ( ' limits max ' ) ? parseFloat ( element . querySelector ( ' limits max ' ) . textContent ) : 360 ;
var format = _ _ webpack_require _ _ ( 2 ) . format ; var isNumber:==:_ _ webpack_require _ _ ( 2 ) . isNumber ;
var d16 = _ addDiv ( ' d16 ' ) , d17 = _ addDiv ( ' d17 ' ) ; var conn:==:_ jsPlumb . connect ( source : d16 , target : d17 , connector : ' straight ' , anchors : [ ' leftMiddle ' , ' rightMiddle ' ] ) ;
var w = $ elem . width ( ) ; var h:==:$ elem . height ( ) ;
var callstack = imports . callstack ; var debug:==:imports . debugger ;
var streamType = sharedUtil . streamType ; var assert:==:sharedUtil . assert ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var geoPointFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' geoPointFieldTestObject ' ) ) ;
var extname = path . extname ; var join:==:path . join ;
var _ im_get_sps_str = Module [ ' _ im_get_sps_str ' ] = asm [ ' _ im_get_sps_str ' ] ; var _ memcmp:==:Module [ ' _ memcmp ' ]    asm [ ' _ memcmp ' ] ;
var binaryOperator = traceur . syntax . trees . binaryOperator ; var bindingElement:==:traceur . syntax . trees . bindingElement ;
var components = exports . components = internalPropTypes . components ; var route:==:exports . route    internalPropTypes . route ;
var shapeHover = instance . get ( ' shapeHover ' ) ; var shapeArrowHover:==:instance . get ( ' shapeArrowHover ' ) ;
var validRange = semver . validRange ; var inc:==:semver . inc ;
var exec = require ( ' child_process ' ) . exec ; var me:==:' my_username ' ;
var parseTree = traceur . syntax . trees . parseTree ; var switchStatement:==:traceur . syntax . trees . switchStatement ;
var drawOrder = this . skeleton . drawOrder ; var batcher:==:this . batcher ;
var uglify = require ( ' gulp - uglify ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var anchor = editor . getCursor ( ' anchor ' ) ; var head:==:editor . getCursor ( ' head ' ) ;
var d = new blockNode ( [ node : new symbolNode ( ' x ' ) , node : new constantNode ( 2 ) , visible : false ] ) ; var e:==:new blockNode ( [ node : new symbolNode ( ' x ' ) , node : new constantNode ( 2 ) , node : new constantNode ( 5 ) ] ) ;
var request = require ( ' request ' ) ; var fs:==:require ( ' fs ' ) ;
var labelLayout = powerbi . labelLayout ; var converterHelper:==:powerbi . visuals . converterHelper ;
var structure = this . _ structure ; var stride:==:structure . stride ;
var path = require ( ' path ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var mkdirp = Promise . promisify ( require ( ' mkdirp ' ) ) ; var rimraf:==:Promise . promisify ( require ( ' rimraf ' ) ) ;
var currentTag = context . currentTag = context . currentTag  |  |  match ? match [ 1 ] : null ; var index:==:gitSemverTags . indexOf ( currentTag ) ;
var e = new Error ( ' message ' ) ; var keys:==:Object . keys ( e ) ;
var objectPatternField = traceur . syntax . trees . objectPatternField ; var parenExpression:==:traceur . syntax . trees . parenExpression ;
var inheritSingle = powerbi . prototype . inheritSingle ; var arrayExtensions:==:jsCommon . arrayExtensions ;
var Schema = mongoose . Schema ; var utility:==:require ( ' utility ' ) ;
var unit = options . unit  |  |  ' px ' ; var color:==:options . color ;
var to = ray . to ; var direction:==:ray . direction ;
var Track = require ( ' facade ' ) . Track ; var defaults:==:require ( ' defaults ' ) ;
var language = imports . language ; var commands:==:imports . commands ;
var total = track . revenue ( )  |  |  track . total ( )  |  |  0 ; var orderId:==:track . orderId ( )  |  |  0 ;
var gulp = require ( ' gulp ' ) ; var plumber:==:require ( ' gulp - plumber ' ) ;
var sinon = require ( ' sinon ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var m0 = this . m00 _ ; var m1:==:this . m10 _ ;
var rootDocument = scope . rootDocument ; var flags:==:scope . flags ;
var gltfNode = n . gltfNode ; var runtimeNode:==:runtimeNodes [ n . i d ] ;
var gulp = require ( ' gulp ' ) ; var util:==:require ( ' gulp - util ' ) ;
var sublevel = _ interopDefault ( require ( ' sublevel - pouchdb ' ) ) ; var through2:==:require ( ' through2 ' ) ;
var moment = require ( ' moment ' ) ; var url:==:require ( ' url ' ) ;
var redis = config . redis ; var uuid:==:require ( ' uuid ' ) ;
var l = s . left ; var r:==:s . right ;
var richTextCodeMirrorAdapter = firepad . richTextCodeMirrorAdapter ; var richTextCodeMirror:==:firepad . richTextCodeMirror ;
var assert = require ( ' assert ' ) ; var async:==:require ( ' async ' ) ;
var x = this . x + 1 ; var y:==:this . y ;
var frames = this . frames ; var bone:==:skeleton . bones [ this . boneIndex ] ;
var editor = e . editor ; var selection:==:editor . selection ;
var svgUtil = powerbi . visuals . svgUtil ; var axisHelper:==:powerbi . visuals . axisHelper ;
var image = t . image ; var width:==:image . width ;
var hasOwnProperty = object . prototype . hasOwnProperty ; var length:==:reflectionData . length ;
var col = db . collection ( ' insert_one_with_generators ' ) ; var r:==:yield col . insertOne ( a : 1 ) ;
var React = require ( ' React ' ) ; var recordingModule:==:require ( ' nativeModules ' ) . swipeRefreshLayoutRecordingModule ;
var element = this . element , that = this , new_step = step - 1 ; var o:==:this . options ;
var uglify = require ( ' gulp - uglify ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var lime800 = exports . lime800 = ' # 9e9d24 ' ; var lime900:==:exports . lime900    ' # 827717 ' ;
var symbolNode = math . expression . node . symbolNode ; var assignmentNode:==:math . expression . node . assignmentNode ;
var cm     = this . cm ; var settings:==:this . settings ;
var isAdmin = results . isAdmin ; var isGlobalModerator:==:results . isGlobalModerator ;
var height = backgroundBillboard . height * scale ; var x:==:backgroundBillboard . _ translate . x ;
var lineBreak = acorn . lineBreak ; var allLineBreaks:==:acorn . allLineBreaks ;
var fieldName = processingState [ stateIndex ] . fieldName ; var col:==:processingState [ stateIndex ] . col ;
var color = colors [ feature . get ( ' PLT ' ) ] ; var style:==:styleCache [ color ] ;
var x = currentPos . x ; var y:==:currentPos . y ;
var trim = require ( ' trim ' ) ; var type:==:require ( ' component - type ' ) ;
var ctx = this . _ chart . ctx ; var pointStyle:==:vm . pointStyle ;
var reactBrowserEventEmitter = require ( ' reactBrowserEventEmitter ' ) ; var reactControlledComponent:==:require ( ' reactControlledComponent ' ) ;
var method = message . method ; var url:==:message . url ;
var select = $ document . elements ( ' select [ ng\\ : model='$1 ' ] ' , this . name ) ; var option:==:select . find ( ' option [ value ' ' + value + ' ' ] ' ) ;
var args = _ args ; var f:==:_ f ;
var slice = [ ] . slice ; var proto:==:Object . create ( htmlElement . prototype ) ;
var g = color . g ; var b:==:color . b ;
var createConditionalExpression = parseTreeFactory . createConditionalExpression ; var createIdentifierExpression:==:parseTreeFactory . createIdentifierExpression ;
var file = input_attrs . file ; var attrs:==:Dygraph . copyUserAttrs _ ( input_attrs ) ;
var name = obj . name  |  |  name ; var prefix:==:obj . prefix  |  |  '' ;
var gulp = require ( ' gulp ' ) ; var jsonlint:==:require ( ' gulp - jsonlint ' ) ;
var deltaY = event . wheelDeltay  |  |  -1 * event . deltay ; var deltax:==:event . wheelDeltax  |  |  -1 * event . deltax ;
var contrast = params . contrast ; var brightness:==:params . brightness ;
var visualDataRoleKind = powerbi . visualDataRoleKind ; var valueFormatter:==:powerbi . visuals . valueFormatter ;
var Package = require ( ' pomelo - protocol ' ) . Package ; var logger:==:require ( ' pomelo - logger ' ) . getLogger ( ' pomelo ' , _ _ filename ) ;
var multiTestRunner = goog . require ( ' goog . testing . multiTestRunner ' ) ; var testCase:==:goog . require ( ' goog . testing . testCase ' ) ;
var commands = imports . commands ; var jsonalyzer:==:imports . jsonalyzer ;
var fs = require ( ' fs ' ) ; var all:==:Promise . all . bind ( Promise ) ;
var from = sourceRange . from ; var to:==:sourceRange . to ;
var reactBrowserEventEmitter = require ( ' reactBrowserEventEmitter ' ) ; var reactdomComponentFlags:==:require ( ' reactdomComponentFlags ' ) ;
var getTreeScope = scope . getTreeScope ; var isWrapper:==:scope . isWrapper ;
var hasOwn = object . prototype . hasOwnProperty ; var toString:==:object . prototype . toString ;
var width = hasWidth ? contentSize . width : 0 ; var height:==:hasHeight ? contentSize . height : 0 ;
var el = this . el ; var savedPose:==:this . savedPose ;
var currency = order . price_amount . currency ( ) . to_json ( ) ; var issuer:==:order . price_amount . issuer ( ) . to_json ( ) ;
var startTime = tasks [ firstTaskIndex ] . startTime ( ) ; var endTime:==:tasks [ lastTaskIndex ] . endTime ( ) ;
var sideNews = $ ( _ sideNews ) ; var modId:==:conf . sideNews . modId ;
var caption = blocks . isString ( options . caption ) & & new virtualElement ( ' option ' ) ; var option:==:new virtualElement ( ' option ' ) ;
var begin = p . getAttribute ( ' begin ' ) ; var dur:==:p . getAttribute ( ' dur ' ) ;
var encoding = params . encoding ; var fetchBuiltIncMap:==:params . fetchBuiltIncMap ;
var callback = options . callback ; var callbackPeriod:==:options . callbackPeriod  |  |  10 ;
var b = face . b ; var c:==:face . c ;
var checked = $ chk . prop ( ' checked ' ) ; var disabled:==:$ chk . prop ( ' disabled ' ) ;
var x0 = Number ( configNode . getAttribute ( ' x0 ' )  |  |  0 ) ; var y0:==:number ( configNode . getAttribute ( ' y0 ' )  |  |  0 ) ;
var beta = isBetaValid ? parseFloat ( betaString ) : -1 ; var gamma:==:isGammaValid ? parseFloat ( gammaString ) : -1 ;
var ui = imports . ui ; var scm:==:imports . scm ;
var el = this . el ; var component:==:new components . material . Component ( el , color : ' red ' ) ;
var x = anchorPoint . x ; var y:==:anchorPoint . y ;
var check = args . check ; var periods:==:args . periods  |  |  [ ] ;
var aborted = _ props . aborted ; var color:==:_ props . color ;
var tabManager = imports . tabManager ; var panels:==:imports . panels ;
var traceurLoader = traceur . loader . traceurLoader ; var inlineLoaderCompiler:==:traceur . loader . inlineLoaderCompiler ;
var top = ! isNan ( rect . top ) ? rect . top : null ; var height:==:! isNan ( rect . height ) ? rect . height : 0 ;
var timeslider = imports . timeslider ; var cursorLayer:==:imports . cursorLayer ;
var browserify = require ( ' browserify ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var ace = terminal . aceSession . ace ; var size:==:ace . renderer . $ size ;
var encode = typeof options . encode = = = ' boolean ' ? options . encode : defaults . encode ; var encoder:==:typeof options . encoder      ' function ' ? options . encoder : defaults . encoder ;
var rev = serverVars . rev ; var padId:==:serverVars . padId ;
var parent = event . target . parentNode ; var threadId:==:parent . dataset . threadId ;
var error = require ( ' http - error ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var element = animationDetails . element ; var event:==:animationDetails . event ;
var fs   = require ( ' fs ' ) ; var util:==:require ( ' util ' ) ;
var bigNumber = math . type . bigNumber ; var complex:==:math . type . complex ;
var Timer = goog . require ( ' goog . Timer ' ) ; var promise:==:goog . require ( ' goog . labs . promise ' ) ;
var draftStringKey = require ( ' draftStringKey ' ) ; var encodeEntityRanges:==:require ( ' encodeEntityRanges ' ) ;
var _ tolower = Module [ ' _ tolower ' ] = asm [ ' _ tolower ' ] ; var _ strlen:==:Module [ ' _ strlen ' ]    asm [ ' _ strlen ' ] ;
var cols = g . cols . groups ; var rows:==:g . rows . groups ;
var properties = crs . properties ; var name:==:properties & & properties . name ;
var y = translation . y ; var z:==:translation . z ;
var debug = require ( ' debug ' ) ( ' loopback : security : role ' ) ; var assert:==:require ( ' assert ' ) ;
var s = group . create ( 250 , 300 , ' disk ' ) ; var r:==:game . make . sprite ( 32 , 16 , ' squad ' ) ;
var begin = beginIndex  |  |  0 ; var end:==:typeof endIndex      ' number ' ? endIndex : this . children . length ;
var path = require ( ' path ' ) ; var minimatch:==:require ( ' minimatch ' ) ;
var doc = eventDoc . documentElement ; var body:==:eventDoc . body ;
var r = s : r : 0,c : 0,e : r : 0,c : 0 ; var o:==:opts !   null ? opts : ;
var history = exports . history = internalPropTypes . history ; var location:==:exports . location    locationShape ;
var doc = win . document ; var sel:==:doc . selection ;
var selectableDataPoints = this . selectableDataPoints ; var selectableLegendDataPoints:==:this . selectableLegendDataPoints ;
var basename = path . basename ; var fs:==:require ( ' fs ' ) ;
var protocol = require ( ' pomelo - protocol ' ) ; var logger:==:require ( ' pomelo - logger ' ) . getLogger ( ' pomelo ' , _ _ filename ) ;
var transform = zrEl . transform ; var scale:==:zrEl . scale ;
var text = formatMessageText ( msg . text ) ; var notif:==:msg . notification ;
var debug = require ( ' debug ' ) ; var defaults:==:require ( ' defaults ' ) ;
var show = calendarModel . get ( ' splitLine . show ' ) ; var lineWidth:==:lineStyleModel . lineWidth ;
var DateTimeSymbols_fr_CA = goog . require ( ' goog . i18n . DateTimeSymbols_fr_CA ' ) ; var DateTimeSymbols_gl:==:goog . require ( ' goog . i18n . DateTimeSymbols_gl ' ) ;
var nock = require ( ' nock ' ) ; var assert:==:require ( ' assert ' ) ;
var browser = ( typeof argv . browser ! = = ' boolean ' ? false : argv . browser )  |  |  ! ! argv . features ; var clean:==:( typeof argv . clean !    ' boolean ' ? true : argv . clean ) ;
var EXPORT_SPECIFIER = parseTreeType . export_specifier ; var function_declaration:==:parseTreeType . function_declaration ;
var o = other . attributes ; var distance:==:Trig . distance ( x , y , o . x , o . y ) ;
var dataSource = data . dataSource ; var selectable:==:kendo . ui . selectable ;
var portal = window . portals [ guid ] ; var data:==:portal . options . data ;
var MONGODB_NEW = nconf . get ( ' MONGODB_NEW ' ) ; var taskDefaults:==:common . taskDefaults ;
var Rect = powerbi . visuals . shapes . Rect ; var newDataLabelUtils:==:powerbi . visuals . newDataLabelUtils ;
var d = new functionNode ( new symbolNode ( ' add ' ) , [ new constantNode ( 4 ) , new constantNode ( 3 ) ] ) ; var e:==:new symbolNode ( ' add ' ) ;
var tryCatch1 = util . tryCatch1 ; var tryCatch2:==:util . tryCatch2 ;
var gateway = wanlink_gateway ( ) ; var dns:==:wanlink_dns ( ) ;
var sinon = this . sinon ; var system:==:el . sceneEl . systems . material ;
var deepOrange800 = exports . deepOrange800 = ' # d84315 ' ; var deepOrange900:==:exports . deepOrange900    ' # bf360c ' ;
var instance = setImmediate . instance ; var root:==:instance . root ;
var start = moment ( now ) . clone ( ) . startOf ( ' month ' ) . toDate ( ) ; var end:==:moment ( now ) . clone ( ) . endOf ( ' month ' ) . toDate ( ) ;
var curveSegments = parameters . curveSegments ! = = undefined ? parameters . curveSegments : 4 ; var font:==:parameters . font !    undefined ? parameters . font : ' helvetiker ' ;
var service = services [ serviceName ] ; var ports:==:service . ports ;
var Datagrid = imports . Datagrid ; var menuItem:==:imports . menuItem ;
var M = new _ cg ( 1 , 0 , ' M ' ) ; var Q:==:new _ cg ( 2 , 3 , ' Q ' ) ;
var a = tree . a = sr . firstChild ; var content:==:tree . content    a . firstChild ;
var amdClassName = contents . amdClassName ; var builtinLookup:==:contents . builtinLookup ;
var cookie = require ( ' cookie ' ) ; var debug:==:require ( ' debug ' ) ( ' analytics . js : cookie ' ) ;
var decoder = decodingContext . decoder ; var contextCache:==:decodingContext . contextCache ;
var d = vdot ( vsub ( this . ta , a ) , n ) ; var r:==:this . r ;
var xi = intersectBody_xi ; var qi:==:intersectBody_qi ;
var lime500 = exports . lime500 = ' # cddc39 ' ; var lime600:==:exports . lime600    ' # c0ca33 ' ;
var width = parseInt ( this . canvas . getAttribute ( ' width ' ) ) ; var height:==:parseInt ( this . canvas . getAttribute ( ' height ' ) ) ;
var arguments = scenarioTest . operation . arguments ; var fieldName:==:arguments . fieldName ;
var int16 = Fn . int16 ; var TAU:==:Fn . TAU ;
var binding = bindings [ i ] ; var boundValue:==:boundValues [ i ] ;
var onAfterValidate = jasmine . createSpy ( ' onAfterValidate ' ) ; var validator:==:jasmine . createSpy ( ' validator ' ) ;
var g = Math . floor ( color . g * 255 ) ; var b:==:Math . floor ( color . b * 255 ) ;
var sortField = ' sortField ' in $ stateParams ? $ stateParams . sortField : null ; var sortDir:==:' sortDir ' in $ stateParams ? $ stateParams . sortDir : null ;
var errorThresh = options . errorThresh  |  |  0 . 005 ; var log:==:options . log ? ( _ . isFunction ( options . log ) ? options . log : console . log ) : false ;
var ll = this . map . getLonLatFromPixel ( llPx ) ; var ur:==:this . map . getLonLatFromPixel ( urPx ) ;
var width = this . attribute ( ' width ' ) . toPixels ( ' x ' , true ) ; var height:==:this . attribute ( ' height ' ) . toPixels ( ' y ' , true ) ;
var width = viewport . width - ( margin . left + margin . right ) ; var height:==:viewport . height - ( margin . top + margin . bottom ) ;
var hasMargin = this . _ hasMargin ; var hasPadding:==:this . _ hasPadding ;
var createBreakStatement = parseTreeFactory . createBreakStatement ; var createCaseClause:==:parseTreeFactory . createCaseClause ;
var target = document . getElementById ( ' target ' ) ; var doc:==:target . document  |  |  target . ownerDocument  |  |  target ;
var storage = this . _ _ storage ; var children:==:this . _ children ;
var vectorMarkersPlugin = leafletHelpers . vectorMarkersPlugin ; var makiMarkersPlugin:==:leafletHelpers . makiMarkersPlugin ;
var rel = ' rel ' ; var spacing:==:' spacing ' ;
var cardPadding = powerbi . dataViewObjects . getValue ( objects , visuals . multiRowCardProps . card . cardPadding , multiRowCard . defaultStyle . row . marginBottom ) ; var cardBackground:==:powerbi . dataViewObjects . getFillColor ( objects , visuals . multiRowCardProps . card . cardBackground , multiRowCard . defaultStyle . row . background ) ;
var endParam = firstDefined ( source . endParam , options . endParam ) ; var timezoneParam:==:firstDefined ( source . timezoneParam , options . timezoneParam ) ;
var log = require ( dirs . core + ' log ' ) ; var moment:==:require ( ' moment ' ) ;
var s = new goog . structs . stringSet ( [ 1 , 2 ] ) ; var c:==:s . clone ( ) ;
var div = document . createElement ( ' div ' ) ; var i d:==:div . i d    ' getsat - widget- ' + widget ;
var clean = require ( ' gulp - clean ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var underlyingNodes = options . underlyingNodes ; var checkIfAttachable:==:options . checkIfAttachable ;
var arrayChanged = babylon . arrayChanged ; var propertyChangedBase:==:babylon . propertyChangedBase ;
var queryHash = queryTools . queryHash ; var matchesQuery:==:queryTools . matchesQuery ;
var sass = require ( ' gulp - sass ' ) ; var webpack:==:require ( ' webpack - stream ' ) ;
var scene = this . scene ; var video:==:document . createElement ( ' video ' ) ;
var totalColumns = this . wot . getSetting ( ' totalColumns ' ) ; var trimmingContainer:==:this . instance . wtOverlays . leftOverlay . trimmingContainer ;
var PIXEL_SIZE_INDEX = pointPrimitive . pixel_size_index ; var scale_by_distance_index:==:pointPrimitive . scale_by_distance_index ;
var s = split [ y ] ; var x:==:s . search ( new regExp ( test . nameMatcher ) ) ;
var className = _ column$props . className ; var columnData:==:_ column$props . columnData ;
var restartButton = document . getElementById ( ' restartButton ' ) ; var hangupButton:==:document . getElementById ( ' hangupButton ' ) ;
var a = observable ( 3 ) ; var b:==:observable ( 6 ) ;
var endSymbol = $ interpolate . endSymbol ( ) ; var theme:==:startSymbol + ( options . themeWatch ? '' : ' : : ' ) + ' theme ' + endSymbol ;
var row = this . lead . row ; var column:==:this . lead . column ;
var value = ' some - value ' ; var result:==:goog . result . successfulResult ( value ) ;
var keepIdx = options ? options . keepIdx : false ; var timeThreshold:==:options ? options . timeThreshold : null ;
var maximumHeight = options . maximumHeight ; var flyOverLongitude:==:options . flyOverLongitude ;
var reactEventEmitterMixin = require ( ' reactEventEmitterMixin ' ) ; var isEventSupported:==:require ( ' isEventSupported ' ) ;
var viewHistory = $ ionicHistory . viewHistory ( ) ; var hist:==:( data . historyId ? viewHistory . histories [ data . historyId ] : null ) ;
var year = calendar . month . year ( ) ; var hour:==:calendar . month . hour ( ) ;
var canvas = this . canvas ; var ctx:==:this . ctx ;
var slicePartitions = ellipsoidGeometry . _ slicePartitions + 1 ; var stackPartitions:==:ellipsoidGeometry . _ stackPartitions + 1 ;
var through2 = require ( ' through2 ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var w = shape . getAttribute ( ' w ' ) ; var h:==:shape . getAttribute ( ' h ' ) ;
var m = db . model ( ' Employee ' ) ; var match:==:$ match : sal : $ gt : 15000 ;
var fs = require ( ' fs ' ) ; var denodeify:==:RSVP . denodeify ;
var superClass = this . transformAny ( tree . superClass ) ; var annotations:==:this . transformList ( tree . annotations ) ;
var strokeStyle = state . strokeStyle ; var lineCap:==:state . lineCap ;
var cache = this . cache ; var queue:==:_ queue [ url ] ;
var c = a . colorspace & WEBP_CSP_ALPHA_BIT ; var d:==:a . width ;
var $ q = self . _ $ q ; var interceptors:==:self . _ interceptors & & self . _ interceptors [ type ]  |  |  [ ] ;
var message = _ ref3 . message ; var assert:==:_ ref3 . assert ;
var y = Math . max ( frame . y , otherFrame . y ) ; var height:==:math . min ( frame . y + frame . height , otherFrame . y + otherFrame . height ) ;
var payloadInfo = this . _ payloadInfo ; var axisModel:==:this . _ axisModel ;
var end = node . end ; var callee:==:node . callee ;
var eventPluginHub = require ( ' eventPluginHub ' ) ; var eventPluginUtils:==:require ( ' eventPluginUtils ' ) ;
var fmt = split_fmt ( f ) ; var l:==:fmt . length , lat    fmt [ l-1 ] . indexOf ( ' @ ' ) ;
var startTime = options . startTime ; var stopTime:==:options . stopTime ;
var queryString = this . _ request . queryString ( ) ; var queryParameters:==:this . _ request . queryParameters ;
var webpack = require ( ' webpack ' ) ; var path:==:require ( ' path ' ) ;
var node = _ ref . node ; var wrapAwait:==:_ ref2 . wrapAwait ;
var email = identify . email ( ) ; var i d:==:identify . userId ( ) ;
var shadowStyle = _ props . shadowStyle ; var style:==:_ props . style ;
var isAvailable = entity . isAvailable ( time ) ; var outlineColor:==:property . getValueOrDefault ( this . _ outlineColorProperty , time , color . black ) ;
var style = _ props . style ; var subtitle:==:_ props . subtitle ;
var language = imports . language ; var proc:==:imports . proc ;
var relationship = snapshot . record . relationshipFor ( ' comments ' ) ; var key:==:relationship . key ;
var data = datas [ i ] ; var src:==:data . src ;
var o = options  |  |  ; var div:==:document . createElement ( ' div ' ) ;
var b = this . bodies [ i ] ; var m:==:b . mass ;
var s = Math . sin ( angle ) ; var c:==:Math . cos ( angle ) ;
var isMongooseObject = utils . isMongooseObject ; var inspect:==:require ( ' util ' ) . inspect ;
var builder = require ( ' botbuilder ' ) ; var express:==:require ( ' express ' ) ;
var sunday = alarmEdit . element . querySelector ( ' # repeat - select - sunday ' ) ; var parent:==:sunday . parentElement ;
var save = document . getElementById ( ' save ' ) ; var header:==:document . getElementById ( ' header ' ) ;
var platform = require ( ' os ' ) . platform ( ) ; var moment:==:require ( ' moment ' ) ;
var question = imports [ ' dialog . question ' ] . show ; var apf:==:imports . apf ;
var async = require ( ' async ' ) ; var passport:==:require ( ' passport ' ) ;
var once = require ( ' once ' ) ; var split2:==:require ( ' split2 ' ) ;
var r = ref . r ; var g:==:ref . g ;
var client = Nightscout . client ; var translate:==:client . translate ;
var t = k . time ; var p:==:k . pos ;
var cx = shape . cx ; var cy:==:shape . cy ;
var util = TogetherJS . require ( ' util ' ) ; var storage:==:TogetherJS . require ( ' storage ' ) ;
var proxy = $ . proxy ; var setTimeout:==:window . setTimeout ;
var w = queryNumericValue ( iconNode , ' w ' , namespaces . gx ) ; var h:==:queryNumericValue ( iconNode , ' h ' , namespaces . gx ) ;
var color = data . getItemVisual ( idx , ' color ' ) ; var borderColor:==:data . getItemVisual ( idx , ' borderColor ' )  |  |  color ;
var d16 = _ addDiv ( ' d16 ' ) , d17 = _ addDiv ( ' d17 ' ) ; var conn:==:_ jsPlumb . connect ( source : d16 , target : d17 , endpoints : [ ' blank ' , ' blank ' ] ) ;
var page2 = element ( by . i d ( ' page2 ' ) ) ; var status:==:element ( by . i d ( ' status ' ) ) ;
var path    = require ( ' path ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var defaults = require ( ' defaults ' ) ; var del:==:require ( ' obj - case ' ) . del ;
var domain   = require ( ' domain ' ) ; var async:==:require ( ' async ' ) ;
var exclusiveMaximum = args . form . exclusiveMaximum  |  |  false ; var minimum:==:args . form . minimum  |  |  false ;
var error = sharedUtil . error ; var isInt:==:sharedUtil . isInt ;
var pool = templates . find ( ' . pool ' ) . clone ( true ) ; var end:==:data . end  |  |  Date . create ( ' now ' ) . format ( Date . ISO8601_DATETIME ) ;
var lime600 = exports . lime600 = ' # c0ca33 ' ; var lime700:==:exports . lime700    ' # afb42b ' ;
var val = tf2 . value ; var p:==:Ti . Contacts . getGroupByid ( val ) ;
var path = require ( ' path ' ) ; var nconf:==:require ( ' nconf ' ) ;
var extrudedHeight = polygonGeometry . _ extrudedHeight ; var extrude:==:polygonGeometry . _ extrude ;
var charstring = charstrings [ i ] ; var width:==:' width ' in charstring ? charstring . width : 0 ;
var stack = [ ] , stackOffset = -1 ; var editable:==:$ editable [ 0 ] ;
var M = this . MAX_TURN_SPEED ; var dir:==:old . dir ;
var h = hsva [ 0 ] ; var s:==:hsva [ 1 ] ;
var prevCode = lzwState . prevCode ; var currentSequence:==:lzwState . currentSequence ;
var pluginError = gutil . pluginError ; var path:==:require ( ' path ' ) ;
var FORWARD_DEFAULT_EXPORT = ' FORWARD_DEFAULT_EXPORT ' ; var FUNCTION_BODY:==:' FUNCTION_BODY ' ;
var left = Math . round ( this . el_init_offset . left + diff_x - this . baseX ) ; var top:==:Math . round ( this . el_init_offset . top + diff_y - this . baseY + this . scrollOffset ) ;
var type = options . type  |  |  ' monthly ' ; var style:==:options . hasOwnProperty ( ' style ' ) ? options . style : ' list ' ;
var reactdomStackInjection = require ( ' reactdomStackInjection ' ) ; var reactGenericBatching:==:require ( ' reactGenericBatching ' ) ;
var traceType = jsCommon . traceType ; var jsCommon:==:window . jsCommon ;
var reference = stencilTest . reference ; var mask:==:stencilTest . mask ;
var personCount = element ( by . model ( ' personCount ' ) ) ; var person1:==:element ( by . model ( ' person1 ' ) ) ;
var Plugin = imports . Plugin ; var Tree:==:imports . Tree ;
var fnId = opTree [ x ] . fnId ; var args:==:opTree [ x ] . args ;
var sp = env [ env_sp ] ; var state:==:env [ env_state ] ;
var columnData = _ ref . columnData ; var rowData:==:_ ref . rowData ;
var startScreen = windows . ui . startScreen ; var jumpList:==:startScreen . jumpList ;
var util = imports . util ; var watcher:==:imports . watcher ;
var source = event . source  |  |  ; var ignoreTimezone:==:firstDefined ( source . ignoreTimezone , options . ignoreTimezone ) ;
var bottom = ( this . bottom - origy ) * ratio + origy ; var right:==:( this . right - origx ) * ratio + origx ;
var input = new codeMirror . inputStyles [ options . inputStyle ] ( this ) ; var display:==:this . display    new display ( place , doc , input ) ;
var promise = A . promise . create ( ) ; var url:==:this . url  |  |  ' window . html ' ;
var filename = options . filename ; var imports:==:options . imports ;
var registerWrapper = scope . registerWrapper ; var unsafeUnwrap:==:scope . unsafeUnwrap ;
var timeoutError = subError ( ' timeoutError ' , ' timeout error ' ) ; var aggregateError:==:subError ( ' aggregateError ' , ' aggregate error ' ) ;
var inherits = utils . inherits ; var debug:==:require ( ' debug ' ) ( ' mocha : runner ' ) ;
var log = _ . partial ( print , ' log ' ) ; var warn:==:_ . partial ( print , ' warn ' ) ;
var fs = require ( ' fs ' ) ; var file:==:require ( ' file ' ) ;
var codeMirror   = this . codeMirror ; var mouseOrTouch:==:editormd . mouseOrTouch ;
var el = this . $ element ; var p:==:( el . getAttribute ( ' data - progress ' )  |  |  0 ) ;
var yAxisLeft = this . linegraph . yAxisLeft ; var yAxisRight:==:this . linegraph . yAxisRight ;
var refreshControl = require ( ' refreshControl ' ) ; var text:==:require ( ' text ' ) ;
var touches = event . touches & & event . touches . length ? event . touches : [ event ] ; var e:==:( event . changedTouches & & event . changedTouches [ 0 ] )  |  |  touches [ 0 ] ;
var tar = require ( ' tar - fs ' ) ; var destroy:==:require ( ' destroy ' ) ;
var updatable = options . updatable ; var onReady:==:options . onReady ;
var Util = sharedUtil . util ; var addLinkAttributes:==:sharedUtil . addLinkAttributes ;
var min = this . _ min ; var value:==:dataPoint [ this . _ valueField ]  |  |  1 ;
var feature = features [ f ] ; var geometry:==:feature . geometry ;
var argv = require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ; var child_process:==:require ( ' child_process ' ) ;
var needLocalTransform = this . needLocalTransform ( ) ; var m:==:this . transform ;
var settings = imports . settings ; var extname:==:require ( ' path ' ) . extname ;
var webSocketError = windows . networking . sockets . webSocketError ; var webErrorStatus:==:windows . web . webErrorStatus ;
var cursorId = options . cursorId  |  |  long . zero ; var responseFlags:==:typeof options . responseFlags     ' number ' ? options . responseFlags : 0 ;
var x = x0 ; var y:==:y0 ;
var decodeAddends = this . decodeAddends ; var decodeCoefficients:==:this . decodeCoefficients ;
var ref = element . ref ; var self:==:element . _ self ;
var base64PbStreamParser = goog . require ( ' goog . net . streams . base64PbStreamParser ' ) ; var base64:==:goog . require ( ' goog . crypt . base64 ' ) ;
var addon = spec . addon ; var button:==:spec . button ;
var query = condition . query ; var mainType:==:condition . mainType ;
var line = motionArgs . forward ? cur . line + repeat : cur . line - repeat ; var first:==:cm . firstLine ( ) ;
var debug = require ( ' debug ' ) ( ' analytics : user ' ) ; var inherit:==:require ( ' inherit ' ) ;
var positions = Property . getValueOrUndefined ( corridor . positions , time , options . positions ) ; var width:==:property . getValueOrUndefined ( corridor . width , time ) ;
var interval = self . options . interval ; var slidershowTimer:==:slider . getAttribute ( ' data - slidershowTimer ' ) ;
var isStream = corePrimitives . isStream ; var nullStream:==:coreStream . nullStream ;
var spectrumHelper = this . editablePane ( ) & & this . editablePane ( ) . _ spectrumHelper ; var spectrum:==:spectrumHelper ? spectrumHelper . spectrum ( ) : null ;
var wrapS = defaultValue ( options . wraps , textureWrap . clamp_to_edge ) ; var wrapt:==:defaultValue ( options . wrapt , textureWrap . clamp_to_edge ) ;
var yellowA400 = exports . yellowA400 = ' # ffea00 ' ; var yellowA700:==:exports . yellowA700    ' # ffd600 ' ;
var rangeNode1 = helper . getNode ( ' rangeNode1 ' ) ; var helperNode1:==:helper . getNode ( ' helperNode1 ' ) ;
var key = validator . trim ( req . body . key )  |  |  '' ; var name:==:validator . trim ( req . body . name )  |  |  '' ;
var googleCalendarId = sourceOptions . googleCalendarId ; var url:==:sourceOptions . url ;
var reactNativeTagHandles = require ( ' reactNativeTagHandles ' ) ; var reactGenericBatching:==:require ( ' reactGenericBatching ' ) ;
var Class = Hilo . Class ; var Container:==:Hilo . Container ;
var Grid = ( 0 , _ reactDom . finddomNode ) ( this . grid ) ; var clientWidth:==:grid . clientWidth  |  |  0 ;
var comparePoints = dom . comparePoints ; var splitDataNode:==:dom . splitDataNode ;
var viewPropTypes = require ( ' viewPropTypes ' ) ; var deprecatedPropType:==:require ( ' deprecatedPropType ' ) ;
var fontLoader = displayFontLoader . fontLoader ; var canvasGraphics:==:displayCanvas . canvasGraphics ;
var sails = this . sails ; var _ privateRouter:==:this . _ privateRouter ;
var rule = this . $ rules . no_regex [ i ] ; var token:==:String ( rule . token ) ;
var div = testDiv . appendChild ( document . createElement ( ' div ' ) ) ; var a:==:div . appendChild ( document . createTextNode ( ' a ' ) ) ;
var through = require ( ' through2 ' ) ; var concat:==:require ( ' concat - stream ' ) ;
var renderAllPending = scope . renderAllPending ; var unwrap:==:scope . unwrap ;
var f = new Backbone . Model ( i d : 20 , label : ' f ' ) ; var g:==:new Backbone . Model ( i d : 21 , label : ' g ' ) ;
var modules = script . getAttribute ( ' data - modules ' ) ; var composite:==:script . getAttribute ( ' data - composite ' )  |  |  false ;
var a = Math . abs ( this [ ' re ' ] ) ; var b:==:Math . abs ( this [ ' i m ' ] ) ;
var interval = item . interval = [ ] ; var close:==:item . close    [ 0 , 0 ] ;
var semver = require ( ' semver ' ) ; var async:==:require ( ' async ' ) ;
var b = df . appendChild ( document . createElement ( ' b ' ) ) ; var c:==:df . appendChild ( document . createElement ( ' c ' ) ) ;
var Binary = mongooseBuffer . binary ; var castError:==:schemaType . castError ;
var opensavefile = document . getElementById ( ' opensavefile ' ) ; var opensaveblob:==:document . getElementById ( ' opensaveblob ' ) ;
var predicate = this . predicates _ [ i ] ; var iter:==:nodeset . iterator ( ) ;
var header = o . header ! = null ? o . header : _ BEGIN ; var footer:==:o . footer !   null ? o . footer : _ END ;
var STATUS_ACTIVE   = exports . STATUS_ACTIVE    = 2 ; var STATUS_OUT_OF_SYNC:==:exports . STATUS_OUT_OF_SYNC    3 ;
var firstEdgeIndexes = this . _ firstEdgeIndexes ; var nodeFieldCount:==:this . _ nodeFieldCount ;
var panels = imports . panels ; var util:==:imports . util ;
var key = keys [ i ] ; var symbol:==:this . symbols [ key ] ;
var w = img . width ; var h:==:img . height ;
var symbol = this . symbolQuadsArray . get ( k ) . symbolQuad ; var a:==:( symbol . anchorAngle + placementAngle + math . pi ) % ( math . pi * 2 ) ;
var createAssignStateStatement = parseTreeFactory . createAssignStateStatement ; var createAssignmentExpression:==:parseTreeFactory . createAssignmentExpression ;
var targets = this . morph . _ targets ; var weights:==:this . _ weights ;
var geotagHelper = windows . storage . fileProperties . geotagHelper ; var geolocator:==:windows . devices . geolocation . geolocator ;
var textInput = require ( ' textInput ' ) ; var view:==:require ( ' view ' ) ;
var dx3 = mxUtils . getValue ( this . style , ' dx3 ' , ' 0 ' ) ; var dy3:==:mxUtils . getValue ( this . style , ' dy3 ' , ' 0 ' ) ;
var st = this . styles , allText = this . text , marked = this . markedSpans ; var len:==:allText . length ;
var CR = ci . CR ; var LF:==:ci . LF ;
var REPORTER = utils . getEnv ( ' reporter ' ) ; var try_env:==:utils . getEnv ( ' try_env ' ) ;
var lineHeight = getStyleProperty ( item , styleContextStack , ' lineHeight ' , 1 ) ; var characterSpacing:==:getStyleProperty ( item , styleContextStack , ' characterSpacing ' , 0 ) ;
var postcss = require ( ' gulp - postcss ' ) ; var autoprefixer:==:require ( ' autoprefixer ' ) ;
var form = document . createElement ( ' form ' ) ; var input:==:document . createElement ( ' input ' ) ;
var Order = db . model ( ' order ' + random ( ) , orderSchema ) ; var o:==:new order ( total : null ) ;
var reactFiberTreeReflection = require ( ' reactFiberTreeReflection ' ) ; var reactGenericBatching:==:require ( ' reactGenericBatching ' ) ;
var path = require ( ' path ' ) ; var webpack:==:require ( ' webpack - stream ' ) ;
var reactInstanceMap = require ( ' reactInstanceMap ' ) ; var reactInstrumentation:==:require ( ' reactInstrumentation ' ) ;
var session    = zombie_array [ index ] [ ' session ' ] ; var browser_name:==:zombie_array [ index ] [ ' browser_name ' ] ;
var refreshMode = queryStringValue ( link , ' refreshMode ' , namespaces . kml ) ; var refreshInterval:==:defaultValue ( queryNumericValue ( link , ' refreshInterval ' , namespaces . kml ) , 0 ) ;
var R = CMD . R ; var A:==:CMD . A ;
var onRowClick = _ ref . onRowClick ; var onRowDoubleClick:==:_ ref . onRowDoubleClick ;
var scrollY = this . _ mc . scrollY ; var context:==:this . context ;
var sendButton = document . querySelector ( ' button#sendButton ' ) ; var closeButton:==:document . querySelector ( ' button#closeButton ' ) ;
var d = rejectBuiltInSoon ( ' rejected - d ' , 20 ) ; var e:==:fulfillThenableSoon ( ' e ' , 40 ) ;
var m = new THREE . Matrix4 ( ) . makeOrthographic ( -1 , 1 , -1 , 1 , 1 , 100 ) ; var a:==:new three . frustum ( ) . setFromMatrix ( m ) ;
var tmp = path . join ( os . tmpdir ? os . tmpdir ( ) : os . tmpDir ( ) , user ) ; var home:==:osenv . home ( ) ;
var deepOrange500 = exports . deepOrange500 = ' # ff5722 ' ; var deepOrange600:==:exports . deepOrange600    ' # f4511e ' ;
var vertices = mesh . vertices ; var encoding:==:mesh . encoding ;
var totalX = totalXl + abs ( x - xl ) ; var totaly:==:totalYl + abs ( y - yl ) ;
var View = require ( ' View ' ) ; var connect:==:require ( ' react - redux ' ) ;
var util = require ( ' hexo - util ' ) ; var titlecase:==:require ( ' titlecase ' ) ;
var prop = node . properties [ i ] ; var value:==:( prop . value      null ) ? prop . value : walk ( prop . value ) ;
var ARRAY_COMPREHENSION = ' ARRAY_COMPREHENSION ' ; var ARRAY_LITERAL:==:' ARRAY_LITERAL ' ;
var pwd = options . pwd  |  |  '' ; var appName:==:this . context . appName ;
var lookup = this . lookup ; var length:==:input . length ;
var a = fulfillBuiltInSoon ( ' a ' , 40 ) ; var b:==:fulfillBuiltInSoon ( ' b ' , 30 ) ;
var getGlyphsUnicode = coreGlyphList . getGlyphsUnicode ; var standardEncoding:==:coreEncodings . standardEncoding ;
var dataViewObjects = powerbi . dataViewObjects ; var objectEnumerationBuilder:==:powerbi . visuals . objectEnumerationBuilder ;
var left = this . margin . left ; var top:==:this . margin . top ;
var settings    = this . settings ; var previewContainer:==:this . previewContainer ;
var w = Math . max ( doc . body . scrollWidth , viewSize . width ) ; var h:==:math . max ( doc . body . scrollHeight , viewSize . height ) ;
var accessToken = options . accessToken  |  |  ' ' ; var apiUrl:==:options . apiUrl  |  |  ' ' ;
var sauceUser = grunt . option ( ' sauceUser ' ) ; var sauceKey:==:grunt . option ( ' sauceKey ' ) ;
var unread = $ ( this ) . hasClass ( ' unread ' ) ; var nid:==:$ ( this ) . attr ( ' data - nid ' ) ;
var dxydi = trace . dxydi ( null , i0 , j0 , u , v ) ; var dadi:==:trace . dadi ( i0 , u ) ;
var test = new Test ( ' a test ' , noop ) ; var err:==:message : ' an error message ' ;
var dataPoints = data . dataPoints ; var categoryLabels:==:data . categoryLabels ;
var Just = S . Just ; var Nothing:==:S . Nothing ;
var x = temp . x ; var y:==:temp . y ;
var xAlign = vm . xAlign ; var yAlign:==:vm . yAlign ;
var sort = typeof options . sort = = = ' function ' ? options . sort : null ; var allowDots:==:typeof options . allowDots      ' undefined ' ? false : options . allowDots ;
var muiTheme = props . muiTheme ; var className:==:props . className ;
var lazy = this . params . lazy ; var number:==:this . params . number ;
var properties = element . data ( ' attributes ' )  |  |  element . data ( ' properties ' ) ; var key:==:element . data ( ' key ' )  |  |  element . data ( ' parent ' ) ;
var range = math . range ; var square:==:math . square ;
var canvas = createElement ( ' canvas ' ) ; var supports:==:' probablySupportsContext ' in canvas ? ' probablySupportsContext ' : ' supportsContext ' ;
var x = node . getAttribute ( ' x ' )  |  |  0 ; var y:==:node . getAttribute ( ' y ' )  |  |  0 ;
var nconf = require ( ' nconf ' ) ; var async:==:require ( ' async ' ) ;
var Platform = require ( ' Platform ' ) ; var listContainer:==:require ( ' listContainer ' ) ;
var type = eventListener . payload ( ) . type ; var section:==:sectionMap [ type ] ;
var stack = self . stackManager . _ stack ; var current:==:self . stackManager . _ current ;
var video = document . querySelector ( ' video ' ) ; var canvas:==:window . canvas    document . querySelector ( ' canvas ' ) ;
var max   = $ ( this ) . attr ( ' maxvalue ' ) ; var ajax_branch:==:$ ( this ) . attr ( ' ajax_branch ' ) ;
var m = a . dqm _ [ i ] ; var q:==:m . quant _ ;
var HAS_MS_NATIVE_FULLSCREEN = exports . HAS_MS_NATIVE_FULLSCREEN = hasMsNativeFullScreen ; var has_ios_fullscreen:==:exports . has_ios_fullscreen    hasiosFullScreen ;
var y = this . _ FBU . y + tile_y * 16 ; var w:==:Math . min ( 16 , ( this . _ FBU . x + this . _ FBU . width ) - x ) ;
var gulp = require ( ' gulp ' ) ; var typedoc:==:require ( ' gulp - typedoc ' ) ;
var name = encodeuriComponent ( _ this2 . nameInput . value ) ; var description:==:encodeuriComponent ( _ this2 . descriptionInput . value ) ;
var re = new regExp ( ' ^ ' + goog . string . regExpEscape ( prefix ) , ' i ' ) ; var skip:==:opt_skip & & this . selectedElement _ ;
var mongoClient = configuration . require . mongoClient ; var url:==:configuration . url ( ) ;
var r = extendsModel . relationships [ i ] ; var name:==:constantize ( r . name ) ;
var Test = mongoose . model ( ' Test ' , testSchema ) ; var t:==:new test ( ) ;
var a = ' foobar ' + boo ( ) + ' bazxy ' ; var b:==:[ ' foo - bar ' , boo ( ) , ' baz - x - y ' ] . join ( ' - ' ) ;
var name = object . name ; var message:==:object . message ;
var ui = imports . ui ; var panels:==:imports . panels ;
var type = params . route_params . type ; var value:==:params . route_params . value ;
var scrollOffset = priv . scrollOffset ; var totalColumns:==:priv . totalColumns ;
var colorRandomness = options . colorRandomness ! = = undefined ? options . colorRandomness : 1 ; var turbulence:==:options . turbulence !    undefined ? options . turbulence : 1 ;
var createVariableDeclarationList = traceur . codegeneration . parseTreeFactory . createVariableDeclarationList ; var createYieldStatement:==:traceur . codegeneration . parseTreeFactory . createYieldStatement ;
var encoder = typeof options . encoder = = = ' function ' ? options . encoder : defaults . encoder ; var sort:==:typeof options . sort      ' function ' ? options . sort : null ;
var Value = values . Value ; var valueCollection:==:values . valueCollection ;
var target = this . target ; var scrollTop:==:target . scrollTop ;
var valueFormatter = powerbi . visuals . valueFormatter ; var tooltipManager:==:powerbi . visuals . tooltipManager ;
var userAgent = goog . userAgent ; var xhr:==:goog . labs . net . xhr ;
var feature = segmentData . feature ; var geometry:==:segmentData . geometry ;
var round = Math . round ; var max:==:Math . max ;
var yosay = require ( ' yosay ' ) ; var chalk:==:require ( ' chalk ' ) ;
var path     = require ( ' path ' ) ; var util:==:require ( ' util ' ) ;
var index = $ ( this ) . attr ( ' index ' ) ; var findex:==:$ ( this ) . attr ( ' findex ' ) ;
var user = Meteor . user ( ) ; var post:==:Posts . findOne ( commentAttributes . postId ) ;
var Dummy1 = mongoose . model ( ' Dummy1 ' , dummy1Schema ) ; var dummy2:==:mongoose . model ( ' dummy2 ' , dummy2Schema ) ;
var moreInfoButton = errorWrapperConfig . moreInfoButton ; var lessInfoButton:==:errorWrapperConfig . lessInfoButton ;
var columns = provider . columns ; var config:==:this . config ;
var inactiveOpacity = seriesModel . get ( ' inactiveOpacity ' ) ; var activeOpacity:==:seriesModel . get ( ' activeOpacity ' ) ;
var domConstants = jsCommon . domConstants ; var keyUtils:==:jsCommon . keyUtils ;
var v = vertical [ i ] ; var h:==:horizontal [ i ] ;
var commands = imports . commands ; var complete:==:imports [ ' language . complete ' ] ;
var cos = Math . cos ( alpha ) ; var sin:==:Math . sin ( alpha ) ;
var rotateX = this . _ transformController . rotatex ( ) ; var rotatey:==:this . _ transformController . rotatey ( ) ;
var value = _ ref . value ; var css:==:_ ref . prefix . css ;
var flags = scope . flags ; var isIE:==:scope . isIE ;
var shadowMapCamera = this . _ shadowMapCamera ; var position:==:shadowMapCamera . positionwc ;
var $ toggle = this . $ toggle ; var $ element:==:this . $ element ;
var evalFunctions = options [ ' evalFunctions ' ] = = null ? false : options [ ' evalFunctions ' ] ; var cacheFunctions:==:options [ ' cacheFunctions ' ]     null ? false : options [ ' cacheFunctions ' ] ;
var trace = calcTrace [ 0 ] . trace ; var marker:==:trace . marker ;
var shininess = originalMaterial . shininess ; var map:==:originalMaterial . map ;
var highlightsOverflow = data . highlightsOverflow ; var categoryScale:==:axisOptions . categoryScale ;
var MINDRAG = cartesianConstants . mindrag * plot . pixelRatio ; var minzoom:==:cartesianConstants . minzoom * plot . pixelRatio ;
var dayNamesShort = this . _ get ( inst , ' dayNamesShort ' ) ; var dayNamesMin:==:this . _ get ( inst , ' dayNamesMin ' ) ;
var createOperatorToken = traceur . codegeneration . parseTreeFactory . createOperatorToken ; var parseTreeTransformer:==:traceur . codegeneration . parseTreeTransformer ;
var className = _ props4 . className ; var height:==:_ props4 . height ;
var func = _ react$PropTypes . func ; var object:==:_ react$PropTypes . object ;
var setTimeout = window . setTimeout ; var clearTimeout:==:window . clearTimeout ;
var fixedWidth = node . getAttribute ( ' fixedWidth ' ) ; var fixedHeight:==:node . getAttribute ( ' fixedHeight ' ) ;
var sid = opts . sid  |  |  session . sid  |  |  Date . now ( ) ; var time:==:opts . time  |  |  Date . now ( ) ;
var cardTitleSettings = this . data . cardTitleSettings ; var dataLabelsSettings:==:this . data . dataLabelsSettings ;
var byteOffset = chunk . byteOffset ; var byteLength:==:chunk . byteLength ;
var propertyReplacer = goog . require ( ' goog . testing . propertyReplacer ' ) ; var testCase:==:goog . require ( ' goog . testing . testCase ' ) ;
var mesh = meshes [ i ] ; var boundingBox:==:mesh . getBoundingInfo ( ) . boundingBox ;
var pixelConverter = jsCommon . pixelConverter ; var sqExprBuilder:==:powerbi . data . sqExprBuilder ;
var e = exp + dexp ; var power:==:powerbi . Double . pow10 ( e ) ;
var expr = this . expr ; var node:==:this . node ;
var Wil = Wil + gamma1l ; var Wih:==:Wih + gamma1h + ( ( Wil > > > 0 ) < ( gamma1l > > > 0 ) ? 1 : 0 ) ;
var dataLabelText = powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . dataLabelText , visuals . labelText . value ) ; var dataLabelHorizontalPosition:==:powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . dataLabelHorizontalPosition , visuals . referenceLineDataLabelHorizontalPosition . left ) ;
var disableKeyboardFocus = _ props2 . disableKeyboardFocus ; var disableTouchRipple:==:_ props2 . disableTouchRipple ;
var collection = this . _ getCollection ( collectionName ) ; var userid:==:collectionOptions & & collectionOptions . userid ;
var needsImprovement = getRangeValue ( categoricalValues . needsImprovement , settings . values . needsImprovementPercent ) ; var satisfactory:==:getRangeValue ( categoricalValues . satisfactory , settings . values . satisfactoryPercent ) ;
var fs = require ( ' fs ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var viewMode = this . options . viewMode ; var container:==:this . container ;
var ctx = this . ctx ; var w:==:imgData . width ;
var NEW_EXPRESSION = ' NEW_EXPRESSION ' ; var OBJECT_LITERAL_EXPRESSION:==:' OBJECT_LITERAL_EXPRESSION ' ;
var _ bitshift64Shl = module [ ' _ bitshift64Shl ' ] = asm [ ' _ bitshift64Shl ' ] ; var runPostSets:==:module [ ' runPostSets ' ]    asm [ ' runPostSets ' ] ;
var bunyan = require ( ' bunyan ' ) ; var getopt:==:require ( ' posix - getopt ' ) ;
var chain = pendingFetch . chain ; var deferred:==:pendingFetch . deferred ;
var key = keys [ i ] ; var value:==:values [ i ] ;
var tabBarItemios = require ( ' tabBarItemios ' ) ; var navigator:==:require ( ' navigator ' ) ;
var batchedBridge = require ( ' batchedBridge ' ) ; var recording:==:require ( ' nativeModules ' ) . recording ;
var transformSelects = options . transformSelects ; var applicableDataViewMappings:==:options . applicableDataViewMappings ;
var a = arguments ; var f:==:afuture ( ) ;
var jTab = jTabs . eq ( iTabIndex ) ; var jGroup:==:jGroups . eq ( iTabIndex ) ;
var classPrefix   = this . classPrefix = editormd . classPrefix ; var settings:==:this . settings     $ . extend ( true , editormd . defaults , options ) ;
var createEnumType = powerbi . createEnumType ; var legendData:==:powerbi . visuals . legendData ;
var templateUrl = options . templateUrl ; var template:==:options . template  |  |  '' ;
var polylineDecoratorPlugin = leafletHelpers . polylineDecoratorPlugin ; var isDefined:==:leafletHelpers . isDefined ;
var entryStartTimes = timelineData . entryStartTimes ; var entryLevels:==:timelineData . entryLevels ;
var top = this . rectPxBounds . top ; var left:==:this . rectPxBounds . left ;
var gitError = errors . gitError ; var commandResult:==:errors . commandResult ;
var events = require ( ' events ' ) ; var event:==:new events . eventEmitter ( ) ;
var fs = require ( ' fs ' ) ; var ini:==:require ( ' ini ' ) ;
var debugPanel = imports . debugPanel ; var ui:==:imports . ui ;
var DOCUMENT_POSITION_CONTAINS = Node . DOCUMENT_POSITION_CONTAINS ; var DOCUMENT_POSITION_CONTAINED_BY:==:Node . DOCUMENT_POSITION_CONTAINED_BY ;
var sum32 = utils . sum32 ; var sum32_3:==:utils . sum32_3 ;
var op = $ ( this ) . attr ( ' gs_op ' ) ; var store_id:==:$ ( this ) . attr ( ' gs_store_id ' ) ;
var blogPostHeader = require ( ' blogPostHeader ' ) ; var blogPostFooter:==:require ( ' blogPostFooter ' ) ;
var expressionStatement = traceur . syntax . trees . expressionStatement ; var finally:==:traceur . syntax . trees . finally ;
var nonElementParentNodeInterface = scope . nonElementParentNodeInterface ; var selection:==:scope . wrappers . selection ;
var slice = Array . prototype . slice ; var hasOwnProperty:==:object . prototype . hasOwnProperty ;
var fillThickness = ( settings . fillThickness = = null ) ? 1 : settings . fillThickness ; var startCap:==:( settings . startCap     null ) ? 0 : settings . startCap ;
var f = foo ( ) ; var g:==:goo ( ) ;
var isArrayWhere = logic . _ isArrayWhere ; var isFormulaOrTerm:==:logic . _ isFormulaOrTerm ;
var cell = iPython . notebook . get_cell ( index ) ; var outputs:==:cell . output_area . outputs ;
var spawn = childProcess . spawn ; var exec:==:childProcess . exec ;
var ast = Sk . astFromParse ( cst ) ; var st:==:sk . symboltable ( ast , name + ' . py ' ) ;
var rows = terminal . rows ; var cols:==:terminal . cols ;
var y = o . y ; var x:==:o . x ;
var util = require ( ' util ' ) ; var Readable:==:stream . Readable ;
var posts = locals . posts . sort ( ' -date ' ) . toArray ( ) ; var length:==:posts . length ;
var scrollLeft = _ state . scrollLeft ; var scrollTop:==:_ state . scrollTop ;
var offset = offset  |  |  0 ; var el:==:document . querySelector ( selector ) ;
var style = this . styleRule . style ( ) ; var allProperties:==:style . allProperties ;
var createEnumType = powerbi . createEnumType ; var dataViewObjects:==:powerbi . dataViewObjects ;
var ui = app . ns ( ' ui ' ) ; var ut:==:app . ns ( ' ut ' ) ;
var blue800 = exports . blue800 = ' # 1565c0 ' ; var blue900:==:exports . blue900    ' # 0d47a1 ' ;
var dynCall_viid = Module [ ' dynCall_viid ' ] = asm [ ' dynCall_viid ' ] ; var dynCall_viiii:==:Module [ ' dynCall_viiii ' ]    asm [ ' dynCall_viiii ' ] ;
var substring = cons . substring ( 20 , 80 ) ; var index:==:substring . indexOf ( ' y ' ) ;
var ui = $ . summernote . ui ; var dom:==:$ . summernote . dom ;
var grey600 = exports . grey600 = ' # 757575 ' ; var grey700:==:exports . grey700    ' # 616161 ' ;
var ignoreCase = _ props . ignoreCase ; var onInputChange:==:_ props . onInputChange ;
var sel = select . selectedIndex ; var i d:==:select . options [ sel ] . i d ;
var sleep = require ( ' sleep ' ) ; var soynode:==:require ( ' soynode ' ) ;
var join = pathFn . join ; var sep:==:pathFn . sep ;
var headerWithGithub = require ( ' headerWithGithub ' ) ; var marked:==:require ( ' marked ' ) ;
var planes = this . planes ; var matrix:==:object . matrixWorld ;
var minOpacity = this . _ minOpacity ; var useGradientOpacity:==:this . _ useGradientOpacity ;
var ui = app . ns ( ' ui ' ) ; var data:==:app . ns ( ' data ' ) ;
var requestEntityTooLargeError = errors . requestEntityTooLargeError ; var payloadTooLargeError:==:errors . payloadTooLargeError ;
var jshint = require ( ' gulp - jshint ' ) ; var nodeunit:==:require ( ' gulp - nodeunit ' ) ;
var a = $ scope . editor . getCanvas ( ) . node . getScreenctm ( ) ; var absolutexy:==:selectedShape . absolutexy ( ) ;
var isValidUrl = sharedUtil . isValidUrl ; var stringToBytes:==:sharedUtil . stringToBytes ;
var errorMoreInfo = errorWrapperConfig . errorMoreInfo ; var moreInfoButton:==:errorWrapperConfig . moreInfoButton ;
var log = console . log ; var vid:==:document . createElement ( ' video ' ) ;
var g = nn_ctx . getImageData ( 0 , 0 , w , h ) ; var v:==:new convnetjs . vol ( 1 , 1 , 2 ) ;
var antialias = options . antialias ; var preserveBuffer:==:options . preserveBuffer ;
var location = nextState . location ; var params:==:nextState . params ;
var param = _ param ; var $ staropt$star:==:_ $ staropt$star ;
var right = region . right ; var bottom:==:region . bottom ;
var editor = window . editor ; var testcase:==:window . testcase    [ ] ;
var bytesToString = sharedUtil . bytesToString ; var createPromiseCapability:==:sharedUtil . createPromiseCapability ;
var pageHidden = exports . pageHidden = false ; var docModalCount:==:exports . docModalCount    0 ;
var scene = viewer . scene ; var context:==:scene . context ;
var layoutVertexArray = arrayGroup . layoutVertexArray ; var elementArray:==:arrayGroup . elementArray ;
var value = element ( by . binding ( ' value  |  date : ' yyyy - MM - ddTHH : mm : ss ' ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var line = this . line ; var col:==:this . col ;
var serialPort = serialport . serialPort ; var readline:==:serialport . parsers . readline ;
var width = this . _ currentMeasure . width - offset * 2 ; var height:==:this . _ currentMeasure . height - offset * 2 ;
var c = this . m_constraints [ i ] ; var m:==:c . manifold ;
var getProto = object . getPrototypeOf ; var slice:==:arr . slice ;
var View = Hilo . View ; var Container:==:Hilo . Container ;
var x = ( vector . x * transformation . m [ 0 ] ) + ( vector . y * transformation . m [ 4 ] ) + transformation . m [ 12 ] ; var y:==:( vector . x * transformation . m [ 1 ] ) + ( vector . y * transformation . m [ 5 ] ) + transformation . m [ 13 ] ;
var invalidVersionError = errors . invalidVersionError ; var methodNotAllowedError:==:errors . methodNotAllowedError ;
var leftCalendar = this . leftCalendar ; var rightCalendar:==:this . rightCalendar ;
var r = this . loose ? re [ COMPARATORLOOSE ] : re [ COMPARATOR ] ; var m:==:comp . match ( r ) ;
var sortBy = sorterAndOrder . sortBy ; var isAsc:==:sorterAndOrder . isAsc ;
var target = thisOption . target  |  |  ( thisOption . target = ) ; var controller:==:thisOption . controller  |  |  ( thisOption . controller    ) ;
var completed = todos . completed ( ) . length ; var remaining:==:todos . remaining ( ) . length ;
var onRowMouseOver = _ ref . onRowMouseOver ; var onRowMouseOut:==:_ ref . onRowMouseOut ;
var interval = options . interval  |  |  100 ; var timeout:==:options . timeout  |  |  300000 ;
var sourceFile = traceur . syntax . sourceFile ; var moduleAnalyzer:==:traceur . semantics . moduleAnalyzer ;
var calendarIdentifiers = windows . globalization . calendarIdentifiers ; var clockIdentifiers:==:windows . globalization . clockIdentifiers ;
var translations = params . translations ; var title:==:params . title ;
var async = require ( ' async ' ) ; var join:==:require ( ' path ' ) . join ;
var float32Array = this . float32Array ; var uint32Array:==:this . uint32Array ;
var barMinHeight = seriesModel . get ( ' barMinHeight ' )  |  |  0 ; var barMinAngle:==:seriesModel . get ( ' barMinAngle ' )  |  |  0 ;
var generate = _ _ webpack_require _ _ ( 601 ) . generate ; var parse:==:_ _ webpack_require _ _ ( 602 ) . parse ;
var extend = require ( ' extend - object ' ) ; var slice:==:[ ] . slice ;
var dampingRatio = options . dampingRatio ; var period:==:options . period ;
var rowData = _ ref4 . rowData ; var rowIndex:==:_ ref4 . rowIndex ;
var wtTable = wot . wtTable ; var wtViewport:==:wot . wtViewport ;
var panels = imports . panels ; var settings:==:imports . settings ;
var side_ns = sphereBox_side_ns ; var side_ns1:==:sphereBox_side_ns1 ;
var operatorList = coreEvaluator . operatorList ; var partialEvaluator:==:coreEvaluator . partialEvaluator ;
var prompt = require ( ' prompt - lite ' ) ; var moment:==:require ( ' moment ' ) ;
var width = element . width ; var height:==:element . height ;
var STATE_MACHINE = ' STATE_MACHINE ' ; var SUPER_EXPRESSION:==:' SUPER_EXPRESSION ' ;
var two = subject . client . findElement ( selectors . two ) ; var three:==:subject . client . findElement ( selectors . three ) ;
var isFull = self . isFull ( ) ; var isLocked:==:self . isLocked ;
var email = identify . email ( ) ; var phone:==:identify . phone ( ) ;
var doc = object ? object . ownerDocument  |  |  object : document ; var defaultView:==:doc . defaultView  |  |  window ;
var move = ' move ' ; var leave:==:' leave ' ;
var granularity = polygonGeometry . _ granularity ; var height:==:polygonGeometry . _ height ;
var r = this . r , g = this . g , b = this . b ; var max:==:Math . max ( r , g , b ) ;
var defaultRoute = router . defaultRoute ; var routeHandler:==:router . routeHandler ;
var pxSign = symbolMeta . pxSign ; var i:==:index ;
var textLayer = renderer . $ textLayer ; var config:==:textLayer . config ;
var thickness = options . thickness  |  |  0 . 5 ; var tessellation:==:options . tessellation  |  |  16 ;
var d = dx * this . ax + dy * this . ay + dz * this . az ; var frequency:==:this . limitMotor . frequency ;
var cssPropertyOperations = require ( ' cssPropertyOperations ' ) ; var domPropertyOperations:==:require ( ' domPropertyOperations ' ) ;
var elementInjectorIndex = memento . _ elementInjectorIndex ; var directiveIndex:==:memento . _ directiveIndex ;
var segments = options . segments  |  |  32 ; var diameterX:==:options . diameterX  |  |  options . diameter  |  |  1 ;
var categories = thisOption . categories ; var visual:==:thisOption . visual ;
var items = listbox . items ( ) ; var dataItem:==:listbox . dataItem ( item ) ;
var encodingType = getValue ( options . encodingType , camera . encodingType . jpeg ) ; var mediaType:==:getValue ( options . mediaType , camera . mediaType . picture ) ;
var setAccessor = traceur . syntax . trees . setAccessor ; var superExpression:==:traceur . syntax . trees . superExpression ;
var touch = touches [ i ] ; var identifier:==:touch . identifier  |  |  Infinity ;
var categoryThickness = layout . categoryThickness ; var isScalar:==:layout . isScalar ;
var cyclist = require ( ' cyclist ' ) ; var util:==:require ( ' util ' ) ;
var server   = require ( ' gulp - develop - server ' ) ; var shell:==:require ( ' gulp - shell ' ) ;
var setUp = tests . setUp ; var tearDown:==:tests . tearDown ;
var camera = scene . camera ; var mode:==:scene . mode ;
var Person = db . model ( ' Person1907 ' , personSchema ) ; var band:==:db . model ( ' band1907 ' , bandSchema ) ;
var tileWidth = elt [ tileWidthPropName ] ; var tileHeight:==:elt [ tileHeightPropName ] ;
var opts = _ _ alloyId46 . opts  |  |  ; var models:==:_ _ alloyId45 . models ;
var head = ' head ' ; var tail:==:' tail ' ;
var stacked = scale . options . stacked ; var stack:==:meta . stack ;
var sheet = json . sheet ; var topic:==:utils . isArray ( sheet ) ? sheet [ 0 ] . topic : sheet . topic ;
var name = e . name ; var method:==:method  |  |  ' on ' + name ;
var filename = removeNullCharacters ( getFilenameFromUrl ( item . filename ) ) ; var div:==:document . createElement ( ' div ' ) ;
var colorAlpha = getValueVisualDefine ( visuals , ' colorAlpha ' ) ; var colorSaturation:==:getValueVisualDefine ( visuals , ' colorSaturation ' ) ;
var axisHelper = powerbi . visuals . axisHelper ; var valueFormatter:==:powerbi . visuals . valueFormatter ;
var screenshot = require ( ' screenshot ' ) ; var utils:==:require ( ' utils ' ) ;
var valueField = this . cfg . valueField ; var len:==:this . _ data . length ;
var vj = ContactEquation_getImpactVelocityAlongNormal_vj ; var xi:==:ContactEquation_getImpactVelocityAlongNormal_xi ;
var actual = escape ? escapeInvisibles ( err . actual )   : err . actual ; var expected:==:escape ? escapeInvisibles ( err . expected ) : err . expected ;
var category = this . _ category  |  |  props . category  |  |  ' All ' ; var label:==:props . label ;
var item = this . item ; var list:==:this . list ;
var index = $ ( this ) . attr ( ' data - index ' ) ; var callback:==:buttons [ index ] . callback ;
var api = imports . api ; var cache:==:imports [ ' vfs . cache ' ] ;
var colorSpace = coreColorSpace . colorSpace ; var decodeStream:==:coreStream . decodeStream ;
var handler1 = jasmine . createSpy ( ' handler1 ' ) ; var handler2:==:jasmine . createSpy ( ' handler2 ' ) ;
var noRowsRenderer = _ props . noRowsRenderer ; var rowClassName:==:_ props . rowClassName ;
var deltaX = defaultValue ( options . deltax , 0 ) ; var deltay:==:defaultValue ( options . deltay , 0 ) ;
var roll = camera . roll ; var positionCartographic:==:cartographic . clone ( camera . positionCartographic ) ;
var cipher = this . _ cipher ; var blockSize:==:cipher . blockSize ;
var canDefineProperty = require ( ' canDefineProperty ' ) ; var hasOwnProperty:==:object . prototype . hasOwnProperty ;
var path = require ( ' path ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var gulp = require ( ' gulp ' ) ; var webpack:==:require ( ' webpack - stream ' ) ;
var isArray = _ angular . isArray ; var isUndefined:==:_ angular . isUndefined ;
var date = moment ( data . date  |  |  Date . now ( ) ) ; var keys:==:Object . keys ( data ) ;
var escapeHTML = util . escapeHTML ; var highlight:==:util . highlight ;
var nodes = this . body . nodes ; var edges:==:this . body . edges ;
var beforeLeave = ref . beforeLeave ; var leave:==:ref . leave ;
var array = state . array ; var index:==:state . index ;
var azure = require ( ' azure - storage ' ) ; var fs:==:require ( ' fs ' ) ;
var mkdirp = require ( ' mkdirp ' ) ; var path:==:require ( ' path ' ) ;
var maximumHeights = options . maximumHeights ; var minimumHeights:==:options . minimumHeights ;
var rewrap = scope . rewrap ; var setWrapper:==:scope . setWrapper ;
var keys = Object . keys ( defaultValues ) ; var indices:==:( recordTypePrototype . _ indices    ) ;
var beforeEach = test . beforeEach ; var afterEach:==:test . afterEach ;
var date = require ( ' load - date ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var imageryProviderViewModels = defaultValue ( options . imageryProviderViewModels , [ ] ) ; var terrainProviderViewModels:==:defaultValue ( options . terrainProviderViewModels , [ ] ) ;
var inverse = targetAxisModel & & targetAxisModel . get ( ' inverse ' ) ; var barGroup:==:this . _ displayables . barGroup ;
var nock = require ( ' nock ' ) ; var http:==:require ( ' http ' ) ;
var command1 = commandManager . register ( ' toggle checkmark ' , ' extensionTest . command1 ' , testCommand1 ) ; var command2:==:commandManager . register ( ' enabled when previous is checked ' , ' extensionTest . command2 ' , testCommand2 ) ;
var sortData   = method . sortData ; var postData:==:method . postData ;
var u6Over64 = constants . u6Over64 ; var u4Over16:==:constants . u4Over16 ;
var datatype = mm . datatype = = = ' real ' ? ' number ' : undefined ; var d:==:mm . data ;
var ONEHOUR = constants . ONEHOUR ; var ONEMIN:==:constants . ONEMIN ;
var Server = mongo . Server ; var Mongos:==:mongo . Mongos ;
var end = this . newBlock ( ' end of if ' ) ; var next:==:this . newBlock ( ' next branch of if ' ) ;
var bgnow = sbx . properties . bgnow ; var delta:==:sbx . properties . delta ;
var action = self . action ; var aspectRatio:==:options . aspectRatio ;
var should = require ( ' should ' ) ; var util:==:require ( ' util ' ) ;
var util = imports . util ; var apf:==:imports . apf ;
var TEXT_NODE      = nodeType . text_node      = 3 ; var cdata_section_node:==:nodeType . cdata_section_node      4 ;
var fs = require ( ' fs - extra ' ) ; var sinon:==:require ( ' sinon ' ) ;
var attribs = this . attribs ; var w:==:this . view . w , h    this . view . h ;
var template = section . querySelector ( ' [ data - template ] ' )  |  |  section . querySelector ( ' script ' ) ; var text:==:( template  |  |  section ) . textContent ;
var token = cookie . get ( ' oauth - token ' ) ; var scope:==:cookie . get ( ' scope ' ) ;
var editorContainer = getComponent ( ' editorContainer ' , true ) ; var splitPaneMode:==:getComponent ( ' splitPaneMode ' , true ) ;
var crypto = require ( ' crypto ' ) ; var scmp:==:require ( ' scmp ' ) ;
var chalk = require ( ' chalk ' ) ; var captains:==:require ( ' captains - log ' ) ;
var enter = data . enter ; var afterEnter:==:data . afterEnter ;
var duration = this . videoElement . duration ; var now:==:performance . now ( ) ;
var routes = _ props2 . routes ; var children:==:_ props2 . children ;
var prop = obj . properties [ i ] ; var val:==:prop . value ;
var emptyFunction = require ( ' emptyFunction ' ) ; var normalizeWheel:==:require ( ' normalizeWheel ' ) ;
var canvasGraphics = displayCanvas . canvasGraphics ; var createScratchCanvas:==:displayCanvas . createScratchCanvas ;
var Schema = mongoose . Schema ; var co:==:require ( ' co ' ) ;
var domain = require ( ' domain ' ) ; var cluster:==:require ( ' cluster ' ) ;
var callbacksLast = configuration . callbacksLast  |  |  false ; var shorthandFirst:==:configuration . shorthandFirst  |  |  false ;
var optimist = require ( ' optimist ' ) ; var os:==:require ( ' os ' ) ;
var name = Handlebars . Utils . escapeExpression ( param . name ) ; var valueId:==:handlebars . utils . escapeExpression ( param . valueId ) ;
var es6     = require ( ' broccoli - es6-module - transpiler ' ) ; var merge:==:require ( ' broccoli - merge - trees ' ) ;
var Armature = dragonBones . armature ; var hiloSlot:==:dragonBones . hiloSlot ;
var dynCall_ii = Module [ ' dynCall_ii ' ] = asm [ ' dynCall_ii ' ] ; var dynCall_viii:==:Module [ ' dynCall_viii ' ]    asm [ ' dynCall_viii ' ] ;
var northwestChild = tile . northwestChild ; var northeastChild:==:tile . northeastChild ;
var u8Over256 = constants . u8Over256 ; var u2Over4:==:constants . u2Over4 ;
var rootNodes = model . _ runtime . rootNodes ; var length:==:rootNodes . length ;
var parseTreeType = traceur . syntax . parseTreeType ; var predefinedName:==:traceur . syntax . predefinedName ;
var current = this . current ; var width:==:imgData . width ;
var winston = require ( ' winston ' ) ; var semver:==:require ( ' semver ' ) ;
var layers = this . addCheckbox ( div , mxResources . get ( ' layers ' ) , true ) ; var lightbox:==:this . addCheckbox ( div , mxResources . get ( ' lightbox ' ) , true ) ;
var cloudinary = require ( ' cloudinary ' ) ; var mongoose:==:keystone . mongoose ;
var textColor = _ context$muiTheme$tex . textColor ; var disabledTextColor:==:_ context$muiTheme$tex . disabledTextColor ;
var collider_coords = $ collider_coords_ins . get ( ) ; var overlaps:==:self . overlaps ( player_coords , collider_coords ) ;
var ace = imports . ace ; var util:==:imports . util ;
var anchorPointx = options [ ' anchorPointx ' ] ; var anchorPointy:==:options [ ' anchorPointy ' ] ;
var login = document . getElementById ( ' login ' ) ; var output:==:document . getElementById ( ' output ' ) ;
var x = eventData . x ; var y:==:eventData . y ;
var xcb _ = dimensions . xcb _ ; var ycb _:==:dimensions . ycb _ ;
var foreground = this . dom . foreground ; var background:==:this . dom . background ;
var TAKE = ' TAKE ' ; var PUT:==:' PUT ' ;
var ELEMENT_HAS = traceur . syntax . predefinedName . element_has ; var element_set:==:traceur . syntax . predefinedName . element_set ;
var from = ( opts & & typeof opts . from ! = ' undefined ' ) ? opts . from : that . from ; var to:==:( opts & & typeof opts . to !   ' undefined ' ) ? opts . to : that . to ;
var sqrt = Math . sqrt ; var round:==:Math . round ;
var value = node . value ; var options:==:self . options ;
var concat = require ( ' gulp - concat ' ) ; var del:==:require ( ' del ' ) ;
var error = debug ( ' components : texture : error ' ) ; var textureLoader:==:new three . textureLoader ( ) ;
var error_uri = _ ref . error_uri ; var state:==:_ ref . state ;
var accessControl = imports . accessControl ; var collab:==:imports . collab ;
var children = React . Children . toArray ( this . props . children ) ; var value:==:children [ position ] . props . value ;
var newOptionCreator = _ props4 . newOptionCreator ; var shouldKeyDownEventCreateNewOption:==:_ props4 . shouldKeyDownEventCreateNewOption ;
var NO_JS_EXECUTION_TIMEOUT = process . env . NO_JS_EXECUTION_TIMEOUT  |  |  3000 ; var EVALUATE_JAVASCRIPT_CHECK_TIMEOUT:==:process . env . EVALUATE_JAVASCRIPT_CHECK_TIMEOUT  |  |  300 ;
var sourcemaps = require ( ' gulp - sourcemaps ' ) ; var del:==:require ( ' del ' ) ;
var c = this . coneEquation = new coneEquation ( bodya , bodyb , options ) ; var t:==:this . twistEquation    new rotationalEquation ( bodya , bodyb , options ) ;
var addClass = exports . addClass = addClassMethod ; var removeClass:==:exports . removeClass    removeClassMethod ;
var S = $ String ( this ) ; var searchStr:==:$ string ( searchString ) ;
var sinon = require ( ' sinon ' ) ; var http:==:require ( ' http ' ) ;
var extend = _ angular . extend ; var forEach:==:_ angular . forEach ;
var e = this . parentNode ; var a:==:[ this . attributes [ c ] ] ;
var now = goog . debug . Trace _ . now ( ) ; var timeStamp:==:opt_timestamp ? opt_timestamp : now ;
var totalRows = priv . totalRows ; var viewportHeight:==:priv . viewportHeight ;
var tokenizer = this . tokenizer ; var token:==:tokenizer . readToken ( ) ;
var rotr32 = utils . rotr32 ; var rotl32:==:utils . rotl32 ;
var memberExpression = this . transformAny ( left . memberExpression ) ; var right:==:this . transformAny ( tree . right ) ;
var request = require ( ' request ' ) ; var assert:==:require ( ' assert ' ) ;
var length = nodes . length ; var rootNode:==:dataGrid . rootNode ( ) ;
var Plugin = imports . Plugin ; var automate:==:imports . automate ;
var error = sharedUtil . error ; var log2:==:sharedUtil . log2 ;
var $ location = $ injector . get ( ' $ location ' ) ; var $ rootScope:==:$ injector . get ( ' $ rootScope ' ) ;
var display = opts . display ; var ctx:==:me . ctx ;
var children = $ element [ 0 ] . children ; var length:==:children . length ;
var bin = ' bin ' ; var close:==:' close ' ;
var path = require ( ' path ' ) ; var join:==:path . join ;
var obj = descriptor . object ; var path:==:getPath ( descriptor . path ) ;
var res = this . res ; var req:==:this . req ;
var color = this . color ; var canvasGraphicsFactory:==:this . canvasGraphicsFactory ;
var _ strcat = Module [ ' _ strcat ' ] = asm [ ' _ strcat ' ] ; var _ free:==:Module [ ' _ free ' ]    asm [ ' _ free ' ] ;
var c = o . content ; var content:==:this . element . children ( ' . window - content ' ) ;
var cancelAnimationFramePolyfill = require ( ' cancelAnimationFramePolyfill ' ) ; var requestAnimationFramePolyfill:==:require ( ' requestAnimationFramePolyfill ' ) ;
var start = fold . start . row ; var end:==:fold . end . row ;
var constructor = applyParams ( clsDef . hasOwnProperty ( ' constructor ' ) ? clsDef . constructor : undefined , ' constructor ' ) ; var proto:==:constructor . prototype ;
var mime = require ( ' mime ' ) ; var errors:==:require ( ' restify - errors ' ) ;
var validator = require ( ' validator ' ) ; var nconf:==:require ( ' nconf ' ) ;
var insert = require ( ' gulp - insert ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var runInThisContext = require ( ' vm ' ) . runInThisContext ; var semver:==:require ( ' semver ' ) ;
var validator   = require ( ' validator ' ) ; var eventproxy:==:require ( ' eventproxy ' ) ;
var month = calendar . month . month ( ) ; var year:==:calendar . month . year ( ) ;
var displayOrientations = windows . graphics . display . displayOrientations ; var knownLibraryId:==:windows . storage . knownLibraryId ;
var preventDefault = isUndefined ( preventDefault ) ? 1 : preventDefault ; var stopPropagation:==:isUndefined ( stopPropagation ) ? 1 : stopPropagation ;
var timeout = ( spec . timeout = = undefined ) ? TIMEOUT_SEARCH : spec . timeout ; var waitFor:==:( spec . waitFor     undefined ) ? true : spec . waitFor ;
var prefix = url . query . prefix ; var max:==:parseInt ( url . query . max , 10 ) ;
var dimensions = box . dimensions ; var position:==:entity . position ;
var reactdomComponentTree = require ( ' reactdomComponentTree ' ) ; var reactTestUtils:==:require ( ' reactTestUtils ' ) ;
var utils = require ( ' utils ' ) ; var preprocessor:==:require ( ' preprocessor ' ) ;
var hotUpdateChunkFilename = this . outputOptions . hotUpdateChunkFilename ; var hotUpdateMainFilename:==:this . outputOptions . hotUpdateMainFilename ;
var y1 = Math . max ( a . y1 , b . y1 ) ; var x2:==:Math . min ( a . x2 , b . x2 ) ;
var $ injector = hooks . $ injector ; var $ location:==:$ injector . get ( ' $ location ' ) ;
var condition = this . transformAny ( tree . condition ) ; var ifClause:==:this . transformAny ( tree . ifClause ) ;
var viewport = options . viewport ; var value:==:refLine . value ;
var initialState = ' initialState ' ; var targetState:==:' targetState ' ;
var defer = Vow . defer ( ) ; var promise:==:defer . promise ( ) ;
var htmlmin = require ( ' gulp - htmlmin ' ) ; var typescriptCompiler:==:typescriptCompiler  |  |  null ;
var bottomMarginLimit = this . bottomMarginLimit ; var leftRightMarginLimit:==:this . leftRightMarginLimit ;
var canvasRenderer = hilo . canvasRenderer ; var domRenderer:==:hilo . domRenderer ;
var choiceContext = this . choiceContext ; var forkContext:==:this . forkContext ;
var d = qUnit . done , td = qUnit . testDone , s = qUnit . start ; var tr:==:parent . window . tr ;
var fb = window . fb  |  |  ; var config:==:window . config  |  |  ;
var inspect = require ( ' util ' ) . inspect ; var validationError:==:mongooseError . validationError ;
var http = require ( ' http ' ) ; var mime:==:require ( ' mime ' ) ;
var Pos = codeMirror . pos ; var cmp:==:codeMirror . cmpPos ;
var oldPass = string ( req . body . oldPassword ) ; var newPass:==:string ( req . body . newPassword ) ;
var term = session . term ; var renderer:==:ace . renderer ;
var fragmentedTracks = config . fragmentedTracks ; var allTracksAreDisabled:==:config . allTracksAreDisabled ;
var scene = this . scene ; var scripts:==:this . scripts ;
var appController = _ appJsControllersAppController [ ' default ' ] ; var confirmDownloadController:==:_ appJsControllersConfirmDownloadController [ ' default ' ] ;
var t = height - pbottom . size ; var w:==:width ;
var mapping = formatData . mapping ; var lineNumber:==:debuggerModelLocation . lineNumber ;
var path = require ( ' path ' ) ; var noop:==:mocha . utils . noop ;
var w = node . getData ( ' width ' ) ; var h:==:node . getData ( ' height ' ) ;
var error = new Error ( ' some error ' ) ; var operation:==:retry . operation ( [ 1 , 2 , 3 ] ) ;
var objectPatternField = traceur . syntax . trees . objectPatternField ; var parseTree:==:traceur . syntax . trees . parseTree ;
var uri = test . uri ; var valid:==:test . valid ;
var bounds = this . game . physics . arcade . bounds ; var check:==:this . game . physics . arcade . checkCollision ;
var traceEvent = record . traceEvent ( ) ; var title:==:webInspector . timelineuiUtils . eventStyle ( traceEvent ) . title ;
var x = this . cx + coord * Math . cos ( angle ) ; var y:==:this . cy - coord * Math . sin ( angle ) ;
var nextToken = options . nextToken ; var atLeast:==:options . atLeast ;
var aceUndo = this . $ aceUndo ; var stack:==:e . stack  |  |  [ ] ;
var path = require ( ' path ' ) ; var version:==:process . versions . node . split ( ' . ' )  |  |  [ null , null , null ] ;
var manifest = app . manifest  |  |  app . updateManifest ; var name:==:new manifestHelper ( manifest ) . name ;
var f = format . substr ( p , 1 ) ; var c:==:fcase . substr ( p , 1 ) ;
var pg = helper . pg ; var config:==:helper . config ;
var tbody = goog . bind ( this . dom _ . createDom , this . dom _ , ' tbody ' ) ; var thead:==:goog . bind ( this . dom _ . createDom , this . dom _ , ' thead ' ) ;
var target = mapBrowserEvent . originalEvent . target ; var tagName:==:target . tagName ;
var reactdomOption = require ( ' reactdomOption ' ) ; var reactdomSelect:==:require ( ' reactdomSelect ' ) ;
var isValidDefaultValue = propertyTypes . isValidDefaultValue ; var propertyTypes:==:propertyTypes . propertyTypes ;
var dx2 = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx2 ' , this . dx2 ) ) ) ) ; var dy2:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dy2 ' , this . dy2 ) ) ) ) ;
var projection = this . projection ; var view:==:this . view ;
var screenY = defaultValue ( options . screeny , 0 ) ; var clientx:==:defaultValue ( options . clientx , 0 ) ;
var show = coerce ( contourDim + ' . show ' ) ; var highlight:==:coerce ( contourDim + ' . highlight ' ) ;
var db = this . _ db ; var transaction:==:this . _ db . transaction ( [ ' visits ' ] , ' readwrite ' ) ;
var mousemove = Rx . Observable . fromEvent ( document , ' mousemove ' ) ; var mousedown:==:rx . observable . fromEvent ( dragTarget , ' mousedown ' ) ;
var group = _ ref . group ; var force:==:_ ref . force ;
var value = entry . value [ 1 ] ; var type:==:typeof value ;
var createMemberLookupExpression = parseTreeFactory . createMemberLookupExpression ; var createNumberLiteral:==:parseTreeFactory . createNumberLiteral ;
var color = Base . color ; var cursor:==:Base . cursor ;
var p     = require ( ' path ' ) ; var chalk:==:require ( ' chalk ' ) ;
var body = this . getDomHelper ( ) . getDocument ( ) . body ; var active:==:this . getDomHelper ( ) . getDocument ( ) . activeElement  |  |  body ;
var longitude = cartographic . longitude ; var latitude:==:cartographic . latitude ;
var cells = evt . getProperty ( ' cells ' ) ; var parent:==:evt . getProperty ( ' parent ' ) ;
var name = this . transformAny ( tree . name ) ; var superClass:==:this . transformAny ( tree . superClass ) ;
var createAssignmentExpression = parseTreeFactory . createAssignmentExpression ; var createBindingIdentifier:==:parseTreeFactory . createBindingIdentifier ;
var chalk = require ( ' chalk ' ) ; var figures:==:require ( ' figures ' ) ;
var textOperation = firepad . textOperation ; var firebaseAdapter:==:firepad . firebaseAdapter ;
var file = links [ i ] . file ; var url:==:links [ i ] . url ;
var calls = Object . getOwnPropertyNames ( source . _ calls  |  |  ) ; var inherited:==:source . _ inherited  |  |  [ ] ;
var post = results . post ; var privileges:==:results . privileges [ 0 ] ;
var Parser = coreParser . parser ; var iseof:==:coreParser . iseof ;
var width = image . width , height = image . height ; var maskCanvas:==:cachedCanvases . getCanvas ( ' maskCanvas ' , width , height ) ;
var pageContent = this . normalize ( this . pageContents [ pageIndex ] ) ; var query:==:this . normalize ( this . state . query ) ;
var _ = window . _ ; var moment:==:window . moment ;
var fs = require ( ' fs ' ) ; var base:==:fs . readFileSync ( ' base . html ' ) . toString ( ) ;
var metalness = this . metalness . buildCode ( builder , ' fv1 ' ) ; var alpha:==:this . alpha ? this . alpha . buildCode ( builder , ' fv1 ' ) : undefined ;
var el = this . el ; var animationEl:==:this . animationEl ;
var castShadows = shadowMode . castShadows ( model . shadows ) ; var receiveShadows:==:shadowMode . receiveShadows ( model . shadows ) ;
var basename = require ( ' path ' ) . basename ; var debug:==:require ( ' debug ' ) ( ' mocha : watch ' ) ;
var p = this . progress ( ) ; var from:==:svg . toNumberArray ( p . from . value ) ;
var scrollpane = ui . find ( ' > . scrollpane ' ) ; var actions:==:scrollpane . find ( ' > . test - actions ' ) ;
var conditionalExpression = traceur . syntax . trees . conditionalExpression ; var continueStatement:==:traceur . syntax . trees . continueStatement ;
var tooltip = descriptor . tooltip ; var caption:==:descriptor . caption ;
var points = shape . points ; var sizes:==:shape . sizes ;
var backdrop = new Animation ( ele . querySelector ( ' ion - backdrop ' ) ) ; var wrapper:==:new animation ( ele . querySelector ( ' . picker - wrapper ' ) ) ;
var addr = parsed . address ? parsed . address . toString ( ) : '' ; var message:==:parsed . message ;
var w = canvas . width ; var h:==:canvas . height ;
var listener = this . context . listener ; var up:==:this . up ;
var number = util . number ; var isArray:==:array . isArray ;
var onScroll = _ props5 . onScroll ; var width:==:_ props5 . width ;
var dirname = require ( ' path ' ) . dirname ; var async:==:require ( ' async ' ) ;
var multiline = require ( ' multiline ' ) ; var pedding:==:require ( ' pedding ' ) ;
var sqrt = Math . sqrt ; var cos:==:Math . cos ;
var editorState = require ( ' editorState ' ) ; var unicodeUtils:==:require ( ' unicodeUtils ' ) ;
var t1h = t1h + chh + ( ( t1l > > > 0 ) < ( chl > > > 0 ) ? 1 : 0 ) ; var t1l:==:t1l + Kil ;
var scale = new Variable ( ' scale ' , 10 ) ; var offset:==:new Variable ( ' offset ' , 1000 ) ;
var wrapsPrimitiveReceiver = util . wrapsPrimitiveReceiver ; var isPrimitive:==:util . isPrimitive ;
var typeName = this . transformAny ( tree . typeName ) ; var args:==:this . transformAny ( tree . args ) ;
var qs = require ( ' qs ' ) ; var zlib:==:require ( ' zlib ' ) ;
var sockjs = require ( ' sockjs ' ) ; var events:==:require ( ' events ' ) ;
var bcrypt = require ( ' bcryptjs ' ) ; var async:==:require ( ' async ' ) ;
var cachedProperty = utils . cachedProperty ; var parseBytes:==:utils . parseBytes ;
var modal = bodyEl . find ( ' . modal ' ) [ 0 ] ; var backdrop:==:bodyEl . find ( ' . modal - backdrop ' ) [ 0 ] ;
var continueStatement = traceur . syntax . trees . continueStatement ; var debuggerStatement:==:traceur . syntax . trees . debuggerStatement ;
var subscribable = new ko . subscribable ( ) . extend ( rateLimit : method : ' notifyAtFixedRate ' , timeout : 50 ) ; var notifySpy:==:jasmine . createSpy ( ' notifySpy ' ) ;
var s = form_obj . elements [ field_name ] ; var o:==:new Option ( name , value ) ;
var props = assign ( , element . props ) ; var key:==:element . key ;
var require = patchRequire ( require ) ; var utils:==:require ( ' utils ' ) ;
var eventResize = t . eventResize ; var renderDayOverlay:==:t . renderDayOverlay ;
var batch = compiled . batch ; var scope:==:compiled . scope ;
var spriteFrameCache = cc . spriteFrameCache ; var path:==:cc . path ;
var min = new Date ( this . _ minYear , 0 , 1 , 12 , 0 , 0 ) ; var max:==:new date ( this . _ maxYear , 11 , 31 , 12 , 0 , 0 ) ;
var constant = protobuf . constants ; var util:==:protobuf . util ;
var z = babelHelpers . objectWithoutProperties ( z : 1 , [ ] ) ; var x:==:5    babelHelpers . objectWithoutProperties ( x : 1 , [ ] ) ;
var Given = this . Given = ; var When:==:this . When    ;
var clone = _ _ webpack_require _ _ ( 5 ) . clone ; var validateIndex:==:_ _ webpack_require _ _ ( 3 ) . validateIndex ;
var buffer = document . querySelector ( ' # buffer ' ) ; var mousemove:==:rx . dom . fromEvent ( document , ' mousemove ' ) ;
var buffer = this . ensureBuffer ( bufferLength + rowBytes ) ; var bits:==:this . bits ;
var BOOLEAN_UNARY_OPERATORS = exports . BOOLEAN_UNARY_OPERATORS = [ ' delete ' , ' ! ' ] ; var NUMBER_UNARY_OPERATORS:==:exports . NUMBER_UNARY_OPERATORS    [ ' + ' , ' - ' , ' + + ' , ' -- ' , ' ~ ' ] ;
var primary = _ props . primary ; var rippleStyle:==:_ props . rippleStyle ;
var ignoreNoEdit = ! ! ( options . fields  |  |  options . ignoreNoEdit ) ; var fields:==:options . fields  |  |  this . fieldsArray ;
var isPlainObject = lib . isPlainObject ; var isArray:==:array . isArray ;
var onFulfilled = jasmine . createSpy ( ' onFulfilled ' ) ; var onRejected:==:jasmine . createSpy ( ' onRejected ' ) ;
var idbKeyRange = window . idbKeyRange  |  |  window . webkitidbKeyRange ; var idbTransaction:==:window . idbTransaction  |  |  window . webkitidbTransaction  |  |  ;
var object = _ react . propTypes . object ; var shape:==:_ react . propTypes . shape ;
var whitelist = options . whitelist  |  |  [ ] ; var writeHead:==:res . writeHead ;
var mime = require ( ' mime ' ) ; var notAcceptableError:==:require ( ' restify - errors ' ) . notAcceptableError ;
var d16 = _ addDiv ( ' d16 ' ) , d17 = _ addDiv ( ' d17 ' ) ; var conn:==:_ jsPlumb . connect ( source : d16 , target : d17 , connector : [ ' bezier ' , curviness : 300 ] ) ;
var readFileSync = opts . readFileSync  |  |  fs . readFileSync ; var extensions:==:opts . extensions  |  |  [ ' . js ' ] ;
var south = rectangle . south ; var north:==:rectangle . north ;
var basename = require ( ' path ' ) . basename ; var dirname:==:require ( ' path ' ) . dirname ;
var x = cx + startOffset [ 0 ] * r ; var y:==:cy + startOffset [ 1 ] * r ;
var findAncestorOffsetKey = require ( ' findAncestorOffsetKey ' ) ; var nullthrows:==:require ( ' nullthrows ' ) ;
var commentDirectivesEnabled = commentDirectivesEnabledConfig ; var cssClassDirectivesEnabled:==:cssClassDirectivesEnabledConfig ;
var appState = require ( ' appState ' ) ; var platform:==:require ( ' platform ' ) ;
var Buffer = require ( ' buffer ' ) . Buffer ; var r:==:new stream . Readable ( ) ;
var names = smc . _ names = arraySet . fromArray ( aSourceMap . _ names . toArray ( ) , true ) ; var sources:==:smc . _ sources    arraySet . fromArray ( aSourceMap . _ sources . toArray ( ) , true ) ;
var rename = require ( ' gulp - rename ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var sourceMap = this . sourceMapConfiguration _ . sourceMapGenerator . toString ( ) ; var inputSourceMap:==:this . sourceMapConfiguration _ . inputSourceMap ;
var onRowMouseOver = _ props3 . onRowMouseOver ; var onRowMouseOut:==:_ props3 . onRowMouseOut ;
var denseMatrix = type . denseMatrix ; var sparseMatrix:==:type . sparseMatrix ;
var mocha = require ( ' gulp - mocha ' ) ; var todo:==:require ( ' gulp - todo ' ) ;
var child_process = Npm . require ( ' child_process ' ) ; var querystring:==:Npm . require ( ' querystring ' ) ;
var getNormalizedUnicodes = coreUnicode . getNormalizedUnicodes ; var reverseIfRtl:==:coreUnicode . reverseIfRtl ;
var needInfo_start = $ ( ' . needInfo_start ' ) ; var needInfo_end:==:$ ( ' . needInfo_end ' ) ;
var host = headers . host ; var referer:==:headers . referer  |  |  '' ;
var size = t2 . size ; var color:==:t2 . color ;
var documentElement = kml . documentElement ; var document:==:documentElement . localName      ' document ' ? documentElement : queryFirstNode ( documentElement , ' document ' , namespaces . kml ) ;
var group = this . createVmlElement ( ' group ' ) ; var style:==:group . style ;
var min = expectation . minCalls ; var max:==:expectation . maxCalls ;
var f = findType ( node . callee , scope ) . getFunctionType ( ) ; var proto:==:f & & f . getProp ( ' prototype ' ) . getObjType ( ) ;
var denseMatrix = math . type . denseMatrix ; var unit:==:math . type . unit ;
var db = BrowserDB . db . _ db ; var transaction:==:db . transaction ( ' settings ' , ' readwrite ' ) ;
var keyCode = this . target . keyCode ; var keyCodeUpper:==:this . target . keyCodeUpper ;
var rotateMix = this . rotateMix , translateMix = this . translateMix , scaleMix = this . scaleMix , shearMix = this . shearMix ; var target:==:this . target ;
var Container = Hilo . Container ; var Drawable:==:Hilo . Drawable ;
var sharp = _ sharp ; var plus:==:_ plus ;
var value = seriesData . value ; var highlightedValue:==:seriesData . highlightedValue ;
var omittedCloseTags = require ( ' omittedCloseTags ' ) ; var traverseStackChildren:==:require ( ' traverseStackChildren ' ) ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var keyFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' keyFieldTestObject ' ) ) ;
var hashLength = cellProperties . hashLength  |  |  value . length ; var hashSymbol:==:cellProperties . hashSymbol  |  |  ' * ' ;
var error = sharedUtil . error ; var eof:==:coreParser . eof ;
var w = image . width ; var h:==:image . height ;
var keyCommandTransposeCharacters = require ( ' keyCommandTransposeCharacters ' ) ; var keyCommandUndo:==:require ( ' keyCommandUndo ' ) ;
var notification = imports [ ' dialog . notification ' ] ; var pubsub:==:imports . pubsub ;
var name = jQuery ( ' # ' + pl . nsClass ( ' newattributename ' ) ) . val ( ) ; var wert:==:jQuery ( ' # ' + pl . nsClass ( ' newattributewert ' ) ) . val ( ) ;
var glyph = label . _ glyphs [ i ] ; var billboard:==:glyph . billboard ;
var has = require ( ' has ' ) ; var hexadecimal:==:require ( ' is - hexadecimal ' ) ;
var mixin = scope . mixin ; var rewrap:==:scope . rewrap ;
var registeredMesh = this . _ registeredMeshes [ index ] ; var body:==:registeredMesh . body . body ;
var query = ( options & & options . query )  |  |  '' ; var skip:==:options & & options . skip ;
var cyan50 = exports . cyan50 = ' # e0f7fa ' ; var cyan100:==:exports . cyan100    ' # b2ebf2 ' ;
var base = asn1 . base ; var der:==:asn1 . constants . der ;
var tab = tabManager . findTab ( data . path ) ; var doc:==:tab & & tab . document ;
var Text = require ( ' Text ' ) ; var touchableWithoutFeedback:==:require ( ' touchableWithoutFeedback ' ) ;
var axisType = thisOption . axisType ; var names:==:this . _ names    [ ] ;
var font = this . font _ ; var style:==:this . getElement ( ) . style ;
var plotArea = axesLayout . plotArea ; var viewport:==:axesLayout . viewport ;
var granularity = params . granularity ; var positions:==:params . positions ;
var indices = mesh . indices ; var encoding:==:mesh . encoding ;
var withCodeCoverage = options & & options . withCodeCoverage ; var transformRun:==:options & & options . transformRun ;
var columnCount = props . columnCount ; var height:==:props . height ;
var completed = app . todos . completed ( ) . length ; var remaining:==:app . todos . remaining ( ) . length ;
var x = xs [ i ] ; var y:==:ys [ i ] ;
var replace = require ( ' gulp - replace ' ) ; var spawn:==:require ( ' spawn - local - bin ' ) ;
var i d = ids [ i ] ; var node:==:nodes [ i d ] ;
var b = typeof mb ; var c:==:typeof mc ;
var debug = require ( ' debug ' ) ( ' pm2 : worker ' ) ; var domain:==:require ( ' domain ' ) ;
var characterMetadata = require ( ' characterMetadata ' ) ; var dataTransfer:==:require ( ' dataTransfer ' ) ;
var domain = require ( ' domain ' ) ; var request:==:require ( ' request ' ) ;
var App = window . nwGui . app ; var argv:==:app . argv ;
var channel = channels [ i ] ; var target:==:channel . target ;
var row = parseInt ( event . target . getAttribute ( ' data - row ' ) , 10 ) ; var col:==:parseInt ( event . target . getAttribute ( ' data - col ' ) , 10 ) ;
var pmx = require ( ' pmx ' ) . init ( http : true ) ; var probe:==:pmx . probe ( ) ;
var util = require ( ' hexo - util ' ) ; var htmlTag:==:util . htmlTag ;
var locked = parseInt ( topic . locked , 10 ) = = = 1 ; var deleted:==:parseInt ( topic . deleted , 10 )      1 ;
var registerWrapper = scope . registerWrapper ; var rewrap:==:scope . rewrap ;
var scrollY = this . _ scrollY  |  0 ; var mc:==:this . _ mc ;
var limeA100 = exports . limeA100 = ' # f4ff81 ' ; var limeA200:==:exports . limeA200    ' # eeff41 ' ;
var round = Math . round ; var floor:==:Math . floor ;
var replace = require ( ' rollup - plugin - replace ' ) ; var inject:==:require ( ' rollup - plugin - inject ' ) ;
var d = self . definition ( ) ; var fixed:==:self . fixed_value ( ) ;
var duration = options . duration ; var moves:==:options . moves ;
var utility = require ( ' utility ' ) ; var uuid:==:require ( ' node - uuid ' ) ;
var size = opt_size  |  |  5 * 1024 * 1024 ; var win:==:opt_window  |  |  bot . getWindow ( ) ;
var data = $ target . data ( ' amui . collapse ' ) ; var option:==:data ? ' toggle ' : options ;
var $ pageContent = this . $ pageContent ; var shadow:==:this . options . shadow ;
var signalr = options & & options . signalr ? options . signalr : ; var promise:==:signalr . promise ;
var flag = mapAndFlag ? mapAndFlag . flag : 0 ; var firstDominatedNodeIndex:==:this . _ firstDominatedNodeIndex ;
var white = exports . white = ' # ffffff ' ; var transparent:==:exports . transparent    ' rgba ( 0 , 0 , 0 , 0 ) ' ;
var connect = require ( ' connect ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var reactdomFiberOption = require ( ' reactdomFiberOption ' ) ; var reactdomFiberSelect:==:require ( ' reactdomFiberSelect ' ) ;
var passwordResponses = sharedUtil . passwordResponses ; var bytesToString:==:sharedUtil . bytesToString ;
var info = imports . info ; var guide:==:imports . guide ;
var price = order . price_amount . to_human ( group_sep : false ) ; var currency:==:order . price_amount . currency ( ) . to_json ( ) ;
var assert = require ( ' assert - diff ' ) ; var sinon:==:require ( ' sinon ' ) ;
var height = model . height ; var dimensions:==:model . dimensions ;
var setTimeout = global . setTimeout ; var clearTimeout:==:global . clearTimeout ;
var v = ( previousSlide . querySelectorAll ( ' section ' ) . length - 1 )  |  |  undefined ; var h:==:indexh - 1 ;
var dataKey = _ column$props2 . dataKey ; var disableSort:==:_ column$props2 . disableSort ;
var fs = require ( ' fs ' ) ; var extend:==:require ( ' util ' ) . _ extend ;
var mangledGlobalNames = init . mangledGlobalNames ; var hasOwnProperty:==:object . prototype . hasOwnProperty ;
var browserWindow = electron . browserWindow ; var defaults:==:require ( ' deep - defaults ' ) ;
var clientHeight = _ ref7 . clientHeight ; var scrollHeight:==:_ ref7 . scrollHeight ;
var dataset = this . chart . data . datasets [ point . _ datasetIndex ] ; var index:==:point . _ index ;
var x2 = segment . x2 ; var y2:==:segment . y2 ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var http:==:require ( ' http ' ) ;
var http = require ( ' http ' ) ; var net:==:require ( ' net ' ) ;
var util = require ( ' hexo - util ' ) ; var fs:==:require ( ' hexo - fs ' ) ;
var payloads = desc . payloads  |  |  [ ] ; var fingerprints:==:( transport & & transport . fingerprints )  |  |  [ ] ;
var status = resp . httpResponse . statusCode ; var params:==:_ _ webpack_require _ _ ( 201 ) . inspect ( req . params , true , null ) ;
var Tree = imports . Tree ; var layout:==:imports . layout ;
var generateDepthTexture = options . generateDepthTexture ? options . generateDepthTexture : false ; var doNotChangeAspectRatio:==:options . doNotChangeAspectRatio      undefined ? true : options . doNotChangeAspectRatio ;
var clearOnDrop = defaultValue ( options . clearOnDrop , true ) ; var dropTarget:==:defaultValue ( options . dropTarget , viewer . container ) ;
var column = _ ref5 . column ; var index:==:_ ref5 . index ;
var help02 = document . getElementById ( ' help02 ' ) ; var loadingText:==:document . getElementById ( ' loadingText ' ) ;
var rangeNode = math . expression . node . rangeNode ; var operatorNode:==:math . expression . node . operatorNode ;
var UA = localStorage . getItem ( ' ua ' )  |  |  defaultua ; var headers:==:localStorage . getItem ( ' headers ' ) ;
var propsData = vm . $ options . propsData  |  |  ; var props:==:vm . _ props    ;
var express = require ( ' express ' ) ; var cheerio:==:require ( ' cheerio ' ) ;
var string = ' string ' ; var bool:==:' boolean ' ;
var cloneObject = c9Util . cloneObject ; var debug:==:connect . debug ;
var and = stdlib . Atomics . and ; var fround:==:stdlib . Math . fround ;
var size = fontSizeMappings [ node . getAttribute ( ' size ' ) ] ; var face:==:node . getAttribute ( ' face ' ) ;
var path = require ( ' path ' ) ; var when:==:require ( ' when ' ) ;
var immediate = immediateQueue . head ; var tail:==:immediateQueue . tail ;
var lightBlue200 = exports . lightBlue200 = ' # 81d4fa ' ; var lightBlue300:==:exports . lightBlue300    ' # 4fc3f7 ' ;
var edge = ! ( options & & options . edge = = = false ) ; var tolerance:==:options & & options . tolerance ;
var numSuccessful = this . _ sendingFilesQueue [ 0 ] . numSuccessful ; var numUnsuccessful:==:this . _ sendingFilesQueue [ 0 ] . numUnsuccessful ;
var primitive = primitives [ name ] ; var material:==:primitive . material !    undefined ? dependencies . materials [ primitive . material ] : createDefaultMaterial ( ) ;
var endArgs = options . endArgs ; var done:==:options . done ;
var listController = _ jsControllerListController [ ' default ' ] ; var achievementsHelper:==:_ jsLibHelpers . achievementsHelper ;
var minificationFilter = sampler . minificationFilter ; var magnificationFilter:==:sampler . magnificationFilter ;
var call = mockOptionMenu . calls [ 0 ] ; var items:==:call . items ;
var h = box . height - 2 * margin ; var rect:==:this . draw_rect ( x , y , w , h ) ;
var defval = o . defval ; var range:==:o . range !   null ? o . range : sheet [ ' ! ref ' ] ;
var useNamedReferences = options . useNamedReferences ; var allowUnsafeSymbols:==:options . allowUnsafeSymbols ;
var type = spec . type ; var subtype:==:spec . subtype ;
var assert = require ( ' assert ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var d16 = _ addDiv ( ' d16 ' ) , d17 = _ addDiv ( ' d17 ' ) ; var conn:==:_ jsPlumb . connect ( source : d16 , target : d17 , endpoints : [ ' rectangle ' , ' dot ' ] ) ;
var once = PouchDB . utils . once ; var toPromise:==:pouchdb . utils . toPromise ;
var width = this . _ currentMeasure . width ; var height:==:this . _ currentMeasure . height ;
var host = keystone . get ( ' host ' ) ; var port:==:keystone . get ( ' port ' ) ;
var disabled = props . disabled ; var disabledStyle:==:props . disabledStyle ;
var tab   = _ . trim ( req . body . tab ) ; var content:==:_ . trim ( req . body . content ) ;
var animation = animations [ animationId ] ; var channels:==:animation . channels ;
var hotUpdateChunkFilename = compiler . options . output . hotUpdateChunkFilename ; var hotUpdateMainFilename:==:compiler . options . output . hotUpdateMainFilename ;
var penetratedFaceNormal = convexparticle_penetratedfacenormal ; var worldPenetrationVec:==:convexparticle_worldpenetrationvec ;
var parse = propertyTypes . selectorAll . parse ; var stringify:==:propertyTypes . selectorAll . stringify ;
var viewport = options . viewport ; var model:==:this . model    this . converter ( options . dataViews [ 0 ] , viewport ) ;
var options = this . options ; var now:==:$ . now ( ) ;
var hmdEuler = this . hmdEuler ; var pitchObject:==:this . pitchObject ;
var dec = formatData . dec ; var group:==:formatData . group ;
var dom = goog . require ( ' goog . dom ' ) ; var testSuite:==:goog . require ( ' goog . testing . testSuite ' ) ;
var metadata = this . file . get ( ' metadata ' ) ; var published:==:metadata . published ;
var curve = context [ ' curve ' ] ; var multiCurve:==:context [ ' multiCurve ' ] ;
var allOptions = _ _ webpack_require _ _ ( 145 ) . allOptions ; var configureOptions:==:_ _ webpack_require _ _ ( 145 ) . configureOptions ;
var value = dataPoint [ this . _ valueField ]  |  |  1 ; var radius:==:dataPoint . radius  |  |  this . _ cfgRadius  |  |  defaultRadius ;
var less = require ( ' less - middleware ' ) ; var path:==:require ( ' path ' ) ;
var webChannelRequest = goog . labs . net . webChannel . webChannelRequest ; var requestStats:==:goog . labs . net . webChannel . requestStats ;
var yaml = require ( ' js - yaml ' ) ; var fs:==:require ( ' hexo - fs ' ) ;
var longitude = document . getElementById ( ' longitude ' ) ; var radius:==:document . getElementById ( ' radius ' ) ;
var createBreakStatement = parseTreeFactory . createBreakStatement ; var createCallExpression:==:parseTreeFactory . createCallExpression ;
var a = new operatorNode ( ' + ' , ' add ' , [ new symbolNode ( ' x ' ) , new constantNode ( 2 ) ] ) ; var b:==:new operatorNode ( ' + ' , ' add ' , [ new symbolNode ( ' x ' ) , new constantNode ( 2 ) ] ) ;
var startPoint = curve . startPoint ; var endPoint:==:curve . endPoint ;
var cursorLayer = imports . cursorLayer ; var authorLayer:==:imports . authorLayer ;
var onChange = _ props2 . onChange ; var onFocus:==:_ props2 . onFocus ;
var ephMarkerUsed = context . cod . ephMarkerUsed ; var packetsIterator:==:tile . packetsIterator ;
var keys = Object . keys ( data ) ; var length:==:keys . length ;
var npm = require ( ' npm ' ) ; var semver:==:require ( ' semver ' ) ;
var tagName = element . tagName . toLowerCase ( ) ; var type:==:element . getAttribute ( ' type ' ) ;
var shell = require ( ' gulp - shell ' ) ; var webpack:==:require ( ' webpack ' ) ;
var Plugin = imports . Plugin ; var layout:==:imports . layout ;
var extrudedHeight = options . extrudedHeight ; var extrude:==:defined ( extrudedHeight ) ;
var Selector = powerbi . data . Selector ; var valueFormatter:==:powerbi . visuals . valueFormatter ;
var frame = domWindow . frames [ i ] ; var frameElement:==:frame . frameElement  |  |  frame ;
var context = data . context ; var dependencies:==:data . dependencies ;
var destroyTables = window . destroyTables ; var fakeGroupRow:==:window . fakeGroupRow ;
var nodeFieldCount = this . _ nodeFieldCount ; var nodeCount:==:this . nodeCount ;
var b = new symbolNode ( ' epsilon ' ) ; var mult:==:new operatorNode ( ' * ' , ' multiply ' , [ a , b ] ) ;
var p2 = p2 : 23 ; var o:==:o : 34 ;
var React = require ( ' React ' ) ; var Site:==:require ( ' Site ' ) ;
var fillStyle = ctx . fillStyle ; var arcScalex:==:ctx . arcScalex _ ;
var group = groups [ o ] ; var start:==:group . start ;
var childNodes = element . childNodes ; var len:==:childNodes . length ;
var domTokenList = scope . wrappers . domTokenList ; var parentNodeInterface:==:scope . parentNodeInterface ;
var provider = this . provider ; var columns:==:provider . columns ;
var data = scenario . data ; var db:==:client . db ( scenario . database_name ) ;
var User = db . model ( ' userWithBufferId ' , userSchema , random ( ) ) ; var note:==:db . model ( ' noteWithBufferId ' , noteSchema , random ( ) ) ;
var currentStyle = cs [ ' currentStyle ' ] ; var defaultView:==:doc . defaultView ;
var plugin = $ ( this ) . attr ( ' plugin ' ) ; var action:==:$ ( this ) . attr ( ' action ' ) ;
var replicasetName = options . replicasetName  |  |  ' rs ' ; var writeConcern:==:options . writeConcern  |  |  w : 1 ;
var symbolDraw = this . _ symbolDraw ; var lineDraw:==:this . _ lineDraw ;
var n = doc . nums . shift ( ) ; var s:==:doc . strs . shift ( ) ;
var push = arr . push ; var indexOf:==:arr . indexOf ;
var promisify = require ( ' promisify - any ' ) . use ( Promise ) ; var util:==:require ( ' util ' ) ;
var Plugin = imports . Plugin ; var commands:==:imports . commands ;
var findRangesImmutable = require ( ' findRangesImmutable ' ) ; var invariant:==:require ( ' invariant ' ) ;
var west = rectangle . west ; var south:==:rectangle . south ;
var c = computed ( function ( ) return a . get ( ) * b . get ( ) ) ; var d:==:computed ( function ( ) return c . get ( ) * b . get ( ) ) ;
var createContinueStatement = parseTreeFactory . createContinueStatement ; var createCatchStatement:==:parseTreeFactory . createCatchStatement ;
var inquirer = require ( ' inquirer ' ) ; var path:==:require ( ' path ' ) ;
var split = stack . split ( rline ) ; var len:==:split . length ;
var canvas = document . createElement ( ' canvas ' ) ; var gl:==:canvas . getContext ( ' webgl ' )  |  |  canvas . getContext ( ' experimental - webgl ' ) ;
var join = require ( ' path ' ) . join ; var extend:==:require ( ' util ' ) . _ extend ;
var writeConcern = options . writeConcern  |  |  w : 1 ; var writeConcernMax:==:options . writeConcernMax  |  |  w : 1 ;
var a = m . observable ( 2 ) ; var b:==:m . observable ( 3 ) ;
var commands = imports . commands ; var c9:==:imports . c9 ;
var ifStatement = traceur . syntax . trees . ifStatement ; var labelledStatement:==:traceur . syntax . trees . labelledStatement ;
var eventPluginRegistry = require ( ' eventPluginRegistry ' ) ; var reactDebugCurrentFiber:==:require ( ' reactDebugCurrentFiber ' ) ;
var a23 = this . a23 ; var a31:==:this . a31 ;
var selected = chooser . find ( source ) . children ( ' option : selected ' ) ; var dest:==:chooser . find ( dest ) ;
var t = SVG . TeX . rule_thickness * scale ; var h:==:( sub |  | presub ) . h , d    ( sup |  | presup ) . d ;
var handleLabels = displaybles . handleLabels = [ ] ; var barGroup:==:this . _ displayables . barGroup ;
var invertUV = options . invertUV  |  |  false ; var updatable:==:options . updatable ;
var progressFn = jasmine . createSpy ( ' progressFn ' ) ; var uploadProgressFn:==:jasmine . createSpy ( ' uploadProgressFn ' ) ;
var stream = require ( ' stream ' ) ; var errors:==:require ( ' restify - errors ' ) ;
var asset = loaderData . json . asset  |  |  ; var version:==:gltfFileLoader . _ parseVersion ( asset . version ) ;
var scrollX = this . workspace _ . scrollX ; var scale:==:this . workspace _ . scale ;
var processDecelerationRate = require ( ' processDecelerationRate ' ) ; var requireNativeComponent:==:require ( ' requireNativeComponent ' ) ;
var options = self . options ; var canvas:==:self . canvas ;
var filters = require ( ' pug - filters ' ) ; var link:==:require ( ' pug - linker ' ) ;
var children = _ props . children ; var childStyle:==:_ props . childStyle ;
var outlineView = document . getElementById ( ' outlineView ' ) ; var attachmentsView:==:document . getElementById ( ' attachmentsView ' ) ;
var breakStatement = exports . breakStatement = buildLabelStatement ( ' break ' ) ; var throwStatement:==:exports . throwStatement    buildLabelStatement ( ' throw ' , ' argument ' ) ;
var uglify = require ( ' gulp - uglify ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var name = device . name  |  |  device . address ; var paired:==:device . paired ;
var async = require ( ' async ' ) ; var vizion:==:require ( ' vizion ' ) ;
var Terminal = imports . terminal . Terminal ; var debug:==:imports . debugger ;
var i = trace . a2i ( aval ) ; var j:==:trace . b2j ( bval ) ;
var translate = language . set ( env . settings . language ) . translate ; var PORT:==:env . PORT ;
var customData = options . customData ! = null ? options . customData : ; var roles:==:array . isArray ( options . roles ) ? options . roles : [ ] ;
var at = options & & options . at ; var sort:==:( ( options & & options . sort )     null ? true : options . sort ) ;
var x = pointX - ul . x ; var y:==:pointY - ul . y ;
var api = scope . api . instance . attributes ; var PUBLISHED:==:api . PUBLISHED ;
var initRowActions = window . initRowActions ; var fakeSumRow:==:window . fakeSumRow ;
var target = target_style [ output_prop_name ] ; var curr:==:current_style [ output_prop_name ] ;
var status = response [ ' @status ' ] ; var reason:==:response [ ' @reason ' ] ;
var cyanA100 = exports . cyanA100 = ' # 84ffff ' ; var cyanA200:==:exports . cyanA200    ' # 18ffff ' ;
var description = queryStringValue ( node , ' description ' , namespaces . kml ) ; var balloonStyle:==:defaultValue ( entity . balloonStyle , styleEntity . balloonStyle ) ;
var width = attributes . width  |  |  ' 100% ' ; var height:==:attributes . height  |  |  ' 100% ' ;
var isMap   = immutable . map . isMap ; var list:==:immutable . list ;
var stack = this . stacks [ fontstack ] ; var atlas:==:this . atlases [ fontstack ] ;
var from = Ledger . findOne ( name : from_name , world : world ) ; var to:==:ledger . findOne ( name : to_name , world : world ) ;
var pipeline = new _ pipeline2 . default ( ) ; var analyse:==:exports . analyse    pipeline . analyse . bind ( pipeline ) ;
var el = this . el = document . createElement ( ' a - assets ' ) ; var scene:==:this . scene    document . createElement ( ' a - scene ' ) ;
var block1 = blockManager . getBlock ( jQuery ( ' # block1 ' , testContainer ) ) ; var block2:==:blockManager . getBlock ( jQuery ( ' # block2 ' , testContainer ) ) ;
var thisArg = state . thisArg ; var project:==:state . project ;
var tmp = require ( ' tmp ' ) ; var debug:==:require ( ' debug ' ) ( ' ssh ' ) ;
var node = options . node ; var ellipsisIndex:==:options . ellipsisIndex  |  |  3 ;
var req = this . req ; var res:==:this . res ;
var overflow = _ style . overflow ; var overflowX:==:_ style . overflowX ;
var columnNumber = currentFrame . _ location . columnNumber ; var scriptId:==:currentFrame . _ location . scriptId ;
var image = self . image ; var canvas:==:self . canvas ;
var entityName = model . entityNames . session ; var localSessionSort:==:breezeConfig . localSessionSort ;
var toString = objProto . toString ; var hasOwnProperty:==:objProto . hasOwnProperty ;
var chargingTime = battery . chargingTime ; var dischargingTime:==:battery . dischargingTime ;
var launchapp = document . getElementById ( ' launchapp ' ) . checked ; var piurl:==:document . getElementById ( ' piurl ' ) . value . trim ( ) ;
var template = el . attr ( ' data - template ' ) ; var location:==:el . attr ( ' data - location ' ) ;
var rimraf = require ( ' gulp - rimraf ' ) ; var sequence:==:require ( ' gulp - sequence ' ) ;
var flowStartLevels = timelineData . flowStartLevels ; var flowEndLevels:==:timelineData . flowEndLevels ;
var startrow = tileLayout . startrow ; var rowSign:==:this . rowSign ;
var originalEvent = event . originalEvent ; var action:==:this . action ;
var paddingLeft = this . _ paddingLeft ; var minWidth:==:this . _ minWidth ;
var isWrapper = scope . isWrapper ; var mixin:==:scope . mixin ;
var stride = primitive . stride ; var vcount:==:primitive . vcount ;
var right = frustum . right ; var left:==:frustum . left ;
var path = require ( ' path ' ) ; var swig:==:require ( ' swig ' ) ;
var rows = api . rows ( target ) ; var settings:==:rows . settings ( ) [ 0 ] ;
var start = Arr . find ( getFirstChildren ( elm ) , fun . curry ( compare . eq , startNode ) ) ; var end:==:arr . find ( getLastChildren ( elm ) , fun . curry ( compare . eq , endNode ) ) ;
var inner = ' inner ' ; var baz:==:' baz inner ' ;
var x = q . x ( ) ; var y:==:q . y ( ) ;
var test = node . test ; var consequent:==:node . consequent ;
var manifest = app . manifest  |  |  app . updateManifest ; var role:==:manifest . role ;
var OTHER = ci . OTHER ; var AT:==:ci . AT ;
var w = Math . floor ( rect . width * pixelWidth ) ; var h:==:math . floor ( rect . height * pixelHeight ) ;
var manifest = this . getEntryManifest ( manifesturl ) ; var locales:==:manifest . locales ;
var newRev = msg . newRev ; var changeset:==:msg . changeset ;
var drop = tmp . drop ; var quest:==:tmp . quest ;
var label = item . label ; var show:==:entity . isShowing & & entity . isAvailable ( time ) & & property . getValueOrDefault ( labelGraphics . _ show , time , true ) ;
var h = flags . height ; var c:==:flags . channels ;
var tokenType = traceur . syntax . tokenType ; var stringBuilder:==:traceur . util . stringBuilder ;
var child_process = require ( ' child_process ' ) ; var util:==:require ( ' util ' ) ;
var ciphertext = cipherParams . ciphertext ; var salt:==:cipherParams . salt ;
var options = grunt . config ( [ this . name ] ) . options ; var templateFile:==:required ( options , ' templateFile ' ) ;
var type = require ( ' type ' ) ; var has:==:Object . prototype . hasOwnProperty ;
var PRIMARY = ' PRIMARY ' ; var SECONDARY:==:' SECONDARY ' ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , zero_to_fifty , opts ) ;
var c0 = computeImpulseDenominator_c0 ; var vec:==:computeImpulseDenominator_vec ;
var tildify = require ( ' tildify ' ) ; var commander:==:require ( ' commander ' ) ;
var isIE = scope . isIE ; var IMPORT_LINK_TYPE:==:scope . IMPORT_LINK_TYPE ;
var actual = options . actual ; var expected:==:options . expected ;
var w = i * width + j ; var p:==:pixels [ w ] ;
var attrs = current . attrs ( ) ; var classList:==:current . classList ( ) ;
var tab = frame & & tabs . findTab ( frame . path ) ; var editor:==:tab & & tab . isActive ( ) & & tab . editor ;
var sortedCols = this . sortedCols ( ) ; var sortedRows:==:this . sortedRows ( ) ;
var predefinedName = traceur . syntax . predefinedName ; var thisExpression:==:traceur . syntax . trees . thisExpression ;
var type = track . type ; var streamInfo:==:track . streamInfo ;
var word = data . word ; var score:==:Number ( data . score ) ;
var React = require ( ' React ' ) ; var webPlayer:==:require ( ' webPlayer ' ) ;
var wrench = require ( ' wrench ' ) ; var inquirer:==:require ( ' inquirer ' ) ;
var removeAttribute = proto . removeAttribute ; var setAttribute:==:proto . setAttribute ;
var prefix = context & & context . prefix ; var inexport:==:context & & context . inexport ;
var isSingleProp = schema . isSingleProperty ; var styleParser:==:utils . styleParser ;
var i d = layout . i d ; var origin:==:layout . origin ;
var crypto = require ( ' crypto ' ) ; var stream:==:require ( ' stream ' ) ;
var appsService = _ appJsServicesAppsService [ ' default ' ] ; var httpClientService:==:_ appJsServicesHttpClientService [ ' default ' ] ;
var styleSheet = require ( ' styleSheet ' ) ; var text:==:require ( ' text ' ) ;
var editable = this . editable . updateTime  |  |  this . editable . updateGroup ; var className:==:( this . data . className ? ' ' + this . data . className : '' ) + ( this . selected ? ' vis - selected ' : '' ) + ( editable ? ' vis - editable ' : ' vis - readonly ' ) ;
var eq = semver . eq ; var gt:==:semver . gt ;
var makeSpan = buildCommon . makeSpan ; var fontMap:==:buildCommon . fontMap ;
var near = frustum . near ; var far:==:frustum . far ;
var View = require ( ' View ' ) ; var Text:==:require ( ' f8Text ' ) ;
var date = req . headers . date ; var log:==:req . log ;
var Tree = imports . Tree ; var test:==:imports . test ;
var lis = $ . event . listeners ; var len:==:lis . length ;
var keys = es5 . keys ( obj ) ; var len:==:keys . length ;
var scrollDirection = _ ref . scrollDirection ; var startIndex:==:_ ref . startIndex ;
var favorites = imports [ ' tree . favorites ' ] ; var tabManager:==:imports . tabManager ;
var path = require ( ' path ' ) ; var express:==:require ( ' express ' ) ;
var tile = context . tiles [ tileIndex ] ; var sopMarkerUsed:==:context . cod . sopMarkerUsed ;
var nodeCodeType = this . _ nodeCodeType ; var nodeConsStringType:==:this . _ nodeConsStringType ;
var bottom = options . bottom  |  |  wall ; var perPositionHeight:==:options . perPositionHeight ;
var addressTo = tx . addressTo ? tx . addressTo : '' ; var txid:==:tx . txid ? tx . txid : '' ;
var scrollResponder = require ( ' scrollResponder ' ) ; var staticRenderer:==:require ( ' staticRenderer ' ) ;
var y = pos . y ; var x:==:pos . x ;
var packageMap = options . packageMap ; var isopackCache:==:options . isopackCache ;
var utils = require ( ' utils ' ) ; var server:==:require ( ' webserver ' ) . create ( ) ;
var service = request . service ; var bucketRegionCache:==:service . bucketRegionCache ;
var calendar = t . calendar ; var formatDate:==:calendar . formatDate ;
var createStringLiteral = parseTreeFactory . createStringLiteral ; var options:==:traceur . options . transform ;
var view = this . view , buffer = this . view . buffer ; var w:==:view . w , h    view . h ;
var win = opt_win  |  |  goog . global ; var doc:==:( win . Document & & win . Document . prototype )  |  |  win . document ;
var e = rounded . exponent ; var c:==:rounded . coefficients ;
var error = sharedUtil . error ; var shadow:==:sharedUtil . shadow ;
var getNodeForCharacterOffset = require ( ' getNodeForCharacterOffset ' ) ; var getTextContentAccessor:==:require ( ' getTextContentAccessor ' ) ;
var data = reader . data ( result ) ; var model:==:new reader . model ( data [ 0 ] ) ;
var mocha = require ( ' gulp - spawn - mocha ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var materials = this . parseMaterials ( json . materials , textures ) ; var object:==:this . parseObject ( json . object , geometries , materials ) ;
var c = decode_col ( $ 3 ) - base . c ; var r:==:decode_row ( $ 5 ) - base . r ;
var importClause = this . transformAny ( tree . importClause ) ; var moduleSpecifier:==:this . transformAny ( tree . moduleSpecifier ) ;
var fs = require ( ' fs ' ) ; var hyperstream:==:require ( ' hyperstream ' ) ;
var hostname = urlParts . hostname ; var protocol:==:urlParts . protocol ;
var user = this . analytics . user ( ) ; var events:==:this . events ( event ) ;
var state = cm . state . lint , options = state . options ; var annotations:==:groupByLine ( annotationsNotSorted ) ;
var edgeWeakType = this . _ edgeWeakType ; var edgeShortcutType:==:this . _ edgeShortcutType ;
var changedIndex = options . changedIndex ; var criticalOnly:==:options . criticalOnly ;
var isValidBounds = leafletBoundsHelpers . isValidBounds ; var isUndefinedOrEmpty:==:leafletHelpers . isUndefinedOrEmpty ;
var lowerThreshold = volume . lowerThreshold ; var windowLow:==:volume . windowLow ;
var c = new blockNode ( [ node : new symbolNode ( ' x ' ) , node : new constantNode ( 4 ) ] ) ; var d:==:new blockNode ( [ node : new symbolNode ( ' x ' ) , node : new constantNode ( 2 ) , visible : false ] ) ;
var edgeTypeOffset = this . _ edgeTypeOffset ; var edgeNameOffset:==:this . _ edgeNameOffset ;
var style = textContent . styles [ textItem . fontName ] ; var text:==:document . createElementns ( svg_ns , ' svg : text ' ) ;
var o = this . options ; var portlet:==:$ ( event . target ) . parents ( ' . ui - portlet ' ) ;
var query = options . query ; var getName:==:options . getName ;
var firstDayOfWeek = self . l10n . firstDayOfWeek ; var weekdays:==:self . l10n . weekdays . shorthand . slice ( ) ;
var box = BABYLON . Mesh . createBox ( ' box ' , 6 . 0 , scene ) ; var sphere:==:babylon . mesh . createSphere ( ' sphere ' , 10 . 0 , 10 . 0 , scene ) ;
var assert = require ( ' chai ' ) . assert ; var socket:==:require ( ' socket . io ' ) ;
var maxblur = ( params . maxblur ! = = undefined ) ? params . maxblur : 1 . 0 ; var width:==:params . width  |  |  window . innerWidth  |  |  1 ;
var viewMode = options . viewMode ; var container:==:this . container ;
var utils = require ( ' keystone - utils ' ) ; var debug:==:require ( ' debug ' ) ( ' keystone : core : list : register ' ) ;
var request = bbPromise . promisify ( require ( ' request ' ) ) ; var util:==:require ( ' gulp - util ' ) ;
var start = this . options . start ! = undefined ? this . options . start : null ; var end:==:this . options . end !   undefined ? this . options . end : null ;
var extend = require ( ' extend ' ) ; var bail:==:require ( ' bail ' ) ;
var MEMBER_LOOKUP_EXPRESSION = ' MEMBER_LOOKUP_EXPRESSION ' ; var METHOD:==:' METHOD ' ;
var current = $ . layerdrag . current ; var data:==:$ . data ( current . el , ' layer - drag ' ) ;
var items = this . els . items ; var source:==:this . source ;
var isLoading = this . state . isLoading ; var inputValue:==:this . inputValue ( ) ;
var matches = require ( ' matches - selector ' ) ; var bindings:==:require ( ' ampersand - dom - bindings ' ) ;
var rowCount = _ props3 . rowCount ; var scrollToAlignment:==:_ props3 . scrollToAlignment ;
var age = child . getChildNode ( ' age ' ) ; var alive:==:child . getChildNode ( ' alive ' ) ;
var datePickerAndroid = require ( ' datePickerAndroid ' ) ; var react:==:require ( ' react ' ) ;
var ruby = createElement ( ' ruby ' ) ; var rt:==:createElement ( ' rt ' ) ;
var ele = that . ele ; var cur:==:that . curIndex ;
var keys = this . keys ; var params:==:this . params ;
var owned = user . items . gear . owned ; var tier:==:( user . backer & & user . backer . tier )  |  |  0 ;
var Marked = require ( ' Marked ' ) ; var Metadata:==:require ( ' Metadata ' ) ;
var a = face . a ; var b:==:face . b ;
var button = this . mapping . buttons [ evt . detail . i d ] ; var buttonMeshes:==:this . buttonMeshes ;
var pie = nv . models . pie ( ) ; var legend:==:nv . models . legend ( ) ;
var _ exitRecog = module [ ' _ exitRecog ' ] = asm [ ' _ exitRecog ' ] ; var _ initPrediction:==:module [ ' _ initPrediction ' ]    asm [ ' _ initPrediction ' ] ;
var blob = obj . blob ; var callback:==:obj . callback ;
var reactNative = require ( ' reactNative ' ) ; var styleSheet:==:require ( ' styleSheet ' ) ;
var _ saveSetjmp = module [ ' _ saveSetjmp ' ] = asm [ ' _ saveSetjmp ' ] ; var _ strcat:==:module [ ' _ strcat ' ]    asm [ ' _ strcat ' ] ;
var flatten = require ( ' array - flatten ' ) ; var mime:==:require ( ' send ' ) . mime ;
var glTexture = this . _ glTextures [ i ] ; var gl:==:pixi . glContexts [ i ] ;
var name = formData [ i ] . name ; var value:==:formData [ i ] . value ;
var createReturnStatement = traceur . codegeneration . parseTreeFactory . createReturnStatement ; var parseTreeTransformer:==:traceur . codegeneration . parseTreeTransformer ;
var tangents = attr . tangents ; var bitangents:==:attr . bitangents ;
var isString = leafletHelpers . isString ; var isNumber:==:leafletHelpers . isNumber ;
var name = error . name ? error . name . toString ( ) : ' error ' ; var message:==:error . message ? error . message . toString ( ) : ' ' ;
var error = require ( ' http - error ' ) ; var path:==:require ( ' path ' ) ;
var el = this . $ element ; var icon:==:el . getAttribute ( ' data - icon ' ) ;
var graph = this . graph = params . graph  |  |  new Graph ( ) ; var stiffness:==:params . stiffness  |  |  400 . 0 ;
var e = Y . Cookie . getSub ( ' data ' , ' e ' ) ; var g:==:y . cookie . getSub ( ' data ' , ' g ' ) ;
var name = options . name ; var legacy:==:options . legacy ;
var preventDefault = options & & options . preventDefault  |  |  false ; var container:==:options & & options . container  |  |  window ;
var schema = res . schema ; var baseId:==:res . baseId ;
var fieldTestObjectsPath = require ( ' keystone - nightwatch - e2e ' ) . fieldTestObjectsPath ; var path:==:require ( ' path ' ) ;
var decimal = require ( ' is - decimal ' ) ; var hexadecimal:==:require ( ' is - hexadecimal ' ) ;
var f = new global . uint32Array ( buffer ) ; var g:==:new global . float32Array ( buffer ) ;
var Font = coreFonts . font ; var identityToUnicodeMap:==:coreFonts . identityToUnicodeMap ;
var batchedBridge = require ( ' batchedBridge ' ) ; var react:==:require ( ' react ' ) ;
var serviceName = document . getElementById ( ' serviceNameAccept ' ) . value ; var bindToAny:==:document . getElementById ( ' bindToAny ' ) . checked ;
var g = e . dygraph ; var setName:==:e . setName ;
var b = cd [ 0 ] . b ; var contours:==:trace . contours ;
var vError = mod_verror . vError ; var wError:==:mod_verror . wError ;
var legendIcon = powerbi . visuals . legendIcon ; var selectionIdBuilder:==:powerbi . visuals . selectionIdBuilder ;
var sourcemaps = require ( ' gulp - sourcemaps ' ) ; var browserify:==:require ( ' browserify ' ) ;
var innerStyle = props . innerStyle ; var opacity:==:props . opacity ;
var jqwerty = _ interopRequire ( _ jqwerty ) ; var jqwertyui:==:_ interopRequire ( _ jqwertyui ) ;
var tab = tabs . focussedTab ; var pane:==:tabs . focussedTab . pane ;
var limit = options . limit ; var hint:==:options . hint ;
var emailFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' emailFieldTestObject ' ) ) ; var passwordFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' passwordFieldTestObject ' ) ) ;
var prompt = require ( ' prompt ' ) ; var semver:==:require ( ' semver ' ) ;
var onSave = this . ne . options . onSave ; var selectedInstance:==:this . ne . selectedInstance ;
var gl = this . glplot . gl ; var w:==:gl . drawingBufferWidth ;
var newExpression = traceur . syntax . trees . newExpression ; var nullTree:==:traceur . syntax . trees . nullTree ;
var gl = painter . gl ; var bufferGroups:==:bucket . bufferGroups . fill ;
var vx = this . vx * damping + ( gravity . x + this . f . x * this . m_inv ) * dt ; var vy:==:this . vy * damping + ( gravity . y + this . f . y * this . m_inv ) * dt ;
var renderers = window . _ _ REACT_DEVTOOLS_GLOBAL_HOOK _ _ . _ renderers ; var renderer:==:renderers [ Object . keys ( renderers ) [ 0 ] ] ;
var next = this . newBlock ( ' next of ifexp ' ) ; var end:==:this . newBlock ( ' end of ifexp ' ) ;
var m = mean  |  |  0 ; var s:==:sd  |  |  1 ;
var o = this . options ; var content:==:frame . children ( ' . content ' ) ;
var message = mockMessage ( messageId : presidentialId ) ; var handler:==:handlerStub . withArgs ( ' cellbroadcast - received ' ) . args [ 0 ] [ 1 ] ;
var uri = item . data . uri ; var text:==:item . data . text ;
var mediaList = this . _ mediaList ; var mediaDefault:==:this . _ mediaDefault ;
var left = targetPos . left + targetOffset . left - offset . left ; var top:==:targetPos . top + targetOffset . top - offset . top ;
var item = items [ i ] ; var jid:==:item . getAttribute ( ' jid ' ) ;
var DOCUMENT_POSITION_PRECEDING = Node . DOCUMENT_POSITION_PRECEDING ; var DOCUMENT_POSITION_FOLLOWING:==:Node . DOCUMENT_POSITION_FOLLOWING ;
var MAX_SAFE_INTEGER = Number . MAX_SAFE_INTEGER  |  |  9007199254740991 ; var MIN_SAFE_INTEGER:==:Number . MIN_SAFE_INTEGER  |  |  -9007199254740991 ;
var pass = shadowMap . _ passes [ i ] ; var framebuffer:==:pass . framebuffer ;
var fs = require ( ' fs ' ) ; var async:==:require ( ' async ' ) ;
var scene = document . createElement ( ' a - scene ' ) ; var assets:==:document . createElement ( ' a - assets ' ) ;
var parenExpression = traceur . syntax . trees . parenExpression ; var parseTreeType:==:traceur . syntax . trees . parseTreeType ;
var error = batch ( firebaseObject . $ $ error , firebaseObject ) ; var initComplete:==:batch ( _ initComplete ) ;
var docsPages = constants . docsPages ; var examplePages:==:constants . examplePages ;
var value = node . value ; var isNew:==:node . isNew ;
var commonsChunkPlugin = webpack . optimize . commonsChunkPlugin ; var fs:==:require ( ' fs ' ) ;
var mom = $ . fullCalendar . moment . utc ( ' 2014 - 06 - 08t00 : 00 : 00 ' ) ; var dur:==:moment . duration ( ' 13 : 25 ' ) ;
var headers = metadata . _ headers ; var identity:==:this . _ connection . server . identity ;
var constraints = options . constraints  |  |  defaults . constraints ; var optional:==:options . optional  |  |  defaults . optional ;
var scene3dOnly = frameState . scene3dOnly ; var alpha:==:model . color . alpha ;
var createEmptyStatement = parseTreeFactory . createEmptyStatement ; var createExpressionStatement:==:parseTreeFactory . createExpressionStatement ;
var color = cpal . colorRecords [ rec . paletteIndex ] ; var g:==:this . _ font . _ getBaseGlyph ( rec . gid ) ;
var name = ref . name ; var tmpl:==:ref . tmpl ;
var radius = opts & & opts . radius ! = = undefined ? opts . radius : 0 . 3 ; var height:==:opts & & opts . height !    undefined ? opts . height : 1 . 0 ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var spawn:==:require ( ' child_process ' ) . spawn ;
var createMemberExpression = parseTreeFactory . createMemberExpression ; var createNullLiteral:==:parseTreeFactory . createNullLiteral ;
var collabPanel = imports . collabPanel ; var collab:==:imports . collab ;
var props = this . props ; var frame:==:this . dom . frame ;
var vertexCount = parseInt ( polygon . m_vertexcount ) ; var vertices:==:polygon . m_vertices ;
var f = findType ( node . callee , scope ) . getFunctionType ( ) ; var proto:==:f & & f . getProp ( ' prototype ' ) . getType ( ) ;
var isUnary = abbrUtils . isUnary ( item ) ; var tagName:==:profile . tagName ( item . name ( ) ) ;
var mcc = this . _ iccSettings . mcc ; var mnc:==:this . _ iccSettings . mnc ;
var uvs1    = opts & & opts . uvs1 ! = = undefined ? opts . uvs1 : null ; var indices:==:opts & & opts . indices !    undefined ? opts . indices : null ;
var y = Math . abs ( args . start . y - args . pos . y ) ; var r:==:Math . sqrt ( Math . pow ( x , 2 ) + Math . pow ( y , 2 ) ) ;
var jsonResultsAdapter = mappingContext . jsonResultsAdapter ; var typeMap:==:jsonResultsAdapter . typeMap ;
var FORMAL_PARAMETER_LIST = ' FORMAL_PARAMETER_LIST ' ; var FORWARD_DEFAULT_EXPORT:==:' FORWARD_DEFAULT_EXPORT ' ;
var hasHighlights = data . hasHighlights ; var margin:==:this . margin ;
var pvrtc = extras . compressedImage3dTiles . pvrtc1 ; var etc1:==:extras . compressedImage3dTiles . etc1 ;
var fs   = require ( ' fs ' ) ; var path:==:require ( ' path ' ) ;
var question = imports [ ' dialog . question ' ] ; var Menu:==:imports . Menu ;
var xstep = this . xstep ; var ystep:==:this . ystep ;
var TYPE_ARGUMENTS = ' TYPE_ARGUMENTS ' ; var TYPE_NAME:==:' TYPE_NAME ' ;
var X = cs . MXA * AGR + cs . MXB * BGG + cs . MXC * CGB ; var Y:==:cs . MYA * AGR + cs . MYB * BGG + cs . MYC * CGB ;
var req = msg . req ; var res:==:msg . res ;
var camera = scene . camera ; var canvas:==:scene . canvas ;
var url = require ( ' url ' ) ; var request:==:require ( ' request ' ) ;
var controllerEuler = this . controllerEuler ; var controllerPosition:==:this . controllerPosition ;
var n = L [ 0 ] . length-1 , m = Bi . length-1 ; var x:==:numeric . rep ( [ n ] , 0 ) , xj    Array ( n ) ;
var columnMaxWidth = _ props . columnMaxWidth ; var columnMinWidth:==:_ props . columnMinWidth ;
var data = dataArray ; var graph:==:document . getElementById ( ' graph ' ) ;
var m = a ( document . body ) ; var n:==:a ( j . join ( '' ) ) . appendTo ( m ) ;
var disableFocusRipple = _ props3 . disableFocusRipple ; var disableKeyboardFocus:==:_ props3 . disableKeyboardFocus ;
var unicodeUtils = require ( ' unicodeUtils ' ) ; var findRangesImmutable:==:require ( ' findRangesImmutable ' ) ;
var functionDeclaration = traceur . syntax . trees . functionDeclaration ; var objectPatternField:==:traceur . syntax . trees . objectPatternField ;
var styleSheetValidation = require ( ' styleSheetValidation ' ) ; var flatten:==:require ( ' flattenStyle ' ) ;
var async = require ( ' async ' ) ; var assign:==:require ( ' object - assign ' ) ;
var LIST_TYPE = firepad . lineFormatting . list_type ; var codeMirror:==:global . codeMirror ;
var React = require ( ' React ' ) ; var styleSheet:==:require ( ' styleSheet ' ) ;
var lzwStream = coreStream . lzwStream ; var nullStream:==:coreStream . nullStream ;
var reactNativeAttributePayload = require ( ' reactNativeAttributePayload ' ) ; var reactNativeComponentTree:==:require ( ' reactNativeComponentTree ' ) ;
var styleSheet = require ( ' styleSheet ' ) ; var text:==:require ( ' f8Text ' ) ;
var bower = require ( ' bower ' ) ; var wrench:==:require ( ' wrench ' ) ;
var Double = powerbi . Double ; var textMeasurementService:==:powerbi . textMeasurementService ;
var deviceInfo = require ( ' deviceInfo ' ) ; var eventEmitter:==:require ( ' eventEmitter ' ) ;
var PDF = goog . i18n . bidi . Format . PDF ; var LTR:==:goog . i18n . bidi . Dir . LTR ;
var replace = require ( ' gulp - replace ' ) ; var webpack:==:require ( ' webpack - stream ' ) ;
var min = this . options . min = = = 0 ? 0 : Math . log ( this . options . min ) ; var max:==:Math . log ( this . options . max ) ;
var parent = s . parent ; var pinv:==:s . pinv ;
var w = wNative ; var h:==:hNative ;
var isAndroid = platformInfo . isAndroid ; var isios:==:platformInfo . isios ;
var element = this . element , o = this . options ; var bar:==:element . children ( ' . bar : last - child ' ) ;
var ok = options . ok  |  |  function ( ) ; var cancel:==:options . cancel  |  |  function ( ) ;
var editingNode = instance . editingNode ; var tabView:==:instance . tabView ;
var Image = require ( ' Image ' ) ; var f8Touchable:==:require ( ' f8Touchable ' ) ;
var contentContainer = instance . contentContainer ; var dropContainer:==:instance . dropContainer ;
var pets = _ getFormattedItemReference ( ' items . pets ' , _ . keys ( content . petInfo ) , ' -1 : owns mount , 0 : not owned , 1 - 49 : progress to mount ' ) ; var special:==:_ getFormattedItemReference ( ' items . special ' , _ . keys ( content . special ) , ' numeric quantity ' ) ;
var Column = fixedDataTable . column ; var propTypes:==:react . propTypes ;
var skip = opts . skip  |  |  0 ; var limit:==:typeof opts . limit      ' number ' ? opts . limit : -1 ;
var cesiumWidget = this . _ cesiumWidget ; var container:==:this . _ container ;
var setTimeout = this . setTimeout ; var setInterval:==:this . setInterval ;
var cmd = message . data . cmd ; var arg:==:message . data . arg ;
var data = data . data ; var len:==:data . length ;
var rotate = image . rotate ; var naturalWidth:==:image . naturalWidth ;
var fontAliases = descriptor . fontAliases ; var hash:==:preEvaluatedFont . hash ;
var element = angular . element ( $ document [ 0 ] . getElementById ( dialog . i d ) ) ; var i d:==:element . attr ( ' i d ' ) ;
var multilineTagIndentFactor = parserConfig . multilineTagIndentFactor  |  |  1 ; var multilineTagIndentPastTag:==:parserConfig . multilineTagIndentPastTag ;
var left = chooser . find ( ' select . left ' ) ; var right:==:chooser . find ( ' select . right ' ) ;
var slots = this . data . slots ; var playingBeforeDisable:==:this . data . playingBeforeDisable ;
var styleSheet = require ( ' styleSheet ' ) ; var subscribable:==:require ( ' subscribable ' ) ;
var models = _ _ alloyId9 . models ; var len:==:models . length ;
var cssPropertyOperations = require ( ' cssPropertyOperations ' ) ; var domLazyTree:==:require ( ' domLazyTree ' ) ;
var network = _ mobileConnections [ 0 ] . voice . network ; var iccInfo:==:iccCard . iccInfo ;
var params = options . params , vars = options . vars , callBacks = options . callBacks ; var properties:==:$ extend ( height : options . height , width : options . width , options . properties ) ;
var expect = require ( ' chai ' ) . expect ; var assert:==:require ( ' assert ' ) ;
var path = parse ( req ) . pathname ; var pause:==:utils . pause ( req ) ;
var debug = require ( ' debug ' ) ( ' axm : notify ' ) ; var util:==:require ( ' util ' ) ;
var input = msg . data . input ; var providers:==:this . providers ;
var MONGODB_OLD = nconf . get ( ' MONGODB_OLD ' ) ; var MONGODB_NEW:==:nconf . get ( ' MONGODB_NEW ' ) ;
var p1 = $ ( ' p1 ' ) ; var p2:==:$ ( ' p2 ' ) ;
var frame = this . frame ; var synth:==:this . synth ;
var operations = req . service . api . operations  |  |  ; var operation:==:operations [ req . operation ] ;
var position = positionScratch ; var st:==:stScratch ;
var points = this [ ' points ' ] ; var len:==:points . length ;
var root = new KM . minderNode ( ' root ' ) ; var first:==:new km . minderNode ( ' first ' ) ;
var body = this . transformAny ( tree . body ) ; var condition:==:this . transformAny ( tree . condition ) ;
var account = this . options . account ; var dataset:==:this . options . dataset ;
var child_process = require ( ' child_process ' ) ; var os:==:require ( ' os ' ) ;
var sources = data . sources ; var vertices:==:data . vertices ;
var treeScope = scope . treeScope ; var cloneNode:==:scope . cloneNode ;
var Signal = Tone_signal_Signal ; var Add:==:Tone_signal_Add ;
var uuid = require ( ' hap - nodejs ' ) . uuid ; var inherits:==:require ( ' util ' ) . inherits ;
var writeFile = denodeify ( fs . writeFile ) ; var log:==:denodeify ( require ( ' some - async - logger ' ) ) ;
var stringExtensions = jsCommon . stringExtensions ; var fieldExprPattern:==:powerbi . data . fieldExprPattern ;
var index = this . lastMarker . index ; var line:==:this . scanner . lineNumber ;
var lat = e . latLng . lat ( ) ; var lng:==:e . latLng . lng ( ) ;
var name = $ ( this ) . attr ( ' name ' ) ; var getter:==:GETTER [ $ ( this ) . data ( ' getter ' ) ] ;
var m = hasWeakMap ? weak : sym ; var isPrivateSymbol:==:m . isPrivateSymbol ;
var fontFace = reactCanvas . fontFace ; var measureText:==:reactCanvas . measureText ;
var box = this . dom . box ; var line:==:this . dom . line ;
var buffer = require ( ' vinyl - buffer ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var spawn = require ( ' child_process ' ) . spawn ; var async:==:require ( ' asyncjs ' ) ;
var o1 = foo : foo1 , that1 : ' that1 ' ; var o2:==:foo : foo2 , that2 : ' that2 ' ;
var hash = window . location . hash . substring ( 1 ) ; var lhostlport:==:hash . substring ( hash . indexOf ( ' lhostlport ' ) + 11 , hash . indexOf ( ' & ' ) ) ;
var symbolPosition = itemModel . get ( ' symbolPosition ' )  |  |  ' start ' ; var symbolRotate:==:itemModel . get ( ' symbolRotate ' ) ;
var query = this . _ query . join ( ' & ' ) ; var timeout:==:this . _ timeout ;
var option = gRequire ( ' option ' ) ; var config:==:gRequire ( ' config ' ) ;
var velocityRandomness = options . velocityRandomness ! = = undefined ? options . velocityRandomness : 0 ; var colorRandomness:==:options . colorRandomness !    undefined ? options . colorRandomness : 1 ;
var Parser = cst . Parser ; var sinon:==:require ( ' sinon ' ) ;
var y2 = this . y2 _ ; var align:==:this . align _ ;
var Geolocator = Windows . Devices . Geolocation . Geolocator ; var geolocationAccessStatus:==:windows . devices . geolocation . geolocationAccessStatus ;
var name = parsedAction . properties [ i ] . name ; var targetType:==:parsedAction . properties [ i ] . targetType ;
var density = this . density ( ) ; var str:==:' Sparse Matrix [ ' + string . format ( rows , options ) + ' x ' + string . format ( columns , options ) + ' ] density : ' + string . format ( density , options ) + ' \n ' ;
var admin = require ( ' pomelo - admin ' ) ; var util:==:require ( ' util ' ) ;
var y0 = layout . y0 ; var y:==:layout . y ;
var stdin = Caml_io . stdin ; var stdout:==:Caml_io . stdout ;
var should = chai . should ( ) ; var expect:==:chai . expect ;
var s1 = _ s1 ; var i1:==:_ i1 ;
var path = require ( ' path ' ) ; var redis:==:require ( ' redis ' ) ;
var collection = db . collection ( ' simple_document_insert_with_function_safe_with_promise ' ) ; var o:==:configuration . writeConcernMax ( ) ;
var wrapper = require ( ' gulp - wrapper ' ) ; var to5:==:require ( ' gulp-6to5 ' ) ;
var watcher = imports . watcher ; var save:==:imports . save ;
var show = powerbi . dataViewObject . getValue ( trendProperties , trendLinePropertyNames . show , false ) ; var displayName:==:powerbi . dataViewObject . getValue ( trendProperties , trendLinePropertyNames . displayName ) ;
var done = options . done ; var filter:==:options . filter ;
var latitude = position . coords . latitude ; var longitude:==:position . coords . longitude ;
var point = layout . point ; var offset:==:layout . offset ;
var amber400 = exports . amber400 = ' # ffca28 ' ; var amber500:==:exports . amber500    ' # ffc107 ' ;
var EVENT_END = gestureDetector . event_end = ' end ' ; var event_release:==:gestureDetector . event_release    ' release ' ;
var ui = baidu . editor . ui ; var div:==:document . createElement ( ' div ' ) ;
var isEmpty = this . _ isEmpty ( this . textbox . value ) ; var isValidSubset:==:! isValid & & isFocused & & this . _ isValidSubset ( ) ;
var exceptAligned = this . _ exceptAligned ; var exceptMethod:==:this . _ exceptMethod ;
var duration = this . _ model . get ( ' duration ' ) ; var streamType:==:this . _ model . get ( ' streamType ' ) ;
var relocator = options . relocator ; var helpIndex:==:options . helpIndex ;
var name = this . props . name ; var def:==:this . props . def ;
var dynCall_iiii = Module [ ' dynCall_iiii ' ] = asm [ ' dynCall_iiii ' ] ; var dynCall_vii:==:Module [ ' dynCall_vii ' ]    asm [ ' dynCall_vii ' ] ;
var thead = $ ( ' # phpunit - data thead tr ' ) ; var tbody:==:$ ( ' # phpunit - data tbody ' ) ;
var util = imports . util ; var save:==:imports . save ;
var decimals = cfg . decimals  |  |  8 ; var continuity:==:cfg . continuity  |  |  1 ;
var bind = require ( ' bind ' ) ; var type:==:require ( ' type ' ) ;
var temporal = require ( ' temporal ' ) ; var readline:==:require ( ' readline ' ) ;
var keywords = parserConfig . keywords  |  |  ; var builtin:==:parserConfig . builtin  |  |  ;
var key = keys [ i ] ; var li:==:createElement ( ' li ' , '' ) ;
var tokenUrl = security . tokenUrl ; var scopes:==:security . scopes ;
var west = rectangle . west ; var east:==:rectangle . east ;
var banner = find ( ' . jasmine - banner ' ) ; var alert:==:find ( ' . jasmine - alert ' ) ;
var operatorNode = math . expression . node . operatorNode ; var parenthesisNode:==:math . expression . node . parenthesisNode ;
var createNumberLiteral = parseTreeFactory . createNumberLiteral ; var createOperatorToken:==:parseTreeFactory . createOperatorToken ;
var clientX = getCoord ( ' clientx ' , e ) ; var clienty:==:getCoord ( ' clienty ' , e ) ;
var path = require ( ' path ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var radius = options . radius  |  |  0 . 5 ; var tessellation:==:options . tessellation  |  |  64 ;
var hour = parseInt ( $ ( ' # new - alarm - hour ' ) . val ( ) ) ; var minute:==:parseInt ( $ ( ' # new - alarm - minute ' ) . val ( ) ) ;
var foo = new symbolNode ( ' foo ' ) ; var b:==:new assignmentNode ( foo , b2 ) ;
var webpack = require ( ' webpack ' ) ; var autoprefixer:==:require ( ' autoprefixer ' ) ;
var debug = require ( ' debug ' ) ( ' marionette : tcp - sync ' ) ; var wire:==:require ( ' json - wire - protocol ' ) ;
var run = test . runId ( ) ; var coll:==:new mongo . collection ( ' observeInCallback-'+run , collectionOptions ) ;
var isOrIsAncestorOf = dom . isOrIsAncestorOf ; var getDocument:==:dom . getDocument ;
var pid = req . params . pid ; var vfsid:==:req . params . vfsid ;
var labelEl = instance . get ( ' labelEl ' ) ; var checkEl:==:instance . get ( ' checkEl ' ) ;
var a = fulfillSoon ( ' a ' , 40 ) ; var b:==:fulfillBuiltInSoon ( ' b ' , 30 ) ;
var EXPORT_DECLARATION = parseTreeType . export_declaration ; var export_mapping_list:==:parseTreeType . export_mapping_list ;
var position = this . position ; var transform:==:this . transform ;
var quadraticAt = curveUtil . quadraticAt ; var quadraticDerivativeAt:==:curveUtil . quadraticDerivativeAt ;
var path = require ( ' path ' ) ; var fork:==:require ( ' child_process ' ) . fork ;
var instances = parameters . instances ; var length:==:instances . length ;
var el = helpers . entityFactory ( ) ; var cursorEl:==:this . cursorEl    document . createElement ( ' a - cursor ' ) ;
var user = stackoverflow_data . user ; var badge_count:==:user . badge_counts . bronze + user . badge_counts . silver + user . badge_counts . gold ;
var curMatrix = this . curMatrix ; var ctx:==:this . ctx ;
var progressBar = require ( ' progressBarAndroid ' ) ; var view:==:require ( ' view ' ) ;
var children = this . children ; var len:==:children . length ;
var textToSpeak = args . textToSpeak ; var targetLanguage:==:args . targetLanguage ;
var height = corridor . height ; var extrudedHeight:==:corridor . extrudedHeight ;
var minTextWidth = this . _ minTextWidth ; var barHeight:==:this . _ barHeight ;
var sinon = require ( ' sinon ' ) ; var expect:==:chai . expect ;
var padLeft = _ require . padLeft ; var splitIntoLines:==:_ require . splitIntoLines ;
var fs = bbPromise . promisifyAll ( require ( ' fs - extra ' ) ) ; var gulp:==:require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ;
var warn = sharedUtil . warn ; var arithmeticDecoder:==:coreArithmeticDecoder . arithmeticDecoder ;
var many = props . many ; var one:==:props . one ;
var stackPartitions = math . round ( defaultValue ( options . stackPartitions , 10 ) ) ; var slicePartitions:==:math . round ( defaultValue ( options . slicePartitions , 8 ) ) ;
var watchify = require ( ' watchify ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var e = self . handlers [ event ] ; var index:==:indexOf ( e , callback ) ;
var ideBaseUrl = options . ideBaseUrl ; var dashboardUrl:==:options . dashboardUrl ;
var treeTransform = intersecttrimesh_treetransform ; var minDistNormal:==:intersectconvex_mindistnormal ;
var c = fulfillSoon ( ' c ' , 10 ) ; var d:==:fulfillSoon ( ' d ' , 20 ) ;
var left = offset . left + getCssFloat ( el , ' border - left - width ' ) + scrollbarWidths . left - ( origin ? origin . left : 0 ) ; var top:==:offset . top + getCssFloat ( el , ' border - top - width ' ) + scrollbarWidths . top - ( origin ? origin . top : 0 ) ;
var legacy = require ( ' character - entities - legacy ' ) ; var invalid:==:require ( ' character - reference - invalid ' ) ;
var susp = suspension_stack [ i ] ; var code:==:repl . sk_code_editor . getLine ( susp . lineno - 1 ) ;
var tcpConnectWrap = process . binding ( ' tcp_wrap ' ) . tcpConnectWrap ; var writeWrap:==:process . binding ( ' stream_wrap ' ) . writeWrap ;
var Identify = require ( ' facade ' ) . Identify ; var alias:==:require ( ' alias ' ) ;
var width = $ j ( this ) . css ( ' width ' ) ; var height:==:$ j ( this ) . css ( ' height ' ) ;
var w = window . open ( undefined , iPython . _ target ) ; var base_url:==:this . base_url ;
var green200 = exports . green200 = ' # a5d6a7 ' ; var green300:==:exports . green300    ' # 81c784 ' ;
var prev = this . b1Link . prev ; var next:==:this . b1Link . next ;
var assert = util . assert ; var who:==:util . Module ( ' who ' ) ;
var pageY = touch & & touch . pageY ; var locationX:==:touch & & touch . locationX ;
var target = $ ( e . target ) . closest ( ' th , td ' ) ; var offset:==:target . offset ( ) ;
var camera = this . _ camera ; var frustum:==:camera . frustum ;
var arch = options . arch ; var isopackCache:==:options . isopackCache ;
var lineNumber = frame . location ? frame . location . lineNumber : frame . lineNumber ; var columnNumber:==:frame . location ? frame . location . columnNumber : frame . columnNumber ;
var className = docElement . className ; var classPrefix:==:modernizr . _ config . classPrefix  |  |  '' ;
var showTitle = powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . treemapProps . legend . showTitle , true ) ; var titleText:==:powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . treemapProps . legend . titleText , this . data . legendData . title ) ;
var n = _ n ; var acc:==:_ acc ;
var view = $ ( ' . publication - result . view ' ) ; var remix:==:$ ( ' . publish - dialog . remix ' ) ;
var head = document . getElementsByTagName ( ' head ' ) [ 0 ] ; var link:==:head . appendChild ( document . createElement ( ' link ' ) ) ;
var cullingVolume = frameState . cullingVolume ; var planes:==:scratchCullingVolume . planes ;
var segment = segmentData . segment ; var feature:==:segmentData . feature ;
var menus = imports . menus ; var preview:==:imports . preview ;
var logic = require ( ' logic ' ) ; var scope:==:logic . scope ( ' smtpClient ' ) ;
var path = require ( ' path ' ) ; var forkCheckerPlugin:==:require ( ' awesome - typescript - loader ' ) . forkCheckerPlugin ;
var Menu = nw . Menu ; var menuItem:==:nw . menuItem ;
var feature = gherkin_document . feature ; var language:==:feature . language ;
var currentTime = options . currentTime ; var startTime:==:options . startTime ;
var x = filterArea . x - offsetx ; var y:==:filterArea . y - offsety ;
var block = this . expect ( ' block ' ) ; var mode:==:block . mode ;
var year = o . defaultViewDate . year  |  |  new date ( ) . getFullYear ( ) ; var month:==:o . defaultViewDate . month  |  |  0 ;
var restify = require ( ' restify ' ) ; var errors:==:require ( ' restify - errors ' ) ;
var a = this . curve . a ; var tinv:==:this . curve . tinv ;
var edit = evt . getProperty ( ' edit ' ) ; var changes:==:edit . changes ;
var jsdoc = require ( ' gulp - jsdoc3 ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var listeningTo = this . _ listeningTo  |  |  ( this . _ listeningTo = ) ; var listening:==:listeningTo [ i d ] ;
var BAD = 30 ; var MEM:==:31 ;
var parse5 = require ( ' parse5 ' ) ; var remark:==:require ( ' remark ' ) ;
var o = self . opts ; var el:==:self . el    createEl ( null , className : o . className ) ;
var sqExprBuilder = powerbi . data . sqExprBuilder ; var semanticFilter:==:powerbi . data . semanticFilter ;
var path = require ( ' path ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var clientWidth = grid . clientWidth  |  |  0 ; var offsetWidth:==:grid . offsetWidth  |  |  0 ;
var ext = path . extname ( name ) ; var base:==:path . basename ( name , ext ) ;
var propertyNameAssignment = traceur . syntax . trees . propertyNameAssignment ; var restParameter:==:traceur . syntax . trees . restParameter ;
var color = this . color . buildCode ( builder , ' c ' , slot : ' color ' ) ; var specular:==:this . specular . buildCode ( builder , ' c ' ) ;
var manifestURL = layout . manifestURL ; var path:==:layout . path ;
var express = require ( ' express ' ) ; var compression:==:require ( ' compression ' ) ;
var headerNames = parseOutput . headerNames ; var headerTypes:==:parseOutput . headerTypes ;
var align = definition . align ; var size:==:definition . size ;
var url_for = ctx . extend . helper . get ( ' url_for ' ) ; var config:==:ctx . config ;
var createBlock = parseTreeFactory . createBlock ; var createVariableStatement:==:parseTreeFactory . createVariableStatement ;
var extractNumberSymbols = closurei18nExtractor . extractNumberSymbols ; var extractCurrencySymbols:==:closurei18nExtractor . extractCurrencySymbols ;
var tabPosition = this . options . tabPosition ; var h:==:math . floor ( outerHeight ( element , true ) ) + ( tabPosition      ' left '  |  |  tabPosition      ' right ' ? 2 : this . tabsHeight ) ;
var start = this . start ; var stop:==:this . stop ;
var segments = opts & & opts . segments ! = = undefined ? opts . segments : 30 ; var sides:==:opts & & opts . sides !    undefined ? opts . sides : 20 ;
var f = ' ' f ' ' ; var g:==:' ' g ' ' ;
var dur = this . _ duration * 0 . 001 ; var pos:==:this . _ position * 0 . 001 ;
var executeDirectDispatch = eventPluginUtils . executeDirectDispatch ; var hasDispatches:==:eventPluginUtils . hasDispatches ;
var dataViewObjects = powerbi . dataViewObjects ; var colorHelper:==:powerbi . visuals . colorHelper ;
var samplingRate = this . samplingRate ; var createViewNode:==:this . createViewNode ;
var catchBody = this . transformAny ( tree . catchBody ) ; var binding:==:this . transformAny ( tree . binding ) ;
var save = imports . save ; var autosave:==:imports . autosave ;
var ownerID = _ treeSnapshot$instanc3 . ownerid ; var owner:==:treeSnapshot [ ownerid ] ;
var ejs = require ( ' ejs ' ) ; var util:==:require ( ' util ' ) ;
var height = image . height ; var x:==:Math . round ( uv . x * width ) % width ;
var fs = require ( ' fs ' ) ; var metrics:==:require ( ' metrics ' ) ;
var parentEntity = relationArray . parentEntity ; var entityManager:==:parentEntity . entityAspect . entityManager ;
var jnAcc = con . jnAcc ; var jtAcc:==:con . jtAcc ;
var trace = gd . _ fullData [ d . traceId ] ; var nodeRect:==:d3 . select ( element ) . select ( ' . nodeRect ' ) ;
var pos = data . pos ; var ace:==:tab . document . editor . ace ;
var maximumHeights = wallGeometry . _ maximumHeights ; var granularity:==:wallGeometry . _ granularity ;
var catchState = traceur . codegeneration . generator . catchState ; var conditionalState:==:traceur . codegeneration . generator . conditionalState ;
var error = options . error  |  |  emptyFn ; var user:==:options . user  |  |  '' ;
var container = properties . container ; var renderType:==:properties . renderType |  | 'canvas ' ;
var findSessionByuri = require ( ' findSessionByuri ' ) ; var text:==:require ( ' f8Text ' ) ;
var rotationMatrix = this . rotationMatrix ; var yStretch:==:this . yStretch ;
var DISTANCE_DISPLAY_CONDITION_INDEX = pointPrimitive . distance_display_condition_index ; var disable_depth_distance_index:==:pointPrimitive . disable_depth_distance_index ;
var util = require ( ' gulp - util ' ) ; var clean:==:require ( ' gulp - clean ' ) ;
var errors = get ( ' mass - spec - errors ' ) ; var failures:==:get ( ' mass - spec - failures ' ) ;
var bufferUsage = defaultValue ( options . bufferUsage , bufferUsage . dynamic_draw ) ; var attributeLocations:==:defaultValue ( options . attributeLocations , defaultValue . empty_object ) ;
var scope = args . scope  |  |  [ ] ; var client:==:args . client      true ;
var crs = path . _ map . options . crs ; var transformation:==:crs . transformation ;
var nodeCount = this . nodeCount ; var firstEdgeIndexes:==:this . _ firstEdgeIndexes ;
var parameters = animation . parameters ; var samplers:==:animation . samplers ;
var maybeRename = this . maybeRename _ ; var lvalue:==:this . transformAny ( tree . lvalue ) ;
var resizable = this . options . resizable ; var wrapper:==:this . wrapper ;
var cellCount = _ ref . cellCount ; var cellSize:==:_ ref . cellSize ;
var chokidar = require ( ' chokidar ' ) ; var undefsafe:==:require ( ' undefsafe ' ) ;
var assert = utils . assert ; var rotr32:==:utils . rotr32 ;
var p1 = symbol . _ _ p1 ; var p2:==:symbol . _ _ p2 ;
var options = this . options ; var script:==:document . createElement ( ' script ' ) ;
var multiPolygonIntersectsBufferedMultiPoint = intersection . multiPolygonIntersectsBufferedMultiPoint ; var multiPolygonIntersectsMultiPolygon:==:intersection . multiPolygonIntersectsMultiPolygon ;
var element = this . element , o = this . options ; var parent:==:element . parent ( ) ;
var TIME = 3 ; var OS:==:4 ;
var dfa = this . stack [ this . stack . length - 1 ] . dfa ; var node:==:this . stack [ this . stack . length - 1 ] . node ;
var pixelConverter = jsCommon . pixelConverter ; var displayNameKeys:==:visuals . slicerUtil . displayNameKeys ;
var videoRecvBitrate = options . videoRecvBitrate ; var videoSendBitrate:==:options . videoSendBitrate ;
var notifier = require ( ' node - notifier ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var fixedColumns = coords . col < priv . fixedColumns ; var scrollableElement:==:this . hot . view . wt . wtOverlays . scrollableElement ;
var SYNTAX_ERR     = exceptionCode . syntax_err     = ( ( exceptionMessage [ 12 ] = ' syntax error ' ) , 12 ) ; var invalid_modification_err:==:exceptionCode . invalid_modification_err    ( ( exceptionMessage [ 13 ]   ' invalid modification ' ) , 13 ) ;
var background = background  |  |  chrome . extension . getBackgroundPage ( ) ; var default_proxy_server_proc:==:background . unblock_youku . default_proxy_server_proc ;
var pooledClass = require ( ' pooledClass ' ) ; var transaction:==:require ( ' transaction ' ) ;
var distTo = tree . distTo ; var edgeTo:==:tree . edgeTo ;
var left = offset . left ; var scrollTop:==:$ window . scrollTop ( ) ;
var wifiService = _ appJsServicesWifiService [ ' default ' ] ; var shareSummaryView:==:_ appJsViewsShareSummaryView [ ' default ' ] ;
var s = TO_STRING ( this ) ; var len:==:arguments . length ;
var dateFromId = calc . dateFromId ; var monthStart:==:calc . monthStart ;
var grey200 = exports . grey200 = ' # eeeeee ' ; var grey300:==:exports . grey300    ' # e0e0e0 ' ;
var parentView = view_ref_1 . internalView ( viewContainerLocation . parentView ) ; var boundElementIndex:==:viewContainerLocation . boundElementIndex ;
var title = pic . photo_title ; var url:==:pic . photo_url ;
var loc = document . location ; var port:==:loc . port     ' ' ? ( loc . protocol     ' https : ' ? 443 : 80 ) : loc . port ;
var createVariableStatement = parseTreeFactory . createVariableStatement ; var createWhileStatement:==:parseTreeFactory . createWhileStatement ;
var Identify = require ( ' facade ' ) . Identify ; var clone:==:require ( ' clone ' ) ;
var surface = context [ ' surface ' ] ; var curve:==:context [ ' curve ' ] ;
var createArgumentList = parseTreeFactory . createArgumentList ; var createCallExpression:==:parseTreeFactory . createCallExpression ;
var getComponentName = require ( ' getComponentName ' ) ; var getIteratorFn:==:require ( ' getIteratorFn ' ) ;
var active = activeElement ( ) ; var placeholder:==:that . options . placeholder ;
var el = this . el ; var intersectedEl:==:this . intersectedEl ;
var string = selectn ( ' faultstring . $ value ' , body . Fault )  |  |  selectn ( ' faultstring ' , body . Fault ) ; var detail:==:selectn ( ' detail . $ value ' , body . Fault )  |  |  selectn ( ' detail . message ' , body . Fault ) ;
var top = Math . ceil ( box . top ) ; var bottom:==:Math . ceil ( box . bottom ) ;
var geometryConfig = config [ 0 ] . geometryConfig ; var container:==:geometryConfig . container ;
var resolution = component . resolutions [ r ] ; var numprecincts:==:resolution . precinctParameters . numprecincts ;
var backAndroid = require ( ' backAndroid ' ) ; var f8TabsView:==:require ( ' f8TabsView ' ) ;
var name = descriptor . name ; var definition:==:descriptor . definition ;
var isValidDefaultCoordinate = propertyTypes . isValidDefaultCoordinate ; var isValidDefaultValue:==:propertyTypes . isValidDefaultValue ;
var sparseMatrix = type . sparseMatrix ; var denseMatrix:==:type . denseMatrix ;
var splitURL = webInspector . parsedurl . spliturlIntoPathComponents ( url ) ; var projectId:==:webInspector . networkProject . projectId ( target , spliturl [ 0 ] , false ) ;
var getLineInfo = _ . getLineInfo ; var lineBreakg:==:_ . lineBreakg ;
var f8MapView = require ( ' f8MapView ' ) ; var f8NotificationsView:==:require ( ' f8NotificationsView ' ) ;
var data = size . data ; var mp:==:data . mp ? data . mp + value + ' ' : '' ;
var hash = i d . hashCode ( ) ; var h:==:this . _ indexToValueInSpace ( hash , this . _ hueSpace ) ;
var isNumber = leafletHelpers . isNumber ; var isObject:==:leafletHelpers . isObject ;
var arrayExtensions = jsCommon . arrayExtensions ; var wordBreaker:==:jsCommon . wordBreaker ;
var reactInstrumentation = require ( ' reactInstrumentation ' ) ; var reactMarkupChecksum:==:require ( ' reactMarkupChecksum ' ) ;
var fonttype = fonttype  |  |  ' helvetica ' ; var canvas:==:acroForm . internal . calculateFontSpace . canvas  |  |  ( acroForm . internal . calculateFontSpace . canvas    document . createElement ( ' canvas ' ) ) ;
var animations = this . get ( ' animations ' ) ; var index:==:this . get ( ' index ' ) ;
var viewState = frameState . viewState ; var pixelRatio:==:frameState . pixelRatio ;
var util = require ( ' util ' ) ; var fs:==:require ( ' fs ' ) ;
var targetEl = this . targetEl ; var sceneEl:==:sourceEl . sceneEl ;
var nodeList = scope . wrappers . nodeList ; var defineWrapGetter:==:scope . defineWrapGetter ;
var dataSet = vis . dataSet ; var queue:==:vis . queue ;
var username = trimmedElementValueById ( ' login - username ' ) ; var email:==:trimmedElementValueById ( ' login - email ' ) ;
var isDefined = leafletHelpers . isDefined ; var isString:==:leafletHelpers . isString ;
var i d = identify . userId ( ) ; var traits:==:identify . traits ( ) ;
var ngModelOptions = sfBuilderProvider . builders . ngModelOptions ; var ngModel:==:sfBuilderProvider . builders . ngModel ;
var userId = _ ref . userId ; var onSubmitUserId:==:_ ref . onSubmitUserId ;
var audio = element . find ( ' audio ' ) , audio_obj = audio [ 0 ] ; var controls:==:element . find ( ' . controls ' ) ;
var trigger = t . trigger ; var isEventDraggable:==:t . isEventDraggable ;
var scrollContentHeight = this . state . scrollContentHeight ; var reservedHeight:==:this . state . reservedHeight ;
var keyboardFocused = _ props3 . keyboardFocused ; var linkButton:==:_ props3 . linkButton ;
var ngModel = this . ngModel ; var $ scope:==:this . $ scope ;
var parse = Sk . parse ( filename , source ) ; var ast:==:Sk . astFromParse ( parse . cst , filename , parse . flags ) ;
var len = _ len ; var ofs:==:_ ofs ;
var onlyActiveOnIndex = _ props2 . onlyActiveOnIndex ; var props:==:_ objectWithoutProperties ( _ props2 , [ ' to ' , ' query ' , ' hash ' , ' state ' , ' activeClassName ' , ' activeStyle ' , ' onlyActiveOnIndex ' ] ) ;
var webpack = require ( ' webpack ' ) ; var loaders:==:configuration . module . loaders ;
var os = require ( ' os ' ) ; var v8:==:process . versions . v8 ;
var accepts = this . accepts ; var promises:==:this . promises ;
var width = opts . width ; var height:==:opts . height ;
var extrudedHeight = options . extrudedHeight ; var extrude:==:( defined ( extrudedHeight ) & & math . abs ( height - extrudedHeight ) > 1 . 0 ) ;
var geo = this . geometry ; var template:==:this . _ template ;
var pivotA = options . pivotA ? options . pivotA . clone ( ) : new Vec3 ( ) ; var pivotB:==:options . pivotB ? options . pivotB . clone ( ) : new Vec3 ( ) ;
var pubsub = imports . pubsub ; var vfs:==:imports . vfs ;
var codec = protobuf . codec ; var constant:==:protobuf . constants ;
var allPages = allPages = this . addCheckbox ( div , mxResources . get ( ' allPages ' ) , hasPages , ! hasPages ) ; var layers:==:this . addCheckbox ( div , mxResources . get ( ' layers ' ) , true ) ;
var crypto = require ( ' crypto ' ) ; var xml2js:==:require ( ' xml2js ' ) ;
var ellipsoid = corridorGeometry . _ ellipsoid ; var minHeight:==:minHeightFunc ( granularity , ellipsoid ) ;
var mcc = self . _ iccSettings . mcc ; var mnc:==:self . padLeft ( self . _ iccSettings . mnc , 2 ) ;
var x = geometry . x ; var y:==:-geometry . y ;
var dx = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx ' , this . dx ) ) ) ) ; var arrowHead:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' arrowHead ' , this . arrowHead ) ) ) ) ;
var pooledClass = require ( ' pooledClass ' ) ; var getTextContentAccessor:==:require ( ' getTextContentAccessor ' ) ;
var skipSelf = makeParamDecorator ( ' skipSelf ' , [ ] ) ; var host:==:makeParamDecorator ( ' host ' , [ ] ) ;
var c = ca [ n ] . command ; var p:==:ca [ n ] . points ;
var groupId = this . groupIds [ i ] ; var group:==:this . groups [ groupId ] ;
var change = ' change- ' + dirType ; var classEvent:==:vdom . classEvent ;
var owner = angular . element ( body [ 0 ] . querySelector ( ' # owner ' ) ) ; var container:==:angular . element ( body [ 0 ] . querySelector ( ' . md - dialog - container ' ) ) ;
var el = d3 . select ( this ) ; var text:==:el . select ( ' text ' ) ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var createAssignmentExpression:==:parseTreeFactory . createAssignmentExpression ;
var name = docSet . getByLongname ( ' asset#name ' ) . filter ( undocumented ) ; var shape:==:docSet . getByLongname ( ' asset#shape ' ) . filter ( undocumented ) ;
var g = effect . got ? effect . got : effect . gets ; var p:==:effect . paid ? effect . paid : effect . pays ;
var shell = require ( ' gulp - shell ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var getScrollPosition = require ( ' getScrollPosition ' ) ; var getViewportDimensions:==:require ( ' getViewportDimensions ' ) ;
var domPropertyNames = domPropertyConfig . domPropertyNames  |  |  ; var domMutationMethods:==:domPropertyConfig . domMutationMethods  |  |  ;
var bufferCreationInterval = state . bufferCreationInterval ; var bufferTimeSpan:==:state . bufferTimeSpan ;
var WireV8 = goog . labs . net . webChannel . wirev8 ; var netUtils:==:goog . labs . net . webChannel . netUtils ;
var tokenType = traceur . syntax . tokenType ; var parseTreeVisitor:==:traceur . syntax . parseTreeVisitor ;
var bridge = imports [ ' bridge . client ' ] ; var fs:==:require ( ' fs ' ) ;
var delta = deltas [ i ] ; var range:==:Range . fromPoints ( delta . range . start , delta . range . end ) ;
var parent = this . _ idTodomNode [ parentId ] ; var node:==:this . _ idTodomNode [ nodeId ] ;
var disconnecting = ' disconnecting ' ; var unauthorized:==:' unauthorized ' ;
var normal = this . normal ? this . normal . buildCode ( builder , ' v3 ' ) : undefined ; var normalScale:==:this . normalScale & & this . normal ? this . normalScale . buildCode ( builder , ' v2 ' ) : undefined ;
var arcScalex = ctx . arcScalex _ ; var arcScaley:==:ctx . arcScaley _ ;
var loc = moznode . loc , start = loc & & loc . start ; var range:==:moznode . range ;
var h = Math . max ( h , controlBarHeight ) ; var w:==:math . max ( w , 3 . 5 * controlBarHeight ) ;
var defaultLabelColor = visuals . dataLabelUtils . defaultLabelColor ; var defaultFontSizeInPt:==:visuals . dataLabelUtils . defaultFontSizeInPt ;
var TOTAL_MEMORY = Module [ ' TOTAL_MEMORY ' ]  |  |  4194304 ; var FAST_MEMORY:==:Module [ ' FAST_MEMORY ' ]  |  |  2097152 ;
var container = editor . container . getChild ( 1 ) ; var contents:==:editor . getThemeSpace ( ' contents ' ) ;
var observable = ko . observable ( ) . extend ( deferred : true ) ; var notifySpy:==:jasmine . createSpy ( ' notifySpy ' ) ;
var mChanges = mChangesMap . mChanges ; var mDependencies:==:mChangesMap . mDependencies ;
var util = imports . util ; var c9:==:imports . c9 ;
var manifestURL = detail . manifestURL  |  |  '' ; var behavior:==:detail . mozbehavior  |  |  ;
var video = element . find ( ' video ' ) , video_obj = video [ 0 ] ; var controls:==:element . find ( ' . controls ' ) , volume_button    controls . find ( ' . volume ' ) ;
var RTL = goog . i18n . bidi . Dir . RTL ; var NEUTRAL:==:goog . i18n . bidi . Dir . NEUTRAL ;
var programTransformer = traceur . codegeneration . programTransformer ; var treeWriter:==:traceur . outputgeneration . treeWriter ;
var editorState = require ( ' editorState ' ) ; var getEntityKeyForSelection:==:require ( ' getEntityKeyForSelection ' ) ;
var maxValue = e . data . maxValue ; var fieldName:==:e . data . fieldName ;
var sbsample = frame . sbsample [ ch ] ; var filter:==:this . filter [ ch ] ;
var yosay = require ( ' yosay ' ) ; var wiredep:==:require ( ' wiredep ' ) ;
var config = JSON . parse ( JSON . stringify ( configuration . manager . configurations [ 0 ] ) ) ; var members:==:config . members ;
var A = CMD . A ; var Q:==:CMD . Q ;
var app = req . app ; var user:==:undefsafe ( req , ' session . user ' )  |  |  ;
var mask = this . game . make . sprite ( 0 , 0 , ' mask ' ) ; var overlay:==:this . game . make . sprite ( 0 , 0 , ' overlay ' ) ;
var group = req . query . group  |  |  ' default ' ; var time:==:req . query . time & & Number ( req . query . time ) ;
var disp = this . disp ; var stiffness:==:options . stiffness ;
var element = _ options . element ; var target:==:_ options . target ;
var scene = object . _ scene ; var camera:==:scene . camera ;
var fs = Promise . promisifyAll ( require ( ' fs ' ) ) ; var mkdirp:==:promise . promisify ( require ( ' mkdirp ' ) ) ;
var tag = item . tag ; var title:==:item . title ;
var clone = require ( ' clone ' ) ; var has:==:Object . prototype . hasOwnProperty ;
var indent = settings . indent  |  |  [ ] ; var length:==:value . length ;
var newValue = context . newValue ; var dataType:==:property . dataType ;
var each = options . each ; var end:==:options . end ;
var params = _ props2 . params ; var components:==:_ props2 . components ;
var keys = _ . keys ( obj ) ; var length:==:keys . length ;
var drawable = me . drawable ; var domElement:==:drawable . domElement ;
var fs = require ( ' hexo - fs ' ) ; var sinon:==:require ( ' sinon ' ) ;
var Form = imports . Form ; var menus:==:imports . menus ;
var baseAnimator = powerbi . visuals . baseAnimator ; var yAxisPosition:==:powerbi . visuals . yAxisPosition ;
var port = options . port ; var localAddress:==:options . localAddress ;
var files = o . files ; var index:==:o . index ;
var el = setupSelect ( ' ng - model='$root . model ' ' , [ ' 1 ' , ' 2 ' , ' 3 ' ] ) ; var selectedOption:==:selectedOptions ( el ) [ 0 ] ;
var lime200 = exports . lime200 = ' # e6ee9c ' ; var lime300:==:exports . lime300    ' # dce775 ' ;
var xfov = camera . perspective . xfov ; var aspect_ratio:==:camera . perspective . aspect_ratio  |  |  1 ;
var el = this . el ; var vrDisplay:==:this . system . vrDisplay ;
var direction = shadowMapCamera . directionwc ; var up:==:shadowMapCamera . upwc ;
var l = _ l ; var acc:==:_ acc ;
var principalId = context . principalId  |  |  undefined ; var principalName:==:context . principalName  |  |  undefined ;
var pdfImage = coreImage . pdfImage ; var colorSpace:==:coreColorSpace . colorSpace ;
var hasRings = options . hasRings ; var enclose:==:options . enclose ;
var texture = _ batchedInfo . texture ; var shader:==:_ batchedInfo . shader ;
var dynCall_vi = Module [ ' dynCall_vi ' ] = asm [ ' dynCall_vi ' ] ; var dynCall_vii:==:Module [ ' dynCall_vii ' ]    asm [ ' dynCall_vii ' ] ;
var edgeWeakType = this . _ edgeWeakType ; var noDistance:==:this . _ noDistance ;
var x = euler . x , y = euler . y , z = euler . z ; var a:==:Math . cos ( x ) , b    Math . sin ( x ) ;
var len = s . length ; var p:==:new sc_StringOutputPort ( ) ;
var strSlice = struct ( ' strSlice ' ) ; var writeBinaryOptions:==:struct ( ' writeBinaryOptions ' ) ;
var geoModel = finder . geoModel ; var seriesModel:==:finder . seriesModel ;
var positions = cep . positions ; var numPts:==:cep . numPts ;
var User = models . User ; var utility:==:require ( ' utility ' ) ;
var dx4 = Math . max ( parseFloat ( mxUtils . getValue ( this . state . style , ' dx3 ' , 0 ) ) , math . min ( parseFloat ( mxUtils . getValue ( this . state . style , ' dx5 ' , 0 ) ) , parseFloat ( mxUtils . getValue ( this . state . style , ' dx4 ' , 0 ) ) ) ) ; var dy4:==:math . max ( 0 , math . min ( 100 , parseFloat ( mxUtils . getValue ( this . state . style , ' dy4 ' , 0 ) ) ) ) ;
var expect = require ( ' expect . js ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var anchorPoint = box . anchorPoint . _ matMult ( rotationMatrix ) ; var x:==:anchorPoint . x ;
var data = info . data ; var internalformat:==:info . internalformat ;
var items = this . _ items ; var length:==:items . length ;
var CALL_EXPRESSION = ' CALL_EXPRESSION ' ; var CALL_SIGNATURE:==:' CALL_SIGNATURE ' ;
var city = this . _ $ cityPicker . val ( ) . trim ( ) ; var code:==:this . _ code  |  |  null ;
var cheerio = require ( ' cheerio ' ) ; var url:==:require ( ' url ' ) ;
var _ stdin = _ stdin = allocate ( [ 0,0,0,0,0,0,0,0 ] , ' i8 ' , ALLOC_STATIC ) ; var _ stderr:==:_ stderr allocate ( [ 0,0,0,0,0,0,0,0 ] , ' i8 ' , ALLOC_STATIC ) ;
var Sandbox = selftest . Sandbox ; var Run:==:selftest . Run ;
var name = test_function_name + ' ' + test_object_name ; var test_function:==:test_function_gen ( object ) ;
var config = configService . getSync ( ) . wallet ; var cache:==:wallet . cachedStatus ;
var displayName = powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . displayName , undefined ) ; var value:==:powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . value , 0 ) ;
var fixed = entry . indexOf ( ' fixed ' ) > = 0 ; var snap:==:entry . indexOf ( ' snap ' ) >   0 ;
var request = node . request ( ) ; var resourceType:==:request . resourceType ( ) ;
var frameState = scene . frameState ; var shadowMaps:==:frameState . shadowHints . shadowMaps ;
var sass = require ( ' gulp - sass ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var session = $ . gestures . session ; var last:==:session . lastInterval  |  |  touch ;
var output = this . output ; var outputEncodings:==:this . outputEncodings ;
var totalHeight = _ ref2 . totalHeight ; var totalWidth:==:_ ref2 . totalWidth ;
var hash = _ _ dependency5 _ _ . hash ; var rethrow:==:_ _ dependency6 _ _ . rethrow ;
var Pattern = require ( ' hexo - util ' ) . Pattern ; var moment:==:require ( ' moment - timezone ' ) ;
var TEST = ! ! options . TEST ; var E2E:==:! ! options . E2E ;
var contactManager = contacts . contactManager ; var contactCardOptions:==:contacts . contactCardOptions ;
var elem = document . getElementById ( ' elem ' ) ; var text:==:document . getElementById ( ' text ' ) . firstChild ;
var format = require ( ' util ' ) . format ; var del:==:require ( ' del ' ) ;
var scrollToIndex = _ ref . scrollToIndex ; var updateScrollOffsetForScrollToIndex:==:_ ref . updateScrollOffsetForScrollToIndex ;
var prev = ( this . prevClass ! = null ? this . prevClass : mml . texclass . none ) ; var tex:==:( this . get ( ' texClass ' )  |  |  mml . texclass . ord ) ;
var diff_match_patch = DMP . diff_match_patch ; var DIFF_EQUAL:==:DMP . DIFF_EQUAL ;
var onclick = options . onclick ; var submenu:==:options . submenu ;
var type = evt . type ; var charCode:==:evt . charCode ;
var submitButton = this . _ options . submitButton ; var cancelButton:==:this . _ options . cancelButton ;
var reactNativeAttributePayload = require ( ' reactNativeAttributePayload ' ) ; var textInputState:==:require ( ' textInputState ' ) ;
var each = require ( ' each ' ) ; var is:==:require ( ' is ' ) ;
var format = node . getAttribute ( ' format ' ) ; var template:==:node . getAttribute ( ' template ' ) ;
var imageLoader = hilo . imageLoader ; var scriptLoader:==:hilo . scriptLoader ;
var lines = this . lines ; var line:==:lines [ this . y + this . ybase ] ;
var date = this . _ $ datePicker . val ( ) ; var city:==:this . _ $ cityPicker . val ( ) ;
var data = JSON . parse ( e . data ) ; var type:==:data . type ;
var inMemoryWebStorage = exports . inMemoryWebStorage = _ _ webpack_require _ _ ( 325 ) ; var userManager:==:exports . userManager    _ _ webpack_require _ _ ( 326 ) ;
var source = _ ref . source ; var subscriber:==:_ ref . subscriber ;
var options = picker . $ options ; var lang:==:options . lang ;
var Base = C_lib . Base ; var wordArray:==:c_lib . wordArray ;
var win = window ; var location:==:win . location ;
var isInteger = _ _ webpack_require _ _ ( 2 ) . isInteger ; var toFixed:==:_ _ webpack_require _ _ ( 2 ) . toFixed ;
var settings = imports . settings ; var panels:==:imports . panels ;
var it = test . it ; var before:==:test . before ;
var labelKey = _ ref . labelKey ; var options:==:_ ref . options ;
var y = quaternion . y * inverseMagnitude ; var z:==:quaternion . z * inverseMagnitude ;
var formidable = require ( ' formidable ' ) ; var once:==:require ( ' once ' ) ;
var lineDash = this . _ lineDash ; var ctx:==:this . _ ctx ;
var db = new PouchDB ( dbs . name ) ; var rep:==:db . replicate . from ( remote , live : true ) ;
var main = ' main ' ; var ams:==:' ams ' ;
var dy3 = h * 0 . 5 * Math . max ( 0 , Math . min ( 1 , parseFloat ( mxUtils . getValue ( this . style , ' dy3 ' , this . dy3 ) ) ) ) ; var dx3:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx3 ' , this . dx3 ) ) ) ) ;
var max = Math . max ( Math . max ( r , g ) , b ) ; var min:==:Math . min ( Math . min ( r , g ) , b ) ;
var reactGenericBatching = require ( ' reactGenericBatching ' ) ; var reactMount:==:require ( ' reactMount ' ) ;
var objname = objnames [ match [ 1 ] ] [ 2 ] ; var title:==:titles [ match [ 0 ] ] ;
var style = this . _ div . style ; var camelize:==:Crafty . domHelper . camelize ;
var r = convertRGB ( this . r ) ; var g:==:convertRGB ( this . g ) ;
var o = opts |  |  ; var z:==:write_zip ( wb , o ) ;
var colorHelper = powerbi . visuals . colorHelper ; var legendIcon:==:powerbi . visuals . legendIcon ;
var fillColor = c . state . fillColor ; var o:==:mxUtils . getValue ( this . style , mxBpmnShape . prototype . miscEnum . outline , mxBpmnShape . prototype . eventTypeEnum . none ) ;
var children = _ props . children ; var iconClassName:==:_ props . iconClassName ;
var scrollTop = _ ref3 . scrollTop ; var totalColumnsWidth:==:_ ref3 . totalColumnsWidth ;
var rotationAux = this . rotationAux = this . rotationAux  |  |  x : 0 , y : 0 , z : 0 ; var rotation:==:el . getAttribute ( ' rotation ' ) ;
var a = base ( 12 ) ; var b:==:base ( 13 ) ;
var zipstream = require ( ' zipstream ' ) ; var fs:==:require ( ' fs ' ) ;
var variableStatement = traceur . syntax . trees . variableStatement ; var createArgumentList:==:parseTreeFactory . createArgumentList ;
var createArgumentList = traceur . codegeneration . parseTreeFactory . createArgumentList ; var createBlock:==:traceur . codegeneration . parseTreeFactory . createBlock ;
var geo = featureObj . geometry ; var coordinates:==:geo . coordinates ;
var upload = imports . upload ; var tree:==:imports . tree ;
var mixin = scope . mixin ; var registerObject:==:scope . registerObject ;
var detail = e . detail ; var direction:==:detail . direction ;
var width = Math . floor ( rect . z * this . app . graphicsDevice . width * this . renderTargetScale ) ; var height:==:math . floor ( rect . w * this . app . graphicsDevice . height * this . renderTargetScale ) ;
var Schema = mongoose . Schema ; var objectId:==:mongoose . types . objectId ;
var uglify = require ( ' gulp - uglify ' ) ; var vm:==:require ( ' vm ' ) ;
var reactGenericBatching = require ( ' reactGenericBatching ' ) ; var reactHostComponent:==:require ( ' reactHostComponent ' ) ;
var bar = bar : ' bar ' ; var baz:==:baz : ' baz ' ;
var _ subscribers = parent . _ subscribers ; var length:==:_ subscribers . length ;
var debug = require ( ' debug ' ) ( ' express : router : layer ' ) ; var hasOwnProperty:==:object . prototype . hasOwnProperty ;
var appendClearCatcher = powerbi . visuals . appendClearCatcher ; var createLegend:==:powerbi . visuals . createLegend ;
var barGroup = this . _ displayables . barGroup ; var otherAxisInverse:==:( this . _ dataShadowInfo  |  |  ) . otherAxisInverse ;
var resolution = renderSession . resolution ; var tx:==:( transform . tx * renderSession . resolution ) + renderSession . shakex ;
var folderUploadSelect = plugin . getElement ( ' folderUploadSelect ' ) ; var hboxUploadNoFolders:==:plugin . getElement ( ' hboxUploadNoFolders ' ) ;
var crypto = require ( ' crypto ' ) ; var chalk:==:require ( ' chalk ' ) ;
var pnLoop = ( opts . pnLoop=='false' |  | opts . pnLoop==false ) ? false : true ; var mouseOverStop:==:( opts . mouseOverStop   ' false' |  | opts . mouseOverStop   false ) ? false : true ;
var settings = imports . settings ; var fs:==:imports . fs ;
var row = results . rows . item ( i ) ; var data:==:JSON . parse ( row . data ) ;
var obj = this . obj ; var name:==:e . name ;
var selector = event . selector ; var type:==:event . type ;
var faces = this . faces ; var vertices:==:this . vertices ;
var destination = this . destination ; var windowSize:==:this . windowSize ;
var gltf = model . gltf ; var materials:==:gltf . materials ;
var browser = utils . browser [ 0 ] ; var platform:==:utils . platform ;
var i d = this . i d = rawParams [ 0 ] ; var params:==:this . params    rawParams . slice ( 1 ) ;
var keys = this . keys ; var bboxes:==:this . bboxes ;
var assign = Object . assign  |  |  require ( ' object . assign ' ) ; var notify:==:require ( ' gulp - notify ' ) ;
var parseTreeType = traceur . syntax . trees . parseTreeType ; var getTreeNameForType:==:traceur . syntax . trees . getTreeNameForType ;
var textOperation = firepad . textOperation ; var h:==:helpers ;
var h = toInt ( match [ 4 ]  |  |  0 ) - tzHour ; var m:==:toInt ( match [ 5 ]  |  |  0 ) - tzMin ;
var signals = editor . signals ; var config:==:editor . config ;
var transform = options . transform ; var suffix:==:options . suffix  |  |  '' ;
var len = string . length ; var sub:==:word . substr ( 0 , len ) ;
var search = entry . search ; var path:==:( basename  |  |  '' ) + pathname + ( search  |  |  '' ) ;
var x , . . . y = z ; var [ x ] : x , . . . y:==:z ;
var showTitle = dataViewObject . getValue ( this . legendObjectProperties , legendProps . showTitle , true ) ; var titleText:==:dataViewObject . getValue ( this . legendObjectProperties , legendProps . titleText , this . layerLegendData ? this . layerLegendData . title : ' ' ) ;
var h = img . naturalHeight ; var canvas:==:document . getElementById ( canvasid ) ;
var selectionId = powerbi . visuals . selectionId ; var legendIcon:==:powerbi . visuals . legendIcon ;
var newNode = newNodes [ length ] ; var originalNode:==:originalNodes [ length ] ;
var Wih = Wih + gamma1h + ( ( Wil > > > 0 ) < ( gamma1l > > > 0 ) ? 1 : 0 ) ; var Wil:==:Wil + Wi16l ;
var x = this . left . expressions . slice ( ) ; var e:==:this . clone ( ) ;
var c9 = imports . c9 ; var metadata:==:imports . metadata ;
var fs = require ( ' fs ' ) ; var expect:==:require ( ' chai ' ) . expect ;
var nodes = this . nodes ; var len:==:nodes . length ;
var counter = this . counter ; var values:==:counter . values ;
var extrude = ( defined ( extrudedHeight ) & & math . abs ( height - extrudedHeight ) > 1 . 0 ) ; var vertexFormat:==:defaultValue ( options . vertexFormat , vertexFormat . default ) ;
var scrollToCell = _ props2 . scrollToCell ; var width:==:_ props2 . width ;
var columnCount = _ props2 . columnCount ; var rowCount:==:_ props2 . rowCount ;
var eventHandlerPrefix = configuration . eventHandlerPrefix  |  |  ' handle ' ; var eventHandlerPropPrefix:==:configuration . eventHandlerPropPrefix  |  |  ' on ' ;
var line = options . line ; var identifier:==:options . identifierPrefix ;
var del = require ( ' del ' ) ; var less:==:require ( ' gulp - less ' ) ;
var f = function ( x ) return x * x ; var m:==:functionUtils . memoize ( f ) ;
var stop = params . hasOwnProperty ( ' stop ' ) ? params . stop : -1 ; var weights:==:params . weights  |  |  [ ] ;
var domLazyTree = require ( ' domLazyTree ' ) ; var domProperty:==:require ( ' domProperty ' ) ;
var tooltipBuilder = powerbi . visuals . tooltipBuilder ; var selectionId:==:powerbi . visuals . selectionId ;
var horizontalOffsetAdjustment = _ ref . horizontalOffsetAdjustment ; var isScrolling:==:_ ref . isScrolling ;
var method = obj . method . toLowerCase ( ) ; var timeout:==:obj . timeout ;
var layout = imports . layout ; var anims:==:imports . anims ;
var lightBlue100 = exports . lightBlue100 = ' # b3e5fc ' ; var lightBlue200:==:exports . lightBlue200    ' # 81d4fa ' ;
var indexOf = zrUtil . indexOf ; var isObject:==:zrUtil . isObject ;
var ctrlid = isUndefined ( v [ ' ctrlid ' ] ) ? v : v [ ' ctrlid ' ] ; var showid:==:isUndefined ( v [ ' showid ' ] ) ? ctrlid : v [ ' showid ' ] ;
var exec = require ( ' child_process ' ) . exec ; var readFileSync:==:require ( ' fs ' ) . readFileSync ;
var h = renderer . $ size . scrollerHeight - renderer . lineHeight ; var scrollTop:==:renderer . scrollTop ;
var getUpdatedSelectionState = require ( ' getUpdatedSelectionState ' ) ; var invariant:==:require ( ' invariant ' ) ;
var scale = label . scale ; var resolutionScale:==:label . _ labelCollection . _ resolutionScale ;
var connect = require ( ' gulp - connect ' ) ; var del:==:require ( ' del ' ) ;
var livereload = require ( ' gulp - livereload ' ) ; var coffee:==:require ( ' gulp - coffee ' ) ;
var assert = require ( ' assert ' ) ; var net:==:require ( ' net ' ) ;
var settingName = descriptor [ ' settingName ' ] ; var setting:==:webInspector . settings [ settingName ] ;
var metadata = vuvuzela . parse ( item . metadata ) ; var data:==:unstringifyDoc ( item . data , metadata . i d , item . rev ) ;
var mkdirp = require ( ' mkdirp ' ) ; var async:==:require ( ' async ' ) ;
var text = el . textContent . trim ( ) ; var value:==:el . value  |  |  text ;
var apidoc = require ( ' apidoc - core ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var prev = this . prevOp ; var mergeableCommands:==:this . $ mergeableCommands ;
var dropDown = $ scope . dropDown ; var items:==:dropDown . items ( ) ;
var isStartIncluded = defaultValue ( options . isStartIncluded , true ) ; var isStopIncluded:==:defaultValue ( options . isStopIncluded , true ) ;
var scrollTop = offsetParent . scrollTop ; var scrollLeft:==:offsetParent . scrollLeft ;
var index = opt_index  |  |  0 ; var stroke:==:strokes [ index ] ;
var items = virtualList . items ( ) ; var data:==:asyncDataSource . data ( ) ;
var material = gltfRuntime . materials [ i d ] ; var technique:==:gltfRuntime . techniques [ material . technique ] ;
var prepareStyles = _ context$muiTheme . prepareStyles ; var ripple:==:_ context$muiTheme . ripple ;
var events = require ( ' events ' ) ; var util:==:require ( ' util ' ) ;
var memberName = this . props . memberName ; var def:==:this . props . def ;
var shaders = model . _ loadResources . shaders ; var program:==:programs [ i d ] ;
var spy = jasmine . createSpy ( ' $ watch spy ' ) ; var digest:==:$ rootScope . $ digest ;
var description = item . fields . description  |  |  item . fields [ ' abstract . analyzed ' ] ; var version:==:item . _ source . module [ 0 ] . version ;
var earlyChange = lzwState . earlyChange ; var nextCode:==:lzwState . nextCode ;
var secondaryTile = windows . ui . startScreen . secondaryTile ; var tileSize:==:windows . ui . startScreen . tileSize ;
var entry = document . createElement ( ' gui - menu - entry ' ) ; var img:==:document . createElement ( ' img ' ) ;
var HAS_IOS_FULLSCREEN = exports . HAS_IOS_FULLSCREEN = hasiosFullScreen ; var has_true_native_fullscreen:==:exports . has_true_native_fullscreen    hasTrueNativeFullScreen ;
var p = createjs . extend ( abstractLoader , createjs . eventDispatcher ) ; var s:==:abstractLoader ;
var xScale1 = chart . scales . xScale1 ; var xScale2:==:chart . scales . xScale2 ;
var l = lines . length ; var row:==:delta . start . row ;
var w = box . width - 2 * margin ; var h:==:box . height - 2 * margin ;
var collab = imports . collab ; var otDocument:==:imports . otDocument ;
var opacity = context . opacity ; var headerSize:==:( this . options . headerSize !    undefined ) ? this . options . headerSize : _ resolveNodeSize . call ( this , this . header , this . options . defaultHeaderSize ) ;
var scopeToPunc = helper . scopeToPunc ; var hasOwnProp:==:object . prototype . hasOwnProperty ;
var createStatementList = parseTreeFactory . createStatementList ; var createBreakStatement:==:parseTreeFactory . createBreakStatement ;
var r = core . ZERO ( ) ; var l:==:n . length ;
var push   = emptyArray . push ; var indexOf:==:emptyArray . indexOf ;
var newLines = exports . newLines ; var spaces:==:exports . spaces ;
var a = a : [ 1 , 2 , 3 , [ 1 , 2 , 3 , a : [ 1 , 2 , 3 ] ] ] ; var b:==:Object . clone ( a ) ;
var firstRow = this . $ changedLines . firstRow ; var lastRow:==:this . $ changedLines . lastRow ;
var timeoutTime = _ timeoutTime  |  |  1000 ; var intervalTime:==:_ intervalTime  |  |  10 ;
var index = this . getAttribute ( ' data - bb - index ' ) ; var select:==:this . dropdown . getElementsByTagName ( ' select ' ) [ 0 ] ;
var clientHeight = b . clientHeight ; var clientLeft:==:b . clientLeft ;
var backdrop = new Animation ( ele . querySelector ( ' backdrop ' ) ) ; var wrapper:==:new animation ( ele . querySelector ( ' popup - wrapper ' ) ) ;
var dateToCell = t . dateToCell ; var getDaySegmentContainer:==:t . getDaySegmentContainer ;
var selection = this . $ scope . selection . slice ( ) ; var index:==:selection . indexOf ( entry ) ;
var pollInterval = defaultValue ( options . pollInterval , 1 ) ; var timeout:==:defaultValue ( options . timeout , 5000 ) ;
var col = db . collection ( ' find_one_and_update_with_generators ' ) ; var r:==:yield col . insertMany ( [ a : 1 , b : 1 ] , w : 1 ) ;
var field = fieldInformation [ 0 ] ; var len:==:field . length ;
var unit = math . unit ; var bignumber:==:math . bignumber ;
var fs = require ( ' graceful - fs ' ) ; var intersect:==:require ( ' intersect ' ) ;
var filepath = item . filepath ; var dialog:==:this . dialog ;
var context = scene . context ; var drawingBufferWidth:==:context . drawingBufferWidth ;
var AFTER_GROUP_ID = nconf . get ( ' AFTER_GROUP_ID ' ) ; var BEFORE_GROUP_ID:==:nconf . get ( ' BEFORE_GROUP_ID ' ) ;
var namedNodeMap = window . namedNodeMap  |  |  window . mozNamedAttrMap ; var text:==:window . text ;
var parentGlobalTransform = output . parentGlobalTransform ; var x:==:this . _ global . x ;
var w = $ ( c ) . width ( ) ; var h:==:$ ( c ) . height ( ) ;
var match = matchingListeners [ i d ] ; var listener:==:match . listener ;
var $ element = this . $ element ; var disabled:==:' disabled ' ;
var expression = this . transformAny ( tree . expression ) ; var comprehensionForList:==:this . transformList ( tree . comprehensionForList ) ;
var selectedIndex = ui . deviceSelector . selectedIndex ; var option:==:document . createElement ( ' option ' ) ;
var revealDialog = countlyHelpers . revealDialog ; var changeDialogHeight:==:countlyHelpers . changeDialogHeight ;
var projectionView = this . projectionView ; var inverseProjectionView:==:this . inverseProjectionView ;
var indexOf = utils . indexOf ; var some:==:utils . some ;
var treeOutline = this . treeOutline ; var parentNode:==:node . parentNode ;
var first = rows . first ; var last:==:rows . last ;
var _ memcmp = Module [ ' _ memcmp ' ] = asm [ ' _ memcmp ' ] ; var _ saveSetjmp:==:module [ ' _ saveSetjmp ' ]    asm [ ' _ saveSetjmp ' ] ;
var big = bigMath . sum ( [ ] ) ; var frac:==:fracMath . sum ( [ ] ) ;
var validity = element . prop ( ' validity ' ) ; var placeholder:==:element [ 0 ] . placeholder , noevent    ;
var onSuccess = options . onSuccess  |  |  function ( ) ; var onError:==:options . onError  |  |  function ( ) ;
var tagName = this . _ tagName ; var type:==:this . _ attributes . type ;
var bind = utils . bind ; var getComponentProperty:==:utils . entity . getComponentProperty ;
var menu = this . menu ; var $ container:==:this . $ container ;
var path = require ( ' path ' ) ; var d3:==:require ( ' d3 ' ) ;
var Keys = require ( ' Keys ' ) ; var React:==:require ( ' React ' ) ;
var animationDataList = armatureData . animationDataList ; var i:==:animationDataList . length ;
var purple100 = exports . purple100 = ' # e1bee7 ' ; var purple200:==:exports . purple200    ' # ce93d8 ' ;
var northeastCornerCartesian = this . northeastCornerCartesian ; var westNormal:==:this . westNormal ;
var outer = goog . dom . getElement ( ' outer ' ) ; var inner:==:goog . dom . getElement ( ' inner ' ) ;
var Recording = require ( ' nativeModules ' ) . recording ; var view:==:require ( ' view ' ) ;
var dynCall_viiiiiid = Module [ ' dynCall_viiiiiid ' ] = asm [ ' dynCall_viiiiiid ' ] ; var dynCall_viiiiiiiii:==:Module [ ' dynCall_viiiiiiiii ' ]    asm [ ' dynCall_viiiiiiiii ' ] ;
var width = displayObject . width ; var height:==:displayObject . height ;
var get = Ember . get ; var attr:==:DS . attr ;
var stackedOn = data . stackedOn ; var val:==:data . get ( valueDim , idx ) ;
var srsName = context [ ' srsName ' ] ; var curve:==:context [ ' curve ' ] ;
var index = point . _ index ; var model:==:point . _ model ;
var node = lookup . node ; var mount:==:node . mounted ;
var bodyB = this . bodyB ; var form:==:helper . allocTransform ( ) ;
var t = String ( s ) ; var l:==:this . length - t . length ;
var syntheticuiEvent = require ( ' syntheticuiEvent ' ) ; var getEventModifierState:==:require ( ' getEventModifierState ' ) ;
var tslint = require ( ' gulp - tslint ' ) ; var fs:==:require ( ' fs ' ) ;
var heightSegments = opts & & opts . heightSegments ! = = undefined ? opts . heightSegments : 5 ; var capSegments:==:opts & & opts . capSegments !    undefined ? opts . capSegments : 18 ;
var top = options . top ; var width:==:options . width  |  |  512 ;
var key = properties [ i ] . key ; var value:==:properties [ i ] . value ;
var observer = this . observer ; var typeSupported:==:this . typeSupported ;
var username = $ ( this ) . parents ( ' . innerMarbleWrap ' ) . parents ( ' . marblesWrap ' ) . attr ( ' username ' ) ; var owner_id:==:$ ( this ) . parents ( ' . innerMarbleWrap ' ) . parents ( ' . marblesWrap ' ) . attr ( ' owner_id ' ) ;
var lightGreena200 = exports . lightGreena200 = ' # b2ff59 ' ; var lightGreena400:==:exports . lightGreena400    ' # 76ff03 ' ;
var scene = engine . scenes [ 0 ] ; var textures:==:scene . textures ;
var subscriber = _ ref . subscriber ; var window:==:_ ref . window ;
var form = document . createElement ( ' form ' ) ; var select:==:document . createElement ( ' select ' ) ;
var bodyFontSize = vm . bodyFontSize ; var bodySpacing:==:vm . bodySpacing ;
var touchableOpacity = require ( ' touchableOpacity ' ) ; var image:==:require ( ' image ' ) ;
var orange100 = exports . orange100 = ' # ffe0b2 ' ; var orange200:==:exports . orange200    ' # ffcc80 ' ;
var ui = imports . ui ; var test:==:imports . test ;
var Util = sharedUtil . util ; var ref:==:corePrimitives . ref ;
var teal400 = exports . teal400 = ' # 26a69a ' ; var teal500:==:exports . teal500    ' # 009688 ' ;
var where = rewriter . rewriteWhere ( this . whereItems , from ) ; var orderBy:==:rewriter . rewriteOrderBy ( this . orderByItems , from ) ;
var style = _ props . style ; var zDepth:==:_ props . zDepth ;
var vectorContext = e . vectorContext ; var frameState:==:e . frameState ;
var rename = require ( ' gulp - rename ' ) ; var cache:==:require ( ' gulp - cached ' ) ;
var fs = require ( ' fs ' ) ; var json:==:JSON . parse ( fs . readFileSync ( ' package . json ' , ' utf8 ' ) ) ;
var transform = options . transform ; var separator:==:options . hasOwnProperty ( ' separator ' ) ? options . separator : ' , ' ;
var user = this . analytics . user ( ) ; var campaigns:==:this . options . campaigns ;
var PROPERTY_VARIABLE_DECLARATION = ' PROPERTY_VARIABLE_DECLARATION ' ; var REST_PARAMETER:==:' REST_PARAMETER ' ;
var Identify = Facade . Identify ; var Page:==:Facade . Page ;
var ellipsoid = defaultValue ( options . ellipsoid , ellipsoid . wgs84 ) ; var semiMajorAxis:==:options . semiMajorAxis ;
var clientWidth = document . documentElement . clientWidth ; var contentWidth:==:this . contentWidth ;
var index = geometry . index ; var attributes:==:geometry . attributes ;
var c = fulfillBuiltInSoon ( ' c ' , 10 ) ; var d:==:fulfillBuiltInSoon ( ' d ' , 20 ) ;
var type = this . type ; var base:==:this . data [ this . base ] ;
var scale = interp ( fromM . scale , toM . scale , f ) ; var skew:==:interp ( fromM . skew , toM . skew , f ) ;
var urlMap = openLayers . control . cacheWrite . urlMap ; var url:==:urlMap [ tile . url ]  |  |  tile . url ;
var concat = require ( ' gulp - concat ' ) ; var fs:==:require ( ' fs ' ) ;
var functionDeclaration = traceur . syntax . trees . functionDeclaration ; var parseTree:==:traceur . syntax . trees . parseTree ;
var getElementPosition = require ( ' getElementPosition ' ) ; var getScrollPosition:==:require ( ' getScrollPosition ' ) ;
var scale = touch . scale ; var rotation:==:touch . rotation ;
var events = require ( ' events ' ) ; var inherits:==:_ interopDefault ( require ( ' inherits ' ) ) ;
var applyContents = apply . applyContents ; var applyAce:==:apply . applyAce ;
var assert = sharedUtil . assert ; var bytesToString:==:sharedUtil . bytesToString ;
var subscribable = new ko . subscribable ( ) . extend ( rateLimit : 500 ) ; var notifySpy:==:jasmine . createSpy ( ' notifySpy ' ) ;
var g = hue2rgb ( p , q , tg ) ; var b:==:hue2rgb ( p , q , tb ) ;
var beforeOpeningRoundBrace = this . _ beforeOpeningRoundBrace ; var beforeOpeningCurlyBrace:==:this . _ beforeOpeningCurlyBrace ;
var auth = imports . auth ; var info:==:imports . info ;
var c = face . c ; var d:==:face . d ;
var babel = require ( ' gulp - babel ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var gulp = require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ; var request:==:bbPromise . promisify ( require ( ' request ' ) ) ;
var firstPagePromise = pdfViewer . firstPagePromise ; var pagesPromise:==:pdfViewer . pagesPromise ;
var casper = require ( ' casper ' ) . create ( viewportSize : width : 1600,height : 900 ) ; var args:==:casper . cli . args ;
var sass   = require ( ' gulp - sass ' ) ; var umd:==:require ( ' gulp - wrap - umd ' ) ;
var knownLibraryId = windows . storage . knownLibraryId ; var media:==:windows . media ;
var assign = require ( ' object - assign ' ) ; var utils:==:require ( ' keystone - utils ' ) ;
var daterange = config . backtest . daterange ; var to:==:moment . utc ( daterange . to ) ;
var panel = $ ( ' # ' + panelId ) ; var iframe:==:$ ( ' # iframe- ' + panelId ) ;
var isSameCenterOnMap = leafletHelpers . isSameCenterOnMap ; var safeApply:==:leafletHelpers . safeApply ;
var reactdomComponentTree = require ( ' reactdomComponentTree ' ) ; var reactFeatureFlags:==:require ( ' reactFeatureFlags ' ) ;
var _ im_reset_search = Module [ ' _ im_reset_search ' ] = asm [ ' _ im_reset_search ' ] ; var _ im_flush_cache:==:Module [ ' _ im_flush_cache ' ]    asm [ ' _ im_flush_cache ' ] ;
var width = img . naturalWidth  |  |  img . width ; var height:==:img . naturalHeight  |  |  img . height ;
var colorSpace = coreColorSpace . colorSpace ; var objectLoader:==:coreObj . objectLoader ;
var children = node . children ; var length:==:children . length ;
var loadResources = model . _ loadResources ; var bufferViews:==:model . gltf . bufferViews ;
var wrapS = info . wrapS ; var wrapT:==:info . wrapT ;
var clientWidth = _ ref3$clientWidth = = = undefined ? true : _ ref3$clientWidth ; var columnIndex:==:_ ref3 . columnIndex ;
var uValues = this . _ uValues = this . _ quantizedVertices . subarray ( 0 , vertexCount ) ; var vValues:==:this . _ vValues    this . _ quantizedVertices . subarray ( vertexCount , 2 * vertexCount ) ;
var draftOffsetKey = require ( ' draftOffsetKey ' ) ; var nullthrows:==:require ( ' nullthrows ' ) ;
var offsetX = this . _ transformController . offsetx ( ) * window . devicePixelRatio ; var offsety:==:this . _ transformController . offsety ( ) * window . devicePixelRatio ;
var height = _ props6 . height ; var width:==:_ props6 . width ;
var pinkA400 = exports . pinkA400 = ' # f50057 ' ; var pinkA700:==:exports . pinkA700    ' # c51162 ' ;
var path = Npm . require ( ' path ' ) ; var url:==:Npm . require ( ' url ' ) ;
var tempVertexs = this . _ _ tempVertexs |  |  [ ] ; var width:==:img . width ;
var loadFilesAtInit = options . loadFilesAtInit ; var ideProviderName:==:options . ideProviderName  |  |  ' cloud9 ' ;
var replace = require ( ' gulp - replace ' ) ; var webdriver:==:require ( ' gulp - webdriver ' ) ;
var height = corridorGeometry . _ height ; var width:==:corridorGeometry . _ width ;
var x = geometry . x ; var y:==:geometry . y ;
var util = imports . util ; var test:==:imports . test ;
var depthRange = defaultValue ( statesFunctions . depthRange , [ 0 . 0 , 1 . 0 ] ) ; var polygonOffset:==:defaultValue ( statesFunctions . polygonOffset , [ 0 . 0 , 0 . 0 ] ) ;
var accent = ' accent ' ; var bin:==:' bin ' ;
var alias = require ( ' alias ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var callbacks = instance . callbacks ; var document:==:instance . document ;
var u = uv . x ; var v:==:uv . y ;
var cordovaPopupNavigator = exports . cordovaPopupNavigator = _ _ webpack_require _ _ ( 341 ) ; var cordovaiFrameNavigator:==:exports . cordovaiFrameNavigator    _ _ webpack_require _ _ ( 343 ) ;
var gulp = require ( ' gulp ' ) ; var connect:==:require ( ' gulp - connect ' ) ;
var app = this . app ; var model:==:app . models [ modelName ] ;
var LABEL0 = ' LABEL0 ' ; var VALUE0:==:' VALUE0 ' ;
var e = ' ' e ' ' ; var f:==:' ' f ' ' ;
var nodes = option . data  |  |  option . nodes ; var matrix:==:option . matrix ;
var flash = require ( ' connect - flash ' ) ; var moment:==:require ( ' moment ' ) ;
var reactBrowserEventEmitter = require ( ' reactBrowserEventEmitter ' ) ; var reactdomComponentTree:==:require ( ' reactdomComponentTree ' ) ;
var cfgFields = goog . net . xpc . cfgFields ; var crossPageChannel:==:goog . net . xpc . crossPageChannel ;
var supportsColor = require ( ' chalk ' ) . supportsColor ; var glob:==:require ( ' glob ' ) ;
var View = require ( ' View ' ) ; var f8Button:==:require ( ' f8Button ' ) ;
var h = geo . height * s . scale ; var w:==:geo . width * s . scale ;
var certificateStores = windows . security . cryptography . certificates . certificateStores ; var standardCertificateStoreNames:==:windows . security . cryptography . certificates . standardCertificateStoreNames ;
var width = Math . max . apply ( null , widths ) ; var height:==:Math . max . apply ( null , heights ) ;
var width = parseInt ( frag . getAttribute ( ' data - width ' ) , 10 )  |  |  0 ; var height:==:parseInt ( frag . getAttribute ( ' data - height ' ) , 10 )  |  |  0 ;
var matchesNames = scope . matchesNames ; var mixin:==:scope . mixin ;
var cubicSubdivide = curveTool . cubicSubdivide ; var quadraticAt:==:curveTool . quadraticAt ;
var position = geometry . attributes . position ; var uv:==:geometry . attributes . uv ;
var from = operations . from ; var to:==:operations . to ;
var rollup = require ( ' rollup ' ) ; var uglify:==:require ( ' uglify - js ' ) ;
var Warning = subError ( ' warning ' , ' warning ' ) ; var cancellationError:==:subError ( ' cancellationError ' , ' cancellation error ' ) ;
var createAssignmentStatement = parseTreeFactory . createAssignmentStatement ; var createBlock:==:parseTreeFactory . createBlock ;
var dayNames = settings . dayNames  |  |  this . local . dayNames ; var monthNumbers:==:settings . monthNumbers  |  |  this . local . monthNumbers ;
var rotationSkewx = options [ ' rotationSkewx ' ] ; var rotationSkewy:==:options [ ' rotationSkewy ' ] ;
var end = this . end ; var content:==:this . content ;
var quasiLiteralTransformer = traceur . codegeneration . quasiLiteralTransformer ; var restParameterTransformer:==:traceur . codegeneration . restParameterTransformer ;
var doc = subject . window . document ; var p:==:doc . querySelector ( ' p ' ) ;
var duration = isUndefined ( v [ ' duration ' ] ) ? 2 : v [ ' duration ' ] ; var timeout:==:isUndefined ( v [ ' timeout ' ] ) ? 250 : v [ ' timeout ' ] ;
var g = this . g . toString ( 16 ) ; var b:==:this . b . toString ( 16 ) ;
var con = client . connection ; var query:==:client . query ( ' whatever ' ) ;
var data = this . data ; var len:==:data . length ;
var b = new stdlib . float32Array ( heap ) ; var fround:==:stdlib . math . fround ;
var asCLI = utils . asCLI ; var fork:==:require ( ' child_process ' ) . fork ;
var Plugin = imports . Plugin ; var pubsub:==:imports . pubsub ;
var rewrap = scope . rewrap ; var unwrap:==:scope . unwrap ;
var records = summary ? this . summary : this . records ; var rec:==:records [ index ] ;
var groupKeys = this . _ groupKeys ; var groupKey:==:item . groupKey ;
var currentdomNode = this . _ currentdomNode ; var crumbs:==:this . crumbsElement ;
var events = require ( ' events ' ) ; var exists:==:Fs . exists  |  |  Path . exists ;
var apiKey = options . apiKey ; var version:==:options . version ;
var key = event . detail . key ; var oldValue:==:event . detail . oldValue ;
var x = Math . round ( ( record . endTime ( ) - minTime ) * xFactor ) ; var y:==:math . round ( ( counters . jsHeapSizeUsed - minUsedHeapSize ) * yFactor ) ;
var session = e . session ; var tab:==:e . tab ;
var x = this . data [ dataix ] ; var l:==:this . labels [ dataix ] ;
var intersection = intersections [ 0 ] ; var point:==:intersection . point ;
var m = particle . mass ; var n:==:this . options . normal ;
var a = mobx . observable ( 1 ) ; var b:==:mobx . observable ( 2 ) ;
var assert = util . assert ; var assertionError:==:util . assertionError ;
var div = $ ( obj ) . data ( ' div ' ) ; var settings:==:$ ( obj ) . data ( ' settings ' ) ;
var checked = n . attributes . checked ; var href:==:a . href ? a . href : Ext . isGecko ? ' ' : ' # ' ;
var name = plugin . name ; var version:==:plugin . version ;
var abs = Math . abs ; var floor:==:Math . floor ;
var reactdomTextComponent = require ( ' reactdomTextComponent ' ) ; var reactDefaultBatchingStrategy:==:require ( ' reactDefaultBatchingStrategy ' ) ;
var boundingVolume = this . _ boundingVolume ; var boundingVolume2d:==:this . _ boundingVolume2d ;
var eastNormal = this . eastNormal ; var northNormal:==:this . northNormal ;
var width = layer . width ; var height:==:layer . height ;
var   COPY = 16 ; var   TABLE:==:17 ;
var ONEDAY = constants . ONEDAY ; var BADNUM:==:constants . BADNUM ;
var base = this . texture . baseTexture ; var crop:==:this . texture . crop ;
var r1 = con . r1 ; var r2:==:con . r2 ;
var width = this . _ canvas . width ; var height:==:this . _ canvas . height - lowerOffset ;
var hasStoreStateChanged = this . hasStoreStateChanged ; var renderedElement:==:this . renderedElement ;
var dirname = path . dirname ( fileObj . url ) ; var extname:==:path . extname ( fileObj . url ) ;
var parseDelay = givenOptions . parseDelay  |  |  300 ; var time:==:givenOptions . time  |  |  window ;
var value = dir . value ; var modifiers:==:dir . modifiers ;
var content = page . content ; var images:==:options . image  |  |  options . images  |  |  page . photos  |  |  [ ] ;
var lhost = splitlhostlport [ 0 ] ; var lport:==:splitlhostlport [ 1 ] ;
var constructor = obj . constructor ; var proto:==:( _ . isFunction ( constructor ) & & constructor . prototype )  |  |  objProto ;
var endDate = this . arg ( ' endDate ' ) ; var isAllDay:==:this . arg ( ' isAllDay ' ) ;
var hierarchy = polygon . hierarchy ; var show:==:polygon . show ;
var y = wc . y ; var z:==:wc . z ;
var Plugin = imports . Plugin ; var api:==:imports . api ;
var type = details . type ; var stack:==:details . stack ;
var isNum = sharedUtil . isNum ; var readUint32:==:sharedUtil . readUint32 ;
var decimal = ( config . decimal = = = false ) ? ' ' : config . decimal  |  |  ' . ' ; var negative:==:( config . negative      true ) ? true : false ;
var canvas = self . canvas ; var image:==:self . image ;
var rotation = defaultValue ( options . rotation , 0 ) ; var tiltx:==:defaultValue ( options . tiltx , 0 ) ;
var parameterList = this . transformAny ( tree . parameterList ) ; var body:==:this . transformSuperInFunctionBody _ ( tree . body , homeObject , internalName ) ;
var match = matches [ i ] ; var range:==:self . $ rangeFromMatch ( row , match . offset , match . str . length ) ;
var grey500 = exports . grey500 = ' # 9e9e9e ' ; var grey600:==:exports . grey600    ' # 757575 ' ;
var merge = require ( ' webpack - merge ' ) ; var webpack:==:require ( ' webpack ' ) ;
var tileLoadQueueLow = primitive . _ tileLoadQueueLow ; var tileProvider:==:primitive . _ tileProvider ;
var output = argv . output ; var device:==:argv . device  |  |  ' iPhone6 + ' ;
var technique = techniques [ i d ] ; var states:==:technique . states ;
var skeleton = this . skeleton = new spine . Skeleton ( skeletonData ) ; var bounds:==:this . bounds ;
var watcher = imports . watcher ; var fs:==:imports . fs ;
var master = this . master ; var element:==:this . element ;
var port = state . port ; var ddr:==:state . ddr ;
var reactdomComponentFlags = require ( ' reactdomComponentFlags ' ) ; var reactdomComponentTree:==:require ( ' reactdomComponentTree ' ) ;
var streamedObject = args . streamedObject ; var stream:==:args . stream ;
var path = scope . path ; var rootDocument:==:scope . rootDocument ;
var rows = this . rows . groups ; var sortedCols:==:this . sortedCols ( ) ;
var index = state . index ; var count:==:state . count ;
var direction = camera . directionWC ; var position:==:camera . positionWC ;
var n = conf . n  |  0 ; var input:==:inputs [ type ] ;
var clearInterval = global . clearInterval ; var toString:==:object . prototype . toString ;
var extrude = polygonGeometry . _ extrude ; var polygonHierarchy:==:polygonGeometry . _ polygonHierarchy ;
var g = 255 - Math . abs ( 255 - color2 . rgb [ 1 ] - color1 . rgb [ 1 ] ) ; var b:==:255 - Math . abs ( 255 - color2 . rgb [ 2 ] - color1 . rgb [ 2 ] ) ;
var hexadecimal = require ( ' is - hexadecimal ' ) ; var alphanumerical:==:require ( ' is - alphanumerical ' ) ;
var sourceRoot = util . getArg ( sourceMap , ' sourceRoot ' , null ) ; var sourcesContent:==:util . getArg ( sourceMap , ' sourcesContent ' , null ) ;
var command = commands [ j ] ; var derivedCommand:==:( shadowsEnabled & & command . receiveShadows ) ? command . derivedCommands . oit . shadows . translucentCommand : command . derivedCommands . oit . translucentCommand ;
var networkURL = this . _ networkMapping . networkurl ( uiSourceCode ) ; var cssurLs:==:this . _ cssurLsForsassurl [ networkurl ] ;
var blueA400 = exports . blueA400 = ' # 2979ff ' ; var blueA700:==:exports . blueA700    ' # 2962ff ' ;
var parseTreeWriter = traceur . outputgeneration . parseTreeWriter ; var parseTreeMapWriter:==:traceur . outputgeneration . parseTreeMapWriter ;
var util = require ( ' util ' ) ; var tmp:==:require ( ' tmp ' ) ;
var option = axisPointerModel . option ; var status:==:axisPointerModel . get ( ' status ' ) ;
var path = uiSourceCode . path ( ) ; var fileSystemPath:==:fileSystemWorkspaceBinding . fileSystemPath ( uiSourceCode . project ( ) . i d ( ) ) ;
var h = hsba [ 0 ] ; var s:==:hsba [ 1 ] ;
var assert = require ( ' assert - plus ' ) ; var sshpk:==:require ( ' sshpk ' ) ;
var bgFill = bgFill  |  |  ' rgba ( 68,68,68,0 . 5 ) ' ; var fontSizeFreq:==:fontSizeFreq  |  |  ' 12px ' ;
var characterMetadata = require ( ' characterMetadata ' ) ; var findRangesImmutable:==:require ( ' findRangesImmutable ' ) ;
var snapshot = data . snapshot ; var lastPageNum:==:data . lastPageNum ;
var options = $ timepicker . $ options ; var scope:==:$ timepicker . $ scope ;
var reactNative = require ( ' reactNative ' ) ; var staticContainer:==:require ( ' staticContainer . react ' ) ;
var isRowLoaded = _ ref3 . isRowLoaded ; var minimumBatchSize:==:_ ref3 . minimumBatchSize ;
var mainView = _ jsViewMainView [ ' default ' ] ; var listController:==:_ jsControllerListController [ ' default ' ] ;
var y1 = pf ( node . getAttribute ( ' y1 ' ) )  |  |  pf ( node . getAttribute ( ' y ' ) )  |  |  ( pf ( node . getAttribute ( ' cy ' ) ) - pf ( node . getAttribute ( ' r ' ) ) )  |  |  0 ; var y2:==:pf ( node . getAttribute ( ' y2 ' ) )  |  |  ( y1 + pf ( node . getAttribute ( ' height ' ) ) )  |  |  ( pf ( node . getAttribute ( ' cy ' ) ) + pf ( node . getAttribute ( ' r ' ) ) )  |  |  0 ;
var direction = e . gesture . direction ; var x:==:e . gesture . center . x ;
var a = i d : 1 , name : ' a ' ; var b:==:i d : 2 , name : ' b ' ;
var numberOfRetries = options . numberOfRetries  |  |  5 ; var tailableRetryInterval:==:options . tailableRetryInterval  |  |  500 ;
var b = el . bounds ; var p:==:options . nodePosition . toUpperCase ( ) ;
var expertSubsetCharset = coreCharsets . expertSubsetCharset ; var fontRendererFactory:==:coreFontRenderer . fontRendererFactory ;
var serialize = xhrOptions . serialize = isjsonp ? identity : xhrOptions . serialize  |  |  json . stringify ; var deserialize:==:xhrOptions . deserialize    isjsonp ? identity : xhrOptions . deserialize  |  |  json . parse ;
var g = ( color . g * 255 )  |  0 ; var b:==:( color . b * 255 )  |  0 ;
var window = global$1 . window ; var console:==:global$1 . console ;
var shader = renderSession . shaderManager . stripShader ; var drawMode:==:( this . drawMode      phaser . rope . triangle_strip ) ? gl . triangle_strip : gl . triangles ;
var clientY = defaultValue ( options . clienty , 0 ) ; var button:==:defaultValue ( options . button , 0 ) ;
var reactBaseClasses = require ( ' reactBaseClasses ' ) ; var reactChildren:==:require ( ' reactChildren ' ) ;
var extent = ol . extent . createOrUpdate ( 1 , 2 , 3 , 4 ) ; var clone:==:ol . extent . clone ( extent ) ;
var domUtils = baidu . editor . dom . domUtils ; var editor:==:new baidu . editor . editor ( ' autoFloatEnabled ' : false ) ;
var cd = pointData . cd ; var trace:==:cd [ 0 ] . trace ;
var legacy = options . legacy ; var protect:==:options . protect ;
var name = element . getAttribute ( ' data - name ' ) ; var aliases:==:element . getAttribute ( ' data - aliases ' )  |  |  '' ;
var cropBox = self . cropBox ; var action:==:self . action ;
var node = path . node ; var open:==:node . openingElement ;
var lastFocus = apf . menu . lastFocus ; var opener:==:this . opener ;
var map = omap . _ map ; var list:==:omap . _ list ;
var LOGICAL_OPERATORS = exports . LOGICAL_OPERATORS = [ '  |  |  ' , ' & & ' ] ; var UPDATE_OPERATORS:==:exports . UPDATE_OPERATORS    [ ' + + ' , ' -- ' ] ;
var tab = plugin . activeDocument . tab ; var iframe:==:plugin . activeSession . iframe ;
var def = $ ( ' def-2 ' ) ; var jkl:==:$ ( ' jkl-2 ' ) ;
var Scale = Tone_signal_Scale ; var Tone:==:Tone_core_Tone ;
var p = createFromConstructor ( object . prototype ) ( ) ; var c:==:createFromConstructor ( p ) ;
var searchWords = _ ref . searchWords ; var textToHighlight:==:_ ref . textToHighlight ;
var IDENTIFIER_EXPRESSION = parseTreeType . identifier_expression ; var import_declaration:==:parseTreeType . import_declaration ;
var xRef = coreObj . xRef ; var lexer:==:coreParser . lexer ;
var scrollPositionChangeReason = _ state . scrollPositionChangeReason ; var scrollTop:==:_ state . scrollTop ;
var path = require ( ' path ' ) ; var execFile:==:require ( ' child_process ' ) . execFile ;
var sparse = math . sparse ; var unit:==:math . unit ;
var winston = require ( ' winston ' ) ; var validator:==:require ( ' validator ' ) ;
var dataSource = juggler . dataSource ; var modelBuilder:==:juggler . modelBuilder ;
var th = this . _ mc . tileHeight ; var tilesets:==:this . _ mc . tilesets ;
var button = document . createElement ( ' button ' ) ; var state:==:( applet . state      ' 1f01 ' ) ? ' active ' : ' not active ' ;
var btoa = require ( ' btoa ' ) ; var glob:==:require ( ' glob ' ) ;
var NO_DATA_ALLOWED_ERR    = exceptionCode . no_data_allowed_err    = ( ( exceptionMessage [ 6 ] = ' no data allowed ' ) , 6 ) ; var no_modification_allowed_err:==:exceptionCode . no_modification_allowed_err    ( ( exceptionMessage [ 7 ]   ' no modification allowed ' ) , 7 ) ;
var servers = null , serversIndex = 0 ; var server:==:gatewayCallbacks . server ;
var uuid = require ( ' uuid ' ) . v4 ; var mongo:==:require ( ' mongodb ' ) . mongoClient ;
var ignore = require ( ' gulp - ignore ' ) ; var merge:==:require ( ' merge2 ' ) ;
var splitText = this . _ dd_splittext ( text ) ; var l:==:splitText . length ;
var spriteSize = this . _ sizeFromString ( frameDict [ ' spriteSize ' ] ) ; var textureRect:==:this . _ rectFromString ( frameDict [ ' textureRect ' ] ) ;
var width = range . width ( ) - 15 ; var max:==:parseFloat ( range . attr ( ' max ' ) ) ;
var pathArray = options . pathArray ; var closeArray:==:options . closeArray  |  |  false ;
var isArray = _ vue$util . isArray ; var defineReactive:==:_ vue$util . defineReactive ;
var tintFn = this . tintFn ; var base:==:this . base ;
var domain = doc . domain ; var path:==:win . location . pathname ;
var util = imports . util ; var Panel:==:imports . Panel ;
var COMPILER_REVISION = _ _ dependency3 _ _ . COMPILER_REVISION ; var REVISION_CHANGES:==:_ _ dependency3 _ _ . REVISION_CHANGES ;
var method = obj [ methodName ] ; var mock:==:initMock ( mockMethod , context  |  |  obj ) ;
var emitter = scene . getLastEntryByid ( parsedLensFlareSystem . emitterId ) ; var lensFlareSystem:==:new babylon . lensFlareSystem ( ' lensFlareSystem # ' + parsedLensFlareSystem . emitterId , emitter , scene ) ;
var granularity = ellipse . granularity ; var stRotation:==:ellipse . stRotation ;
var modName = arrItem . modName ; var group:==:arrItem . group ;
var x = workspace . startScrollx + dx ; var y:==:workspace . startScrolly + dy ;
var path = require ( ' path ' ) ; var File:==:gutil . File ;
var element = this . element , that = this , new_step = this . _ currentStep - 1 ; var o:==:this . options ;
var LEFT_BRACE = C . LEFT_BRACE = 0x1 ; var RIGHT_BRACE:==:C . RIGHT_BRACE    0x2 ;
var horizontalPosition = _ props . horizontalPosition ; var label:==:_ props . label ;
var forInStatement = exports . forInStatement = buildForxStatement ( ' in ' ) ; var forOfStatement:==:exports . forOfStatement    buildForxStatement ( ' of ' ) ;
var granularity = polylineGeometry . _ granularity ; var ellipsoid:==:polylineGeometry . _ ellipsoid ;
var increment = docSet . getByLongname ( ' increment ' ) [ 0 ] ; var print:==:docSet . getByLongname ( ' print ' ) [ 0 ] ;
var io = board . io ; var address:==:opts . address  |  |  this . ADDRESSES [ 0 ] ;
var entity = this . entity ; var entityManager:==:this . entityManager ;
var tokenType = traceur . syntax . tokenType ; var evaluateStringLiteral:==:traceur . util . evaluateStringLiteral ;
var neighborsSignificance = this . neighborsSignificance ; var processingFlags:==:this . processingFlags ;
var clientLeft = docElem . clientLeft  |  |  body . clientLeft  |  |  0 ; var top:==:box . top + scrollTop - clientTop ;
var timestamps = this . timestamps ; var idToNode:==:this . _ idToNode ;
var n = new accessorNode ( a , new indexNode ( [ b , c ] ) ) ; var e:==:new constantNode ( 5 ) ;
var canEvaluate = util . canEvaluate ; var tryCatch1:==:util . tryCatch1 ;
var dom = this . dom ; var ctx:==:this . ctx ;
var first = res . boundry . first ; var last:==:res . boundry . last ;
var s = Number ( regExpResultArray [ 2 ] ) ; var l:==:number ( regExpResultArray [ 3 ] ) ;
var LET = tokenType . let ; var var:==:tokenType . var ;
var key = rows [ i ] . editors [ j ] . key ; var editor:==:this . editors [ key ] ;
var yellow400 = exports . yellow400 = ' # ffee58 ' ; var yellow500:==:exports . yellow500    ' # ffeb3b ' ;
var lineNumber = searchMatches [ i ] . lineNumber ; var lineContent:==:searchMatches [ i ] . lineContent ;
var tree = imports . tree ; var anims:==:imports . anims ;
var animation = axisPointerModel . get ( ' animation ' ) ; var axis:==:axisModel . axis ;
var buffer = buffers [ bufferView . buffer ] ; var byteOffset:==:bufferView . byteOffset + accessor . byteOffset ;
var Tree = imports . Tree ; var scm:==:imports . scm ;
var material = variable . material ; var uniforms:==:material . uniforms ;
var camera = scene . camera ; var maxCoord:==:controller . _ maxCoord ;
var scrollLeft = viewportElement . scrollLeft ; var scrollTop:==:viewportElement . scrollTop ;
var key = scope . generateUidIdentifier ( ' key ' ) ; var len:==:scope . generateUidIdentifier ( ' len ' ) ;
var p = this . _ props ; var style:==:this . el . style ;
var left = point . left ; var top:==:point . top ;
var alarm = icalEvent . component . getAllSubcomponents ( ' valarm ' ) [ 0 ] ; var trigger:==:alarm . getFirstProperty ( ' trigger ' ) ;
var nodeCommands = this . _ nodeCommands ; var length:==:nodeCommands . length ;
var span = document . createElement ( ' span ' ) ; var msisdn:==:iccInfo . msisdn  |  |  iccInfo . mdn ;
var errors = require ( ' restify - errors ' ) ; var badRequestError:==:errors . badRequestError ;
var add = options . add ; var merge:==:options . merge ;
var args = inExpr . args ; var values:==:inExpr . values ;
var Module = Struct ( ' Module ' ) ; var outputBuffer:==:struct ( ' outputBuffer ' ) ;
var localChunkSize = $ ( ' # localChunkSize ' ) . val ( ) ; var remoteChunkSize:==:$ ( ' # remoteChunkSize ' ) . val ( ) ;
var x = u . x - v . x ; var y:==:u . y - v . y ;
var createTrueLiteral = parseTreeFactory . createTrueLiteral ; var createTryStatement:==:parseTreeFactory . createTryStatement ;
var process = Promise . method ( post . process . bind ( hexo ) ) ; var pattern:==:post . pattern ;
var component = components . get ( utils . getParentComponent ( ) ) ; var usedPropTypes:==:component & & component . usedPropTypes  |  |  [ ] ;
var maxX = r1 . _ maxX > r2 . _ maxX ? r1 . _ maxX : r2 . _ maxX ; var maxY:==:r1 . _ maxY > r2 . _ maxY ? r1 . _ maxY : r2 . _ maxY ;
var minMaxSpan = axisProxy . _ minMaxSpan = ; var dataZoomModel:==:axisProxy . _ dataZoomModel ;
var pos = this . position ; var l:==:labels . length ;
var x = xValues [ i ] ; var y:==:yValues [ i ] ;
var option = _ ref2 . option ; var options:==:_ ref2 . options ;
var sliced = require ( ' sliced ' ) ; var debug:==:require ( ' debug ' ) ( ' nightmare : ipc ' ) ;
var router = require ( ' router ' ) ; var flaverr:==:require ( ' flaverr ' ) ;
var gulp = require ( ' gulp ' ) ; var watch:==:require ( ' gulp - watch ' ) ;
var d = new symbolNode ( 'd ' ) ; var mult:==:new operatorNode ( ' * ' , ' multiply ' , [ a , b ] ) ;
var source = require ( ' vinyl - source - stream ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var dynCall_viiiii = Module [ ' dynCall_viiiii ' ] = asm [ ' dynCall_viiiii ' ] ; var dynCall_vi:==:Module [ ' dynCall_vi ' ]    asm [ ' dynCall_vi ' ] ;
var config = gRequire ( ' config ' ) ; var task:==:gRequire ( ' task ' ) ;
var lastPaintRect = this . _ lastPaintRectByLayerId [ layerId ] ; var layer:==:layerTree . layerById ( layerId ) ;
var mac = evt . detail . mac ; var blob:==:evt . detail . blob ;
var events = monthDay . events ; var event:==:events [ 0 ] ;
var table = editor . document . getElementsByTagName ( ' table ' ) [ 0 ] ; var cell:==:table . rows [ 0 ] . cells [ 0 ] ;
var merge = require ( ' merge - stream ' ) ; var plug:==:require ( ' gulp - load - plugins ' ) ( ) ;
var followSurface = polylineGeometry . _ followSurface ; var granularity:==:polylineGeometry . _ granularity ;
var fs = require ( ' fs - extra ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var concat   = require ( ' gulp - concat ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var negative = $ . data ( this , ' numeric . negative ' ) ; var val:==:this . value ;
var alarm = icalEvent . component . getAllSubcomponents ( ' valarm ' ) [ 2 ] ; var trigger:==:alarm . getFirstProperty ( ' trigger ' ) ;
var util = require ( ' util ' ) ; var protocol:==:require ( ' pomelo - protocol ' ) ;
var cookie = self . cookie ; var notify:==:self . notify ;
var q = $ q . defer ( ) ; var prompt:==:appRate . promptForRating ( immediate ) ;
var barrierCallbacks = window . barrierCallbacks = ; var barrierSignals:==:window . barrierSignals    ;
var TYPE_ALIAS_DECLARATION = ' TYPE_ALIAS_DECLARATION ' ; var TYPE_ARGUMENTS:==:' TYPE_ARGUMENTS ' ;
var oldValue = propertyChangedArgs . oldValue ; var newValue:==:propertyChangedArgs . newValue ;
var View = require ( ' View ' ) ; var f8Header:==:require ( ' f8Header ' ) ;
var fakeSettings = config . fakeSettings  |  |  ; var fakeConfiguration:==:config . fakeConfiguration  |  |  ;
var b = Ti . UI . createView ( borderColor : ' # 133899',borderWidth : 6,borderRadius : 2,backgroundColor : ' purple',width : 100,height : 100,top : 115,right : 40,name : ' view b ' ) ; var c:==:ti . ui . createView ( borderColor : ' # 133899',borderWidth : 6,borderRadius : 2,backgroundColor : ' red',width : 100,height : 100,top : 115,left : 40,name : ' view c ' ) ;
var longDateFormat = intlHelper . get ( ' longDateFormat ' ) ; var shortTimeFormat:==:intlHelper . get ( ' shortTimeFormat ' ) ;
var rect = spriteFrame . _ rect ; var offset:==:spriteFrame . _ offset ;
var leftBounds = incomingLayer . leftBounds  |  |  defaultLeftBounds ; var rightBounds:==:incomingLayer . rightBounds  |  |  defaultRightBounds ;
var editors = imports . editors ; var anims:==:imports . anims ;
var canvas = document . createElement ( ' canvas ' ) ; var size:==:this . size * window . devicePixelRatio ;
var notify   = require ( ' gulp - notify ' ) ; var header:==:require ( ' gulp - header ' ) ;
var options = self . options ; var $ container:==:self . $ container ;
var eventPropagators = require ( ' eventPropagators ' ) ; var reactTreeTraversal:==:require ( ' reactTreeTraversal ' ) ;
var layers = cfg . layers = = = undefined?~0 : cfg . layers ; var width:==:view . width * view . scaleX ;
var create = splitterHelpers . create ; var keys:==:kendo . keys ;
var left = this . _ getPropertyValueAsPx ( computedStyle , componentName + ' -left ' + suffix ) ; var top:==:this . _ getPropertyValueAsPx ( computedStyle , componentName + ' -top ' + suffix ) ;
var visualDataRoleKind = powerbi . visualDataRoleKind ; var sqExprBuilder:==:powerbi . data . sqExprBuilder ;
var element = _ elements [ e ] ; var material:==:element . material ;
var less = require ( ' gulp - less ' ) ; var browserify:==:require ( ' gulp - browserify ' ) ;
var path = require ( ' path ' ) ; var async:==:require ( ' async ' ) ;
var command = item . command ; var hashId:==:binding . hashId ;
var ejectBanner = require ( ' ejectBanner ' ) ; var footer:==:require ( ' footer ' ) ;
var entry = this . entry ; var order:==:$ scope . order ;
var featureNS = context [ ' featureNS ' ] ; var gmlVersion:==:context [ ' gmlVersion ' ] ;
var i d = this . h ( ' i d ' ) ; var preset:==:this . h ( ' preset ' ) ;
var pixelRatio = require ( ' pixelRatio ' ) ; var react:==:require ( ' react ' ) ;
var width = $ ( window ) . width ( ) ; var height:==:$ ( window ) . height ( ) ;
var rows = _ props . rows ; var rowsMax:==:_ props . rowsMax ;
var leftCurlyCount = this . scanner . leftCurlyCount ; var rightCurlyCount:==:this . scanner . rightCurlyCount ;
var width = document . querySelectorAll ( ' . clusters rect ' ) [ 0 ] . width . baseVal . value ; var cluster:==:d3 . selectAll ( ' . cluster ' ) ;
var folder = new folder_view . Folder ( $ ( ' # files ' ) ) ; var addressbar:==:new abar . addressBar ( $ ( ' # addressbar ' ) ) ;
var dirty = dirtyObjects [ i ] ; var object:==:dirty . object ;
var next = item . next ; var prev:==:item . prev ;
var prompt = require ( ' prompt ' ) ; var winston:==:require ( ' winston ' ) ;
var encrypted = socket . request ? ! ! socket . request . connection . encrypted : false ; var host:==:headers . host ;
var Accessory = require ( ' hap - nodejs ' ) . Accessory ; var Service:==:require ( ' hap - nodejs ' ) . Service ;
var nodes = this . _ animation . _ nodes ; var duration:==:this . _ animation . duration ;
var ARRAY = traceur . syntax . predefinedName . array ; var call:==:traceur . syntax . predefinedName . call ;
var client = this . _ client . scope ( context : ' content ' ) ; var format:==:this . _ formatApp . bind ( this , client ) ;
var internalArray = utils . internalArray ; var objectHasOwnProperty:==:utils . importNow ( ' objectHasOwnProperty ' ) ;
var y = lastMotionData . y ; var z:==:lastMotionData . z ;
var first = Math . max ( firstRow , config . firstRow ) ; var last:==:math . min ( lastRow , config . lastRow ) ;
var deepPurple800 = exports . deepPurple800 = ' # 4527a0 ' ; var deepPurple900:==:exports . deepPurple900    ' # 311b92 ' ;
var findLocaleId = closurei18nExtractor . findLocaleId ; var extractNumberSymbols:==:closurei18nExtractor . extractNumberSymbols ;
var repeat = motionArgs . repeat ; var forward:==:motionArgs . forward      lastSearch . forward ;
var tolerance = opts . tolerance = = = undefined ? 0 . 001 : opts . tolerance ; var threshold:==:opts . threshold      undefined ? 0 . 1 : opts . threshold ;
var path = require ( ' path ' ) ; var badge:==:require ( path . join ( _ _ dirname , ' lib ' , ' badge . js ' ) ) ;
var parseServer = require ( ' parse - server ' ) . parseServer ; var path:==:require ( ' path ' ) ;
var plan = testDoc . plan ; var requires:==:testDoc . requires ;
var vertexShader = loadShader ( gl , vertexShaderProg , gl . vertex_shader ) ; var fragmentShader:==:loadShader ( gl , fragmentShaderProg , gl . fragment_shader ) ;
var n = arguments [ 0 ] ; var m:==:arguments [ 1 ] ;
var printStyle = _ _ webpack_require _ _ ( 29 ) . printStyle ; var allOptions:==:_ _ webpack_require _ _ ( 49 ) . allOptions ;
var recorderProfile = this . settings . recorderProfiles . selected ( ' key ' ) ; var pictureSize:==:this . settings . pictureSizes . selected ( ' data ' ) ;
var ctrlKey = event . ctrlKey ; var shiftKey:==:event . shiftKey ;
var b = this . _ options . border ; var canvas:==:document . createElement ( ' canvas ' ) ;
var trustedDomains = _ extractAllDomains ( configOptions . trustedDomains ) ; var len:==:trustedDomains . length ;
var edgeVertexa = spheretrimesh_edgevertexa ; var edgeVertexb:==:spheretrimesh_edgevertexb ;
var state = this . state _ ; var fillStyle:==:state . fillStyle ;
var width = elementPos . width ; var height:==:elementPos . height ;
var Plugin = imports . Plugin ; var bridge:==:imports . bridge ;
var arc = this . arc ; var hasSelection:==:interactivityService & & interactivityService . hasSelection ( ) ;
var closeTag = config . closeTag ; var openTag:==:config . openTag ;
var When = exports . When = defineStep ; var then:==:exports . then    defineStep ;
var account = this . _ account ; var w:==:new $ wbxml . Writer ( ' 1 . 3 ' , 1 , ' UTF-8 ' ) ;
var name = this . namespace ; var useColors:==:this . useColors ;
var animatedImplementation = require ( ' animatedImplementation ' ) ; var image:==:require ( ' image ' ) ;
var AFTER_UNSUBSCRIPTION_ID = nconf . get ( ' AFTER_UNSUBSCRIPTION_ID ' ) ; var BEFORE_UNSUBSCRIPTION_ID:==:nconf . get ( ' BEFORE_UNSUBSCRIPTION_ID ' ) ;
var level = frame [ ' @level ' ] ; var line:==:frame [ ' @lineno ' ] - 1 ;
var banner = document . getElementById ( ' banner ' ) ; var message:==:document . getElementById ( ' message ' ) ;
var caret = kendo . caret ; var keys:==:kendo . keys ;
var width = ( data . width ) ? data . width : 512 ; var height:==:( data . height ) ? data . height : 2 ;
var Text = require ( ' Text ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var jsDocument = imports . jsDocument ; var menuItem:==:imports . menuItem ;
var dynCall_viiiii = Module [ ' dynCall_viiiii ' ] = asm [ ' dynCall_viiiii ' ] ; var dynCall_viffiii:==:Module [ ' dynCall_viffiii ' ]    asm [ ' dynCall_viffiii ' ] ;
var Person = db . model ( ' gh2562_a0 ' , personSchema ) ; var band:==:db . model ( ' gh2562_a1 ' , bandSchema ) ;
var xAxis = this . _ xAxis ; var yAxis:==:this . _ yAxis ;
var reactTestTextComponent = require ( ' reactTestTextComponent ' ) ; var reactTestEmptyComponent:==:require ( ' reactTestEmptyComponent ' ) ;
var _ shouldPolyfilles6Collection = require ( ' _ shouldPolyfilles6Collection ' ) ; var guid:==:require ( ' guid ' ) ;
var body = doc . body ; var documentElement:==:doc . documentElement ;
var missingDataException = sharedUtil . missingDataException ; var util:==:sharedUtil . util ;
var y0 = this . y0 ; var x0:==:this . x0 ;
var each = zrUtil . each ; var pi:==:math . pi ;
var start = Math . min ( range . start , this . start ) ; var end:==:Math . max ( range . end , this . end ) ;
var layers = this . _ layers ; var zlevelList:==:this . _ zlevelList ;
var dialog = this . _ dom . dialog ; var style:==:dialog . style ;
var reactdomNullInputValuePropHook = require ( ' reactdomNullInputValuePropHook ' ) ; var reactdomUnknownPropertyHook:==:require ( ' reactdomUnknownPropertyHook ' ) ;
var url = req . url . replace ( countlyConfig . path , ' ' ) ; var theme:==:req . cookies . theme  |  |  curTheme ;
var red500 = exports . red500 = ' # f44336 ' ; var red600:==:exports . red600    ' # e53935 ' ;
var tpl = conf . tpl ; var query:==:conf . reqParam . query ;
var hour = this . hour ; var day:==:this . day ;
var host = managers [ 0 ] . host ; var port:==:managers [ 0 ] . port ;
var MAYBE_PROPER = scopeAnalyzer . maybe_proper ; var not_proper:==:scopeAnalyzer . not_proper ;
var device = this . device ; var distortion:==:this . distortion ;
var link = env . link ; var global:==:env . global ;
var unitName = config . unitName ; var unitToSatoshi:==:config . unitToSatoshi ;
var $ container = this . $ container ; var container:==:this . container ;
var x = cartesian3 . x ; var y:==:cartesian3 . y ;
var granularity = circleGeometry . _ ellipseGeometry . _ granularity ; var ellipsoid:==:circleGeometry . _ ellipseGeometry . _ ellipsoid ;
var slicerHeader = powerbi . visuals . controls . slicerHeader ; var pixelConverter:==:jsCommon . pixelConverter ;
var parseuri = require ( ' parseuri ' ) ; var debug:==:require ( ' debug ' ) ( ' socket . io - client : url ' ) ;
var    LENEXT = 22 ; var    DIST:==:23 ;
var rowData = _ ref . rowData ; var rowIndex:==:_ ref . rowIndex ;
var reactdomInvalidariaHook = require ( ' reactdomInvalidariaHook ' ) ; var reactdomNullInputValuePropHook:==:require ( ' reactdomNullInputValuePropHook ' ) ;
var fill = ' local fill ' ; var find:==:' local find ' ;
var values = b . _ values ; var index:==:b . _ index ;
var ancestor = nodeInfo . ancestor ; var focusNode:==:nodeInfo . focusNode ;
var argv = require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ; var assert:==:require ( ' assert ' ) ;
var leftTolerance = options . leftTolerance  |  |  0 ; var rightTolerance:==:options . rightTolerance  |  |  0 ;
var w = game . width - logo . width ; var h:==:game . height - logo . height ;
var awesomeMarkersPlugin = leafletHelpers . awesomeMarkersPlugin ; var vectorMarkersPlugin:==:leafletHelpers . vectorMarkersPlugin ;
var sorter = $ ( ' . sorters . value ' ) . data ( ' value ' ) ; var type:==:$ ( ' . types . value ' ) . data ( ' value ' ) ;
var reactComponentEnvironment = require ( ' reactComponentEnvironment ' ) ; var reactComponentBrowserEnvironment:==:require ( ' reactComponentBrowserEnvironment ' ) ;
var _ characterRecognize = module [ ' _ characterRecognize ' ] = asm [ ' _ characterRecognize ' ] ; var _ bitshift64Shl:==:module [ ' _ bitshift64Shl ' ]    asm [ ' _ bitshift64Shl ' ] ;
var scope = evt . detail . scope ; var inScope:==:! ! ( scope & & this . app . inScope ( scope ) ) ;
var isAtReturn = ! ! frameDetails . isAtReturn ( ) ; var returnValue:==:isAtReturn ? frameDetails . returnValue ( ) : undefined ;
var start = options . hasOwnProperty ( ' start ' ) ? options . start : 0 ; var stop:==:options . hasOwnProperty ( ' stop ' ) ? options . stop : 19 ;
var ellipsoid = projection . ellipsoid ; var sunCartographic:==:ellipsoid . cartesianToCartographic ( uniformState . _ sunPositionwc , sunCartographicScratch ) ;
var colorPool = workspace . colorPool ; var reversedAuthorPool:==:workspace . reversedAuthorPool ;
var index = this . index++ ; var innerSubscription:==:this . innerSubscription ;
var styleSheet = require ( ' styleSheet ' ) ; var findSessionByuri:==:require ( ' findSessionByuri ' ) ;
var reactEmptyComponent = require ( ' reactEmptyComponent ' ) ; var reactMultiChild:==:require ( ' reactMultiChild ' ) ;
var isStream = corePrimitives . isStream ; var stringStream:==:coreStream . stringStream ;
var x = cc . bezierAt ( xa , xb , xc , xd , dt ) ; var y:==:cc . bezierAt ( ya , yb , yc , yd , dt ) ;
var settings    = this . settings ; var editor:==:this . editor ;
var extraMetadata = aspect . extraMetadata ; var uri:==:extraMetadata . uri  |  |  extraMetadata . i d ;
var _ memcpy = Module [ ' _ memcpy ' ] = asm [ ' _ memcpy ' ] ; var _ bitshift64Shl:==:module [ ' _ bitshift64Shl ' ]    asm [ ' _ bitshift64Shl ' ] ;
var functionBody = this . transformSuperInBlock _ ( tree , tree . functionBody ) ; var name:==:state . name . identifierToken ;
var grid   = $ ( this . box ) . find ( ' > div . w2ui - grid - box ' ) ; var header:==:$ ( ' # grid_'+ this . name + ' _ header ' ) ;
var m = math . matrix ( [ [ 15 , 42 ] , [ 20 , 81 ] ] , ' dense ' ) ; var r:==:math . qr ( m ) ;
var amount = parsedAmount . amount ; var currency:==:parsedAmount . currency ;
var e = c . redAdd ( d ) ; var h:==:this . curve . _ mulc ( this . c . redMul ( this . z ) ) . redSqr ( ) ;
var mkdirp = require ( ' mkdirp ' ) ; var chalk:==:require ( ' chalk ' ) ;
var moment = require ( ' moment ' ) ; var path:==:require ( ' path ' ) ;
var reactdomEmptyComponent = require ( ' reactdomEmptyComponent ' ) ; var reactdomTextComponent:==:require ( ' reactdomTextComponent ' ) ;
var System = Windows . System ; var User:==:System . User ;
var img = this . overlay . querySelector ( ' img ' ) ; var s:==:img . style ;
var subtitleStyle = _ props . subtitleStyle ; var textStyle:==:_ props . textStyle ;
var number = document . querySelector ( ' # number ' ) . value ; var message:==:document . querySelector ( ' # message ' ) . value ;
var value = event . detail . value ; var list:==:this . _ list ;
var options = this . _ options ; var positions:==:Property . getValueOrUndefined ( polylineVolume . positions , time , options . polylinePositions ) ;
var propertyNameAssignment = traceur . syntax . trees . propertyNameAssignment ; var quasiLiteralExpression:==:traceur . syntax . trees . quasiLiteralExpression ;
var value2 = options . value2 ; var format:==:options . format ;
var email = opt . email  |  |  '' ; var isContact:==:opt . isContact  |  |  false ;
var columnKey = _ props . columnKey ; var props:==:_ objectWithoutProperties ( _ props , [ ' height ' , ' width ' , ' columnKey ' ] ) ;
var onlyBlockscoped = options & & options . onlyBlockscoped ; var excludeParams:==:options & & options . excludeParams ;
var dialog = event . data . dialog ; var $ button:==:event . data . $ button ;
var selectorsInterface = scope . selectorsInterface ; var addWrapNodeListMethod:==:scope . addWrapNodeListMethod ;
var mkdirp = require ( ' mkdirp ' ) ; var fs:==:require ( ' fs ' ) ;
var history = _ props2 . history ; var location:==:_ props2 . location ;
var parent = node . parentNode ; var scene:==:this . scene ;
var yieldStatement = traceur . syntax . trees . yieldStatement ; var getTreeNameForType:==:traceur . syntax . trees . getTreeNameForType ;
var source = node . source ? node . source . value : null ; var exports:==:file . metadata . modules . exports ;
var revenue = track . revenue ( ) ; var orderId:==:track . orderId ( ) ;
var query = _ ref . query ; var hash:==:_ ref . hash ;
var pink100 = exports . pink100 = ' # f8bbd0 ' ; var pink200:==:exports . pink200    ' # f48fb1 ' ;
var _ computeChangedRoutes = ( 0 , _ computeChangedRoutes3 . default ) ( state , nextState ) ; var leaveRoutes:==:_ computeChangedRoutes . leaveRoutes ;
var styleSheet = require ( ' f8StyleSheet ' ) ; var view:==:require ( ' view ' ) ;
var altKey = typeof options . altKey ! = ' undefined ' ? options . altKey : false ; var shiftKey:==:typeof options . shiftKey !   ' undefined ' ? options . shiftKey : false ;
var val = el . val ( ) ; var type:==:$ ( ' # element - type ' ) . val ( ) ;
var createPromise = parseTreeFactory . createPromise ; var createReturnStatement:==:parseTreeFactory . createReturnStatement ;
var toString = require ( ' toString ' ) ; var test:==:require ( ' test ' ) ;
var axis = axisModel . axis ; var show:==:retrieve ( opt . axisLabelShow , axisModel . get ( ' axisLabel . show ' ) ) ;
var interpret = require ( ' interpret ' ) ; var path:==:require ( ' path ' ) ;
var borderWidthInPixels = defaultValue ( options . borderWidthInPixels , 1 . 0 ) ; var initialSize:==:defaultValue ( options . initialSize , defaultInitialSize ) ;
var credit2 = new Credit ( ' credit2 ' ) ; var credit3:==:new Credit ( ' credit3 ' ) ;
var shape       = pair . value . shape ; var parentHeight:==:pair . value . parentHeight ;
var reactMultiChild = require ( ' reactMultiChild ' ) ; var reactServerRenderingTransaction:==:require ( ' reactServerRenderingTransaction ' ) ;
var p = propertyArray [ i ] ; var v:==:p . value ;
var canvas = document . createElement ( ' canvas ' ) ; var img:==:document . createElement ( ' img ' ) ;
var e = Import ( a . y , a . y_off + j * a . y_stride , a . y_stride , b - j , p . scaler_y ) ; var f:==:Import ( a . u , a . u_off + uv_j * a . uv_stride , a . uv_stride , c - uv_j , p . scaler_u ) ;
var depthTest = renderState . depthTest ; var enabled:==:depthTest . enabled ;
var sp = col . cellFilter . split ( ' : ' ) ; var filter:==:col . cellFilter ? $ filter ( sp [ 0 ] ) : null ;
var customTime = customTime . customTimeFromTarget ( event ) ; var snap:==:this . itemSet . options . snap  |  |  null ;
var eap = panel . querySelector ( ' li . eap select ' ) ; var certificate:==:panel . querySelector ( ' li . server - certificate select ' ) ;
var value = promise . _ value ; var listeners:==:promise . _ listeners ;
var startSpan = dh . getElement ( startSpanId ) ; var endSpan:==:dh . getElement ( endSpanId ) ;
var pickOffsets = primitive . _ pickOffsets ; var length:==:pickOffsets . length * 3 ;
var vm = require ( ' vm ' ) ; var util:==:require ( ' util ' ) ;
var timestamp = this . timestamp . toString ( 16 ) ; var machine:==:this . machine . toString ( 16 ) ;
var width = polyline . width ; var show:==:polyline . show & & width > 0 . 0 ;
var point = intersection . point ; var object:==:intersection . object ;
var optimist = require ( ' optimist ' ) ; var path:==:require ( ' path ' ) ;
var w = this [ ' w ' ] ; var h:==:this [ ' h ' ] ;
var imageKind = sharedUtil . imageKind ; var ops:==:sharedUtil . ops ;
var editor1 = window . editor1 = splitEditor . editor0 ; var editor2:==:window . editor2    splitEditor . editor1 ;
var charCode = this . json . grid [ row ] . charCodeAt ( col ) ; var index:==:this . indexFromCharCode ( charCode ) ;
var index = target . dataset . index ; var data:==:this . dataSource [ index ] ;
var fade = isUndefined ( v [ ' fade ' ] ) ? 0 : v [ ' fade ' ] ; var cover:==:isUndefined ( v [ ' cover ' ] ) ? 0 : v [ ' cover ' ] ;
var autoFocusUtils = require ( ' autoFocusUtils ' ) ; var cssPropertyOperations:==:require ( ' cssPropertyOperations ' ) ;
var node3 = new goog . ui . tree . treeNode ( ' node3 ' ) ; var node4:==:new goog . ui . tree . treeNode ( ' node4 ' ) ;
var reactReconcileTransaction = require ( ' reactReconcileTransaction ' ) ; var reactUpdates:==:require ( ' reactUpdates ' ) ;
var offset = config . offset ; var width:==:node . getData ( ' width ' ) ;
var Complex = math . type . Complex ; var resultSet:==:math . type . resultSet ;
var doWhileStatement = traceur . syntax . trees . doWhileStatement ; var exportDeclaration:==:traceur . syntax . trees . exportDeclaration ;
var semVer = semver . semVer ; var range:==:semver . range ;
var preferences = imports . preferences ; var settings:==:imports . settings ;
var reportEventElement = t . reportEventElement ; var showEvents:==:t . showEvents ;
var mom = $ . fullCalendar . moment . utc ( ' 2014 - 06 - 08t05 : 00 : 00 ' ) ; var dur:==:moment . duration ( ' 13 : 25 ' ) ;
var packedInterpolationLength = this . _ packedInterpolationLength ; var inputOrder:==:this . _ inputOrder ;
var mkdirp = require ( ' mkdirp ' ) ; var optimist:==:require ( ' optimist ' ) ;
var before = opts . before  |  |  $ . noop ; var complete:==:opts . complete  |  |  $ . noop ;
var fs = require ( ' fs ' ) ; var assert:==:require ( ' assert ' ) ;
var isArrayBuffer = sharedUtil . isArrayBuffer ; var isString:==:sharedUtil . isString ;
var item = xml . children . item ( i ) ; var attributes:==:item . attributes ;
var s = goog . vec . vec3d . createFromValues ( 6 , 7 , 8 ) ; var o:==:goog . vec . vec3d . createFromValues ( 9 , 10 , -11 ) ;
var position = Cartesian3 . clone ( camera . position ) ; var direction:==:Cartesian3 . clone ( camera . direction ) ;
var sum32_3 = utils . sum32_3 ; var sum32_4:==:utils . sum32_4 ;
var repeat = motionArgs . repeat ; var line:==:motionArgs . forward ? cur . line + repeat : cur . line - repeat ;
var min = Number ( $ field . attr ( ' min ' ) ) ; var max:==:Number ( $ field . attr ( ' max ' ) ) ;
var yeoman = require ( ' yeoman - generator ' ) ; var chalk:==:require ( ' chalk ' ) ;
var outlineColor = property . getValueOrClonedDefault ( polygon . outlineColor , time , color . black , scratchColor ) ; var outlineWidth:==:property . getValueOrDefault ( polygon . outlineWidth , time , 1 . 0 ) ;
var name = $ ( ' input#name ' ) . val ( ) ; var email:==:$ ( ' input#email ' ) . val ( ) ;
var mime = require ( ' mime ' ) ; var archiver:==:require ( ' archiver ' ) ;
var i d = request . parameters . i d ; var filePath:==:decodeuriComponent ( request . parameters . filePath ) ;
var editor    = this . editor ; var preview:==:this . preview ;
var cookie = cookies [ i ] ; var expires:==:cookie . expires ;
var scrollCtrl = infiniteScrollCtrl . scrollCtrl = ctrls [ 0 ] ; var jsScrolling:==:infiniteScrollCtrl . jsScrolling    ! scrollCtrl . isNative ( ) ;
var macd = this . indicators . macd ; var diff:==:macd . diff ;
var maxButton = this . maxButton ; var iconpos:==:this . iconpos ;
var assert = require ( ' assert ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var iframe = $ ( ' # iframe ' ) ; var header:==:$ ( ' . header ' ) ;
var end = content . cursor_end ; var matches:==:content . matches ;
var Person = db . model ( ' gh4234 ' , personSchema ) ; var blogPost:==:db . model ( ' gh4234_0 ' , blogPostSchema ) ;
var step = stepState . step ; var importingModuleName:==:stepState . moduleMetadata . importingModuleName ;
var originatesFromRejection = errors . originatesFromRejection ; var markAsOriginatingFromRejection:==:errors . markAsOriginatingFromRejection ;
var t = condition ? new T ( ) : ; var testCase:==:new goog . testing . testCase ( testCaseName ) ;
var key = this . keys [ i ] ; var value:==:this . values [ i ] ;
var data = this . data ; var container:==:this . container ;
var fileDesc = change . fileDesc ; var syncAttributes:==:change . syncAttributes ;
var index = options . index  |  |  100 ; var watcher:==:imports . watcher ;
var radius = ( data . radius ! = = undefined ) ? data . radius : 0 . 5 ; var height:==:( data . height !    undefined ) ? data . height : 1 ;
var fs = require ( ' fs - extra ' ) ; var os:==:require ( ' os ' ) ;
var assert = require ( ' chai ' ) . assert ; var proxyquire:==:require ( ' proxyquire ' ) ;
var row = this . _ grid . getOrCreateRow ( rowIndex + this . _ rowLayoutManager . _ gridOffset ) ; var column:==:this . _ grid . getOrCreateColumn ( columnIndex + this . _ columnLayoutManager . _ gridOffset ) ;
var src = e . src ; var div:==:document . createElement ( ' div ' ) ;
var sortOrder = userFieldsRes . sortOrder ; var index:==:findBestMatchingIndex ( selector , userFields , sortOrder , indexes , request . use_index ) ;
var action = $ ( this ) . attr ( ' action ' ) ; var a:==:plugins ( plugin ) . actions [ action ] ;
var L10n = navigator . mozL10n . _ getInternalapi ( ) ; var resolver:==:l10n . resolver ;
var height = this . root . height ; var width:==:this . root . width ;
var attribute = attributes [ attributeIndex ] ; var componentsPerAttribute:==:attribute . componentsPerAttribute ;
var tryCatch = util . tryCatch ; var errorObj:==:util . errorObj ;
var action = notebook . keyboard_manager . actions . get ( action_id ) ; var shortcuts:==:notebook . keyboard_manager . command_shortcuts . get_action_shortcuts ( action_id ) ;
var key = item . key ; var instanceCount:==:item . instanceCount ;
var heading = defaultValue ( options . heading , 0 . 0 ) ; var pitch:==:defaultValue ( options . pitch , -CesiumMath . pi_over_two ) ;
var labelGroup = this . _ labelGroup ; var viewRect:==:layoutInfo . viewRect ;
var version = options . version ; var cwd:==:process . cwd ( ) ;
var maximumHeights = wall . maximumHeights ; var outlineWidth:==:wall . outlineWidth ;
var x = e . gesture . center . x ; var y:==:e . gesture . center . y ;
var x = ( vector . x * transformation . m [ 0 ] ) + ( vector . y * transformation . m [ 4 ] ) + ( vector . z * transformation . m [ 8 ] ) + transformation . m [ 12 ] ; var y:==:( vector . x * transformation . m [ 1 ] ) + ( vector . y * transformation . m [ 5 ] ) + ( vector . z * transformation . m [ 9 ] ) + transformation . m [ 13 ] ;
var promise = this . _ promiseAt ( index ) ; var receiver:==:this . _ receiverAt ( index ) ;
var keys = Object . keys ( options ) . sort ( ) ; var key:==:generateKey ( keys , options ) ;
var range = math . range ; var log:==:math . log ;
var axisScale = powerbi . visuals . axisScale ; var axisStyle:==:powerbi . visuals . axisStyle ;
var value = element ( by . binding ( ' value  |  date : ' HH : mm : ss ' ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var requestStats = goog . labs . net . webChannel . requestStats ; var webChannelDebug:==:goog . labs . net . webChannel . webChannelDebug ;
var scrollOverflowHandler = options . scrollOverflowHandler ; var wrap:==:scrollOverflowHandler . wrapContent ( ) ;
var Size = goog . math . Size ; var setBorderBoxSize:==:goog . style . setBorderBoxSize ;
var requestCert = this . _ requestCert ; var rejectUnauthorized:==:this . _ rejectUnauthorized ;
var uid = data . uid ; var content:==:data . content ;
var PREDEFINED_TYPE = ' PREDEFINED_TYPE ' ; var PROPERTY_NAME_ASSIGNMENT:==:' PROPERTY_NAME_ASSIGNMENT ' ;
var timings = elementData . timings ; var stagger:==:elementData . stagger ;
var additionalProperties = definition . additionalProperties ; var xml:==:definition . xml ;
var url = frame . url ? frame . url : inspectorTest . _ scriptMap . get ( frame . location . scriptId ) . url ; var lineNumber:==:frame . location ? frame . location . lineNumber : frame . lineNumber ;
var measure = measureLineInner ( cm , copy ) ; var left:==:measureChar ( cm , copy , 0 , measure , ' left ' ) ;
var body = plt . doc ( ) . body ; var win:==:plt . win ( ) ;
var view = viewContainer . views [ index ] ; var elementInjector:==:contextView . elementInjectors [ contextBoundElementIndex ] ;
var fieldValue = this . props . fieldValue ; var className:==:this . state . className ;
var chunkedStreamManager = coreChunkedStream . chunkedStreamManager ; var pdfDocument:==:coreDocument . pdfDocument ;
var createThrowStatement = parseTreeFactory . createThrowStatement ; var createVariableStatement:==:parseTreeFactory . createVariableStatement ;
var self = element . _ self ; var source:==:element . _ source ;
var minScale = _ props . minScale ; var style:==:_ props . style ;
var parameterList = this . transformAny ( tree . parameterList ) ; var body:==:this . transformAny ( tree . body ) ;
var certificateParseError = errs . certificateParseError ; var invalidAlgorithmError:==:errs . invalidAlgorithmError ;
var m = this . mass ; var r:==:this . radius ;
var modifiers = dir . modifiers ; var tag:==:el . tag ;
var getHoverListener = t . getHoverListener ; var computeDateTop:==:t . computeDateTop ;
var session = require ( ' express - session ' ) ; var redis:==:require ( ' redis ' ) ;
var dataGrid = parseOutput . dataGrid ; var headerNames:==:parseOutput . headerNames ;
var cpx1 = shape . cpx1 ; var cpy1:==:shape . cpy1 ;
var fullContactCardOptions = contacts . fullContactCardOptions ; var viewSizePreference:==:windows . ui . viewManagement . viewSizePreference ;
var sqh = window . _ sqh ; var accountId:==:identify . proxy ( ' traits . accountId ' ) ;
var save = imports . save ; var Editor:==:imports . Editor ;
var core = require ( ' core ' ) ; var daysBetween:==:calc . daysBetween ;
var purple800 = exports . purple800 = ' # 6a1b9a ' ; var purple900:==:exports . purple900    ' # 4a148c ' ;
var x = xy . x + Blockly . SNAP_RADIUS * ( this . RTL ? -1 : 1 ) ; var y:==:xy . y + Blockly . SNAP_RADIUS * 2 ;
var promise = progression . promise ; var receiver:==:progression . receiver ;
var use = this . _ use ; var location:==:this . _ location ;
var map = typeof map ! = = ' undefined ' ? map : Array . prototype . map ; var filter:==:typeof filter !    ' undefined ' ? filter : Array . prototype . filter ;
var list_id = Session . get ( ' list_id ' ) ; var tag:==:Session . get ( ' tag_filter ' ) ;
var row = rows [ index ] ; var multiRow:==:multiRows [ index ] ;
var statusBar = require ( ' statusBar ' ) ; var styleSheet:==:require ( ' styleSheet ' ) ;
var key = relationship . key ; var shouldSerialize:==:env . store . serializerFor ( ' post ' ) . shouldSerializeHasMany ( snapshot , relationship , key ) ;
var db = new PouchDB ( dbs . name ) ; var repl:==:db . replicate . to ( dbs . remote , retry : true , live : true ) ;
var clean = this . clean ( ) ; var dest:==:this . destination ( ) ;
var Marked = require ( ' Marked ' ) ; var excerptLink:==:require ( ' excerptLink ' ) ;
var bubbles = typeof options . bubbles ! = ' undefined ' ? options . bubbles : true ; var cancelable:==:typeof options . cancelable !   ' undefined ' ? options . cancelable : true ;
var touches = e . originalEvent . touches ; var pagex:==:touches ? touches [ 0 ] . pagex : e . pagex ;
var menus = imports . menus ; var layout:==:imports . layout ;
var xa = c0 . xa ; var ya:==:c0 . ya ;
var pkgMain = exports . pkgMain ( context , pkg ) ; var options:==:exports . options ( context ) ;
var webpack = require ( ' webpack ' ) ; var env:==:process . env . NODE_ENV ;
var width = defaultValue ( options . width , 1 . 0 ) ; var colorsPerVertex:==:defaultValue ( options . colorsPerVertex , false ) ;
var source = hexo . source ; var File:==:source . File ;
var el = this . el ; var mtlLoader:==:this . mtlLoader ;
var line = end . line - start . line ; var ch:==:end . ch - start . ch ;
var granularity = message . data . granularity ; var start:==:message . data . start ;
var propertyNames = this . _ propertyNames ; var index:==:propertyNames . indexOf ( propertyName ) ;
var multiplier = clockPacket . clock . multiplier ; var range:==:clockRange [ clockPacket . clock . range ] ;
var domain = AWS . util . domain ; var jmespath:==:require ( ' jmespath ' ) ;
var geometry = segmentData . geometry ; var depth:==:segmentData . depth ;
var enterToClass = data . enterToClass ; var enterActiveClass:==:data . enterActiveClass ;
var record_pause_on = Test . anotherWay . _ record_control_get_element ( ' record_pause_on ' ) ; var record_pause_off:==:test . anotherWay . _ record_control_get_element ( ' record_pause_off ' ) ;
var length   = options . length ; var anchor:==:options . anchor  |  |  source . position ;
var buffer = require ( ' vinyl - buffer ' ) ; var child_process:==:require ( ' child_process ' ) ;
var clientWidth = lineSpace . clientWidth  |  |  lineSpace . offsetWidth ; var clientHeight:==:lineSpace . clientHeight  |  |  lineSpace . offsetHeight ;
var edgeFieldsCount = snapshot . _ edgeFieldsCount ; var edgeToNodeOffset:==:snapshot . _ edgeToNodeOffset ;
var keyBinding = lastAce . keyBinding ; var selection:==:placeHolder . session . selection ;
var analysis = self . analysis ; var input:==:self . input ;
var gl = this . glplot . gl ; var canvas:==:this . glplot . canvas ;
var Pointer_stringify = Module . Pointer_stringify ; var _ str_to_html:==:Module . _ str_to_html ;
var textMeasurementService = powerbi . textMeasurementService ; var dataLabelManager:==:powerbi . dataLabelManager ;
var NAMED_EXPORT = ' NAMED_EXPORT ' ; var NEW_EXPRESSION:==:' NEW_EXPRESSION ' ;
var cellCount = _ ref . cellCount ; var overscanCellsCount:==:_ ref . overscanCellsCount ;
var auth = mongoUrl . auth & & mongoUrl . auth . split ( ' : ' ) ; var ssl:==:require ( ' querystring ' ) . parse ( mongoUrl . query ) . ssl      ' true ' ;
var flatCoordinates = this . flatCoordinates ; var endss:==:this . endss _ ;
var bufferViews = gltf . bufferViews ; var bufferView:==:bufferViews [ accessor . bufferView ] ;
var breakContinueTransformer = traceur . codegeneration . generator . breakContinueTransformer ; var catchState:==:traceur . codegeneration . generator . catchState ;
var browserify = require ( ' browserify ' ) ; var streamify:==:require ( ' gulp - streamify ' ) ;
var blue50 = exports . blue50 = ' # e3f2fd ' ; var blue100:==:exports . blue100    ' # bbdefb ' ;
var invalidpdfException = sharedUtil . invalidpdfException ; var missingDataException:==:sharedUtil . missingDataException ;
var d2 = _ addDraggableDiv ( _ jsPlumb , ' d2 ' , null , null,250 , 250 , 100 , 100 ) ; var d3:==:_ addDraggableDiv ( _ jsPlumb , ' d3 ' , null , null,500 , 500 , 100 , 100 ) ;
var afterCompleteOpen = helpers . afterCompleteOpen ; var isCompleterOpen:==:helpers . isCompleterOpen ;
var length = faces . length ; var planes:==:result . planes ;
var height = imgData . height ; var fillColor:==:this . current . fillColor ;
var first = config . firstRow ; var last:==:config . lastRow ;
var geometry = this . geometry ; var position:==:geometry . getAttribute ( ' position ' ) ;
var assign = require ( ' object - assign ' ) ; var debug:==:require ( ' debug ' ) ( ' keystone : core : list : addFiltersToQuery ' ) ;
var path = require ( ' path ' ) ; var readline:==:require ( ' readline ' ) ;
var length = children . length ; var child:==:children . shift ( ) ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var fileFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' fileFieldTestObject ' ) ) ;
var wrapData = this . $ wrapData ; var wrapLimit:==:this . $ wrapLimit ;
var navigator = freeSelf & & freeSelf . navigator ; var appVersion:==:( navigator & & navigator . appVersion  |  |  '' ) . toLowerCase ( ) ;
var width = cropBox . width ; var height:==:cropBox . height ;
var w = Math . min ( 16 , ( this . _ FBU . x + this . _ FBU . width ) - x ) ; var h:==:Math . min ( 16 , ( this . _ FBU . y + this . _ FBU . height ) - y ) ;
var anchor = options . anchor ; var forceFunction:==:options . forceFunction ;
var menu = Menus . addMenu ( ' custom ' , menuItemId ) ; var command:==:commandManager . get ( commandId ) ;
var template = this . _ templateResolver . resolve ( component ) ; var componentUrl:==:this . _ componentUrlMapper . getUrl ( component ) ;
var db = imports . db ; var ensureLoggedIn:==:imports [ ' c9 . login ' ] . ensureLoggedIn ( ) ;
var delimiters = template . setDelimiters ( options . delimiters ) ; var data:==:object . create ( options . data  |  |  grunt . config . data  |  |  ) ;
var op = $ . extend ( , this . _ op , options ) ; var height:==:op . height > op . minH?op . height : op . minH ;
var t = Math . min ( this . top , region . top   ) ; var r:==:Math . max ( this . right , region . right ) ;
var fs = require ( ' fs ' ) ; var server:==:require ( ' webserver ' ) . create ( ) ;
var when = require ( ' when ' ) ; var path:==:require ( ' path ' ) ;
var workspace = Blockly . Workspace . getById ( event . workspaceId ) ; var block:==:workspace . getBlockById ( event . blockId ) ;
var width = size . width  |  |  size ; var height:==:size . height  |  |  size ;
var property = ' the property ' ; var value:==:' the value ' ;
var LTR = goog . i18n . bidi . Dir . LTR ; var RTL:==:goog . i18n . bidi . Dir . RTL ;
var context = frameState . context ; var primitive:==:groundPrimitive . _ primitive ;
var path = require ( ' path ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var tmuxName = options . tmuxName  |  |  tmuxname ; var session:==:options . session ;
var source = bin . source ; var css:==:safeForhtml ( bin . css  |  |  '' ) ;
var acorn = require ( ' acorn ' ) ; var escodegen:==:require ( ' escodegen ' ) ;
var scrollLeft = _ state3 . scrollLeft ; var scrollTop:==:_ state3 . scrollTop ;
var val = parseFloat ( $ el . val ( ) ) ; var max:==:parseFloat ( $ el . attr ( ' max ' ) ) ;
var rowIndex = _ ref3 . rowIndex ; var rowWrapperStyle:==:this . props . rowWrapperStyle ;
var doc = window . document ; var html:==:doc . querySelector ( ' html ' ) ;
var limit = Number ( req . query . limit )  |  |  config . list_topic_count ; var mdrender:==:req . query . mdrender      ' false ' ? false : true ;
var className = options . className ! = = undefined ? options . className : ' ol - zoom ' ; var delta:==:options . delta !    undefined ? options . delta : 1 ;
var getSlotHeight = t . getSlotHeight ; var getSlotDuration:==:t . getSlotDuration ;
var path = require ( ' path ' ) ; var faker:==:require ( ' faker ' ) ;
var worldIntersectPoint = intersecttrimesh_worldintersectpoint ; var worldNormal:==:intersecttrimesh_worldnormal ;
var min = datetimepicker . timeView . options . min ; var max:==:datetimepicker . timeView . options . max ;
var info = imports . info ; var util:==:imports . util ;
var frontdoor = require ( ' frontdoor ' ) ; var cacheFiles:==:options . cacheFiles ;
var value = descriptor . value ; var type:==:typeof value ;
var relation = relation_list [ i ] ; var i d:==:relation . getAttribute ( ' i d ' ) ;
var result = resultSelector ( state ) ; var time:==:timeSelector ( state ) ;
var debug = imports . debugger ; var layout:==:imports . layout ;
var context = options . context ; var indexDatatype:==:options . indexDatatype ;
var destinationType = getValue ( options . destinationType , camera . destinationType . file_uri ) ; var sourceType:==:getValue ( options . sourceType , camera . pictureSourceType . camera ) ;
var a = base ; var b:==:base + points . length ;
var ensurePositiveDelayProps = require ( ' ensurePositiveDelayProps ' ) ; var flattenStyle:==:require ( ' flattenStyle ' ) ;
var step = stepResult . step ; var status:==:stepResult . status ;
var transform = require ( ' vinyl - transform ' ) ; var path:==:require ( ' path ' ) ;
var options = this . options ; var impulse:==:this . impulse ;
var context = options . context ; var source:==:options . source ;
var cols = this . cols . groups ; var rows:==:this . rows . groups ;
var quotmark = linter . getOption ( ' quotmark ' ) ; var esnext:==:linter . getOption ( ' esnext ' ) ;
var async = require ( ' async ' ) ; var Frame:==:debug . Frame ;
var pre = pres . eq ( i ) ; var i d:==:pre . attr ( ' i d ' ) ;
var size = require ( ' gulp - size ' ) ; var streamify:==:require ( ' gulp - streamify ' ) ;
var timestamp = data . timestamp  |  |  Date . now ( ) ; var isMain:==:data . isMain  |  |  false ;
var times = options . times ; var inTangents:==:options . inTangents ;
var worker = workers [ i % threads ] ; var ip:==:ips [ i ] ;
var height = options . height  |  |  1 ; var subdivisions:==:options . subdivisions  |  |  1 ;
var colorsPerVertex = polylineGeometry . _ colorsPerVertex ; var followSurface:==:polylineGeometry . _ followSurface ;
var w = width * . 65 ; var h:==:height * . 65 ;
var normal = intersectConvex_normal ; var vertices:==:this . vertices ;
var font = label . _ font ; var fillColor:==:label . _ fillColor ;
var em = document . getElementById ( 'em ' ) . firstChild ; var two:==:document . getElementById ( ' two ' ) ;
var sock = stream . node . sock ; var msg:==:sock . sock_ops . recvmsg ( sock , length ) ;
var url = server . url ( ' sample . html ' ) ; var link:==:client . helper . waitForElement ( ' # page2-link ' ) ;
var lexed = opts . lexed ; var filename:==:opts . filename ;
var path = require ( ' path ' ) ; var less:==:require ( ' less ' ) ;
var vAPI = self . vAPI ; var chrome:==:self . chrome ;
var blending = renderState . blending ; var enabled:==:( defined ( passState . blendingEnabled ) ) ? passState . blendingEnabled : blending . enabled ;
var createEmptyParameterList = parseTreeFactory . createEmptyParameterList ; var createEmptyStatement:==:parseTreeFactory . createEmptyStatement ;
var nodes = gltf . nodes ; var scene:==:gltf . scenes [ gltf . scene ] ;
var user = db . users [ i d ] ; var body:==:req . body ;
var dest = opt_dest ? opt_dest : [ ] ; var cos:==:Math . cos ( angle ) ;
var loc = $ location ; var s:==:$ scope ;
var createObjectLiteralExpression = parseTreeFactory . createObjectLiteralExpression ; var createParenExpression:==:parseTreeFactory . createParenExpression ;
var title = ' test title : ' + Date . now ( ) ; var tag:==:' test tag : ' + Date . now ( ) ;
var height = canvas . height ; var naturalWidth:==:canvas . naturalWidth ;
var basename = location . basename ; var pathname:==:location . pathname ;
var dwellTimeSpan = geofenceValues . dwellTimeSpan ; var startDateTime:==:geofenceValues . startDateTime ;
var entropy = utils . toArray ( options . entropy , options . entropyEnc ) ; var nonce:==:utils . toArray ( options . nonce , options . nonceEnc ) ;
var node = this . body . nodes [ nodeId ] ; var timestep:==:this . timestep ;
var array = util . array ; var object:==:util . object ;
var s = this . getStartFrame ( name ) ; var e:==:this . getEndFrame ( name ) ;
var cellCache = _ ref5 . cellCache ; var cellRenderer:==:_ ref5 . cellRenderer ;
var index = g . _ index ; var ptr:==:g . _ ptr ;
var classDeclaration = traceur . syntax . trees . classDeclaration ; var classExpression:==:traceur . syntax . trees . classExpression ;
var groupItems = this . _ groupItems ; var groupKeys:==:this . _ groupKeys ;
var min = options . min ; var max:==:options . max ;
var head = list . head ( paras ) ; var last:==:list . last ( paras ) ;
var title = _ props . title ; var titleColor:==:_ props . titleColor ;
var pick = require ( ' pick ' ) ; var prevent:==:require ( ' prevent ' ) ;
var root = this . root ; var system:==:root . system    root . system  |  |  ;
var notifySubscribers = source . notifySubscribers ; var arrayChange:==:source . subscribe ( function ( ) , null , ' arrayChange ' ) ;
var Stream = coreStream . stream ; var getGlyphsUnicode:==:coreGlyphList . getGlyphsUnicode ;
var link = $ link . val ( ) ; var text:==:$ text . val ( ) ;
var anchor = posToIndex ( cm , sel . anchor ) ; var head:==:posToIndex ( cm , sel . head ) ;
var getLabelFormattedText = powerbi . visuals . dataLabelUtils . getLabelFormattedText ; var equalWithPrecision:==:powerbi . double . equalWithPrecision ;
var tessellation = options . tessellation  |  |  64  |  0 ; var radiusFunction:==:options . radiusFunction ;
var y = position . y ; var activeTarget:==:this . activeTarget _ ;
var _ strlen = Module [ ' _ strlen ' ] = asm [ ' _ strlen ' ] ; var _ free:==:Module [ ' _ free ' ]    asm [ ' _ free ' ] ;
var sideOrientation = ( options . sideOrientation = = = 0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ; var faceuv:==:options . faceuv  |  |  new array ( 3 ) ;
var yieldStatement = traceur . syntax . trees . yieldStatement ; var setAccessor:==:traceur . syntax . trees . setAccessor ;
var allOptions = _ _ webpack_require _ _ ( 59 ) . allOptions ; var configureOptions:==:_ _ webpack_require _ _ ( 59 ) . configureOptions ;
var apply = functionPrototype . apply ; var max:==:math . max ;
var position = camera . position ; var direction:==:camera . direction ;
var children = this . el . children ; var childNodes:==:this . el . childNodes ;
var path = req . path ; var method:==:( req . headers [ ' access - control - request - method ' ]  |  |  '' ) . toLowerCase ( )  |  |  ' default ' ;
var APN_TYPES = apnConst . apn_types ; var apn_selections_key:==:apnConst . apn_selections_key ;
var uniformState = context . uniformState ; var viewport:==:scene . _ passState . viewport ;
var eventEmitter = require ( ' eventEmitter ' ) ; var platform:==:require ( ' platform ' ) ;
var traits = group . traits ( ) ; var user:==:this . analytics . user ( ) ;
var errorHandler = options . errorHandler ; var locator:==:options . locator ;
var fs = Plugin . fs ; var path:==:Plugin . path ;
var all = _ _ dependency3 _ _ . all ; var race:==:_ _ dependency4 _ _ . race ;
var compile = ref . compile ; var compileToFunctions:==:ref . compileToFunctions ;
var backgroundTaskRegistration = background . backgroundTaskRegistration ; var backgroundAccessStatus:==:background . backgroundAccessStatus ;
var points = c _ . givenLineArgs . points ; var options:==:c _ . givenLineArgs . options ;
var max_age = _ ref . max_age ; var ui_locales:==:_ ref . ui_locales ;
var attributeLocations = primitive . _ attributeLocations ; var geometries:==:primitive . _ geometries ;
var cyanA400 = exports . cyanA400 = ' # 00e5ff ' ; var cyanA700:==:exports . cyanA700    ' # 00b8d4 ' ;
var formalParameterList = traceur . syntax . trees . formalParameterList ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var fillStyle = params . fillStyle  |  |  ' black ' ; var strokeStyle:==:params . strokeStyle  |  |  ' yellow ' ;
var dynCall_viffiii = Module [ ' dynCall_viffiii ' ] = asm [ ' dynCall_viffiii ' ] ; var dynCall_vf:==:Module [ ' dynCall_vf ' ]    asm [ ' dynCall_vf ' ] ;
var editor = this . editor ; var renderer:==:editor . renderer ;
var scene = this . scene ; var div:==:document . createElement ( ' div ' ) ;
var host = document . getElementById ( ' host ' ) . value ; var port:==:parseInt ( document . getElementById ( ' port ' ) . value , 10 ) ;
var m = math . matrix ( [ [ 2 , 0 ] , [ 4 , 0 ] ] , ' sparse ' ) ; var r:==:multiply ( m , math . matrix ( [ [ 2 , 0 ] , [ 4 , 0 ] ] , ' sparse ' ) ) ;
var server = window . server ; var windowManager:==:server . windowManager ;
var assert = require ( ' assert ' ) ; var Token:==:require ( ' cst ' ) . Token ;
var positions = options . positions ; var width:==:options . width ;
var goal = nodesFromArray ( item . goal ) ; var shuffled:==:nodesFromArray ( item . shuffled ) ;
var scrollTop = window . pageyOffset  |  |  element . scrollTop  |  |  document . body . scrollTop ; var scrollLeft:==:window . pagexOffset  |  |  element . scrollLeft  |  |  document . body . scrollLeft ;
var eventPluginRegistry = require ( ' eventPluginRegistry ' ) ; var reactEventEmitterMixin:==:require ( ' reactEventEmitterMixin ' ) ;
var nodeList = scope . wrappers . nodeList ; var getTreeScope:==:scope . getTreeScope ;
var tabs = $ ( this . box ) . find ( ' > div . w2ui - form - tabs ' ) ; var page:==:$ ( this . box ) . find ( ' > div . w2ui - page ' ) ;
var ellipsoid = defaultValue ( options . ellipsoid , ellipsoid . wgs84 ) ; var granularity:==:defaultValue ( options . granularity , cesiumMath . radians_per_degree ) ;
var MODULE_DECLARATION = parseTreeType . module_declaration ; var module_definition:==:parseTreeType . module_definition ;
var isStream = corePrimitives . isStream ; var colorSpace:==:coreColorSpace . colorSpace ;
var x = options . x  |  |  100 ; var y:==:options . y  |  |  100 ;
var stRotation = ellipse . stRotation ; var outlineWidth:==:ellipse . outlineWidth ;
var iccInfo = icc . iccInfo ; var cardState:==:icc . cardState ;
var exists = fs . existsSync  |  |  path . existsSync ; var resolve:==:path . resolve ;
var parseTree = traceur . syntax . trees . parseTree ; var parseTreeTransformer:==:traceur . codegeneration . parseTreeTransformer ;
var dimensions = parallelModel . dimensions ; var parallelAxisIndex:==:parallelModel . parallelAxisIndex ;
var p2 = input . p2 ; var r:==:b2Math . subtractvv ( p1 , p2 ) ;
var COMMENT_KEYS = exports . COMMENT_KEYS = [ ' leadingComments ' , ' trailingComments ' , ' innerComments ' ] ; var logical_operators:==:exports . logical_operators    [ '  |  |  ' , ' & & ' ] ;
var min = counts . min ; var max:==:counts . max ;
var sizeY = options . sizeY  |  |  size  |  |  1 ; var sizeZ:==:options . sizeZ  |  |  size  |  |  1 ;
var gulp = require ( ' gulp ' ) ; var zip:==:require ( ' gulp - zip ' ) ;
var analytics = imports [ ' c9 . analytics ' ] ; var outplan:==:require ( ' outplan ' ) ;
var vertices = geometry . vertices ; var faceVertexUvs:==:geometry . faceVertexUvs ;
var Header = require ( ' Header ' ) ; var headerWithGithub:==:require ( ' headerWithGithub ' ) ;
var objectEnumerationBuilder = powerbi . visuals . objectEnumerationBuilder ; var legendProps:==:powerbi . visuals . legendProps ;
var fs = bbPromise . promisifyAll ( require ( ' fs ' ) ) ; var gulp:==:require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ;
var l = 0 + ( sleft ? pleft . size + ( pleft . resizable ? this . spacer : this . padding ) : 0 ) ; var t:==:this . height - ( sbottom ? pbottom . size + ( pbottom . resizable ? this . spacer : this . padding ) : 0 ) - pprev . size ;
var font = [ _ cs . fontWeight , _ cs . fontSize , _ cs . fontFamily ] . join ( ' ' ) ; var lineHeight:==:_ cs . lineHeight ;
var options = context . options [ 0 ]  |  |  ; var skipComments:==:! ! options . skipComments ;
var sourcemaps = require ( ' gulp - sourcemaps ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var left = bottom_left [ 0 ] ; var right:==:top_right [ 0 ] ;
var roseType = seriesModel . get ( ' roseType ' ) ; var stillShowZeroSum:==:seriesModel . get ( ' stillShowZeroSum ' ) ;
var scheduler = state . scheduler ; var destination:==:state . destination ;
var uiEvent = scope . wrappers . uiEvent ; var mixin:==:scope . mixin ;
var effector = bones [ ik . effector ] ; var links:==:ik . links ;
var moduleAnalyzer = traceur . semantics . moduleAnalyzer ; var project:==:traceur . semantics . symbols . project ;
var points = args . points ; var point:==:points . filter ( function ( p ) return p . active ) . shift ( ) ;
var components = geometry . components ; var len:==:components . length ;
var filePath = filePathNode . value ; var currentFileInfo:==:this . currentFileInfo ;
var inherit = require ( ' component - inherit ' ) ; var debug:==:require ( ' debug ' ) ( ' engine . io - client : polling ' ) ;
var corners = computedPositions . corners ; var endPositions:==:computedPositions . endPositions ;
var extend = _ angular . extend ; var element:==:_ angular . element ;
var headerHeight = _ props . headerHeight ; var height:==:_ props . height ;
var l = unscaledAABB . lowerBound ; var u:==:unscaledaabb . upperBound ;
var table = require ( ' text - table ' ) ; var through:==:require ( ' through2 ' ) ;
var chunkManager = this . _ chunkManager ; var indexes:==:this . _ indexes ;
var EVENT_START = gestureDetector . event_start = ' start ' ; var event_move:==:gestureDetector . event_move    ' move ' ;
var boundingBox = this . renderList . data [ boundingBoxIndex ] ; var min:==:boundingBox . minimum ;
var nativeModules = require ( ' nativeModules ' ) ; var dimensions:==:require ( ' dimensions ' ) ;
var rowsMax = _ props2 . rowsMax ; var textareaStyle:==:_ props2 . textareaStyle ;
var region = service . config . region ; var customUserAgent:==:service . config . customUserAgent ;
var mongo = require ( ' mongodb ' ) ; var Db:==:mongo . Db ;
var Node = mod . Node ; var splayTree:==:mod . splayTree ;
var file = target . getAttribute ( ' data - file ' ) ; var mime:==:target . getAttribute ( ' data - mime ' ) ;
var x = x _  |  0 ; var y:==:y _  |  0 ;
var replace = require ( ' gulp - replace ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var auditCategory = declareInterfaceClass ( auditCategoryImpl ) ; var auditResult:==:declareInterfaceClass ( auditResultImpl ) ;
var dataType = el . dataType ; var data:==:dataModel . getData ( ) ;
var ik = iks [ j ] ; var links:==:ik . links ;
var times = this . times ; var i:==:this . _ lastTimeIndex    this . findTimeInterval ( time , this . _ lastTimeIndex ) ;
var monthNamesShort = settings . monthNamesShort  |  |  this . local . monthNamesShort ; var monthNames:==:settings . monthNames  |  |  this . local . monthNames ;
var codeFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' codeFieldTestObject ' ) ) ; var textFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ;
var canvas = this . canvas = config . canvas  |  |  document . createElement ( ' canvas ' ) ; var renderBoundaries:==:this . _ renderBoundaries    [ 10000 , 10000 , 0 , 0 ] ;
var dispatch = ref . dispatch ; var commit:==:ref . commit ;
var position = camera . position ; var up:==:camera . up ;
var passport = require ( ' passport ' ) ; var flash:==:require ( ' connect - flash ' ) ;
var propertyTypes = propertyTypes . propertyTypes ; var warn:==:debug ( ' core : schema : warn ' ) ;
var isopackCache = options . isopackCache ; var includeCordovaUnibuild:==:options . includeCordovaUnibuild ;
var repeat = actionArgs . repeat ; var forward:==:actionArgs . forward ;
var defaultVisualHostServices = powerbi . visuals . defaultVisualHostServices ; var hostControls:==:powerbi . visuals . hostControls ;
var buttons = data . buttons ; var step:==:data . step ;
var pixelConverter = jsCommon . pixelConverter ; var createEnumType:==:powerbi . createEnumType ;
var order = $ scope . order [ type ] ; var first_currency:==:$ scope . order . first_currency  |  |  Currency . from_json ( ' XRP ' ) ;
var session = req . session ; var auth:==:session & & session . auth ;
var name = trim ( decEndpoint . name ) ; var source:==:trim ( decEndpoint . source ) ;
var size = Math . max ( minSize , math . min ( maxSize , powerbi . dataViewObjects . getValue ( objects , properties [ ' size ' ] , defaultSettings . size ) ) ) ; var transparency:==:math . max ( 0 , math . min ( 100 , powerbi . dataViewObjects . getValue ( objects , properties [ ' transparency ' ] , defaultSettings . transparency ) ) ) ;
var multiTestRunner = goog . require ( ' goog . testing . multiTestRunner ' ) ; var propertyReplacer:==:goog . require ( ' goog . testing . propertyReplacer ' ) ;
var config = ( chart & & chart . config )  |  |  ; var defaults:==:Chart . defaults . global . plugins ;
var packedLength = innerType . packedLength ; var packedInterpolationLength:==:defaultValue ( innerType . packedInterpolationLength , packedLength ) ;
var dataZoomModel = this . dataZoomModel ; var showDataShadow:==:dataZoomModel . get ( ' showDataShadow ' ) ;
var invalidpdfException = sharedUtil . invalidpdfException ; var messageHandler:==:sharedUtil . messageHandler ;
var multiStep = this . multiStep ; var fullBuildTimeout:==:this . fullBuildTimeout ;
var colors = simplePolylineGeometry . _ colors ; var colorsPerVertex:==:simplePolylineGeometry . _ colorsPerVertex ;
var nativeHandler = callbackList . nativeHandler ; var fakeName:==:callbackList . fakeName , capture    callbackList . capture ;
var reactdomFeatureFlags = require ( ' reactdomFeatureFlags ' ) ; var reactInstanceMap:==:require ( ' reactInstanceMap ' ) ;
var dynCall_iiiii = Module [ ' dynCall_iiiii ' ] = asm [ ' dynCall_iiiii ' ] ; var dynCall_ii:==:Module [ ' dynCall_ii ' ]    asm [ ' dynCall_ii ' ] ;
var temp = weather . main . temp ; var humidity:==:weather . main . humidity ;
var user = options . user ; var project:==:options . project ;
var creationix = require ( ' creationix ' ) ; var stack:==:require ( ' stack ' ) ;
var show = powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' popup ' ] [ ' show ' ] , pulseChart . defaultSettings . popup . show ) ; var alwaysOnTop:==:powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' popup ' ] [ ' alwaysOnTop ' ] , pulseChart . defaultSettings . popup . alwaysOnTop ) ;
var bounds = this . bounds ; var oldBounds:==:this . _ oldBounds ;
var caseClause = traceur . syntax . trees . caseClause ; var catch:==:traceur . syntax . trees . catch ;
var child_process = require ( ' child_process ' ) ; var crypto:==:require ( ' crypto ' ) ;
var child1 = sibling . child1 ; var child2:==:sibling . child2 ;
var decode = types . decode ; var encode:==:types . encode ;
var x1 = vertices [ index1 ] ; var x2:==:vertices [ index2 ] ;
var invalid = require ( ' character - reference - invalid ' ) ; var decimal:==:require ( ' is - decimal ' ) ;
var index = store . getIndex ( ' index ' ) ; var uniqueIndex:==:store . getIndex ( ' uniqueIndex ' ) ;
var left = Math . ceil ( box . left ) ; var bottom:==:Math . ceil ( box . bottom ) ;
var index = condition . index ; var i d:==:condition . i d ;
var test = imports . test ; var all:==:imports [ ' test . all ' ] ;
var index = _ ref . index ; var isScrolling:==:_ ref . isScrolling ;
var outer = ' outer ' ; var baz:==:' baz outer ' ;
var reactInstrumentation = require ( ' reactInstrumentation ' ) ; var reactMultiChild:==:require ( ' reactMultiChild ' ) ;
var fs = require ( ' fs ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var h = config . lineHeight ; var top:==:pixelPos . top ;
var width = this . viewportIn . width ; var height:==:this . viewport . height ;
var begin = opt . begin  |  |  opt . controls . find ( ' INPUT . begin - input ' ) . val ( ) ; var end:==:opt . end  |  |  opt . controls . find ( ' INPUT . end - input ' ) . val ( ) ;
var appendClearCatcher = powerbi . visuals . appendClearCatcher ; var createInteractivityService:==:powerbi . visuals . createInteractivityService ;
var Agenda = Parse . Object . extend ( ' Agenda ' ) ; var Attendance:==:Parse . Object . extend ( ' Attendance ' ) ;
var slicePartitions = property . getValueOrUndefined ( ellipsoid . slicePartitions , time ) ; var subdivisions:==:property . getValueOrUndefined ( ellipsoid . subdivisions , time ) ;
var node = _ this3 . body . nodes [ branchNode ] ; var level:==:_ this3 . hierarchical . levels [ node . i d ] ;
var colLeft = t . colLeft ; var colRight:==:t . colRight ;
var eventPluginHub = require ( ' eventPluginHub ' ) ; var reactTreeTraversal:==:require ( ' reactTreeTraversal ' ) ;
var sqlite3 = require ( ' sqlite3 ' ) ; var plugins:==:require ( util . dirs ( ) . gekko + ' plugins ' ) ;
var hasOwnProperty = objectProto . hasOwnProperty ; var propertyIsEnumerable:==:objectProto . propertyIsEnumerable ;
var jsdoc = require ( ' gulp - jsdoc ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var value = this . element . value ; var type:==:this . element . type ;
var options = this . options ; var visibleGroupContainer:==:this . visibleGroupContainer ;
var plugin = callback_plugin_pairs [ i ] [ 0 ] ; var callback:==:callback_plugin_pairs [ i ] [ 1 ] ;
var drawOrder = skeleton . drawOrder ; var slots:==:skeleton . slots ;
var textStylePropTypes = require ( ' textStylePropTypes ' ) ; var view:==:require ( ' view ' ) ;
var classList = this . element . classList ; var last:==:router . last ;
var selection = this . textEditor . selection ( ) . normalize ( ) ; var token:==:this . textEditor . tokenAtTextPosition ( selection . startLine , selection . startColumn ) ;
var path = require ( ' path ' ) ; var mkdir:==:require ( ' mkdirp ' ) ;
var color = newColors . color  |  |  ' # ccc ' ; var colorTop:==:newColors . colorTop  |  |  ' # f29766 ' ;
var createFactory = reactElement . createFactory ; var cloneElement:==:reactElement . cloneElement ;
var version = sandbox . helpers . set ( ' version ' ) ; var runner:==:sandbox . helpers . runner ;
var width = data . info . width ; var height:==:data . info . height ;
var x = start . x + ( ( end . x - start . x ) * amount ) ; var y:==:start . y + ( ( end . y - start . y ) * amount ) ;
var missingDataException = sharedUtil . missingDataException ; var streamType:==:sharedUtil . streamType ;
var focusOption = _ ref . focusOption ; var labelKey:==:_ ref . labelKey ;
var listView = that . listView ; var value:==:listView . value ( ) [ position ] ;
var latitude = cartographic . latitude ; var west:==:rectangle . west ;
var gulp = require ( ' gulp ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var dx2 = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx2 ' , this . dx2 ) ) ) ) ; var dy3:==:h * 0 . 5 * math . max ( 0 , math . min ( 1 , parseFloat ( mxUtils . getValue ( this . style , ' dy3 ' , this . dy3 ) ) ) ) ;
var begin = data . begin ; var end:==:data . end ;
var Errors   = common . Errors ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var i d = payload . i d ; var task:==:this . _ tasks [ i d ] ;
var renderTarget = this . renderTarget ; var generateMipmaps:==:renderTarget . texture . generateMipmaps ;
var x = hw + dx ; var y:==:hh + dy ;
var scheduledAnimations = this . _ scheduledAnimations ; var length:==:scheduledAnimations . length ;
var fenceKey = geofenceValues . fenceKey ; var singleUse:==:geofenceValues . singleUse ;
var linkService = options . linkService ; var renderingQueue:==:options . renderingQueue ;
var bufferTarget = options . bufferTarget ; var typedArray:==:options . typedArray ;
var dom = goog . dom . getDomHelper ( el ) ; var table:==:dom . createElement ( ' table ' ) ;
var Page = ctx . model ( ' Page ' ) ; var path:==:file . path ;
var error = _ ref . error ; var subscriber:==:_ ref . subscriber ;
var getOwnPropertySymbols = object . getOwnPropertySymbols ; var hasOwnProperty:==:object . prototype . hasOwnProperty ;
var before = method . isStatic ? beforeListeners : beforeListeners [ ' prototype ' ] ; var after:==:method . isStatic ? afterListeners : afterListeners [ ' prototype ' ] ;
var start = params . hasOwnProperty ( ' start ' ) ? params . start : 0 ; var stop:==:params . hasOwnProperty ( ' stop ' ) ? params . stop : -1 ;
var type = $ ( this ) . data ( ' type ' ) ; var index:==:$ ( this ) . find ( ' [ data - index ] ' ) . data ( ' index ' ) ;
var parseTreeType = traceur . syntax . trees . parseTreeType ; var tempVarTransformer:==:traceur . codegeneration . tempVarTransformer ;
var popup = this . _ _ popup ; var backdrop:==:this . _ _ backdrop ;
var el = meta . el ; var view:==:el . _ view ;
var maxHeight = options . maxHeight  |  |  10 ; var updatable:==:options . updatable ;
var minutes = d . minutes ( ) ; var hours:==:d . hours ( ) ;
var path = require ( ' path ' ) ; var proxyquire:==:require ( ' proxyquire ' ) ;
var fn = opTree [ x ] . fn ; var fnId:==:opTree [ x ] . fnId ;
var menus = imports . menus ; var Plugin:==:imports . Plugin ;
var y = currentPos . y ; var z:==:currentPos . z ;
var brown200 = exports . brown200 = ' # bcaaa4 ' ; var brown300:==:exports . brown300    ' # a1887f ' ;
var darkWhite = exports . darkWhite = ' rgba ( 255 , 255 , 255 , 0 . 87 ) ' ; var lightWhite:==:exports . lightWhite    ' rgba ( 255 , 255 , 255 , 0 . 54 ) ' ;
var chalk = require ( ' chalk ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var createPropertyMap = astUtils . createPropertyMap ; var unlend:==:astUtils . unlend ;
var bottom = this . el . bottom ; var top:==:this . el . top ;
var error = utils . debug ( ' components : text : error ' ) ; var shaders:==:coreShader . shaders ;
var polygon = defined ( styleEntity . polygon ) ? styleEntity . polygon . clone ( ) : createDefaultPolygon ( ) ; var polyline:==:styleEntity . polyline ;
var semver = require ( ' semver ' ) ; var utils:==:require ( ' keystone - utils ' ) ;
var observable = ko . observable ( ) ; var notifySpy:==:jasmine . createSpy ( ' notifySpy ' ) ;
var data = this . data ; var material:==:this . material ;
var operationalError = errors . operationalError ; var originatesFromRejection:==:errors . originatesFromRejection ;
var msg = msgDatas [ i ] ; var from:==:msg . from ;
var update_breadcrumbs = options . update_breadcrumbs  |  |  typeof options . update_breadcrumbs = = = ' undefined ' ; var update_title:==:options . update_title  |  |  typeof options . update_title      ' undefined ' ;
var userType = element ( by . binding ( ' userType ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var lex = require ( ' pug - lexer ' ) ; var parse:==:require ( ' pug - parser ' ) ;
var t = this . temp ; var v:==:this . values ;
var instance = options . instance ; var gapSize:==:options . gapSize ;
var line = position & & position . line ; var column:==:position & & position . column ;
var spy = sinon . spy ( wsdl , ' open_wsdl ' ) ; var options:==:_ . assign ( disableCache : true , meta . options ) ;
var enteringView = this . enteringView ; var leavingView:==:this . leavingView ;
var language = imports . language ; var settings:==:imports . settings ;
var . . . a = a : 1 ; var . . . x:==:a . b ;
var enterClass = data . enterClass ; var enterActiveClass:==:data . enterActiveClass ;
var maximum = configuration . maximum  |  |  1 ; var when:==:configuration . when  |  |  ' always ' ;
var funcs = testSet [ i ] . funcs ; var receivers:==:testSet [ i ] . receivers ;
var parseTreeType = traceur . syntax . parseTreeType ; var parseTreeVisitor:==:traceur . syntax . parseTreeVisitor ;
var Plugin = imports . Plugin ; var preview:==:imports . preview ;
var fs = require ( ' fs ' ) ; var child:==:require ( ' child_process ' ) ;
var nomnom = require ( ' nomnom ' ) ; var temp:==:require ( ' temp ' ) . track ( ) ;
var neighbors = this . neighbors ; var faces:==:this . faces ;
var right = shadowFrustum . right ; var bottom:==:shadowFrustum . bottom ;
var rect = paper . rect ( bb . x+ . 5 , bb . y + . 5 , bb . width , bb . height ) . attr ( ' stroke - width ' : 1 ) ; var rect:==:this . g . rect ( x , y , boxWidth , height ) . attr ( ' stroke - width ' : 1 ) . attr ( boxStyle ) . hide ( ) ;
var transformer = options . transformer ; var originalModels:==:options . originalModels ;
var monthNames = this . _ get ( inst , ' monthNames ' ) ; var monthNamesShort:==:this . _ get ( inst , ' monthNamesShort ' ) ;
var element = that . element ; var disable:==:options . disable ;
var fontFamily = _ muiTheme . fontFamily ; var palette:==:_ muiTheme . palette ;
var nameFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' nameFieldTestObject ' ) ) ; var emailFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' emailFieldTestObject ' ) ) ;
var errors = require ( ' restify - errors ' ) ; var semver:==:require ( ' semver ' ) ;
var slice   = emptyArray . slice ; var concat:==:emptyArray . concat ;
var _ strlen = Module [ ' _ strlen ' ] = asm [ ' _ strlen ' ] ; var _ rand:==:Module [ ' _ rand ' ]    asm [ ' _ rand ' ] ;
var assert = require ( ' assert ' ) ; var express:==:require ( ' express ' ) ;
var arrayExtensions = jsCommon . arrayExtensions ; var dataViewObjectDefinitions:==:powerbi . data . dataViewObjectDefinitions ;
var Surface = ReactART . Surface ; var Transform:==:ReactART . Transform ;
var light = $ ( ' # lightButton . button ' ) ; var stoke:==:$ ( ' # stokeButton . button ' ) ;
var breakState = traceur . codegeneration . generator . breakState ; var continueState:==:traceur . codegeneration . generator . continueState ;
var color = colors [ setIdx ] ; var axis:==:g . axisPropertiesForSeries ( setName ) ;
var warn = debug ( ' extras : primitives : warn ' ) ; var primitives:==:module . exports . primitives    ;
var radii = Property . getValueOrUndefined ( ellipsoid . radii , time , radiiScratch ) ; var modelMatrix:==:entity . _ getModelMatrix ( time , this . _ modelMatrix ) ;
var closure = require ( ' closure - util ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var http = require ( ' http ' ) ; var connect:==:require ( ' connect ' ) ;
var _ strcasecmp = Module [ ' _ strcasecmp ' ] = asm [ ' _ strcasecmp ' ] ; var _ strlen:==:Module [ ' _ strlen ' ]    asm [ ' _ strlen ' ] ;
var dataLabelsSettings = this . data . streamGraphSettings . dataLabelsSettings ; var fontSize:==:pixelConverter . fromPoint ( dataLabelsSettings . fontSize ) ;
var controllers = this . app . controllers ; var app:==:this . app ;
var children = span . children ; var message:==:messages [ messages . length - 1 ] ;
var purpleA400 = exports . purpleA400 = ' # d500f9 ' ; var purpleA700:==:exports . purpleA700    ' # aa00ff ' ;
var deletePrivate = m . deletePrivate ; var setPrivate:==:m . setPrivate ;
var receiver = this . _ receiverAt ( index ) ; var promise:==:this . _ promiseAt ( index ) ;
var cs_permute = math . sparse . cs_permute ; var cs_lu:==:math . sparse . cs_lu ;
var Route = Router . Route ; var defaultRoute:==:router . defaultRoute ;
var done = self . _ done ( resolve , self ) ; var onDomAdded:==:self . config [ ' onDomAdded ' ]  |  |  angular . noop ;
var script = tplToken . script ; var output:==:script . output ;
var p = path . join ( dir , d ) ; var stat:==:fs . statSync ( p ) ;
var reactUpdates = require ( ' reactUpdates ' ) ; var finddomNode:==:require ( ' finddomNode ' ) ;
var cookie = imports [ ' analytics . cookie ' ] ; var run:==:imports . run ;
var reactNativePropRegistry = require ( ' reactNativePropRegistry ' ) ; var deepDiffer:==:require ( ' deepDiffer ' ) ;
var list = opt_list  |  |  this . shortcuts _ ; var index:==:opt_index  |  |  0 ;
var events = this . events ( event ) ; var total:==:track . revenue ( )  |  |  track . total ( )  |  |  0 ;
var style = _ props3 . style ; var tabIndex:==:_ props3 . tabIndex ;
var haveStatePropsBeenPrecalculated = this . haveStatePropsBeenPrecalculated ; var statePropsPrecalculationError:==:this . statePropsPrecalculationError ;
var tileWidth = this . tileWidth * this . scale . x ; var tileHeight:==:this . tileHeight * this . scale . y ;
var path = require ( ' path ' ) ; var auth:==:require ( ' http - auth ' ) ;
var icc = iccManager . getIccById ( iccId ) ; var iccInfo:==:icc . iccInfo ;
var graph = this . editor . graph ; var graph:==:this . editor . graph ;
var frameData = playData . frameData ; var currentFrameIndex:==:playData . currentFrameIndex ;
var metadata = codeUnit . metadata ; var outputName:==:metadata . outputName  |  |  metadata . sourceName  |  |  ' < loaderOutput > ' ;
var def = goog . dom . getElement ( ' def-4 ' ) ; var jkl:==:goog . dom . getElement ( ' jkl-4 ' ) ;
var height = options . height  |  |  10 ; var subdivisions:==:options . subdivisions  |  |  1 ;
var hour12 = hour ? getOption ( options , ' hour12 ' , ' boolean ' , undefined , undefined ) : undefined ; var formatMatcher:==:getOption ( options , ' formatMatcher ' , ' string ' , [ ' basic ' , ' best fit ' ] , ' best fit ' ) ;
var el = $ el [ 0 ] ; var placeholder:==:el . getAttribute ( ' placeholder ' ) ;
var Input = makePropDecorator ( ' input ' , [ [ ' bindingPropertyName ' , undefined ] ] ) ; var output:==:makePropDecorator ( ' output ' , [ [ ' bindingPropertyName ' , undefined ] ] ) ;
var a = observable ( 2 ) ; var b:==:observable ( 3 ) ;
var viz = this . viz ; var options:==:$ . merge ( this . options , viz . controller , opt ) ;
var firstPage = jQuery . sap . byId ( i d + ' --firstPageLink ' ) . toggleClass ( ' sapUiLnk ' , ! isFirst ) . toggleClass ( ' sapUiLnkDsbl ' , isFirst ) ; var backLink:==:jQuery . sap . byId ( i d + ' --backLink ' ) . toggleClass ( ' sapUiLnk ' , ! isFirst ) . toggleClass ( ' sapUiLnkDsbl ' , isFirst ) ;
var version = util . getArg ( sourceMap , ' version ' ) ; var sections:==:util . getArg ( sourceMap , ' sections ' ) ;
var Model = _ fxosMvcDistMvc . model ; var shareService:==:_ appJsServicesShareService [ ' default ' ] ;
var user = this . analytics . user ( ) ; var traits:==:user . traits ( ) ;
var uglify = require ( ' gulp - uglify ' ) ; var minify:==:require ( ' gulp - minify - css ' ) ;
var beforeEnter = data . beforeEnter ; var enter:==:data . enter ;
var request = this . _ request ; var initiator:==:request . initiatorInfo ( ) ;
var util = require ( ' util ' ) ; var lolcat:==:require ( ' fis - lolcat ' ) ;
var integration = require ( ' analytics . js - integration ' ) ; var is:==:require ( ' is ' ) ;
var south = cesiumMath . toDegrees ( rectangle . south ) ; var east:==:cesiumMath . toDegrees ( rectangle . east ) ;
var dragTarget = document . getElementById ( ' dragTarget ' ) ; var mouseup:==:rx . observable . fromEvent ( dragTarget , ' mouseup ' ) ;
var subscriber = state . subscriber ; var windowTimeSpan:==:state . windowTimeSpan ;
var watcher = imports . watcher ; var experimental:==:imports [ ' preferences . experimental ' ] ;
var Variable = debug . Variable ; var Scope:==:debug . Scope ;
var g = Ca . alpha * Ca . rgb . g + ( 1 - Ca . alpha ) * Cb . rgb . g ; var b:==:Ca . alpha * Ca . rgb . b + ( 1 - Ca . alpha ) * Cb . rgb . b ;
var ref = this . references [ vertex . triangleStart + i ] ; var t:==:this . triangles [ ref . triangleId ] ;
var promoteLongs = options [ ' promoteLongs ' ] = = null ? true : options [ ' promoteLongs ' ] ; var promoteValues:==:options [ ' promoteValues ' ]     null ? true : options [ ' promoteValues ' ] ;
var rimraf = require ( ' rimraf ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var lightScene = lightSceneData . scene ; var lightFullscreenScene:==:lightFullscreenSceneData . scene ;
var async = require ( ' async ' ) ; var timeago:==:require ( ' timeago ' ) ;
var busboy = require ( ' connect - busboy ' ) ; var errorhandler:==:require ( ' errorhandler ' ) ;
var showBackground = label . _ showBackground & & ( text . split ( ' \n ' ) . join ( '' ) . length > 0 ) ; var backgroundBillboard:==:label . _ backgroundBillboard ;
var APN_PROPERTY_DEFAULTS = apnEditorConst . apn_property_defaults ; var value_converters:==:apnEditorConst . value_converters ;
var baseRadius = opts & & opts . baseRadius ! = = undefined ? opts . baseRadius : 0 . 5 ; var height:==:opts & & opts . height !    undefined ? opts . height : 1 . 0 ;
var path = this . path ; var createIfMissing:==:this . createIfMissing ;
var error = options . error ; var lockType:==:options . lockType ;
var c = locations [ ci ] ; var s:==:Math . abs ( det ( a , b , c ) ) ;
var url = require ( ' url ' ) ; var error:==:require ( ' http - error ' ) ;
var integration = require ( ' analytics . js - integration ' ) ; var each:==:require ( ' each ' ) ;
var buffer = require ( ' vinyl - buffer ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var params = func [ ' ( params ) ' ] . slice ( ) ; var param:==:params . pop ( ) ;
var height = parseInt ( $ ( obj . box ) . height ( ) ) ; var width:==:parseInt ( $ ( obj . box ) . width ( ) ) ;
var tileWidth = defaultValue ( options . tileWidth , parseInt ( format . getAttribute ( ' width ' ) , 10 ) ) ; var tileHeight:==:defaultValue ( options . tileHeight , parseInt ( format . getAttribute ( ' height ' ) , 10 ) ) ;
var node = exp . node  |  |  exp . attribute . node ; var watchers:==:node . template . watchers ;
var getCustomerByStripeId = denodeify ( customer . getCustomerByStripeId ) . bind ( customer ) ; var setActive:==:denodeify ( customer . setActive ) . bind ( customer ) ;
var test1 = jasmine . createSpy ( ' test1 ' ) ; var test2:==:jasmine . createSpy ( ' test2 ' ) ;
var dataViewObjects = powerbi . dataViewObjects ; var textMeasurementService:==:powerbi . textMeasurementService ;
var el = this . el ; var a:==:document . createElement ( ' a ' ) ;
var isGeographic = defaultValue ( options . isGeographic , true ) ; var ellipsoid:==:defaultValue ( options . ellipsoid , ellipsoid . wgs84 ) ;
var reactReconciler = require ( ' reactReconciler ' ) ; var reactUpdateQueue:==:require ( ' reactUpdateQueue ' ) ;
var debug = imports [ ' debugger ' ] ; var Coverage:==:test . Coverage ;
var url = require ( ' url ' ) ; var util:==:require ( ' util ' ) ;
var index = event . detail . index ; var item:==:event . detail . item ;
var left = path . get ( ' left ' ) ; var right:==:path . get ( ' right ' ) ;
var streamsSequenceStream = coreStream . streamsSequenceStream ; var catalog:==:coreObj . catalog ;
var axisBase = layoutInfo . axisBase ; var layoutBase:==:layoutInfo . layoutBase ;
var strokeWidth = series . strokeWidth ? series . strokeWidth : this . strokeWidth ; var opacity:==:series . opacity ? series . opacity : this . opacity ;
var body = this . transformAny ( tree . body ) ; var debugName:==:this . transformAny ( tree . debugName ) ;
var Iterator = Iterable . Iterator ; var Seq:==:Immutable . Seq ;
var findit = require ( ' findit ' ) ; var path:==:require ( ' path ' ) ;
var ratios = this . _ ratios . get ( ) ; var direction:==:this . options . direction ;
var kill_timeout = ( pm2_env & & pm2_env . kill_timeout ) ? pm2_env . kill_timeout : cst . KILL_TIMEOUT ; var mode:==:pm2_env . exec_mode ;
var sourceURL = styleSheetHeader . resourceurl ( ) ; var lineNumber:==:styleSheetHeader . lineNumberInSource ( ruleLocation . startLine ) ;
var headerTypes = parseOutput . headerTypes ; var errors:==:parseOutput . errors ;
var postProcesses = this . _ scene . activeCamera . _ postProcesses ; var postProcessesTakenIndices:==:this . _ scene . activeCamera . _ postProcessesTakenIndices ;
var box = kendo . effects . box ; var transformOrigin:==:kendo . effects . transformOrigin ;
var base = that . stat_desc . extra_base ; var max_length:==:that . stat_desc . max_length ;
var modifyBlockForContentState = require ( ' modifyBlockForContentState ' ) ; var removeEntitiesAtEdges:==:require ( ' removeEntitiesAtEdges ' ) ;
var edgeFieldsCount = this . _ edgeFieldsCount ; var nodeFieldCount:==:this . _ nodeFieldCount ;
var order = $ scope . order ; var currency:==:order . first_currency ;
var div = utils . elt ( ' div ' , [ input , buttonsdiv ] , ' class ' : ' firepad - dialog - div ' ) ; var dialog:==:utils . elt ( ' div ' , [ div ] , ' class ' : ' firepad - dialog ' , i d : ' overlay ' ) ;
var options = _ ref . options ; var valueArray:==:_ ref . valueArray ;
var b = Math . max ( this . bottom , region . bottom ) ; var l:==:Math . min ( this . left , region . left ) ;
var eventDrop = t . eventDrop ; var eventResize:==:t . eventResize ;
var command = commandList [ i ] ; var method:==:command . method ;
var transitionDuration = tooltipModel . get ( ' transitionDuration ' ) ; var backgroundColor:==:tooltipModel . get ( ' backgroundColor ' ) ;
var lazypipe = require ( ' lazypipe ' ) ; var glob:==:require ( ' glob ' ) . sync ;
var size = frameState . size ; var pixelRatio:==:frameState . pixelRatio ;
var after   = require ( ' after ' ) ; var assert:==:require ( ' assert ' ) ;
var data = this . data ; var light:==:this . light ;
var path = require ( ' path ' ) ; var argv:==:require ( ' yargs ' ) . argv ;
var normals   = opts & & opts . normals ! = = undefined ? opts . normals : null ; var tangents:==:opts & & opts . tangents !    undefined ? opts . tangents : null ;
var browser = goog . require ( ' goog . labs . userAgent . browser ' ) ; var verifier:==:goog . require ( ' goog . labs . useragent . verifier ' ) ;
var points = spline . points ; var times:==:spline . times ;
var z = this . normal . z ; var d:==:this . d ;
var params = _ state . params ; var components:==:_ state . components ;
var document = this . document ; var window:==:document . window    this ;
var title = titleContainer . firstElementChild ; var picture:==:node . querySelector ( ' . threadlist - item - picture ' ) ;
var idToNode = this . _ idToNode ; var gcNode:==:this . gcNode ;
var dx5 = Math . max ( parseFloat ( mxUtils . getValue ( this . state . style , ' dx4 ' , 0 ) ) , math . min ( bounds . width , parseFloat ( mxUtils . getValue ( this . state . style , ' dx5 ' , 0 ) ) ) ) ; var dy5:==:math . max ( 0 , math . min ( 100 , parseFloat ( mxUtils . getValue ( this . state . style , ' dy5 ' , 0 ) ) ) ) ;
var sideOrientation = meshBuilder . updateSideOrientation ( options . sideOrientation , scene ) ; var cap:==:options . cap  |  |  babylon . mesh . no_cap ;
var htmlContentElement = scope . wrappers . htmlContentElement ; var htmlElement:==:scope . wrappers . htmlElement ;
var chart = tooltip . _ chart ; var chartArea:==:tooltip . _ chart . chartArea ;
var firstEdgeIndexes = this . _ firstEdgeIndexes ; var edgeToNodeOffset:==:this . _ edgeToNodeOffset ;
var el = this . el ; var material:==:el . getObject3d ( ' mesh ' ) . material ;
var width = element . getAttribute ( ' width ' ) ; var height:==:element . getAttribute ( ' height ' ) ;
var scale = billboard . scale ; var rotation:==:billboard . rotation ;
var style = this . $ measureNode . style ; var computedStyle:==:dom . computedStyle ( this . element ) ;
var pos = this . pos ; var r:==:this . radius ;
var username = usernameInput . value ; var password:==:passwordInput . value ;
var s = Array . prototype . shift . call ( args ) ; var e:==:Array . prototype . shift . call ( args ) ;
var dirname = path . dirname ; var join:==:path . join ;
var g = ref . g ; var b:==:ref . b ;
var frustum = camera . frustum ; var aspectRatio:==:frustum . aspectRatio ;
var val = attr . val ; var mustEscape:==:attr . mustEscape ;
var name = symbol . name ; var tree:==:symbol . tree ;
var step = config . step ; var preview:==:config . preview ;
var line = this . dom . line ; var dot:==:this . dom . dot ;
var join    = require ( ' path ' ) . join ; var connect:==:require ( ' connect ' ) ;
var ui = imports . ui ; var Plugin:==:imports . Plugin ;
var winAnsiEncoding = coreEncodings . winAnsiEncoding ; var standardEncoding:==:coreEncodings . standardEncoding ;
var path = e . path ; var progress:==:e . progress ;
var priorities = this . priorities _ ; var element:==:elements [ index ] ;
var load = require ( ' pug - load ' ) ; var parse:==:require ( ' pug - parser ' ) ;
var layout = imports . layout ; var menuItem:==:imports . menuItem ;
var dict = preEvaluatedFont . dict ; var composite:==:preEvaluatedFont . composite ;
var method = req . method ; var path:==:req . path ;
var createAssignmentStatement = parseTreeFactory . createAssignmentStatement ; var createMemberExpression:==:parseTreeFactory . createMemberExpression ;
var B = db . model ( ' gh4278_1 ' , bSchema ) ; var c:==:db . model ( ' gh4278_2 ' , cSchema ) ;
var phantomjs = checkTestOnlyDependency ( ' phantomjs - prebuilt ' ) ; var webdriver:==:checkTestOnlyDependency ( ' browserstack - webdriver ' ) ;
var parenthesis = ( options & & options . parenthesis ) ? options . parenthesis : ' keep ' ; var expr:==:this . expr . toTex ( options ) ;
var end = ' animationend ' ; var background:==:this . els . background ;
var m = matrices [ 0 ] ; var s:==:cs_sqr ( 3 , m , false ) ;
var propTypes = _ require . propTypes ; var children:==:_ require . children ;
var e = Fe . G ( ' feDialogFactoryInset _ ' + me . hashCode ) ; var t:==:fe . g ( ' feDialogContent _ ' + me . hashCode ) . childNodes [ 0 ] ;
var Uri = Windows . Foundation . Uri ; var startScreen:==:windows . ui . startScreen ;
var gulp = require ( ' gulp ' ) ; var open:==:require ( ' open ' ) ;
var item = items [ i ] ; var ch:==:children [ i ] ;
var selector = ( options & & typeof options . selector ! = ' undefined ' ) ? options . selector : that . selector ; var scope:==:( options & & typeof options . scope !   ' undefined ' ) ? options . scope : that . scope ;
var textContainer = ' cesium - credit - textContainer ' ; var text:==:' cesium - credit - text ' ;
var z = this . z + 1 ; var x:==:this . x * 2 ;
var operatorList = this . operatorList ; var bbox:==:this . bbox ;
var mouseXY = drag . mouseXY ; var mouseX:==:mouseXY [ 0 ] ;
var exec = bbPromise . promisify ( child_process . exec ) ; var fs:==:bbPromise . promisifyAll ( require ( ' fs ' ) ) ;
var Divider = imports . Divider ; var tabManager:==:imports . tabManager ;
var flows = config . flows ; var credentials:==:config . credentials ;
var parser = require ( ' engine . io - parser ' ) ; var parseuri:==:require ( ' parseuri ' ) ;
var s = f ( srcValue . get ( ) ) ; var d:==:dstValue . get ( ) ;
var src = xmlAttributeValue ( domElement , ' src ' ) ; var type:==:xmlAttributeValue ( domElement , ' type ' ) ;
var unexpectedResponseException = sharedUtil . unexpectedResponseException ; var unknownErrorException:==:sharedUtil . unknownErrorException ;
var util = require ( ' util ' ) ; var ms:==:require ( ' ms ' ) ;
var TRUE1 = C . TRUE1 = 0x21 ; var TRUE2:==:C . TRUE2    0x22 ;
var a = this . body_a ; var b:==:this . body_b ;
var dataZoomModel = this . dataZoomModel ; var api:==:this . api ;
var altDecimal = ( config . altDecimal = = = false ) ? ' ' : config . altDecimal  |  |  decimal ; var negative:==:( config . negative      true ) ? true : false ;
var properties = page . proxy ( ' properties ' ) ; var category:==:page . category ( ) ;
var callbacksLast = configuration . callbacksLast  |  |  false ; var ignoreCase:==:configuration . ignoreCase  |  |  false ;
var entryPointName = scope . entryPointName ; var processFlags:==:scope . processFlags ;
var duplexer = require ( ' duplexer2 ' ) ; var subarg:==:require ( ' subarg ' ) ;
var spawn = require ( ' child_process ' ) . spawn ; var fs:==:require ( ' fs ' ) ;
var stylus   = require ( ' gulp - stylus ' ) ; var autoprefixer:==:require ( ' gulp - autoprefixer ' ) ;
var y = possibleCoordinates . y ; var z:==:possibleCoordinates . z ;
var opts = this . opts ; var ast:==:this . ast ;
var one = props . one ; var many:==:props . many ;
var y = e . heading . y ; var z:==:e . heading . z ;
var callbacks = dg . _ callbacks ; var k:==:callbacks . length ;
var domNamespaces = require ( ' domNamespaces ' ) ; var setInnerhtml:==:require ( ' setInnerhtml ' ) ;
var authAttribs = doc . authAttribs ; var starRevNums:==:doc . starRevNums ;
var enumExtensions = jsCommon . enumExtensions ; var dataRoleHelper:==:powerbi . data . dataRoleHelper ;
var glob   = bluebird . promisify ( require ( ' glob ' ) ) ; var fs:==:require ( ' fs ' ) ;
var gulp = require ( ' gulp ' ) ; var glob:==:require ( ' glob ' ) ;
var key = e . keyCode ; var listView:==:that . listView ;
var RETURN_STATEMENT = ' RETURN_STATEMENT ' ; var SCRIPT:==:' SCRIPT ' ;
var u = uvLayer [ uvIndex * 2 ] ; var v:==:uvLayer [ uvIndex * 2 + 1 ] ;
var timelinesFirst = from . timelinesFirst ; var alpha:==:from . alpha * entry . mixAlpha * ( 1 - mix ) ;
var createThrowStatement = parseTreeFactory . createThrowStatement ; var createTryStatement:==:parseTreeFactory . createTryStatement ;
var doc = this . doc = new Document ( ' ' ) ; var deferredUpdate:==:this . deferredUpdate    lang . delayedCall ( this . onUpdate . bind ( this ) ) ;
var spaces = this . spaces , out = spine . Utils . setArraySize ( this . positions , spacesCount * 3 + 2 ) , world = null ; var closed:==:path . closed ;
var morph = model . morphs [ i ] ; var elements:==:morph . elements ;
var target = tween . _ target ; var tweens:==:Tween . _ tweens ;
var http = Npm . require ( ' http ' ) ; var os:==:Npm . require ( ' os ' ) ;
var and = Parsers . and ; var not:==:Parsers . not ;
var clientY = event . center ? event . center . y : event . clientY ; var groupIds:==:this . groupIds ;
var Share = require ( ' Share ' ) ; var View:==:require ( ' View ' ) ;
var lightGreena100 = exports . lightGreena100 = ' # ccff90 ' ; var lightGreena200:==:exports . lightGreena200    ' # b2ff59 ' ;
var some = utils . some ; var keys:==:utils . keys ;
var number = group . number ; var type:==:group . type ;
var asyncConditionalTestCase = asyncConditionalTestCase  |  |  conditionalTestCase ; var jstestdriver:==:jstestdriver  |  |  ;
var x = xys . x + eop . xPoleOffset ; var y:==:xys . y + eop . yPoleOffset ;
var includes = require ( ' includes ' ) ; var url:==:require ( ' url ' ) ;
var transparency = powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . transparency , 50 ) ; var style:==:powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . style , visuals . lineStyle . dashed ) ;
var fs = require ( ' fs ' ) ; var qs:==:require ( ' qs ' ) ;
var southwestChild = tile . southwestChild ; var southeastChild:==:tile . southeastChild ;
var channel = root . channel ; var userid:==:root . userid  |  |  getToken ( ) ;
var findSessionByuri = require ( ' findSessionByuri ' ) ; var connect:==:require ( ' react - redux ' ) ;
var intValue = rounded . intValue ; var fracValue:==:rounded . fracValue ;
var assert   = require ( ' assert ' ) ; var Buffer:==:require ( ' safe - buffer ' ) . Buffer ;
var evalExpr = ' ( evalExpr ( ' + args . path + ' . tabs [ ' + index + ' ] ' + ' . condition , model : model , ' arrayIndex ' : $ index ) ) ' ; var div:==:document . createElement ( ' div ' ) ;
var DO_WHILE_STATEMENT = ' DO_WHILE_STATEMENT ' ; var EMPTY_STATEMENT:==:' EMPTY_STATEMENT ' ;
var is = require ( ' is ' ) ; var has:==:Object . prototype . hasOwnProperty ;
var center = Property . getValueOrUndefined ( entity . position , time , options . center ) ; var semiMajorAxis:==:property . getValueOrUndefined ( ellipse . semiMajorAxis , time ) ;
var isHorizontal = cartesian . getBaseAxis ( ) . isHorizontal ( ) ; var x:==:math . min ( xExtent [ 0 ] , xExtent [ 1 ] ) ;
var childNodes = node . childNodes ; var length:==:childNodes . length ;
var valueFormatter = powerbi . visuals . valueFormatter ; var objectEnumerationBuilder:==:powerbi . visuals . objectEnumerationBuilder ;
var obj = ' object ' ; var str:==:' string ' ;
var chart = me . chart ; var datasets:==:chart . data . datasets ;
var x = 400 + xx [ i ] * perspective ; var y:==:300 + yy [ i ] * perspective ;
var qs    = require ( ' qs ' ) ; var path:==:require ( ' path ' ) ;
var domNode = this . domNode ; var parent:==:domNode . parentNode ;
var fn = klass . fn ; var _ _ init _ _:==:klass . _ _ init _ _ ;
var shapes = this . shapes = options . shapes ; var clearCatcher:==:options . clearCatcher ;
var faces = this . faces ; var length:==:faces . length ;
var context = renderer . context ; var state:==:renderer . state ;
var circle = document . createElement ( ' circle ' ) ; var dotSize:==:typeof _ this2 . dotSize      ' function ' ? _ this2 . dotSize ( ) : _ this2 . dotSize ;
var clientWidth = this . img . clientWidth ; var clientHeight:==:this . img . clientHeight ;
var doc = tab . document ; var path:==:tab . path ;
var webpack = require ( ' webpack ' ) ; var express:==:require ( ' express ' ) ;
var x = topo . data [ ' switchs ' ] [ i d ] . x ; var y:==:topo . data [ ' switchs ' ] [ i d ] . y ;
var tier = tiers [ index ] ; var th:==:document . createElement ( ' th ' ) ;
var rowOverscanStopIndex = _ ref8 . rowOverscanStopIndex ; var rowStartIndex:==:_ ref8 . rowStartIndex ;
var setting2 = this . settings . setting2 ; var setting3:==:this . settings . setting3 ;
var min = detail . min ; var max:==:detail . max ;
var Class = kendo . Class ; var extend:==:$ . extend ;
var indigo700 = exports . indigo700 = ' # 303f9f ' ; var indigo800:==:exports . indigo800    ' # 283593 ' ;
var patch = patches [ 0 ] ; var diffs:==:patch . diffs ;
var min = stdlib . Math . min ; var max:==:stdlib . Math . max ;
var bullet = nv . models . bullet ( ) ; var tooltip:==:nv . models . tooltip ( ) ;
var tbody = document . querySelector ( ' # netInspector tbody ' ) ; var rows:==:tbody . rows ;
var x = P3x * QB1 ( pct ) + P2x * QB2 ( pct ) + P1x * QB3 ( pct ) ; var y:==:P3y * QB1 ( pct ) + P2y * QB2 ( pct ) + P1y * QB3 ( pct ) ;
var tbody = document . createElement ( ' tbody ' ) ; var tr:==:document . createElement ( ' tr ' ) ;
var frontendClient = this . _ frontendClient ; var breakEventHandler:==:this . _ breakEventHandler ;
var fs = require ( ' fs ' ) ; var jade:==:require ( ' jade ' ) ;
var jumpList = startScreen . jumpList ; var jumpListSystemGroupKind:==:startScreen . jumpListSystemGroupKind ;
var f8Header = require ( ' f8Header ' ) ; var interactionManager:==:require ( ' interactionManager ' ) ;
var Editor = imports . Editor ; var editors:==:imports . editors ;
var getSnapHeight = t . getSnapHeight ; var getSnapDuration:==:t . getSnapDuration ;
var cancelable = typeof options . cancelable ! = ' undefined ' ? options . cancelable : ( event ! = ' touchcancel ' ) ; var view:==:typeof options . view !   ' undefined ' ? options . view : window ;
var helpers = this . helpers ; var models:==:this . models ;
var fontSize = pixelConverter . fromPoint ( this . data . dataLabelsSettings . fontSize  |  |  visuals . newDataLabelUtils . defaultLabelFontSizeInPt ) ; var padding:==:this . settings . labels . padding ;
var entity = geometryUpdater . _ entity ; var corridor:==:entity . corridor ;
var pathname = location . pathname ; var search:==:location . search ;
var def = this . props . def ; var memberName:==:this . props . memberName ;
var debug = require ( ' debug ' ) ( ' test ' ) ; var extend:==:require ( ' util ' ) . _ extend ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var when:==:require ( ' when ' ) ;
var nextAvcDts = this . nextAvcDts ; var isSafari:==:this . isSafari ;
var querystring = require ( ' querystring ' ) ; var request:==:require ( ' request ' ) ;
var tabManager = imports . tabManager ; var info:==:imports . info ;
var width = info . width ; var height:==:info . height ;
var head = document . getElementsByTagNamens ( xmlns . xhtml , ' head ' ) [ 0 ] ; var s:==:document . createElementns ( xmlns . xhtml , ' script ' ) ;
var isRTL = this . isRTL ; var rowCnt:==:this . rowCnt ;
var sinon = require ( ' sinon ' ) ; var isNodejs:==:testUtils . isNodejs ;
var style = _ props2 . style ; var type:==:_ props2 . type ;
var innerType = this . _ innerType ; var values:==:this . _ values ;
var req = think . extend ( , _ http . req ) ; var res:==:think . extend ( , _ http . res ) ;
var start = this . conversion . toScreen ( this . data . start ) ; var end:==:this . conversion . toScreen ( this . data . end ) ;
var x = Math . min ( xExtent [ 0 ] , xExtent [ 1 ] ) ; var y:==:math . min ( yExtent [ 0 ] , yExtent [ 1 ] ) ;
var coefficentsMagnitude = this . coefficentsMagnitude ; var neighborsSignificance:==:this . neighborsSignificance ;
var glob = require ( ' glob ' ) ; var fs:==:require ( ' fs ' ) ;
var el = this . el _ = vjs . Component . prototype . createEl . call ( this , ' div ' ) ; var tag:==:this . tag ;
var value1 = oConditionGrid . value1 ; var value2:==:oConditionGrid . value2 ;
var path = require ( ' path ' ) ; var spawn:==:require ( ' win - spawn ' ) ;
var boxNode = boxNodes [ i ] ; var box:==:this . parseGeometry [ ' box ' ] . apply ( this , [ boxNode ] ) ;
var slices = cylinder . slices ; var outlineWidth:==:cylinder . outlineWidth ;
var info = imports . info ; var menus:==:imports . menus ;
var url = result . address . url ; var isUnixSocket:==:result . address . isUnixSocket ;
var n = conf . n  |  0 ; var len:==:conf . len  |  0 ;
var rimraf = require ( ' rimraf ' ) ; var spawnSync:==:child_process . spawnSync ;
var child_process = require ( ' child_process ' ) ; var colors:==:require ( ' colors ' ) ;
var startAngle = vm . startAngle ; var endAngle:==:vm . endAngle ;
var loadJSON = p5 . prototype . loadJSON ; var loadStrings:==:p5 . prototype . loadStrings ;
var timePickerAndroid = require ( ' timePickerAndroid ' ) ; var react:==:require ( ' react ' ) ;
var switchAndroid = require ( ' switchAndroid ' ) ; var toolbarAndroid:==:require ( ' toolbarAndroid ' ) ;
var l = $ ( target ) . offset ( ) . left ; var t:==:$ ( target ) . offset ( ) . top ;
var newName = event . data . newName ; var isGeneric:==:event . data . isGeneric ;
var KIND_EVENT = module . exports . KIND_EVENT = ' event ' ; var KIND_PACKAGE:==:module . exports . KIND_PACKAGE    ' package ' ;
var layout = imports . layout ; var editors:==:imports . editors ;
var aceAdapter = firepad . aceAdapter ; var firebaseAdapter:==:firepad . firebaseAdapter ;
var colResize = that . tablePlugin . colResize ; var rowResize:==:that . tablePlugin . rowResize ;
var hintText = _ props . hintText ; var floatingLabelText:==:_ props . floatingLabelText ;
var height = billboard . height ; var scale:==:billboard . scale ;
var canvas = this . canvas ; var cropBox:==:this . cropBox ;
var bearing = window . plugin . distanceToPortal . currentLoc . bearingTo ( ll ) ; var bearingWord:==:window . plugin . distanceToPortal . currentLoc . bearingWordTo ( ll ) ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var tokenType:==:traceur . syntax . tokenType ;
var getopt = global . getopt ; var arrUnique:==:global . arrUnique ;
var RIGHT_BRACKET = C . RIGHT_BRACKET = 0x4 ; var COLON:==:C . COLON      0x5 ;
var o = this . options ; var capt:==:this . element . children ( ' . window - caption ' ) ;
var head = doc . getElementsByTagName ( ' head ' ) [ 0 ] ; var script:==:doc . createElement ( ' script ' ) ;
var addLinkAttributes = sharedUtil . addLinkAttributes ; var warn:==:sharedUtil . warn ;
var width = this . props . style . width ; var height:==:this . props . style . height ;
var ifIgnoreOnTick = axisBuilder . ifIgnoreOnTick ; var getInterval:==:axisBuilder . getInterval ;
var style = this . props . style ; var margin:==:style & & resolveBoxStyle ( ' margin ' , style )  |  |  blank ;
var d = goog . dom . $ dom ( ' p ' , null , ' A paragraph ' ) ; var t:==:d . firstChild ;
var gauges = metrics . gauges ; var timers:==:metrics . timers ;
var timer_data = metrics . timer_data ; var statsd_metrics:==:metrics . statsd_metrics ;
var appBar = _ context$muiTheme . appBar ; var iconButtonSize:==:_ context$muiTheme . button . iconButtonSize ;
var EMPTY_ARRAY = ' EMPTY_ARRAY ' ; var TYPE_NOT_EQUAL:==:' TYPE_NOT_EQUAL ' ;
var valueFormatter = powerbi . visuals . valueFormatter ; var legendProps:==:powerbi . visuals . legendProps ;
var t = docSet . getByLongname ( ' test ' ) ; var t2:==:docSet . getByLongname ( ' test2 ' ) ;
var started = logEntry . started ; var startedTime:==:logEntry . startedTime ;
var iconElementRight = _ props . iconElementRight ; var iconClassNameLeft:==:_ props . iconClassNameLeft ;
var reload = browserSync . reload ; var colors:==:plug . util . colors ;
var children = _ props . children ; var color:==:_ props . color ;
var canvas = this . canvas ; var image:==:this . image ;
var ellipsoid = polygonGeometry . _ ellipsoid ; var granularity:==:polygonGeometry . _ granularity ;
var dispatcher = scope . dispatcher ; var n:==:window . navigator ;
var load = stdlib . Atomics . load ; var fround:==:stdlib . Math . fround ;
var option = visualMapModel . option ; var selected:==:zrUtil . clone ( option . selected ) ;
var isScrolling = _ ref . isScrolling ; var onRowClick:==:_ ref . onRowClick ;
var a22 = this . a22 ; var a23:==:this . a23 ;
var dx2 = Math . max ( parseFloat ( mxUtils . getValue ( this . state . style , ' dy1 ' , this . dy1 ) ) + parseFloat ( mxUtils . getValue ( this . state . style , ' arrowHead ' , this . arrowHead ) ) , math . min ( bounds . width - parseFloat ( mxUtils . getValue ( this . state . style , ' dx1 ' , this . dx1 ) ) , parseFloat ( mxUtils . getValue ( this . state . style , ' dx2 ' , this . dx2 ) ) ) ) ; var dy2:==:math . max ( parseFloat ( mxUtils . getValue ( this . state . style , ' dy1 ' , this . dy1 ) ) + parseFloat ( mxUtils . getValue ( this . state . style , ' arrowHead ' , this . arrowHead ) ) , math . min ( bounds . height - parseFloat ( mxUtils . getValue ( this . state . style , ' dy1 ' , this . dy1 ) ) , parseFloat ( mxUtils . getValue ( this . state . style , ' dy2 ' , this . dy2 ) ) ) ) ;
var cap    = options . cap ; var cutoff:==:options . cutoff ;
var setZoom = content . getAttribute ( ' data - setZoom ' )  |  |  17 ; var icon:==:content . getAttribute ( ' data - icon ' ) ;
var inputStyle = _ props2 . inputStyle ; var multiLine:==:_ props2 . multiLine ;
var store = new datastore ( tests . data . readOnlyItemFileTestTemplates . getTestData ( ' countries ' ) ) ; var d:==:new doh . deferred ( ) ;
var visualMapModel = this . visualMapModel ; var itemSize:==:visualMapModel . itemSize ;
var GAIA_DIR = utils . getEnv ( ' gaia_dir ' ) ; var gaia_distribution_dir:==:utils . getEnv ( ' gaia_distribution_dir ' ) ;
var line = lineAtHeight ( cm . view . doc , my ) ; var gutter:==:cm . options . gutters [ i ] ;
var debug = require ( ' debug ' ) ( ' server ' ) ; var path:==:require ( ' path ' ) ;
var span = div . appendChild ( document . createElement ( ' span ' ) ) ; var button:==:span . appendChild ( document . createElement ( ' button ' ) ) ;
var view = observable . view ; var connections:==:view . _ connections ;
var autoprefixer = require ( ' gulp - autoprefixer ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var m = math . matrix ( [ [ 1 , 2 ] , [ 3 , 4 ] ] , ' dense ' ) ; var r:==:multiply ( m , math . matrix ( [ [ 5 , 6 ] , [ 7 , 8 ] ] , ' sparse ' ) ) ;
var instancePrefix = _ ref . instancePrefix ; var labelKey:==:_ ref . labelKey ;
var contexts = this . contexts ; var bitsDecoded:==:this . bitsDecoded ;
var transform = options . transform ; var separator:==:options . separator  |  |  ' ' ;
var stream = evt . stream ; var connection:==:provider . getConnection ( peerId , connectionId ) ;
var value = dataPoint . value ; var categoryValue:==:dataPoint . categoryValue ;
var width = options . width ; var minWidth:==:options . minWidth ;
var axis = this . _ axis ; var isHorizontal:==:axis . isHorizontal ( ) ;
var parent = this . parent ; var retried:==:this . retried ;
var ware = require ( ' ware ' ) ; var clone:==:require ( ' clone ' ) ;
var incomingMessage = require ( ' http ' ) . incomingMessage ; var muk:==:require ( ' muk ' ) ;
var tokenType = traceur . syntax . tokenType ; var formalParameterList:==:traceur . syntax . trees . formalParameterList ;
var editor = this . editor ; var $ toolbarElem:==:editor . $ toolbarElem ;
var entityManager = saveContext . entityManager ; var metadataStore:==:entityManager . metadataStore ;
var opts = loadData . opts  |  |  ; var models:==:_ _ alloyId5 . models ;
var x = point . x ; var y:==:point . y ;
var value = powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . value , 0 ) ; var lineColor:==:powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . lineColor , solid : color : defaultColor ) ;
var functionNode = math . expression . node . functionNode ; var functionAssignmentNode:==:math . expression . node . functionAssignmentNode ;
var alias = el . alias ; var iterator1:==:el . iterator1 ? ( ' , ' + ( el . iterator1 ) ) : '' ;
var injectedKeys = this . injectedKeys ; var injectInto:==:this . injectInto ;
var name = this . transformAny ( tree . name ) ; var typeAnnotation:==:this . transformAny ( tree . typeAnnotation ) ;
var Image = require ( ' Image ' ) ; var Dimensions:==:require ( ' Dimensions ' ) ;
var wiredep = require ( ' wiredep ' ) ; var chalk:==:require ( ' chalk ' ) ;
var querystring = require ( ' querystring ' ) ; var validator:==:require ( ' validator ' ) ;
var ssri = require ( ' ssri ' ) ; var fs:==:require ( ' fs ' ) ;
var readlink = require ( ' graceful - readlink ' ) . readlinkSync ; var path:==:require ( ' path ' ) ;
var s = Math . sin ( rad ) ; var c:==:Math . cos ( rad ) ;
var manualOffset = _ ref . manualOffset ; var manualTargetOffset:==:_ ref . manualTargetOffset ;
var hboxUploadNoFolders = plugin . getElement ( ' hboxUploadNoFolders ' ) ; var hboxUploadWithFolders:==:plugin . getElement ( ' hboxUploadWithFolders ' ) ;
var controller = this . controller ; var pose:==:controller . pose ;
var EXPORT_SPECIFIER = ' EXPORT_SPECIFIER ' ; var EXPORT_SPECIFIER_SET:==:' EXPORT_SPECIFIER_SET ' ;
var start = panel . nodes . start ; var pause:==:panel . nodes . pause ;
var test = require ( ' tap ' ) . test ; var prelude:==:fs . readFileSync ( path . join ( _ _ dirname , ' multi_bundle ' , ' _ prelude . js ' ) , ' utf8 ' ) ;
var resp = fxaModuleErrors . responseToParams ( response ) ; var message:==:errorsObject [ key ] . message ;
var resourceNotFoundError = errors . resourceNotFoundError ; var unsupportedMediaTypeError:==:errors . unsupportedMediaTypeError ;
var map = geoCreator . getMap ( mapName ) ; var geoJson:==:map & & map . geoJson ;
var stRotation = rectangleGeometry . _ stRotation ; var vertexFormat:==:rectangleGeometry . _ vertexFormat ;
var dynCall_iiiiii = Module [ ' dynCall_iiiiii ' ] = asm [ ' dynCall_iiiiii ' ] ; var dynCall_viiii:==:Module [ ' dynCall_viiii ' ]    asm [ ' dynCall_viiii ' ] ;
var setInnerhtml = require ( ' setInnerhtml ' ) ; var shouldUpdateReactComponent:==:require ( ' shouldUpdateReactComponent ' ) ;
var clipboardXml = blockly . clipboardXml _ ; var clipboardSource:==:blockly . clipboardSource _ ;
var roughness = this . roughness . buildCode ( builder , ' fv1 ' ) ; var metalness:==:this . metalness . buildCode ( builder , ' fv1 ' ) ;
var field = search . field ; var value:==:' ' ' + search . value + ' ' ' ;
var eventElementHandlers = t . eventElementHandlers ; var setHeight:==:t . setHeight ;
var uid = process . getuid ? process . getuid ( ) : 0 ; var gid:==:process . getgid ? process . getgid ( ) : 0 ;
var expect = require ( ' expect . js ' ) ; var path:==:require ( ' path ' ) ;
var emberGenerateDestroy = blueprintHelpers . emberGenerateDestroy ; var setupPodConfig:==:blueprintHelpers . setupPodConfig ;
var initClass = isIn ? initClasses [ 0 ] : initClasses [ 1 ] ; var activeClass:==:isIn ? activeClasses [ 0 ] : activeClasses [ 1 ] ;
var data = datastorage . allstatsrecords ; var now:==:Date . now ( ) ;
var $ textContainerElem = editor . $ textContainerElem ; var opt:==:this . opt ;
var editor = plugin . activeSession . editor ; var session:==:e . session ;
var afinn = JSON . parse ( afinndata ) ; var express:==:require ( ' express ' ) ;
var current = options . current  |  |  this . page . current  |  |  0 ; var total:==:options . total  |  |  this . page . total  |  |  1 ;
var Node = mod . Node ; var linkedList:==:mod . linkedList ;
var pub = keys . pub ; var sec:==:keys . sec ;
var collection = this . transformAny ( tree . collection ) ; var body:==:this . transformAny ( tree . body ) ;
var sass = require ( ' gulp - sass ' ) ; var webpack:==:require ( ' webpack ' ) ;
var localFrom = intersectheightfield_localfrom ; var localTo:==:intersectheightfield_localto ;
var Stream = coreStream . stream ; var jpegStream:==:coreStream . jpegStream ;
var forInStatement = traceur . syntax . trees . forInStatement ; var forStatement:==:traceur . syntax . trees . forStatement ;
var classname = subDict [ ' classname ' ] ; var act:==:ccs . objectFactory . createObject ( classname ) ;
var argv = require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ; var path:==:require ( ' path ' ) ;
var scrollTop = this . container . scrollTop ; var scrollHeight:==:this . container . scrollHeight ;
var datasets = data . datasets ; var isHorizontal:==:me . isHorizontal ( ) ;
var monday = selector . querySelector ( ' . monday ' ) ; var sunday:==:selector . querySelector ( ' . sunday ' ) ;
var ngModel = sfBuilderProvider . builders . ngModel ; var sfField:==:sfBuilderProvider . builders . sfField ;
var React = require ( ' React ' ) ; var Navigator:==:require ( ' Navigator ' ) ;
var a = [ true , false , new Boolean ( true ) , new Boolean ( false ) ] ; var b:==:[ true , false , new Boolean ( true ) , new Boolean ( false ) , -1 , 0 , 1 , 2 , 1 . 0 , 1 . 1 , 0 . 0 , + 0 , -0 , null , undefined , new Object ( ) , ' ' , ' abc ' , ' -1 ' , ' 0 ' , ' 1 ' , ' 2 ' , ' true ' , ' false ' , ' t ' , ' f ' , ' True ' , ' False ' , ' 1 . 00 ' , ' 1 . ' , ' + 1 . 0 ' , new Number ( 0 ) , new Number ( 1 ) ] ;
var targetState = ' targetState ' ; var realState:==:' realState ' ;
var extrudedHeight = corridor . extrudedHeight ; var granularity:==:corridor . granularity ;
var attributes = this . _ attributes ; var offset:==:this . _ offsets [ attributeIndex ] ;
var grunt = require ( ' grunt ' ) ; var spawn:==:require ( ' npm - run ' ) . spawn ;
var start = param . start ; var count:==:param . count ;
var scaleX = ( typeof node . _ scaleX = = = ' number ' ) ? node . _ scaleX : 1 ; var scaleY:==:( typeof node . _ scaleY      ' number ' ) ? node . _ scaleY : 1 ;
var extend = require ( ' extend ' ) ; var mime:==:require ( ' mime ' ) ;
var pdfPage = windows . data . pdf . pdfPage ; var pdfPageRenderOptions:==:windows . data . pdf . pdfPageRenderOptions ;
var movie = movies [ i ] . title ; var cast:==:movies [ i ] . cast ;
var a = this . find ( _ a ) ; var b:==:this . find ( _ b ) ;
var projection = camera . _ projection ; var ellipsoid:==:projection . ellipsoid ;
var form = $ ( ' form ' ) ; var notification:==:$ ( ' . notification ' ) ;
var productImageBasePath = config . productImageBasePath ; var productUnknownImage:==:config . productUnknownImage ;
var endContainer = rangeObject . endContainer ; var endOffset:==:rangeObject . endOffset ;
var _ bitshift64Shl = module [ ' _ bitshift64Shl ' ] = asm [ ' _ bitshift64Shl ' ] ; var _ _ global__i_a:==:module [ ' _ _ global__i_a ' ]    asm [ ' _ _ global__i_a ' ] ;
var s = e . values ; var n:==:s . length ;
var select = document . createElement ( ' select ' ) ; var input:==:document . createElement ( ' input ' ) ;
var li = paragraph . li ; var level:==:paragraph . level + ( li ? 1 : 0 ) ;
var fixture = document . getElementById ( ' fixture ' ) ; var modal:==:document . getElementById ( ' modal ' ) ;
var lifetime = options . lifetime ! = = undefined ? options . lifetime : 5 ; var size:==:options . size !    undefined ? options . size : 10 ;
var wrapIfNeeded = scope . wrapIfNeeded ; var wrappers:==:scope . wrappers ;
var versions = data . versions ; var version:==:latestVersion ( versions ) ;
var head = last . head . line = = to ? Pos ( to - 1 ) : last . head ; var anchor:==:last . anchor . line     to ? Pos ( to - 1 ) : last . anchor ;
var T = numeric . T ; var n:==:A . length , i , k , flag    false , B    QB . B , H    numeric . dot ( QB . Q , numeric . dot ( QH . H , numeric . transpose ( QB . Q ) ) ) ;
var decimal = ( config . decimal = = = false ) ? ' ' : config . decimal  |  |  ' . ' ; var altDecimal:==:( config . altDecimal      false ) ? ' ' : config . altDecimal  |  |  decimal ;
var interpolationAlgorithm = options . interpolationAlgorithm ; var interpolationDegree:==:options . interpolationDegree ;
var baseRadius = opts & & opts . baseRadius ! = = undefined ? opts . baseRadius : 0 . 5 ; var peakRadius:==:opts & & opts . peakRadius !    undefined ? opts . peakRadius : 0 . 0 ;
var v = value ; var setters:==:this . setters ;
var param = temp_list [ i ] . param ; var func_name:==:temp_list [ i ] . func_name ;
var chalk = require ( ' chalk ' ) ; var prompt:==:require ( ' prompt ' ) ;
var properties = track . properties ( ) ; var revenue:==:properties . revenue ;
var accessToken = twilio . accessToken ; var ipMessagingGrant:==:accessToken . ipMessagingGrant ;
var video = element . find ( ' video ' ) , video_obj = video [ 0 ] ; var slider:==:element . find ( ' . stream - slider ' ) . data ( ' slider ' ) ;
var el = this . el = document . createElement ( ' div ' ) ; var el1:==:this . el1    document . createElement ( ' div ' ) ;
var isNumber = leafletHelpers . isNumber ; var isFunction:==:leafletHelpers . isFunction ;
var entities = this . _ entitiesToVisualize ; var modelHash:==:this . _ modelHash ;
var keys = Object . keys ( members ) ; var isArray:==:array . isArray ( target ) ;
var code = res . code ; var errors:==:res . errors ;
var featureType = context [ ' featureType ' ] ; var featurePrefix:==:context [ ' featurePrefix ' ] ;
var attachment = constraint . attachment ; var pin:==:constraint . pin ;
var csvFileName = this . props . csvFileName ; var onExportTocsv:==:this . props . options . onExportTocsv ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , zero_to_fifty ) ;
var position = entity . position ; var length:==:cylinder . length ;
var split2 = require ( ' split2 ' ) ; var defaults:==:require ( ' defaults ' ) ;
var not = Parsers . not ; var list:==:Parsers . list ;
var timeout = this . _ timeout ; var data:==:this . _ formData  |  |  this . _ data ;
var MAYBE_PROPER = module . exports . MAYBE_PROPER = 1 ; var NOT_PROPER:==:module . exports . NOT_PROPER    0 ;
var b = rejectSoon ( ' rejected - b ' , 30 ) ; var c:==:rejectSoon ( ' rejected - c ' , 10 ) ;
var rowHeight = webInspector . timelinePanel . rowHeight ; var headerHeight:==:webInspector . timelinePanel . headerHeight ;
var yieldExpression = exports . yieldExpression = buildYieldAwait ( ' yield ' ) ; var awaitExpression:==:exports . awaitExpression    buildYieldAwait ( ' await ' ) ;
var lte = semver . lte ; var satisfies:==:semver . satisfies ;
var createNullLiteral = parseTreeFactory . createNullLiteral ; var createObjectFreeze:==:parseTreeFactory . createObjectFreeze ;
var minify = require ( ' gulp - minify - css ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var fn1 = jasmine . createSpy ( ' fn1 ' ) . and . returnValue ( ' foo ' ) ; var fn2:==:jasmine . createSpy ( ' fn2 ' ) . and . returnValue ( ' bar ' ) ;
var units = time . units ; var domain:==:this . graph . x . domain ( ) ;
var rect = rects [ i ] ; var center:==:rect . center ;
var continuous = opts . continuous  |  |  false ; var batch_size:==:opts . batch_size  |  |  1 ;
var weightedSum = ( optFormula  |  |  logic . weightedSum ( costTerms , costWeights ) ) ; var progress:==:options & & options . progress ;
var fs = require ( ' then - fs ' ) ; var path:==:require ( ' path ' ) ;
var sourceRange = traceur . util . sourceRange ; var token:==:traceur . syntax . token ;
var keys = o . keys . slice ( 0 ) ; var keypad:==:this . _ keypad ;
var createIdentifierToken = parseTreeFactory . createIdentifierToken ; var createMemberExpression:==:parseTreeFactory . createMemberExpression ;
var context = vnode . context ; var componentInstance:==:vnode . componentInstance ;
var reader = this . reader ; var dataViewCategorical:==:this . dataViewCategorical ;
var lastIdealStyle = _ state . lastIdealStyle ; var lastIdealVelocity:==:_ state . lastIdealVelocity ;
var clone = iframe . cloneNode ( ) ; var url:==:clone . getAttribute ( ' data - url ' ) ;
var options = opt_options ? opt_options : ; var className:==:options . className !    undefined ? options . className : ' ol - scale - line ' ;
var a = require ( ' a ' ) ; var b:==:require ( ' b ' ) ;
var from = grid . getCellNodeBox ( range . fromRow , range . fromCell ) ; var to:==:grid . getCellNodeBox ( range . toRow , range . toCell ) ;
var msg = ' somemsg ' ; var opt:==:' opt ' : ' optopt ' ;
var delimiter = typeof options . delimiter = = = ' undefined ' ? defaults . delimiter : options . delimiter ; var strictNullHandling:==:typeof options . strictNullHandling      ' boolean ' ? options . strictNullHandling : defaults . strictNullHandling ;
var l2 = _ l2 ; var l1:==:_ l1 ;
var assert = require ( ' assert ' ) ; var uid:==:require ( ' uid2 ' ) ;
var rimraf = require ( ' rimraf ' ) ; var panini:==:require ( ' panini ' ) ;
var cssmin = require ( ' gulp - cssmin ' ) ; var del:==:require ( ' del ' ) ;
var stride = data . stride ; var offset:==:geometryAttribute . offset ;
var body = this . body ; var constructorBody:==:this . constructorBody    t . blockStatement ( [ ] ) ;
var shapes = powerbi . visuals . shapes ; var svgUtil:==:powerbi . visuals . svgUtil ;
var cellCount = _ props3 . cellCount ; var cellLayoutManager:==:_ props3 . cellLayoutManager ;
var width = _ props7 . width ; var scrollbarSize:==:this . _ scrollbarSize ;
var binding = process . binding ( ' fs ' ) ; var constants:==:process . binding ( ' constants ' ) ;
var i = this . injectorStrategy ; var p:==:i . protoStrategy ;
var inherit = _ dereq _ ( ' component - inherit ' ) ; var debug:==:_ dereq _ ( ' debug ' ) ( ' engine . io - client : polling ' ) ;
var enqueueMutation = scope . enqueueMutation ; var mixin:==:scope . mixin ;
var node = _ ref2 . node ; var prop:==:node . property ;
var assertion = config . assertions [ i ] ; var li:==:document . createElement ( ' li ' ) ;
var obj = object  |  |  ; var config:==:configs [ type ] ;
var err = test . err ; var message:==:err . message  |  |  '' ;
var styleSpec = options . styleSpec ; var value:==:options . value ;
var r = parseInt ( matches [ 1 ] ) - 1 ; var c:==:parseInt ( matches [ 2 ] ) - 1 ;
var bottom = Math . min ( rect . bottom * zoomFactor - this . _ margins . bottom , bodyRect . bottom * zoomFactor ) ; var right:==:math . min ( rect . right * zoomFactor - this . _ margins . right , bodyRect . right * zoomFactor ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var expect:==:require ( ' chai ' ) . expect ;
var start = location . pos_start ; var end:==:location . pos_end ;
var key = relationship . key ; var belongsTo:==:snapshot . belongsTo ( key ) ;
var unsafeUnwrap = scope . unsafeUnwrap ; var enqueueMutation:==:scope . enqueueMutation ;
var format = definition . format ; var xml:==:definition . xml  |  |  ;
var axisHelper = powerbi . visuals . axisHelper ; var dataViewObjects:==:powerbi . dataViewObjects ;
var bind = declBind [ bindIndex ] ; var dest:==:bind . destination ;
var deepOrange900 = exports . deepOrange900 = ' # bf360c ' ; var deepOrangea100:==:exports . deepOrangea100    ' # ff9e80 ' ;
var option = document . createElement ( ' option ' ) ; var streamResolution:==:new streamResolutionHelper ( properties ) ;
var baseTexture = texture . baseTexture ; var frame:==:texture . frame ;
var service = req . service ; var operations:==:req . service . api . operations  |  |  ;
var app = this . app ; var replacer:==:app . get ( ' json replacer ' ) ;
var sources = this . sources ; var len:==:sources . length ;
var abs = Math . abs , floor = Math . floor , sqrt = Math . sqrt , atan2 = Math . atan2 ; var PI:==:Math . PI ;
var start = e . data . range . start ; var end:==:e . data . range . end ;
var data = imageData . data ; var l:==:data . length ;
var w = width * . 9 ; var h:==:height * . 9 ;
var y = this . y ; var cos:==:Math . cos ( radians ) ;
var lineNumber = debuggerModelLocation . lineNumber - ( script . isInlineScriptWithSourceurl ( ) ? script . lineOffset : 0 ) ; var columnNumber:==:debuggerModelLocation . columnNumber  |  |  0 ;
var createLegend = powerbi . visuals . createLegend ; var tooltipManager:==:powerbi . visuals . tooltipManager ;
var stRotation = rectangle . stRotation ; var rotation:==:rectangle . rotation ;
var tabs = $ . tabs . tabs ; var panel:==:$ ( ' # ' + panelId ) ;
var asyncState = traceur . codegeneration . generator . asyncState ; var endState:==:traceur . codegeneration . generator . endState ;
var channel = ' test channel ' ; var message:==:new Buffer ( ' test message ' ) ;
var proximityAppsController = _ appJsControllersProximityAppsController [ ' default ' ] ; var shareController:==:_ appJsControllersShareController [ ' default ' ] ;
var c = rejectSoon ( ' rejected - c ' , 10 ) ; var d:==:fulfillSoon ( ' d ' , 20 ) ;
var p3 = triangleNode . getAttribute ( ' p3 ' ) ; var pid:==:triangleNode . getAttribute ( ' pid ' ) ;
var children = this . _ element . children ; var len:==:children . length ;
var describe = test . describe ; var it:==:test . it ;
var isCaseSensitive = this . lastProperty . parentType . metadataStore . localQueryComparisonOptions . isCaseSensitive ; var propertyPath:==:this . propertyPath ;
var lightGreen800 = exports . lightGreen800 = ' # 558b2f ' ; var lightGreen900:==:exports . lightGreen900    ' # 33691e ' ;
var createObjectLiteralExpression = parseTreeFactory . createObjectLiteralExpression ; var createParameterList:==:parseTreeFactory . createParameterList ;
var annotationList = firepad . annotationList ; var span:==:firepad . span ;
var icon = props . icon ; var label:==:props . label ;
var solver = self . _ solver ; var ignoreUnknownVariables:==:self . _ ignoreUnknownVariables ;
var assert = _ dereq _ ( ' minimalistic - assert ' ) ; var inherits:==:_ dereq _ ( ' inherits ' ) ;
var exportMappingList = traceur . syntax . trees . exportMappingList ; var exportSpecifier:==:traceur . syntax . trees . exportSpecifier ;
var VALID = ' VALID ' ; var INVALID:==:' INVALID ' ;
var chart = me . chart ; var options:==:me . options ;
var http = require ( ' http ' ) ; var error:==:require ( ' http - error ' ) ;
var vel1 = calcRollingFriction_vel1 ; var vel2:==:calcRollingFriction_vel2 ;
var scriptOpenTag = webInspector . concatenatedScriptsContentProvider . scriptOpenTag ; var scriptCloseTag:==:webInspector . concatenatedScriptsContentProvider . scriptCloseTag ;
var twoArgumentPooler = pooledClass . twoArgumentPooler ; var threeArgumentPooler:==:pooledClass . threeArgumentPooler ;
var len = string . length ; var sub:==:getText ( word ) . substr ( 0 , len ) ;
var invalidArgumentError = errors . invalidArgumentError ; var invalidVersionError:==:errors . invalidVersionError ;
var doc = this . win . document ; var div:==:doc . createElement ( ' div ' ) ;
var Emitter = require ( ' events ' ) . eventEmitter ; var repl:==:require ( ' repl ' ) ;
var pointPrimitivesToUpdate = pointPrimitiveCollection . _ pointPrimitivesToUpdate ; var modelMatrix:==:pointPrimitiveCollection . _ modelMatrix ;
var stagger = elementData . stagger ; var maxDuration:==:elementData . maxDuration ;
var elements = params . elements ; var inputs:==:params . inputs ;
var isIOS = utils . device . isIOS ( ) ; var isMobile:==:utils . device . isMobile ( ) ;
var order = layer . _ order ; var next:==:order . next ;
var args = event . data . args ; var maxCallInterval:==:event . data . maxCallInterval !   null ? event . data . maxCallInterval : 2000 ;
var major = new CS . Solver . Step ( stepBaseName + ' _ major ' ) ; var minor:==:new cs . solver . step ( stepBaseName + ' _ minor ' ) ;
var touchRippleOpacity = _ props3 . touchRippleOpacity ; var onBlur:==:_ props3 . onBlur ;
var childNodes = placeMark . childNodes ; var length:==:childNodes . length ;
var Unit = math . type . Unit ; var sum:==:math . sum ;
var width = dataViewObjects . getValue ( objects , mekkoChart . properties [ ' columnBorder ' ] [ ' width ' ] , mekkoChart . defaultSettings . columnBorder . width ) ; var maxWidth:==:mekkoChart . defaultSettings . columnBorder . maxWidth ;
var type = attribute . type ; var bytesPerElement:==:attribute . bytesPerElement ;
var el = this . el ; var uuid:==:el . getObject3d ( ' light ' ) . uuid ;
var FOR_ON_STATEMENT = ' FOR_ON_STATEMENT ' ; var FOR_STATEMENT:==:' FOR_STATEMENT ' ;
var listView = that . listView ; var dataSource:==:that . dataSource ;
var sizeRandomness = options . sizeRandomness ! = = undefined ? options . sizeRandomness : 0 ; var smoothPosition:==:options . smoothPosition !    undefined ? options . smoothPosition : false ;
var webglStub = argv . webglStub ? argv . webglStub : false ; var release:==:argv . release ? argv . release : false ;
var contactEmail = contacts . contactEmail ; var contactPhone:==:contacts . contactPhone ;
var browsers = grunt . option ( ' browsers ' ) ; var libs:==:grunt . option ( ' libs ' ) ;
var w = + width ( ) - stroke ( ) - leftPadding ; var h:==:+ height ( ) - stroke ( ) - bottomPadding ;
var onCompletion = $ parse ( attrs . onCompletion )  |  |  null ; var forceCaret:==:typeof attrs . forceCaret !    ' undefined ' ? true : false ;
var level = portal . options . level ; var team:==:portal . options . team ;
var argv = require ( ' optimist ' ) . argv ; var glob:==:Promise . promisify ( require ( ' glob ' ) ) ;
var main = window . main = null ; var sender:==:window . sender    null ;
var start1 = bigpatch . start1 ; var start2:==:bigpatch . start2 ;
var bigNumber = math . type . bigNumber ; var denseMatrix:==:math . type . denseMatrix ;
var media = callbacks . media ; var pluginHandle:==:pluginHandles [ handleId ] ;
var fs = require ( ' fs - extra ' ) ; var nomnom:==:require ( ' nomnom ' ) ;
var paddingTop = options . paddingTop ; var paddingBottom:==:options . paddingBottom ;
var data = self . data ; var el:==:self . el ;
var bitangent = bitangentScratch ; var tangent:==:tangentScratch ;
var skinnedNodesIds = model . _ loadResources . skinnedNodesIds ; var length:==:skinnedNodesIds . length ;
var portlet = $ ( event . target ) . parents ( ' . ui - portlet ' ) ; var item:==:$ ( event . target ) . parents ( ' . ui - portlet - item ' ) ;
var Net = global . Net ; var Trainer:==:global . Trainer ;
var message = angular . element ( dom [ 0 ] . querySelector ( ' . md - input - message - animation ' ) ) ; var messages:==:$ $ mdInput . messages . getElement ( message ) ;
var v = this . v ; var w:==:w . v ;
var previous = helpers . previousItem ( this . _ children , index ) ; var next:==:helpers . nextItem ( this . _ children , index ) ;
var impulse1 = this . impulse1 ; var impulse2:==:this . impulse2 ;
var flatCoordinates = this . flatCoordinates ; var stride:==:this . stride ;
var spawn = require ( ' cross - spawn ' ) ; var argv:==:process . argv . slice ( 2 ) ;
var c = Math . cos ( angle ) ; var s:==:Math . sin ( angle ) ;
var hypot = math . hypot ; var bignumber:==:math . bignumber ;
var appConfig = pdfViewerApplication . appConfig ; var script:==:document . createElement ( ' script ' ) ;
var outlineWidth = label . _ outlineWidth ; var style:==:label . _ style ;
var stack = err . stack  |  |  message ; var index:==:message ? stack . indexOf ( message ) : -1 ;
var mixin = scope . mixin ; var registerWrapper:==:scope . registerWrapper ;
var contexts = this . contexts ; var destination:==:this . destination ;
var end = options . end ; var endArgs:==:options . endArgs ;
var chain = options . chain  |  |  deferred . promise ; var toRebase:==:this . filterRebaseCommits ( toRebaseRough , stopSet , options ) ;
var token = tokens [ idx ] ; var order:==:token . order > 1 ? ' start ' ' + token . order + ' ' ' : '' ;
var start = moment ( now ) . clone ( ) . startOf ( ' hour ' ) . toDate ( ) ; var end:==:moment ( now ) . clone ( ) . endOf ( ' hour ' ) . toDate ( ) ;
var os = require ( ' os ' ) ; var uuid:==:require ( ' uuid ' ) ;
var rightCurlyCount = this . rightCurlyCount ; var seenUnicodeChar:==:this . seenUnicodeChar ;
var importBinding = traceur . syntax . trees . importBinding ; var importDeclaration:==:traceur . syntax . trees . importDeclaration ;
var fs = Npm . require ( ' fs ' ) ; var path:==:Npm . require ( ' path ' ) ;
var gradientUtils = powerbi . visuals . gradientUtils ; var colorHelper:==:powerbi . visuals . colorHelper ;
var mongoose = start . mongoose ; var castError:==:mongoose . schemaType . castError ;
var f8SessionCell = require ( ' f8SessionCell ' ) ; var react:==:require ( ' react ' ) ;
var properties = track . properties ( ) ; var channel:==:track . proxy ( ' properties . channel ' ) ;
var isString = leafletHelpers . isString ; var isObject:==:leafletHelpers . isObject ;
var C = CMD . C ; var L:==:CMD . L ;
var length = updatersWithAttributes . length ; var waitingOnCreate:==:this . waitingOnCreate ;
var characterMetadata = require ( ' characterMetadata ' ) ; var contentStateInlineStyle:==:require ( ' contentStateInlineStyle ' ) ;
var number = this . params . number ; var debounce:==:this . params . debounce ;
var config = shallowCopy ( config ) ; var argv:==:config . argv ;
var _ main = Module [ ' _ main ' ] = asm [ ' _ main ' ] ; var _ memset:==:Module [ ' _ memset ' ]    asm [ ' _ memset ' ] ;
var main = params . main ; var tagdict:==:main . tagdict ;
var minimumBlue = defaultValue ( options . minimumBlue , 0 ) ; var maximumBlue:==:defaultValue ( options . maximumBlue , 1 . 0 ) ;
var setFocusOutsideOfTable = window . setFocusOutsideOfTable ; var fakeGroupRow:==:window . fakeGroupRow ;
var sinon = require ( ' sinon ' ) ; var when:==:require ( ' when ' ) ;
var sourceType = getValue ( options . sourceType , camera . pictureSourceType . camera ) ; var targetWidth:==:getValue ( options . targetWidth , -1 ) ;
var textOperation = firepad . textOperation ; var utils:==:firepad . utils ;
var multiIframeLoadMonitor = goog . require ( ' goog . net . multiIframeLoadMonitor ' ) ; var promise:==:goog . require ( ' goog . promise ' ) ;
var h = p . height ? s . height : 0 ; var width:==:this . parent ? this . parent . width ( ) : ( w + l + r ) ;
var rowCount = _ props . rowCount ; var threshold:==:_ props . threshold ;
var operand = this . transformAny ( tree . operand . operand ) ; var memberExpression:==:this . transformAny ( tree . operand . memberExpression ) ;
var start = util . convert ( item . start , ' Date ' ) . valueOf ( ) ; var end:==:util . convert ( item . end !   undefined ? item . end : item . start , ' date ' ) . valueOf ( ) ;
var request = require ( ' request ' ) ; var mime:==:require ( ' mime ' ) ;
var assert = require ( ' assert ' ) ; var nconf:==:require ( ' nconf ' ) ;
var columnStartIndex = _ ref . columnStartIndex ; var columnStopIndex:==:_ ref . columnStopIndex ;
var $ rootElement = this . $ injector . get ( ' $ rootElement ' ) ; var $ log:==:this . $ injector . get ( ' $ log ' ) ;
var command = command_obj . command ; var len:==:args . length ;
var attributeName = options . attributeName ; var perInstanceAttribute:==:options . perInstanceAttribute ;
var params = options . params , vars = options . vars , callBacks = options . callBacks ; var properties:==:object . append ( height : options . height , width : options . width , options . properties ) ;
var geometry = line . geometry ; var type:==:line . type ;
var merge = require ( ' event - stream ' ) . merge ; var path:==:require ( ' canonical - path ' ) ;
var maximumLevel = options . maximumLevel ; var tilingScheme:==:defined ( options . tilingScheme ) ? options . tilingScheme : new webMercatorTilingScheme ( ellipsoid : options . ellipsoid ) ;
var http   = require ( ' http ' ) ; var connect:==:require ( ' connect ' ) ;
var createMemberExpression = parseTreeFactory . createMemberExpression ; var createMemberLookupExpression:==:parseTreeFactory . createMemberLookupExpression ;
var pid = this . pid . toString ( 16 ) ; var increment:==:this . increment . toString ( 16 ) ;
var ax = axis = = = ' a ' ? carpet . aaxis : carpet . baxis ; var smoothing:==:ax . smoothing ;
var conditionalNode = math . expression . node . conditionalNode ; var operatorNode:==:math . expression . node . operatorNode ;
var scrollElement = this . scrollElement ; var parentElement:==:scrollElement . parentElement ;
var metadataStore = breeze . metadataStore ; var jsonResultsAdapter:==:breeze . jsonResultsAdapter ;
var merge2 = require ( ' merge2 ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var offsetSheary = this . data . offsetSheary * degRadReflect ; var bones:==:this . bones ;
var src = value . src ; var dest:==:value . dest ;
var stateMachine = traceur . syntax . trees . stateMachine ; var switchState:==:traceur . codegeneration . generator . switchState ;
var conversion = this . conversions [ i ] ; var type:==:toConversion & & conversion ? conversion . to : this . types [ i ] ;
var diff = imagediff . diff ( oldImg , newImg ) ; var canvas:==:document . createElement ( ' canvas ' ) ;
var overlayView = app . overlayView ; var overlayTitle:==:app . overlayTitle ;
var y = flyoutRect . top ; var width:==:flyoutRect . width ;
var array = ' array ' ; var date:==:' date ' ;
var expandable = _ props . expandable ; var showExpandableButton:==:_ props . showExpandableButton ;
var menus = imports . menus ; var settings:==:imports . settings ;
var rightWalls = shuffle ( rightWalls ) ; var downWalls:==:shuffle ( downWalls ) ;
var gulp = require ( ' gulp ' ) ; var babel:==:require ( ' gulp - babel ' ) ;
var shadowRoot = scope . wrappers . shadowRoot ; var defineWrapGetter:==:scope . defineWrapGetter ;
var wot = this . wot ; var topOverlay:==:wot . wtOverlays . topOverlay ;
var object = _ dereq _ ( ' object - component ' ) ; var debug:==:_ dereq _ ( ' debug ' ) ( ' socket . io - client : manager ' ) ;
var now = eat . now ( ) ; var length:==:value . length ;
var sqrt = math . sqrt ; var bignumber:==:math . bignumber ;
var dynCall_v = Module [ ' dynCall_v ' ] = asm [ ' dynCall_v ' ] ; var dynCall_viid:==:Module [ ' dynCall_viid ' ]    asm [ ' dynCall_viid ' ] ;
var operand = this . transformAny ( tree . operand . operand ) ; var memberName:==:tree . operand . memberName ;
var activeOpacity = seriesModel . get ( ' activeOpacity ' ) ; var lineStyle:==:seriesModel . getModel ( ' lineStyle . normal ' ) . getLineStyle ( ) ;
var offsetHeight = b . offsetHeight ; var offsetLeft:==:b . offsetLeft ;
var debug = require ( ' debug ' ) ( ' mocha : watch ' ) ; var exists:==:require ( ' fs ' ) . existsSync  |  |  require ( ' path ' ) . existsSync ;
var getDaySegmentContainer = t . getDaySegmentContainer ; var getSlotSegmentContainer:==:t . getSlotSegmentContainer ;
var switchStatement = traceur . syntax . trees . switchStatement ; var throwStatement:==:traceur . syntax . trees . throwStatement ;
var util = require ( ' gulp - util ' ) ; var GITHUB_ACCESS_TOKEN:==:process . env . GITHUB_ACCESS_TOKEN ;
var use = this . _ use ; var iframe:==:this . _ iframe ;
var y = u . y - v . y ; var z:==:u . z - v . z ;
var isEventResizable = t . isEventResizable ; var eventEnd:==:t . eventEnd ;
var targetWidth = getValue ( options . targetWidth , -1 ) ; var targetHeight:==:getValue ( options . targetHeight , -1 ) ;
var View = require ( ' View ' ) ; var styleSheet:==:require ( ' styleSheet ' ) ;
var geometry = this . geometry ; var matrixWorld:==:this . matrixWorld ;
var View = _ fxosMvcDistMvc . view ; var deviceNameService:==:_ appJsServicesDeviceNameService [ ' default ' ] ;
var isAbsolute = $ traceurRuntime . isAbsolute ; var removeDotSegments:==:$ traceurRuntime . removeDotSegments ;
var externals = taffy ( members . externals ) ; var interfaces:==:taffy ( members . interfaces ) ;
var children = lastState . children ; var total:==:lastState . total ;
var PickerIOS = require ( ' PickerIOS ' ) ; var pickerAndroid:==:require ( ' pickerAndroid ' ) ;
var selectionIdBuilder = powerbi . visuals . selectionIdBuilder ; var axisHelper:==:powerbi . visuals . axisHelper ;
var allow_minimize = frag . getAttribute ( ' data - allow_minimize ' ) ; var allow_close:==:frag . getAttribute ( ' data - allow_close ' ) ;
var runPostSets = module [ ' runPostSets ' ] = asm [ ' runPostSets ' ] ; var dyncall_viiiii:==:module [ ' dyncall_viiiii ' ]    asm [ ' dyncall_viiiii ' ] ;
var chai = require ( ' chai ' ) ; var path:==:require ( ' path ' ) ;
var lightBlue50 = exports . lightBlue50 = ' # e1f5fe ' ; var lightBlue100:==:exports . lightBlue100    ' # b3e5fc ' ;
var sources = fs . sources ; var length:==:sources . length ;
var to = ( opts & & typeof opts . to ! = ' undefined ' ) ? opts . to : that . to ; var target:==:( opts & & typeof opts . target !   ' undefined ' ) ? opts . target : null ;
var getBody = dom . getBody ; var rangesEqual:==:domRange . rangesEqual ;
var colors = this . getOption ( ' colors ' ) ; var visibility:==:this . visibility ( ) ;
var mkdirp = require ( ' mkdirp ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var dx1 = Math . max ( 0 , Math . min ( bounds . width , parseFloat ( mxUtils . getValue ( this . state . style , ' dx1 ' , this . dx1 ) ) ) ) ; var dy1:==:math . max ( 0 , math . min ( 1 , parseFloat ( mxUtils . getValue ( this . state . style , ' dy1 ' , this . dy1 ) ) ) ) ;
var nomnom = require ( ' nomnom ' ) ; var log:==:closure . log ;
var format = document . getElementById ( ' format ' ) . value ; var resolution:==:document . getElementById ( ' resolution ' ) . value ;
var source = this . source ; var filename:==:options . filename ;
var table   = entry . table ; var linbits:==:entry . linbits ;
var _ saveSetjmp = module [ ' _ saveSetjmp ' ] = asm [ ' _ saveSetjmp ' ] ; var _ exitPrediction:==:module [ ' _ exitPrediction ' ]    asm [ ' _ exitPrediction ' ] ;
var layout = imports . layout ; var tree:==:imports . tree ;
var codingLine = this . codingLine ; var columns:==:this . columns ;
var display = cm . display , sel = cm . view . sel ; var pos:==:posFromMouse ( cm , e ) , scrollPos    display . scroller . scrollTop ;
var name = this . name ; var labelContainer:==:this . labelContainer ;
var menuItem = nw . menuItem ; var tray:==:nw . tray ;
var WITH_STATEMENT = ' WITH_STATEMENT ' ; var YIELD_EXPRESSION:==:' YIELD_EXPRESSION ' ;
var logic = require ( ' logic ' ) ; var scope:==:logic . scope ( ' browserBox ' ) ;
var translucent = defaultValue ( options . translucent , true ) ; var aboveGround:==:defaultValue ( options . aboveGround , false ) ;
var keys = eventData . keys ; var x:==:eventData . x ;
var mode = collection . _ mode ; var modelMatrix:==:collection . _ modelMatrix ;
var closeTop = polygonGeometry . _ closeTop ; var closeBottom:==:polygonGeometry . _ closeBottom ;
var clientLeft = el . clientLeft  |  |  body . clientLeft  |  |  0 ; var scrollTop:==:window . pageyOffset  |  |  el . scrollTop ;
var coord = this . _ _ coord  |  |  [ 0 , 0 , 0 , 0 ] ; var co:==:this . drawVars . co ;
var OBJECT = C . OBJECT = 0x81 ; var ARRAY:==:C . ARRAY    0x82 ;
var dy3 = mxUtils . getValue ( this . style , ' dy3 ' , ' 0 ' ) ; var dx4:==:mxUtils . getValue ( this . style , ' dx4 ' , ' 0 ' ) ;
var file = options . file = path . normalize ( path . join ( extendDirectory , options . file ) ) ; var dir:==:path . dirname ( file ) ;
var cors = require ( ' cors ' ) ; var async:==:require ( ' async ' ) ;
var blue700 = exports . blue700 = ' # 1976d2 ' ; var blue800:==:exports . blue800    ' # 1565c0 ' ;
var itemIndex = elementData . itemIndex ; var stagger:==:elementData . stagger ;
var blurKernel = _ blurKernel ; var bkHalf:==:_ bkHalf ;
var min = utils . number ( filter . value . min ) ; var max:==:utils . number ( filter . value . max ) ;
var postData   = method . postData ; var toolbar:==:method . toolbar ;
var isAssociative = util . isAssociative ; var flatten:==:util . flatten ;
var position = this . _ positionHandle . resolve ( ) ; var uiSourceCode:==:webInspector . workspace . project ( this . _ projectId ) . uiSourceCode ( this . _ path ) ;
var yellow200 = exports . yellow200 = ' # fff59d ' ; var yellow300:==:exports . yellow300    ' # fff176 ' ;
var multiSurface = context [ ' multiSurface ' ] ; var surface:==:context [ ' surface ' ] ;
var tick = require ( ' next - tick ' ) ; var when:==:require ( ' when ' ) ;
var teal800 = exports . teal800 = ' # 00695c ' ; var teal900:==:exports . teal900    ' # 004d40 ' ;
var coffeelint = require ( ' gulp - coffeelint ' ) ; var plumber:==:require ( ' gulp - plumber ' ) ;
var Tag = hexo . model ( ' Tag ' ) ; var Post:==:hexo . model ( ' Post ' ) ;
var gl = this . gl ; var textureIndex:==:sprite . texture . baseTexture . textureIndex ;
var br = goog . html . testing . newSafeHtmlForTest ( ' < br > ' ) ; var html:==:goog . html . safeHtml . htmlEscape ( ' hello ' ) ;
var marked = require ( ' marked ' ) ; var path:==:require ( ' path ' ) ;
var loc = win . location . href ; var index:==:loc . indexOf ( ' # ' ) ;
var mode = args . mode  |  |  Constants . RESERVED . CLUSTER ; var masterha:==:args . masterha  |  |  ' false ' ;
var type = elem . type ; var nodeName:==:elem . nodeName ;
var menus = imports . menus ; var save:==:imports . save ;
var router = root . $ router ; var route:==:root . $ route ;
var srcFiles = _ . pluck ( modules , ' srcFiles ' ) ; var tpljsFiles:==:_ . pluck ( modules , ' tpljsFiles ' ) ;
var importDeclaration = traceur . syntax . trees . importDeclaration ; var labelledStatement:==:traceur . syntax . trees . labelledStatement ;
var graph = this . graph ; var min:==:Math . min , max    Math . max ;
var Data = hexo . model ( ' Data ' ) ; var route:==:hexo . route ;
var merge = require ( ' merge ' ) ; var requireNativeComponent:==:require ( ' requireNativeComponent ' ) ;
var View = require ( ' View ' ) ; var Heading1 , Paragraph:==:require ( ' f8Text ' ) ;
var git = require ( ' gulp - git ' ) ; var gulp:==:require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ;
var uint32ArrayView = sharedUtil . uint32ArrayView ; var util:==:sharedUtil . util ;
var domRenderer = hilo . domRenderer ; var webglRenderer:==:hilo . webglRenderer ;
var col = position . col ; var row:==:position . row ;
var httpRequest = req . httpRequest  |  |  ; var headers:==:httpRequest . headers ;
var request = require ( ' request ' ) ; var glob:==:require ( ' glob ' ) ;
var url = require ( ' url ' ) ; var extend:==:require ( ' util ' ) . _ extend ;
var symbolType = effectCfg . symbolType ; var color:==:effectCfg . color ;
var res = resMap [ i d ]  |  |  ; var pkg:==:res . pkg ;
var backdrop = new Animation ( ele . querySelector ( ' ion - backdrop ' ) ) ; var wrapper:==:new animation ( ele . querySelector ( ' . action - sheet - wrapper ' ) ) ;
var skip = this . newBlock ( type + ' comp skip ' ) ; var anchor:==:this . newBlock ( type + ' comp anchor ' ) ;
var when = require ( ' when ' ) ; var clone:==:require ( ' clone ' ) ;
var name = options . name  |  |  ' template ' ; var filename:==:options . filename ? JSON . stringify ( options . filename ) : ' undefined ' ;
var http   = require ( ' http ' ) ; var https:==:require ( ' https ' ) ;
var answer = get_answer ( ) ; var fuzz_answer:==:get_fuzz_answer ( ) ;
var item = listbox2 . items ( ) . eq ( 0 ) ; var dataItem:==:listbox2 . dataItem ( item ) ;
var Landing = reporters . Landing ; var Base:==:reporters . Base ;
var width = current . owidth ; var height:==:current . oheight ;
var names = namesAndValues . names , values = namesAndValues . values ; var length:==:names . length ;
var point = points [ i ] ; var xval:==:point . xval ;
var m = matrices [ 0 ] ; var s:==:cs_sqr ( 2 , m , false ) ;
var red = Color . floatToByte ( color . red ) ; var green:==:color . floatToByte ( color . green ) ;
var editor = this . editor ; var session:==:editor . session ;
var settings = imports . settings ; var Datagrid:==:imports . Datagrid ;
var appearClass = ref . appearClass ; var appearToClass:==:ref . appearToClass ;
var lightGreen200 = exports . lightGreen200 = ' # c5e1a5 ' ; var lightGreen300:==:exports . lightGreen300    ' # aed581 ' ;
var scrollable = that . options . scrollable ; var distance:==:$ . isNumeric ( scrollable . distance ) ? scrollable . distance : scrollspeed ;
var expandMemberExpression = traceur . codegeneration . expandMemberExpression ; var createArgumentList:==:parseTreeFactory . createArgumentList ;
var Router = require ( ' express ' ) . Router ; var url:==:require ( ' url ' ) ;
var consequent = node . consequent ? convert ( [ node . consequent ] ) : scope . buildUndefinedNode ( ) ; var alternate:==:node . alternate ? convert ( [ node . alternate ] ) : scope . buildUndefinedNode ( ) ;
var db = this . _ db ; var transaction:==:db . transaction ( ' search_engines ' ) ;
var z = this . x * q1 . y - this . y * q1 . x + this . z * q1 . w + this . w * q1 . z ; var w:==:-this . x * q1 . x - this . y * q1 . y - this . z * q1 . z + this . w * q1 . w ;
var formatDate = fc . formatDate ; var parseiso8601:==:fc . parseiso8601 ;
var y = plane . normal . y ; var z:==:plane . normal . z ;
var name = $ ( ' # name ' ) . val ( ) ; var score:==:$ ( ' # score ' ) . val ( ) ;
var Node = mod . Node ; var avlTree:==:mod . avlTree ;
var ui = kendo . ui ; var Widget:==:ui . Widget ;
var skip = this . newBlock ( ' list gen skip ' ) ; var anchor:==:this . newBlock ( ' list gen anchor ' ) ;
var release = require ( ' gulp - github - release ' ) ; var sequence:==:require ( ' run - sequence ' ) ;
var PROPERTY_METHOD_ASSIGNMENT = ' PROPERTY_METHOD_ASSIGNMENT ' ; var PROPERTY_NAME_ASSIGNMENT:==:' PROPERTY_NAME_ASSIGNMENT ' ;
var exceptFunctions = this . _ exceptFunctions ; var checkOpen:==:this . _ checkOpen ;
var axisLine = this . get ( ' axisLine ' ) ; var axisTick:==:this . get ( ' axisTick ' ) ;
var system = this . system ; var hash:==:system . hash ( data ) ;
var global = goog . global ; var frame:==:window . frames [ ' frame ' ] ;
var security = securityDefinitions [ key ] ; var type:==:security . type ;
var file = current . document . file ; var paneId:==:current . _ paneId ;
var s = String ( string ) ; var n:==:s . length ;
var collection = db . collection ( ' simple_document_insert_with_function_safe_with_generators ' ) ; var o:==:configuration . writeConcernMax ( ) ;
var Utf8 = C_enc . Utf8 ; var Base64:==:C_enc . Base64 ;
var period = state . period ; var subscriber:==:state . subscriber ;
var estimate = typeof opts . estimate = = = ' number ' ? opts . estimate : null ; var progress:==:typeof opts . progress      ' function ' ? opts . progress : null ;
var area = coverageAreas [ areaIndex ] ; var bbox:==:area . bbox ;
var getTreeScope = scope . getTreeScope ; var unsafeUnwrap:==:scope . unsafeUnwrap ;
var castShadows = shadowMode . castShadows ( model . _ shadows ) ; var receiveShadows:==:shadowMode . receiveShadows ( model . _ shadows ) ;
var close = options . close  |  |  false ; var output:==:options . output  |  |  false ;
var list = this . list ; var req:==:this . req ;
var bar = docSet . getByLongname ( ' bar ' ) [ 0 ] ; var baz:==:docSet . getByLongname ( ' baz ' ) [ 0 ] ;
var mandatory = ( constraints & & constraints . mandatory ) ? constraints . mandatory : null ; var optional:==:( constraints & & constraints . optional ) ? constraints . optional : null ;
var contained2 = document . getElementById ( ' contained2 ' ) ; var not_container:==:document . getElementById ( ' not_container ' ) ;
var y = vertexNode . getAttribute ( ' y ' ) ; var z:==:vertexNode . getAttribute ( ' z ' ) ;
var getBounds = _ tetherBase$Utils . getBounds ; var updateClasses:==:_ tetherBase$Utils . updateClasses ;
var ui = imports . ui ; var metrics:==:imports . metrics ;
var debug = require ( ' debug ' ) ( ' analytics : entity ' ) ; var defaults:==:require ( ' defaults ' ) ;
var jsunit = goog . require ( ' goog . testing . jsunit ' ) ; var mockmatchers:==:goog . require ( ' goog . testing . mockmatchers ' ) ;
var spawn = require ( ' child_process ' ) . spawn ; var join:==:require ( ' path ' ) . join ;
var constrainedAxis = cartesian3 . normalize ( camera . constrainedAxis , rotateVertScratcha ) ; var dot:==:cartesian3 . dot ( p , constrainedAxis ) ;
var s = % createPrivateSymbol ( ' s ' ) ; var s1:==:% createPrivateSymbol ( ' s1 ' ) ;
var crypto = require ( ' crypto ' ) ; var util:==:require ( ' util ' ) ;
var div = document . createElement ( ' div ' ) ; var assets:==:document . createElement ( ' a - assets ' ) ;
var displayInformation = windows . graphics . display . displayInformation ; var displayOrientations:==:windows . graphics . display . displayOrientations ;
var data = err . data ; var textStatus:==:err . textStatus ;
var g = Math . round ( Garden . random ( gmin , gmax ) ) ; var b:==:Math . round ( Garden . random ( bmin , bmax ) ) ;
var removed = collection . _ removedEntities ; var changed:==:collection . _ changedEntities ;
var log = this . log ; var theme:==:this . theme ;
var output = logrotate ( file : outputLogFilePath , size : ' 1 m ' , keep : 3 , compress : true ) ; var silent:==:nconf . get ( ' silent ' )      ' false ' ? false : nconf . get ( ' silent ' ) !    false ;
var assert = require ( ' chai ' ) . assert ; var mkdirp:==:require ( ' mkdirp ' ) ;
var gulp = require ( ' gulp ' ) ; var mocha:==:require ( ' gulp - spawn - mocha ' ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var inherits:==:require ( ' util ' ) . inherits ;
var magnitudeSquared = cartesian3 . magnitudeSquared ( scaledSpacePosition ) ; var magnitude:==:math . sqrt ( magnitudeSquared ) ;
var tryState = traceur . codegeneration . generator . tryState ; var yieldState:==:traceur . codegeneration . generator . yieldState ;
var unsharpAmount = options . unsharpAmount = = = undefined ? 0 : ( options . unsharpAmount | 0 ) ; var unsharpThreshold:==:options . unsharpThreshold      undefined ? 0 : ( options . unsharpThreshold | 0 ) ;
var $ mdUtil = this . $ mdUtil ; var $ scope:==:this . $ scope ;
var debug = require ( ' debug ' ) ( ' analytics : group ' ) ; var inherit:==:require ( ' inherit ' ) ;
var hoist_funs = compressor . option ( ' hoist_funs ' ) ; var hoist_vars:==:compressor . option ( ' hoist_vars ' ) ;
var script = document . querySelector ( ' script [ src $ = ' ' + thisFile + ' ' ] ' ) ; var src:==:script . attributes . src . value ;
var fs = imports . fs ; var auth:==:imports . auth ;
var x = Math . min ( rectx1 , prevrectx1 ) ; var y:==:Math . min ( recty1 , prevrecty1 ) ;
var path = require ( ' path ' ) ; var redis:==:config . redis ;
var ELEMENT_GET = traceur . syntax . predefinedName . element_get ; var element_has:==:traceur . syntax . predefinedName . element_has ;
var pkg = pkg  |  |  this . getPackage ( ) ; var requestedVersion:==:this . requestedVersion ;
var createPropertyDescriptor = parseTreeFactory . createPropertyDescriptor ; var createPropertyNameAssignment:==:parseTreeFactory . createPropertyNameAssignment ;
var attribute = attributes [ name ] ; var array:==:attribute . array ;
var frameState = scene . _ frameState ; var boundingVolume:==:command . boundingVolume ;
var reactTreeTraversal = require ( ' reactTreeTraversal ' ) ; var accumulateInto:==:require ( ' accumulateInto ' ) ;
var netUtils = goog . labs . net . webChannel . netUtils ; var webChannelDebug:==:goog . labs . net . webChannel . webChannelDebug ;
var success_message = props . success_message  |  |  ' Update Successfully ! ' ; var fail_message:==:props . fail_message  |  |  ' Error occurred while updating . ' ;
var address = evt . address ; var fileName:==:evt . fileName ;
var cols = dispPos . cols ; var rows:==:dispPos . rows ;
var asyncTransformer = traceur . codegeneration . generator . asyncTransformer ; var createForOfStatement:==:traceur . codegeneration . parseTreeFactory . createForOfStatement ;
var granularity = simplePolylineGeometry . _ granularity ; var ellipsoid:==:simplePolylineGeometry . _ ellipsoid ;
var debug = config . debug ; var silent:==:config . silent ;
var x = 0x345678 ; var len:==:this . v . length ;
var styleSheetPropType = require ( ' styleSheetPropType ' ) ; var view:==:require ( ' view ' ) ;
var isMoment = moment . isMoment ; var isDate:==:require ( ' util ' ) . isDate ;
var attrName = goog . isString ( opt_attrname ) ? opt_attrname : null ; var attrValue:==:goog . isString ( opt_attrvalue ) ? opt_attrvalue : null ;
var inner = ' SuperCallInEvalClass_inner_eval ' ; var outer:==:' SuperCallInEvalClass_outer_eval ' ;
var Helpers = leafletHelpers ; var isString:==:leafletHelpers . isString ;
var torrent = that . model . get ( ' torrent ' ) ; var file:==:parseInt ( $ ( e . currentTarget ) . attr ( ' data - file ' ) ) ;
var dynCall_viiiiiiiiiiiii = Module [ ' dynCall_viiiiiiiiiiiii ' ] = asm [ ' dynCall_viiiiiiiiiiiii ' ] ; var dynCall_di:==:Module [ ' dynCall_di ' ]    asm [ ' dynCall_di ' ] ;
var resolution = frameState . viewState . resolution ; var rotation:==:frameState . viewState . rotation ;
var enterLeaveEventPlugin = require ( ' enterLeaveEventPlugin ' ) ; var eventPluginHub:==:require ( ' eventPluginHub ' ) ;
var ifClause = this . ensureTransformed _ ( result . ifClause ) ; var elseClause:==:this . ensureTransformed _ ( result . elseClause ) ;
var frameObject = frameObjectList [ i ] ; var frame:==:data3Parser . parseTransformFrame ( frameObject , null , frameRate ) ;
var sc = frame . scale*this . _ scale ; var rect:==:frame . rect ;
var dx = Math . max ( 0 , Math . min ( bounds . width - 10 , parseFloat ( mxUtils . getValue ( this . state . style , ' dx ' , this . dx ) ) ) ) ; var dy:==:math . max ( 0 , math . min ( 1 , parseFloat ( mxUtils . getValue ( this . state . style , ' dy ' , this . dy ) ) ) ) ;
var editor = mouseHandler . editor ; var gutter:==:editor . renderer . $ gutterLayer ;
var sinon   = require ( ' sinon ' ) ; var fs:==:require ( ' fs ' ) ;
var async = require ( ' async ' ) ; var client:==:marionette . client ( ) ;
var frontFunction = stencilTest . frontFunction ; var backFunction:==:stencilTest . backFunction ;
var UNSUPPORTED_FEATURES = sharedUtil . unsupported_features ; var invalidpdfException:==:sharedUtil . invalidpdfException ;
var reactInstrumentation = require ( ' reactInstrumentation ' ) ; var reactReconciler:==:require ( ' reactReconciler ' ) ;
var restitution = options . restitution ; var n:==:this . normal ;
var barGap = seriesModel . get ( ' barGap ' ) ; var barCategoryGap:==:seriesModel . get ( ' barCategoryGap ' ) ;
var cutEdge = cutEdges ; var i:==:this . vertices . indexOf ( cutEdge [ 0 ] ) ;
var last_field = this . last_field ; var last_search:==:this . last_search ;
var categorical = dataView . categorical ; var categories:==:categorical . categories  |  |  [ ] ;
var editor = e . editor ; var range:==:new CKEDITOR . dom . range ( editor . document ) ;
var async = require ( ' async ' ) ; var prompt:==:require ( ' prompt ' ) ;
var styleSheet = require ( ' styleSheet ' ) ; var styleSheetPropType:==:require ( ' styleSheetPropType ' ) ;
var contextLabels = this . contextLabels ; var neighborsSignificance:==:this . neighborsSignificance ;
var collate = pouchCollate . collate ; var normalizeKey:==:pouchCollate . normalizeKey ;
var tokenType = traceur . syntax . tokenType ; var class_declaration:==:parseTreeType . class_declaration ;
var models = _ _ alloyId6 . models ; var len:==:models . length ;
var save = imports . save ; var format:==:imports . format ;
var IS_TEST_MODE = ! ! process . env . IS_TEST_MODE ; var Emitter:==:require ( ' events ' ) . eventEmitter ;
var test = require ( ' tap ' ) . test ; var sys:==:require ( ' sys ' ) ;
var colors = this . colors = params . get ( ' Colors ' )  |  |  1 ; var bits:==:this . bits    params . get ( ' bitsPerComponent ' )  |  |  8 ;
var lat = latlong [ 0 ] ; var lon:==:latlong [ 1 ] ;
var user = this . user ? this . user . get ( ' login ' ) : this . repo . get ( ' owner ' ) . login ; var permissions:==:this . repo ? this . repo . get ( ' permissions ' ) : undefined ;
var data = this . data ; var nodes:==:this . _ nodes ;
var Selection = scope . wrappers . Selection ; var mixin:==:scope . mixin ;
var tokenType = traceur . syntax . tokenType ; var assert:==:traceur . assert ;
var dom = goog . dom . getDomHelper ( root ) ; var e:==:dom . getElement ( target ) ;
var intrinsicFuncs = wordRegexp ( intrinsicFuncsWords ) ; var command:==:wordRegexp ( commandKeywords ) ;
var a = a : 100 , b : 100 ; var b:==:b : 200 , c : 200 ;
var key = this . parseProperty ( pair , ' * ' , ' key ' ) ; var styleUrl:==:this . parseProperty ( pair , ' * ' , ' styleUrl ' ) ;
var badRequestError = errors . badRequestError ; var internalError:==:errors . internalError ;
var errorText = _ props2 . errorText ; var floatingLabelFixed:==:_ props2 . floatingLabelFixed ;
var lime100 = exports . lime100 = ' # f0f4c3 ' ; var lime200:==:exports . lime200    ' # e6ee9c ' ;
var req = requestState . req ; var res:==:requestState . res ;
var accumulate = require ( ' accumulate ' ) ; var isStartish:==:eventPluginUtils . isStartish ;
var masterCallback = jasmine . createSpy ( ' masterCallback ' ) ; var topCallback:==:jasmine . createSpy ( ' topCallback ' ) ;
var path    = require ( ' path ' ) ; var join:==:require ( ' path ' ) . join ;
var propertyTypes = propertyTypes . propertyTypes ; var register:==:propertyTypes . registerPropertyType ;
var messageId = message . messageId ; var cdmaServiceCategory:==:message . cdmaServiceCategory ;
var util = imports . util ; var menus:==:imports . menus ;
var DONE = 29 ; var BAD:==:30 ;
var st = ( typeof this . options . start = = ' string ' ? this . options . start : $ ( this . options . start ) . val ( ) ) ; var en:==:( typeof this . options . end     ' string ' ? this . options . end : $ ( this . options . end ) . val ( ) ) ;
var leaveCancelled = ref . leaveCancelled ; var delayLeave:==:ref . delayLeave ;
var skinIndices = geometry . skinIndices ; var skinWeights:==:geometry . skinWeights ;
var contactManager = contacts . contactManager ; var fullContactCardOptions:==:contacts . fullContactCardOptions ;
var t = matchers [ j ] ; var m:==:path . match ( t . re ) ;
var y = gridGeo . vertices [ i ] . position . y ; var z:==:gridGeo . vertices [ i ] . position . z ;
var RLE = goog . i18n . bidi . Format . RLE ; var PDF:==:goog . i18n . bidi . Format . PDF ;
var dynCall_iiiiii = Module [ ' dynCall_iiiiii ' ] = asm [ ' dynCall_iiiiii ' ] ; var dynCall_dii:==:Module [ ' dynCall_dii ' ]    asm [ ' dynCall_dii ' ] ;
var key = this . props . node . get ( ' key ' ) ; var ref:==:this . props . node . get ( ' ref ' ) ;
var dx = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx ' , this . dx ) ) ) ) ; var dy:==:math . max ( 0 , math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' dy ' , this . dy ) ) ) ) ;
var controllerHost = this . _ controllerHost ; var group:==:this . group ;
var normal = intersectTrimesh_normal ; var triangles:==:intersectTrimesh_triangles ;
var isContentEditableFalse = nodeType . isContentEditableFalse ; var getSelectedNode:==:rangeUtils . getSelectedNode ;
var command = commandList [ i ] ; var pass:==:command . pass ;
var sourceProcessor = data . sourceProcessor ; var resourceSlots:==:data . resourceSlots ;
var xAxisModel = foundCpts . xAxisModel ; var yAxisModel:==:foundCpts . yAxisModel ;
var position = this . _ position ; var isExcepted:==:this . _ isExcepted ;
var instantiateReactComponent = require ( ' instantiateReactComponent ' ) ; var shouldUpdateReactComponent:==:require ( ' shouldUpdateReactComponent ' ) ;
var assert = require ( ' assert ' ) ; var socks:==:require ( ' socksv5 ' ) ;
var lazypipe = require ( ' lazypipe ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var minDistIntersect = intersectconvex_mindistintersect ; var faceList:==:( options & & options . faceList )  |  |  null ;
var arraySet = _ _ webpack_require _ _ ( 282 ) . arraySet ; var mappingList:==:_ _ webpack_require _ _ ( 606 ) . mappingList ;
var iconClassNameLeft = _ props . iconClassNameLeft ; var iconClassNameRight:==:_ props . iconClassNameRight ;
var pixelConverter = jsCommon . pixelConverter ; var polygon:==:visuals . shapes . polygon ;
var samsam = require ( ' samsam ' ) ; var assert:==:referee . assert ;
var c9 = imports . c9 ; var vfs:==:imports . vfs ;
var cubicExtrema = curve . cubicExtrema ; var cubicAt:==:curve . cubicAt ;
var expressionIn = opt_expressionin  |  |  expression . normal ; var initializer:==:opt_initializer  |  |  destructuringInitializer . required ;
var path = tree . paths [ i ] ; var type:==:path . type ;
var connecting = ' connecting ' ; var disconnecting:==:' disconnecting ' ;
var config = configService . getSync ( ) . wallet . settings ; var unitName:==:config . unitName ;
var r = this . rgb . r ; var g:==:this . rgb . g ;
var diff = macd . diff ; var signal:==:macd . signal . result ;
var elements = this . elements ; var type:==:evt . detail . promptType  |  |  evt . detail . type ;
var getSlotSegmentContainer = t . getSlotSegmentContainer ; var getHoverListener:==:t . getHoverListener ;
var calendar = owners . calendar ; var account:==:owners . account ;
var root = tree . root ; var obj:==:this . obj ;
var electron = require ( ' electron ' ) ; var browserWindow:==:electron . browserWindow ;
var compare = Caml_string . caml_string_compare ; var fill:==:Bytes . fill ;
var yieldState = traceur . codegeneration . generator . yieldState ; var stateMachine:==:traceur . syntax . trees . stateMachine ;
var Comment = db . model ( ' gh4073_1 ' , commentSchema ) ; var blogPost:==:db . model ( ' gh4073_2 ' , blogPostSchema ) ;
var b = parseInt ( req . params . b , 10 ) ; var format:==:req . params . format ;
var session = editor . session ; var path:==:session . c9doc . tab . path ;
var docId = data . docId ; var newLineChar:==:data . newLineChar  |  |  ' ' ;
var sum32_5 = utils . sum32_5 ; var rotr64_hi:==:utils . rotr64_hi ;
var assert = sharedUtil . assert ; var createPromiseCapability:==:sharedUtil . createPromiseCapability ;
var samples = this . samples ; var timestamps:==:this . timestamps ;
var rimraf = require ( ' rimraf ' ) ; var fs:==:require ( ' fs ' ) ;
var map2 = createMap ( ' map2 ' ) ; var map3:==:createMap ( ' map3 ' ) ;
var silent = options & & options . silent ; var parent:==:this . el . parentNode ;
var food = _ getFormattedItemReference ( ' items . food ' , _ . keys ( content . food ) , ' numeric quantity ' ) ; var eggs:==:_ getFormattedItemReference ( ' items . eggs ' , _ . keys ( content . eggs ) , ' numeric quantity ' ) ;
var cx = pcx + dot * dirx ; var cy:==:pcy + dot * diry ;
var brushOption = cover . _ _ brushOption ; var transformable:==:brushOption . transformable ;
var isFunction = angular . isFunction ; var isObject:==:angular . isObject ;
var pathForPositionAsync = exports . pathForPositionAsync = promisifySyncFn ( pathForPosition ) ; var positionRangeForPathAsync:==:exports . positionRangeForPathAsync    promisifySyncFn ( positionRangeForPath ) ;
var promise = element . promise ( ) ; var expect:==:chai . expect ( promise ) ;
var each = zrUtil . each ; var indexOf:==:zrUtil . indexOf ;
var black = exports . black = ' # 000000 ' ; var white:==:exports . white    ' # ffffff ' ;
var elem = _ ref . elem ; var key:==:_ ref . key ;
var carbs = treatment . carbs  |  |  CR ; var insulin:==:treatment . insulin  |  |  1 ;
var dimensions = coordSys . dimensions ; var option:==:seriesModel . option ;
var executes = options . executes ; var db:==:dbmap [ dbname ] ;
var element = that . element ; var dataItem:==:that . listView . dataItemByIndex ( that . listView . getElementIndex ( item ) ) ;
var itemHeight = legendModel . get ( ' itemHeight ' ) ; var inactiveColor:==:legendModel . get ( ' inactiveColor ' ) ;
var getMeasureIndexOfRole = powerbi . data . dataRoleHelper . getMeasureIndexOfRole ; var registerStandardInteractivityHandlers:==:powerbi . visuals . interactivityUtils . registerStandardInteractivityHandlers ;
var path = require ( ' path ' ) ; var chalk:==:require ( ' chalk ' ) ;
var x = ( textureCoordinates . x * 4095 . 0 )  |  0 ; var y:==:( textureCoordinates . y * 4095 . 0 )  |  0 ;
var limit = obj . limit  |  |  null ; var spring:==:obj . spring  |  |  null ;
var reactNativeGlobalResponderHandler = require ( ' reactNativeGlobalResponderHandler ' ) ; var responderEventPlugin:==:require ( ' responderEventPlugin ' ) ;
var itemTemplate = this . options . itemTemplate  |  |  this . options . template ; var template:==:listOptions . itemTemplate  |  |  itemTemplate  |  |  listOptions . template ;
var key = self . key ; var quote:==:self . quote ;
var maskError = error_createclass ( ' maskError ' , , stack_slice ) ; var maskWarn:==:error_createclass ( ' maskWarn ' , , stack_slice ) ;
var userData = results . userData ; var userSettings:==:results . userSettings ;
var debug = require ( ' debug ' ) ( ' nightmare : actions ' ) ; var sliced:==:require ( ' sliced ' ) ;
var view = typeof options . view ! = ' undefined ' ? options . view : window ; var detail:==:typeof options . detail !   ' undefined ' ? options . detail : 0 ;
var images = model . gltf . images ; var textures:==:model . gltf . textures ;
var Element = scope . wrappers . Element ; var defineGetter:==:scope . defineGetter ;
var resolve = require ( ' path ' ) . resolve ; var send:==:require ( ' send ' ) ;
var orderId = track . orderId ( ) ; var products:==:track . products ( )  |  |  [ ] ;
var Promise = goog . require ( ' goog . Promise ' ) ; var events:==:goog . require ( ' goog . events ' ) ;
var min = version . min ; var max:==:version . max ;
var error = sharedUtil . error ; var stream:==:coreStream . stream ;
var token = tokens [ i ] . toLowerCase ( ) ; var cc:==:token . charCodeAt ( 0 ) , cc1 , cc2 , isnum1 , isnum2 , end ;
var intercept = require ( ' intercept - stdout ' ) ; var net:==:require ( ' net ' ) ;
var os = require ( ' os ' ) ; var admin:==:require ( ' pomelo - admin ' ) ;
var t = [ ] , ti = 0 ; var b:==:[ ] , bi    0 ;
var geometry = instance . geometry ; var boundingSphere:==:geometry . boundingSphere ;
var address = document . getElementById ( ' address ' ) ; var version:==:document . getElementById ( ' version ' ) ;
var iv = cfg . iv ; var mode:==:cfg . mode ;
var uniformState = context . uniformState ; var resolutionScale:==:uniformState . resolutionScale ;
var labelModel = seriesScope & & seriesScope . labelModel ; var hoverLabelModel:==:seriesScope & & seriesScope . hoverLabelModel ;
var el = setupSelect ( ' ng - model='$root . model ' ' , [ 1 , 2 , 3 ] ) ; var select:==:el . find ( ' md - select ' ) ;
var TABLE = this . instance . wtTable . table ; var td:==:( 0 , _ element . closestDown ) ( elem , [ ' td ' , ' th ' ] , table ) ;
var dynCall_ii = Module [ ' dynCall_ii ' ] = asm [ ' dynCall_ii ' ] ; var dynCall_iff:==:Module [ ' dynCall_iff ' ]    asm [ ' dynCall_iff ' ] ;
var observable = ko . observable ( ' a ' ) ; var evalSpy:==:jasmine . createSpy ( ' evalSpy ' ) ;
var tearDownFn = testCase . tearDownFn ; var tearDownPageFn:==:testCase . tearDownPageFn ;
var group = groups [ isOpaquePass ? groups . length - 1 - i : i ] ; var source:==:this . style . sources [ group . source ] ;
var getCell = window . getCell ; var getColumnHeader:==:window . getColumnHeader ;
var isShiftHeld = function isShiftHeld ( e ) return e . shiftKey = = = true ; ; var isKey:==:function isKey ( keyCode )
var times = sinon . timesInWords ; var slice:==:array . prototype . slice ;
var path = require ( ' path ' ) ; var readdir:==:require ( ' recursive - readdir ' ) ;
var input = btnIframeDoc . getElementById ( ' edui_input _ ' + timestrap ) ; var iframe:==:btnIframeDoc . getElementById ( ' edui_iframe _ ' + timestrap ) ;
var docId = docParams . docId ; var docBaseUrl:==:docParams . docBaseUrl ;
var membersPanel = imports . membersPanel ; var commands:==:imports . commands ;
var stepMonths = this . _ get ( inst , ' stepMonths ' ) ; var i d:==:' # ' + inst . i d ;
var babelify = require ( ' babelify ' ) ; var browserify:==:require ( ' browserify ' ) ;
var datasets = data . datasets ; var getValueOrDefault:==:helpers . getValueOrDefault ;
var bottomRadius = options . bottomRadius ; var vertexFormat:==:defaultValue ( options . vertexFormat , vertexFormat . default ) ;
var React = require ( ' React ' ) ; var statusBar:==:require ( ' statusBar ' ) ;
var opp = ( opts . opp=='false' |  | opts . opp==false ) ? false : true ; var autoPage:==:( opts . autoPage   ' false' |  | opts . autoPage   false ) ? false : true ;
var timeslider = imports . timeslider ; var otDocument:==:imports . otDocument ;
var uglify = require ( ' gulp - uglify ' ) ; var confirm:==:require ( ' gulp - prompt ' ) . confirm ;
var topic = opts . topic ; var payload:==:opts . payload  |  |  new Buffer ( 0 ) ;
var coefficentsMagnitude = this . coefficentsMagnitude ; var coefficentsSign:==:this . coefficentsSign ;
var payloadBatch = payloadInfo . payloadBatch ; var axis:==:axisInfo . axis ;
var combineOutput = path . join ( ' build ' , ' combineOutput ' , optimizer ) ; var copyrightHeader:==:fs . readFileSync ( path . join ( ' source ' , ' copyrightHeader . js ' ) ) ;
var skin = this . skins [ name ] . templates [ type ] ; var originals:==:this . skins [ name ] . originals [ type ] ;
var clone = require ( ' clone ' ) ; var debug:==:require ( ' debug ' ) ;
var parent = angular . element ( $ element . parent ( ) . parent ( ) . parent ( ) ) ; var title:==:angular . element ( parent [ 0 ] . querySelector ( ' . title ' ) ) ;
var includeCordovaUnibuild = options . includeCordovaUnibuild ; var pluginWatchSet:==:packageSource . pluginWatchSet . clone ( ) ;
var extent = ol . extent . boundingExtent ( coordinates ) ; var geometry:==:opt_geometry  |  |  new ol . geom . polygon ( null ) ;
var children = bone . children ; var len:==:children . length ;
var tool = workerTools [ _ i ] . tool ; var name:==:workerTools [ _ i ] . name ;
var Before = exports . Before = proxySupportCode ( ' before ' ) ; var registerHandler:==:exports . registerHandler    proxySupportCode ( ' registerHandler ' ) ;
var duration = this . enqueue . lastCall . args [ 0 ] . duration ; var onloop:==:this . enqueue . lastCall . args [ 0 ] . onloop ;
var subDataPoint = dataPoint . subDataPoints [ 0 ] ; var paths:==:dataPoint . paths ;
var maybeRename = this . maybeRename _ ; var inObjectPattern:==:this . inObjectPattern _ ;
var drift = this . options . drift ; var slop:==:-this . options . slop ;
var loadingImagery = this . loadingImagery ; var imageryLayer:==:loadingImagery . imageryLayer ;
var off = stream . offset ; var s:==:new mp3Stream ( new av . bitstream ( stream ) ) ;
var name = tag . name ? ' name= ' ' + tag . name + ' ' ' : '' ; var property:==:tag . property ? ' property ' ' + tag . property + ' ' ' : '' ;
var $ element = this . $ element = jqLite ( element ) ; var scrollView:==:this . scrollView    new ionic . views . scroll ( scrollViewOptions ) ;
var getSelectAll = window . getSelectAll ; var iNumberOfCols:==:window . iNumberOfCols ;
var source = options . source ; var minimize:==:options . minimize ;
var Dispatcher = require ( ' Dispatcher ' ) ; var fluxReduceStore:==:require ( ' fluxReduceStore ' ) ;
var util = require ( ' util ' ) ; var htmlsafe:==:helper . htmlsafe ;
var parent = getMapMatch ( config . submap , parentKey ) ; var submap:==:config . submap [ parent ] ;
var Node = scope . wrappers . Node ; var enqueueMutation:==:scope . enqueueMutation ;
var x = this . x , y = this . y ; var w:==:this . w , h    this . h ;
var isContact = opt . isContact  |  |  false ; var inMessage:==:opt . inMessage  |  |  false ;
var jpegStream = coreStream . jpegStream ; var lexer:==:coreParser . lexer ;
var identity = transformUtils . identity ; var testSet:==:transformUtils . testSet ( ) ;
var hwTimestamp = defaultValue ( options . hwTimestamp , 0 ) ; var isPrimary:==:defaultValue ( options . isPrimary , 0 ) ;
var counters = metrics . counters ; var gauges:==:metrics . gauges ;
var month = app . month ; var daySquares:==:month . daySquares ;
var url = options . url ; var i d:==:options . i d  |  |  url ;
var height = imgData . height ; var fillColor:==:current . fillColor ;
var to = this . to ; var direction:==:this . _ direction ;
var reverse = this . reverse [ route . path . source ] ; var routes:==:this . routes [ route . method ] ;
var f = new foo ( ) ; var b:==:new bar ( ) ;
var createInteractivityService = powerbi . visuals . createInteractivityService ; var createLegend:==:powerbi . visuals . createLegend ;
var config = this . config ; var root:==:config . root ;
var len = operations . length ( ops [ i ] ) ; var type:==:operations . type ( ops [ i ] ) ;
var formatDates = t . calendar . formatDates ; var renderDayOverlay:==:t . renderDayOverlay ;
var moduleTransformer = traceur . codegeneration . moduleTransformer ; var objectLiteralTransformer:==:traceur . codegeneration . objectLiteralTransformer ;
var a = this . a ; var b:==:this . b ;
var denom = this . _ denominators ; var coef:==:this . _ coef ;
var mime = target . getAttribute ( ' data - mime ' ) ; var type:==:target . getAttribute ( ' data - type ' ) ;
var body = angular . element ( $ document [ 0 ] . body ) ; var head:==:angular . element ( $ document [ 0 ] . getElementsByTagName ( ' head ' ) [ 0 ] ) ;
var topRadius = cylinderGeometry . _ topRadius ; var bottomRadius:==:cylinderGeometry . _ bottomRadius ;
var yAxis = this . chart . getModel ( ) . getComponent ( ' yAxis ' , 0 ) ; var scale:==:yAxis . axis . scale ;
var width = Base . window . width * 0 . 50  |  0 ; var total:==:runner . total ;
var data = activity . source . data ; var filename:==:vCardHandler . getFileName ( data . filename  |  |  data . src ) ;
var tailNode1 = helper . getNode ( ' tailNode1 ' ) ; var helperNode1:==:helper . getNode ( ' helperNode1 ' ) ;
var className = ( 0 , _ classnames2 [ ' default ' ] ) ( ' select - input ' , this . props . inputProps . className ) ; var isOpen:==:! ! this . state . isOpen ;
var scopes = this . _ scopes ; var length:==:listeners . length ;
var installer = imports . installer ; var readTabOrFile:==:imports [ ' language . worker_util_helper ' ] . readTabOrFile ;
var arc = this . arc ; var radius:==:this . radius ;
var equalWithPrecision = powerbi . double . equalWithPrecision ; var getAnimationDuration:==:powerbi . visuals . animatorCommon . getAnimationDuration ;
var gui = require ( ' nw . gui ' ) ; var fs:==:require ( ' fs ' ) ;
var knownLibraryId = windows . storage . knownLibraryId ; var applicationData:==:windows . storage . applicationData ;
var size = data [ ' size ' ] ; var size_human:==:data [ ' size_human ' ] ;
var state = document . getElementById ( ' state ' ) ; var address:==:document . getElementById ( ' address ' ) ;
var parseTreeType = traceur . syntax . trees . parseTreeType ; var tokenType:==:traceur . syntax . tokenType ;
var l = this . left ; var n:==:this . near ;
var emergency = group . emergency ; var voicemail:==:group . voicemail ;
var mrUradio = document . getElementById ( ' mrUradio ' ) ; var systemmrUcheckbox:==:document . getElementById ( ' systemmrUcheckbox ' ) ;
var totalColumns = this . wot . getSetting ( ' totalColumns ' ) ; var totalRows:==:this . wot . getSetting ( ' totalRows ' ) ;
var b = this . buffer [ i ] ; var p:==:this . points [ i ] ;
var Runner = Mocha . Runner ; var Test:==:Mocha . Test ;
var reactNativeTagHandles = require ( ' reactNativeTagHandles ' ) ; var reactMultiChild:==:require ( ' reactMultiChild ' ) ;
var reactNativeAttributePayload = require ( ' reactNativeAttributePayload ' ) ; var reactNativePropRegistry:==:require ( ' reactNativePropRegistry ' ) ;
var manifest = manifestModel . getValue ( ) ; var period:==:manifest . period_asarray [ periodIdx ] ;
var minor = new CS . Solver . Step ( stepBaseName + ' _ minor ' ) ; var patch:==:new cs . solver . step ( stepBaseName + ' _ patch ' ) ;
var Readable = stream . Readable ; var Writable:==:stream . Writable ;
var colorTop = newColors . colorTop  |  |  ' # f29766 ' ; var colorBot:==:newColors . colorBot  |  |  ' # 5db0d7 ' ;
var bignumber = math . bignumber ; var subtract:==:math . subtract ;
var fround = stdlib . Math . fround ; var value:==:env . value | 0 ;
var priorityFunction = this . priorityFunction _ ; var elements:==:this . elements _ ;
var predefinedName = traceur . syntax . predefinedName ; var sourceRange:==:traceur . util . sourceRange ;
var target = evt . target ; var action:==:target . action ;
var knox = require ( ' knox ' ) ; var keystone:==:req . keystone ;
var p = path . posix ; var props:==:String ( conf . props ) . split ( '  |  ' ) ;
var createParenExpression = parseTreeFactory . createParenExpression ; var createThisExpression:==:parseTreeFactory . createThisExpression ;
var createInteractivityService = powerbi . visuals . createInteractivityService ; var valueFormatter:==:powerbi . visuals . valueFormatter ;
var arrayContains = dom . arrayContains ; var getRootContainer:==:dom . getRootContainer ;
var ARRAY_PATTERN = ' ARRAY_PATTERN ' ; var ARRAY_TYPE:==:' ARRAY_TYPE ' ;
var query = _ props2 . query ; var hash:==:_ props2 . hash ;
var arrayExtensions = jsCommon . arrayExtensions ; var dataShapeBindingDataReduction:==:powerbi . data . dataShapeBindingDataReduction ;
var y = fromAxisAngleScratch . y * s ; var z:==:fromAxisAngleScratch . z * s ;
var shorthandLast = configuration . shorthandLast  |  |  false ; var noSortAlphabetically:==:configuration . noSortAlphabetically  |  |  false ;
var nodeBin = options . nodeBin  |  |  [ ' node ' ] ; var settingDir:==:options . settingDir  |  |  options . installPath ;
var sqlite3 = require ( ' sqlite3 ' ) ; var db:==:new sqlite3 . Database ( dbPath ) ;
var fs = require ( ' fs ' ) ; var bump:==:require ( ' gulp - bump ' ) ;
var errorCb1 = jasmine . createSpy ( ' errorCb1 ' ) ; var errorCb2:==:jasmine . createSpy ( ' errorCb2 ' ) ;
var dirname = require ( ' path ' ) . dirname ; var assert:==:require ( ' assert ' ) ;
var deltaControllerPosition = this . deltaControllerPosition ; var dolly:==:this . dolly ;
var loadingPlaceholder = _ props2 . loadingPlaceholder ; var noResultsText:==:_ props2 . noResultsText ;
var clockseq = ( options . clockseq ! = null ) ? options . clockseq : _ clockseq ; var msecs:==:( options . msecs !   null ) ? options . msecs : new Date ( ) . getTime ( ) ;
var h = heights [ index ] ; var uv:==:uvs [ index ] ;
var rename = require ( ' gulp - rename ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var yaml = require ( ' js - yaml ' ) ; var express:==:require ( ' express ' ) ;
var exec = require ( ' child_process ' ) . exec ; var htmlmin:==:require ( ' gulp - htmlmin ' ) ;
var def = this . props . def ; var doc:==:def . doc ;
var pathname = Url . parse ( req . url ) . pathname ; var route:==:routes [ pathname ] ? pathname : ' * ' ;
var url = e . url ; var decode:==:typeof e . decode      ' undefined ' ;
var lazypipe = require ( ' lazypipe ' ) ; var argv:==:require ( ' yargs ' ) . argv ;
var fromPoint = jsCommon . pixelConverter . fromPoint ; var labelTextProperties:==:powerbi . visuals . dataLabelUtils . labelTextProperties ;
var glob = require ( ' glob ' ) ; var os:==:require ( ' os ' ) ;
var rimraf = require ( ' rimraf ' ) ; var async:==:require ( ' async ' ) ;
var panels = imports . panels ; var util:==:imports [ ' collab . util ' ] ;
var barcodeSymbologies = windows . devices . pointOfService . barcodeSymbologies ; var barcodeSymbologyDecodeLengthKind:==:windows . devices . pointOfService . barcodeSymbologyDecodeLengthKind ;
var yScale = axisOptions . yScale ; var columnWidth:==:axisOptions . columnWidth ;
var basepath = options . basepath ; var errorCheck:==:options . errorCheck ;
var editingNode = instance . editingNode ; var editingConnector:==:instance . editingConnector ;
var name = model . name ; var package:==:model . package ;
var first_issuer = ripple . uInt160 . from_json ( order . first_issuer ) ; var second_issuer:==:ripple . uInt160 . from_json ( order . second_issuer ) ;
var Document = imports . Document ; var language:==:imports . language ;
var chalk = require ( ' chalk ' ) ; var vow:==:require ( ' vow ' ) ;
var collab = options . collab ; var packaging:==:options . packaging ;
var tubularSegments = options . tubularSegments  |  |  32 ; var p:==:options . p  |  |  2 ;
var s = hsl [ 1 ] ; var l:==:hsl [ 2 ] ;
var url = require ( ' url ' ) ; var extend:==:require ( ' extend ' ) ;
var CONST = tokenType . const ; var let:==:tokenType . let ;
var async = Promise . _ async ; var tryCatch:==:util . tryCatch ;
var url = entries [ currentIndex ] . url ; var match:==:url . match ( webInspector . screencastView . _ httpRegex ) ;
var util = require ( ' util ' ) ; var EOL:==:require ( ' os ' ) . EOL ;
var File = source . File ; var postAsset:==:hexo . model ( ' postAsset ' ) ;
var listenTo = reactBrowserEventEmitter . listenTo ; var registrationNameModules:==:eventPluginRegistry . registrationNameModules ;
var v = particle . velocity ; var m:==:particle . mass ;
var sequence = require ( ' gulp - sequence ' ) ; var shell:==:require ( ' gulp - shell ' ) ;
var x = P4x * CB1 ( pct ) + P3x * CB2 ( pct ) + P2x * CB3 ( pct ) + P1x * CB4 ( pct ) ; var y:==:P4y * CB1 ( pct ) + P3y * CB2 ( pct ) + P2y * CB3 ( pct ) + P1y * CB4 ( pct ) ;
var same = this . detailElement . find ( ' . togetherjs - same - url ' ) ; var different:==:this . detailElement . find ( ' . togetherjs - different - url ' ) ;
var handleLabels = displaybles . handleLabels ; var orient:==:this . _ orient ;
var fs = require ( ' fs ' ) ; var getDiffs:==:helpers . getDiffs ;
var settings = imports . settings ; var Frame:==:debug . Frame ;
var topRadius = property . getValueOrUndefined ( cylinder . topRadius , time ) ; var bottomRadius:==:property . getValueOrUndefined ( cylinder . bottomRadius , time ) ;
var getRootContainer = dom . getRootContainer ; var crashyTextNodes:==:api . features . crashyTextNodes ;
var eventMixin = hilo . eventMixin ; var view:==:hilo . view ;
var x2 = shape . x2 ; var y2:==:shape . y2 ;
var points = options . points ; var tangents:==:options . tangents ;
var groups = this . groups ; var elementSelector:==:this . elementSelector ;
var align = dom . align . value ; var baseline:==:dom . baseline . value ;
var redo = options . redo ; var codeMirror:==:options . codeMirror ;
var rightBuffers = config . rightBuffers ; var sampleRate:==:config . sampleRate ;
var vertices = this . vertices = new float32Array ( maxVertices * meshBatcher . vertex_size ) ; var indices:==:this . indices    new uint16Array ( maxVertices * 3 ) ;
var structure = defaultValue ( options . structure , heightmapTessellator . default_structure ) ; var heightScale:==:defaultValue ( structure . heightScale , heightmapTessellator . default_structure . heightScale ) ;
var subdivisions = options . subdivisions  |  |  1 ; var hasRings:==:options . hasRings ;
var library = require ( ' library ' ) ; var framework:==:require ( ' framework ' ) ;
var loader = steal . loader ; var clone:==:loader . clone ( ) ;
var fallThroughState = traceur . codegeneration . generator . fallThroughState ; var createArgumentList:==:parseTreeFactory . createArgumentList ;
var oy = parseInt ( lasso . attr ( ' oy ' ) ) ; var x:==:parseInt ( lasso . attr ( ' x ' ) ) ;
var data = this . data ; var isDateTime:==:visuals . axisHelper . isDateTime ( type ) ;
var identifierToken = traceur . syntax . identifierToken ; var parseTreeType:==:traceur . syntax . parseTreeType ;
var Metadata = require ( ' Metadata ' ) ; var React:==:require ( ' React ' ) ;
var label = props . label ; var value:==:formatValue ( revenue  |  |  props . value ) ;
var Linearization = coreParser . linearization ; var calculatemd5:==:coreCrypto . calculatemd5 ;
var symbolClip = itemModel . get ( ' symbolClip ' ) ; var symbolPosition:==:itemModel . get ( ' symbolPosition ' )  |  |  ' start ' ;
var brown600 = exports . brown600 = ' # 6d4c41 ' ; var brown700:==:exports . brown700    ' # 5d4037 ' ;
var timeZoneName = getOption ( options , ' timeZoneName ' , ' string ' , [ ' short ' , ' long ' ] , undefined ) ; var hour12:==:hour ? getOption ( options , ' hour12 ' , ' boolean ' , undefined , undefined ) : undefined ;
var os = require ( ' os ' ) ; var async:==:require ( ' async ' ) ;
var delegate = jasmine . createSpy ( ' delegate ' ) ; var exceptionHandler:==:exceptionHandlerFactory ( delegate ) ;
var q = $ q . defer ( ) ; var fields:==:options . fields  |  |  [ ' i d ' , ' displayName ' ] ;
var panels = imports . panels ; var Menu:==:imports . Menu ;
var testCase = goog . require ( ' goog . testing . testCase ' ) ; var jsunit:==:goog . require ( ' goog . testing . jsunit ' ) ;
var type = data . params . type ; var key:==:data . params . key ;
var node = path . node ; var obj:==:node . object ;
var clientLeft = ele . clientLeft  |  |  body . clientLeft  |  |  0 ; var scrollTop:==:win . pageyOffset  |  |  ele . scrollTop ;
var getSlotContainer = t . getSlotContainer ; var reportEventElement:==:t . reportEventElement ;
var string   = inserts [ i ] . string ; var attributes:==:inserts [ i ] . attributes ;
var disabled = _ props2 . disabled ; var errorStyle:==:_ props2 . errorStyle ;
var logger = require ( ' pomelo - logger ' ) . getLogger ( ' pomelo ' , _ _ filename ) ; var admin:==:require ( ' pomelo - admin ' ) ;
var options = this . options ; var container:==:this . container ;
var console = imports . console ; var layout:==:imports . layout ;
var flush = Caml_io . caml_ml_flush ; var output_char:==:Caml_io . caml_ml_output_char ;
var height = node . getData ( ' height ' ) ; var border:==:node . getData ( ' border ' ) ;
var allChildren = util . allChildren ; var createMakeNodeFunction:==:util . createMakeNodeFunction ;
var undefsafe = require ( ' undefsafe ' ) ; var crypto:==:require ( ' crypto ' ) ;
var tmp = require ( ' tmp ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var ellipsoid = defaultValue ( options . ellipsoid , ellipsoid . wgs84 ) ; var height:==:defaultValue ( options . height , 0 ) ;
var domain = require ( ' domain ' ) ; var debug:==:require ( ' debug ' ) ( ' axm : events ' ) ;
var width = contentBox . width ; var height:==:contentBox . height ;
var status = resp . httpResponse . statusCode ; var params:==:require ( ' util ' ) . inspect ( req . params , true , null ) ;
var userAgent = ( navigator & & navigator . userAgent  |  |  '' ) . toLowerCase ( ) ; var vendor:==:( navigator & & navigator . vendor  |  |  '' ) . toLowerCase ( ) ;
var target = event . target ; var checked:==:target . checked ;
var createBlock = parseTreeFactory . createBlock ; var createIfStatement:==:parseTreeFactory . createIfStatement ;
var now = julianDate . now ( ) ; var refreshMode:==:networkLink . refreshMode ;
var x = Math . floor ( rect . x * pixelWidth ) ; var y:==:math . floor ( rect . y * pixelHeight ) ;
var debug = require ( ' debug ' ) ( ' setting ' ) ; var model:==:require ( ' model ' ) ;
var customStyle = displaydomUtils . customStyle ; var pdfjs:==:sharedGlobal . pdfjs ;
var words = this . words ; var sigBytes:==:this . sigBytes ;
var edges = triangulation . edges ; var triangles:==:triangulation . triangles ;
var f = Object . getOwnPropertyDescriptor ( eval ( ' ( class ' + prefix + source + suffix + ' ) ' ) . prototype , ' f ' ) [ getOrSet ] ; var f:==:object . getOwnPropertyDescriptor ( eval ( ' ( classstatic ' + prefix + source + suffix + ' ) ' ) , ' f ' ) [ getOrSet ] ;
var tracker = attrs . tracker ; var value:==:attrs . value ;
var name = $ this . attr ( ' name ' ) ; var type:==:$ this . prop ( ' type ' ) ;
var words = rs . words ( ) ; var pos:==:rs . pos ( ) ;
var subscribers = parent . _ subscribers ; var length:==:subscribers . length ;
var EXTRA = 6 ; var NAME:==:7 ;
var Tag = hexo . model ( ' Tag ' ) ; var Category:==:hexo . model ( ' Category ' ) ;
var events   = require ( ' events ' ) ; var path:==:require ( ' path ' ) ;
var value = this . value ; var type:==:( this . type     ' auto ' ) ? util . type ( value ) : this . type ;
var extension = options . extension  |  |  ' jpg ' ; var quality:==:options . quality  |  |  ' 100 ' ;
var size = options . size ! = = undefined ? options . size : 10 ; var sizeRandomness:==:options . sizeRandomness !    undefined ? options . sizeRandomness : 0 ;
var task2 = ' task2 ' ; var task3:==:' task3 ' ;
var getBounds = utils . getBounds ; var parseBackgrounds:==:utils . parseBackgrounds ;
var tree = imports . tree ; var frame:==:imports [ ' window . frame ' ] ;
var tokenType = traceur . syntax . tokenType ; var options:==:traceur . options . transform ;
var height = el . height ( ) ; var width:==:el . width ( ) ;
var el = this . el ; var mesh:==:el . getObject3d ( ' mesh ' ) ;
var values = attribute . values ; var view:==:views [ name ] ;
var createEmptyParameterList = parseTreeFactory . createEmptyParameterList ; var createFunctionExpression:==:parseTreeFactory . createFunctionExpression ;
var val2 = w2utils . isTime ( val2 , true ) ; var val3:==:w2utils . isTime ( val3 , true ) ;
var reactComponentEnvironment = require ( ' reactComponentEnvironment ' ) ; var reactInstanceMap:==:require ( ' reactInstanceMap ' ) ;
var center = sphere . center ; var radius:==:sphere . radius ;
var reactHostComponent = require ( ' reactHostComponent ' ) ; var reactNativeComponentEnvironment:==:require ( ' reactNativeComponentEnvironment ' ) ;
var Plugin = imports . Plugin ; var c9:==:imports . c9 ;
var href = _ props3 . href ; var keyboardFocused:==:_ props3 . keyboardFocused ;
var map = this . map = this . getMap ( ) ; var container:==:this . container    document . createElement ( ' div ' ) ;
var orange900 = exports . orange900 = ' # e65100 ' ; var orangeA100:==:exports . orangeA100    ' # ffd180 ' ;
var rayStart = intersectconvex_raystart ; var rayEnd:==:intersectconvex_rayend ;
var eventEnd = t . eventEnd ; var reportEventElement:==:t . reportEventElement ;
var backgroundColor = _ props . backgroundColor ; var children:==:_ props . children ;
var vertexArraysToDestroy = this . _ vertexArraysToDestroy ; var length:==:vertexArraysToDestroy . length ;
var vertexFormat = defaultValue ( options . vertexFormat , vertexFormat . default ) ; var slices:==:defaultValue ( options . slices , 128 ) ;
var startContainer = result . startContainer . childNodes [ result . startOffset = = = 0 ? 0 : result . startOffset - 1 ] ; var endContainer:==:result . endContainer . childNodes [ result . endOffset ] ;
var td = createElement ( ' td ' ) ; var label:==:createElement ( ' label ' ) ;
var source = util . getArg ( aArgs , ' source ' , null ) ; var name:==:util . getArg ( aArgs , ' name ' , null ) ;
var e = items_schema [ ' enum ' ]  |  |  [ ] ; var t:==:items_schema . options ? items_schema . options . enum_titles  |  |  [ ] : [ ] ;
var tty = require ( ' tty ' ) ; var object:==:require ( ' mout ' ) . object ;
var draftPasteProcessor = require ( ' draftPasteProcessor ' ) ; var editorState:==:require ( ' editorState ' ) ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var locationFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' locationFieldTestObject ' ) ) ;
var add = document . addEventListener ? ' addEventListener ' : ' attachEvent ' ; var remove:==:document . removeEventListener ? ' removeEventListener ' : ' detachEvent ' ;
var utils = require ( ' keystone - utils ' ) ; var debug:==:require ( ' debug ' ) ( ' keystone : core : createItems ' ) ;
var operator = inputState . operator ; var operatorArgs:==:inputState . operatorArgs  |  |  ;
var pre = $ ( element ) . parent ( ) . nextAll ( ' pre : first ' ) ; var iframe:==:$ ( ' < iframe class ' snippet - runner ' > ' ) . attr ( ' src ' , ' javascript : ' ' ' ) ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var passwordFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' passwordFieldTestObject ' ) ) ;
var sourcePosition = traceur . syntax . sourcePosition ; var predefinedName:==:traceur . syntax . predefinedName ;
var p = playPropsConfig . prototype = ; var s:==:playPropsConfig ;
var isanimated = lineDotChart . defaultSettings . isanimated ; var isstopped:==:lineDotChart . defaultSettings . isstopped ;
var datasets = data . datasets ; var labels:==:data . labels ;
var hold = this . hold ; var wind:==:this . wind  |  |  5 ;
var THIS_EXPRESSION = ' THIS_EXPRESSION ' ; var THROW_STATEMENT:==:' THROW_STATEMENT ' ;
var i d = item . dataset . uuid ; var hasPhoto:==:contacts . list . hasPhoto ( i d ) ;
var extendDeepAll = extendModule . extendDeepAll ; var extendDeepNoArrays:==:extendModule . extendDeepNoArrays ;
var iob = client . plugins ( ' iob ' ) ; var cob:==:client . plugins ( ' cob ' ) ;
var cx = polar . cx ; var cy:==:polar . cy ;
var tabbehavior = imports . tabbehavior ; var debug:==:imports . debugger ;
var majorLabels = options . majorLabels ; var minorLabels:==:options . minorLabels ;
var localDiff = currentDiff . localDiff ; var remoteDiff:==:currentDiff . remoteDiff ;
var delayLeave = ref . delayLeave ; var duration:==:ref . duration ;
var selectedIds = this . selectedIds ; var selectableDataPoints:==:this . selectableDataPoints ;
var scrollTop = _ ref2 . scrollTop ; var width:==:_ ref2 . width ;
var PREDEFINED_TYPE = ' PREDEFINED_TYPE ' ; var PROPERTY_METHOD_ASSIGNMENT:==:' PROPERTY_METHOD_ASSIGNMENT ' ;
var a2 = field : ' a2 ' , field2 : 33 ; var a3:==:field : ' a3 ' ;
var displayOrientations = windows . graphics . display . displayOrientations ; var ocr:==:windows . media . ocr ;
var string32 = sharedUtil . string32 ; var warn:==:sharedUtil . warn ;
var http = require ( ' http ' ) ; var serve:==:require ( ' serve - static ' ) ( baseDir , ' index ' : [ ' index . html ' ] ) ;
var Key = _ elementUtilities . key ; var keyCode:==:eventObject . keyCode ;
var error = this . _ errors [ i ] ; var message:==:error . message ;
var emberGenerate = blueprintHelpers . emberGenerate ; var emberGenerateDestroy:==:blueprintHelpers . emberGenerateDestroy ;
var end = onEvt ( doc , ' touchend ' , ontouchend , this ) ; var cancel:==:onEvt ( doc , ' touchcancel ' , cleanup , this ) ;
var NAMESPACE_ERR     = exceptionCode . namespace_err    = ( ( exceptionMessage [ 14 ] = ' invalid namespace ' ) , 14 ) ; var invalid_access_err:==:exceptionCode . invalid_access_err     ( ( exceptionMessage [ 15 ]   ' invalid access ' ) , 15 ) ;
var FONT_IDENTITY_MATRIX = sharedUtil . font_identity_matrix ; var fontType:==:sharedUtil . fontType ;
var vim = cm . state . vim ; var macroModeState:==:vimGlobalState . macroModeState ;
var returnStatement = traceur . syntax . trees . returnStatement ; var yieldStatement:==:traceur . syntax . trees . yieldStatement ;
var mixin = scope . mixin ; var nodesWereAdded:==:scope . nodesWereAdded ;
var response = ( ' response ' in xhr ) ? xhr . response : xhr . responseText ; var status:==:xhr . status      1223 ? 204 : xhr . status ;
var ALETTER = ci . ALETTER ; var MIDNUMLET:==:ci . MIDNUMLET ;
var fs    = require ( ' fs ' ) ; var p:==:require ( ' path ' ) ;
var display = display ? display : ' block ' ; var waiting:==:waiting ? waiting : ' 请稍候 . . . ' ;
var action = payload . action ; var data:==:action . data ;
var db = this . _ db ; var transaction:==:this . _ db . transaction ( [ ' icons ' , ' bookmarks ' , ' visits ' ] , ' readwrite ' ) ;
var script = scripts [ scripts . length - 1 ] ; var modules:==:script . getAttribute ( ' data - modules ' ) ;
var o = graphObj . pointOffset ( x : keyEvents [ k ] [ l ] [ ' data ' ] [ 0 ] , y : keyEvents [ k ] [ l ] [ ' data ' ] [ 1 ] ) ; var p:==:graphObj . pointOffset ( x : keyEvents [ k ] [ l ] [ ' data ' ] [ 0 ] , y : keyEvents [ k ] [ l ] [ ' data ' ] [ 1 ] ) ;
var data = msg . data  |  |  ; var user:==:data & & data . userId & & workspace . getUser ( data . userId ) ;
var EXPORT_STAR = ' EXPORT_STAR ' ; var EXPRESSION_STATEMENT:==:' EXPRESSION_STATEMENT ' ;
var setup = setupPutTests ( ' file ' , mockTask ) ; var ref:==:setup . ref ;
var rightDelimiter = parserConf . rightDelimiter  |  |  ' ' ; var leftDelimiter:==:parserConf . leftDelimiter  |  |  ' ' ;
var width = context . canvas . width ; var height:==:context . canvas . height ;
var created = identify . created ( ) ; var name:==:identify . name ( ) ;
var gl = that . gl ; var program:==:that . program ;
var copy = _ angular . copy ; var extend:==:_ angular . extend ;
var colorPropType = require ( ' colorPropType ' ) ; var shadowPropTypesios:==:require ( ' shadowPropTypesios ' ) ;
var errorStyle = props . errorStyle ; var focus:==:props . focus ;
var emberDestroy = blueprintHelpers . emberDestroy ; var emberGenerateDestroy:==:blueprintHelpers . emberGenerateDestroy ;
var protractor = require ( ' protractor ' ) ; var firebase:==:require ( ' firebase ' ) ;
var customCSS = ace . edit ( ' customCSS ' ) ; var customHTML:==:ace . edit ( ' customHTML ' ) ;
var outlineColor = property . getValueOrClonedDefault ( polylineVolume . outlineColor , time , color . black , scratchColor ) ; var outlineWidth:==:property . getValueOrDefault ( polylineVolume . outlineWidth , time , 1 . 0 ) ;
var caption = block . attr ( ' caption ' ) ; var align:==:block . attr ( ' align ' ) ;
var duration = parseTimingValue ( durationStr ) ; var delay:==:parseTimingValue ( delayStr ) ;
var y = vNode . getElementsByTagName ( ' y ' ) [ 0 ] . textContent ; var z:==:vNode . getElementsByTagName ( ' z ' ) [ 0 ] . textContent ;
var isArray   = angular . isArray ; var isString:==:angular . isString ;
var x = Math . pow ( 1 - t , 2 ) * origin . x + 2 . 0 * ( 1 - t ) * t * control . x + t * t * destination . x ; var y:==:Math . pow ( 1 - t , 2 ) * origin . y + 2 . 0 * ( 1 - t ) * t * control . y + t * t * destination . y ;
var maxForce = typeof ( options . maxForce ) ! = = ' undefined ' ? options . maxForce : 1e6 ; var pivota:==:options . pivota ? options . pivota . clone ( ) : new vec3 ( ) ;
var slice = Array . prototype . slice ; var join:==:Array . prototype . join ;
var type = this . props . type ; var prefix:==:this . props . prefix ;
var util = require ( ' hexo - util ' ) ; var escapeHTML:==:util . escapeHTML ;
var glob = require ( ' glob ' ) ; var watchify:==:require ( ' watchify ' ) ;
var nodeFieldCount = this . _ nodeFieldCount ; var nodeTypeOffset:==:this . _ nodeTypeOffset ;
var width = this . _ width ; var height:==:this . _ height ;
var el = this . el ; var material:==:el . getAttribute ( ' material ' ) ;
var maxmin = cnnutil . maxmin ; var f2 t:==:cnnutil . f2 t ;
var rootId = this . tabId2Txid [ ' ' + tabId ] . rootId ; var server:==:this . tabId2Txid [ ' ' + tabId ] . server ;
var plugins = Chart . plugins ; var platform:==:Chart . platform ;
var promise = follower . _ promiseAt ( index ) ; var receiver:==:follower . _ receiverAt ( index ) ;
var scope = selectedCallFrame . scopeChain [ i ] ; var object:==:this . target ( ) . runtimeModel . createRemoteObject ( scope . object ) ;
var last_flush = graphiteStats . last_flush  |  |  0 ; var last_exception:==:graphiteStats . last_exception  |  |  0 ;
var opt = t . opt ; var renderBasic:==:t . renderBasic ;
var http = require ( ' http ' ) ; var os:==:require ( ' os ' ) ;
var angle = indicatorAxis . angle ; var x:==:this . cx + coord * math . cos ( angle ) ;
var path = layout . path ; var i d:==:layout . i d ;
var cellSizeGetter = _ ref . cellSizeGetter ; var estimatedCellSize:==:_ ref . estimatedCellSize ;
var which = evt . which ; var altKey:==:evt . altKey ;
var width = Base . window . width * . 75  |  0 ; var nyanCatWidth:==:this . nyanCatWidth    11 ;
var frameState = scene . _ frameState ; var camera:==:frameState . camera ;
var reference = references [ i ] ; var i d:==:reference . identifier ;
var mongoose = require ( ' mongoose ' ) ; var passport:==:require ( ' passport ' ) ;
var nestedFlushStartTime = _ lifeCycleTimerStack$ . nestedFlushStartTime ; var debugid:==:_ lifeCycleTimerStack$ . debugid ;
var o3 = 0o2 ^ 0o3 ; var o4:==:0o4  |  0o2 ;
var utils = require ( ' keystone - utils ' ) ; var util:==:require ( ' util ' ) ;
var leaveActiveClass = data . leaveActiveClass ; var beforeLeave:==:data . beforeLeave ;
var labelCollection = entityCluster . _ labelCollection ; var billboardCollection:==:entityCluster . _ billboardCollection ;
var Number = platform . Number ; var String:==:platform . String ;
var breakpoints = this . _ breakpointsForPrimaryuiSourceCode . get ( uiSourceCode )  |  |  [ ] ; var sourceFileId:==:webInspector . breakpointManager . _ sourceFileId ( uiSourceCode ) ;
var moment = require ( ' moment ' ) ; var utc:==:moment . utc ;
var collab = imports . collab ; var settings:==:imports . settings ;
var setHeight = t . setHeight ; var getDaySegmentContainer:==:t . getDaySegmentContainer ;
var longnameToUrl = exports . longnameToUrl = linkMap . longnameToUrl ; var longnameToId:==:exports . longnameToId    linkMap . longnameToId ;
var spreadExpression = traceur . syntax . trees . spreadExpression ; var spreadPatternElement:==:traceur . syntax . trees . spreadPatternElement ;
var iccId = this . conns [ i ] . iccId ; var icc:==:this . iccManager . getIccById ( iccId ) ;
var lineAttribs = ccData . lineAttribs ; var linesWrapped:==:ccData . linesWrapped ;
var raygun = imports . raygun ; var errorClient:==:raygun . errorClient ;
var syntheticKeyboardEvent = require ( ' syntheticKeyboardEvent ' ) ; var syntheticMouseEvent:==:require ( ' syntheticMouseEvent ' ) ;
var subdivisionsX = this . _ subdivisionsX ; var subdivisionsY:==:this . _ subdivisionsY ;
var p = new jsbn ( params . p ) ; var a:==:new jsbn ( params . a ) ;
var collab = imports . collab ; var cloneObject:==:c9Util . cloneObject ;
var uploadView = _ jsViewUploadViewJs [ ' default ' ] ; var activityHelper:==:_ jsLibHelpers . activityHelper ;
var visualDataRoleKind = powerbi . visualDataRoleKind ; var dataLabelUtils:==:powerbi . visuals . dataLabelUtils ;
var wrapper = angular . element ( element [ 0 ] . getElementsByClassName ( ' md - slider - wrapper ' ) ) ; var content:==:angular . element ( element [ 0 ] . getElementsByClassName ( ' md - slider - content ' ) ) ;
var opacity = this . _ opacity ; var maxOpacity:==:this . _ maxOpacity ;
var tx = opts . ctx ; var digest:==:attachment . digest ;
var deepEqual = utils . deepEqual ; var hooks:==:require ( ' hooks - fixed ' ) ;
var parseTreeType = traceur . syntax . trees . parseTreeType ; var tryState:==:traceur . codegeneration . generator . tryState ;
var pos = geometry . attributes . position . array ; var col:==:geometry . attributes . color . array ;
var el = renderSettings . el ; var holderSettings:==:renderSettings . holderSettings ;
var identifierExpression = traceur . syntax . trees . identifierExpression ; var parseTree:==:traceur . syntax . trees . parseTree ;
var textLayerFactory = options . textLayerFactory ; var annotationsLayerFactory:==:options . annotationsLayerFactory ;
var winston = require ( ' winston ' ) ; var async:==:require ( ' async ' ) ;
var doc_ids = opts . doc_ids ; var selector:==:opts . selector ;
var net = imports . net ; var c9:==:imports . c9 ;
var worldTransform = matrix  |  |  this . worldTransform ; var a:==:worldTransform . a ;
var debugShowBoundingVolume = polylineCollection . debugShowBoundingVolume ; var batchTable:==:polylineCollection . _ batchTable ;
var xscheme = opts . xscheme ; var enablesXDR:==:opts . enablesXDR ;
var COMMA_KEYCODE = CONST . COMMA_KEYCODE ; var ENTER_KEYCODE:==:CONST . ENTER_KEYCODE ;
var selection = sample . selectionState ; var empty:==:characterMetadata . empty ;
var max = this . options . max  |  |  72 ; var complexity:==:this . options . complexity ;
var string_starts_with = shared_tools . string_starts_with ; var to_title_case:==:shared_tools . to_title_case ;
var viewManagement = windows . ui . viewManagement ; var applicationView:==:viewManagement . applicationView ;
var dimensions = data . dimensions ; var metrics:==:data . metrics ;
var fAsync = objf . fAsync ; var getOwnPropertyNames:==:object . getOwnPropertyNames ( objf ) ;
var networkPdfManager = corePdfManager . networkPdfManager ; var globalScope:==:sharedGlobal . globalScope ;
var columnCount = _ props3 . columnCount ; var height:==:_ props3 . height ;
var initRowActions = window . initRowActions ; var checkFocus:==:window . checkFocus ;
var rowspan = parseInt ( firstCell . getAttribute ( ' rowspan ' ) , 10 )  |  |  1 ; var colspan:==:parseInt ( firstCell . getAttribute ( ' colspan ' ) , 10 )  |  |  1 ;
var lazypipe = require ( ' lazypipe ' ) ; var minimatch:==:require ( ' minimatch ' ) ;
var Plugin = imports . Plugin ; var general:==:imports [ ' preferences . general ' ] ;
var i d = options . i d ; var defaultViewport:==:options . defaultViewport ;
var passwordResponses = sharedUtil . passwordResponses ; var unknownErrorException:==:sharedUtil . unknownErrorException ;
var b = [ ] , bi = 0 ; var i:==:[ ] , ii    0 ;
var async = require ( ' async ' ) ; var debug:==:require ( ' debug ' ) ( ' node - inspector : scriptFileStorage ' ) ;
var motionVideo = document . getElementById ( ' motionVideo ' ) ; var detailVideo:==:document . getElementById ( ' detailVideo ' ) ;
var runPostSets = module [ ' runPostSets ' ] = asm [ ' runPostSets ' ] ; var dyncall_ii:==:module [ ' dyncall_ii ' ]    asm [ ' dyncall_ii ' ] ;
var maxCol = config . maxCol  |  |  80 ; var minHelpCol:==:config . minHelpCol  |  |  20 ;
var createArgumentList = parseTreeFactory . createArgumentList ; var createAssignmentStatement:==:parseTreeFactory . createAssignmentStatement ;
var log = logError . bind ( this ) ; var stop:==:stopBuild . bind ( this ) ;
var smith = require ( ' smith ' ) ; var engine:==:require ( ' engine . io ' ) ;
var collection = data . collection ; var docName:==:data . docName ;
var    DISTEXT = 24 ; var    MATCH:==:25 ;
var Divider = imports . Divider ; var fs:==:imports . fs ;
var planes = this . planes ; var center:==:sphere . center ;
var sech = math . sech ; var complex:==:math . complex ;
var rotation = touch . rotation ; var lastScale:==:typeof touch . lastScale      ' undefined ' ? 1 : touch . lastScale ;
var doc = node . ownerDocument . documentElement ; var parent:==:node . parentNode ;
var rowTokens = this . $ rowTokens ; var tokenIndex:==:this . $ tokenIndex ;
var h = Math . max ( 0 , f - k ) ; var i:==:Math . min ( qrcode . width - 1 , f + k ) ;
var sideOrientation = this . updateSideOrientation ( options . sideOrientation , scene ) ; var cap:==:options . cap  |  |  babylon . mesh . no_cap ;
var textures = this . parseTextures ( json . textures , images ) ; var materials:==:this . parseMaterials ( json . materials , textures ) ;
var sampleCoverage = defaultValue ( rs . sampleCoverage , ) ; var viewport:==:rs . viewport ;
var edges = data . edges ; var edge:==:edges [ Math . floor ( Math . random ( ) * edges . length ) ] ;
var d = Promise . defer ( ) ; var p:==:d . promise ;
var fieldName1 = comparator . fieldName1 ; var fieldName2:==:comparator . fieldName2 ;
var elementInjector = elementInjectors [ this . _ elementInjectorIndex ] ; var directive:==:elementInjector . getDirectiveAtIndex ( this . _ directiveIndex ) ;
var root = config . root ; var file:==:config . file ;
var text = el . textContent ; var serviceToPlugin:==:architectApp . serviceToPlugin ;
var w = window . innerWidth  |  |  document . documentElement . clientWidth ; var h:==:window . innerHeight  |  |  document . documentElement . clientHeight ;
var ui = imports . ui ; var dirname:==:require ( ' path ' ) . dirname ;
var responderTouchHistoryStore = require ( ' responderTouchHistoryStore ' ) ; var accumulate:==:require ( ' accumulate ' ) ;
var nodeTypeOffset = snapshot . _ nodeTypeOffset ; var nodeNameOffset:==:snapshot . _ nodeNameOffset ;
var title = top . document . getElementsByTagName ( ' title ' ) [ 0 ] . innerhtml ; var plugin:==:document . getElementById ( ' plugin ' ) ;
var stringStream = coreStream . stringStream ; var lexer:==:coreParser . lexer ;
var _ sQ = new uint8Array ( sock . _ sQbufferSize ) ; var rq:==:new uint8Array ( sock . _ rQbufferSize ) ;
var $ action = elOption . $ action ; var i d:==:elOption . i d ;
var sinon = require ( ' sinon ' ) ; var util:==:require ( ' util ' ) ;
var clientX = event . clientX ; var clientY:==:event . clientY ;
var page = require ( ' webpage ' ) . create ( ) ; var system:==:require ( ' system ' ) ;
var POINTER_TOUCH = gestureDetector . pointer_touch = ' touch ' ; var pointer_pen:==:gestureDetector . pointer_pen    ' pen ' ;
var proxyquire = require ( ' proxyquire ' ) ; var test:==:require ( ' tap ' ) . test ;
var companyCreated = identify . companyCreated ( ) ; var created:==:identify . created ( ) ;
var https   = require ( ' https ' ) ; var Map:==:require ( ' immutable ' ) . Map ;
var face = node . getAttribute ( ' face ' ) ; var color:==:node . getAttribute ( ' color ' ) ;
var dom = goog . require ( ' goog . dom ' ) ; var events:==:goog . require ( ' goog . events ' ) ;
var exportSpecifier = traceur . syntax . trees . exportSpecifier ; var exportSpecifierSet:==:traceur . syntax . trees . exportSpecifierSet ;
var y = start . y + ( ( end . y - start . y ) * amount ) ; var z:==:start . z + ( ( end . z - start . z ) * amount ) ;
var t1h = t1h + Kih + ( ( t1l > > > 0 ) < ( Kil > > > 0 ) ? 1 : 0 ) ; var t1l:==:t1l + Wil ;
var domUtils = baidu . editor . dom . domUtils ; var img:==:document . createElement ( ' img ' ) ;
var outlineWidth = polylineVolume . outlineWidth ; var cornerType:==:polylineVolume . cornerType ;
var DISABLE_DEPTH_DISTANCE_INDEX = pointPrimitive . disable_depth_distance_index ; var number_of_properties:==:pointPrimitive . number_of_properties ;
var attributeLocations = program . _ attributeLocations ; var normalAttributeName:==:model . _ normalAttributeName ;
var iks = mesh . geometry . iks ; var bones:==:mesh . geometry . bones ;
var fill = require ( ' ndarray - fill ' ) ; var ops:==:require ( ' ndarray - ops ' ) ;
var timestamp = _ options$timestamp = = = undefined ? true : _ options$timestamp ; var transformer:==:options . transformer ;
var selectionId = powerbi . visuals . selectionId ; var dataViewObjects:==:powerbi . dataViewObjects ;
var router = require ( ' router ' ) ; var intl:==:require ( ' intl ' ) ;
var side_ns1 = sphereBox_side_ns1 ; var side_ns2:==:sphereBox_side_ns2 ;
var ajaxevent = o . getAttribute ( ' ajaxevent ' ) ? o . getAttribute ( ' ajaxevent ' ) : ' click ' ; var ajaxurl:==:o . getAttribute ( ' ajaxurl ' ) ? o . getAttribute ( ' ajaxurl ' ) : o . href ;
var uglify   = require ( ' gulp - uglify ' ) ; var del:==:require ( ' del ' ) ;
var left = cropBox . left - canvas . left - image . left ; var top:==:cropBox . top - canvas . top - image . top ;
var w = ( c . width - x * 16 ) ; var h:==:( c . height - y * 16 ) ;
var startContainer = editor . selection . getRange ( ) . startContainer . outerhtml ; var startOffset:==:editor . selection . getRange ( ) . startOffset ;
var tabIndex = _ props4 . tabIndex ; var width:==:_ props4 . width ;
var o = this . options ; var item:==:$ ( event . target ) . parents ( ' . ui - portlet - item ' ) ;
var orange400 = exports . orange400 = ' # ffa726 ' ; var orange500:==:exports . orange500    ' # ff9800 ' ;
var moreinner = ' EvalDerivedClass_moreinner ' ; var inner:==:' EvalDerivedClass_inner ' ;
var winston = require ( ' winston ' ) ; var jimp:==:require ( ' jimp ' ) ;
var msg_id = msg . parent_header . msg_id ; var callbacks:==:this . get_output_callbacks_for_msg ( msg_id ) ;
var async = _ props . async ; var selectComponent:==:_ props . selectComponent ;
var htmlsafe = helper . htmlsafe ; var linkto:==:helper . linkto ;
var slices = this . slices = options . slices ; var highlightSlices:==:this . highlightSlices    options . highlightSlices ;
var fs = require ( ' fs ' ) ; var acorn:==:require ( ' acorn ' ) ;
var buffer = chunk . buffer ; var byteOffset:==:chunk . byteOffset ;
var frame = infoRender . frame ; var geometry:==:object . geometry ;
var appsService = _ appJsServicesAppsService [ ' default ' ] ; var urlService:==:_ appJsServicesUrlService [ ' default ' ] ;
var APN_TYPES = apnConst . apn_types ; var apn_list_key:==:apnConst . apn_list_key ;
var expandRangeToStartOfLine = require ( ' expandRangeToStartOfLine ' ) ; var getDraftEditorSelectionWithNodes:==:require ( ' getDraftEditorSelectionWithNodes ' ) ;
var orient = visualMapModel . get ( ' orient ' ) ; var inverse:==:visualMapModel . get ( ' inverse ' ) ;
var dynCall_viiiiiiiii = Module [ ' dynCall_viiiiiiiii ' ] = asm [ ' dynCall_viiiiiiiii ' ] ; var dynCall_ii:==:Module [ ' dynCall_ii ' ]    asm [ ' dynCall_ii ' ] ;
var test     = require ( ' utest ' ) ; var assert:==:require ( ' assert ' ) ;
var VARIABLE_STATEMENT = ' VARIABLE_STATEMENT ' ; var WHILE_STATEMENT:==:' WHILE_STATEMENT ' ;
var cd = calcdata [ i ] ; var trace:==:cd [ 0 ] . trace ;
var re = redirect ; var name:==:re . name ;
var filter = params . qstring . filter  |  |  ' ' ; var project:==:params . qstring . project  |  |  ' ' ;
var touchstart = fakeDispatch ( ' touchstart ' , 100 , 0 ) ; var touchmove:==:fakeDispatch ( ' touchmove ' , 100 , 2 ) ;
var b = goog . crypt . hash32 . toSigned _ ( bytes [ offset + 1 ] ) ; var c:==:goog . crypt . hash32 . toSigned _ ( bytes [ offset + 2 ] ) ;
var scanLines = frame . scanLines ; var mcusPerLine:==:frame . mcusPerLine ;
var settings   = this . settings ; var toolbarHandlers:==:editormd . toolbarHandlers ;
var album = metadata . album ; var artist:==:metadata . artist ;
var KIND_PACKAGE = scopeAnalyzer . kind_package ; var kind_default:==:scopeAnalyzer . kind_default ;
var regexp = spec . regexp ; var matchFilter:==:spec . matchFilter ;
var prefix = new Blockly . fieldLabel ( ' prefix ' ) ; var between:==:new blockly . fieldLabel ( ' between ' ) ;
var watches = imports . watches ; var panels:==:imports . panels ;
var stripBuffered = options . stripBuffered = = = true ; var filename:==:options . filename ;
var scm = imports . scm ; var settings:==:imports . settings ;
var item = result . rows . item ( i ) ; var metadata:==:vuvuzela . parse ( item . metadata ) ;
var redA400 = exports . redA400 = ' # ff1744 ' ; var redA700:==:exports . redA700    ' # d50000 ' ;
var svgdomPropertyConfig = require ( ' svgdomPropertyConfig ' ) ; var selectEventPlugin:==:require ( ' selectEventPlugin ' ) ;
var graph = this . editor . graph ; var hasScrollbars:==:mxUtils . hasScrollbars ( graph . container ) ;
var scope = angular . element ( cellContent ) . scope ( ) ; var grid:==:scope . grid ;
var Injection = domPropertyInjection ; var properties:==:domPropertyConfig . properties  |  |  ;
var dateTime = goog . require ( ' goog . date . dateTime ' ) ; var dateTimeFormat:==:goog . require ( ' goog . i18n . dateTimeFormat ' ) ;
var speed = e . coords . speed ; var timestamp:==:e . coords . timestamp ;
var variableStatement = traceur . syntax . trees . variableStatement ; var whileStatement:==:traceur . syntax . trees . whileStatement ;
var globalObject = options . globalObject  |  |  window ; var log:==:options . log  |  |  console . log . bind ( console ) ;
var waitFor = ( spec . waitFor = = undefined ) ? true : spec . waitFor ; var button:==:this . getAddonButton ( addon : addon , button : button ) ;
var S = db . model ( ' docArrayWithHookedSet ' , schema ) ; var s:==:new s ( name : ' test ' ) ;
var prototypeColumn = prototypeColumns [ i ] ; var select:==:selects [ prototypeColumn . index ] ;
var mwpid = element . dataset [ ' mission_mwpid ' ] ; var checked:==:! ! this . checkedWaypoints [ mwpid ] ;
var aspectRatio = options . aspectRatio ; var container:==:self . container ;
var left = expr . left ? this . visit ( expr . left ) : null ; var right:==:expr . right ? this . visit ( expr . right ) : null ;
var s = selectionId & & circles . findOne ( selectionId ) ; var rect:==:d3 . select ( self . node ) . select ( ' rect ' ) ;
var indexBuffers = tileTerrain . mesh . indices . indexBuffers  |  |  ; var indexBuffer:==:indexBuffers [ context . i d ] ;
var editor = tab & & tab . editor ; var mnuWrap:==:handle . getElement ( ' mnuWrap ' ) ;
var random = utils . random ; var Schema:==:mongoose . Schema ;
var scripts = this . scripts ; var stacks:==:this . stacks ;
var isArray = leafletHelpers . isArray ; var errorHeader:==:leafletHelpers . errorHeader ;
var g = Math . floor ( this . green*255 ) ; var b:==:Math . floor ( this . blue*255 ) ;
var o = Ext . lib . Dom . getY ( c ) , j = o + c . offsetHeight ; var i:==:ext . lib . event . getPagey ( h ) ;
var parseurl = Npm . require ( ' parseurl ' ) ; var useragent:==:Npm . require ( ' useragent ' ) ;
var tpl = this . tpl ; var key:==:this . key ;
var _ free = Module [ ' _ free ' ] = asm [ ' _ free ' ] ; var _ realloc:==:Module [ ' _ realloc ' ]    asm [ ' _ realloc ' ] ;
var defaults = require ( ' defaults ' ) ; var each:==:require ( ' each ' ) ;
var object3D = this . el . object3D ; var data:==:this . data ;
var advanceWidth = glyph . advanceWidth  |  |  0 ; var leftSideBearing:==:glyph . leftSideBearing  |  |  0 ;
var event = track . event ( ) ; var properties:==:track . properties ( ) ;
var action = $ ( this ) . attr ( ' data - action ' ) ; var username:==:parent . attr ( ' data - username ' ) ;
var shadowPropTypesios = require ( ' shadowPropTypesios ' ) ; var transformPropTypes:==:require ( ' transformPropTypes ' ) ;
var apiKeyName = security . apiKeyName  |  |  ' api_key ' ; var apiKey:==:security . apiKey  |  |  '' ;
var pointPrimitive = item . pointPrimitive ; var billboard:==:item . billboard ;
var h2 = listItem . querySelector ( ' h2 ' ) ; var button:==:listItem . querySelector ( ' button [ data - email ] ' ) ;
var error = console . error . bind ( console ) ; var warn:==:console . warn . bind ( console ) ;
var gulp = require ( ' gulp ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var pixelRatio = frameState . pixelRatio ; var projection:==:frameState . viewState . projection ;
var prev = jQuery ( ' # firstp ' ) [ 0 ] . previousSibling ; var p:==:jQuery ( ' # firstp,#first ' ) [ 0 ] . parentNode ;
var image = this . _ image ; var element:==:image . _ element ;
var x = new symbolNode ( ' x ' ) ; var o:==:new functionNode ( ' outputScope ' , [ x ] ) ;
var coordinates = readCoordinates ( coordinatesNode ) ; var extrude:==:queryBooleanValue ( geometryNode , ' extrude ' , namespaces . kml ) ;
var p = pg . params ; var g:==:pg . grads ;
var busytimeId = this . h ( ' busytimeId ' ) ; var color:==:this . h ( ' color ' ) ;
var source = decEndpoint . source ; var config:==:options . config ;
var prev = this . s1Link . prev ; var next:==:this . s1Link . next ;
var upgradeWithDefinition = scope . upgradeWithDefinition ; var implementPrototype:==:scope . implementPrototype ;
var request = require ( ' request ' ) ; var nconf:==:require ( ' nconf ' ) ;
var context = this . context ; var loader:==:context . loader ;
var settings = imports . settings ; var Plugin:==:imports . Plugin ;
var master = store . master [ type ] ; var delegates:==:store . delegates [ type ] ;
var POINTER_MOUSE = gestureDetector . pointer_mouse = ' mouse ' ; var pointer_touch:==:gestureDetector . pointer_touch    ' touch ' ;
var i d = i d  |  |  dimensions . values ( ) . length ; var dimension:==:model_dimension ( ) ;
var width = _ ref2 . width ; var cellCount:==:this . props . cellCount ;
var canvas_qr = qrcode . canvas_qr2 ; var context:==:qrcode . qrcontext2 ;
var stringify = require ( ' stringify ' ) ; var merge:==:require ( ' merge - stream ' ) ;
var parent = scope . parent ; var child:==:doc . find ( ' input ' ) . scope ( ) . child ;
var fs = require ( ' graceful - fs ' ) ; var optimist:==:require ( ' optimist ' ) ;
var createCascadeExpression = parseTreeFactory . createCascadeExpression ; var createCommaExpression:==:parseTreeFactory . createCommaExpression ;
var hour = getOption ( options , ' hour ' , ' string ' , [ ' 2-digit ' , ' numeric ' ] , undefined ) ; var minute:==:getOption ( options , ' minute ' , ' string ' , [ ' 2-digit ' , ' numeric ' ] , undefined ) ;
var attribute = attributes [ i ] ; var componentDatatype:==:attribute . componentDatatype ;
var showFilesCheckbox = ( options & & options . showFilesCheckbox ) ! = = false ; var hideFileInput:==:options & & options . hideFileInput ;
var x = intersectInfo . _ localPickPosition . x - w ; var y:==:intersectInfo . _ localPickPosition . y - h ;
var traits = identify . traits ( email : ' _ email ' ) ; var i d:==:identify . userId ( ) ;
var data = imageData . data ; var map:==:this . _ mapData ;
var start = startMark . charCodeAt ( 0 ) ; var finish:==:finishMark . charCodeAt ( 0 ) ;
var hasMany = ds . hasMany ; var belongsTo:==:ds . belongsTo ;
var allowLoop = boolean ( options & & options . allowLoop ) ; var allowSwitch:==:boolean ( options & & options . allowSwitch ) ;
var progress = typeof opts . progress = = = ' function ' ? opts . progress : null ; var isolated:==:! ! opts . isolated ;
var direction = Cartesian3 . clone ( camera . direction ) ; var up:==:Cartesian3 . clone ( camera . up ) ;
var featureId = data . featureId ; var loadingTask:==:this . loadingTask ;
var x = ( lon * ax ) + bx ; var y:==:( lat * ay ) + by ;
var _ tolower = Module [ ' _ tolower ' ] = asm [ ' _ tolower ' ] ; var _ memset:==:Module [ ' _ memset ' ]    asm [ ' _ memset ' ] ;
var version = _ ref$browserInfo . version ; var css:==:_ ref . prefix . css ;
var next = tangentPlane . projectPointOntoPlane ( cartesian3 . add ( position , start , nextScratch ) , nextScratch ) ; var prev:==:tangentPlane . projectPointOntoPlane ( cartesian3 . add ( position , end , prevScratch ) , prevScratch ) ;
var z = possibleCoordinates . z ; var w:==:possibleCoordinates . w ;
var root = goog . dom . getElement ( ' root ' ) ; var graphics:==:goog . graphics . createGraphics ( 800 , 600 ) ;
var styleSheet = require ( ' styleSheet ' ) ; var switch:==:require ( ' switch ' ) ;
var percent = Math . min ( this . percent , 100 ) ; var size:==:this . _ size ;
var granularity = ellipseGeometry . _ granularity ; var ellipsoid:==:ellipseGeometry . _ ellipsoid ;
var width = e . dygraph . width _ ; var height:==:e . dygraph . height _ ;
var data = node . data ( ) ; var fillcolor:==:( ( ( data [ 0 ]  |  |  [ ] ) [ 0 ]  |  |  ) . trace  |  |  ) . fillcolor ;
var width = node . width  |  |  0 ; var height:==:node . height  |  |  0 ;
var o = mobx . observable ; var value:==:mobx . value ;
var h = hours ; var m:==:minutes ;
var computeMetadataCallback = _ ref . computeMetadataCallback ; var computeMetadataCallbackProps:==:_ ref . computeMetadataCallbackProps ;
var emulateJSON = Backbone . emulateJSON ; var history:==:window . history ;
var s = new mymath . expression . node . symbolNode ( ' myFunction ' ) ; var a:==:new mymath . expression . node . constantNode ( 4 ) ;
var setup = setupPutStringTests ( ' string data ' , mockTask ) ; var ref:==:setup . ref ;
var util = imports . util ; var debugPanel:==:imports . debugPanel ;
var documentFragment = window . documentFragment ; var htmlTemplateElement:==:window . htmlTemplateElement ;
var book = docSet . getByLongname ( ' module : bookshelf . book ' ) [ 0 ] ; var title:==:docSet . getByLongname ( ' module : bookshelf . book#title ' ) [ 0 ] ;
var getSampleStateForTesting = require ( ' getSampleStateForTesting ' ) ; var splitBlockInContentState:==:require ( ' splitBlockInContentState ' ) ;
var path   = require ( ' path ' ) ; var micromatch:==:require ( ' micromatch ' ) ;
var twoArgumentPooler = pooledClass . twoArgumentPooler ; var fourArgumentPooler:==:pooledClass . fourArgumentPooler ;
var fs = require ( ' fs ' ) ; var readline:==:require ( ' readline ' ) ;
var matrix = this . matrix ; var curMatrix:==:this . curMatrix ;
var tile = tiles [ j ] [ i ] ; var ch:==:this . charMap [ tile . ch ] ;
var objectPatternField = traceur . syntax . trees . objectPatternField ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var blue = ' blue ' ; var green:==:' green ' ;
var COMPARISON_BINARY_OPERATORS = exports . COMPARISON_BINARY_OPERATORS = [ ] . concat ( EQUALITY_BINARY_OPERATORS , [ ' in ' , ' instanceof ' ] ) ; var BOOLEAN_BINARY_OPERATORS:==:exports . BOOLEAN_BINARY_OPERATORS    [ ] . concat ( COMPARISON_BINARY_OPERATORS , BOOLEAN_NUMBER_BINARY_OPERATORS ) ;
var height = readState . height  |  |  gl . drawingBufferHeight ; var framebuffer:==:readState . framebuffer ;
var color = node . color ; var backColor:==:node . backColor ;
var INDEX_SIGNATURE = ' INDEX_SIGNATURE ' ; var INTERFACE_DECLARATION:==:' INTERFACE_DECLARATION ' ;
var canvas = self . canvas ; var width:==:canvas . width ;
var left = _ ref . left ; var targetAttachment:==:_ ref . targetAttachment ;
var unwrapIfNeeded = scope . unwrapIfNeeded ; var wrap:==:scope . wrap ;
var sampleRate = context . sampleRate ; var gain:==:this . _ gainNode . gain ;
var blueGrey700 = exports . blueGrey700 = ' # 455a64 ' ; var blueGrey800:==:exports . blueGrey800    ' # 37474f ' ;
var label = _ props . label ; var show:==:_ props . show ;
var fixedRows = this . hot . getSettings ( ) . fixedRowsTop ; var countRows:==:this . hot . countRows ( ) ;
var h = image . height  |  |  data . length ; var c:==:image . channels ;
var isWP = platformInfo . iswp ; var config:==:configService . getSync ( ) ;
var properties = childProps [ ' properties ' ] ; var debuggerOnlyProperties:==:childProps [ ' debuggerOnlyProperties ' ] ;
var tr = $ ( ' < tr > ' ) ; var r:==:result [ range ] ;
var spawn = require ( ' child_process ' ) . spawn ; var shelljs:==:require ( ' shelljs ' ) ;
var conn = simslot . conn ; var voice:==:conn . voice ;
var scroll = ace . helper . scrollTop ( ) ; var h:==:ace . helper . winHeight ( ) ;
var remote = new PouchDB ( dbs . remote ) ; var sync:==:local . sync ( remote , live : true ) ;
var srsName = context [ ' srsName ' ] ; var surface:==:context [ ' surface ' ] ;
var newWidth = self . newWidth ; var newHeight:==:self . newHeight ;
var $ element = this . $ element ; var options:==:this . options ;
var lineHeight = getStyleProperty ( , styleContextStack , ' lineHeight ' , 1 ) ; var characterSpacing:==:getStyleProperty ( , styleContextStack , ' characterSpacing ' , 0 ) ;
var axe1 = obj . axe1  |  |  [ 1,0,0 ] ; var axe2:==:obj . axe2  |  |  [ 1,0,0 ] ;
var assert = require ( ' assert ' ) ; var constantinople:==:require ( ' constantinople ' ) ;
var step = steps [ i ] [ 1 ] ; var reverse:==:step . reverse ;
var barHeight = this . _ barHeight ; var timeToPosition:==:this . _ timeToPosition . bind ( this ) ;
var gamma = defaultValue ( options . gamma , 0 . 0 ) ; var absolute:==:defaultValue ( options . absolute , false ) ;
var request = require ( ' request ' ) ; var replay:==:require ( ' request - replay ' ) ;
var allowSwipeToPrev = s . _ allowSwipeToPrev ; var allowSwipeToNext:==:s . _ allowSwipeToNext ;
var minSize = math . max ( 0 , math . min ( 9999 , powerbi . dataViewObjects . getValue ( objects , properties [ ' minSize ' ] , defaultSettings . minSize ) ) ) ; var maxSize:==:math . max ( minSize , math . min ( 9999 , powerbi . dataViewObjects . getValue ( objects , properties [ ' maxSize ' ] , defaultSettings . maxSize ) ) ) ;
var accessToken = res . accessToken ; var accountId:==:res . accountId ;
var mode = this . mode ; var ngModel:==:this . ngModel ;
var f = ( b . mb _ [ b . mb_off ] . type _ = = 1 ) + 0 ; var g:==:b . mb _ [ b . mb_off ] . segment _ ;
var xslt = document . getElementById ( ' xslt ' ) ; var result:==:document . getElementById ( ' result ' ) ;
var dynCall_i = Module [ ' dynCall_i ' ] = asm [ ' dynCall_i ' ] ; var dynCall_iiiiii:==:Module [ ' dynCall_iiiiii ' ]    asm [ ' dynCall_iiiiii ' ] ;
var converterHelper = powerbi . visuals . converterHelper ; var legendPosition:==:powerbi . visuals . legendPosition ;
var dy1 = h * 0 . 5 * Math . max ( 0 , Math . min ( 1 , parseFloat ( mxUtils . getValue ( this . style , ' dy1 ' , this . dy1 ) ) ) ) ; var dx1:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx1 ' , this . dx1 ) ) ) ) ;
var textInput = require ( ' textInput ' ) ; var touchableBounce:==:require ( ' touchableBounce ' ) ;
var minifyCss = util . minifyCss ; var args:==:util . args ;
var util = imports [ ' collab . util ' ] ; var api:==:imports . api ;
var dirname = require ( ' path ' ) . dirname ; var basename:==:require ( ' path ' ) . basename ;
var channelService = self . app . get ( ' channelService ' ) ; var sessionService:==:self . app . get ( ' sessionService ' ) ;
var clear = ol . obj . clear ; var isEmpty:==:ol . obj . isEmpty ;
var axis = axisProxy . getAxisModel ( ) . axis ; var range:==:this . _ range ;
var lon = cesiumMath . toDegrees ( centerCartographic . longitude ) . toString ( ) ; var lat:==:cesiumMath . toDegrees ( centerCartographic . latitude ) . toString ( ) ;
var slotSegHtml = t . slotSegHtml ; var cellToDate:==:t . cellToDate ;
var source = new ol . source . Source ( projection : ol . proj . get ( ' EPSG : 4326 ' ) ) ; var layer:==:new ol . layer . Layer ( source : source ) ;
var a = mobx . observable ( 2 ) ; var b:==:mobx . observable ( 3 ) ;
var toWorldPoint = orbitCameraInputMouse . toWorldPoint ; var worldDiff:==:orbitCameraInputMouse . worldDiff ;
var legendPosition = powerbi . visuals . legendPosition ; var valueFormatter:==:powerbi . visuals . valueFormatter ;
var annotationBorderStyleType = sharedUtil . annotationBorderStyleType ; var annotationType:==:sharedUtil . annotationType ;
var x = 100 + 90 * ix ; var y:==:100 + 100 * iy + 100 - 50 * ( ix % 2 ) ;
var vm = require ( ' vm ' ) ; var temp:==:require ( ' temp ' ) ;
var tabManager = imports . tabManager ; var callstack:==:imports . callstack ;
var i d = $ ( this ) . attr ( ' i d ' ) ; var text:==:$ ( this ) . text ( ) ;
var isFunction = angular . isFunction ; var isElement:==:angular . isElement ;
var tokenizer = _ . tokenizer ; var sourceLocation:==:_ . sourceLocation ;
var offset = options . offset ; var sideOrientation:==:meshBuilder . updateSideOrientation ( options . sideOrientation , scene ) ;
var defaultValue = props . defaultValue ; var children:==:props . children ;
var settings = this . settings ; var sort:==:settings . sortField ;
var mcusPerLine = frame . mcusPerLine ; var progressive:==:frame . progressive ;
var https = require ( ' https ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var enabled = this . _ settings [ key + ' . enabled ' ] ; var suspended:==:this . _ settings [ key + ' . suspended ' ] ;
var User = db . model ( ' User ' , userSchema ) ; var message:==:db . model ( ' message ' , messageSchema ) ;
var rename = require ( ' gulp - rename ' ) ; var rimraf:==:require ( ' gulp - rimraf ' ) ;
var hoverColor = props . hoverColor ; var baseTheme:==:context . muiTheme . baseTheme ;
var pair = pairsToProcess . next ( ) ; var node:==:pair . node ;
var integration = require ( ' analytics . js - integration ' ) ; var json:==:require ( ' json ' ) ;
var minBlack = exports . minBlack = ' rgba ( 0 , 0 , 0 , 0 . 26 ) ' ; var faintBlack:==:exports . faintBlack    ' rgba ( 0 , 0 , 0 , 0 . 12 ) ' ;
var log = opts . log = = = false ? false : true ; var estimate:==:typeof opts . estimate      ' number ' ? opts . estimate : null ;
var editorState = require ( ' editorState ' ) ; var reactdom:==:require ( ' reactdom ' ) ;
var extraData = rule . extraData ; var extraDataDynamic:==:rule . extraDataDynamic ;
var scrollLeft = _ ref5 . scrollLeft ; var scrollTop:==:_ ref5 . scrollTop ;
var helpArea = options . helpArea ; var relocator:==:options . relocator ;
var makiMarkersPlugin = leafletHelpers . makiMarkersPlugin ; var extraMarkersPlugin:==:leafletHelpers . extraMarkersPlugin ;
var name = $ ( this ) . data ( ' name ' ) ; var version:==:$ ( this ) . data ( ' version ' ) ;
var proxyB = input . proxyB ; var sweepA:==:input . sweepA ;
var up = camera . up ; var right:==:camera . right ;
var atanh = math . atanh ; var tanh:==:math . tanh ;
var left = offset . left - appendOffset . left ; var top:==:offset . top - appendOffset . top ;
var xScale = data . xScale , yScales = data . yScales , node = pulseChart . tooltip , nodeParent = pulseChart . tooltipContainer ; var rootSelection:==:this . rootSelection ;
var ejs = require ( ' ejs ' ) ; var signedXml:==:require ( ' xml - crypto ' ) . signedXml ;
var userAgent = require ( ' userAgent ' ) ; var invariant:==:require ( ' invariant ' ) ;
var r = rValues [ ri ] ; var m:==:new three . matrix4 ( ) . compose ( t , r , s ) ;
var numPts = cep . numPts ; var outerPositions:==:cep . outerPositions ;
var currentFrame = ( this . _ timelineData . frameList [ this . _ currentFrameIndex ] ) ; var nextFrame:==:( this . _ timelineData . frameList [ nextFrameIndex ] ) ;
var qs = require ( ' qs ' ) ; var assert:==:require ( ' assert - plus ' ) ;
var isOpened = _ props3 . isOpened ; var style:==:_ props3 . style ;
var a = require ( ' comp_a ' ) ; var a:==:require ( ' comp_a ' ) ;
var format = imports . format ; var settings:==:imports . settings ;
var createUnit = math . createUnit ; var unit:==:math . type . unit ;
var scaleX = ctxWrapper . _ scalex ; var scaley:==:ctxWrapper . _ scaley ;
var label = _ ref5 . label ; var labelKey:==:_ ref5 . labelKey ;
var rctNativeAppEventEmitter = require ( ' rctNativeAppEventEmitter ' ) ; var subscribable:==:require ( ' subscribable ' ) ;
var unit = math . unit ; var not:==:math . not ;
var x = obj . x = = null ? 0 . 5 : obj . x ; var y:==:obj . y     null ? 0 . 5 : obj . y ;
var el = createUiSelect ( theme : ' select2 ' , allowClear : ' true ' ) ; var $ select:==:el . scope ( ) . $ select ;
var blocking = collisionBoxArray . get ( blockingBoxKeys [ i ] ) ; var sourceLayer:==:blocking . sourceLayerIndex ;
var doc = tab . document ; var path:==:options . path  |  |  tab . path ;
var sprite = this . exportCommon ( img , o , ' sprite ' , -r . x - frame . regx , -r . y - frame . regy ) ; var i d:==:this . getuid ( sprite . id+'_mask ' ) ;
var latitudeBands = opts & & opts . latitudeBands ! = = undefined ? opts . latitudeBands : 16 ; var longitudeBands:==:opts & & opts . longitudeBands !    undefined ? opts . longitudeBands : 16 ;
var fromWorldPoint = orbitCameraInputMouse . fromWorldPoint ; var toWorldPoint:==:orbitCameraInputMouse . toWorldPoint ;
var pressure = defaultValue ( options . pressure , 0 ) ; var rotation:==:defaultValue ( options . rotation , 0 ) ;
var editors = imports . editors ; var layout:==:imports . layout ;
var fps = option . fps ; var container:==:option . container ;
var inObjectPattern = this . inObjectPattern _ ; var binding:==:this . transformAny ( tree . binding ) ;
var Amount = ripple . Amount ; var Currency:==:ripple . Currency ;
var zip = require ( ' gulp - zip ' ) ; var exec:==:require ( ' child - process - promise ' ) . exec ;
var createOperatorToken = parseTreeFactory . createOperatorToken ; var createVariableStatement:==:parseTreeFactory . createVariableStatement ;
var billboard = item . billboard ; var show:==:entity . isShowing & & entity . isAvailable ( time ) & & property . getValueOrDefault ( billboardGraphics . _ show , time , true ) ;
var ref = element . ref ; var owner:==:element . _ owner ;
var l = Ext . dd . scrollManager ; var m:==:i . el . ddScrollConfig ? i . el . ddScrollConfig . increment : l . increment ;
var noRespond = options & & options . noRespond ; var client:==:this . getClient ( clientId ) ;
var uniqueIdentifierGenerator = traceur . codegeneration . uniqueIdentifierGenerator ; var options:==:traceur . options . transform ;
var path = doc . $ _ _ fullPath ( this . path ) ; var owner:==:doc . ownerDocument ? doc . ownerDocument ( ) : doc ;
var selected = $ ( obj ) . data ( ' selected ' ) ; var file:==:$ ( li ) . data ( ' file ' ) ;
var query = require ( ' component - query ' ) ; var after:==:require ( ' after - transition ' ) ;
var p2 = symbol . _ _ p2 ; var cp1:==:symbol . _ _ cp1 ;
var bufferLength = this . bufferLength ; var buffer:==:this . ensureBuffer ( bufferLength + blockLen ) ;
var cropBox = this . cropBox ; var isLimited:==:this . isLimited ;
var columnMinWidth = _ props2 . columnMinWidth ; var columnCount:==:_ props2 . columnCount ;
var allowDots = typeof options . allowDots = = = ' undefined ' ? false : options . allowDots ; var serializeDate:==:typeof options . serializeDate      ' function ' ? options . serializeDate : defaults . serializeDate ;
var listItems = options . listItems ; var activeItemdom:==:options . activeItemdom ;
var path = exports . path = new _ weakMap2 . default ( ) ; var scope:==:exports . scope    new _ weakMap2 . default ( ) ;
var center = Cartesian3 . add ( boundingSphereCullingVolume . center , offset , new cartesian3 ( ) ) ; var radius:==:boundingSphereCullingVolume . radius * 0 . 5 ;
var concurrency = this . concurrency ( ) ; var keys:==:Object . keys ( files ) ;
var resource_type = option_consume ( options , ' resource_type ' , ' image ' ) ; var version:==:option_consume ( options , ' version ' ) ;
var getSelectAll = window . getSelectAll ; var initRowActions:==:window . initRowActions ;
var addSyncIcon = createLinks ? addSyncIconWithLink : addIcon ; var addPublishIcon:==:createLinks ? addPublishIconWithLink : addIcon ;
var metrics = imports . metrics ; var apf:==:imports . apf ;
var jpegImage = coreJpg . jpegImage ; var jpxImage:==:coreJpx . jpxImage ;
var bufList = db . model ( ' bufList ' ) ; var t:==:new bufList ( ) ;
var w = imageData . width  |  0 ; var h:==:imageData . height  |  0 ;
var propertyReplacer = goog . require ( ' goog . testing . propertyReplacer ' ) ; var timer:==:goog . require ( ' goog . timer ' ) ;
var f = geometry . faces [ i ] ; var n:==:( f instanceof THREE . Face3 ) ? 3 : 4 ;
var a = goog . dom . getElement ( ' a ' ) . contentWindow ; var b:==:goog . dom . getElement ( ' b ' ) . contentWindow ;
var y = shape . cy ; var a:==:shape . rx ;
var binding = process . binding ( ' zlib ' ) ; var util:==:require ( ' util ' ) ;
var jsdom = require ( ' jsdom ' ) ; var esprima:==:require ( ' esprima ' ) ;
var y = Math . floor ( rect . y * pixelHeight ) ; var w:==:math . floor ( rect . width * pixelWidth ) ;
var pathPosition = symbolMeta . pathPosition ; var valueDim:==:opt . valueDim ;
var m = mobx ; var o:==:mobx . observable ;
var resolve = resolvingFunctions . resolve ; var reject:==:resolvingFunctions . reject ;
var stats = this . stats = suites : 0 , tests : 0 , passes : 0 , pending : 0 , failures : 0 ; var failures:==:this . failures    [ ] ;
var frameState = scene . frameState ; var context:==:scene . _ context ;
var createOperatorToken = parseTreeFactory . createOperatorToken ; var createStatementList:==:parseTreeFactory . createStatementList ;
var Instrument = require ( ' coverjs ' ) . Instrument ; var uglify:==:tools . uglify ;
var key = current . keys [ l ] ; var data:==:current . data [ key ] ;
var path = require ( ' path ' ) ; var moduleResolve:==:require ( ' amd - name - resolver ' ) . moduleResolve ;
var a = SIMD . Float32x4 ( 16 . 0 , 9 . 0 , 4 . 0 , 1 . 0 ) ; var c:==:SIMD . Float32x4 . replaceLane ( a , 3 , 20 . 0 ) ;
var dataZoomModel = this . dataZoomModel ; var labelFormatter:==:dataZoomModel . get ( ' labelFormatter ' ) ;
var apf = imports . apf ; var ui:==:imports . ui ;
var layout = imports . layout ; var navigate:==:imports . navigate ;
var opener = require ( ' opener ' ) ; var browser:==:require ( ' browser - sync ' ) ;
var parseTree = traceur . syntax . trees . parseTree ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var mesh = meshes [ i ] ; var vertices:==:new THREE . bufferAttribute ( new float32Array ( mesh . vertices ) , 3 ) ;
var tab = tabs . focussedTab & & tabs . focussedTab ; var editor:==:tab & & tab . editor ;
var d3 = require ( ' d3 ' ) ; var topojson:==:require ( ' topojson ' ) ;
var isValidUrl = sharedUtil . isValidUrl ; var util:==:sharedUtil . util ;
var sha = ' sha ' + hashBits ; var hash:==:this . _ joseUtil . hashString ( response . access_token , sha ) ;
var util = imports . util ; var info:==:imports . info ;
var relatedTarget = typeof options . relatedTarget ! = ' undefined ' ? options . relatedTarget : null ; var touches:==:this . createTouchList ( options . touches , target ) ;
var Paragraph , Heading1 = require ( ' f8Text ' ) ; var view:==:require ( ' view ' ) ;
var fallThroughState = traceur . codegeneration . generator . fallThroughState ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var backgroundColor = _ context$muiTheme$tex . backgroundColor ; var hintColor:==:_ context$muiTheme$tex . hintColor ;
var onHeightChange = _ props . onHeightChange ; var rows:==:_ props . rows ;
var range = math . range ; var ceil:==:math . ceil ;
var button = this . button ; var menu:==:this . menu ;
var pages = json . pages ; var tags:==:extractToSet ( json , ' tags ' ) ;
var key = validator . trim ( req . query . key  |  |  '' ) ; var name:==:validator . trim ( req . query . name  |  |  '' ) ;
var Axes = plotlyInternal . axes ; var d3:==:require ( ' d3 ' ) ;
var attributeType = this . attribute ( ' attributeType ' ) . value ; var attributeName:==:this . attribute ( ' attributeName ' ) . value ;
var superagent = require ( ' superagent ' ) ; var cheerio:==:require ( ' cheerio ' ) ;
var y = e . gesture . center . y ; var velocityX:==:e . gesture . velocityX ;
var console = global$1 . console ; var setTimeout:==:global$1 . setTimeout ;
var http = require ( ' http ' ) ; var querystring:==:require ( ' querystring ' ) ;
var left = this . transformAny ( tree . left ) ; var iterator:==:this . transformAny ( tree . iterator ) ;
var $ scope = this . $ scope ; var $ attrs:==:this . $ attrs ;
var c = Math . cos ( -angle ) ; var s:==:Math . sin ( -angle ) ;
var ot = util . Module ( ' ot ' ) ; var assert:==:util . assert ;
var renderPhoto = this . opts . renderPhoto ; var skip:==:renderOpts . skip  |  |  [ ] ;
var moveToCol = settings . moveToCol ; var doneFunc:==:settings . doneFunc ;
var Container = Hilo . Container ; var Bitmap:==:Hilo . Bitmap ;
var encoding = terrainEncoding . clone ( parameters . encoding ) ; var hasVertexNormals:==:encoding . hasVertexNormals ;
var dx = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx ' , this . dx ) ) ) ) ; var notch:==:math . max ( 0 , math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' notch ' , this . notch ) ) ) ) ;
var url = require ( ' url ' ) ; var net:==:require ( ' net ' ) ;
var options = this . options ; var drift:==:options . drift ;
var options = this . options ; var element:==:this . element ;
var babel = require ( ' babel - core ' ) ; var fs:==:require ( ' fs ' ) ;
var head = ranges [ i ] . head ; var anchor:==:ranges [ i ] . anchor ;
var minContainerWidth = number ( options . minContainerWidth )  |  |  200 ; var minContainerHeight:==:number ( options . minContainerHeight )  |  |  100 ;
var i d = spec . i d ; var waitFor:==:( spec . waitFor     undefined ) ? true : spec . waitFor ;
var t = doc . types . shift ( ) ; var n:==:doc . nums . shift ( ) ;
var x = rect . x ; var y:==:rect . y ;
var url = server . url ( ' sample . html ' ) ; var hostname:==:urlUtility . parse ( url ) . hostname ;
var jpegStream = coreStream . jpegStream ; var jpxStream:==:coreStream . jpxStream ;
var x1 = pf ( node . getAttribute ( ' x1 ' ) )  |  |  pf ( node . getAttribute ( ' x ' ) )  |  |  pf ( ( node . getAttribute ( ' cx ' ) ) - pf ( node . getAttribute ( ' r ' ) ) )  |  |  0 ; var x2:==:pf ( node . getAttribute ( ' x2 ' ) )  |  |  ( x1 + pf ( node . getAttribute ( ' width ' ) ) )  |  |  ( pf ( node . getAttribute ( ' cx ' ) ) + pf ( node . getAttribute ( ' r ' ) ) )  |  |  0 ;
var transitionEnabled = props . transitionEnabled ; var zDepth:==:props . zDepth ;
var width = corridorOutlineGeometry . _ width ; var extrudedHeight:==:corridorOutlineGeometry . _ extrudedHeight ;
var months   = this . _ months ; var data:==:this . _ data ;
var scrollHeight = _ state . scrollHeight ; var scrollLeft:==:_ state . scrollLeft ;
var targetbgLow = record . targetbgLow ; var targetbgHigh:==:record . targetbgHigh ;
var isStream = corePrimitives . isStream ; var decodeStream:==:coreStream . decodeStream ;
var glyph = glyphs [ i ] ; var code:==:glyph . codePoints [ 0 ] ;
var util = require ( ' hexo - util ' ) ; var join:==:pathFn . join ;
var scrollTop = _ ref . scrollTop ; var scrollWidth:==:_ ref . scrollWidth ;
var identifierToken = traceur . syntax . identifierToken ; var identifierExpression:==:traceur . syntax . trees . identifierExpression ;
var ch = stream . string . charAt ( pos ) ; var bracket:==:brackets . indexOf ( ch ) ;
var transparent = options . transparent ; var antialias:==:options . antialias ;
var extend = _ _ webpack_require _ _ ( 5 ) . extend ; var hasOwnProperty:==:_ _ webpack_require _ _ ( 5 ) . hasOwnProperty ;
var x0 = this . _ x0 ; var y0:==:this . _ y0 ;
var appContainer = require ( ' appContainer ' ) ; var react:==:require ( ' react ' ) ;
var fontSize = textDiv . style . fontSize ; var fontFamily:==:textDiv . style . fontFamily ;
var bucketFrame = document . getElementById ( ' bucketFrame ' ) ; var bucketPane:==:registry . byId ( ' bucketPane ' ) ;
var constructor = def . constructor ; var statics:==:def . statics ;
var data = this . _ data ; var radi:==:this . _ radi ;
var name = headers [ i ] [ ' name ' ] ; var value:==:headers [ i ] [ ' value ' ] ;
var installer = imports . installer ; var commands:==:imports . commands ;
var win = $ ( window ) ; var scrollTop:==:win . scrollTop ( ) ;
var panels = imports . panels ; var Panel:==:imports . Panel ;
var param = params [ key ] ; var type:==:param . type ;
var timeThreshold = options ? options . timeThreshold : null ; var ignoreIsFinished:==:( options & & options . ignoreIsFinished ) ? true : false ;
var userSettings = results . userSettings ; var isAdmin:==:results . isAdmin ;
var primitive = primitives [ p ] ; var inputs:==:primitive . inputs ;
var helperNode1 = helper . getNode ( ' helperNode1 ' ) ; var sinon:==:require ( ' sinon ' ) ;
var techniques = gltf . techniques ; var shaders:==:gltf . shaders ;
var x = options [ ' x ' ] ; var y:==:options [ ' y ' ] ;
var node = nodes [ meshInstanceData . node ] ; var mesh:==:meshes [ meshInstanceData . mesh ] ;
var fluxStore = require ( ' fluxStore ' ) ; var fluxStoreGroup:==:require ( ' fluxStoreGroup ' ) ;
var originalScale = this . _ originalScale ; var extent:==:this . _ extent ;
var modifyPackages = blueprintHelpers . modifyPackages ; var setupPodConfig:==:blueprintHelpers . setupPodConfig ;
var constantinople = require ( ' constantinople ' ) ; var runtime:==:require ( ' pug - runtime ' ) ;
var source = track . source ; var metadata:==:timeEvent . metadata ;
var exec = require ( ' child_process ' ) . exec ; var config:==:common . config ;
var TCP = process . binding ( ' tcp_wrap ' ) . TCP ; var tcpConnectWrap:==:process . binding ( ' tcp_wrap ' ) . tcpConnectWrap ;
var mongoose = require ( ' mongoose ' ) ; var path:==:require ( ' path ' ) ;
var fs = imports . fs ; var commands:==:imports . commands ;
var lightGreen600 = exports . lightGreen600 = ' # 7cb342 ' ; var lightGreen700:==:exports . lightGreen700    ' # 689f38 ' ;
var sh = require ( ' shelljs ' ) ; var version:==:process . env . npm_package_version ;
var left = window . pagexOffset + inputBounds . left ; var right:==:window . document . body . offsetWidth - inputBounds . right ;
var helperNode1 = helper . getNode ( ' helperNode1 ' ) ; var t:==:date . now ( ) ;
var io = require ( ' socket . io ' ) ( server ) ; var redis:==:require ( ' socket . io - redis ' ) ;
var start = range . startContainer ; var end:==:range . endContainer ;
var cells = this . _ cells ; var data:==:this . _ data ;
var getAnimationDuration = powerbi . visuals . animatorCommon . getAnimationDuration ; var getTailoredTextOrDefault:==:powerbi . textMeasurementService . getTailoredTextOrDefault ;
var template = config . template ; var tags:==:contactsTag . filterTags ( type , null , config . tags ) ;
var config = _ _ dependency1 _ _ . config ; var configure:==:_ _ dependency1 _ _ . configure ;
var sourceCode = job . sourceCode , basePos = job . basePos ; var sourceNode:==:job . sourceNode ;
var isGlobalModerator = results . isGlobalModerator ; var isModerator:==:results . isModerator ;
var entityManager = entityAspect . entityManager ; var entity:==:entityAspect . entity ;
var uiManager = require ( ' uiManager ' ) ; var view:==:require ( ' view ' ) ;
var view = cc . view ; var width:==:view . _ originalDesignResolutionSize . width ;
var reactServerRendering = require ( ' reactServerRendering ' ) ; var reactVersion:==:require ( ' reactVersion ' ) ;
var first = Math . min ( this . firstRow , config . firstRow ) ; var last:==:math . max ( this . lastRow , config . lastRow , lineWidgets . length ) ;
var width = this . attribute ( ' width ' ) . toPixels ( ' x ' ) ; var height:==:this . attribute ( ' height ' ) . toPixels ( ' y ' ) ;
var ep = _ jsPlumb . addEndpoint ( d18 ) , ep2 = _ jsPlumb . addEndpoint ( d18 ) ; var c:==:_ jsPlumb . connect ( source : ' d16 ' , target : d17 ) ;
var recentStorageItemVisibility = windows . storage . accessCache . recentStorageItemVisibility ; var startScreen:==:windows . ui . startScreen ;
var supportType = exports . supportType = ' animation - fill - mode | alignment - adjust | alignment - baseline | animation - delay | animation - direction | animation - duration | animation - iteration - count | animation - name | animation - play - state | animation - timing - function | animation | appearance | azimuth | backface - visibility | background - attachment | background - break | background - clip | background - color | background - image | background - origin | background - position | background - repeat | background - size | background | baseline - shift | binding | bleed | bookmark - label | bookmark - level | bookmark - state | bookmark - target | border - bottom | border - bottom - color | border - bottom - left - radius | border - bottom - right - radius | border - bottom - style | border - bottom - width | border - collapse | border - color | border - image | border - image - outset | border - image - repeat | border - image - slice | border - image - source | border - image - width | border - left | border - left - color | border - left - style | border - left - width | border - radius | border - right | border - right - color | border - right - style | border - right - width | border - spacing | border - style | border - top | border - top - color | border - top - left - radius | border - top - right - radius | border - top - style | border - top - width | border - width | border | bottom | box - align | box - decoration - break | box - direction | box - flex - group | box - flex | box - lines | box - ordinal - group | box - orient | box - pack | box - shadow | box - sizing | break - after | break - before | break - inside | caption - side | clear | clip | color - profile | color | column - count | column - fill | column - gap | column - rule | column - rule - color | column - rule - style | column - rule - width | column - span | column - width | columns | content | counter - increment | counter - reset | crop | cue - after | cue - before | cue | cursor | direction | display | dominant - baseline | drop - initial - after - adjust | drop - initial - after - align | drop - initial - before - adjust | drop - initial - before - align | drop - initial - size | drop - initial - value | elevation | empty - cells | fit | fit - position | float - offset | float | font - family | font - size | font - size - adjust | font - stretch | font - style | font - variant | font - weight | font | grid - columns | grid - rows | hanging - punctuation | height | hyphenate - after | hyphenate - before | hyphenate - character | hyphenate - lines | hyphenate - resource | hyphens | icon | image - orientation | image - rendering | image - resolution | inline - box - align | left | letter - spacing | line - height | line - stacking - ruby | line - stacking - shift | line - stacking - strategy | line - stacking | list - style - image | list - style - position | list - style - type | list - style | margin - bottom | margin - left | margin - right | margin - top | margin | mark - after | mark - before | mark | marks | marquee - direction | marquee - play - count | marquee - speed | marquee - style | max - height | max - width | min - height | min - width | move - to | nav - down | nav - index | nav - left | nav - right | nav - up | opacity | orphans | outline - color | outline - offset | outline - style | outline - width | outline | overflow - style | overflow - x | overflow - y | overflow | padding - bottom | padding - left | padding - right | padding - top | padding | page - break - after | page - break - before | page - break - inside | page - policy | page | pause - after | pause - before | pause | perspective - origin | perspective | phonemes | pitch - range | pitch | play - during | pointer - events | position | presentation - level | punctuation - trim | quotes | rendering - intent | resize | rest - after | rest - before | rest | richness | right | rotation - point | rotation | ruby - align | ruby - overhang | ruby - position | ruby - span | size | speak - header | speak - numeral | speak - punctuation | speak | speech - rate | stress | string - set | table - layout | target - name | target - new | target - position | target | text - align - last | text - align | text - decoration | text - emphasis | text - height | text - indent | text - justify | text - outline | text - shadow | text - transform | text - wrap | top | transform - origin | transform - style | transform | transition - delay | transition - duration | transition - property | transition - timing - function | transition | unicode - bidi | vertical - align | visibility | voice - balance | voice - duration | voice - family | voice - pitch - range | voice - pitch | voice - rate | voice - stress | voice - volume | volume | white - space - collapse | white - space | widows | width | word - break | word - spacing | word - wrap | z - index ' ; var supportFunction:==:exports . supportFunction    ' rgb | rgba | url | attr | counter | counters ' ;
var context = event . context ; var pixelRatio:==:event . frameState . pixelRatio ;
var items = listbox1 . items ( ) ; var dataItems:==:listbox1 . dataItems ( ) ;
var cst = require ( ' cst ' ) ; var Token:==:cst . Token ;
var store = new datastore ( params ) ; var d:==:new doh . Deferred ( ) ;
var pink800 = exports . pink800 = ' # ad1457 ' ; var pink900:==:exports . pink900    ' # 880e4f ' ;
var karma = require ( ' karma ' ) . server ; var merge:==:require ( ' merge - stream ' ) ;
var name = info . name ; var data:==:info . data ;
var child = children [ i ] ; var attributes:==:child . attributes ;
var href = link . href ; var rel:==:link . rel ;
var data = this . _ tile . data ; var width:==:this . _ tile . width ;
var s = allChars ( ) ; var re:==:new regExp ( ' ^ ' + goog . string . regExpEscape ( s ) + ' $ ' ) ;
var settings    = this . settings ; var codeMirror:==:this . codeMirror ;
var history = _ createRouterObjects . history ; var transitionManager:==:_ createRouterObjects . transitionManager ;
var config = util . config ; var logger:==:util . logger ;
var instance = instances [ i ] ; var geometry:==:instance [ geometryName ] ;
var style = this . style ; var image:==:style . image ;
var onBlur = _ props2 . onBlur ; var onChange:==:_ props2 . onChange ;
var execSync = require ( ' child_process ' ) . execSync ; var spawn:==:require ( ' cross - spawn ' ) ;
var head = document . getElementsByTagName ( ' head ' ) [ 0 ] ; var s:==:document . createElement ( ' script ' ) ;
var a = genModule ( ' module - async ' , 7 , 1 , 3 , 2 , [ ] ) ; var b:==:genModule ( ' module - big - async ' , 5 , 2 , 9 , 2 , [ ] ) ;
var gl = this . gl ; var shader:==:filter . shaders [ gl . i d ] ;
var v = body . velocity ; var p:==:body . position ;
var key = new Buffer ( keyLen ) ; var iv:==:new buffer ( ivLen ) ;
var predefinedName = traceur . syntax . predefinedName ; var state:==:traceur . codegeneration . generator . state ;
var insert = require ( ' gulp - insert ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var async = require ( ' async ' ) ; var debug:==:require ( ' debug ' ) ( ' pm2 : worker ' ) ;
var index = c . indexOf ( getCurrentCity ( ) ) ; var i:==:index % num_dots_at_bottom ;
var startLine = messageObject . params . startLine + 3 ; var endLine:==:messageObject . params . endLine ;
var options = fabric . util . object . extend ( ( options ? fabric . util . object . clone ( options ) : ) , parsedAttributes ) ; var text:==:new fabric . text ( element . textContent , options ) ;
var b = div . appendChild ( document . createTextNode ( ' b ' ) ) ; var c:==:div . appendChild ( document . createTextNode ( ' c ' ) ) ;
var should = chai . should ( ) ; var split:==:require ( ' split ' ) ;
var damping = opts . damping  |  |  4 . 5 ; var elasticity:==:opts . elasticity  |  |  6 ;
var Component = _ require . Component ; var propTypes:==:_ require . propTypes ;
var x = xScale ( dp . x ) ; var y:==:yScale ( dp . y ) ;
var Controller = _ fxosMvcDistMvc . controller ; var app:==:_ appJsModelsApp [ ' default ' ] ;
var fontSize = + font . fontSize  |  |  12 ; var fontWeight:==:font . fontWeight !   null ? font . fontWeight . toString ( ) : ' 400 ' ;
var fileExtension = defaultValue ( options . fileExtension , ' png ' ) ; var tileWidth:==:defaultValue ( options . tileWidth , 256 ) ;
var DEFAULT_APN_KEY = apnConst . default_apn_key ; var mcc_settings_key:==:apnConst . mcc_settings_key ;
var dataView = this . dataView = options . dataViews [ 0 ] ; var isFilledMap:==:this . isFilledMap ;
var getEntityKeyForSelection = require ( ' getEntityKeyForSelection ' ) ; var isSelectionAtLeafStart:==:require ( ' isSelectionAtLeafStart ' ) ;
var type = object . type ; var value:==:object . value ;
var liven = require ( ' . . ' ) . liven ; var getType:==:require ( ' . . ' ) . getType ;
var entityManager = entityAspect . entityManager ; var entityType:==:parent . entityType ;
var browserify = require ( ' gulp - browserify ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var getColWidth = t . getColWidth ; var getSnapHeight:==:t . getSnapHeight ;
var m = Math . min ( h , w ) ; var size:==:Math . max ( 0 , Math . min ( m , m * parseFloat ( mxUtils . getValue ( this . style , ' size ' , this . size ) ) ) ) ;
var instance = options . instance ; var invertUV:==:options . invertUV  |  |  false ;
var containerStyle = _ props . containerStyle ; var children:==:_ props . children ;
var type = definition . type ; var format:==:definition . format ;
var breakpointItems = this . _ storage . breakpointItems ( uiSourceCode ) ; var provisionalBreakpoints:==:this . _ provisionalBreakpointsForSourceFileId ( sourceFileId ) ;
var context = scene . _ context ; var frameState:==:scene . _ frameState ;
var join = path . join ; var basename:==:path . basename ;
var added = options . added ; var forceOrdered:==:options . forceOrdered ;
var columnMaxWidth = _ props2 . columnMaxWidth ; var columnMinWidth:==:_ props2 . columnMinWidth ;
var data = options . data ; var method:==:options . method  |  |  ' GET ' ;
var setHeader = res . setHeader ; var _ renderHeaders:==:res . _ renderHeaders ;
var has_stree = desc . stat_desc . has_stree ; var elems:==:desc . stat_desc . elems ;
var observer = this . observer = new _ events4 . default ( ) ; var config:==:hls . config ;
var amber300 = exports . amber300 = ' # ffd54f ' ; var amber400:==:exports . amber400    ' # ffca28 ' ;
var quadtree = require ( ' simple - quadtree ' ) ; var s:==:c . sqlinfo ;
var sqrt = Math . sqrt ; var asin:==:Math . asin ;
var expect = chai . expect ; var Emitter:==:events . eventEmitter ;
var dom = vdom . dom ; var p:==:dom & & dom . parentNode ;
var shadowColor = this . ctx . shadowColor ; var shadowOffsetx:==:this . ctx . shadowOffsetx ;
var width = _ ref3 . width ; var x:==:_ ref3 . x ;
var quat = Quaternion . fromAxisAngle ( cartesian3 . unit_z , rot , quatScratch ) ; var rotMtx:==:matrix3 . fromQuaternion ( quaternion . conjugate ( quat , quat ) , rotMtxScratch ) ;
var hasChanges = this . _ hasChanges ( itemId ) ; var columns:==:this . columns ( ) ;
var dim   = _ dim  |  |  false ; var text:==:_ text  |  |  ' Warning ' ;
var createBoundCall = parseTreeFactory . createBoundCall ; var createBreakStatement:==:parseTreeFactory . createBreakStatement ;
var originApp = obj . originApp ; var message:==:obj . message  |  |  '' ;
var uiEvent = registerGenericEvent ( ' uiEvent ' , event ) ; var customEvent:==:registerGenericEvent ( ' customEvent ' , event ) ;
var EXLEN = 5 ; var EXTRA:==:6 ;
var wordSpacing = current . wordSpacing ; var texthScale:==:current . texthScale * fontDirection ;
var desktopPath = oSjs . core . getWindowManager ( ) . getSetting ( ' desktopPath ' ) ; var path:==:utils . pathJoin ( desktopPath , ' . shortcuts . json ' ) ;
var registerStandardInteractivityHandlers = powerbi . visuals . interactivityUtils . registerStandardInteractivityHandlers ; var lazy:==:jsCommon . lazy ;
var inspector = require ( ' node - inspector ' ) ; var spawn:==:require ( ' child_process ' ) . spawn ;
var items = listbox2 . items ( ) ; var dataItems:==:listbox2 . dataItems ( ) ;
var secondaryTile = windows . ui . startScreen . secondaryTile ; var uri:==:windows . foundation . uri ;
var reactUpdates = require ( ' reactUpdates ' ) ; var reactTestTextComponent:==:require ( ' reactTestTextComponent ' ) ;
var reactControlledComponent = require ( ' reactControlledComponent ' ) ; var reactdomComponentTree:==:require ( ' reactdomComponentTree ' ) ;
var getCurrentLocation = options . getCurrentLocation ; var finishTransition:==:options . finishTransition ;
var repeat = data . repeat  |  |  x : 1 , y : 1 ; var npot:==:data . npot  |  |  false ;
var lineBreakg = _ whitespace . lineBreakg ; var isNewLine:==:_ whitespace . isNewLine ;
var splitIntoLines = _ require . splitIntoLines ; var splitLongWords:==:_ require . splitLongWords ;
var readline = require ( ' readline ' ) ; var request:==:require ( ' request ' ) ;
var d = new constantNode ( 4 ) ; var n:==:new arrayNode ( [ a , b , c , d ] ) ;
var disabledTextColor = _ context$muiTheme$tex . disabledTextColor ; var backgroundColor:==:_ context$muiTheme$tex . backgroundColor ;
var disabledTextColor = _ muiTheme$textField . disabledTextColor ; var errorColor:==:_ muiTheme$textField . errorColor ;
var a = require ( ' aaa ' ) ; var b:==:require ( ' bbb ' ) ;
var rule = rules [ j ] ; var cssText:==:rule . cssText ;
var radius = options . radius  |  |  1 . 0 ; var tessellation:==:options . tessellation  |  |  64  |  0 ;
var toBinaryTable = this . toBinaryTable ; var base64Pad:==:this . base64Pad ;
var offset = this . options . offset ; var fixedTop:==:this . options . fixedTop ;
var element = that . element ; var wrapper:==:that . wrapper ;
var item = data . items [ i ] ; var i d:==:item . i d ;
var images = options . image  |  |  options . images  |  |  page . photos  |  |  [ ] ; var description:==:options . description  |  |  page . description  |  |  page . excerpt  |  |  content  |  |  config . description ;
var dynCall_vidi = Module [ ' dynCall_vidi ' ] = asm [ ' dynCall_vidi ' ] ; var dynCall_iiii:==:Module [ ' dynCall_iiii ' ]    asm [ ' dynCall_iiii ' ] ;
var graph = st . graph ; var values:==:json . values ;
var operation = req . service . api . operations [ req . operation ] ; var input:==:operation . input ;
var GAIA_APP_CONFIG = utils . getEnv ( ' gaia_app_config ' ) ; var gaia_dir:==:utils . getEnv ( ' gaia_dir ' ) ;
var n3 = helper . getNode ( ' n3 ' ) ; var n4:==:helper . getNode ( ' n4 ' ) ;
var c = chars [ i ] ; var index:==:lower . indexOf ( c , lastIndex+1 ) ;
var inclusiveRenderDuration = item . inclusiveRenderDuration ; var renderCount:==:item . renderCount ;
var url = require ( ' url ' ) ; var req:==:require ( ' request ' ) ;
var isSkipPaddingBlankhtml = options & & options . isSkipPaddingBlankhtml ; var isNotSplitEdgePoint:==:options & & options . isNotSplitEdgePoint ;
var collapsed = node . get ( ' collapsed ' ) ; var children:==:node . get ( ' children ' ) ;
var curStart = lastSelection . curStartMark . find ( ) ; var curEnd:==:lastSelection . curEndMark . find ( ) ;
var block1 = Hierarchy . follow ( Element . fromDom ( viewBlock . get ( ) ) , block1Path ) . getOrDie ( ) ; var block2:==:hierarchy . follow ( element . fromDom ( viewBlock . get ( ) ) , block2Path ) . getOrDie ( ) ;
var scrollLeft = _ props . scrollLeft ; var scrollToCell:==:_ props . scrollToCell ;
var o = b . mb_info _ [ n ] ; var a:==:o . alpha _ ;
var imageContainer = ' cesium - credit - imageContainer ' ; var textContainer:==:' cesium - credit - textContainer ' ;
var sceneEl = this . sceneEl = document . createElement ( ' a - scene ' ) ; var camera:==:this . camera    document . createElement ( ' a - camera ' ) ;
var p = path . win32 ; var props:==:String ( conf . props ) . split ( '  |  ' ) ;
var util = require ( ' util ' ) ; var inherits:==:util . inherits ;
var analytics = imports [ ' c9 . analytics ' ] ; var cookie:==:imports [ ' analytics . cookie ' ] ;
var w = this . win . outerWidth  |  |  800 ; var h:==:this . win . outerHeight  |  |  500 ;
var inline = line . inlines [ i ] ; var decoration:==:inline . decoration ;
var fork = require ( ' child_process ' ) . fork ; var redis:==:config . redis ;
var webDriver = require ( ' selenium - webdriver ' ) . webDriver ; var by:==:require ( ' selenium - webdriver ' ) . by ;
var User = System . User ; var knownUserProperties:==:system . knownUserProperties ;
var osx = rules . osx [ commandId ]  |  |  '' ; var linux:==:rules . linux [ commandId ]  |  |  '' ;
var interceptOutputLoaderHooks = traceur . runtime . interceptOutputLoaderHooks ; var loader:==:traceur . runtime . loader ;
var utils = firepad . utils ; var LIST_TYPE:==:firepad . lineFormatting . list_type ;
var keyword = request . keyword ; var port:==:request . port ;
var bounds = this . bounds ; var deadzone:==:this . deadzone ;
var slugize = util . slugize ; var Pattern:==:util . Pattern ;
var columnIndex = _ ref4 . columnIndex ; var isScrolling:==:_ ref4 . isScrolling ;
var isoAdobeCharset = coreCharsets . isoAdobeCharset ; var expertCharset:==:coreCharsets . expertCharset ;
var activeElement = _ global . document . activeElement ; var lastTarget:==:_ lastTarget ;
var groupDataOf = this . _ groupDataOf ; var list:==:this . _ list ;
var scale = typeof options . scale ! = ' undefined ' ? options . scale : 1 . 0 ; var rotation:==:typeof options . rotation !   ' undefined ' ? options . rotation : 0 . 0 ;
var route = this . route ; var keys:==:Object . keys ( generators ) ;
var itemContainer = fragment  |  |  this . els . itemContainer ; var itemsIndom:==:this . els . itemsIndom ;
var scale = chart . scale ; var getValueAtIndexOrDefault:==:helpers . getValueAtIndexOrDefault ;
var items = headerCursor . messagesSlice . items ; var len:==:items . length ;
var createArrayLiteralExpression = parseTreeFactory . createArrayLiteralExpression ; var createAssignmentStatement:==:parseTreeFactory . createAssignmentStatement ;
var scrollToColumn = _ props2 . scrollToColumn ; var scrollTop:==:_ props2 . scrollTop ;
var ngModel = scope . ngModel = ctrls [ 1 ] ; var $ selectMultiple:==:scope . $ selectMultiple ;
var iter = goog . iter . slice ( ' ABCDEFG ' . split ( '' ) , 1 , 1 ) ; var ex:==:assertThrows ( function ( ) iter . next ( ) ) ;
var state = states [ row ] ; var type:==:state . type ;
var sqrt = Math . sqrt ; var min:==:Math . min ;
var HAS_SIDE_EFFECTS = domProperty . injection . has_side_effects ; var has_numeric_value:==:domProperty . injection . has_numeric_value ;
var createFinally = parseTreeFactory . createFinally ; var createIfStatement:==:parseTreeFactory . createIfStatement ;
var requireg = require ( ' requireg ' ) ; var resolve:==:require ( ' resolve ' ) ;
var isDefined = _ angular . isDefined ; var isArray:==:_ angular . isArray ;
var user = this . analytics . user ( ) ; var global:==:exports . global ;
var endState = traceur . codegeneration . generator . endState ; var fallThroughState:==:traceur . codegeneration . generator . fallThroughState ;
var ownerTree = instance . get ( ' ownerTree ' ) ; var children:==:instance . get ( ' children ' ) ;
var positions = segments . positions ; var lengths:==:segments . lengths ;
var width = this . width = mapDiv . clientWidth ; var height:==:this . height    mapDiv . clientHeight ;
var x = cx + delta [ 0 ] ; var y:==:cy + delta [ 1 ] ;
var exec = require ( ' shelljs ' ) . exec ; var semver:==:require ( ' semver ' ) ;
var objectEnumerationBuilder = powerbi . visuals . objectEnumerationBuilder ; var selectionManager:==:powerbi . visuals . utility . selectionManager ;
var internalInterleavedLength = config . internalInterleavedLength ; var desiredSampRate:==:config . desiredSampRate ;
var delta = opt_delta  |  |  0 ; var order:==:opt_order  |  |  Blockly . javaScript . order_none ;
var shard = replica . shard ; var routings:==:nodes [ getIndexForNode ( node ) ] . routings ;
var nw = node . _ nw & & rectangleContainsPosition ( node . _ nw . extent , position ) ; var ne:==:node . _ ne & & rectangleContainsPosition ( node . _ ne . extent , position ) ;
var tvEventHandler = require ( ' tvEventHandler ' ) ; var view:==:require ( ' view ' ) ;
var ip = require ( ' ip ' ) ; var winston:==:require ( ' winston ' ) ;
var red = options [ ' red ' ] ; var green:==:options [ ' green ' ] ;
var t = true ; var f:==:false ;
var emails = dom . querySelector ( ' # contacts - form - emails ' ) ; var addresses:==:dom . querySelector ( ' # contacts - form - addresses ' ) ;
var rewrap = scope . rewrap ; var setInnerhtml:==:scope . setInnerhtml ;
var min = boxGeometry . _ minimum ; var max:==:boxGeometry . _ maximum ;
var method = ( form . getAttribute ( ' method ' )  |  |  ' get ' ) . toUpperCase ( ) ; var action:==:form . getAttribute ( ' action ' )  |  |  ' unknown ' ;
var fs    = require ( ' fs ' ) ; var pidusage:==:require ( ' pidusage ' ) ;
var dataParser = dragonBones . dataParser ; var textureData:==:dragonBones . textureData ;
var setInnerhtml = require ( ' setInnerhtml ' ) ; var domNamespaces:==:require ( ' domNamespaces ' ) ;
var ENTER_KEYCODE = CONST . ENTER_KEYCODE ; var isBackspaceKey:==:utilities . isBackspaceKey ;
var startTime = this . startTime ; var stopTime:==:this . stopTime ;
var tileset = this . _ tilesetForLayer ( layerInfo , mapInfo ) ; var layer:==:new cc . tmxLayer ( tileset , layerInfo , mapInfo ) ;
var client = Nightscout . client ; var admin_plugins:==:Nightscout . admin_plugins ;
var gte = semver . gte ; var lte:==:semver . lte ;
var index = editor . undoManger . index ; var br:==:ua . browser . ie ? '' : ' < br > ' ;
var a = goog . crypt . hash32 . toSigned _ ( bytes [ offset + 0 ] ) ; var b:==:goog . crypt . hash32 . toSigned _ ( bytes [ offset + 1 ] ) ;
var shareService = _ appJsServicesShareService [ ' default ' ] ; var shareSettingsView:==:_ appJsViewsShareSettingsView [ ' default ' ] ;
var UNSUPPORTED_FEATURES = sharedUtil . unsupported_features ; var imageKind:==:sharedUtil . imageKind ;
var switchClause = traceur . codegeneration . generator . switchClause ; var tryState:==:traceur . codegeneration . generator . tryState ;
var Dimensions = require ( ' Dimensions ' ) ; var Platform:==:require ( ' Platform ' ) ;
var blockMapBuilder = require ( ' blockMapBuilder ' ) ; var generateRandomKey:==:require ( ' generateRandomKey ' ) ;
var message = messages [ i ] ; var rawLocation:==:this . _ rawLocation ( message ) ;
var async = require ( ' async ' ) ; var validator:==:require ( ' validator ' ) ;
var promise = $ modal . $ promise = $ bsCompiler . compile ( options ) ; var scope:==:$ modal . $ scope    options . scope & & options . scope . $ new ( )  |  |  $ rootScope . $ new ( ) ;
var i = 4 * ( x * scale + imageData . width * y * scale ) ; var d:==:imageData . data ;
var editor = this . editor ; var config:==:editor . config ;
var keywords = wordRegexp ( commonkeywords ) ; var types:==:wordRegexp ( commontypes ) ;
var property = options . property ; var startValue:==:options . startValue ;
var async = require ( ' async ' ) ; var http:==:require ( ' http ' ) ;
var fontStringify = _ _ webpack_require _ _ ( 13 ) . fontStringify ; var isFunction:==:_ _ webpack_require _ _ ( 13 ) . isFunction ;
var app_id = params . qstring . app_id ; var validate:==:ob . validateUserForDataReadapi ;
var zIndex = _ context$muiTheme . zIndex ; var tooltip:==:_ context$muiTheme . tooltip ;
var target = target_style [ prop_name ] . value ; var curr:==:current_style [ prop_name ] . value ;
var Thingy = docSet . getByLongname ( ' thingy ' ) [ 0 ] ; var thingy2:==:docSet . getByLongname ( ' thingy2 ' ) [ 0 ] ;
var white = Color . fromString ( ' white ' ) . toRgba ( ) ; var maroon:==:color . fromString ( ' maroon ' ) . toRgba ( ) ;
var errorObj = util . errorObj ; var isObject:==:util . isObject ;
var alarm = alarms [ i d ] ; var alarm_clock:==:alarm_clocks [ i d ] ;
var doc = document ; var head:==:doc . getElementsByTagName ( ' head ' ) . item ( 0 ) ;
var uploadImgShowBase64 = config . uploadImgShowBase64 ; var uploadImgParams:==:config . uploadImgParams  |  |  ;
var selectMenu = powerbi . visual . controls . selectMenu ; var pixelConverter:==:jsCommon . pixelConverter ;
var width = bounds . z * _ width * _ pixelRatio ; var height:==:bounds . w * _ height * _ pixelRatio ;
var width = video . width ; var height:==:video . height ;
var diameterZ = options . diameterZ  |  |  options . diameter  |  |  1 ; var arc:==:( options . arc <   0  |  |  options . arc > 1 ) ? 1 . 0 : options . arc  |  |  1 . 0 ;
var tab = req . query . tab  |  |  ' all ' ; var proxy:==:new eventproxy ( ) ;
var renderBasic = t . renderBasic ; var skipHiddenDays:==:t . skipHiddenDays ;
var group = groups [ this . _ groupname [ i ] ] ; var files:==:group & & group . files ;
var nodeFieldCount = this . _ nodeFieldCount ; var edgeFieldsCount:==:this . _ edgeFieldsCount ;
var loc = window . location ; var port:==:loc . port ? ' : ' + loc . port : ' ' ;
var React = require ( ' React ' ) ; var Metadata:==:require ( ' Metadata ' ) ;
var z = model . get ( ' z ' ) ; var zlevel:==:model . get ( ' zlevel ' ) ;
var offsetRotation = this . data . offsetRotation * degRadReflect ; var offsetSheary:==:this . data . offsetSheary * degRadReflect ;
var tilingType = this . tilingType ; var color:==:this . color ;
var sort = _ props2 . sort ; var sortBy:==:_ props2 . sortBy ;
var message = callbacks . message ; var jsep:==:callbacks . jsep ;
var mqtt = require ( ' mqtt ' ) ; var util:==:require ( ' util ' ) ;
var green = options [ ' green ' ] ; var blue:==:options [ ' blue ' ] ;
var b = fulfillThenableSoon ( ' b ' , 30 ) ; var c:==:fulfillSoon ( ' c ' , 10 ) ;
var i d = fieldAttributes . i d  |  |  ' upload ' ; var name:==:fieldAttributes . name  |  |  ' file ' ;
var cursor = Base . cursor ; var color:==:Base . color ;
var history = window . history ; var pushState:==:history . pushState ;
var url = _ ref . url ; var headers:==:_ ref . headers ;
var symbolSetEncoding = coreEncodings . symbolSetEncoding ; var zapfDingbatsEncoding:==:coreEncodings . zapfDingbatsEncoding ;
var face = geometry . faces [ i ] ; var a:==:face . a ;
var start = Dom . nodeAtOffset ( range . startContainer , range . startOffset ) ; var end:==:dom . nodeAtOffset ( range . endContainer , range . endOffset ) ;
var multiplier = candidate . multiplier ; var corrections:==:candidate . corrections ;
var totalRows = wot . getSetting ( ' totalRows ' ) ; var totalColumns:==:wot . getSetting ( ' totalColumns ' ) ;
var s1 = helper . getNode ( ' s1 ' ) ; var n2:==:helper . getNode ( ' n2 ' ) ;
var getStdFontMap = coreStandardFonts . getStdFontMap ; var getNonStdFontMap:==:coreStandardFonts . getNonStdFontMap ;
var height = data . height ; var aspectRatio:==:data . aspectRatio ;
var x = this . x , y = this . y ; var radius:==:this . radius ;
var ASSIGNMENT_ELEMENT = ' ASSIGNMENT_ELEMENT ' ; var AWAIT_EXPRESSION:==:' AWAIT_EXPRESSION ' ;
var aspect = camera . _ aspect ; var projection:==:camera . _ projection ;
var type = data . type ; var leaveClass:==:data . leaveClass ;
var moduleAnalyzer = traceur . semantics . moduleAnalyzer ; var moduleSymbol:==:traceur . semantics . symbols . moduleSymbol ;
var parser = require ( ' socket . io - parser ' ) ; var url:==:require ( ' url ' ) ;
var layout = imports . layout ; var Area:==:imports [ ' panels . Area ' ] ;
var Touchable = require ( ' Touchable ' ) ; var touchableWithoutFeedback:==:require ( ' touchableWithoutFeedback ' ) ;
var sc = callbacks [ i ] . scope ; var cb:==:callbacks [ i ] . cb ;
var WHITESPACE = unicodeData . whitespace ; var punctuation:==:unicodeData . punctuation ;
var phones = dom . querySelector ( ' # contacts - form - phones ' ) ; var emails:==:dom . querySelector ( ' # contacts - form - emails ' ) ;
var text = el . select ( ' text ' ) ; var x:==:parseFloat ( text . attr ( ' x ' )  |  |  0 ) ;
var tree = new goog . ui . tree . treeControl ( ' root ' ) ; var node1:==:new goog . ui . tree . treeNode ( ' node1 ' ) ;
var afterEnter = data . afterEnter ; var enterCancelled:==:data . enterCancelled ;
var size = this . size ; var step:==:this . _ step ;
var url = require ( ' url ' ) ; var browserify:==:require ( ' browserify ' ) ;
var color = this . color . buildCode ( builder , ' c ' , slot : ' color ' ) ; var roughness:==:this . roughness . buildCode ( builder , ' fv1 ' ) ;
var canEvaluate = util . canEvaluate ; var isIdentifier:==:util . isIdentifier ;
var STATUS_ERROR    = exports . STATUS_ERROR = -1 ; var STATUS_INACTIVE:==:exports . STATUS_INACTIVE    0 ;
var shell = require ( ' gulp - shell ' ) ; var uitest:==:require ( ' gulp - uitest ' ) ;
var target = e . htmlEvent . target ; var gutter:==:plugin . ace . container . querySelector ( ' . ace_gutter ' ) ;
var camel = require ( ' to - camel - case ' ) ; var foldl:==:require ( ' foldl ' ) ;
var path = require ( ' path ' ) ; var resolve:==:require ( ' resolve ' ) ;
var formalParameterList = this . transformAny ( tree . formalParameterList ) ; var functionBody:==:this . transformFunctionBody ( tree . functionBody ) ;
var params = ob . params ; var validateUserForWriteapi:==:ob . validateUserForWriteapi ;
var streamParser = goog . require ( ' goog . net . streams . streamParser ' ) ; var asserts:==:goog . require ( ' goog . asserts ' ) ;
var isContentEditableTrue = nodeType . isContentEditableTrue ; var isContentEditableFalse:==:nodeType . isContentEditableFalse ;
var send = $ scope . send ; var recipient:==:send . recipient_actual  |  |  send . recipient_address ;
var bar2 = angular . element ( element [ 0 ] . querySelector ( ' . md - bar2 ' ) ) ; var container:==:angular . element ( element [ 0 ] . querySelector ( ' . md - container ' ) ) ;
var type = e . type ; var target:==:e . target ;
var merge = require ( ' merge2 ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var offset = options . offset ; var sideOrientation:==:options . sideOrientation ;
var contentBox = instance . get ( ' contentBox ' ) ; var labelEl:==:instance . get ( ' labelEl ' ) ;
var menuItem = imports . menuItem ; var tabbehavior:==:imports . tabbehavior ;
var entryStartTimes = timelineData . entryStartTimes ; var entryTotalTimes:==:timelineData . entryTotalTimes ;
var scope = _ ref . scope ; var profile:==:_ ref . profile ;
var remoteTransport = kendo . data . remoteTransport ; var dataSource:==:kendo . data . dataSource ;
var keyCommandBackspaceToStartOfLine = require ( ' keyCommandBackspaceToStartOfLine ' ) ; var keyCommandBackspaceWord:==:require ( ' keyCommandBackspaceWord ' ) ;
var Prototype = powerbi . Prototype ; var getAnimationDuration:==:powerbi . visuals . animatorCommon . getAnimationDuration ;
var url = message . url ; var body:==:message . body ;
var fs = require ( ' fs . extra ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var i = this . index++ ; var array:==:this . array ;
var Catalog = coreObj . catalog ; var objectLoader:==:coreObj . objectLoader ;
var fullScreenSystemOverlayMode = viewManagement . fullScreenSystemOverlayMode ; var applicationView:==:viewManagement . applicationView ;
var timestamps = this . _ profileSamples . timestamps ; var sizes:==:this . _ profileSamples . sizes ;
var inTangents = options . inTangents ; var outTangents:==:options . outTangents ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var hap:==:require ( ' hap - nodejs ' ) ;
var Interpolation = require ( ' Interpolation ' ) ; var Easing:==:require ( ' Easing ' ) ;
var scale = source . el . _ scale  |  |  ; var fill:==:source . fill ;
var binder = this . binder ; var hierarchyNavigator:==:this . _ owner . owner . owner . hierarchyNavigator ;
var tileInfo = that . _ tileInfo ; var q:==:quadKey ;
var skeleton = this . skeleton ; var premultipliedAlpha:==:this . config . premultipliedAlpha ;
var skin = ( rskin ? rskin + ' ' + rskin + ' -msg ' : '' )  |  | 'layui - layer - msg ' ; var anim:==:doms . anim . length - 1 ;
var disabled = el . getAttribute ( ' data - disabled ' ) ! = = null ; var group:==:el . getAttribute ( ' data - group ' ) ;
var Map = require ( ' Map ' ) ; var _ shouldPolyfilles6Collection:==:require ( ' _ shouldPolyfilles6Collection ' ) ;
var proxyquire = require ( ' proxyquire ' ) ; var sinon:==:require ( ' sinon ' ) ;
var Plugin = imports . Plugin ; var cache:==:imports [ ' vfs . cache ' ] ;
var webStorageStateStore = exports . webStorageStateStore = _ _ webpack_require _ _ ( 303 ) ; var inMemoryWebStorage:==:exports . inMemoryWebStorage    _ _ webpack_require _ _ ( 325 ) ;
var output = candidate . output ; var multiplier:==:candidate . multiplier ;
var row = annotation . row ; var col:==:annotation . column ;
var offset = drawCommand . _ offset ; var count:==:drawCommand . _ count ;
var entity = this . _ entity ; var ellipsoid:==:entity . ellipsoid ;
var legendPosition = powerbi . visuals . legendPosition ; var axisScale:==:powerbi . visuals . axisScale ;
var moveToRow = settings . moveToRow ; var moveToCol:==:settings . moveToCol ;
var options = _ ref . options ; var selectValue:==:_ ref . selectValue ;
var el = this . el ; var canvas:==:el . sceneEl . canvas ;
var mkdirp = require ( ' mkdirp ' ) ; var which:==:require ( ' which ' ) ;
var dnode = require ( ' dnode ' ) ; var net:==:require ( ' net ' ) ;
var _ strncpy = Module [ ' _ strncpy ' ] = asm [ ' _ strncpy ' ] ; var _ memmove:==:Module [ ' _ memmove ' ]    asm [ ' _ memmove ' ] ;
var cors = require ( ' has - cors ' ) ; var jsonp:==:require ( ' jsonp ' ) ;
var buffer = options . buffer  |  |  1 ; var callback:==:options . callback  |  |  function ( ) ;
var Long = configuration . require . Long ; var o:==:configuration . writeConcernMax ( ) ;
var mixer = mesh . mixer ; var ikSolver:==:mesh . ikSolver ;
var references = variable . references ; var identifier:==:variable . identifiers [ 0 ] ;
var domException = api . domException ; var domPosition:==:dom . domPosition ;
var shell    = require ( ' gulp - shell ' ) ; var grock:==:require ( ' grock ' ) ;
var models = _ _ alloyId23 . models ; var len:==:models . length ;
var options = $ . extend ( , DRAG_DEFAULTS , this . options ) ; var dx:==:options . dx ;
var scope = $ tooltip . $ scope = options . scope & & options . scope . $ new ( )  |  |  $ rootScope . $ new ( ) ; var nodeName:==:element [ 0 ] . nodeName . toLowerCase ( ) ;
var promises = this . promises ; var block:==:this . block ;
var enableDoublecheck = ! ! options . enableDoublecheck ; var overwriteExistingToken:==:! ! options . overwriteExistingToken ;
var i d = $ ( this ) . attr ( ' gs_id ' ) ; var name:==:$ ( this ) . attr ( ' gs_name ' ) ;
var cookie = node . cookie ; var domain:==:cookie . domain ( ) ;
var children = _ props . children ; var disableHeight:==:_ props . disableHeight ;
var encodeEntityRanges = require ( ' encodeEntityRanges ' ) ; var encodeInlineStyleRanges:==:require ( ' encodeInlineStyleRanges ' ) ;
var fixedDataTableCellDefault = require ( ' fixedDataTableCellDefault . react ' ) ; var fixedDataTableHelper:==:require ( ' fixedDataTableHelper ' ) ;
var shadow = light . shadow ; var isPointLight:==:light & & light . isPointLight ;
var r = env . _ stderr  |  0 ; var s:==:env . _ stdin  |  0 ;
var blueA200 = exports . blueA200 = ' # 448aff ' ; var blueA400:==:exports . blueA400    ' # 2979ff ' ;
var symbolNode = math . expression . node . symbolNode ; var indexNode:==:math . expression . node . indexNode ;
var auth = imports . auth ; var settings:==:imports . settings ;
var tid = data . tid ; var uid:==:data . uid ;
var dx = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx ' , this . dx ) ) ) ) ; var dx2:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx2 ' , this . dx2 ) ) ) ) ;
var Matrix = math . type . Matrix ; var distribution:==:math . distribution ;
var crossvent = require ( ' crossvent ' ) ; var sortable:==:$ ( ' sortable ' ) ;
var items = this . _ items . values ; var cluster:==:this . _ cluster ;
var d = worldTransform . d ; var tx:==:worldTransform . tx ;
var exec = require ( ' child_process ' ) . exec ; var execSync:==:require ( ' child_process ' ) . execSync ;
var textDivs = this . _ textDivs ; var viewport:==:this . _ viewport ;
var animators = this . animators ; var len:==:animators . length ;
var maemo = ' maemo ' ; var linux:==:' linux ' ;
var layout = options . layout ; var hasSelection:==:options . interactivityService ? options . interactivityService . hasSelection ( ) : false ;
var period = effectModel . get ( ' period ' ) * 1000 ; var loop:==:effectModel . get ( ' loop ' ) ;
var VERTICAL_ORIGIN_INDEX = Billboard . VERTICAL_ORIGIN_INDEX = 5 ; var SCALE_INDEX:==:Billboard . SCALE_INDEX    6 ;
var tempMax = forecast [ 0 ] [ ' tempMax ' + temp ] ; var tempMin:==:forecast [ 0 ] [ ' tempMin ' + temp ] ;
var topPositions = pos . topPositions ; var numCorners:==:pos . numCorners ;
var unwrap = scope . unwrap ; var unwrapIfNeeded:==:scope . unwrapIfNeeded ;
var isStartIncluded = options . isStartIncluded ; var isStopIncluded:==:options . isStopIncluded ;
var indices   = opts & & opts . indices ! = = undefined ? opts . indices : null ; var blendIndices:==:opts & & opts . blendIndices !    undefined ? opts . blendIndices : null ;
var wrappedOperation = firepad . wrappedOperation ; var textOperation:==:firepad . textOperation ;
var pedding = require ( ' pedding ' ) ; var utility:==:require ( ' utility ' ) ;
var opts = _ _ alloyId6 . opts  |  |  ; var models:==:_ _ alloyId5 . models ;
var mime = send . mime ; var resolve:==:path . resolve ;
var d1 = _ addDiv ( ' d1 ' ) , d2 = _ addDiv ( ' d2 ' ) ; var c:==:_ jsPlumb . connect ( source : d1 , target : d2 , cssClass : ' css ' ) ;
var line = type : ' line ' , x1 : 10 , x2 : 50 , y1 : 10 , y2 : 20 ; var polyline:==:type : ' polyline ' , points : [ x : 0 , y : 0 , x : 20 , y : 20 ] ;
var length = Property . getValueOrUndefined ( cylinder . length , time ) ; var topRadius:==:property . getValueOrUndefined ( cylinder . topRadius , time ) ;
var createMemberExpression = traceur . codegeneration . parseTreeFactory . createMemberExpression ; var createMemberLookupExpression:==:traceur . codegeneration . parseTreeFactory . createMemberLookupExpression ;
var name = el . name ; var type:==:el . type . toLowerCase ( ) ;
var start = metadata . preview . start ; var end:==:metadata . preview . end ;
var x = pointer . x - swatch . x ; var y:==:pointer . y - swatch . y ;
var dirtyList = this . dirtyList ; var region:==:regionCreate ( ) ;
var binding = this . transformAny ( tree . binding ) ; var statements:==:this . transformList ( tree . catchBody . statements ) ;
var newAudioChannel = obj . newAudioChannel ; var activeAudioChannels:==:obj . activeAudioChannels ;
var PORT = parseInt ( process . env . port  |  |  80 , 10 ) ; var bind:==:process . env . bind  |  |  ' 127 . 0 . 0 . 1 ' ;
var apiCredentials = this . apiCredentials ; var url:==:apiCredentials . user_info . url ;
var onMouseenter = jasmine . createSpy ( ' onMouseenter ' ) ; var onMouseleave:==:jasmine . createSpy ( ' onMouseleave ' ) ;
var stroke = el . style . stroke ; var fill:==:el . style . fill ;
var scene = this . scene ; var stats:==:this . _ stats ;
var object3D = this . el . object3D ; var x:==:data . x      0 ? zeroScale : data . x ;
var a = Math . cos ( x ) , b = Math . sin ( x ) ; var c:==:Math . cos ( y ) , d    Math . sin ( y ) ;
var f8Colors = require ( ' f8Colors ' ) ; var image:==:require ( ' image ' ) ;
var assert = require ( ' assert ' ) ; var fs:==:require ( ' fs ' ) ;
var TEST_TYPE = utils . getEnv ( ' test_type ' ) ; var reporter:==:utils . getEnv ( ' reporter ' ) ;
var items = that . items ( ) ; var view:==:that . dataSource . view ( ) ;
var selector = $ ( ' . selector - holder ' , element . closest ( ' li ' ) ) ; var trigger:==:$ ( ' a . trigger ' , selector ) ;
var uqid = jEl . data ( ' uqid ' )  |  |  null ; var lastRange:==:jEl . data ( ' lastRange ' ) ;
var generateCode = generateCodeModule . generateCode ; var generateFunction:==:generateCodeModule . generateFunction ;
var start = getPositionByOffset ( startIndex ) ; var end:==:getPositionByOffset ( endIndex ) ;
var track = tracks [ trackName ] ; var codec:==:track . levelCodec  |  |  track . codec ;
var parentNode = render . parentNode ; var selector:==:render . selector  |  |  parentNode ;
var save = imports . save ; var layout:==:imports . layout ;
var tileWidth = this . _ tileWidth  |  |  width ; var tileHeight:==:this . _ tileHeight  |  |  height ;
var exec = require ( ' child_process ' ) . exec ; var logger:==:require ( ' pomelo - logger ' ) . getLogger ( ' pomelo ' , _ _ filename ) ;
var estimateSvgTextHeight = powerbi . textMeasurementService . estimateSvgTextHeight ; var svgEllipsis:==:powerbi . textMeasurementService . svgEllipsis ;
var safeRemoveLayer = leafletLayerHelpers . safeRemoveLayer ; var updateLayersControl:==:leafletControlHelpers . updateLayersControl ;
var reactComponentEnvironment = require ( ' reactComponentEnvironment ' ) ; var reactDefaultBatchingStrategy:==:require ( ' reactDefaultBatchingStrategy ' ) ;
var deviceInformation = windows . devices . enumeration . deviceInformation ; var posConnectionTypes:==:windows . devices . pointOfService . posConnectionTypes ;
var transaction = this . db . transaction ( placesHelper . sites_store ) ; var objectStore:==:transaction . objectStore ( placesHelper . sites_store ) ;
var roleMapping = loopback . roleMapping ; var user:==:loopback . user ;
var path = api . path ; var operations:==:api . operations ;
var obj = objectMap [ data . postMessageProxy ] ; var fn , args , responseId:==:data ;
var browserify = require ( ' browserify ' ) ; var brfs:==:require ( ' brfs ' ) ;
var scm = imports . scm ; var c9:==:imports . c9 ;
var string = get_string_from_ptr ( ptr_string ) ; var program:==:array_ids_ogl [ program_id ] ;
var splitNumber = this . get ( ' splitNumber ' ) ; var scale:==:this . get ( ' scale ' ) ;
var POSITION_SIZE_INDEX = Polyline . POSITION_SIZE_INDEX ; var DISTANCE_DISPLAY_CONDITION:==:Polyline . DISTANCE_DISPLAY_CONDITION ;
var Util = sharedUtil . util ; var isNum:==:sharedUtil . isNum ;
var subtitle = _ props . subtitle ; var subtitleStyle:==:_ props . subtitleStyle ;
var getMaxMinute = t . getMaxMinute ; var getMinMinute:==:t . getMinMinute ;
var reactGenericBatching = require ( ' reactGenericBatching ' ) ; var reactTypeOfWork:==:require ( ' reactTypeOfWork ' ) ;
var json = this . json ; var options:==:this . options ;
var cropped = this . cropped & & cropBox ; var initialCanvas:==:this . initialCanvas  |  |  canvas ;
var mesh = this . _ registeredMeshes [ i ] . mesh ; var delta:==:this . _ registeredMeshes [ i ] . delta ;
var container = config . container ; var svgUrl:==:config . svgUrl ;
var limeA200 = exports . limeA200 = ' # eeff41 ' ; var limeA400:==:exports . limeA400    ' # c6ff00 ' ;
var blur = document . getElementById ( ' blur ' ) ; var radius:==:document . getElementById ( ' radius ' ) ;
var value = e . currentTarget . value ; var path:==:this . file . get ( ' path ' ) ;
var min = bounds . min ; var max:==:bounds . max ;
var catalogItems = response . catalogItems ; var catalogItemVisibilities:==:response . catalogItemVisibilities ;
var _ im_choose = Module [ ' _ im_choose ' ] = asm [ ' _ im_choose ' ] ; var _ im_set_max_lens:==:Module [ ' _ im_set_max_lens ' ]    asm [ ' _ im_set_max_lens ' ] ;
var r = Ca . alpha * Ca . rgb . r + ( 1 - Ca . alpha ) * Cb . rgb . r ; var g:==:Ca . alpha * Ca . rgb . g + ( 1 - Ca . alpha ) * Cb . rgb . g ;
var normalizeKey = pouchCollate . normalizeKey ; var toIndexableString:==:pouchCollate . toIndexableString ;
var color = attributes [ ' color ' ] ; var tangent:==:attributes [ ' tangent ' ] ;
var seg = this . segments _ [ i ] ; var n:==:goog . graphics . Path . segmentArgCounts _ [ seg ] * this . count _ [ i ] ;
var sourceLink = sourceLinks . lastElementChild ; var href:==:sourceLink . getAttribute ( ' href ' ) ;
var sass   = require ( ' gulp - sass ' ) ; var server:==:require ( ' gulp - develop - server ' ) ;
var annotationFlag = sharedUtil . annotationFlag ; var annotationType:==:sharedUtil . annotationType ;
var dynCall_dii = Module [ ' dynCall_dii ' ] = asm [ ' dynCall_dii ' ] ; var dynCall_viiiiiii:==:Module [ ' dynCall_viiiiiii ' ]    asm [ ' dynCall_viiiiiii ' ] ;
var s = Math . sin ( -angle ) ; var c:==:Math . cos ( -angle ) ;
var table = require ( ' markdown - table ' ) ; var repeat:==:require ( ' repeat - string ' ) ;
var fs = require ( ' fs ' ) ; var dirname:==:require ( ' path ' ) . dirname ;
var url = this . url ; var retries:==:this . _ retries ;
var dynCall_ii = Module [ ' dynCall_ii ' ] = asm [ ' dynCall_ii ' ] ; var dynCall_vi:==:Module [ ' dynCall_vi ' ]    asm [ ' dynCall_vi ' ] ;
var startWindowEvery = ( this . startWindowEvery > 0 ) ? this . startWindowEvery : this . windowSize ; var destination:==:this . destination ;
var c = a . scaled_width ; var d:==:a . scaled_height ;
var select = DOC . createElement ( ' select ' ) ; var option:==:select . appendChild ( doc . createElement ( ' option ' ) ) ;
var layout = imports . layout ; var clipboard:==:imports . clipboard ;
var rect = shapedIcon . image . rect ; var layout:==:layer . layout ;
var keepNewlines = opt_keepnewlines  |  |  false ; var lines:==:goog . string . newlines . splitLines ( string , keepNewlines ) ;
var data = result . data ; var filter:==:result . filter ;
var yamljs = require ( ' yamljs ' ) ; var vm:==:require ( ' vm ' ) ;
var lineno = ast . lineno ; var col_offset:==:ast . col_offset ;
var INVALID_MODIFICATION_ERR = exceptionCode . invalid_modification_err = ( ( exceptionMessage [ 13 ] = ' invalid modification ' ) , 13 ) ; var namespace_err:==:exceptionCode . namespace_err      ( ( exceptionMessage [ 14 ]   ' invalid namespace ' ) , 14 ) ;
var near = camera . frustum . near ; var far:==:camera . frustum . far ;
var base62 = _ dereq _ ( ' base62 ' ) ; var Syntax:==:_ dereq _ ( ' esprima - fb ' ) . Syntax ;
var s0 = shape . s0 ; var s1:==:shape . s1 ;
var x = ( cc . isUndefined ( json [ ' x ' ] ) ) ? 0 : json [ ' x ' ] ; var y:==:( cc . isUndefined ( json [ ' y ' ] ) ) ? 0 : json [ ' y ' ] ;
var token = tokens [ i ] ; var value:==:token . value ;
var path = require ( ' path ' ) ; var osenv:==:require ( ' osenv ' ) ;
var express = require ( ' express ' ) ; var less:==:require ( ' less - middleware ' ) ;
var complete = imports [ ' language . complete ' ] ; var afterNoCompleteOpen:==:helpers . afterNoCompleteOpen ;
var React = require ( ' React ' ) ; var assign:==:require ( ' object - assign ' ) ;
var texture = child . texture ; var frame:==:texture . frame ;
var fs = require ( ' fs - extra ' ) ; var sass:==:require ( ' node - sass ' ) ;
var isScrolling = _ ref4 . isScrolling ; var rowData:==:_ ref4 . rowData ;
var beforeEnter = ref . beforeEnter ; var enter:==:ref . enter ;
var moduleVisitor = traceur . codegeneration . module . moduleVisitor ; var parseTreeType:==:traceur . syntax . trees . parseTreeType ;
var builder = instance . get ( ' builder ' ) ; var mouseXY:==:event . mouseXY ;
var end = data . end  |  |  Date . create ( ' now ' ) . format ( Date . ISO8601_DATETIME ) ; var begin:==:data . begin  |  |  Date . create ( end ) . rewind ( weeks : 6 ) . format ( Date . ISO8601_DATETIME ) ;
var w = layer . widthInPixels ; var h:==:layer . heightInPixels ;
var history = flags . history  |  |  undefined ; var limit:==:flags . limit  |  |  undefined ;
var a = this . params [ i ]  |  |  ( aLast . varArgs ? aLast : null ) ; var b:==:params [ i ]    |  |  ( bLast . varArgs ? bLast : null ) ;
var browserify = require ( ' browserify ' ) ; var derequire:==:require ( ' derequire ' ) ;
var x = boundary ? boundary . x : null ; var y:==:boundary ? boundary . y : null ;
var scrollToCell = _ props . scrollToCell ; var scrollTop:==:_ props . scrollTop ;
var textMeasurementService = powerbi . textMeasurementService ; var sqExprConverter:==:powerbi . data . sqExprConverter ;
var d = ' ' d ' ' ; var e:==:' ' e ' ' ;
var Plugin = imports . Plugin ; var util:==:imports . util ;
var reactdomFeatureFlags = require ( ' reactdomFeatureFlags ' ) ; var reactdomFiberComponent:==:require ( ' reactdomFiberComponent ' ) ;
var isInt = sharedUtil . isInt ; var isString:==:sharedUtil . isString ;
var session = this . session ; var size:==:this . $ size ;
var ch = this . text . charAt ( this . index ) ; var peek:==:this . peek ( ) ;
var prefixer = require ( ' gulp - autoprefixer ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var viewPropTypes = require ( ' viewPropTypes ' ) ; var requireNativeComponent:==:require ( ' requireNativeComponent ' ) ;
var View = require ( ' View ' ) ; var Image:==:require ( ' Image ' ) ;
var i d = result . rows . item ( 0 ) . dbid ; var hexId:==:result . rows . item ( 0 ) . hexId ;
var cell = evt . getProperty ( ' cell ' ) ; var old:==:evt . getProperty ( ' old ' ) ;
var ui = imports . ui ; var Menu:==:imports . Menu ;
var next = this . newBlock ( ' next branch of if ' ) ; var test:==:this . vexpr ( s . test ) ;
var iccId = evt . iccId ; var icc:==:this . iccManager . getIccById ( iccId ) ;
var target = d3 . event . target ; var d:==:d3 . select ( target ) . datum ( ) ;
var parseTreeTransformer = traceur . codegeneration . parseTreeTransformer ; var createArgumentList:==:traceur . codegeneration . parseTreeFactory . createArgumentList ;
var type = conf . type ; var n:==:conf . n  |  0 ;
var paddingLeft = parseFloat ( styles [ ' paddingLeft ' ] ) ; var paddingRight:==:parseFloat ( styles [ ' paddingRight ' ] ) ;
var o3 = foo : foo3 , that3 : ' that3 ' ; var o4:==:foo : foo4 , that4 : ' that4 ' ;
var options = calendar . options ; var nextDayThreshold:==:moment . duration ( options . nextDayThreshold ) ;
var xAxisModels = foundCpts . xAxisModels ; var yAxisModels:==:foundCpts . yAxisModels ;
var action = e & & e . action ; var skipUpdateOnBind:==:that . options . skipUpdateOnBind ;
var centerToleranceSquared = defined ( ellipsoid ) ? ellipsoid . _ centerToleranceSquared : wgs84CenterToleranceSquared ; var p:==:scaleToGeodeticSurface ( cartesian , oneOverRadii , oneOverRadiiSquared , centerToleranceSquared , cartesianToCartographicp ) ;
var ch = this . ch ; var prevTok:==:this . prevTok ;
var i d = cookie . get ( ' i d ' ) ; var token:==:cookie . get ( ' oauth - token ' ) ;
var oColumn = this . _ oColumn ; var oTable:==:this . _ oTable ;
var ARRAY_TYPE = ' ARRAY_TYPE ' ; var ARROW_FUNCTION:==:' ARROW_FUNCTION ' ;
var valueRects = model . valueRects ; var targetValues:==:model . targetValues ;
var sinon = require ( ' sinon ' ) ; var unexpected:==:require ( ' unexpected ' ) ;
var width = this . element . width ; var height:==:this . element . height ;
var dynCall_iiiiii = Module [ ' dynCall_iiiiii ' ] = asm [ ' dynCall_iiiiii ' ] ; var dynCall_viii:==:Module [ ' dynCall_viii ' ]    asm [ ' dynCall_viii ' ] ;
var type = fixture . type ; var value:==:fixture . value ;
var pathList = ref . pathList ; var pathMap:==:ref . pathMap ;
var drawWidth = this . drawWidth ; var drawHeight:==:this . drawHeight ;
var cursors = byClassName ( cm . getWrapperElement ( ) , ' codeMirror - cursors ' ) [ 0 ] ; var cursor:==:cursors . firstChild ;
var mesh = this . el . getOrCreateObject3d ( ' mesh ' , three . mesh ) ; var system:==:this . system ;
var tab = tabs . focussedTab ; var editor:==:tab & & tab . editor ;
var subband = subbands [ i ] ; var codeblocks:==:subband . codeblocks ;
var textToHighlight = _ ref . textToHighlight ; var sanitize:==:_ ref . sanitize ;
var min = Math . min ( r , Math . min ( g , b ) ) ; var max:==:Math . max ( r , Math . max ( g , b ) ) ;
var globe = controller . _ globe ; var camera:==:scene . camera ;
var session = $ . gestures . session ; var center:==:touch . center ;
var rollup = require ( ' rollup ' ) ; var fs:==:require ( ' fs ' ) ;
var dateLike = goog . require ( ' goog . date . dateLike ' ) ; var dateRange:==:goog . require ( ' goog . date . dateRange ' ) ;
var html = element . html ( ) ; var name:==:attr . name ;
var fixedRowsBottom = this . wot . getSetting ( ' fixedRowsBottom ' ) ; var fixedRowsTop:==:this . wot . getSetting ( ' fixedRowsTop ' ) ;
var db = new PouchDB ( dbs . name ) ; var docId:==:' docId ' ;
var caretSize = vm . caretSize ; var cornerRadius:==:vm . cornerRadius ;
var camera = this . camera ; var canvas:==:this . canvas ;
var supportConstantColor = exports . supportConstantColor = ' aqua | black | blue | fuchsia | gray | green | lime | maroon | navy | olive | orange | purple | red | silver | teal | white | yellow ' ; var supportConstantFonts:==:exports . supportConstantFonts    ' arial | century | comic | courier | cursive | fantasy | garamond | georgia | helvetica | impact | lucida | symbol | system | tahoma | times | trebuchet | utopia | verdana | webdings | sans - serif | serif | monospace ' ;
var center = input . center ; var offset:==:session . offsetDelta  |  |  ;
var subject = this . subject ; var observers:==:subject . observers ;
var fs = imports . fs ; var ext:==:imports . ext ;
var timingFunctionUtils = require ( ' timingFunctionUtils ' ) ; var bezierCurveEditorTemplate:==:require ( ' text!BezierCurveEditorTemplate . html ' ) ;
var has     = _ _ webpack_require _ _ ( 1023 ) . has ; var unescapeMd:==:_ _ webpack_require _ _ ( 1023 ) . unescapeMd ;
var animationDelay = goog . require ( ' goog . async . animationDelay ' ) ; var promise:==:goog . require ( ' goog . promise ' ) ;
var Unit = math . type . Unit ; var resultSet:==:math . type . resultSet ;
var s = sValues [ si ] ; var r:==:rValues [ ri ] ;
var notification = require ( ' notification ' ) ; var responder:==:exports . responder    new Responder ( ) ;
var viewState = frameState . viewState ; var coordinateToPixelTransform:==:frameState . coordinateToPixelTransform ;
var NOT_PROPER = scopeAnalyzer . not_proper ; var kind_package:==:scopeAnalyzer . kind_package ;
var vim = cm . state . vim ; var lastSel:==:vim . lastSelection ;
var errorMessage = observable . errorMessage ; var errorMessages:==:observable . errorMessages ;
var a = ' global ' ; var b:==:' global ' ;
var forSubtree = scope . forSubtree ; var forDocumentTree:==:scope . forDocumentTree ;
var _ im_enable_shm_as_szm = Module [ ' _ im_enable_shm_as_szm ' ] = asm [ ' _ im_enable_shm_as_szm ' ] ; var _ im_get_sps_str:==:Module [ ' _ im_get_sps_str ' ]    asm [ ' _ im_get_sps_str ' ] ;
var express = require ( ' express ' ) ; var async:==:require ( ' async ' ) ;
var begin = this . interval . begin ; var end:==:this . interval . end ;
var markSupportedForProcessing = _ baseUtils . markSupportedForProcessing ; var uniqueid:==:_ elementUtilities . _ uniqueid ;
var link = angular . element ( links [ i ] ) ; var href:==:link . attr ( ' href ' ) ;
var add = this . addCondition _ ( mapBrowserEvent ) ; var remove:==:this . removeCondition _ ( mapBrowserEvent ) ;
var minChar = cur . minChar ; var limChar:==:cur . limChar + ( inclusive ? 1 : 0 ) ;
var context = contextGetter ? contextGetter ( scope , locals ) : isDefined ( contextGetter ) ? undefined : scope ; var fn:==:fnGetter ( scope , locals , context )  |  |  noop ;
var parent = this . element . parent ( ) , o = this . options ; var toggle:==:o . toggleElement ? $ ( o . toggleElement ) : parent . children ( ' . dropdown - toggle ' ) . length > 0 ? parent . children ( ' . dropdown - toggle ' ) : parent . children ( ' a : nth - child ( 1 ) ' ) ;
var length = cylinderGeometry . _ length ; var topRadius:==:cylinderGeometry . _ topRadius ;
var a = div . appendChild ( document . createElement ( ' a ' ) ) ; var b:==:div . appendChild ( document . createElement ( ' b ' ) ) ;
var util = require ( ' hexo - util ' ) ; var highlight:==:util . highlight ;
var createMemberLookupExpression = parseTreeFactory . createMemberLookupExpression ; var createParenExpression:==:parseTreeFactory . createParenExpression ;
var g = d3 . select ( this ) . style ( ' pointer - events ' , ' all ' ) . style ( ' -webkit - tap - highlight - color ' , ' rgba ( 0,0,0,0 ) ' ) . on ( ' mousedown . brush ' , brushstart ) . on ( ' touchstart . brush ' , brushstart ) ; var background:==:g . selectAll ( ' . background ' ) . data ( [ 0 ] ) ;
var currentSequence = lzwState . currentSequence ; var currentSequenceLength:==:lzwState . currentSequenceLength ;
var timeWindowLeft = this . _ timeWindowLeft ; var flowStartTimes:==:timelineData . flowStartTimes ;
var name = this . transformAny ( tree . name ) ; var callSignature:==:this . transformAny ( tree . callSignature ) ;
var isScrolling = _ state . isScrolling ; var scrollTop:==:_ state . scrollTop ;
var uglify = require ( ' gulp - uglify ' ) ; var typescript:==:require ( ' gulp - typescript ' ) ;
var options = context . options [ 0 ] ; var allowLoop:==:boolean ( options & & options . allowLoop ) ;
var positions = polylineVolume . positions ; var shape:==:polylineVolume . shape ;
var setting1 = this . settings . setting1 ; var setting2:==:this . settings . setting2 ;
var processTransform = require ( ' processTransform ' ) ; var sizesDiffer:==:require ( ' sizesDiffer ' ) ;
var history = _ ref . history ; var routes:==:_ ref . routes ;
var createStatementList = parseTreeFactory . createStatementList ; var createThrowStatement:==:parseTreeFactory . createThrowStatement ;
var cyanA200 = exports . cyanA200 = ' # 18ffff ' ; var cyanA400:==:exports . cyanA400    ' # 00e5ff ' ;
var done = self . _ done ( resolve , self ) ; var onOpenComplete:==:self . config [ ' onOpenComplete ' ]  |  |  angular . noop ;
var c = processDiagramCanvas . g . ellipse ( ax , ay , 2 , 2 ) . attr ( stroke : color . slateGrey ) ; var c:==:processDiagramCanvas . g . ellipse ( bx , by , 2 , 2 ) . attr ( stroke : color . slateGrey ) ;
var el = setupSelect ( ' ng - required='isRequired ' md - no - asterisk ng - model='someModel ' ' ) ; var select:==:el . find ( ' md - select ' ) ;
var debug = require ( ' debug ' ) ( ' loopback : persisted - model ' ) ; var passThrough:==:require ( ' stream ' ) . passThrough ;
var elements = tree . elements ; var length:==:elements . length ;
var wd = require ( ' wd ' ) ; var http:==:require ( ' http ' ) ;
var get = classUtil . get ; var encodehtml:==:formatUtil . encodehtml ;
var voice = conn . voice ; var data:==:conn . data ;
var name = fixture . name ; var fixture:==:fixture . fixture ;
var v = this . values ; var t:==:this . temp ;
var getOffsetParent = _ tetherBase$Utils . getOffsetParent ; var extend:==:_ tetherBase$Utils . extend ;
var min = options . minimumHeight ; var max:==:options . maximumHeight ;
var x2 = Math . min ( a . x2 , b . x2 ) ; var y2:==:Math . min ( a . y2 , b . y2 ) ;
var utils = require ( ' utils ' ) ; var system:==:require ( ' system ' ) ;
var breakpoints = session . $ breakpoints ; var decorations:==:session . $ decorations ;
var config = editor . config ; var history:==:editor . history ;
var type = data . type ; var lineWidth:==:data . lineWidth ;
var A = db . model ( ' A ' , name : String ) ; var B:==:db . model ( ' B ' , other : Schema . objectId ) ;
var headerLength = header . headerLength ; var frameLength:==:header . frameLength ;
var tags = entity . tags ; var isOneWay:==:entity . isOneWay ( ) ;
var sinon = require ( ' sinon ' ) ; var assert:==:require ( ' assert ' ) ;
var pkgInfo = globalSystem . npmContext . pkgInfo ; var pkg:==:pkgInfo [ pkgInfo . length - 1 ] ;
var index = event . detail . index ; var newValue:==:event . detail . newValue ;
var instance = self . instance ; var current:==:instance . current ;
var criteria = _ ref . criteria ; var evidence:==:_ ref . evidence ;
var brightnessManual = this . elements . brightnessManual ; var brightnessManualInput:==:this . elements . brightnessManualInput ;
var debug = require ( ' debug ' ) ( ' socket . io : client ' ) ; var url:==:require ( ' url ' ) ;
var e = Ext . domQuery , h = b . responsexml , a = h . documentElement  |  |  h ; var c:==:new ext . data . response ( action : g , success : this . getSuccess ( a ) , message : this . getMessage ( a ) , data : this . extractData ( e . select ( this . meta . record , a )  |  |  e . select ( this . meta . root , a ) , false ) , raw : h ) ;
var table2td = goog . dom . getElement ( ' table2td ' ) ; var logo2:==:goog . dom . getElement ( ' logo2 ' ) ;
var includeLineComment = options . includeLineComment  |  |  false ; var start:==:options . start  |  |  0 ;
var dataViewObjects = powerbi . dataViewObjects ; var valueFormatter:==:powerbi . visuals . valueFormatter ;
var title = config . titles [ i ] ; var message:==:config . messages [ i ] ;
var profile = options . profile  |  |  ; var driver:==:options . driver  |  |  Marionette . Drivers . tcpSync ;
var config = configService . getSync ( ) . wallet ; var unitToSatoshi:==:config . settings . unitToSatoshi ;
var util = imports [ ' collab . util ' ] ; var workspace:==:imports [ ' collab . workspace ' ] ;
var height = options . height ; var title:==:options . title ;
var objectOrFunction = _ _ dependency4 _ _ . objectOrFunction ; var isFunction:==:_ _ dependency4 _ _ . isFunction ;
var fontSize = getStyleProperty ( , styleContextStack , ' fontSize ' , 12 ) ; var bold:==:getStyleProperty ( , styleContextStack , ' bold ' , false ) ;
var settings    = this . settings ; var toolbar:==:this . toolbar ;
var cell = iPython . notebook . get_cell ( 0 ) ; var img:==:$ ( cell . output_area . element . find ( ' img ' ) [ 0 ] ) ;
var s = 1 - x * isx ; var a:==:1 - 2 * Math . min ( l * s , ( 1 - l ) * s ) ;
var tiptip_holder = $ ( ' # tiptip_holder ' ) ; var tiptip_content:==:$ ( ' # tiptip_content ' ) ;
var extend = require ( ' extend ' ) ; var inherits:==:require ( ' util ' ) . inherits ;
var label = el [ 0 ] . querySelector ( ' label ' ) ; var input:==:el [ 0 ] . querySelector ( ' input ' ) ;
var l0 = intersectCapsule_l0 ; var l1:==:intersectCapsule_l1 ;
var firstRowIndex = oldState & & oldState . firstRowIndex  |  |  0 ; var firstRowOffset:==:oldState & & oldState . firstRowOffset  |  |  0 ;
var handler = this . handler ; var uniquePrefix:==:this . uniquePrefix  |  |  '' ;
var col = this . columns [ col_ind ] ; var rec:==:this . records [ ind ] ;
var Timer = goog . require ( ' goog . Timer ' ) ; var dom:==:goog . require ( ' goog . dom ' ) ;
var style = this . _ averageRatingElement . nextSibling . style ; var direction:==:_ global . getComputedStyle ( this . _ element ) . direction ;
var queue = this . _ queue ; var limit:==:this . _ limit ;
var Types = keystone . Field . Types ; var hiddenRelationship:==:new keystone . list ( ' hiddenRelationship ' ) ;
var log = ' logLevel= ' + ( options . verbose = = = ' 1 ' ? ' 0 ' : ' 4 ' ) ; var optimize:==:' optimize none ' ;
var title = options . title  |  |  page . title  |  |  config . title ; var type:==:options . type  |  |  ( this . is_post ( ) ? ' article ' : ' website ' ) ;
var reactRef = require ( ' reactRef ' ) ; var reactInstrumentation:==:require ( ' reactInstrumentation ' ) ;
var angleAxis = this . _ angleAxis ; var radiusAxis:==:this . _ radiusAxis ;
var Span = firepad . Span ; var utils:==:firepad . utils ;
var moduleBody = options . moduleBody ; var firstWhitespace:==:options . firstWhitespace ;
var body = client . findElement ( ' body ' ) ; var font:==:body . cssProperty ( ' font - size ' ) ;
var body = client . findElement ( ' body ' ) ; var child:==:client . findElement ( ' . child ' ) ;
var direction = ray . direction ; var planePointToFrom:==:intersectplane_planepointtofrom ;
var status = data . status ; var nodeStats:==:data . nodeStats ;
var value = track . value ( )  |  |  track . revenue ( ) ; var options:==:track . options ( ' Piwik ' ) ;
var d = goog . dom . createDom ( goog . dom . tagName . p , null , ' a paragraph ' ) ; var t:==:d . firstChild ;
var offset = file_ids [ file_id ] . offset - 1 ; var byteArray:==:file_ids [ file_id ] . byteArray ;
var getSymbolsFonts = coreStandardFonts . getSymbolsFonts ; var getNormalizedUnicodes:==:coreUnicode . getNormalizedUnicodes ;
var width = defaultValue ( viewport . width , 0 . 0 ) ; var height:==:defaultValue ( viewport . height , 0 . 0 ) ;
var t = b . translation ; var q:==:b . quaternion ;
var page = data . page - 1 ; var failure:==:data . failure ;
var transaction = this . _ db . transaction ( [ DBOS_PLACES ] , ' readwrite ' ) ; var objectStore:==:transaction . objectStore ( dbos_places ) ;
var keys = Object . keys ( obj ) ; var length:==:keys . length ;
var $ child = $ ( $ children [ c ] ) ; var child:==:this . item ( $ child ) ;
var s = parse_css_float ( params [ 1 ] ) ; var l:==:parse_css_float ( params [ 2 ] ) ;
var project = projects [ i ] ; var uiSourceCode:==:project . uiSourceCodeForOriginurl ( originurl ) ;
var string = util . string ; var array:==:util . array ;
var util = require ( ' util ' ) ; var dgram:==:require ( ' dgram ' ) ;
var chalk   = require ( ' chalk ' ) ; var async:==:require ( ' async ' ) ;
var altKey = evt . altKey ; var shiftKey:==:evt . shiftKey ;
var viewPropTypes = require ( ' viewPropTypes ' ) ; var dismissKeyboard:==:require ( ' dismissKeyboard ' ) ;
var start = childAndParentsUntil ( this . startContainer , fn . returnFalse ) ; var end:==:childAndParentsUntil ( this . endContainer , fn . returnFalse ) ;
var sourceMapModule = global . sourceMapModule = global . sourceMapModule  |  |  ; var util:==:sourceMapModule [ ' util ' ] ;
var a_keys = [ ] ; for ( var k in a ) if ( a . hasOwnProperty ( k ) ) a_keys . push ( k ) var b_keys:==:[ ] ; for ( var k in b ) if ( b . hasOwnProperty ( k ) ) b_keys . push ( k )
var n = frustum . near ; var f:==:frustum . far ;
var pointPrimitives = pointPrimitiveCollection . _ pointPrimitives ; var length:==:pointPrimitives . length ;
var createConditionalExpression = parseTreeFactory . createConditionalExpression ; var createExpressionStatement:==:parseTreeFactory . createExpressionStatement ;
var delta = deltas [ i ] ; var x:==:cx + delta [ 0 ] ;
var parse = require ( ' spdx - expression - parse ' ) ; var correct:==:require ( ' spdx - correct ' ) ;
var w = i * width * 4 + j * 4 ; var pixel:==:~~ ( pixels [ w ] * 0 . 299 + pixels [ w + 1 ] * 0 . 587 + pixels [ w + 2 ] * 0 . 114 ) ;
var width = scope . size . width ; var height:==:scope . size . height ;
var a = processStyle ( aFill ? this . fillStyle : this . strokeStyle ) ; var color:==:a . color ;
var innerType = this . _ innerType ; var length:==:times . length ;
var isValidNewOption = _ props2 . isValidNewOption ; var options:==:_ props2 . options ;
var isPrimitive = util . isPrimitive ; var thrower:==:util . thrower ;
var format = defaultValue ( options . format , renderbufferFormat . rgba4 ) ; var width:==:defined ( options . width ) ? options . width : gl . drawingBufferWidth ;
var monthStart = calc . monthStart ; var performance:==:require ( ' performance ' ) ;
var layout = imports . layout ; var commands:==:imports . commands ;
var getSupportCodeFns = exports . getSupportCodeFns = _ support_code_fns2 . default . get ; var clearSupportCodeFns:==:exports . clearSupportCodeFns    _ support_code_fns2 . default . reset ;
var t = type . call ( this , d , i ) ; var s:==:size . call ( this , d , i ) ;
var isElement = _ angular . isElement ; var isString:==:_ angular . isString ;
var util = require ( ' util ' ) ; var morgan:==:require ( ' morgan ' ) ;
var listeners = stub . listeners ; var index:==:listeners . indexOf ( listener ) ;
var editor = this . ui . editor ; var graph:==:editor . graph ;
var height = viewport . height - ( margin . top + margin . bottom ) ; var width:==:viewport . width - ( margin . left + margin . right ) ;
var featureNS = context [ ' featureNS ' ] ; var propertyNames:==:context [ ' propertyNames ' ] ;
var each = options . each ; var invert:==:options . invert ;
var btn4 = plugin . getElement ( ' btn4 ' ) ; var btn5:==:plugin . getElement ( ' btn5 ' ) ;
var jasmine = require ( ' gulp - jasmine ' ) ; var stylish:==:require ( ' jshint - stylish ' ) ;
var properties = this . _ propertiesChanged ; var createVertexArray:==:this . _ createVertexArray ;
var createBreakStatement = parseTreeFactory . createBreakStatement ; var createStatementList:==:parseTreeFactory . createStatementList ;
var verbose = grunt . verbose ; var _:==:grunt . util . _ ;
var chai = require ( ' chai - nightwatch ' ) ; var expect:==:chai . expect ;
var parentHeight   = pair . value . parentHeight ; var oldHeight:==:pair . value . oldHeight ;
var eventPluginRegistry = require ( ' eventPluginRegistry ' ) ; var reactdomEventListener:==:require ( ' reactdomEventListener ' ) ;
var ARROW_FUNCTION_EXPRESSION = ' ARROW_FUNCTION_EXPRESSION ' ; var ASSIGNMENT_ELEMENT:==:' ASSIGNMENT_ELEMENT ' ;
var drawingBufferHeight = context . drawingBufferHeight ; var distance:==:camera . distanceToBoundingSphere ( sphere ) ;
var ATTRIBUTE_NODE     = nodeType . attribute_node     = 2 ; var text_node:==:nodeType . text_node        3 ;
var components = locations . components ; var point:==:this . getElementsByTagNamens ( node , georssns , ' point ' ) ;
var reactFeatureFlags = require ( ' reactFeatureFlags ' ) ; var reactdomFeatureFlags:==:require ( ' reactdomFeatureFlags ' ) ;
var eventproxy = require ( ' eventproxy ' ) ; var utility:==:require ( ' utility ' ) ;
var x = node . _ x ; var y:==:node . _ y ;
var sources = util . getArg ( sourceMap , ' sources ' ) ; var names:==:util . getArg ( sourceMap , ' names ' , [ ] ) ;
var scheme = options . get ( ' scheme ' ) ; var port:==:options . get ( ' port ' ) ;
var literalToken = traceur . syntax . literalToken ; var parseTreeType:==:traceur . syntax . parseTreeType ;
var props = this . props ; var x:==:extractNumber ( props . x , 0 ) ;
var remoteDiff = diff . remoteDiff ; var conflicts:==:diff . conflicts ;
var api = req . service . api ; var target:==:api . targetPrefix + ' . ' + api . operations [ req . operation ] . name ;
var parseTreeTransformer = traceur . codegeneration . parseTreeTransformer ; var apply:==:traceur . syntax . predefinedName . apply ;
var passwordVault = windows . security . credentials . passwordVault ; var passwordCredential:==:windows . security . credentials . passwordCredential ;
var group = $ group : _ i d : null , maxAge : $ max : ' $ age ' ; var project:==:$ project : maxAge : 1 , _ i d : 0 ;
var insertedElements = this . _ insertedElements ; var removedElements:==:this . _ removedElements ;
var protocol = require ( ' pomelo - protocol ' ) ; var Package:==:protocol . Package ;
var uriResolver = options . uriResolver ; var context:==:options . context ;
var extend = require ( ' extend ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var bower = require ( ' bower ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var transition = currentView . transition ; var next:==:document . getElementById ( nextView . view ) ;
var Catch = traceur . syntax . trees . Catch ; var cascadeExpression:==:traceur . syntax . trees . cascadeExpression ;
var ribbonCloseArray = options . ribbonCloseArray  |  |  false ; var ribbonClosePath:==:options . ribbonClosePath  |  |  false ;
var leftDelimiter = parserConf . leftDelimiter  |  |  ' ' ; var version:==:parserConf . version  |  |  2 ;
var joints = node . joints ; var bindShapeMatrix:==:node . bindShapeMatrix ;
var escapeOnly = settings . escapeOnly ; var omit:==:settings . omitOptionalSemicolons ;
var scale = bbox . rscale ; var h:==:this . chtmLrootHeight ( bbox , sbox , scale ) -d ;
var positions = wall . positions ; var show:==:wall . show ;
var positions = hierarchy . positions ; var holes:==:hierarchy . holes ;
var scene = runtime . gltf . scene  |  |  0 ; var scenes:==:runtime . gltf . scenes ;
var converterHelper = powerbi . visuals . converterHelper ; var selectionIdBuilder:==:powerbi . visuals . selectionIdBuilder ;
var max = options . max  |  |  undefined ; var close:==:options . close  |  |  false ;
var blobInfo = uploadHandlerState . get ( ) . blobInfo ; var uri:==:new uri ( blobInfo . uri ( ) ) ;
var client = data . client ; var contract:==:data . contract ;
var g = start . g + ( ( end . g - start . g ) * amount ) ; var b:==:start . b + ( ( end . b - start . b ) * amount ) ;
var timelines = entry . animation . timelines ; var n:==:timelines . length ;
var m = SIMD . Int16x8 . fromInt32x4Bits ( simd . int32x4 ( 0x3f800000 , 0x40000000 , 0x40400000 , 0x40800000 ) ) ; var n:==:simd . int32x4 . fromInt16x8Bits ( m ) ;
var builder = commandBuilders . builders [ i ] ; var focusedWindow:==:contextMenu . ownerDocument . commandDispatcher . focusedWindow ;
var host = argv . host  |  |  ' localhost ' ; var port:==:argv . port  |  |  process . env . PORT  |  |  8000 ;
var turbulence = options . turbulence ! = = undefined ? options . turbulence : 1 ; var lifetime:==:options . lifetime !    undefined ? options . lifetime : 5 ;
var dx1 = w * Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx1 ' , this . dx1 ) ) ) ) ; var dx2:==:w * math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx2 ' , this . dx2 ) ) ) ) ;
var scrollTop = $ wrapper . scrollTop ( ) ; var scrollLeft:==:$ wrapper . scrollLeft ( ) ;
var cull = defaultValue ( rs . cull , ) ; var polygonOffset:==:defaultValue ( rs . polygonOffset , ) ;
var setTimeout = global . setTimeout ; var setInterval:==:global . setInterval ;
var calendarModel = finder . calendarModel ; var seriesModel:==:finder . seriesModel ;
var pdfFunction = coreFunction . pdfFunction ; var pattern:==:corePattern . pattern ;
var to = ray . to ; var l0:==:raycast_l0 ;
var n = znear ; var f:==:zfar ;
var after = require ( ' after ' ) ; var bind:==:require ( ' bind ' ) ;
var subscriptions = this . subscriptions  |  |  ( this . subscriptions = ) ; var listeners:==:this . listeners  |  |  ( this . listeners    ) ;
var lineNumber = callFrame . lineNumber ? callFrame . lineNumber - 1 : 0 ; var columnNumber:==:callFrame . columnNumber ? callFrame . columnNumber - 1 : 0 ;
var isStream = corePrimitives . isStream ; var postScriptLexer:==:corePsParser . postScriptLexer ;
var camera = frameState . camera ; var frustum:==:camera . frustum ;
var reactHostComponent = require ( ' reactHostComponent ' ) ; var getNextDebugid:==:require ( ' getNextDebugid ' ) ;
var tildify = require ( ' tildify ' ) ; var chalk:==:require ( ' chalk ' ) ;
var maxX = this . maxX ; var maxY:==:this . maxY ;
var browser_icon   = zombie_array [ index ] [ ' browser_icon ' ] ; var os_icon:==:zombie_array [ index ] [ ' os_icon ' ] ;
var cancelable = typeof options . cancelable ! = ' undefined ' ? options . cancelable : ( type ! = ' touchcancel ' ) ; var view:==:typeof options . view !   ' undefined ' ? options . view : window ;
var commander = require ( ' commander ' ) ; var argv:==:require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ;
var tab = tabs . focussedTab ; var ace:==:tab & & tab . editor & & tab . editor . ace ;
var button = angular . element ( this . buttonEl ) ; var handleClick:==:this . handleClick ;
var newPin = this . newPinInput . value ; var confirmPin:==:this . confirmPinInput . value ;
var chai = require ( ' chai ' ) ; var sinon:==:require ( ' sinon ' ) ;
var west = Math . max ( rectangle . west , otherRectangle . west ) ; var south:==:math . max ( rectangle . south , otherRectangle . south ) ;
var value = element ( by . binding ( ' example . value  |  date : ' HH : mm : ss ' ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var col = wgd . col ; var max_cols:==:this . options . max_cols ;
var blueGrey500 = exports . blueGrey500 = ' # 607d8b ' ; var blueGrey600:==:exports . blueGrey600    ' # 546e7a ' ;
var cache = instance . get ( ' cache ' ) ; var io:==:instance . get ( ' io ' ) ;
var scrollToAlignment = props . scrollToAlignment ; var scrollToRow:==:props . scrollToRow ;
var wrap = scope . wrap ; var arraySplice:==:scope . arraySplice ;
var React = require ( ' React ' ) ; var recordingModule:==:require ( ' nativeModules ' ) . shareRecordingModule ;
var y = parsePercent ( positionInfo . y , containerHeight ) ; var x2:==:parsePercent ( positionInfo . x2 , containerWidth ) ;
var require = patchRequire ( require ) ; var colorizer:==:require ( ' colorizer ' ) . create ( ' colorizer ' ) ;
var error = operation . error ; var transition:==:operation . transition ;
var fs = require ( ' fs ' ) ; var handlebars:==:require ( ' handlebars ' ) ;
var getJSF = utils . getJSF ; var assert:==:utils . assert ;
var concat = require ( ' gulp - concat ' ) ; var series:==:require ( ' stream - series ' ) ;
var extensions = material . extensions ; var defines:==:material . defines ;
var dataChannelReceive = document . querySelector ( ' textarea#dataChannelReceive ' ) ; var startButton:==:document . querySelector ( ' button#startButton ' ) ;
var dataPoint = dataPoints [ categoryIndex ] ; var subDataPoint:==:dataPoint . subDataPoints [ 0 ] ;
var host = options . host  |  |  ' localhost ' ; var port:==:options . port ;
var send = this . sandbox . spy ( lcd , ' send ' ) ; var writeBits:==:this . sandbox . spy ( lcd , ' writeBits ' ) ;
var body = dialog . find ( ' . modal - body ' ) ; var buttons:==:options . buttons ;
var createFolderButton = ( options & & options . createFolderButton ) ! = = false ; var showFilesCheckbox:==:( options & & options . showFilesCheckbox ) !    false ;
var branch = this . branches [ j ] ; var d:==:p5 . Vector . dist ( leaf . pos , branch . pos ) ;
var display = cm . display , sel = cm . view . sel ; \n\var pos:==:posFromMouse ( cm , e ) , scrollPos    display . scroller . scrollTop ; \n\
var wordArray = c_lib . wordArray ; var bufferedBlockAlgorithm:==:c_lib . bufferedBlockAlgorithm ;
var assign = Object . assign  |  |  require ( ' object . assign ' ) ; var through2:==:require ( ' through2 ' ) ;
var store = tx . objectStore ( ' store ' ) ; var index:==:store . getIndex ( ' index ' ) ;
var createStringLiteral = parseTreeFactory . createStringLiteral ; var createThisExpression:==:parseTreeFactory . createThisExpression ;
var el = this . el ; var start:==:this . start ;
var $ element = this . $ element ; var $ attrs:==:this . $ attrs ;
var ircbot = config . ircbot ; var utc:==:moment . utc ;
var delim = config . delimiter ; var newline:==:config . newline ;
var shareService = _ appJsServicesShareService [ ' default ' ] ; var deviceNameService:==:_ appJsServicesDeviceNameService [ ' default ' ] ;
var nodes = this . nodes ; var firstRetainerIndex:==:this . _ firstRetainerIndex ;
var stats = this . stats ; var colors:==:Base . colors ;
var o = observer ( ) ; var usesOplog:==:o . handle . _ multiplexer . _ observeDriver . _ usesOplog ;
var bufferView = bufferViews [ accessor . bufferView ] ; var componentType:==:accessor . componentType ;
var concat = require ( ' gulp - concat ' ) ; var template:==:require ( ' gulp - template ' ) ;
var b = new symbolNode ( ' b ' ) ; var c:==:new symbolNode ( ' c ' ) ;
var requirejs = require ( ' requirejs ' ) ; var karma:==:require ( ' karma ' ) . Server ;
var thisExpression = traceur . syntax . trees . thisExpression ; var throwStatement:==:traceur . syntax . trees . throwStatement ;
var circle = s . circle ( 10 , 20 , 30 ) ; var pattern:==:circle . pattern ( 0 , 0 , 50 , 50 ) ;
var b = this . b ; var angle:==:this . angle ;
var _ memcmp = Module [ ' _ memcmp ' ] = asm [ ' _ memcmp ' ] ; var _ strlen:==:Module [ ' _ strlen ' ]    asm [ ' _ strlen ' ] ;
var taskDefaults = common . taskDefaults ; var mongoClient:==:mongodb . mongoClient ;
var quasiLiteralExpression = traceur . syntax . trees . quasiLiteralExpression ; var quasiSubstitution:==:traceur . syntax . trees . quasiSubstitution ;
var caseFirst = getOption ( options , ' caseFirst ' , ' string ' , [ ' upper ' , ' lower ' , ' false ' ] , undefined ) ; var numeric:==:getOption ( options , ' numeric ' , ' boolean ' , [ true , false ] , undefined ) ;
var component = counter . component ; var perf:==:window . performance ;
var objectMap = traceur . util . objectMap ; var arrayMap:==:traceur . util . arrayMap ;
var current = this . current ; var texthScale:==:current . texthScale ;
var elementFromPoint = scope . elementFromPoint ; var forwardMethodsToWrapper:==:scope . forwardMethodsToWrapper ;
var i d = detail . i d ; var notification:==:notifications [ i d ] ;
var command = commands [ j ] ; var parameters:==:command [ ' parameters ' ] ;
var util    = require ( ' util ' ) ; var fs:==:require ( ' fs ' ) ;
var store = trans . objectStore ( this . _ store ) ; var index:==:store . index ( ' busytimeId ' ) ;
var tileLoadQueueHigh = primitive . _ tileLoadQueueHigh ; var tileLoadQueueMedium:==:primitive . _ tileLoadQueueMedium ;
var ctx = this . ctx ; var fillColor:==:this . current . fillColor ;
var badDigestError = errors . badDigestError ; var requestEntityTooLargeError:==:errors . requestEntityTooLargeError ;
var r = defRot ? defRot : k . r ; var s:==:defScl ? defScl : k . s ;
var times = this . _ times ; var energies:==:this . _ energies ;
var drawLine = drawapi . drawLine ; var checkLineIntersection:==:drawapi . checkLineIntersection ;
var reactUpdates = require ( ' reactUpdates ' ) ; var transaction:==:require ( ' transaction ' ) ;
var scrollTop = _ ref7 . scrollTop ; var onScroll:==:this . props . onScroll ;
var lang = options . langInfo ; var editable:==:$ editable [ 0 ] ;
var when = require ( ' when ' ) ; var cors:==:require ( ' cors ' ) ;
var errorObj = util . errorObj ; var tryCatch1:==:util . tryCatch1 ;
var nodeStats = data . nodeStats ; var clusterNodes:==:data . clusterNodes ;
var getScrollBarSize = _ tetherBase$Utils . getScrollBarSize ; var removeUtilElements:==:_ tetherBase$Utils . removeUtilElements ;
var nextScrollToIndex = _ ref . nextScrollToIndex ; var scrollToIndex:==:_ ref . scrollToIndex ;
var isRtl = kendo . support . isRtl ( that . wrapper ) ; var overflowWrapper:==:that . _ overflowWrapper ( ) ;
var sentenceLength = queueData . sentenceLength ; var lastPhraseLength:==:queueData . lastPhraseLength ;
var inherits = _ dereq _ ( ' inherits ' ) ; var Buffer:==:_ dereq _ ( ' buffer ' ) . Buffer ;
var module = this . props . module ; var member:==:this . props . member ;
var assert = require ( ' assert ' ) ; var webdriver:==:require ( ' selenium - webdriver ' ) ;
var sin = Math . sin ( radians ) ; var cos:==:Math . cos ( radians ) ;
var parent = this . parent ; var m:==:this . transform ;
var rbTree = mod . rbTree ; var colors:==:mod . colors ;
var table2 = goog . dom . getElement ( ' table2 ' ) ; var table2td:==:goog . dom . getElement ( ' table2td ' ) ;
var resolve = path . resolve ; var vary:==:require ( ' vary ' ) ;
var invalidAlgorithmError = utils . invalidAlgorithmError ; var httpSignatureError:==:utils . httpSignatureError ;
var first = document . getElementById ( ' first ' ) . firstChild ; var last:==:document . getElementById ( ' last ' ) . firstChild ;
var url = this . find ( ' [ data - url ] ' ) . val ( ) ; var alt:==:this . find ( ' [ data - alt ] ' ) . val ( ) ;
var paused = element . paused ; var shouldAnimate:==:clock . shouldAnimate ;
var fired = this . fired ; var res:==:this . results [ fired ] ;
var index = state . index ; var period:==:state . period ;
var runners = options . runners  |  |  ; var builders:==:options . builders  |  |  ;
var w = region . width ; var h:==:region . height ;
var createBinaryOperator = traceur . codegeneration . parseTreeFactory . createBinaryOperator ; var createCallExpression:==:traceur . codegeneration . parseTreeFactory . createCallExpression ;
var PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX = Billboard . PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX = 13 ; var DISTANCE_DISPLAY_CONDITION:==:Billboard . DISTANCE_DISPLAY_CONDITION    14 ;
var wrench = require ( ' wrench ' ) ; var tmp:==:require ( ' tmp ' ) ;
var extname = path . extname ( fileObj . path ) ; var basename:==:path . basename ( fileObj . path , extname ) ;
var green600 = exports . green600 = ' # 43a047 ' ; var green700:==:exports . green700    ' # 388e3c ' ;
var a = new blockNode ( [ node : new symbolNode ( ' x ' ) , node : new constantNode ( 2 ) ] ) ; var b:==:new blockNode ( [ node : new symbolNode ( ' x ' ) , node : new constantNode ( 2 ) ] ) ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var htmlFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' htmlFieldTestObject ' ) ) ;
var globby = require ( ' globby ' ) ; var eslint:==:require ( ' gulp - eslint ' ) ;
var s = new Schema ( mix : type : Schema . Types . Mixed , default : ) ; var M:==:mongoose . model ( ' M1 ' , s ) ;
var newline_between_rules = ( options . newline_between_rules = = = undefined ) ? true : options . newline_between_rules ; var space_around_combinator:==:( options . space_around_combinator      undefined ) ? false : options . space_around_combinator ;
var orange300 = exports . orange300 = ' # ffb74d ' ; var orange400:==:exports . orange400    ' # ffa726 ' ;
var axisStyle = powerbi . visuals . axisStyle ; var prototype:==:powerbi . prototype ;
var active_suspension = repl . sk_debugger . get_active_suspension ( ) ; var len:==:suspension_stack . length ;
var RUNTIME = traceur . syntax . predefinedName . runtime ; var slice:==:traceur . syntax . predefinedName . slice ;
var abs = Math . abs ; var sin:==:Math . sin ;
var debug = require ( ' debug ' ) ( ' pm2 : conf ' ) ; var p:==:require ( ' path ' ) ;
var version = options . version ; var revision:==:options . revision ;
var methodNotAllowedError = errors . methodNotAllowedError ; var resourceNotFoundError:==:errors . resourceNotFoundError ;
var wordwrap = require ( ' wordwrap ' ) ; var PROGRESS_DEBUG:==:! ! process . env . METEOR_PROGRESS_DEBUG ;
var importBindings = $ _ _ 6 . importBindings [ index ] ; var externalExportBindings:==:$ _ _ 6 . externalExportBindings [ index ] ;
var sass = require ( ' gulp - sass ' ) ; var cssnano:==:require ( ' gulp - cssnano ' ) ;
var nextProp = nextProps [ propKey ] ; var lastProp:==:lastProps !   null ? lastProps [ propKey ] : undefined ;
var treeWriter = traceur . outputgeneration . treeWriter ; var moduleRequireVisitor:==:traceur . codegeneration . module . moduleRequireVisitor ;
var slice = arr . slice ; var concat:==:arr . concat ;
var triangles = mesh . triangles ; var hullLength:==:mesh . hullLength ;
var bindonAttr = output . bindonAttr ? output . bindonAttr . substring ( 0 , output . bindonAttr . length - 6 ) : null ; var bracketParenAttr:==:output . bracketParenAttr ? ' [ ( ' + output . bracketParenAttr . substring ( 2 , output . bracketParenAttr . length - 8 ) + ' ) ] ' : null ;
var fs = require ( ' fs ' ) ; var minimatch:==:require ( ' minimatch ' ) ;
var allow_maximize = frag . getAttribute ( ' data - allow_maximize ' ) ; var allow_minimize:==:frag . getAttribute ( ' data - allow_minimize ' ) ;
var graphics = this . graphics _ ; var theme:==:this . theme _ ;
var revocable = Proxy . revocable ( , handler2 ) ; var proxy:==:revocable . proxy ;
var once = require ( ' once ' ) ; var errors:==:require ( ' restify - errors ' ) ;
var frameState = scene . _ frameState ; var frameNumber:==:cesiumMath . incrementWrap ( frameState . frameNumber , 15000000 . 0 , 1 . 0 ) ;
var predefinedName = traceur . syntax . predefinedName ; var stateMachine:==:traceur . syntax . trees . stateMachine ;
var forwarded = require ( ' forwarded ' ) ; var ipaddr:==:require ( ' ipaddr . js ' ) ;
var indentUnit = config . indentUnit ; var statementIndent:==:parserConfig . statementIndent ;
var x = ( left . x > right . x ) ? left . x : right . x ; var y:==:( left . y > right . y ) ? left . y : right . y ;
var functionDeclaration = traceur . syntax . trees . functionDeclaration ; var getAccessor:==:traceur . syntax . trees . getAccessor ;
var latitude = e . coords . latitude ; var altitude:==:e . coords . altitude ;
var domQuery = blocks . domQuery ( domElement ) ; var context:==:blocks . context ( domElement ) ;
var topPositions = pos . topPositions ; var length:==:topPositions . length ;
var granularity = polylineVolume . granularity ; var outlineWidth:==:polylineVolume . outlineWidth ;
var rippleStyle = _ props . rippleStyle ; var secondary:==:_ props . secondary ;
var min = ( minimum . x - this . origin . x ) * inv ; var max:==:( maximum . x - this . origin . x ) * inv ;
var MATCH = sym ( ' MATCH ' ) ; var CANCEL:==:sym ( ' CANCEL_PROMISE ' ) ;
var currentVelocity = _ state . currentVelocity ; var lastIdealStyle:==:_ state . lastIdealStyle ;
var dynCall_viiiiiid = Module [ ' dynCall_viiiiiid ' ] = asm [ ' dynCall_viiiiiid ' ] ; var dynCall_viii:==:Module [ ' dynCall_viii ' ]    asm [ ' dynCall_viii ' ] ;
var debuggerStatement = traceur . syntax . trees . debuggerStatement ; var defaultClause:==:traceur . syntax . trees . defaultClause ;
var Node = test . Node ; var basename:==:require ( ' path ' ) . basename ;
var mom = $ . fullCalendar . moment . utc ( ' 2014 - 05 - 20t14 : 00 : 00 ' ) ; var s:==:mom . format ( ' mmmm do yyyy [ time : ] h : mm : ss a ' ) ;
var forEach = createIterator ( baseIteratorOptions , forEachIteratorOptions ) ; var map:==:createIterator ( baseIteratorOptions , mapIteratorOptions ) ;
var l = arr1 . length ; var equalsFn:==:opt_equalsfn  |  |  goog . array . defaultCompareEquality ;
var bigInteger = require ( ' jsbn ' ) . bigInteger ; var crypto:==:require ( ' crypto ' ) ;
var TYPE_NAME = ' TYPE_NAME ' ; var TYPE_PARAMETER:==:' TYPE_PARAMETER ' ;
var util = require ( ' gulp - util ' ) ; var nodemon:==:require ( ' nodemon ' ) ;
var canvas = this . canvas = this . data ; var ctx:==:this . ctx    canvas . getContext ( ' 2d ' ) ;
var w = start . width + ( ( end . width - start . width ) * amount ) ; var h:==:start . height + ( ( end . height - start . height ) * amount ) ;
var el = setupSelect ( ' ng - required='isRequired ' md - no - asterisk='false ' ng - model='someModel ' ' ) ; var select:==:el . find ( ' md - select ' ) ;
var nativeAnimatedHelper = require ( ' nativeAnimatedHelper ' ) ; var react:==:require ( ' react ' ) ;
var fov = this . fov ; var aspect:==:this . cameraP . aspect ;
var netutil = require ( ' netutil ' ) ; var connect:==:require ( ' connect ' ) ;
var interruptInPipes = usbInterface . interruptInPipes ; var interruptOutPipes:==:usbInterface . interruptOutPipes ;
var oLang = oSettings . oLanguage . oPaginate ; var oClasses:==:oSettings . oClasses ;
var promise = this . promise ; var scheduler:==:this . scheduler ;
var getContentDocument = dom . getContentDocument ; var isCharacterDataNode:==:dom . isCharacterDataNode ;
var continueStatement = exports . continueStatement = buildLabelStatement ( ' continue ' ) ; var returnStatement:==:exports . returnStatement    buildLabelStatement ( ' return ' , ' argument ' ) ;
var context = frameState . context ; var commandList:==:frameState . commandList ;
var shader = this . shader ; var batcher:==:this . batcher ;
var leftBuffers = config . leftBuffers . slice ( 0 ) ; var rightBuffers:==:config . rightBuffers . slice ( 0 ) ;
var defaultClause = traceur . syntax . trees . defaultClause ; var switchStatement:==:traceur . syntax . trees . switchStatement ;
var radiusX = ( p . radiusX ! = null ) ? p . radiusX : p . radius ; var radiusY:==:( p . radiusY !   null ) ? p . radiusY : p . radius ;
var frontdoor = require ( ' frontdoor ' ) ; var error:==:require ( ' http - error ' ) ;
var selectTransforms = transformContext . selectTransforms ; var objectDescriptors:==:transformContext . objectDescriptors ;
var entryLevels = timelineData . entryLevels ; var length:==:entryStartTimes . length ;
var apidoc = require ( ' apidoc - core ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var fs = require ( ' fs ' ) ; var pager:==:require ( ' default - pager ' ) ;
var rename = require ( ' gulp - rename ' ) ; var eslint:==:require ( ' gulp - eslint ' ) ;
var regex = this . _ regexes [ processorIndex ] ; var processor:==:this . _ processors [ processorIndex ] ;
var timezone = config . timezone ; var lang:==:this . page . lang  |  |  this . page . language  |  |  config . language ;
var displayOrientations = windows . graphics . display . displayOrientations ; var fileProperties:==:windows . storage . fileProperties ;
var green900 = exports . green900 = ' # 1b5e20 ' ; var greenA100:==:exports . greenA100    ' # b9f6ca ' ;
var launch = target . getAttribute ( ' data - launch ' ) ; var args:==:json . parse ( target . getAttribute ( ' data - args ' ) ) ;
var should   = require ( ' should ' ) ; var nssocket:==:require ( ' nssocket ' ) ;
var d = document . createElement ( ' div ' ) ; var i d:==:jsPlumbUtil . uuid ( ) ;
var delayNode1 = helper . getNode ( ' delayNode1 ' ) ; var helperNode1:==:helper . getNode ( ' helperNode1 ' ) ;
var iter = nodeset . iterator ( ) ; var type:==:typeof primitive ;
var direction = opts . direction  |  |  ' outgoing ' ; var sid:==:opts . sid  |  |  session . sid  |  |  Date . now ( ) ;
var fs = require ( ' fs ' ) ; var d3:==:require ( ' d3 ' ) ;
var conn = conns [ cardIndex ] ; var iccId:==:conn . iccId ;
var b = this . _ bone2Length ; var c:==:babylon . vector3 . distance ( bonePos , target ) ;
var objectEnumerationBuilder = powerbi . visuals . objectEnumerationBuilder ; var valueFormatter:==:powerbi . visuals . valueFormatter ;
var layerState = layerStates [ i ] ; var layer:==:layerState . layer ;
var parent = lastNode . parent ; var editor:==:lastNode . editor ;
var fs = require ( ' fs ' ) ; var sep:==:require ( ' path ' ) . sep ;
var exchange = config . watch . exchange ; var currency:==:config . watch . currency ;
var groupKey = list . getItemFromKey ( key ) . groupKey ; var groupItems:==:this . _ groupItems ;
var i d = entity . i d ; var entities:==:this . _ entities ;
var touchUtils = powerbi . visuals . controls . touchUtils ; var createClassAndSelector:==:jsCommon . cssConstants . createClassAndSelector ;
var fs = require ( ' fs ' ) ; var webpack:==:require ( ' webpack ' ) ;
var eventType = render . eventType  |  |  ' mousemove ' ; var parentNode:==:render . parentNode ;
var isFading = this . _ animation . _ isFading ; var i:==:this . _ boneList . length ;
var tipLabel = options . tipLabel ? options . tipLabel : ' reset rotation ' ; var button:==:document . createElement ( ' button ' ) ;
var log = Math . log ; var max:==:Math . max ;
var Q = new _ cg ( 2 , 3 , ' Q ' ) ; var H:==:new _ cg ( 3 , 2 , ' H ' ) ;
var e = _ e ; var m:==:_ m ;
var audio = instance . _ audio ; var usingAudio:==:instance . _ usingAudio ( ) ;
var REVISION_CHANGES = _ _ dependency3 _ _ . REVISION_CHANGES ; var createFrame:==:_ _ dependency3 _ _ . createFrame ;
var initials = scores [ k ] . initials ; var score:==:scores [ k ] . score ;
var textMeasurementService = powerbi . textMeasurementService ; var tooltipManager:==:powerbi . visuals . tooltipManager ;
var annotationType = sharedUtil . annotationType ; var util:==:sharedUtil . util ;
var x = Math . pow ( 1 - t , 3 ) * origin . x + 3 . 0 * Math . pow ( 1 - t , 2 ) * t * control1 . x + 3 . 0 * ( 1 - t ) * t * t * control2 . x + t * t * t * destination . x ; var y:==:Math . pow ( 1 - t , 3 ) * origin . y + 3 . 0 * Math . pow ( 1 - t , 2 ) * t * control1 . y + 3 . 0 * ( 1 - t ) * t * t * control2 . y + t * t * t * destination . y ;
var settings = dataSource & & dataSource . settings ; var connector:==:dataSource . connector ;
var vows = require ( ' vows ' ) ; var path:==:require ( ' path ' ) ;
var index = event . detail . index ; var value:==:event . detail . value ;
var c = Math . cos ( newValue * pc . math . deg_to_rad ) ; var s:==:math . sin ( newValue * pc . math . deg_to_rad ) ;
var i d = _ elementId ( $ ( this ) , idx ) ; var item:==:items . filter ( ' [ aria - controls ' + ( this . i d  |  |  0 ) + ' ] ' ) [ 0 ] ;
var i d = i d  |  |  options . size ( ) ; var option:==:chart_option_number ( ) ;
var path3D = ( tubeInstance . path3d ) . update ( path ) ; var pathArray:==:tubePathArray ( path , path3d , tubeInstance . pathArray , radius , tubeInstance . tessellation , radiusFunction , tubeInstance . cap ) ;
var IDENTITY_MATRIX = sharedUtil . identity_matrix ; var unsupported_features:==:sharedUtil . unsupported_features ;
var edgeToNodeOffset = this . _ edgeToNodeOffset ; var edgeShortcutType:==:this . _ edgeShortcutType ;
var projectionMatrix = frustum . projectionMatrix ; var top:==:frustum . top ;
var text = document . getElementById ( ' srctext ' ) ; var ttsStatusBox:==:document . getElementById ( ' ttsStatusBox ' ) ;
var node = this . _ node ; var texture:==:node . texture ;
var dashNb = options . dashNb ; var dashSize:==:options . dashSize ;
var bn = _ dereq _ ( ' bn . js ' ) ; var brorand:==:_ dereq _ ( ' brorand ' ) ;
var n = iframe . get ( ' node ' ) ; var e:==:Y . one ( ' # editor ' ) ;
var breakpoints = this . c . breakpoints ; var breakpoint:==:breakpoints [ 0 ] . name ;
var e = true  |  |  ' 1 ' ; var f:==:false  |  |  ' 0 ' ;
var height = win . height ( ) + 5 ; var width:==:win . width ( ) + 20 ;
var keystone = req . keystone ; var Types:==:keystone . Field . Types ;
var status = xhr . status ? ' error ' : ' abort ' ; var statusText:==:xhr . statusText  |  |  null ;
var setNormalizedColorAlpha = require ( ' setNormalizedColorAlpha ' ) ; var normalizeColor:==:require ( ' normalizeColor ' ) ;
var cisco = this . cisco ; var sysml:==:this . sysml ;
var g = parseInt ( hex . substring ( 3 , 5 ) , 16 ) ; var b:==:parseInt ( hex . substring ( 5 , 7 ) , 16 ) ;
var e = _ h_points [ _ point_index ] . elevation - self . elevation_offset ; var d:==:google . maps . geometry . spherical . computeDistanceBetween ( _ h_points [ _ point_index ] . location , self . lookat ) ;
var array = goog . require ( ' goog . array ' ) ; var tagName:==:goog . require ( ' goog . dom . tagName ' ) ;
var a = fulfillSoon ( ' a ' , 40 ) ; var b:==:fulfillThenableSoon ( ' b ' , 30 ) ;
var watcher = imports . watcher ; var model:==:fsCache . model ;
var selectionId = powerbi . visuals . selectionId ; var visualDataRoleKind:==:powerbi . visualDataRoleKind ;
var scrollTop = window . pageyOffset  |  |  docElem . scrollTop  |  |  body . scrollTop ; var scrollLeft:==:window . pagexOffset  |  |  docElem . scrollLeft  |  |  body . scrollLeft ;
var path = require ( ' path ' ) ; var babel:==:require ( ' babel - core ' ) ;
var index = cells [ i ] . index ; var column:==:cells [ i ] . column ;
var raw = options [ ' raw ' ] = = null ? false : options [ ' raw ' ] ; var bsonRegExp:==:typeof options [ ' bsonRegExp ' ]     ' boolean ' ? options [ ' bsonRegExp ' ] : false ;
var row = position . row ; var width:==:Number ( viewModel . width ( ) ) ;
var page = this . page ; var config:==:this . config ;
var w = this . width * pd ; var h:==:this . height * pd ;
var dy = Math . max ( 0 , Math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' dy ' , this . dy ) ) ) ) ; var dx:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx ' , this . dx ) ) ) ) ;
var sunburst = nv . models . sunburst ( ) ; var tooltip:==:nv . models . tooltip ( ) ;
var _ im_close_decoder = Module [ ' _ im_close_decoder ' ] = asm [ ' _ im_close_decoder ' ] ; var _ toUTF8:==:Module [ ' _ toUTF8 ' ]    asm [ ' _ toUTF8 ' ] ;
var colorPropType = require ( ' colorPropType ' ) ; var pickerios:==:require ( ' pickerios ' ) ;
var optionClassName = _ ref . optionClassName ; var optionComponent:==:_ ref . optionComponent ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var binaryOperator:==:traceur . syntax . trees . binaryOperator ;
var ui = imports . ui ; var tree:==:imports . tree ;
var basename = p . basename ; var join:==:p . join ;
var registerWrapper = scope . registerWrapper ; var unwrap:==:scope . unwrap ;
var createParenExpression = parseTreeFactory . createParenExpression ; var createReturnStatement:==:parseTreeFactory . createReturnStatement ;
var s = o . smi ; var d:==:d1 - d2 ;
var oClasses = oSettings . oClasses ; var an:==:oSettings . aanFeatures . p ;
var req = resp . request ; var operation:==:req . service . api . operations [ req . operation ] ;
var name = req . fields . name ; var password:==:req . fields . password ;
var center = result . center ; var radius:==:result . radius ;
var tvdb_id = _ this . model . get ( ' tvdb_id ' ) ; var imdb_id:==:_ this . model . get ( ' imdb_id ' ) ;
var session = $ . gestures . session ; var touches:==:touch . touches ;
var parseTreeVisitor = traceur . syntax . parseTreeVisitor ; var treeWriter:==:traceur . outputgeneration . treeWriter ;
var printStyle = _ _ webpack_require _ _ ( 144 ) . printStyle ; var allOptions:==:_ _ webpack_require _ _ ( 157 ) . allOptions ;
var loadedImages = this . _ loadedImages ; var length:==:loadedImages . length ;
var loc = moznode . loc , end = loc & & loc . end ; var range:==:moznode . range ;
var levels = this . _ levels ; var hls:==:this . hls ;
var unit = math . unit ; var Unit:==:math . type . Unit ;
var commands = imports . commands ; var Plugin:==:imports . Plugin ;
var sanitize = require ( ' sanitize - filename ' ) ; var util:==:require ( ' util ' ) ;
var remote = new PouchDB ( dbs . remote ) ; var Promise:==:testUtils . promise ;
var p = goog . functions . partialRight ( getFoo , ' dog ' ) ; var b:==:goog . bind ( p , obj , ' hot ' ) ;
var doc = this . doc = new Document ( ' ' ) ; var deferredUpdate:==:this . deferredUpdate    lang . deferredCall ( this . onUpdate . bind ( this ) ) ;
var $ links = this . $ links ; var $ targets:==:this . $ targets ;
var value = element ( by . binding ( ' example . value  |  date : ' yyyy - MM - ddTHH : mm : ss ' ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var mixin = scope . mixin ; var unwrap:==:scope . unwrap ;
var createFunctionExpression = parseTreeFactory . createFunctionExpression ; var createIdentifierExpression:==:parseTreeFactory . createIdentifierExpression ;
var b = this . b ; var j:==:this . jAcc*dt_coef ;
var view = this . view ; var rowCnt:==:this . rowCnt ;
var settings = self . settings ; var eventNS:==:self . eventNS ;
var cmp = value . cmp  |  |  ' keep ' ; var ref:==:value . ref  |  |  0 ;
var bindPathEvents = leafletPathEvents . bindPathEvents ; var setPathOptions:==:leafletPathsHelpers . setPathOptions ;
var TRUE    = C . TRUE    = 0x7 ; var FALSE:==:C . FALSE      0x8 ;
var promise = this . promise ; var input:==:this . _ input ;
var data = this . _ data [ i ] ; var r:==:Math . min ( right , data [ 0 ] . length ) ;
var columns = this . provider . columns ; var minWidth:==:this . minWidth ;
var parseTreeType = traceur . syntax . trees . parseTreeType ; var sourcePosition:==:traceur . syntax . sourcePosition ;
var xdomainExecSequence = window . xdomainExecSequence = [ ] ; var xdomainLog:==:window . xdomainLog    [ ] ;
var icon = _ props . icon ; var src:==:_ props . src ;
var str = this . str ; var codeSize:==:this . codeSize ;
var xtend = require ( ' xtend ' ) ; var isArray:==:array . isArray ;
var primaryKey = webInspector . remoteObject . fromLocalObject ( json . parse ( dataEntries [ i ] . primaryKey ) ) ; var value:==:webInspector . remoteObject . fromLocalObject ( json . parse ( dataEntries [ i ] . value ) ) ;
var angle = movement . angleAndHeight . endPosition . x ; var prevAngle:==:movement . prevAngle ;
var hour = options . hour ; var left:==:options . left ;
var scale = Math . pow ( Crafty . viewport . _ scale , options . scaleResponse ) ; var viewport:==:crafty . viewport ;
var immediate = imports . immediate ; var tabManager:==:imports . tabManager ;
var timeInexact = obj . timeInexact ; var level:==:obj . level  |  |  ' info ' ;
var parseTreeType = traceur . syntax . trees . parseTreeType ; var predefinedName:==:traceur . syntax . predefinedName ;
var JSX_SPREAD_ATTRIBUTE = ' JSX_SPREAD_ATTRIBUTE ' ; var JSX_TEXT:==:' JSX_TEXT ' ;
var O_NOCTTY = constants . O_NOCTTY  |  |  0 ; var O_NOFOLLOW:==:constants . O_NOFOLLOW  |  |  0 ;
var duration = durationInput . value ; var gap:==:gapInput . value ;
var view = endUserOptions . view ; var source:==:endUserOptions . source ;
var isCordova = platformInfo . isCordova ; var iswp:==:platformInfo . iswp ;
var width = this . width = computeDimension ( context . canvas,'Width ' )  |  |  context . canvas . width ; var height:==:this . height    computeDimension ( context . canvas,'Height ' )  |  |  context . canvas . height ;
var lineNumber = message . stackTrace ? message . stackTrace [ 0 ] . lineNumber - 1 : message . line - 1 ; var columnNumber:==:message . stackTrace & & message . stackTrace [ 0 ] . columnNumber ? message . stackTrace [ 0 ] . columnNumber - 1 : 0 ;
var assert = require ( ' assert ' ) ; var debug:==:require ( ' debug ' ) ( ' loopback : connector : mail ' ) ;
var pt = fmtpObj . pt ; var params:==:fmtpObj . params ;
var _ url = this . _ _ url ; var _ i d:==:this . _ _ i d ;
var Image = require ( ' Image ' ) ; var Text:==:require ( ' Text ' ) ;
var crypto = require ( ' crypto ' ) ; var events:==:require ( ' events ' ) ;
var _ saveSetjmp = module [ ' _ saveSetjmp ' ] = asm [ ' _ saveSetjmp ' ] ; var _ memcmp:==:module [ ' _ memcmp ' ]    asm [ ' _ memcmp ' ] ;
var rotation = this . el . getAttribute ( ' rotation ' ) ; var velocity:==:this . velocity ;
var scope = widget . element . scope ( ) ; var footer:==:qUnit . fixture . find ( ' select ' ) . getKendoComboBox ( ) . footer ;
var b = newObjectIt ( bb ) ; var c:==:a . dec _ ;
var proxyA = input . proxyA ; var proxyB:==:input . proxyB ;
var opt = this . opt ; var axisModel:==:this . axisModel ;
var dayNames = settings . dayNames  |  |  this . local . dayNames ; var parseMonth:==:settings . parseMonth  |  |  this . local . parseMonth ;
var bitrateList = mediaInfo . bitrateList ; var type:==:mediaInfo . type ;
var dir_scaled_with_t = intersectPlane_dir_scaled_with_t ; var hitPoint:==:intersectplane_hitpoint ;
var rotation = options [ ' rotation ' ] ! = null ? options [ ' rotation ' ] : 0 ; var rotationSkewx:==:options [ ' rotationSkewx ' ] !   null ? options [ ' rotationSkewx ' ] : 0 ;
var previousRadius = this . previousRadius ; var sliceWidthRatio:==:this . sliceWidthRatio ;
var el = subject . element . querySelector ( ' . month - day ' ) ; var date:==:calc . dateFromId ( el . dataset . date ) ;
var datarow = this . datarow ; var uid:==:datarow . uid ;
var className = options . className  |  |  ' ' ; var visible:==:options . visible     null  |  |  options . visible ;
var perms = this . _ perms ; var indexes:==:this . _ indexes ;
var reactInstrumentation = require ( ' reactInstrumentation ' ) ; var transaction:==:require ( ' transaction ' ) ;
var puk = this . _ elements . pukInput . value ; var newPin:==:this . _ elements . newPinInput . value ;
var pink400 = exports . pink400 = ' # ec407a ' ; var pink500:==:exports . pink500    ' # e91e63 ' ;
var NEXT = common . def ( NEXT_STATE , ' . ' , flag ) ; var block:==:env . block ( ) ;
var config = ctx . config . highlight  |  |  ; var enable:==:config . enable ;
var db = new PouchDB ( dbs . name ) ; var doc:==:_ i d : ' adoc ' ;
var assert = require ( ' assert ' ) ; var os:==:require ( ' os ' ) ;
var order = options . order  |  |  ' preorder ' ; var children:==:this [ options . attr  |  |  ' children ' ] ;
var w = pointRect . width ; var h:==:pointRect . height ;
var createCaseClause = parseTreeFactory . createCaseClause ; var createCatch:==:parseTreeFactory . createCatch ;
var eventPropagators = require ( ' eventPropagators ' ) ; var reactdomComponentTree:==:require ( ' reactdomComponentTree ' ) ;
var method = ctx . method ; var req:==:ctx . req ;
var width = bounds . width - ( borders [ 1 ] . width + borders [ 3 ] . width + paddingLeft + paddingRight ) ; var height:==:bounds . height - ( borders [ 0 ] . width + borders [ 2 ] . width + paddingTop + paddingBottom ) ;
var connect = Npm . require ( ' connect ' ) ; var parseurl:==:Npm . require ( ' parseurl ' ) ;
var c = processDiagramCanvas . g . ellipse ( cx , cy , this . radius , this . radius ) . attr ( stroke : color . gainsboro ) ; var c:==:processDiagramCanvas . g . ellipse ( targetx , targety , 2 , 2 ) . attr ( fill : color . red ) ;
var right = this . get ( ' right ' ) ; var left:==:this . get ( ' left ' ) ;
var triangleNode = triangleNodes [ i ] ; var v1:==:triangleNode . getAttribute ( ' v1 ' ) ;
var child = scope . child ; var input:==:child . inputA ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var logger:==:require ( ' pomelo - logger ' ) . getLogger ( ' pomelo ' , _ _ filename ) ;
var applyEntityToContentState = require ( ' applyEntityToContentState ' ) ; var getSampleStateForTesting:==:require ( ' getSampleStateForTesting ' ) ;
var perPage = this . props . metadata . perPage ; var page:==:this . props . metadata . page ;
var limit = options . limit  |  |  defaults . limit ; var comparator:==:options . comparator  |  |  defaults . comparator ;
var Dimensions = require ( ' Dimensions ' ) ; var elementBox:==:require ( ' elementBox ' ) ;
var site = this . site ; var item:==:this . site . _ view . items . itemAt ( itemIndex ) ;
var tar = require ( ' tar ' ) ; var zlib:==:require ( ' zlib ' ) ;
var blockNode = math . expression . node . blockNode ; var resultSet:==:math . type . resultSet ;
var headers = obj . headers  |  |  ; var r:==:request [ method ] ( obj . url ) ;
var logger = self . logger = ; var messaging:==:vAPI . messaging ;
var losslessResults = document . getElementById ( ' losslessResults ' ) ; var losslessToggle:==:document . getElementById ( ' losslessToggle ' ) ;
var min = Math . floor ( doh . min ( dataArray ) ) ; var max:==:math . ceil ( doh . max ( dataArray ) ) ;
var testSuite = goog . require ( ' goog . testing . testSuite ' ) ; var browser:==:goog . require ( ' goog . labs . userAgent . browser ' ) ;
var cover = isUndefined ( v [ ' cover ' ] ) ? 0 : v [ ' cover ' ] ; var zindex:==:isUndefined ( v [ ' zindex ' ] ) ? jsmenu [ ' zIndex ' ] [ ' menu ' ] : v [ ' zindex ' ] ;
var i = this . _ getNodeUnderMouse ( e ) ; var gravity:==:this . vertical ? dojo . html . gravity . west : dojo . html . gravity . north ;
var missingpdfException = sharedUtil . missingpdfException ; var passwordResponses:==:sharedUtil . passwordResponses ;
var results = runner . results ( ) ; var specs:==:runner . specs ( ) ;
var width = this . data . settings . popup . width ; var height:==:this . data . settings . popup . height ;
var center = Matrix4 . multiplyByPoint ( model . modelMatrix , model . boundingSphere . center , new cartesian3 ( ) ) ; var r:==:4 . 0 * math . max ( model . boundingSphere . radius , camera . frustum . near ) ;
var outputTexture = computeCommand . outputTexture ; var width:==:outputTexture . width ;
var fs = require ( ' fs ' ) ; var regenerate:==:require ( ' regenerate ' ) ;
var assert = require ( ' assert - plus ' ) ; var errors:==:require ( ' restify - errors ' ) ;
var width = corridorGeometry . _ width ; var extrudedHeight:==:corridorGeometry . _ extrudedHeight ;
var i d = buffer . getOctetArray ( idLen ) ; var payload:==:buffer . getOctetArray ( payloadLen ) ;
var eye = SIMD . Float32x4 ( eyeRef . x , eyeRef . y , eyeRef . z , 0 . 0 ) ; var up:==:simd . float32x4 ( upRef . x , upRef . y , upRef . z , 0 . 0 ) ;
var metadata = request . metadata ; var msg_type:==:header . msg_type ;
var run = Ember . run ; var get:==:Ember . get ;
var version = opt_version  |  |  '' ; var displayName:==:opt_displayname  |  |  ( databaseName + ' name ' ) ;
var React = require ( ' React ' ) ; var pixelRatio:==:require ( ' pixelRatio ' ) ;
var siblingOffset = config . siblingOffset ; var subtreeOffset:==:config . subtreeOffset ;
var getSnapDuration = t . getSnapDuration ; var getSlotHeight:==:t . getSlotHeight ;
var rectangle = Rectangle . clone ( rectangleGeometry . _ rectangle , rectangleScratch ) ; var ellipsoid:==:rectangleGeometry . _ ellipsoid ;
var x = this . data [ fold . test_ix [ q ] ] ; var l:==:this . labels [ fold . test_ix [ q ] ] ;
var p = this . _ props ; var radiusX:==:p . radiusX !   null ? p . radiusX : p . radius ;
var errorObj = util . errorObj ; var tryCatch:==:util . tryCatch ;
var ui = imports . ui ; var async:==:require ( ' async ' ) ;
var tooltipStyles = _ props . tooltipStyles ; var touch:==:_ props . touch ;
var dictionaryLengths = lzwState . dictionaryLengths ; var dictionaryPrevCodes:==:lzwState . dictionaryPrevCodes ;
var createIdentifierToken = parseTreeFactory . createIdentifierToken ; var createNumberLiteral:==:parseTreeFactory . createNumberLiteral ;
var n = env . ctlz_i8  |  0 ; var o:==:env . _ _ ztiSt9exception  |  0 ;
var utilities = $ . fn . utilities ; var CONST:==:$ . fn . utilities . CONST ;
var fun1 = foreign . fun1 ; var fun2:==:foreign . fun2 ;
var colorMask = defaultValue ( rs . colorMask , ) ; var blending:==:defaultValue ( rs . blending , ) ;
var x = plotinfo . xaxis . _ i d ; var y:==:plotinfo . yaxis . _ i d ;
var row = mouseEvent . getDocumentPosition ( ) . row ; var annotation:==:gutter . $ annotations [ row ] ;
var lat = parseFloat ( readCookie ( ' ingress . intelmap . lat ' ) )  |  |  0 . 0 ; var lng:==:parseFloat ( readCookie ( ' ingress . intelmap . lng ' ) )  |  |  0 . 0 ;
var cssPropertyOperations = require ( ' cssPropertyOperations ' ) ; var domNamespaces:==:require ( ' domNamespaces ' ) ;
var utc = moment . utc ; var irc:==:require ( ' irc ' ) ;
var scheduler = instance . get ( ' scheduler ' ) ; var viewDate:==:dateMath . safeClearTime ( scheduler . get ( ' viewDate ' ) ) ;
var layer = this . map . layers [ i ] ; var c:==:this . layers . charAt ( i ) ;
var noise = p5 . prototype . noise ; var noiseSeed:==:p5 . prototype . noiseSeed ;
var yaml = require ( ' js - yaml ' ) . safeLoad ; var yargs:==:require ( ' yargs ' ) ;
var l = $ ( target ) . offset ( ) . left+10 ; var t:==:$ ( target ) . offset ( ) . top + $ ( target ) . offset ( ) . height -10 ;
var Scope = debug . Scope ; var url:==:require ( ' url ' ) ;
var touches = originalEvent . touches & & originalEvent . touches . length ? originalEvent . touches : [ originalEvent ] ; var e:==:( originalEvent . changedTouches & & originalEvent . changedTouches [ 0 ] )  |  |  touches [ 0 ] ;
var rename = require ( ' gulp - rename ' ) ; var sh:==:require ( ' shelljs ' ) ;
var i d = getAttr ( nodeDom , ' i d ' ) ; var label:==:getAttr ( nodeDom , ' label ' ) ;
var x2 = x + box . x2 ; var y2:==:y + box . y2 * yStretch ;
var dynamic = ref . dynamic ; var styleResult:==:ref . styleResult ;
var paddingRight = parseInt ( style . paddingRight , 10 )  |  |  0 ; var paddingTop:==:parseInt ( style . paddingTop , 10 )  |  |  0 ;
var changedObjects = this . _ changedObjects ; var changed:==:changedObjects . values ;
var subtype = this . property . value . subtype ; var description:==:this . property . value . description ;
var selection = selections [ clientId ] ; var user:==:workspace . users [ selection . uid ] ;
var bone = slot . bone ; var w:==:region . width ;
var transformToRoot = n . transformToRoot ; var commands:==:n . commands ;
var dx3 = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx3 ' , this . dx3 ) ) ) ) ; var notch:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' notch ' , this . notch ) ) ) ) ;
var center = viewState . center ; var projection:==:viewState . projection ;
var data = this . data ; var keys:==:this . keys ;
var fs = Npm . require ( ' fs ' ) ; var child_process:==:Npm . require ( ' child_process ' ) ;
var expose = opts . expose ; var file:==:opts . file ;
var defaultAlpha = parameters . defaultAlpha ! = = undefined ? parameters . defaultAlpha : 1 . 0 ; var defaultKeepAlive:==:parameters . defaultKeepAlive !    undefined ? parameters . defaultKeepAlive : false ;
var target = this . _ parentPane . _ target ; var rule:==:this . rule ( ) ;
var propertyNameAssignment = traceur . syntax . trees . propertyNameAssignment ; var propertyNameShorthand:==:traceur . syntax . trees . propertyNameShorthand ;
var hbs = require ( ' express - hbs ' ) ; var undefsafe:==:require ( ' undefsafe ' ) ;
var createVariableStatement = parseTreeFactory . createVariableStatement ; var const:==:tokenType . const ;
var unique = opts . unique ; var kind:==:opts . kind  |  |  ' var ' ;
var width = options [ ' width ' ]  |  |  0 ; var height:==:options [ ' height ' ]  |  |  0 ;
var pointerType = defaultValue ( options . pointerType , 0 ) ; var hwTimestamp:==:defaultValue ( options . hwTimestamp , 0 ) ;
var loneHighSurrogates = parts . loneHighSurrogates ; var loneLowSurrogates:==:parts . loneLowSurrogates ;
var path = require ( ' path ' ) ; var spawn:==:require ( ' child_process ' ) . spawn ;
var prev = selected . prev ( ' . select2-search - choice : not ( . select2-locked ) ' ) ; var next:==:selected . next ( ' . select2-search - choice : not ( . select2-locked ) ' ) ;
var config = configService . getSync ( ) . wallet . settings ; var unitToSatoshi:==:config . unitToSatoshi ;
var fragmentModel = config . fragmentModel ; var embeddedTracks:==:config . embeddedTracks ;
var document = window . document ; var setTimeout:==:window . setTimeout ;
var trimLeft   = string . prototype . trimLeft ; var trimRight:==:string . prototype . trimRight ;
var coord = this . coord . build ( builder , ' v3 ' ) ; var bias:==:this . bias ? this . bias . build ( builder , ' fv1 ' ) : undefined ;
var through = require ( ' through2 ' ) ; var xtend:==:require ( ' xtend ' ) ;
var oneOf = scope . oneOf ; var unsafeUnwrap:==:scope . unsafeUnwrap ;
var touchableWithoutFeedback = require ( ' touchableWithoutFeedback ' ) ; var view:==:require ( ' view ' ) ;
var addDays = fc . addDays ; var applyAll:==:fc . applyAll ;
var height = options . height  |  |  2 ; var diameterTop:==:( options . diameterTop      0 ) ? 0 : options . diameterTop  |  |  options . diameter  |  |  1 ;
var methods = params . methods ; var events:==:params . events ;
var xpath = item . xpath ; var amlNode:==:item . amlNode ;
var shape = _ react . propTypes . shape ; var string:==:_ react . propTypes . string ;
var tvdb = this . model . get ( ' tvdb_id ' ) ; var auto_id:==:this . model . get ( ' auto_id ' ) ;
var frame = exec_state . frame ( i ) ; var script:==:frame . script ( ) ;
var installer = imports . installer ; var c9:==:imports . c9 ;
var c = Y . Cookie . getSub ( ' data ' , ' c ' ) ; var e:==:y . cookie . getSub ( ' data ' , ' e ' ) ;
var diameterY = options . diameterY  |  |  options . diameter  |  |  1 ; var diameterZ:==:options . diameterZ  |  |  options . diameter  |  |  1 ;
var first = document . getElementById ( ' first ' ) ; var last:==:document . getElementById ( ' last ' ) ;
var inherits = require ( ' util ' ) . inherits ; var debug:==:require ( ' debug ' ) ( ' http - proxy - agent ' ) ;
var width = Base . window . width * 0 . 75  |  0 ; var total:==:runner . total ;
var longName = option . longName ; var shortName:==:option . shortName ;
var isArray = _ _ dependency1 _ _ . isArray ; var isFunction:==:_ _ dependency1 _ _ . isFunction ;
var d = new gd ( 2000 , 0 , 1 ) ; var f:==:gdr . offsetInDays _ ;
var minimumHeight = result . minimumHeight ; var maximumHeight:==:result . maximumHeight ;
var compare = opt_compareFn  |  |  goog . array . defaultCompare ; var l:==:math . min ( arr1 . length , arr2 . length ) ;
var parent = node . parentNode ; var next:==:node . nextSibling ;
var createParenExpression = parseTreeFactory . createParenExpression ; var runtime:==:traceur . syntax . predefinedName . runtime ;
var priv = privatePool . get ( this ) ; var coords:==:priv . target . coords ;
var b = builder . getFormatLength ( this . b . getType ( builder ) ) ; var c:==:builder . getFormatLength ( this . c . getType ( builder ) ) ;
var edgeInsetsPropType = require ( ' edgeInsetsPropType ' ) ; var nativeMethodsMixin:==:require ( ' nativeMethodsMixin ' ) ;
var syntheticEvent = require ( ' syntheticEvent ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var image = _ . get ( options , ' image ' ) ; var username:==:_ . get ( options , ' username ' ) ;
var yaml = require ( ' yamljs ' ) ; var fs:==:require ( ' fs ' ) ;
var payload = data [ ' payload ' ] ; var service:==:this . getService ( serviceName , payload ) ;
var PORT = env . PORT ; var HOSTNAME:==:env . HOSTNAME ;
var settings = imports . settings ; var Form:==:imports . Form ;
var delimiter = settings . delimiter ; var start:==:settings . start ;
var veeam = this . veeam ; var archimate3:==:this . archimate3 ;
var col = this . col ; var pos:==:this . pos ;
var width = size . width  |  |  size . height * aspect ; var height:==:size . height  |  |  size . width * aspect ;
var win = rules . win [ commandId ]  |  |  '' ; var osx:==:rules . osx [ commandId ]  |  |  '' ;
var firstBracket = brackets . firstBracket ; var lastBracket:==:brackets . lastBracket ;
var computeMetadataCallbackProps = _ ref . computeMetadataCallbackProps ; var nextCellsCount:==:_ ref . nextCellsCount ;
var r = this . hexify ( this . rgba [ 0 ] ) ; var g:==:this . hexify ( this . rgba [ 1 ] ) ;
var bob = doc . getElement ( ' bob ' ) ; var disappear:==:doc . getElement ( ' disappear ' ) ;
var sin = OIMO . sin ( rad * 0 . 5 ) ; var cos:==:OIMO . cos ( rad * 0 . 5 ) ;
var disabled = _ props . disabled ; var disableKeyboardFocus:==:_ props . disableKeyboardFocus ;
var a = b . toUpperCase ( ) = = ' desc ' ? -1 : 1 ; var d:==:this . fields . get ( c ) . sortType ;
var models = _ _ alloyId7 . models ; var len:==:models . length ;
var min = data . min ; var data:==:data . data ;
var lightGreena400 = exports . lightGreena400 = ' # 76ff03 ' ; var lightGreena700:==:exports . lightGreena700    ' # 64dd17 ' ;
var AFTER_CHALLENGE_ID = nconf . get ( ' AFTER_CHALLENGE_ID ' ) ; var BEFORE_CHALLENGE_ID:==:nconf . get ( ' BEFORE_CHALLENGE_ID ' ) ;
var activeElement = document . activeElement ; var contentDocument:==:activeElement . contentDocument ;
var message = err . message = this . opts . filename + ' : ' + err . message ; var loc:==:err . loc ;
var z = e . heading . z ; var magneticHeading:==:e . heading . magneticHeading ;
var onTitleTouchTap = _ props . onTitleTouchTap ; var showMenuIconButton:==:_ props . showMenuIconButton ;
var dataSource = kendo . data . dataSource ; var observableObject:==:kendo . data . observableObject ;
var path = require ( ' path ' ) ; var sleep:==:require ( ' sleep ' ) ;
var selector = rule . selector ; var content:==:rule . content ;
var extrudedHeight = params . extrudedHeight ; var attributes:==:attr . attributes ;
var fixedDataTableCellDefault = require ( ' fixedDataTableCellDefault . react ' ) ; var fixedDataTableColumn:==:require ( ' fixedDataTableColumn . react ' ) ;
var config = configService . getSync ( ) . wallet . settings ; var opts:==:opts  |  |  ;
var inspectable = ! data  |  |  ! data [ consts . meta ]  |  |  ! data [ consts . meta ] . uninspectable ; var open:==:inspectable & & this . state . open & & ( ! data  |  |  data [ consts . inspected ] !    false ) ;
var labelStyle = _ props . labelStyle ; var primary:==:_ props . primary ;
var Dispatcher = require ( ' Dispatcher ' ) ; var fluxContainer:==:require ( ' fluxContainer ' ) ;
var reactEmptyComponent = require ( ' reactEmptyComponent ' ) ; var reactHostComponent:==:require ( ' reactHostComponent ' ) ;
var textOp = firepad . textOp ; var h:==:helpers ;
var river = riverLayer . create ( 0 , 400 , ' river ' ) ; var ufo:==:spriteLayer . create ( 360 , 240 , ' ufo ' ) ;
var all = imports [ ' test . all ' ] ; var ui:==:imports . ui ;
var dateTimeFormat = goog . require ( ' goog . i18n . dateTimeFormat ' ) ; var dateTimeSymbols:==:goog . require ( ' goog . i18n . dateTimeSymbols ' ) ;
var line = lines [ error . line - 1 ] ; var start:==:starts [ error . line - 1 ] ;
var div = new Element ( ' div ' ) ; var clone:==:div . clone ( ) ;
var prompt = require ( ' prompt ' ) ; var chalk:==:require ( ' chalk ' ) ;
var localAddress = options . localAddress ; var localPort:==:options . localPort ;
var focusRippleOpacity = _ props3 . focusRippleOpacity ; var href:==:_ props3 . href ;
var cos = Math . cos ( radians ) ; var sin:==:Math . sin ( radians ) ;
var month = this . $ wheelsMonth . find ( ' . selected ' ) . attr ( ' data - month ' ) ; var year:==:this . $ wheelsYear . find ( ' . selected ' ) . attr ( ' data - year ' ) ;
var asciiIdentifierStartTable = unicodeData . asciiIdentifierStartTable ; var asciiIdentifierPartTable:==:unicodeData . asciiIdentifierPartTable ;
var colContentLeft = t . colContentLeft ; var colContentRight:==:t . colContentRight ;
var pet = data . params . pet ; var food:==:data . params . food ;
var top = bounds . top  |  |  0 ; var left:==:bounds . left  |  |  0 ;
var asyncTestCase = asyncTestCase  |  |  testCase ; var asyncConditionalTestCase:==:asyncConditionalTestCase  |  |  conditionalTestCase ;
var timelineData = this . _ timelineData ( ) ; var timeWindowRight:==:this . _ timeWindowRight ;
var graph = this . graph ; var points:==:args . points ;
var SUPER_EXPRESSION = ' SUPER_EXPRESSION ' ; var SWITCH_STATEMENT:==:' SWITCH_STATEMENT ' ;
var lastMovement = aggregator . _ lastMovement ; var isDown:==:aggregator . _ isDown ;
var path = require ( ' path ' ) ; var file:==:require ( ' file ' ) ;
var IMPORT_SPECIFIER_SET = ' IMPORT_SPECIFIER_SET ' ; var IMPORTED_BINDING:==:' IMPORTED_BINDING ' ;
var animations = model . gltf . animations ; var accessors:==:model . gltf . accessors ;
var input = this . $ element . querySelector ( ' input ' ) ; var button:==:this . $ element . querySelector ( ' button ' ) ;
var green = Color . floatToByte ( this . green ) ; var blue:==:color . floatToByte ( this . blue ) ;
var d = data [ i ] ; var parents:==:d . parents ? d . parents . split ( ' ' ) : [ ] ;
var type = feature . get ( ' type ' ) ; var scalerank:==:feature . get ( ' scalerank ' ) ;
var fulfilled = adapter . fulfilled ; var pending:==:adapter . pending ;
var layout = this . arg ( ' layout ' ) ; var value:==:this . arg ( ' value ' ) ;
var value = event . detail . value ; var filteredKeys:==:this . _ filteredKeys ;
var options = self . buildRequest ( rurl , data , exheaders , exoptions ) ; var headers:==:options . headers ;
var point = this . getElementsByTagNamens ( item , this . georssns , ' point ' ) ; var lat:==:this . getElementsByTagNamens ( item , this . geons , ' lat ' ) ;
var stringify = _ _ webpack_require _ _ ( 11 ) . stringify ; var isSafeMethod:==:_ _ webpack_require _ _ ( 17 ) . isSafeMethod ;
var autoHeight = _ props3 . autoHeight ; var columnCount:==:_ props3 . columnCount ;
var animationModel = symbolMeta . animationModel ; var dataIndex:==:symbolMeta . dataIndex ;
var leadTime = property . getValueOrUndefined ( pathGraphics . _ leadTime , time ) ; var trailTime:==:property . getValueOrUndefined ( pathGraphics . _ trailTime , time ) ;
var declare = require ( ' gulp - declare ' ) ; var wrap:==:require ( ' gulp - wrap ' ) ;
var currentTarget = tuple . currentTarget ; var listeners:==:listenersTable . get ( currentTarget ) ;
var api = imports . api ; var info:==:imports . info ;
var renderWidth = eyeParameters . renderWidth ; var renderHeight:==:eyeParameters . renderHeight ;
var isPlaying = instances [ i ] . isPlaying  |  |  instances [ i ] . isSuspended ; var currentTime:==:instances [ i ] . currentTime ;
var fs = imports . fs ; var vfs:==:imports . vfs ;
var items = definition . items ; var xml:==:definition . xml  |  |  ;
var isEndish = eventPluginUtils . isEndish ; var executeDirectDispatch:==:eventPluginUtils . executeDirectDispatch ;
var map1 = createMap ( ' map1 ' ) ; var map2:==:createMap ( ' map2 ' ) ;
var runner = e . process . runner [ 0 ] ; var builtin:==:runner . $ builtin ;
var NULL3 = C . NULL3 = 0x43 ; var NUMBER1:==:C . NUMBER1    0x51 ;
var arrive = this . arrive ( this . target ) ; var mouse:==:createVector ( mousex , mousey ) ;
var xml = goog . dom . createDom ( ' xml ' ) ; var block:==:goog . dom . createDom ( ' block ' ) ;
var removeRangeFromContentState = require ( ' removeRangeFromContentState ' ) ; var contentBlock:==:require ( ' contentBlock ' ) ;
var restore = this . options . restore ; var $ container:==:this . $ container ;
var HAS_BOOLEAN_VALUE = domProperty . injection . has_boolean_value ; var has_side_effects:==:domProperty . injection . has_side_effects ;
var mongoose = require ( ' mongoose ' ) ; var objectId:==:mongoose . schema . types . objectId ;
var error = require ( ' http - error ' ) ; var https:==:require ( ' https ' ) ;
var item = data . item ; var text:==:item . text ;
var sync = Backbone . sync ; var ajax:==:Backbone . ajax ;
var borderColor = _ muiTheme$textField . borderColor ; var disabledTextColor:==:_ muiTheme$textField . disabledTextColor ;
var defaults = require ( ' defaults ' ) ; var extend:==:require ( ' extend ' ) ;
var shadowRoot = scope . wrappers . shadowRoot ; var assert:==:scope . assert ;
var cacheFunctionsCrc32 = options [ ' cacheFunctionsCrc32 ' ] = = null ? false : options [ ' cacheFunctionsCrc32 ' ] ; var fieldsAsRaw:==:options [ ' fieldsAsRaw ' ]     null ? null : options [ ' fieldsAsRaw ' ] ;
var target = targets . eq ( i ) ; var name:==:get_name ( target ) ;
var REMOVE_TODO_OK = exports . REMOVE_TODO_OK = ' REMOVE_TODO_OK ' ; var REMOVE_TODO_ERROR:==:exports . REMOVE_TODO_ERROR    ' REMOVE_TODO_ERROR ' ;
var l = 0 + ( sleft ? pleft . size + ( pleft . resizable ? this . spacer : this . padding ) : 0 ) ; var t:==:0 + ( stop ? ptop . size + ( ptop . resizable ? this . spacer : this . padding ) : 0 ) ;
var _ im_open_decoder_fd = Module [ ' _ im_open_decoder_fd ' ] = asm [ ' _ im_open_decoder_fd ' ] ; var _ strncpy:==:Module [ ' _ strncpy ' ]    asm [ ' _ strncpy ' ] ;
var minHeight = options . minHeight ; var restoreOptions:==:that . restoreOptions ;
var createCharacterList = require ( ' createCharacterList ' ) ; var encodeEntityRanges:==:require ( ' encodeEntityRanges ' ) ;
var y = - _ vector3 . y * _ svgHeightHalf ; var node:==:object . node ;
var Tcp = require ( ' marionette - client ' ) . Drivers . Tcp ; var client:==:marionette . client ( driver : Tcp ) ;
var getKpiImageMetadata = powerbi . visuals . kpiUtil . getKpiImageMetadata ; var createClassAndSelector:==:jsCommon . cssConstants . createClassAndSelector ;
var createBooleanLiteral = traceur . codegeneration . parseTreeFactory . createBooleanLiteral ; var createCallExpression:==:traceur . codegeneration . parseTreeFactory . createCallExpression ;
var uglify = require ( ' gulp - uglify ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var cob = prop . lastLoop . cob ; var cob:==:prop . lastLoop . cob . cob ;
var extraMarkersPlugin = leafletHelpers . extraMarkersPlugin ; var domMarkersPlugin:==:leafletHelpers . domMarkersPlugin ;
var topo = this . topos [ wrapper ] ; var x:==:topo . data [ ' switchs ' ] [ i d ] . x ;
var modules = scope . modules  |  |  [ ] ; var sheets:==:scope . sheets  |  |  [ ] ;
var path = require ( ' path ' ) ; var sinon:==:require ( ' sinon ' ) ;
var body   = $ ( ' # grid_'+ this . name + ' _ body ' ) ; var columns:==:$ ( ' # grid_'+ this . name + ' _ columns ' ) ;
var shiftKey = typeof options . shiftKey ! = ' undefined ' ? options . shiftKey : false ; var metaKey:==:typeof options . metaKey !   ' undefined ' ? options . metaKey : false ;
var level3 = db . model ( ' level_3 ' , level3Schema ) ; var level2:==:db . model ( ' level_2 ' , level2Schema ) ;
var parent = path . parent ; var node:==:path . node ;
var nodes = this . nodes ; var edges:==:this . edges ;
var video = instance . _ video ; var usingVideo:==:instance . _ usingVideo ( ) ;
var x = proxyOfpFoo . bind ( 1 ) ; var y:==:new proxy ( x , handler ) ;
var mark = $ ( ' # chatinput mark ' ) ; var input:==:$ ( ' # chatinput input ' ) ;
var extname = path . extname ; var exists:==:fs . exists  |  |  path . exists ;
var TYPE_PARAMETERS = ' TYPE_PARAMETERS ' ; var TYPE_REFERENCE:==:' TYPE_REFERENCE ' ;
var item = _ copy  |  |  _ item ; var clientX:==:getCoord ( ' clientx ' , e ) ;
var legendProps = powerbi . visuals . legendProps ; var tooltipManager:==:powerbi . visuals . tooltipManager ;
var width = options . width , height = options . height ; var x:==:options . x  |  |  0 , y    options . y  |  |  0 ;
var parentFrame = parentFrameId ? this . _ frames [ parentFrameId ] : null ; var frame:==:new webInspector . resourceTreeFrame ( this , parentFrame , frameId ) ;
var callback = data . callback  |  |  ' jsonp ' + ( + + scriptLoader . _ count ) ; var win:==:window ;
var settings = JSON . parse ( fs . readFileSync ( settingsPath ) ) ; var commonSettings:==:json . parse ( fs . readFileSync ( commonSettingsPath ) ) ;
var translation = node . translation  |  |  [ 0 , 0 , 0 ] ; var rotation:==:node . rotation  |  |  [ 0 , 0 , 0 , 1 ] ;
var isClockWise = shapeUtils . isClockWise ; var subPaths:==:this . subPaths ;
var pixelConverter = jsCommon . pixelConverter ; var urlUtils:==:jsCommon . urlUtils ;
var type = this . type ; var curve:==:this . curve ;
var $ element = this . $ element ; var $ dropdown:==:this . $ dropdown ;
var search = this . searches [ i ] ; var operator:==:$ ( ' # grid_'+ this . name + ' _ operator_'+ i ) . val ( ) ;
var y = sphere . center . y - this . origin . y ; var z:==:sphere . center . z - this . origin . z ;
var resolve = Ember . RSVP . resolve ; var run:==:Ember . run ;
var assert = require ( ' power - assert ' ) ; var Schema:==:mongoose . Schema ;
var toComparators = semver . toComparators ; var semVer:==:semver . semVer ;
var util = require ( ' util ' ) ; var jmespath:==:require ( ' jmespath ' ) ;
var fnArray = operatorList . fnArray ; var i:==:executionStartIdx  |  |  0 ;
var title = self . include_title ? ' title= ' ' + ( actual  |  |  self . data [ idx ] [ 3 ] [ 0 ] ) + ' ' ' : '' ; var text:==:self . include_text ? wrapper + ( actual  |  |  self . data [ idx ] [ 3 ] [ 0 ] ) + wrapper : '' ;
var width = this . $ wrapper . width ( ) ; var height:==:this . $ wrapper . height ( ) ;
var match = matchSpec [ idx ] ; var version:==:match . version ;
var boolean = ' boolean ' ; var number:==:' number ' ;
var filter = require ( ' gulp - filter ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var Badges = notificationsExtensions . badges ; var glyphValue:==:badges . glyphValue ;
var editor = this . editor ; var uploadImg:==:editor . uploadImg ;
var arc = options . arc ? ( ( options . arc < = 0  |  |  options . arc > 1 ) ? 1 . 0 : options . arc ) : 1 . 0 ; var closed:==:( options . closed      undefined ) ? true : options . closed ;
var t = s . top ; var b:==:s . bottom ;
var a = this . form . reader . read ( b ) ; var c:==:a . records & & a . records [ 0 ] ? a . records [ 0 ] . data : null ;
var dynCall_ii = Module [ ' dynCall_ii ' ] = asm [ ' dynCall_ii ' ] ; var dynCall_viidd:==:Module [ ' dynCall_viidd ' ]    asm [ ' dynCall_viidd ' ] ;
var crypto = require ( ' crypto ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var iconClassNameRight = _ props . iconClassNameRight ; var onLeftIconButtonTouchTap:==:_ props . onLeftIconButtonTouchTap ;
var normal = plane . normal ; var halfAxes:==:box . halfAxes ;
var os_icon    = zombie_array [ index ] [ ' os_icon ' ] ; var os_name:==:zombie_array [ index ] [ ' os_name ' ] ;
var direct = handlers . direct ; var delegated:==:handlers . delegated ;
var southNormal = this . southNormal ; var eastNormal:==:this . eastNormal ;
var connect = imports . connect ; var build:==:imports [ ' cdn . build ' ] ;
var implicit = ( options & & options . implicit ) ? options . implicit : ' hide ' ; var args:==:this . args ;
var testLib    = fs . readFileSync ( testLibName , ' utf8 ' ) ; var jsdom:==:require ( ' jsdom - no - contextify ' ) . jsdom ;
var element = this . _ elementFromHandle ( itemPromise . handle ) ; var previous:==:this . _ elementFromHandle ( previousHandle ) ;
var scrollView = require ( ' scrollView ' ) ; var scrollResponder:==:require ( ' scrollResponder ' ) ;
var getSong = client . method ( ' getSong ' , filePath ) ; var getSongFile:==:client . method ( ' getSongFile ' , filePath ) ;
var prefix = results . prefix ; var matches:==:results & & results . matches ;
var http = require ( ' follow - redirects ' ) . http ; var https:==:require ( ' follow - redirects ' ) . https ;
var assert = require ( ' assert ' ) ; var lex:==:require ( ' pug - lexer ' ) ;
var error = sharedUtil . error ; var webglUtils:==:displayWebgl . webglUtils ;
var dx = Math . max ( 0 , Math . min ( bounds . width , parseFloat ( mxUtils . getValue ( this . state . style , ' dx ' , this . dx ) ) ) ) ; var arrowHead:==:math . max ( 0 , math . min ( bounds . height , parseFloat ( mxUtils . getValue ( this . state . style , ' arrowHead ' , this . arrowHead ) ) ) ) ;
var width = defaultValue ( screenSpaceRectangle . width , 1 . 0 ) ; var height:==:defaultValue ( screenSpaceRectangle . height , 1 . 0 ) ;
var endpoint = service . endpoint ; var region:==:service . config . region ;
var format = require ( ' util ' ) . format ; var assert:==:require ( ' assert - diff ' ) ;
var sourceModel = this . sourceModel ; var targetModel:==:this . targetModel ;
var change = changes [ changes . length - 1 ] ; var idAttr:==:this . options . idAttr ;
var tkey = $ ( this ) . attr ( ' tkey ' ) ; var tname:==:$ ( this ) . attr ( ' tname ' ) ;
var layout = this . layer . layout ; var maxScale:==:collisionTile . maxScale ;
var exififdLengthDataSection = ifDlengths . exififdLengthDataSection ; var gpsifdLength:==:ifDlengths . gpsifdLength ;
var React = require ( ' React ' ) ; var drawerLayoutAndroid:==:require ( ' drawerLayoutAndroid ' ) ;
var width = this . texture . frame . width ; var height:==:this . texture . frame . height ;
var content = fileMgr . currentFile . content ; var title:==:fileMgr . currentFile . title ;
var alpha = options . alpha  |  |  false ; var unsharpAmount:==:options . unsharpAmount      undefined ? 0 : ( options . unsharpAmount | 0 ) ;
var glob = require ( ' glob ' ) . sync ; var uglify:==:require ( ' gulp - uglify ' ) ;
var setDefaultTimeout = exports . setDefaultTimeout = proxySupportCode ( ' setDefaultTimeout ' ) ; var setDefinitionFunctionWrapper:==:exports . setDefinitionFunctionWrapper    proxySupportCode ( ' setDefinitionFunctionWrapper ' ) ;
var w = device . screen . width ; var h:==:device . screen . height ;
var add = new operatorNode ( ' + ' , ' add ' , [ a , b ] ) ; var bar:==:new accessorNode ( add , new indexNode ( [ new constantNode ( ' bar ' ) ] ) ) ;
var layers = this . _ layers ; var progressiveLayers:==:this . _ progressiveLayers ;
var container = document . getElementById ( ' container ' ) ; var controlPanel:==:document . getElementById ( ' controlPanel ' ) ;
var quality = options . quality  |  |  ' 100 ' ; var defer:==:$ q . defer ( ) ;
var config = require ( ' config ' ) . mongodb ; var mongoose:==:require ( ' mongoose ' ) ;
var success = Promise . promisify ( successNode ) ; var syncSuccess:==:promise . promisify ( syncSuccessNode ) ;
var h = parseInt ( sheetsAcrossInput . value ) ; var v:==:parseInt ( sheetsDownInput . value ) ;
var data = this . $ data ; var editor:==:data . editor ;
var col = geometry . attributes . color . array ; var v:==:lineGeo . vertices ;
var recursive = result . recursive ; var regExp:==:result . regExp ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , data , ) ;
var message = mockMessage ( messageId : 4371 ) ; var handler:==:handlerStub . withArgs ( ' cellbroadcast - received ' ) . args [ 0 ] [ 1 ] ;
var bpc = this . bpc ; var numComps:==:this . numComps ;
var sx = style . sx  |  |  0 ; var sy:==:style . sy  |  |  0 ;
var filename = options . filename ; var cache:==:options . cache ;
var moment = require ( ' moment ' ) ; var debug:==:require ( ' debug ' ) ( ' jsbin : upgrade ' ) ;
var v = Sk . builtin . lng . mulInt$ ( v1 , d ) ; var w:==:sk . builtin . lng . mulInt$ ( w1 , d ) ;
var width = img . width , height = img . height ; var fillColor:==:this . current . fillColor ;
var collection = db . collection ( ' simple_document_insert_with_function_safe ' ) ; var o:==:configuration . writeConcernMax ( ) ;
var hl = require ( ' highlight . js ' ) ; var marked:==:require ( ' marked ' ) ;
var textGap = visualMapModel . get ( ' textGap ' ) ; var itemSize:==:visualMapModel . itemSize ;
var createMemberExpression = traceur . codegeneration . parseTreeFactory . createMemberExpression ; var createOperatorToken:==:traceur . codegeneration . parseTreeFactory . createOperatorToken ;
var isString = string . isString ; var validateIndex:==:array . validateIndex ;
var element = this . element . createChild ( ' span ' , ' status - bar - counter - item ' ) ; var icon:==:element . createChild ( ' label ' , ' ' , ' dt - icon - label ' ) ;
var clickmap = this . options . clickmap ; var webvisor:==:this . options . webvisor ;
var c9 = imports . c9 ; var Form:==:imports . Form ;
var spawn = require ( ' child_process ' ) . spawn ; var phantomjs:==:require ( ' phantomjs - prebuilt ' ) ;
var find = createFind ( findIndex ) ; var findLast:==:createFind ( findLastIndex ) ;
var target = e . target  |  |  e . fromElement ; var relatedTarget:==:e . relatedTarget  |  |  e . toElement ;
var el = goog . dom . getElement ( ' test - visible - el ' ) ; var dom:==:goog . dom . getDomHelper ( el ) ;
var outerContainer = opts . outerContainer ; var commonLabelOpts:==:opts . commonLabelOpts  |  |  ;
var not = math . not ; var functionNode:==:math . expression . node . functionNode ;
var tree    = desc . dyn_tree ; var max_code:==:desc . max_code ;
var imdb_id = _ this . model . get ( ' imdb_id ' ) ; var episodes:==:_ this . model . get ( ' episodes ' ) ;
var shelljs = require ( ' shelljs ' ) ; var path:==:require ( ' path ' ) ;
var PK_ALGOS = utils . PK_ALGOS ; var httpSignatureError:==:utils . httpSignatureError ;
var width = readState . width  |  |  gl . drawingBufferWidth ; var height:==:readState . height  |  |  gl . drawingBufferHeight ;
var it = mocha . it ; var describe:==:mocha . describe ;
var createIdentifierExpression = parseTreeFactory . createIdentifierExpression ; var createIdentifierToken:==:parseTreeFactory . createIdentifierToken ;
var latitude = isLatitudeValid ? parseFloat ( latitudeString ) : -1 ; var longitude:==:isLongitudeValid ? parseFloat ( longitudeString ) : -1 ;
var merge = utils . merge ; var bus:==:utils . bus ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var assert:==:require ( ' chai ' ) . assert ;
var dynCall_iiiddiiiiiiiiiii = Module [ ' dynCall_iiiddiiiiiiiiiii ' ] = asm [ ' dynCall_iiiddiiiiiiiiiii ' ] ; var dynCall_viiiiii:==:Module [ ' dynCall_viiiiii ' ]    asm [ ' dynCall_viiiiii ' ] ;
var log = grunt . log ; var fail:==:grunt . fail ;
var doc = $ document [ 0 ] ; var hidden:==:doc & & doc . hidden ;
var registrationType = meta . config . registrationType  |  |  ' normal ' ; var allowLoginWith:==:( meta . config . allowLoginWith  |  |  ' username - email ' ) ;
var _ strcpy = Module [ ' _ strcpy ' ] = asm [ ' _ strcpy ' ] ; var _ testSetjmp:==:module [ ' _ testSetjmp ' ]    asm [ ' _ testSetjmp ' ] ;
var action = form . action ; var method:==:form . method ;
var connection = args . connection ; var streamedObject:==:args . streamedObject ;
var assert = require ( ' assert ' ) ; var mockery:==:require ( ' mockery ' ) ;
var ano = config . ano ; var success:==:config . success ;
var createIfMissing = this . createIfMissing ; var recreateIfInvalid:==:this . recreateIfInvalid ;
var lib = require ( ' library ' ) ; var framework:==:require ( ' framework ' ) ;
var mode = l . pm2_env . exec_mode ; var status:==:l . pm2_env . status ;
var mapWidth = k . undef ( self . mapWidth , 558 ) ; var mapHeight:==:k . undef ( self . mapHeight , 360 ) ;
var reactTypeOfSideEffect = require ( ' reactTypeOfSideEffect ' ) ; var reactTypeOfWork:==:require ( ' reactTypeOfWork ' ) ;
var when = user . services . password . reset . when ; var reason:==:user . services . password . reset . reason ;
var cssDocument = imports . cssDocument ; var htmlDocument:==:imports . htmlDocument ;
var dataTransfer = require ( ' dataTransfer ' ) ; var draftModifier:==:require ( ' draftModifier ' ) ;
var positions = this . positions ; var tint:==:sprite . tint ;
var slices = this . slices = options . slices ; var shapes:==:this . shapes    options . shapes ;
var reactReconciler = require ( ' reactReconciler ' ) ; var reactUpdates:==:require ( ' reactUpdates ' ) ;
var el = this . $ element ; var src:==:el . getAttribute ( ' data - src ' )  |  |  ' about : blank ' ;
var concat = require ( ' gulp - concat ' ) ; var eslint:==:require ( ' gulp - eslint ' ) ;
var tablixObjects = visuals . controls . internal . tablixObjects ; var urlUtils:==:jsCommon . urlUtils ;
var process = Promise . method ( processor . process ) . bind ( hexo ) ; var source:==:hexo . source ;
var getContextForSubtree = require ( ' getContextForSubtree ' ) ; var instantiateReactComponent:==:require ( ' instantiateReactComponent ' ) ;
var connection = client . connection ; var queries:==:connection . queries ;
var shorthand = node . shorthand ; var computed:==:node . computed ;
var entity = context . entity ( context . selectediDs ( ) [ 0 ] ) ; var preset:==:context . presets ( ) . match ( entity , context . graph ( ) ) ;
var createClassAndSelector = jsCommon . cssConstants . createClassAndSelector ; var svgScrollbar:==:powerbi . visuals . controls . svgScrollbar ;
var tls    = require ( ' tls ' ) ; var Packets:==:common . Packets ;
var _ strcpy = Module [ ' _ strcpy ' ] = asm [ ' _ strcpy ' ] ; var _ calloc:==:Module [ ' _ calloc ' ]    asm [ ' _ calloc ' ] ;
var features = this . features ; var len:==:features . length ;
var cellRenderer = _ column$props . cellRenderer ; var className:==:_ column$props . className ;
var proc = imports . proc ; var c9:==:imports . c9 ;
var x = rrectData . x ; var y:==:rrectData . y ;
var util = require ( ' util ' ) ; var shims:==:require ( ' _ shims ' ) ;
var granularity = defaultValue ( options . granularity , cesiumMath . radians_per_degree ) ; var stRotation:==:defaultValue ( options . stRotation , 0 . 0 ) ;
var module = this . props . module ; var name:==:this . props . name ;
var arrayViews = buffer . arrayViews ; var length:==:arrayViews . length ;
var type = getOptionType ( o . type ) ; var helpArg:==:o . helpArg  |  |  ( type & & type . helpArg )  |  |  ' arg ' ;
var parseTreeVisitor = traceur . syntax . parseTreeVisitor ; var predefinedName:==:traceur . syntax . predefinedName ;
var i d = data . i d ; var date:==:data . date ;
var PORT = process . env . PORT  |  |  2403 ; var ENV:==:process . env . NODE_ENV  |  |  ' development ' ;
var changeRoutes = _ computeChangedRoutes . changeRoutes ; var enterRoutes:==:_ computeChangedRoutes . enterRoutes ;
var column = pos . column  |  |  1 ; var line:==:pos . line  |  |  1 ;
var option = self . item ( $ option ) ; var matches:==:self . matches ( params , option ) ;
var fs = require ( ' fs ' ) ; var mime:==:require ( ' mime - types ' ) ;
var tilingScheme = this . _ tileProvider . tilingScheme ; var ellipsoid:==:tilingScheme . ellipsoid ;
var STRING1 = C . STRING1 = 0x61 ; var STRING2:==:C . STRING2    0x62 ;
var proc = imports . proc ; var fs:==:require ( ' fs ' ) ;
var dim   = _ dim  |  |  false ; var timeout:==:_ timeout  |  |  50000 ;
var REVISION_CHANGES = _ _ dependency1 _ _ . REVISION_CHANGES ; var log:==:_ _ dependency1 _ _ . log ;
var skipNulls = typeof options . skipNulls = = = ' boolean ' ? options . skipNulls : defaults . skipNulls ; var encode:==:typeof options . encode      ' boolean ' ? options . encode : defaults . encode ;
var width = options . width  |  |  10 . 0 ; var height:==:options . height  |  |  10 . 0 ;
var cornerType = params . cornerType ; var saveAttributes:==:params . saveAttributes ;
var categoryTypes = visuals . mapUtil . categoryTypes ; var settings:==:visuals . mapUtil . settings ;
var M = new errorCorrectionLevel ( 1 , 0x00 , ' m ' ) ; var q:==:new errorCorrectionLevel ( 2 , 0x03 , ' q ' ) ;
var g = ( command . debugOverlappingFrustums & ( 1 < < 1 ) ) ? ' 1 . 0 ' : ' 0 . 0 ' ; var b:==:( command . debugOverlappingFrustums & ( 1 < < 2 ) ) ? ' 1 . 0 ' : ' 0 . 0 ' ;
var isArray = array . isArray ( source ) ; var target:==:_ target  |  |  ( isArray ? new array ( source . length ) : ) ;
var zindex = isUndefined ( v [ ' zindex ' ] ) ? jsmenu [ ' zIndex ' ] [ ' menu ' ] : v [ ' zindex ' ] ; var ctrlclass:==:isUndefined ( v [ ' ctrlclass ' ] ) ? '' : v [ ' ctrlclass ' ] ;
var _ = window . _ ; var Nightscout:==:window . Nightscout ;
var interpolationAlgorithm = this . _ interpolationAlgorithm ; var packedInterpolationLength:==:this . _ packedInterpolationLength ;
var domain = require ( ' domain ' ) ; var bunyan:==:require ( ' bunyan ' ) ;
var keys = Object . keys ( five . LCD . Characters . DEFAULT ) ; var length:==:keys . length ;
var doc = modal . document ; var dialog:==:doc . getElementsByTagName ( ' dialog ' ) [ 0 ] ;
var a = Ti . UI . createView ( borderColor : ' # 133899',borderWidth : 6,borderRadius : 2,backgroundColor : ' orange',width : 100,height : 100,top : 10,name : ' view a ' ) ; var b:==:ti . ui . createView ( borderColor : ' # 133899',borderWidth : 6,borderRadius : 2,backgroundColor : ' purple',width : 100,height : 100,top : 115,right : 40,name : ' view b ' ) ;
var dirPath = file . dirPath ; var type:==:file . type ;
var operationId = details . auxData [ ' operationId ' ] ; var operation:==:this . sidebarPanes . asyncOperationBreakpoints . operationById ( details . target ( ) , operationId ) ;
var groupSizes = numberFormatInfo . groupSizes  |  |  [ 3 ] ; var groupSize:==:groupSizes [ 0 ] ;
var tokenType = traceur . syntax . tokenType ; var variableDeclarationList:==:traceur . syntax . trees . variableDeclarationList ;
var fieldType = goog . labs . testing . jsonFuzzing . fieldType _ ; var random:==:this . random _ . random ( ) ;
var width = params . width  |  |  window . innerWidth  |  |  1 ; var height:==:params . height  |  |  window . innerHeight  |  |  1 ;
var autoprefixer = require ( ' gulp - autoprefixer ' ) ; var browserify:==:require ( ' browserify ' ) ;
var commonmark = options . commonmark ; var pedantic:==:options . pedantic ;
var path = require ( ' path ' ) ; var globby:==:require ( ' globby ' ) ;
var warningClient = raygun . warningClient ; var connect:==:imports . connect ;
var Datagrid = imports . Datagrid ; var tern:==:imports [ ' language . tern ' ] ;
var decorationStyle = getStyleProperty ( item , styleContextStack , ' decorationStyle ' , null ) ; var background:==:getStyleProperty ( item , styleContextStack , ' background ' , null ) ;
var proxyB = input . proxyB ; var transformA:==:input . transformA ;
var replaceEntities = _ _ webpack_require _ _ ( 1023 ) . replaceEntities ; var escapeHtml:==:_ _ webpack_require _ _ ( 1023 ) . escapeHtml ;
var binding = this . transformAny ( tree . binding ) ; var initializer:==:this . transformAny ( tree . initializer ) ;
var wrappedOperation = firepad . wrappedOperation ; var cursor:==:firepad . cursor ;
var info = imports . info ; var analytics:==:imports [ ' c9 . analytics ' ] ;
var mailParser = require ( ' mailparser ' ) . mailParser ; var f:==:imap . fetch ( results , bodies : '' ) ;
var b = new blockNode ( [ node : new symbolNode ( ' x ' ) , node : new constantNode ( 2 ) ] ) ; var c:==:new blockNode ( [ node : new symbolNode ( ' x ' ) , node : new constantNode ( 4 ) ] ) ;
var len = points . length ; var smoothMonotone:==:shape . smoothMonotone ;
var match = matches [ i ] ; var begin:==:match . begin ;
var Controller = _ componentsFxosMvcDistMvc . controller ; var listModel:==:_ jsModelListModel [ ' default ' ] ;
var URL = window . webkitURL  |  |  window . URL ; var rtcSessionDescription:==:window . mozrtcSessionDescription  |  |  window . webkitrtcSessionDescription  |  |  window . rtcSessionDescription ;
var root = config . root ; var data:==:config . data ;
var start = content . cursor_start ; var end:==:content . cursor_end ;
var shell = require ( ' shelljs ' ) ; var semver:==:require ( ' semver ' ) ;
var allow_close = frag . getAttribute ( ' data - allow_close ' ) ; var allow_resize:==:frag . getAttribute ( ' data - allow_resize ' ) ;
var anchor = iframeDoc . getElementById ( ' anchor1 ' ) ; var popup:==:document . getElementById ( ' popup6 ' ) ;
var service = serviceList [ i ] ; var serviceType:==:service . querySelector ( ' serviceType ' ) . innerhtml ;
var objectId = schemaTypes . objectId ; var mixed:==:schemaTypes . mixed ;
var propTypes = react . propTypes ; var table:==:fixedDataTable . table ;
var content = template . content ; var c:==:content . firstChild ;
var i18n = this . theme . i18n ; var config:==:this . config ;
var sourceIndex = node . sourceIndex ; var subIndex:==:node . subIndex ;
var nodes = this . body . nodes ; var nodeIndices:==:this . body . nodeIndices ;
var m = matrix ; var a:==:m . a ;
var tilingScheme = provider . _ tilingScheme ; var rectangles:==:provider . _ rectangles ;
var x = box . x + margin ; var y:==:box . y + margin ;
var flyOverLongitudeWeight = options . flyOverLongitudeWeight ; var pitchAdjustHeight:==:options . pitchAdjustHeight ;
var scriptId = messageObject . params . scriptId ; var url:==:messageObject . params . url ;
var ace = originalTab . editor . ace ; var pos:==:jumptodef . addUnknownColumn ( ace , node . pos , node . name ) ;
var unwrap = scope . unwrap ; var wrap:==:scope . wrap ;
var action = message . action ; var body:==:message . body ;
var variableBinder = traceur . semantics . variableBinder ; var variablesInFunction:==:variableBinder . variablesInFunction ;
var https = require ( ' https ' ) ; var querystring:==:require ( ' querystring ' ) ;
var win = window ; var doc:==:win . document ;
var input = self . input ; var analysis:==:self . analysis ;
var radius = this . handle . radius ; var center:==:this . center ;
var readyState = goog . net . xmlHttp . readyState ; var content_type_header:==:goog . net . xhrIo . content_type_header ;
var activeItemdom = options . activeItemdom ; var network:==:options . network ;
var booleanBarrier = state . booleanBarrier ; var scale:==:state . scale  |  |  [ 0 , resolution ] ;
var async = require ( ' async ' ) ; var logrotate:==:require ( ' logrotate - stream ' ) ;
var environmentState = scene . _ environmentState ; var useGlobeDepthFramebuffer:==:environmentState . useGlobeDepthFramebuffer ;
var toolbarHandlers = editormd . toolbarHandlers ; var disabledKeyMaps:==:settings . disabledKeyMaps ;
var type = conf . type ; var size:==:+ conf . size ;
var nameLocation = axisModel . get ( ' nameLocation ' ) ; var nameDirection:==:opt . nameDirection ;
var model = this . _ model ; var ctx:==:this . _ chart . ctx ;
var has = require ( ' has ' ) ; var sanitize:==:require ( ' htmlescape ' ) . sanitize ;
var rootNode = this . _ dataGrid . rootNode ( ) ; var children:==:rootNode . children ;
var postData   = method . postData ; var httpHeaders:==:method . httpHeaders ;
var firstRow = config . firstRow , lastRow = config . lastRow + 1 ; var children:==:this . element . children ;
var isArray = sharedUtil . isArray ; var isNum:==:sharedUtil . isNum ;
var start = message . data . start ; var end:==:message . data . end ;
var assert = require ( ' chai ' ) . assert ; var spawn:==:require ( ' child_process ' ) . spawn ;
var wantedTiles = frameState . wantedTiles [ tileSourceKey ] ; var tileQueue:==:frameState . tileQueue ;
var http   = require ( ' http ' ) ; var url:==:require ( ' url ' ) ;
var canvas = ctx . canvas ; var width:==:canvas . width ;
var finddomNode = require ( ' finddomNode ' ) ; var getHostComponentFromComposite:==:require ( ' getHostComponentFromComposite ' ) ;
var y = today . getFullYear ( ) ; var d:==:today . getDate ( ) ;
var uuid = require ( ' hap - nodejs ' ) . uuid ; var Accessory:==:require ( ' hap - nodejs ' ) . Accessory ;
var domAttributeNames = domPropertyConfig . domAttributeNames  |  |  ; var domPropertyNames:==:domPropertyConfig . domPropertyNames  |  |  ;
var attr = DS . attr ; var run:==:Ember . run ;
var a = rejectSoon ( ' rejected - a ' , 40 ) ; var b:==:rejectSoon ( ' rejected - b ' , 30 ) ;
var accessToken = response . accessToken ; var expiresIn:==:response . expiresIn ;
var from = Math . max ( visible . from - cm . options . viewportMargin , doc . first ) ; var to:==:math . min ( end , visible . to + cm . options . viewportMargin ) ;
var bool = _ react$PropTypes . bool ; var object:==:_ react$PropTypes . object ;
var type = request . type ; var data:==:request . data ;
var mime = require ( ' mime ' ) ; var compressible:==:require ( ' compressible ' ) ;
var interface = interfaces [ i ] ; var opt:==:document . createElement ( ' option ' ) ;
var debug = require ( ' debug ' ) ( ' superagent ' ) ; var formidable:==:require ( ' formidable ' ) ;
var cert = fs . readFileSync ( join ( _ _ dirname , ' . . ' , ' certs ' , ' agent2-cert . pem ' ) ) ; var key:==:fs . readFileSync ( join ( _ _ dirname , ' . . ' , ' certs ' , ' agent2-key . pem ' ) ) ;
var doc = e . doc ; var path:==:doc . tab . path ;
var continueStatement = traceur . syntax . trees . continueStatement ; var doWhileStatement:==:traceur . syntax . trees . doWhileStatement ;
var isAvailable = entity . isAvailable ( time ) ; var show:==:new showGeometryInstanceAttribute ( isAvailable & & entity . isShowing & & this . _ showProperty . getValue ( time ) ) ;
var cacheFunctionsCrc32 = options [ ' cacheFunctionsCrc32 ' ] = = null ? false : options [ ' cacheFunctionsCrc32 ' ] ; var promoteLongs:==:options [ ' promoteLongs ' ]     null ? true : options [ ' promoteLongs ' ] ;
var rowData = _ ref . rowData ; var style:==:_ ref . style ;
var deepPurplea400 = exports . deepPurplea400 = ' # 651fff ' ; var deepPurplea700:==:exports . deepPurplea700    ' # 6200ea ' ;
var weekday = getOption ( options , ' weekday ' , ' string ' , [ ' narrow ' , ' short ' , ' long ' ] , undefined ) ; var era:==:getOption ( options , ' era ' , ' string ' , [ ' narrow ' , ' short ' , ' long ' ] , undefined ) ;
var destination = this . destination ; var duration:==:tryCatch_1 . tryCatch ( this . durationSelector ) ( value ) ;
var iks = mesh . geometry . iks ; var bones:==:mesh . skeleton . bones ;
var p = this . _ props ; var radiusX:==:( p . radiusX !   null ) ? p . radiusX : p . radius ;
var minimist = require ( ' minimist ' ) ; var rc:==:require ( ' rc ' ) ;
var location = response . location ; var script:==:location & & this . scriptForId ( location . scriptId ) ;
var pass = passes [ i ] ; var viewport:==:pass . passState . viewport ;
var y = rrectData . y ; var width:==:rrectData . width ;
var wrapper = this . wrapper ; var options:==:this . options ;
var attribute = ' the attribute ' ; var value:==:' the value ' ;
var ui_locales = _ ref . ui_locales ; var acr_values:==:_ ref . acr_values ;
var clone = require ( ' clone ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var user = this . options . username ; var pass:==:this . options . password ;
var cp = s . cp ; var pinv:==:s . pinv ;
var parameterList = this . transformAny ( alphaRenamed . parameterList ) ; var body:==:this . transformAny ( alphaRenamed . body ) ;
var uglify = require ( ' uglify - js ' ) ; var buble:==:require ( ' rollup - plugin - buble ' ) ;
var appName = options . appName  |  |  testUtils . randomAppName ( ) ; var templateApp:==:options . templateApp  |  |  ' simple - app ' ;
var sizes = shape . sizes ; var symbolProxy:==:this . symbolProxy ;
var ne = node . _ ne & & rectangleContainsPosition ( node . _ ne . extent , position ) ; var sw:==:node . _ sw & & rectangleContainsPosition ( node . _ sw . extent , position ) ;
var ellipse = type : ' ellipse ' , x : 10 , y : 10 ; var line:==:type : ' line ' , x1 : 10 , x2 : 50 , y1 : 10 , y2 : 20 ;
var pos = this . pos ; var startPos:==:this . startPos ;
var target = opts . target ; var len:==:targetArray . length ;
var searchMatches = searchResult . searchMatches ; var queries:==:this . _ searchConfig . queries ( ) ;
var quatWithoutYaw = orbitCamera . quatWithoutYaw ; var yawOffset:==:orbitCamera . yawOffset ;
var radialSegments = options . radialSegments  |  |  32 ; var tubularSegments:==:options . tubularSegments  |  |  32 ;
var settings = new _ settings . Settings ( ) ; var storage:==:new _ storage . Storage ( ) ;
var network = mobileConnection . voice . network ; var iccInfo:==:iccCard . iccInfo ;
var s = this . state _ ; var t:==:this . temp _ [ 0 ] ;
var reactdomComponentTree = require ( ' reactdomComponentTree ' ) ; var reactdomEventListener:==:require ( ' reactdomEventListener ' ) ;
var magnificationFilter = defaultValue ( options . magnificationFilter , textureMagnificationFilter . linear ) ; var maximumAnisotropy:==:( defined ( options . maximumAnisotropy ) ) ? options . maximumAnisotropy : 1 . 0 ;
var time_start = this . options . time_start . split ( ' : ' ) ; var time_split:==:parseInt ( this . options . time_split ) ;
var editors = imports . editors ; var tabManager:==:imports . tabManager ;
var d16 = _ addDiv ( ' d16 ' ) , d17 = _ addDiv ( ' d17 ' ) ; var conn:==:_ jsPlumb . connect ( source : d16 , target : d17 , connector : ' straight ' ) ;
var v2 = triangleNode . getAttribute ( ' v2 ' ) ; var v3:==:triangleNode . getAttribute ( ' v3 ' ) ;
var designUnit = parseFloat ( params . designUnit ) ; var columnCount:==:parseFloat ( params . columnCount ) ;
var DICTID = 10 ; var DICT:==:11 ;
var dim = _ dim  |  |  false ; var label:==:_ label  |  |  ' Success ' ;
var css = safeForhtml ( bin . css  |  |  '' ) ; var javascript:==:safeForhtml ( bin . javascript  |  |  '' ) ;
var canvas = widget . _ canvas ; var width:==:canvas . width ;
var gl = this . gl ; var canvas:==:this . gl . canvas ;
var lead = this . editor . selection . lead ; var anchor:==:this . editor . selection . anchor ;
var dom = goog . require ( ' goog . dom ' ) ; var jsunit:==:goog . require ( ' goog . testing . jsunit ' ) ;
var net = require ( ' net ' ) ; var Agent:==:require ( ' smith ' ) . Agent ;
var getAccessor = traceur . syntax . trees . getAccessor ; var setAccessor:==:traceur . syntax . trees . setAccessor ;
var root = _ ref . root ; var onChange:==:_ ref . onChange ;
var lastOffset = this . _ cachedDistributedKeyframes [ lastOffsetIndex ] . offset ; var nextOffset:==:this . _ cachedDistributedKeyframes [ nextOffsetIndex ] . offset ;
var Range = math . type . Range ; var immutableDenseMatrix:==:math . type . immutableDenseMatrix ;
var unicodeUtils = require ( ' unicodeUtils ' ) ; var getRangeClientRects:==:require ( ' getRangeClientRects ' ) ;
var capt = this . element . children ( ' . window - caption ' ) ; var icon:==:capt . find ( ' . window - caption - icon ' ) ;
var b = this . document . body ; var clientWidth:==:b . clientWidth ;
var startTimeElt = startTimeElts [ i ] ; var date:==:parseInt ( startTimeElt . dataset . date , 10 ) ;
var circle = props . circle ; var transitionEnabled:==:props . transitionEnabled ;
var rowSizeAndPositionManager = _ ref . rowSizeAndPositionManager ; var rowStartIndex:==:_ ref . rowStartIndex ;
var coastline = d3 . select ( ' . coastline ' ) ; var lakes:==:d3 . select ( ' . lakes ' ) ;
var assert = util . assert ; var windowing:==:util . Module ( ' windowing ' ) ;
var edgexUnit = parseFloat ( params . edgexUnit ) ; var className:==:params . className  |  |  ' grid ' ;
var State = traceur . codegeneration . generator . State ; var fallThroughState:==:traceur . codegeneration . generator . fallThroughState ;
var CONTINUE_STATEMENT = ' CONTINUE_STATEMENT ' ; var COVER_FORMALS:==:' COVER_FORMALS ' ;
var createForOfStatement = traceur . codegeneration . parseTreeFactory . createForOfStatement ; var createVariableDeclarationList:==:traceur . codegeneration . parseTreeFactory . createVariableDeclarationList ;
var A = m . model ( ' A ' , n : [ age : ' number ' ] ) ; var a:==:new A ( n : [ age : ' 47 ' ] ) ;
var info = fis . util . pathinfo ( file ) ; var basename:==:fis . project . getCachePath ( dir , info . basename ) ;
var enterCancelled = data . enterCancelled ; var beforeAppear:==:data . beforeAppear ;
var iconHelper = _ jsLibHelpers . iconHelper ; var listModel:==:_ jsModelListModel [ ' default ' ] ;
var fluxContainer = require ( ' fluxContainer ' ) ; var fluxReduceStore:==:require ( ' fluxReduceStore ' ) ;
var sequence = require ( ' run - sequence ' ) ; var inquirer:==:require ( ' inquirer ' ) ;
var location = ref . location ; var route:==:ref . route ;
var list = that . list ; var parent:==:list . parent ( ' . k - animation - container ' ) ;
var semantic = child . getAttribute ( ' semantic ' ) ; var offset:==:parseInt ( child . getAttribute ( ' offset ' ) ) ;
var data = this . data ; var hasHighlights:==:data & & data . hasHighlights ;
var unibuild = unibuildInfo . unibuild ; var unibuildJson:==:unibuildInfo . unibuildJson ;
var crypto = require ( ' crypto ' ) ; var os:==:require ( ' os ' ) ;
var view = viewControllers [ i ] ; var nav:==:view . _ nav ;
var d = a . thread_ctx _ ; var e:==:a . cache_y_stride _ ;
var width = this . width = computeDimension ( context . canvas , ' width ' ) ; var height:==:this . height    computeDimension ( context . canvas , ' height ' ) ;
var createMemberExpression = parseTreeFactory . createMemberExpression ; var createNewExpression:==:parseTreeFactory . createNewExpression ;
var ogvUrl = instance . get ( ' ogvUrl ' ) ; var video:==:instance . _ video ;
var edges = this . body . edges ; var edgeIndices:==:this . body . edgeIndices ;
var project = this . project ; var url:==:this . url ;
var startOffset = editor . selection . getRange ( ) . startOffset ; var collapse:==:editor . selection . getRange ( ) . collapsed ;
var cellToCellOffset = t . cellToCellOffset ; var cellOffsetToDayOffset:==:t . cellOffsetToDayOffset ;
var max_size_x = this . resize_max_size_x ; var min_size_x:==:this . resize_min_size_x ;
var a = X . instance ( ) ; var c:==:Y . instance ( ) ;
var reactNativeFeatureFlags = require ( ' reactNativeFeatureFlags ' ) ; var reactNativeFiberRenderer:==:require ( ' reactNativeFiberRenderer ' ) ;
var minOpacity = this . minOpacity ; var maxOpacity:==:this . maxOpacity ;
var bits = this . bits ; var colors:==:this . colors ;
var toString = object . prototype . toString ; var util:==:require ( ' util ' ) ;
var pattern = patterns [ i ] ; var regex:==:pattern . regex ;
var vertexFormat = options . vertexFormat ; var surfaceHeight:==:options . surfaceHeight ;
var ctx = this . _ ctx ; var x0:==:this . _ x0 ;
var onMouseEnter = _ props . onMouseEnter ; var style:==:_ props . style ;
var info = sharedUtil . info ; var isArrayBuffer:==:sharedUtil . isArrayBuffer ;
var position = distances [ 0 ] . position ; var distance:==:distances [ 0 ] . distance ;
var width = canvas . width * scale ; var height:==:canvas . height * scale ;
var option = _ ref7 . option ; var optionHeight:==:this . props . optionHeight ;
var loadResources = model . _ loadResources ; var programsToCreate:==:loadResources . programsToCreate ;
var element = document . getElementById ( elementId ) ; var documentElement:==:document . body  |  |  document . documentElement ;
var type = event . type ; var target:==:event . target  |  |  event . srcElement ;
var points = result . points ; var rotation:==:result . rotation ;
var inherits = require ( ' inherits ' ) ; var cyclist:==:require ( ' cyclist ' ) ;
var bbox = this . bbox ; var xstep:==:this . xstep ;
var hint = options . hint ; var maxTimems:==:options . maxTimems ;
var destroyTables = window . destroyTables ; var getCell:==:window . getCell ;
var util = require ( ' util ' ) ; var through:==:require ( ' through ' ) ;
var layoutVertexArray = group . layoutVertexArray ; var zoom:==:this . zoom ;
var d = new symbolNode ( 'd ' ) ; var mult:==:new operatorNode ( ' * ' , ' multiply ' , [ a , b , c ] ) ;
var sheet = style . sheet  |  |  style . styleSheet ; var cssText:==:sheet ? ( sheet . cssRules & & sheet . cssRules [ 0 ] ? sheet . cssRules [ 0 ] . cssText : sheet . cssText  |  |  '' ) : '' ;
var CACHE_FRIENDS_KEY = Utils . CACHE_FRIENDS_KEY = ' numFacebookFriends ' ; var last_updated_key:==:utils . last_updated_key    ' lastUpdatedTime ' ;
var cfile = cfiles [ i ]  |  |  ( cfiles [ i ] = ) ; var file:==:files [ i ] ;
var document = this . document ; var $:==:this . $ ;
var scaleX = options . scaleX ; var scaleY:==:options . scaleY ;
var width = Math . floor ( widthFactor * contentWidth ) ; var height:==:math . floor ( heightFactor * contentHeight ) ;
var sortedRows = g . sortedRows ( ) ; var w:==:this . width ;
var min = options . minimum ; var max:==:options . maximum ;
var downloadPreference = this . _ model . downloadPreference ; var dataConnectionDialog:==:this . childViews . dataConnectionDialog ;
var objectLiteralExpression = traceur . syntax . trees . objectLiteralExpression ; var objectPattern:==:traceur . syntax . trees . objectPattern ;
var before = this . getPseudoElement ( container , ' : before ' ) ; var after:==:this . getPseudoElement ( container , ' : after ' ) ;
var Util = sharedUtil . util ; var info:==:sharedUtil . info ;
var operationalError = errors . operationalError ; var haveGetters:==:util . haveGetters ;
var el = setupSelect ( ' ng - required='isRequired ' ng - model='someModel ' ' ) ; var label:==:el . find ( ' label ' ) ;
var rt = createElement ( ' rt ' ) ; var rp:==:createElement ( ' rp ' ) ;
var mouseup = Rx . Observable . fromEvent ( dragTarget , ' mouseup ' ) ; var mousemove:==:rx . observable . fromEvent ( document , ' mousemove ' ) ;
var b = positionBlock . anchor . bottom ; var r:==:positionBlock . anchor . right ;
var contact = evt . detail . contact ; var isFavorite:==:evt . detail . isFavorite ;
var backgroundColor = ecModel . get ( ' backgroundColor ' )  |  |  ' transparent ' ; var painter:==:zr . painter ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , data2 , opts ) ;
var textDecoder = global . textDecoder  |  |  require ( ' text - encoding ' ) . textDecoder ; var fakexmlHttpRequest:==:sinonFakeXhr . fakexmlHttpRequest ;
var rename = require ( ' gulp - rename ' ) ; var tap:==:require ( ' gulp - tap ' ) ;
var x = goog . math . Integer . fromString ( xs , 16 ) ; var y:==:goog . math . integer . fromString ( ys , 16 ) ;
var options = this . options ; var imports:==:options . imports ;
var title = validator . trim ( req . body . title  |  |  '' ) ; var tab:==:validator . trim ( req . body . tab  |  |  '' ) ;
var level = paragraph . level + ( li ? 1 : 0 ) ; var lic:==:paragraph . in_license_block ;
var forkContext = this . forkContext ; var thrown:==:context . thrownForkContext ;
var $ element = this . $ element ; var mode:==:this . mode ;
var confirm = require ( ' gulp - prompt ' ) . confirm ; var rsync:==:require ( ' gulp - rsync ' ) ;
var p = createjs . extend ( Text , createjs . displayObject ) ; var canvas:==:( createjs . createCanvas?createjs . createCanvas ( ) : document . createElement ( ' canvas ' ) ) ;
var password1 = ' password1- ' + Random . i d ( ) ; var password2:==:' password2- ' + Random . i d ( ) ;
var initiallyExpanded = _ props . initiallyExpanded ; var onExpandChange:==:_ props . onExpandChange ;
var visualMapModel = this . visualMapModel ; var handleThumbs:==:shapes . handleThumbs ;
var observable = mobx . observable ; var computed:==:mobx . computed ;
var list = this . _ list ; var length:==:list . length ;
var principalType = context . principalType  |  |  principal . user ; var principalId:==:context . principalId  |  |  undefined ;
var d1 = _ addDiv ( ' d1 ' ) , d2 = _ addDiv ( ' d2 ' ) , d3 = _ addDiv ( ' d3 ' ) ; var c:==:_ jsPlumb . connect ( source : d1 , target : d2 ) ;
var commands = imports . commands ; var clipboard:==:imports . clipboard ;
var nodeNativeType = this . _ nodeNativeType ; var nodeFieldCount:==:this . _ nodeFieldCount ;
var settings = imports . settings ; var menus:==:imports . menus ;
var y = ( p1 + yOffset )  |  0 ; var canvas:==:this . canvas ;
var React = require ( ' React ' ) ; var Prism:==:require ( ' Prism ' ) ;
var bcrypt = require ( ' bcryptjs ' ) ; var moment:==:require ( ' moment ' ) ;
var Iterable = Immutable . Iterable ; var Iterator:==:Iterable . Iterator ;
var f = document . getElementById ( ' state - frame ' ) ; var d:==:f . contentDocument  |  |  f . contentWindow . document ;
var add = stdlib . Atomics . add ; var fround:==:stdlib . Math . fround ;
var pointer = pointers [ 0 ] ; var bbox:==:conf . bbox ;
var msg = rule . msg ; var msgData:==:rule . msgData ;
var layerConfig = r . layerConfig ; var chunks:==:this . chunks ;
var pitchAdjustHeight = options . pitchAdjustHeight ; var easingFunction:==:options . easingFunction ;
var prevDelta = session . prevDelta  |  |  ; var prevInput:==:session . prevInput  |  |  ;
var debug = window . debug ; var jasmine:==:window . jasmine ;
var rename   = require ( ' gulp - rename ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var app = evt . application ; var manifest:==:app . manifest  |  |  app . updateManifest ;
var collection = db . collection ( ' cursor_limit_skip_correctly ' ) ; var ordered:==:collection . initializeUnorderedBulkOp ( ) ;
var decelerationRate = processDecelerationRate ( this . props . decelerationRate ) ; var source:==:this . props . source  |  |  ;
var glob = require ( ' glob ' ) ; var http:==:require ( ' http ' ) ;
var reactNativeTagHandles = require ( ' reactNativeTagHandles ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var done = Todos . done ( ) . length ; var remaining:==:Todos . remaining ( ) . length ;
var path = require ( ' path ' ) ; var wrench:==:require ( ' wrench ' ) ;
var active = e . active ; var switchInProgress:==:e . switchInProgress ;
var Mirror = global . Mirror ; var valueMirror:==:global . valueMirror ;
var createLayer = leafletLayerHelpers . createLayer ; var safeAddLayer:==:leafletLayerHelpers . safeAddLayer ;
var r = bn . fromBits ( h . toBits ( vectors [ i ] . r ) ) ; var s:==:bn . fromBits ( h . toBits ( vectors [ i ] . s ) ) ;
var div = root . find ( ' div ' ) ; var span:==:root . find ( ' span ' ) ;
var marginLimits = axesLayout . marginLimits ; var plotArea:==:axesLayout . plotArea ;
var pooledClass = require ( ' pooledClass ' ) ; var twoArgumentPooler:==:pooledClass . twoArgumentPooler ;
var length = frame . text . length ; var time:==:new Date ( frame . time * 1000 ) ;
var length = options . length ; var radix:==:options . radix ;
var styleSheet = require ( ' styleSheet ' ) ; var viewPropTypes:==:require ( ' viewPropTypes ' ) ;
var flowEndTimes = timelineData . flowEndTimes ; var flowStartLevels:==:timelineData . flowStartLevels ;
var itemSize = visualMapModel . itemSize ; var barGroup:==:this . _ shapes . barGroup ;
var orient = this . _ orient ; var inverse:==:this . visualMapModel . get ( ' inverse ' ) ;
var p = this . properties ; var w:==:p . width ? s . width : 0 ;
var zoomInLabel = options . zoomInLabel ! = = undefined ? options . zoomInLabel : ' + ' ; var zoomOutLabel:==:options . zoomOutLabel !    undefined ? options . zoomOutLabel : ' \u2212 ' ;
var object = util . object ; var string:==:util . string ;
var bunyan = require ( ' bunyan ' ) ; var once:==:require ( ' once ' ) ;
var handler2 = sinon . spy ( function handler2 ( ) ) ; var handler3:==:sinon . spy ( function handler3 ( ) ) ;
var parsejson = _ dereq _ ( ' parsejson ' ) ; var parseqs:==:_ dereq _ ( ' parseqs ' ) ;
var createExpressionStatement = parseTreeFactory . createExpressionStatement ; var createFunctionDeclaration:==:parseTreeFactory . createFunctionDeclaration ;
var i d = event . i d ; var start:==:$ . fullCalendar . formatDate ( event . start , ' yyyy - mm - dd hh : mm : ss ' ) ;
var dateToCell = t . dateToCell ; var rangeToSegments:==:t . rangeToSegments ;
var fs = require ( ' fs ' ) ; var chevrotain:==:require ( ' chevrotain ' ) ;
var Editor = imports . Editor ; var Document:==:imports . Document ;
var entityName = model . entityNames . speaker ; var logger:==:common . logger ;
var debug = require ( ' debug ' ) ( ' keystone : core : importer ' ) ; var path:==:require ( ' path ' ) ;
var plugins = self . plugins ; var plugin:==:Interface . plugins [ name ] ;
var set = sets [ s ] ; var keys:==:Object . keys ( set ) ;
var flatten = require ( ' gulp - flatten ' ) ; var gulp:==:require ( ' gulp ' ) ;
var a = w . agents [ 0 ] ; var b:==:a . brain ;
var SCALE_BY_DISTANCE_INDEX = Billboard . SCALE_BY_DISTANCE_INDEX = 11 ; var TRANSLUCENCY_BY_DISTANCE_INDEX:==:Billboard . TRANSLUCENCY_BY_DISTANCE_INDEX    12 ;
var alwaysScope = options . alwaysScope ; var home:==:options . home ;
var HAS_NATIVE_FULLSCREEN_ENABLED = exports . HAS_NATIVE_FULLSCREEN_ENABLED = nativeFullScreenEnabled ; var fullscreen_event_name:==:exports . fullscreen_event_name    fullScreenEventName ;
var twilio = require ( ' twilio ' ) ; var async:==:require ( ' async ' ) ;
var username = ( msg . msgData . username   ? msg . msgData . username : null ) ; var credential:==:( msg . msgData . credential ? msg . msgData . credential : null ) ;
var name = _ ref . name ; var description:==:_ ref . description ;
var rimraf = require ( ' rimraf ' ) ; var iconv:==:require ( ' iconv - lite ' ) ;
var height = props . height ; var rowCount:==:props . rowCount ;
var begin = groupedChunk . beginChunk * this . chunkSize ; var end:==:math . min ( groupedChunk . endChunk * this . chunkSize , this . length ) ;
var up = scratchCalculateCartesian . up ; var east:==:scratchCalculateCartesian . east ;
var interpret = require ( ' interpret ' ) ; var v8flags:==:require ( ' v8flags ' ) ;
var fs = require ( ' hexo - fs ' ) ; var moment:==:require ( ' moment ' ) ;
var bio = req . fields . bio ; var avatar:==:req . files . avatar . path . split ( path . sep ) . pop ( ) ;
var atan = stdlib . Math . atan ; var cos:==:stdlib . Math . cos ;
var off = $ sub . offset ( ) ; var scroll:==:ace . helper . scrollTop ( ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var crypto:==:require ( ' crypto ' ) ;
var path = require ( ' path ' ) ; var denodeify:==:require ( ' denodeify ' ) ;
var zindex = options . zindex ; var allowClose:==:options . allowClose ;
var mysql = clients . mysql ; var sqlite3:==:clients . sqlite3 ;
var aspectRatio = canvas . aspectRatio ; var cropBox:==:this . cropBox ;
var t = this ; var duration:==:t . media . duration ;
var bind = require ( ' bind ' ) ; var defaults:==:require ( ' defaults ' ) ;
var actual = Cartesian3 . fromArray ( actualTangents , i ) ; var expected:==:cartesian3 . fromArray ( expectedTangents , i ) ;
var elasticPane = kendo . mobile . ui . scrollViewElasticPane ; var scrollViewContent:==:kendo . mobile . ui . scrollViewContent ;
var missspelling = ' missspelling ' ; var iggnore:==:' iggnore ' ;
var path = require ( ' path ' ) ; var acorn:==:require ( ' acorn ' ) ;
var series = ecModel . getSeriesByIndex ( idxItem . seriesIndex ) ; var dataIndex:==:idxItem . dataIndexInside ;
var marginTop = pulseChart . defaultTooltipSettings . marginTop ; var width:==:this . data . settings . popup . width ;
var otherForm = scope . otherForm ; var childForm:==:form . childForm ;
var notch = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' notch ' , this . notch ) ) ) ) ; var arrowHead:==:math . max ( 0 , math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' arrowHead ' , this . arrowHead ) ) ) ) ;
var observables = this . observables ; var len:==:observables . length ;
var extractedTags = job . extractedTags ; var decorations:==:job . decorations ;
var _ memset = Module [ ' _ memset ' ] = asm [ ' _ memset ' ] ; var _ im_search:==:Module [ ' _ im_search ' ]    asm [ ' _ im_search ' ] ;
var node = this . node ; var popup:==:this . _ _ popup ;
var positions = corridor . positions ; var show:==:corridor . show ;
var item = items [ i ] ; var entity:==:item . entity ;
var index = parseInt ( this . getAttribute ( ' data - index ' ) ) ; var parent:==:this . parentNode ;
var exp = expected . keyPath ; var act:==:actual . keyPath ;
var force = options . force ; var src:==:options . src ;
var activeClassName = _ props2 . activeClassName ; var activeStyle:==:_ props2 . activeStyle ;
var outputDirectory = options . outputDirectory ; var removePragmas:==:options . removePragmas ;
var button = caller . find ( ' . neighbors - button ' ) ; var list:==:caller . find ( ' . neighbors - interface - list ' ) ;
var basename = require ( ' path ' ) . basename ; var frontdoor:==:require ( ' frontdoor ' ) ;
var reactFeatureFlags = require ( ' reactFeatureFlags ' ) ; var reactInstanceMap:==:require ( ' reactInstanceMap ' ) ;
var ngModel = this . ngModel ; var $ attrs:==:this . $ attrs ;
var orgName = options . orgName  |  |  '' ; var appName:==:options . appName  |  |  '' ;
var href = evt . detail . href ; var sizes:==:evt . detail . sizes ;
var l = hsla [ 2 ] ; var a:==:hsla [ 3 ]  |  |  1 ;
var min_size_y = this . resize_min_size_y ; var autogrow:==:this . options . autogrow_cols ;
var length = this . length ; var promise:==:this . promise ;
var assert = require ( ' assert ' ) ; var crypto:==:require ( ' crypto ' ) ;
var radius = point . radius ; var value:==:Math . min ( point . value , max ) ;
var reactHostComponent = require ( ' reactHostComponent ' ) ; var reactTestMount:==:require ( ' reactTestMount ' ) ;
var customValidators = configuration . customValidators  |  |  [ ] ; var skipUndeclared:==:configuration . skipUndeclared  |  |  false ;
var url = data . url ; var title:==:data . title ;
var React = require ( ' React ' ) ; var appState:==:require ( ' appState ' ) ;
var groupSize = groupSizes [ base ] ; var groupBase:==:groupBases [ base ] ;
var anchor = document . getElementById ( ' anchor4 ' ) ; var popup:==:document . getElementById ( ' popup1 ' ) ;
var toolbar     = this . toolbar ; var cm:==:this . cm ;
var panel = panels [ I ] ; var dim1:==:panel . dim1 ;
var row = rows [ 0 ] ; var keys:==:Object . keys ( row ) . sort ( ) ;
var lang = supportedLanguages [ langIndex ] ; var option:==:document . createElement ( ' option ' ) ;
var source = require ( ' vinyl - source - stream ' ) ; var merge:==:require ( ' merge - stream ' ) ;
var origin = args . origin ; var periods:==:args . periods ;
var delta = sbx . properties . delta ; var mean5MinsAgo:==:delta . mean5MinsAgo ;
var operators = this . operators ; var length:==:operators . length ;
var d = clearCommand . depth ; var s:==:clearCommand . stencil ;
var showTitle = powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . donutChartProps . legend . showTitle , true ) ; var titleText:==:powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . donutChartProps . legend . titleText , this . data . legendData . title ) ;
var raw = options . raw  |  |  false ; var documentsReturnedIn:==:options . documentsReturnedIn  |  |  null ;
var escodegen = require ( ' escodegen ' ) ; var estraverse:==:require ( ' estraverse ' ) ;
var fraction = output . fraction ; var point:==:new b2Vec2 ( ( 1 . 0 - fraction ) * point1 . x + fraction * point2 . x , ( 1 . 0 - fraction ) * point1 . y + fraction * point2 . y ) ;
var parseTreeType = traceur . syntax . trees . parseTreeType ; var variableDeclarationList:==:traceur . syntax . trees . variableDeclarationList ;
var tbody = this . dom _ . createElement ( ' tbody ' ) ; var tfoot:==:this . dom _ . createElement ( ' tfoot ' ) ;
var traverseAllChildren = require ( ' traverseAllChildren ' ) ; var twoArgumentPooler:==:pooledClass . twoArgumentPooler ;
var width = this . _ image . width ; var height:==:this . _ image . height ;
var wallet = walletClient ; var walletId:==:wallet . credentials . walletId ;
var itemParent = db . model ( ' gh-1638 - 1 ' , itemParentSchema , ' gh-1638 - 1 ' ) ; var itemChild:==:db . model ( ' gh-1638 - 2 ' , itemChildSchema , ' gh-1638 - 2 ' ) ;
var Plugin = imports . Plugin ; var info:==:imports . info ;
var minimist = require ( ' minimist ' ) ; var fs:==:require ( ' fs ' ) ;
var amber800 = exports . amber800 = ' # ff8f00 ' ; var amber900:==:exports . amber900    ' # ff6f00 ' ;
var parameters = technique . parameters ; var uniforms:==:technique . uniforms ;
var createNullLiteral = traceur . codegeneration . parseTreeFactory . createNullLiteral ; var createParameterList:==:traceur . codegeneration . parseTreeFactory . createParameterList ;
var mimeType = webInspector . resourceType . mimeTypesForExtensions [ extension . toLowerCase ( ) ] ; var sourceContent:==:this . sourceContent ( sourceurl ) ;
var arrowFunctionExpression = traceur . syntax . trees . arrowFunctionExpression ; var atNameDeclaration:==:traceur . syntax . trees . atNameDeclaration ;
var document = window . document ; var Element:==:window . Element ;
var dest = params . destArray  |  |  null ; var allowNegativeOffset:==:params . allowNegativeOffset  |  |  false ;
var op = operations . operation ( latestRev . contents , revertToRev . contents ) ; var authAttribs:==:latestRev . authAttribs ;
var getDataItemValue = modelUtil . getDataItemValue ; var converDataValue:==:modelUtil . converDataValue ;
var filterInclusiveStart = localUtils . filterInclusiveStart ; var promise:==:utils . promise ;
var src = srcRecords [ protoIndex ] ; var dst:==:_ cloneAndUpdateIndexes ( src , dstRecords , indexMap ) ;
var host = config . host  |  |  ' localhost ' ; var port:==:( Number ( config . port ) + 1 )  |  |  3001 ;
var cardState = card . cardState ; var lockType:==:this . lockTypeMap [ cardState ] ;
var style = el . style ; var text:==:style . text ;
var workspace = imports [ ' collab . workspace ' ] ; var info:==:imports . info ;
var POSITION_INDEX = Polyline . POSITION_INDEX ; var MATERIAL_INDEX:==:Polyline . MATERIAL_INDEX ;
var lineDash = style . lineDash ; var lineDashOffset:==:style . lineDashOffset ;
var arrayExtensions = jsCommon . arrayExtensions ; var stringExtensions:==:jsCommon . stringExtensions ;
var sets = metrics . sets ; var counter_rates:==:metrics . counter_rates ;
var platform = navigator . platform . toLowerCase ( ) ; var userAgent:==:navigator . userAgent . toLowerCase ( ) ;
var filter = featureFilter ( params . filter ) ; var coord:==:z : this . coord . z , x : this . coord . x , y : this . coord . y ;
var jshint   = require ( ' gulp - jshint ' ) ; var uglify:==:require ( ' gulp - uglifyjs ' ) ;
var dpr = this . dpr ; var dom:==:this . dom ;
var transforms = this . transforms ; var expr:==:replaceContextInVars ( this . expr ) ;
var width = referenceCanvas . width ; var height:==:referenceCanvas . height ;
var atoms = json . atoms ; var bonds:==:json . bonds ;
var affix = scrollTarget . find ( ' [ bs - affix ] ' ) ; var width:==:affix . width ( ) ;
var cylinder = BABYLON . Mesh . createCylinder ( ' cylinder ' , 3 , 3 , 3 , 6 , 1 , scene , false ) ; var torus:==:babylon . mesh . createTorus ( ' torus ' , 5 , 1 , 10 , scene , false ) ;
var rowOverscanStopIndex = _ ref6 . rowOverscanStopIndex ; var rowStartIndex:==:_ ref6 . rowStartIndex ;
var reactUpdates = require ( ' reactUpdates ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var isFragmented = config . isFragmented ; var fragmentedTracks:==:config . fragmentedTracks ;
var i d = identify . userId ( ) ; var email:==:identify . email ( ) ;
var solution = self . solution ; var constraints:==:self . analysis . constraints ;
var dynCall_viiiiiiii = Module [ ' dynCall_viiiiiiii ' ] = asm [ ' dynCall_viiiiiiii ' ] ; var dynCall_viiiiii:==:Module [ ' dynCall_viiiiii ' ]    asm [ ' dynCall_viiiiii ' ] ;
var feature = obj . feature ; var options:==:obj . options ;
var index = _ dereq _ ( ' indexof ' ) ; var parser:==:_ dereq _ ( ' engine . io - parser ' ) ;
var supportConstantFonts = exports . supportConstantFonts = ' arial | century | comic | courier | cursive | fantasy | garamond | georgia | helvetica | impact | lucida | symbol | system | tahoma | times | trebuchet | utopia | verdana | webdings | sans - serif | serif | monospace ' ; var numRe:==:exports . numRe    ' \\- ? ( ? : ( ? : [ 0 - 9 ] + )  |  ( ? : [ 0 - 9 ] * \\ . [ 0 - 9 ] + ) ) ' ;
var node = path . node ; var quasi:==:node . quasi ;
var Emitter = require ( ' events ' ) . eventEmitter ; var sliced:==:require ( ' sliced ' ) ;
var stringify = _ _ webpack_require _ _ ( 11 ) . stringify ; var map:==:_ _ webpack_require _ _ ( 3 ) . map ;
var inherit = powerbi . Prototype . inherit ; var inheritSingle:==:powerbi . prototype . inheritSingle ;
var previous = this . _ elementFromHandle ( previousHandle ) ; var next:==:this . _ elementFromHandle ( nextHandle ) ;
var scale = label . _ scale ; var horizontalOrigin:==:label . _ horizontalOrigin ;
var slowAnimations = exports . layout . _ debugAnimations  |  |  exports . layout . _ slowAnimations ; var site:==:this . _ site ;
var appName = options . appName  |  |  '' ; var appKey:==:options . appKey  |  |  '' ;
var editor = firstNode . editor ; var parent:==:firstNode . parent ;
var deltaX = input . deltaX - last . deltaX ; var deltaY:==:input . deltaY - last . deltaY ;
var document = window . document ; var getProto:==:object . getPrototypeOf ;
var Block = traceur . syntax . trees . Block ; var Catch:==:traceur . syntax . trees . Catch ;
var height = Math . floor ( bb . height ( ) ) ; var mask:==:element . attribute ( ' mask ' ) . value ;
var subscription = context . subscription ; var contexts:==:this . contexts ;
var d16 = _ addDiv ( ' d16 ' ) , d17 = _ addDiv ( ' d17 ' ) ; var conn:==:_ jsPlumb . connect ( source : d16 , target : d17 , endpoint : ' blank ' ) ;
var Marked = require ( ' Marked ' ) ; var docsSidebar:==:require ( ' docsSidebar ' ) ;
var overflowX = this . overflowX ; var overflowY:==:this . overflowY ;
var normalScale = this . normalScale & & this . normal ? this . normalScale . buildCode ( builder , ' v2 ' ) : undefined ; var clearCoat:==:this . clearCoat ? this . clearCoat . buildCode ( builder , ' fv1 ' ) : undefined ;
var dialer = $ ( ' frequency - dialer ' ) ; var translateX:==:self . _ translateX + getMovingSpace ( ) ;
var power = opt_power  |  |  2 ; var maxResolution:==:this . maxResolution _ ;
var activate = this . activate . bind ( this ) ; var deactivate:==:this . deactivate . bind ( this ) ;
var tokenType = traceur . syntax . tokenType ; var createArrayLiteralExpression:==:parseTreeFactory . createArrayLiteralExpression ;
var pagesFrom = pagesFromInput . value ; var pagesTo:==:pagesToInput . value ;
var getValue = localUtils . getValue ; var validateFindRequest:==:localUtils . validateFindRequest ;
var endPixel = this . endPixel _ ; var px:==:' px ' ;
var skipTermination = typeof options . skipTermination = = ' boolean ' ? options . skipTermination : false ; var setName:==:options . setName  |  |  ' rs ' ;
var src = state . src ; var method:==:state . method ;
var http = require ( ' http ' ) ; var mouse:==:require ( ' mouse ' ) ;
var oModel = window . oModel ; var aFields:==:window . aFields ;
var x = mouse . x + that . _ _ dragX ; var y:==:mouse . y + that . _ _ dragY ;
var width = this . _ opaqueTexture . width ; var height:==:this . _ opaqueTexture . height ;
var adoc = ' _ i d ' : ' adoc ' ; var newdoc:==:' _ i d ' : ' newdoc ' ;
var legendPosition = powerbi . visuals . legendPosition ; var visualDataRoleKind:==:powerbi . visualDataRoleKind ;
var x = this . position . x ; var y:==:this . position . y ;
var $ element = self . $ element = jqLite ( element ) ; var scrollView:==:self . scrollView    new ionic . views . scroll ( scrollViewOptions ) ;
var width = options . colwidth  |  |  300 ; var maxwidth:==:options . colmaxwidth  |  |  300 ;
var halfAxes = orientedBoundingBox . halfAxes ; var u:==:matrix3 . getColumn ( halfAxes , 0 , fromOrientedBoundingBoxScratchu ) ;
var replace = require ( ' replace ' ) ; var exec:==:require ( ' child - process - promise ' ) . exec ;
var slice = Array . prototype . slice . call . bind ( Array . prototype . slice ) ; var filter:==:Array . prototype . filter . call . bind ( Array . prototype . filter ) ;
var dataGrid = options . dataGrid ? options . dataGrid : $ ( ' # dataGrid ' ) ; var dataGridPage:==:options . dataGridPage ? options . dataGridPage : $ ( ' # dataGridPage ' ) ;
var len = + conf . len ; var n:==:+ conf . n ;
var attribute = attributes [ i ] ; var name:==:attribute . name ;
var body = this . transformAny ( tree . body ) ; var parameter:==:this . transformAny ( tree . parameter ) ;
var tag = missingOpts . tag ; var classname:==:missingOpts . classname ;
var before = new Blockly . fieldLabel ( ' before ' ) ; var after:==:new blockly . fieldLabel ( ' after ' ) ;
var passThrough = require ( ' stream ' ) . passThrough ; var assert:==:require ( ' chai ' ) . assert ;
var staticContainer = require ( ' staticContainer . react ' ) ; var styleSheet:==:require ( ' styleSheet ' ) ;
var structure = this . _ structure ; var skirtHeight:==:this . _ skirtHeight ;
var name = this . transformAny ( tree . name ) ; var parameterList:==:this . transformAny ( tree . parameterList ) ;
var margin = this . margin ; var width:==:options . viewport . width - ( margin . left + margin . right ) ;
var ikConstraints = this . ikConstraints ; var transformConstraints:==:this . transformConstraints ;
var animationIds = this . _ model . _ animationIds ; var length:==:animationIds . length ;
var oneOverRadii = defined ( ellipsoid ) ? ellipsoid . oneOverRadii : wgs84OneOverRadii ; var oneOverRadiiSquared:==:defined ( ellipsoid ) ? ellipsoid . oneOverRadiiSquared : wgs84OneOverRadiiSquared ;
var annotations = this . transformList ( tree . annotations ) ; var body:==:this . transformAny ( tree . body ) ;
var containedStencil = this . containedStencil ; var connectedShape:==:this . connectedShape ;
var seenUnicodeChar = this . seenUnicodeChar ; var seenUnicodeCharInComment:==:this . seenUnicodeCharInComment ;
var node = nodeList [ idx ] ; var parent:==:node . parentNode ;
var repulsion = forceModel . get ( ' repulsion ' ) ; var edgeLength:==:forceModel . get ( ' edgeLength ' ) ;
var e = new Error ( ) ; var stack:==:e . stack ;
var width = jpegImage . width ; var height:==:jpegImage . height ;
var getRowHeader = window . getRowHeader ; var getSelectAll:==:window . getSelectAll ;
var mode = editor . session . $ mode ; var isSupported:==:exports . isSupportedMode ( mode ) ;
var $ e = this . $ element ; var o:==:this . options ;
var next = newData . _ _ next ; var results:==:newData . results ;
var readonly = ' readonly ' in options ? options . readonly : false ; var blocked:==:! ! options . blocked ;
var endCount = endCountParser . parseuShort ( ) ; var startCount:==:startCountParser . parseuShort ( ) ;
var orderedKey = three . geometryUtils . orderedKey ; var computeEdgeFaces:==:three . geometryUtils . computeEdgeFaces ;
var boundingVolume = scene . frameState . commandList [ 0 ] . boundingVolume ; var positions:==:one . positions ;
var ellipsoid = options . ellipsoid ; var height:==:options . height ;
var loc = this . window _ . location . href ; var index:==:loc . indexOf ( ' # ' ) ;
var surfaceHeight = geometry . _ surfaceHeight ; var rotation:==:geometry . _ rotation ;
var primaryGrid = grids . primaryGrid ; var overlayGrid:==:grids . overlayGrid ;
var min = this . min ; var max:==:this . max ;
var electron = require ( ' electron ' ) ; var spawn:==:require ( ' cross - spawn ' ) ;
var async = require ( ' async ' ) ; var collab:==:imports . collab ;
var tessellation = options . tessellation  |  |  64 ; var updatable:==:options . updatable ;
var deviceEventManager = require ( ' nativeModules ' ) . deviceEventManager ; var rctDeviceEventEmitter:==:require ( ' rctDeviceEventEmitter ' ) ;
var scale = options . scale  |  |  1 ; var rotation:==:options . rotation  |  |  0 ;
var replace = require ( ' gulp - replace ' ) ; var size:==:require ( ' gulp - size ' ) ;
var subtype = spec . subtype ; var value:==:spec . value ;
var props = this . props ; var delta:==:this . state . isHorizontal ? deltax : deltay ;
var win = goog . getObjectByName ( ' window ' ) ; var doc:==:win . document ;
var hashish = require ( ' hashish ' ) ; var assert:==:require ( ' assert ' ) ;
var height = parsePercent ( detailModel . get ( ' height ' ) , posInfo . r ) ; var value:==:seriesModel . getData ( ) . get ( ' value ' , 0 ) ;
var assert = require ( ' chai ' ) . assert ; var bunyan:==:require ( ' bunyan ' ) ;
var Keys = require ( ' Keys ' ) ; var userAgent:==:require ( ' userAgent ' ) ;
var formattedxValue = point . formattedxValue ; var formattedyValue:==:point . formattedyValue ;
var expires = Number ( tokenData . expires ) ; var token_ts:==:tokenData . token_ts ;
var document = documentElement . localName = = = ' document ' ? documentElement : queryFirstNode ( documentElement , ' document ' , namespaces . kml ) ; var name:==:queryStringValue ( document , ' name ' , namespaces . kml ) ;
var concat = require ( ' gulp - concat ' ) ; var babel:==:require ( ' gulp - babel ' ) ;
var geometry = instance . geometry ; var attributes:==:geometry . attributes ;
var spacing = ' spacing ' ; var textord:==:' textord ' ;
var y = pointer . pageY - newbbox . scrollBodyTop ; var x:==:pointer . pagex - newbbox . scrollBodyLeft ;
var n = document . createElement ( ' script ' ) ; var s:==:document . getElementsByTagName ( ' script ' ) [ 0 ] ;
var type = ref . type ; var timeout:==:ref . timeout ;
var setAccessor = traceur . syntax . trees . setAccessor ; var variableDeclarationList:==:traceur . syntax . trees . variableDeclarationList ;
var name = node . name ; var parent:==:node . parent ;
var derequire = require ( ' derequire ' ) ; var fs:==:require ( ' fs ' ) ;
var errors = require ( ' restify - errors ' ) ; var mime:==:require ( ' mime ' ) ;
var southwestCornerCartesian = this . southwestCornerCartesian ; var northeastCornerCartesian:==:this . northeastCornerCartesian ;
var y1 = this . y1 _ ; var y2:==:this . y2 _ ;
var Trainer = global . Trainer ; var maxmin:==:global . maxmin ;
var ca = ( cert . purposes . indexOf ( ' ca ' ) ! = = -1 ) ; var pathLen:==:exts [ i ] . pathLen ;
var Person = db . model ( ' gh2562_b0 ' , personSchema ) ; var band:==:db . model ( ' gh2562_b1 ' , bandSchema ) ;
var cos = Math . cos ; var abs:==:Math . abs ;
var preferencePanel = imports . preferencePanel ; var commands:==:imports . commands ;
var stiffness = params . stiffness  |  |  400 . 0 ; var repulsion:==:params . repulsion  |  |  400 . 0 ;
var longitude = e . coords . longitude ; var latitude:==:e . coords . latitude ;
var addTransform = exports . addTransform = proxySupportCode ( ' addTransform ' ) ; var defineParameterType:==:exports . defineParameterType    proxySupportCode ( ' defineParameterType ' ) ;
var mult = new operatorNode ( ' * ' , ' multiply ' , [ a , b ] ) ; var add:==:new operatorNode ( ' + ' , ' add ' , [ a , b ] ) ;
var Matrix = math . type . Matrix ; var Range:==:math . type . Range ;
var target = tuple . target ; var currentTarget:==:tuple . currentTarget ;
var bind = require ( ' component - bind ' ) ; var object:==:require ( ' object - component ' ) ;
var x = this . x ; var n:==:x . length ;
var shr64_lo = utils . shr64_lo ; var sum64:==:utils . sum64 ;
var pos = isUndefined ( v [ ' pos ' ] ) ? ' 43 ' : v [ ' pos ' ] ; var layer:==:isUndefined ( v [ ' layer ' ] ) ? 1 : v [ ' layer ' ] ;
var notebookId = $ ( this ) . parent ( ) . attr ( ' notebookId ' ) ; var userId:==:$ ( this ) . parent ( ) . attr ( ' userId ' ) ;
var sqrt = Math . sqrt ; var clip:==:this . clip ;
var should = require ( ' should ' ) ; var path:==:require ( ' path ' ) ;
var cy = this . attribute ( ' cy ' ) . Length . toPixels ( ' y ' ) ; var r:==:this . attribute ( ' r ' ) . length . toPixels ( ) ;
var width = this . currentViewport . width ; var height:==:this . currentViewport . height ;
var t = ts - raf_t0 ; var endTime:==:testharness_timeline . endTime _ ;
var containerSize = _ ref . containerSize ; var currentOffset:==:_ ref . currentOffset ;
var mock = this . mock ; var object:==:this . object ;
var s = v1 . stringValue ( ) ; var n:==:v2 . nodeSetValue ( ) ;
var codingStyleParameters = component . codingStyleParameters ; var quantizationParameters:==:component . quantizationParameters ;
var index = a . indexOf ( ' . ' ) ; var d:==:a . slice ( 0 , index ) ;
var external = ( primitive . _ external = primitive . _ external  |  |  ) ; var composites:==:( external . _ composites    external . _ composites  |  |  ) ;
var winHeight = parallax . winHeight ; var docHeight:==:parallax . docHeight ;
var Plugin = imports . Plugin ; var test:==:imports . test ;
var cropBox = this . cropBox ; var aspectRatio:==:options . aspectRatio ;
var li = panel . content . parent ( ' li ' ) ; var activeOn:==:panel . activeOn ;
var min = boxGeometry . _ min ; var max:==:boxGeometry . _ max ;
var distance = distances [ 0 ] . distance ; var bearing:==:window . plugin . distanceToPortal . currentLoc . bearingTo ( position ) ;
var Element = scope . wrappers . Element ; var htmlContentElement:==:scope . wrappers . htmlContentElement ;
var isFunction = _ _ dependency2 _ _ . isFunction ; var now:==:_ _ dependency2 _ _ . now ;
var name = input . name ; var pkg:==:input . pkg ;
var promise = $ tooltip . $ promise = $ bsCompiler . compile ( options ) ; var scope:==:$ tooltip . $ scope    options . scope & & options . scope . $ new ( )  |  |  $ rootScope . $ new ( ) ;
var maxDuration = data . maxDuration ; var activeClassName:==:data . activeClassName ;
var template = w2popup . _ template ; var title:==:options . title ;
var x = spot . x ; var y:==:spot . y ;
var className = _ ref . className ; var columns:==:_ ref . columns ;
var lexer = Narcissus . lexer ; var definitions:==:Narcissus . definitions ;
var Image = require ( ' Image ' ) ; var pixelRatio:==:require ( ' pixelRatio ' ) ;
var parseTreeValidator = traceur . syntax . parseTreeValidator ; var privateNameSyntaxTransformer:==:traceur . codegeneration . privateNameSyntaxTransformer ;
var heights = heightsTable ; var length:==:heights . length ;
var d = speed : 50 , wiggles : 3 , travel : 5 , callback : null ; var o:==:jQuery . extend ( d , o ) ;
var options = opt_options  |  |  ; var callback:==:opt_callback  |  |  goog . nullFunction ;
var isName = corePrimitives . isName ; var isCmd:==:corePrimitives . isCmd ;
var logger = require ( ' gulp - logger ' ) ; var util:==:require ( ' gulp - util ' ) ;
var gltf = model . gltf ; var techniques:==:gltf . techniques ;
var h = ! opt  |  |  ! opt . hv  |  |  opt . hv [ 0 ] ; var v:==:! opt  |  |  ! opt . hv  |  |  opt . hv [ 1 ] ;
var ONEMIN = constants . ONEMIN ; var ONESEC:==:constants . ONESEC ;
var purple300 = exports . purple300 = ' # ba68c8 ' ; var purple400:==:exports . purple400    ' # ab47bc ' ;
var keywords = page . keywords  |  |  ( page . tags & & page . tags . length ? page . tags : undefined )  |  |  config . keywords ; var title:==:options . title  |  |  page . title  |  |  config . title ;
var naturalHeight = precomputedDimensions ? precomputedDimensions . naturalHeight : imageElement . naturalHeight ; var offsetWidth:==:precomputedDimensions ? precomputedDimensions . offsetWidth : naturalWidth ;
var right = getPropertyAsFloat ( style , ' padding - right ' ) ; var bottom:==:getPropertyAsFloat ( style , ' padding - bottom ' ) ;
var a = new blogPost ( title : ' searching in mongoose ' ) ; var b:==:new blogPost ( title : ' text search in mongoose ' ) ;
var curve = sjcl . ecc . curves [ ' c'+curvenum ] ; var sha:==:sjcl . hash [ ' sha'+shanum ] ;
var direction = options . direction ; var isRtl:==:kendo . support . isRtl ( that . wrapper ) ;
var isFunction = logic . _ isFunction ; var isString:==:logic . _ isString ;
var minY = r1 . _ minY < r2 . _ minY ? r1 . _ minY : r2 . _ minY ; var maxX:==:r1 . _ maxX > r2 . _ maxX ? r1 . _ maxX : r2 . _ maxX ;
var dataSource = that . dataSource ; var ignoreCase:==:options . ignoreCase ;
var width = titleSize . width > imageSize . width ? titleSize . width : imageSize . width ; var height:==:titleSize . height > imageSize . height ? titleSize . height : imageSize . height ;
var c = this . cs ; var i:==:this . num ;
var footer = this . _ options . tooltips . callbacks . footer . apply ( this , arguments ) ; var afterFooter:==:this . _ options . tooltips . callbacks . afterFooter . apply ( this , arguments ) ;
var granularity = corridorGeometry . _ granularity ; var ellipsoid:==:corridorGeometry . _ ellipsoid ;
var editor = this . editor ; var $ textContainer:==:editor . $ textContainerElem ;
var dist = distanceBetween ( lastPoint , currentPoint ) ; var angle:==:angleBetween ( lastPoint , currentPoint ) ;
var Bool = new primitiveType ( ' bool ' , 1 , ' i ' ) ; var i8:==:new primitiveType ( ' i8 ' , 1 , ' i ' , -128 , 127 ) ;
var bar = docSet . getByLongname ( ' bar ' ) [ 0 ] ; var pez:==:docSet . getByLongname ( ' pez ' ) [ 0 ] ;
var cron = require ( ' cron ' ) . cronJob ; var nconf:==:require ( ' nconf ' ) ;
var type = cfg . type  |  |  Physics . SHAPE_RECT ; var group:==:cfg . group      undefined?0 : cfg . group ;
var displayOrientations = windows . graphics . display . displayOrientations ; var photoOrientation:==:windows . storage . fileProperties . photoOrientation ;
var omittedCloseTags = require ( ' omittedCloseTags ' ) ; var validatedomNesting:==:require ( ' validatedomNesting ' ) ;
var dockableLayout = imports . dockableLayout ; var dockableWidget:==:imports . dockableWidget ;
var END_TO_START = node . ownerDocument . defaultView . range . end_to_start  |  |  window . range . end_to_start ; var start_to_end:==:node . ownerDocument . defaultView . range . start_to_end  |  |  window . range . start_to_end ;
var link = tag . link ? ' link= ' ' + tag . link + ' ' ' : '' ; var rel:==:tag . rel ? ' rel ' ' + tag . rel + ' ' ' : '' ;
var r = vec2 . create ( ) ; var t:==:vec2 . create ( ) ;
var visualMin = nodeModel . get ( ' visualMin ' ) ; var visualMax:==:nodeModel . get ( ' visualMax ' ) ;
var e = this . _ parts . hostname . length - this . domain ( ) . length ; var sub:==:this . _ parts . hostname . substring ( 0 , e ) ;
var dynCall_viiiiii = Module [ ' dynCall_viiiiii ' ] = asm [ ' dynCall_viiiiii ' ] ; var dynCall_ddd:==:Module [ ' dynCall_ddd ' ]    asm [ ' dynCall_ddd ' ] ;
var assert = require ( ' assert ' ) ; var debug:==:require ( ' debug ' ) ( ' loopback : security : acl ' ) ;
var colorPropType = require ( ' colorPropType ' ) ; var requireNativeComponent:==:require ( ' requireNativeComponent ' ) ;
var chapter = store . createRecord ( ' chapter ' , title : ' the story begins ' ) ; var relationship:==:chapter . _ internalModel . _ relationships . get ( ' pages ' ) ;
var callExpression = traceur . syntax . trees . callExpression ; var caseClause:==:traceur . syntax . trees . caseClause ;
var includeWebMercatort = parameters . includeWebMercatort ; var rectangle:==:parameters . rectangle ;
var target = eventPath [ i ] . target ; var currentTarget:==:eventPath [ i ] . currentTarget ;
var getBounds = _ tetherBase$Utils . getBounds ; var extend:==:_ tetherBase$Utils . extend ;
var x = this . expression . expressions . slice ( ) ; var e:==:this . clone ( ) ;
var toBase64Table = this . toBase64Table ; var length:==:data . length ;
var container = document . getElementById ( ' container ' ) ; var contained1:==:document . getElementById ( ' contained1 ' ) ;
var camera = scene . _ camera ; var frustum:==:camera . frustum ;
var installFunctions = utils . installFunctions ; var installGetter:==:utils . installGetter ;
var vertices = polygon . m_vertices ; var normals:==:polygon . m_normals ;
var dirname = require ( ' path ' ) . dirname ; var exec:==:require ( ' child_process ' ) . exec ;
var w = imageElement . width ; var h:==:imageElement . height ;
var s = arguments [ 1 ] ; var a:==:Array . prototype . slice . call ( arguments , 1 ) ;
var rotation = ellipse . rotation ; var height:==:ellipse . height ;
var markdownlint = require ( ' markdownlint ' ) ; var glob:==:require ( ' glob ' ) ;
var extent = ol . extent . createOrUpdate ( -100 , -100 , 100 , 100 ) ; var grid:==:ol . tilegrid . createForExtent ( extent ) ;
var entityName = self . entityName ; var manager:==:self . manager ;
var functionValue = values . functionValue ; var instantiate:==:values . instantiate ;
var options = obj . options ; var val:==:$ ( obj . el ) . val ( ) . trim ( ) ;
var shouldUpdateReactComponent = require ( ' shouldUpdateReactComponent ' ) ; var traverseStackChildren:==:require ( ' traverseStackChildren ' ) ;
var topic_id = _ . trim ( req . body . topic_id ) ; var title:==:_ . trim ( req . body . title ) ;
var x = mouseListener . x * glplot . pixelRatio ; var y:==:this . canvas . height - glplot . pixelRatio * mouseListener . y ;
var weight = w . weight ; var o:==:geometry . vertices [ vidx ] ;
var log = require ( ' debug ' ) ( ' nightmare : log ' ) ; var debug:==:require ( ' debug ' ) ( ' nightmare ' ) ;
var stdout = fs . readFileSync ( stdoutFile , ' utf8 ' ) ; var stderr:==:fs . readFileSync ( stderrFile , ' utf8 ' ) ;
var tabManager = imports . tabManager ; var ace:==:imports . ace ;
var r = parseInt ( rgb [ 0 ] , 10 ) . toString ( 16 ) ; var g:==:parseInt ( rgb [ 1 ] , 10 ) . toString ( 16 ) ;
var n = iframe . get ( ' node ' ) ; var e:==:Y . one ( ' # editor iframe ' ) ;
var fontChar = string . fromCharCode ( fontCharCode ) ; var glyph:==:this . glyphCache [ charcode ] ;
var eventName = options . eventName ; var colors:==:options . colors [ row ] ;
var width = canvas . width - 10 ; var height:==:canvas . height - 10 ;
var title = options . title  |  |  ' ' ; var message:==:options . message  |  |  ' ' ;
var doc = window . document . documentElement ; var body:==:window . document . body ;
var bufferSize = this . bufferSize ; var startBufferEvery:==:this . startBufferEvery     null ? bufferSize : this . startBufferEvery ;
var component = el . components [ componentName ] ; var schema:==:component & & component . schema ;
var area_coords = self . calculate_overlapped_area_coords ( player_coords , collider_coords ) ; var area:==:self . calculate_overlapped_area ( area_coords ) ;
var y = readmpInt ( der , ' y ' ) ; var x:==:readmpInt ( der , ' x ' ) ;
var merge = require ( ' utils - merge ' ) ; var sign:==:require ( ' cookie - signature ' ) . sign ;
var colContentRight = t . colContentRight ; var dateToCell:==:t . dateToCell ;
var points = options . points ; var firstTangent:==:options . firstTangent ;
var renderer = client . renderer ; var defs:==:d3 . select ( ' body ' ) . append ( ' svg ' ) . append ( ' defs ' ) ;
var loaded = instance . get ( ' loaded ' ) ; var loading:==:instance . get ( ' loading ' ) ;
var engine = require ( ' engine . io ' ) ; var client:==:require ( ' socket . io - client ' ) ;
var assign = require ( ' object - assign ' ) ; var async:==:require ( ' async ' ) ;
var a = aChildren [ aIndex ] ; var b:==:bChildren [ bIndex ] ;
var tab1 = new goog . ui . Tab ( ' tab1 ' ) ; var tab2:==:new goog . ui . Tab ( ' tab2 ' ) ;
var View = require ( ' View ' ) ; var viewPropTypes:==:require ( ' viewPropTypes ' ) ;
var slice = deletedIds . slice ; var concat:==:deletedIds . concat ;
var dataPoint = dataPoints [ categoryIndex ] ; var categoryValue:==:dataPoint . categoryValue ;
var metaKey = defaultValue ( options . metaKey , false ) ; var button:==:defaultValue ( options . button , 0 ) ;
var castShadows = shadowMode . castShadows ( tileProvider . shadows ) ; var receiveShadows:==:shadowMode . receiveShadows ( tileProvider . shadows ) ;
var pageX = ev . pageX ; var pageY:==:ev . pageY ;
var y = style . y  |  |  0 ; var text:==:style . text ;
var declar = build . declar ; var loop:==:build . loop ;
var START = C . START = 0x11 ; var STOP:==:C . STOP    0x12 ;
var STATUS_SYNC_ERROR = exports . STATUS_SYNC_ERROR   = 4 ; var STATUS_RELOADING:==:exports . STATUS_RELOADING     5 ;
var previous = signal . previous ; var next:==:signal . next ;
var stateAllocator = traceur . codegeneration . generator . stateAllocator ; var stateMachine:==:traceur . syntax . trees . stateMachine ;
var stringToBytes = sharedUtil . stringToBytes ; var stringTopdfString:==:sharedUtil . stringTopdfString ;
var map = mapXML . documentElement ; var version:==:map . getAttribute ( ' version ' ) ;
var q = quadKey ; var t:==:tileInfo [ q ] ;
var ALL_PANES    = ' ALL_PANES ' ; var ACTIVE_PANE:==:' ACTIVE_PANE ' ;
var savedPose = this . savedPose ; var hasPositionalTracking:==:this . hasPositionalTracking !    undefined ? this . hasPositionalTracking : checkHasPositionalTracking ( ) ;
var formField = require ( ' elemental ' ) . formField ; var formInput:==:require ( ' elemental ' ) . formInput ;
var options = that . options ; var dataSource:==:options . dataSource  |  |  ;
var x = textGroup . x + line . x + word . x ; var y:==:textGroup . y + line . y + word . y ;
var gulp = require ( ' gulp ' ) ; var prompt:==:require ( ' gulp - prompt ' ) ;
var sourceObj = this . sourceObj ; var eventName:==:this . eventName ;
var cap = options . cap  |  |  BABYLON . Mesh . NO_CAP ; var updatable:==:options . updatable ;
var graph = ui . editor . graph ; var view:==:graph . view ;
var plugins = require ( util . dirs ( ) . gekko + ' plugins ' ) ; var version:==:adapter . version ;
var cwd = this . _ debuggerClient . target . cwd ; var filename:==:this . _ debuggerClient . target . filename ;
var edges = option . edges  |  |  option . links ; var nodes:==:option . data  |  |  option . nodes ;
var canvas = $ header . find ( ' canvas ' ) [ 0 ] ; var s:==:spinner ( canvas ) ;
var settings = imports . settings ; var immediate:==:imports . immediate ;
var page = this . pageCache [ data . pageNum - 1 ] ; var intentState:==:page . intentStates [ data . intent ] ;
var Capture = Windows . Media . Capture ; var mediaProperties:==:windows . media . mediaProperties ;
var commands = imports . commands ; var settings:==:imports . settings ;
var predefinedName = traceur . syntax . predefinedName ; var tokenType:==:traceur . syntax . tokenType ;
var offset = bounds . offset ; var size:==:bounds . size ;
var forward = parseInt ( tags [ ' lanes : forward ' ] , 10 ) ; var backward:==:parseInt ( tags [ ' lanes : backward ' ] , 10 ) ;
var image = U . XML . getNodeText ( node )  |  |  node . getAttribute ( ' image ' ) ; var height:==:node . getAttribute ( ' height ' ) ;
var commands = imports . commands ; var run:==:imports . run ;
var bottom = getPropertyAsFloat ( style , ' border - bottom - width ' ) ; var top:==:getPropertyAsFloat ( style , ' border - top - width ' ) ;
var qos = opts . qos  |  |  0 ; var retain:==:opts . retain ? protocol . RETAIN_MASK : 0 ;
var url = require ( ' url ' ) ; var debug:==:require ( ' debug ' ) ( ' keystone : storage : adapter : fs ' ) ;
var v = jQuery ( ' # form ' ) . validate ( ) ; var method:==:$ . validator . methods [ methodName ] ;
var assert = common . assert ; var fake:==:common . fake . create ( ) ;
var meanLongitude = meanLongitudeConstant + meanLongitudeSecPart * radiansPerArcSecond ; var longitudeOfNode:==:longitudeOfNodeConstant + longitudeOfNodeSecPart * radiansPerArcSecond ;
var testSet = transformUtils . testSet ( ) ; var state:==:testSet . state ;
var message = v . message ; var type:==:v . type ;
var currentStyles = _ state . currentStyles ; var currentVelocities:==:_ state . currentVelocities ;
var input = viewId . getElementsByTagName ( ' input ' ) [ 0 ] ; var header:==:viewId . getElementsByTagName ( ' gaia - header ' ) [ 0 ] ;
var radius = this . gaugeVisualProperties . radius ; var margin:==:this . margin ;
var d = vp8Get ( b ) ? vp8GetSignedValue ( b , 4 ) : 0 ; var e:==:vp8Get ( b ) ? vp8GetSignedValue ( b , 4 ) : 0 ;
var rpc    = require ( ' pm2-axon - rpc ' ) ; var axon:==:require ( ' pm2-axon ' ) ;
var option = new virtualElement ( ' option ' ) ; var children:==:this . _ children ;
var libraries = init . libraries ; var mangledNames:==:init . mangledNames ;
var type = _ props2 . type ; var underlineDisabledStyle:==:_ props2 . underlineDisabledStyle ;
var path = require ( ' path ' ) ; var debug:==:require ( ' debug ' ) ( ' sockjs - client : test - server : main ' ) ;
var typeIndex = this . _ typeIndex ; var exceptions:==:this . _ exceptions ;
var debug = utils . debug ; var warn:==:debug ( ' A - Frame : warn ' ) ;
var settings = imports . settings ; var debug:==:imports . debugger ;
var depth = options . depth ? parseInt ( options . depth , 10 ) : 0 ; var orderby:==:options . orderby  |  |  ' name ' ;
var video = this . dialog . video ; var canvas:==:this . canvas ;
var file = ' file ' ; var type:==:' type ' ;
var argumentList = traceur . syntax . trees . argumentList ; var arrayComprehension:==:traceur . syntax . trees . arrayComprehension ;
var dangerousStyleValue = require ( ' dangerousStyleValue ' ) ; var getComponentName:==:require ( ' getComponentName ' ) ;
var frontuVs = frontuVs ? frontuVs : new babylon . vector4 ( 0 . 0 , 0 . 0 , 1 . 0 , 1 . 0 ) ; var backuVs:==:backuVs ? backuVs : new babylon . vector4 ( 0 . 0 , 0 . 0 , 1 . 0 , 1 . 0 ) ;
var assign = require ( ' object - assign ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var dayOffsetToCellOffset = t . dayOffsetToCellOffset ; var calendar:==:t . calendar ;
var l = 0 + ( sleft ? pleft . size + ( pleft . resizable ? this . resizer : this . padding ) : 0 ) ; var t:==:0 + ( stop ? ptop . size + ( ptop . resizable ? this . resizer : this . padding ) : 0 ) ;
var sendTonesButton = document . querySelector ( ' button#sendTonesButton ' ) ; var hangupButton:==:document . querySelector ( ' button#hangupButton ' ) ;
var controls = this . controls ; var animations:==:this . animations ;
var t = this . _ stack . pop ( ) ; var c:==:this . _ stack . pop ( ) ;
var semver = require ( ' semver ' ) ; var winston:==:require ( ' winston ' ) ;
var reactFiberCompleteWork = require ( ' reactFiberCompleteWork ' ) ; var reactFiberCommitWork:==:require ( ' reactFiberCommitWork ' ) ;
var isUndefined = _ angular . isUndefined ; var element:==:_ angular . element ;
var points = this . _ points ; var offsets:==:this . _ offsets ;
var x = posInfo . cx + parsePercent ( offsetCenter [ 0 ] , posInfo . r ) ; var y:==:posInfo . cy + parsePercent ( offsetCenter [ 1 ] , posInfo . r ) ;
var webDriver = require ( ' selenium - webdriver ' ) . webDriver ; var webElement:==:require ( ' selenium - webdriver ' ) . webElement ;
var host = server . host  |  |  server . ipc ; var port:==:server . port  |  |  27017 ;
var reverse = step . reverse ; var iter:==:nodeset . iterator ( reverse ) ;
var reactTestReconcileTransaction = require ( ' reactTestReconcileTransaction ' ) ; var reactUpdates:==:require ( ' reactUpdates ' ) ;
var afterEach = test . afterEach ; var assert:==:test . assert ;
var mkpath = require ( ' mkpath ' ) ; var path:==:require ( ' path ' ) ;
var top = parseInt ( org_elem . offset ( ) [ ' top ' ] ) ; var left:==:parseInt ( org_elem . offset ( ) [ ' left ' ] ) ;
var lastIndex = p . get ( ' lastIndex ' ) ; var multiline:==:p . get ( ' multiline ' ) ;
var Dict = corePrimitives . dict ; var isDict:==:corePrimitives . isDict ;
var prev = entry . prev ; var next:==:entry . next ;
var pre = doc . getElementsByTagName ( ' pre ' ) [ 0 ] ; var b:==:doc . getElementsByTagName ( ' body ' ) [ 0 ] ;
var hw_icon    = zombie_array [ index ] [ ' hw_icon ' ] ; var domain:==:zombie_array [ index ] [ ' domain ' ] ;
var leave = ref . leave ; var afterLeave:==:ref . afterLeave ;
var trim = ref . trim ; var number:==:ref . number ;
var onChange = _ props . onChange ; var onHeightChange:==:_ props . onHeightChange ;
var mongoose = require ( ' mongoose ' ) ; var User:==:mongoose . model ( ' User ' ) ;
var padding = parseInt ( helpers . getStyle ( container , ' padding - top ' ) ) + parseInt ( helpers . getStyle ( container , ' padding - bottom ' ) ) ; var h:==:container . clientHeight - padding ;
var orangeA700 = exports . orangeA700 = ' # ff6d00 ' ; var deepOrange50:==:exports . deepOrange50    ' # fbe9e7 ' ;
var e = $ ( ' # firstname ' ) ; var v:==:$ ( ' # testForm1 ' ) . validate ( ) ;
var sqExprConverter = powerbi . data . sqExprConverter ; var selector:==:powerbi . data . selector ;
var kendo = global . kendo ; var caret:==:kendo . caret ;
var part = options . part ; var method:==:options . method ;
var write = process . stdout . write ; var exit:==:process . exit ;
var helperNode1 = helper . getNode ( ' helperNode1 ' ) ; var rule:==:helper . getNode ( ' changeNode1 ' ) . rules [ 0 ] ;
var distanceX = self . distanceX ; var distanceY:==:self . distanceY ;
var children = this . children ; var l:==:children . length ;
var contact = renderOpts . contact ; var input:==:renderOpts . input ;
var ace = imports . ace ; var commands:==:imports . commands ;
var commands = imports . commands ; var panels:==:imports . panels ;
var d = Promise . defer ( ) ; var promise:==:d . promise ;
var c9 = imports . c9 ; var basename:==:require ( ' path ' ) . basename ;
var wtTable = this . hot . view . wt . wtTable ; var scrollableElement:==:this . hot . view . wt . wtOverlays . scrollableElement ;
var isValid = isValidPreview ( preview ) ; var isBigEnough:==:isBigEnoughPreview ( preview ) ;
var highPosition = cartesian3 . unpack ( highPositions , i , scratchbvCartesianHigh ) ; var lowPosition:==:cartesian3 . unpack ( lowPositions , i , scratchbvCartesianLow ) ;
var upgradeAll = scope . upgradeAll ; var upgradeWithDefinition:==:scope . upgradeWithDefinition ;
var dynCall_iff = Module [ ' dynCall_iff ' ] = asm [ ' dynCall_iff ' ] ; var dynCall_iiii:==:Module [ ' dynCall_iiii ' ]    asm [ ' dynCall_iiii ' ] ;
var i = isStartEndpoint ? j : length - j - 1 ; var child:==:node . childNodes [ i ] ;
var lineStyle = seriesScope & & seriesScope . lineStyle ; var hoverLineStyle:==:seriesScope & & seriesScope . hoverLineStyle ;
var user = this . analytics . user ( ) ; var orderId:==:track . orderId ( ) ;
var options = this . _ buffer . createVertexBuffer ( ' options ' , 4 , 4 ) ; var cellInfo:==:this . _ buffer . createVertexBuffer ( ' cellInfo ' , 8 , 4 ) ;
var x = new symbolNode ( ' x ' ) ; var o:==:new operatorNode ( ' + ' , ' add ' , [ a , x ] ) ;
var canonicalizeUrl = $ traceurRuntime . canonicalizeUrl ; var isAbsolute:==:$ traceurRuntime . isAbsolute ;
var top = drawOptions . top ; var margin:==:drawOptions . margin ;
var identity = options . identity ; var transformer:==:options . transformer ;
var upload = imports . upload ; var menus:==:imports . menus ;
var i d = observable . _ _ i d _ _ ; var waiting:==:extenderHelper . waiting ;
var question = imports [ ' dialog . question ' ] ; var error:==:imports [ ' dialog . error ' ] ;
var options = _ ref2 . options ; var isOptionUnique:==:this . props . isOptionUnique ;
var unaryExpression = traceur . syntax . trees . unaryExpression ; var variableDeclarationList:==:traceur . syntax . trees . variableDeclarationList ;
var transform = Matrix4 . clone ( camera . transform , scratch2dViewportCameraTransform ) ; var frustum:==:camera . frustum . clone ( ) ;
var url = validator . trim ( req . body . url ) ; var location:==:validator . trim ( req . body . location ) ;
var replace = require ( ' gulp - replace ' ) ; var header:==:require ( ' gulp - header ' ) ;
var magFilter = ( data . magFilter ) ? data . magFilter : gl . linear ; var minFilter:==:( data . minFilter ) ? data . minFilter : gl . linear ;
var toString = object . prototype . toString ; var hasOwnProperty:==:object . prototype . hasOwnProperty ;
var tagName = state . tagName ; var args:==:state . args ;
var options = me . options ; var canvas:==:me . canvas ;
var FULFILLED = [ ' FULFILLED ' ] ; var PENDING:==:[ ' PENDING ' ] ;
var c = this . tc = vrotate ( this . c , rot ) . add ( p ) ; var r:==:this . r ;
var display = opts . display ; var isHorizontal:==:me . isHorizontal ( ) ;
var reactFiberInstrumentation = require ( ' reactFiberInstrumentation ' ) ; var reactFiberReconciler:==:require ( ' reactFiberReconciler ' ) ;
var request = require ( ' request ' ) ; var async:==:require ( ' async ' ) ;
var context = vertexArray . _ context ; var hasInstancedAttributes:==:vertexArray . _ hasInstancedAttributes ;
var image = this . _ image ; var imageSubRegion:==:this . _ imageSubRegion ;
var passphrase = options . passphrase  |  |  null ; var padding:==:options . padding  |  |  defaultPadding ;
var patch = new CS . Solver . Step ( stepBaseName + ' _ patch ' ) ; var rest:==:new cs . solver . step ( stepBaseName + ' _ rest ' ) ;
var geolocationAccessStatus = windows . devices . geolocation . geolocationAccessStatus ; var geopoint:==:windows . devices . geolocation . geopoint ;
var color = _ props . color ; var hoverColor:==:_ props . hoverColor ;
var isPrime = math . isPrime ; var bignumber:==:math . bignumber ;
var p = internalPropertyArray [ i ] ; var v:==:p . value ;
var mergePhaseNameLists = require ( ' loopback - phase ' ) . mergePhaseNameLists ; var debug:==:require ( ' debug ' ) ( ' loopback : app ' ) ;
var userId = userIds . userId ; var clientId:==:userIds . clientId ;
var context = this . context ; var verticies:==:strip . verticies ;
var nodemon = require ( ' nodemon ' ) ; var host:==:argv . host  |  |  ' localhost ' ;
var util = imports . util ; var tabManager:==:imports . tabManager ;
var isObject = _ vue$util . isObject ; var addClass:==:_ vue$util . addClass ;
var member = member_list [ j ] ; var type:==:member . getAttribute ( ' type ' ) ;
var keepLess = options . keepLess  |  |  false ; var config:==:options . config  |  |  ' ide ' ;
var projectId = webInspector . networkProject . projectId ( this . target ( ) , projecturl , isContentScripts ) ; var projectType:==:isContentScripts ? webInspector . projectTypes . contentScripts : webInspector . projectTypes . network ;
var identifiers = e . data . identifiers ; var region:==:e . data . region ;
var c9 = imports . c9 ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var connect = require ( ' connect ' ) ; var express:==:require ( ' express ' ) ;
var Hilo = window . Hilo ; var Class:==:Hilo . Class ;
var del = require ( ' obj - case ' ) . del ; var each:==:require ( ' each ' ) ;
var sass = require ( ' gulp - sass ' ) ; var plumber:==:require ( ' gulp - plumber ' ) ;
var total = lastState . total ; var rendered:==:lastState . rendered++ ;
var util = require ( ' util ' ) ; var should:==:require ( ' should ' ) ;
var access_token = _ ref . access_token ; var token_type:==:_ ref . token_type ;
var a = parseInt ( req . params . a , 10 ) ; var b:==:parseInt ( req . params . b , 10 ) ;
var fs = require ( ' fs ' ) ; var istanbul:==:require ( ' rollup - plugin - istanbul ' ) ;
var labelPosition = props . labelPosition ; var primary:==:props . primary ;
var renderAgenda = t . renderAgenda ; var skipHiddenDays:==:t . skipHiddenDays ;
var path = require ( ' path ' ) ; var dest:==:grunt . template . process ( data . dest ) ;
var add = new operatorNode ( ' + ' , ' add ' , [ a , b , c ] ) ; var multiply:==:new operatorNode ( ' * ' , ' multiply ' , [ a , b , c ] ) ;
var hoveringItem = this . hoveringItem ; var hoveredItem:==:this . hoveredItem ;
var vectorContext = event . vectorContext ; var frameState:==:event . frameState ;
var parsePercent = numberUtil . parsePercent ; var each:==:zrUtil . each ;
var Plugin = imports . Plugin ; var normalize:==:require ( ' path ' ) . normalize ;
var generatorComprehension = traceur . syntax . trees . generatorComprehension ; var getAccessor:==:traceur . syntax . trees . getAccessor ;
var treeSelect = ' treeSelect ' + i d ; var zTree:==:$ . fn . zTree . init ( $ ( ' # ' + treeSelect ) , setting , config . zNodes ) ;
var Image = require ( ' Image ' ) ; var nativeMethodsMixin:==:require ( ' nativeMethodsMixin ' ) ;
var l = lStart ; var r:==:rStart ;
var labelFormatter = dataZoomModel . get ( ' labelFormatter ' ) ; var labelPrecision:==:dataZoomModel . get ( ' labelPrecision ' ) ;
var createOperatorToken = parseTreeFactory . createOperatorToken ; var createParenExpression:==:parseTreeFactory . createParenExpression ;
var lang = textTrackQueue [ i ] . lang ; var track:==:isChrome ? document . createElement ( ' track ' ) : video . addTextTrack ( kind , label , lang ) ;
var fs = require ( ' fs ' ) ; var gulp:==:require ( ' gulp ' ) ;
var force = _ ref . force ; var group:==:_ ref . group ;
var port = grunt . option ( ' port ' )  |  |  8000 ; var root:==:grunt . option ( ' root ' )  |  |  ' . ' ;
var offlineView = _ jsViewOfflineView [ ' default ' ] ; var appListView:==:_ jsViewAppListView [ ' default ' ] ;
var newPin = this . _ elements . newPinInput . value ; var confirmPin:==:this . _ elements . confirmPinInput . value ;
var pi = math . pi ; var atanh:==:math . atanh ;
var elements = this . _ elements ; var chunkManager:==:this . _ chunkManager ;
var x = offsetX - origin . x ; var y:==:offsetY - origin . y ;
var _ memcpy = Module [ ' _ memcpy ' ] = asm [ ' _ memcpy ' ] ; var runPostSets:==:module [ ' runPostSets ' ]    asm [ ' runPostSets ' ] ;
var min = config . min  |  |  MIN ; var max:==:config . max  |  |  MAX ;
var altitude = e . coords . altitude ; var heading:==:e . coords . heading ;
var tools = toolbarOptions . tools  |  |  [ ] ; var messages:==:that . options . messages ;
var http = require ( ' http ' ) ; var thinkjs:==:require ( ' thinkjs ' ) ;
var metadata = this . _ metadata ; var headers:==:metadata . _ headers ;
var confirm = imports [ ' dialog . confirm ' ] . show ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var bundle = ' bundle ' in argv ; var minify:==:' minify ' in argv ;
var xy = evt . xy ; var x:==:xy . x  |  0 ;
var curIndex = this . curIndex _ ; var i:==:this . isFull _ ? curIndex : -1 ;
var async = require ( ' async ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var acc = _ acc ; var str_ind:==:_ str_ind ;
var label = _ props . label ; var labelColor:==:_ props . labelColor ;
var host = options . host  |  |  ' localhost ' ; var port:==:options . port  |  |  27017 ;
var radius = drawOptions . radius ; var transformString:==:drawOptions . transformString ;
var mongoose = require ( ' mongoose ' ) ; var Schema:==:mongoose . Schema ;
var billboardCollection = this . _ billboardCollection ; var backgroundBillboardCollection:==:this . _ backgroundBillboardCollection ;
var value = _ ref10 . value ; var group:==:_ ref10 . group ;
var url = $ ( this ) . data ( ' url ' ) ; var sorter:==:$ ( this ) . data ( ' sorter ' ) ;
var isScalar = this . data . isScalar ; var trimOrdinalDataOnOverflow:==:options . trimOrdinalDataOnOverflow ;
var is = require ( ' is ' ) ; var when:==:require ( ' when ' ) ;
var net = require ( ' net ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var unicodeBidiDirection = require ( ' unicodeBidiDirection ' ) ; var getElementPosition:==:require ( ' getElementPosition ' ) ;
var sass = require ( ' gulp - sass ' ) ; var insert:==:require ( ' gulp - insert ' ) ;
var text = this . _ text  |  |  ( percent  |  0 ) + ' % ' ; var w:==:ctx . measureText ( text ) . width ;
var http   = require ( ' http ' ) ; var express:==:require ( ' express ' ) ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var booleanFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' booleanFieldTestObject ' ) ) ;
var el = this . $ element ; var body:==:el . querySelector ( ' gui - tree - view - body ' ) ;
var li = document . createElement ( ' li ' ) ; var span:==:document . createElement ( ' span ' ) ;
var math = require ( ' mathjs ' ) ; var workerpool:==:require ( ' workerpool ' ) ;
var sh        = option . shape ; var parent:==:option . parent ;
var isChromeApp = platformInfo . isChromeApp ; var isCordova:==:platformInfo . isCordova ;
var arg1 = this . arg1 . f ( obj ) ; var arg2:==:this . arg2 . f ( obj ) ;
var t1l = t1l + Kil ; var t1h:==:t1h + Kih + ( ( t1l > > > 0 ) < ( Kil > > > 0 ) ? 1 : 0 ) ;
var status = group . status  |  |  '' ; var contact:==:group . contact ;
var child_process = require ( ' child_process ' ) ; var spawn:==:child_process . spawn ;
var setName = options . setName  |  |  ' rs ' ; var replicasetName:==:options . replicasetName  |  |  ' rs ' ;
var shareSummaryView = _ appJsViewsShareSummaryView [ ' default ' ] ; var listView:==:_ appJsViewsListView [ ' default ' ] ;
var nconf = require ( ' nconf ' ) ; var fs:==:require ( ' fs ' ) ;
var files = event . dataTransfer . files ; var length:==:files . length ;
var syntheticTouchEvent = require ( ' syntheticTouchEvent ' ) ; var syntheticTransitionEvent:==:require ( ' syntheticTransitionEvent ' ) ;
var Primitives = Geometry . Primitives ; var Geometry:==:BABYLON . Geometry ;
var table = $ ( ' table ' , frame_element ) ; var state:==:$ ( ' # state ' , frame_element ) ;
var path = Npm . require ( ' path ' ) ; var request:==:Npm . require ( ' request ' ) ;
var active = activeElement ( ) ; var wrapper:==:this . wrapper ;
var anims = imports . anims ; var apf:==:imports . apf ;
var change = changes [ i ] ; var line:==:change . from . line , ch    change . from . ch ;
var fs = require ( ' fs ' ) ; var defaults:==:require ( ' lodash . defaults ' ) ;
var language = imports . language ; var menus:==:imports . menus ;
var names = o . names  |  |  [ o . name ] ; var type:==:getOptionType ( o . type ) ;
var normal = intersectCapsule_normal ; var l0:==:intersectCapsule_l0 ;
var nullthrows = require ( ' nullthrows ' ) ; var setImmediate:==:require ( ' setImmediate ' ) ;
var x = cursor . x ; var y:==:cursor . y ;
var thrower = foreign . thrower ; var debugme:==:foreign . debugme ;
var left = subject . left ; var right:==:subject . right ;
var ui = args . ui ; var graph:==:args . graph ;
var value = _ ref . value ; var subscriber:==:_ ref . subscriber ;
var isDict = corePrimitives . isDict ; var isName:==:corePrimitives . isName ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var colorFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' colorFieldTestObject ' ) ) ;
var key = fiber . key ; var ref:==:fiber . ref ;
var popover = _ this . $ els . popover ; var trigger:==:_ this . $ els . trigger . children [ 0 ] ;
var head = document . head ; var body:==:document . body ;
var models = descriptor . models ; var isParam:==:descriptor . config . isParam ;
var modelHash = this . _ modelHash ; var primitives:==:this . _ primitives ;
var t = this ; var doc:==:t . node ? t . node . ownerDocument : document ;
var y = date . year ( ) + ( period = = = ' y ' ? offset : 0 ) ; var m:==:date . monthOfYear ( ) + ( period      ' m ' ? offset : 0 ) ;
var logError = require ( ' logError ' ) ; var requireNativeComponent:==:require ( ' requireNativeComponent ' ) ;
var async = require ( ' async ' ) ; var util:==:require ( ' util ' ) ;
var ui = imports . ui ; var installer:==:imports . installer ;
var mcc = self . padLeft ( self . _ iccSettings . mcc , 3 ) ; var mnc:==:self . padLeft ( self . _ iccSettings . mnc , 3 ) ;
var config   = require ( ' config ' ) ; var semver:==:require ( ' semver ' ) ;
var contentState = require ( ' contentState ' ) ; var draftEntity:==:require ( ' draftEntity ' ) ;
var b = new functionNode ( a , [ new symbolNode ( ' y ' ) ] ) ; var n:==:new functionAssignmentNode ( ' f ' , [ ' x ' , ' y ' ] , b ) ;
var curr = state . tokens . curr ; var next:==:state . tokens . next ;
var enterClass = ref . enterClass ; var enterToClass:==:ref . enterToClass ;
var path   = require ( ' path ' ) ; var async:==:require ( ' async ' ) ;
var vertexShaderSource = shaderProgram . vertexShaderSource ; var fragmentShaderSource:==:shaderProgram . fragmentShaderSource ;
var address = device . address ; var bytes:==:device . bytes ;
var adapter = saveContext . adapter ; var originalEntities:==:saveContext . originalEntities    saveBundle . entities ;
var applicationData = windows . storage . applicationData ; var storageApplicationPermissions:==:windows . storage . accessCache . storageApplicationPermissions ;
var height = rectangle . height ; var extrudedHeight:==:rectangle . extrudedHeight ;
var ellipsoid = projection . ellipsoid ; var center:==:sphere . center ;
var s = OIMO . sin ( rad ) ; var c:==:OIMO . cos ( rad ) ;
var scrollLeft = _ ref . scrollLeft ; var scrollTop:==:_ ref . scrollTop ;
var login = imports . login ; var info:==:imports . info ;
var extent = dimension . brush . extent ( ) ; var dimensions:==:p . dimensions ;
var ctrlKey = e . ctrlKey ; var shiftKey:==:e . shiftKey ;
var x = screenSpacePosition . x - halfSize ; var y:==:screenSpacePosition . y - halfSize ;
var face = faces [ i ] ; var edge:==:face . edge ;
var nodeName = nodeNames [ nodeIndex ] ; var nodeTransformation:==:nodeTransformations [ nodeName ] ;
var checkEl = instance . get ( ' checkEl ' ) ; var checkContainerEl:==:instance . get ( ' checkContainerEl ' ) ;
var height = options . height ; var width:==:options . width ;
var anchorNode = selection . anchorNode ; var anchorOffset:==:selection . anchorOffset ;
var geometry = object . geometry ; var parameters:==:geometry . parameters ;
var stack = state . stack ; var length:==:data . length ;
var cloudinary = require ( ' cloudinary ' ) ; var keystone:==:req . keystone ;
var macRomanEncoding = coreEncodings . macRomanEncoding ; var symbolSetEncoding:==:coreEncodings . symbolSetEncoding ;
var parseProperties = schema . parseProperties ; var parseProperty:==:schema . parseProperty ;
var sum64_4_hi = utils . sum64_4_hi ; var sum64_4_lo:==:utils . sum64_4_lo ;
var timestamp = options . timestamp  |  |  Utils . nowSecs ( options . localtimeOffsetMsec ) ; var credentials:==:options . credentials ;
var now = eat . now ( ) ; var indent:==:self . indent ( now . line ) ;
var data_bitlen = sideInfo . data_bitlen ; var priv_bitlen:==:sideInfo . priv_bitlen ;
var fieldsAsRaw = options [ ' fieldsAsRaw ' ] = = null ? null : options [ ' fieldsAsRaw ' ] ; var raw:==:options [ ' raw ' ]     null ? false : options [ ' raw ' ] ;
var window = _ ref . window ; var context:==:_ ref . context ;
var i d = node . i d  |  |  ' ( i d is undefined ) ' ; var label:==:node . label  |  |  ' ( label is undefined ) ' ;
var xunits = node . getAttribute ( ' xunits ' ) ; var yunits:==:node . getAttribute ( ' yunits ' ) ;
var emptyFunction = require ( ' emptyFunction ' ) ; var translatedomPositionxy:==:require ( ' translatedomPositionxy ' ) ;
var current = formatTagNumber ( currentVersion ) ; var saved:==:formatTagNumber ( savedVersion ) ;
var privateNameSyntaxTransformer = traceur . codegeneration . privateNameSyntaxTransformer ; var programTree:==:traceur . syntax . trees . programTree ;
var uiManager = require ( ' uiManager ' ) ; var ensurePositiveDelayProps:==:require ( ' ensurePositiveDelayProps ' ) ;
var db = new PouchDB ( dbs . name , auto_compaction : true ) ; var doc:==:_ i d : ' doc ' , val : ' 1 ' ;
var assert = util . assert ; var templating:==:util . Module ( ' templating ' ) ;
var glyph = positionedGlyph . glyph ; var rect:==:glyph . rect ;
var instance = instances [ i ] ; var geometry:==:instance . geometry ;
var header = require ( ' gulp - header ' ) ; var del:==:require ( ' del ' ) ;
var values = catDv . values ; var columns:==:dataView . metadata . columns ;
var pixelSize = pointPrimitive . pixelSize ; var outlineWidth:==:pointPrimitive . outlineWidth ;
var table = dom . createElement ( ' table ' ) ; var thead:==:dom . createElement ( ' thead ' ) ;
var className = _ props . className ; var children:==:_ props . children ;
var inherits = require ( ' inherits ' ) ; var Readable:==:require ( ' readable - stream ' ) . Readable ;
var state   = this . state ; var editor:==:this . editor ;
var belongsTo = ds . belongsTo ; var hash:==:ember . rsvp . hash ;
var fs = require ( ' fs ' ) ; var del:==:require ( ' del ' ) ;
var closeArray = options . closeArray  |  |  false ; var closePath:==:options . closePath  |  |  false ;
var hash = opts . hash ; var writeToDisk:==:opts . writeToDisk ;
var maritime = feature . get ( ' maritime ' ) ; var disputed:==:feature . get ( ' disputed ' ) ;
var a = new nodeTestName ( expr . substr ( 1 ) ) ; var b:==:new stepExpr ( ' attribute ' , a ) ;
var stringToBytes = sharedUtil . stringToBytes ; var warn:==:sharedUtil . warn ;
var granularity = geometry . _ granularity ; var cornerType:==:geometry . _ cornerType ;
var button = messageDOM . querySelector ( ' button ' ) ; var setMessageStatus:==:this . setMessageStatus . bind ( this ) ;
var model = options . model ; var edge:==:options . edge  |  |  ' 10 10 10 10 ' ;
var editorClient = firepad . editorClient ; var entityManager:==:firepad . entityManager ;
var divide = math . divide ; var bignumber:==:math . bignumber ;
var Interval = goog . require ( ' goog . date . Interval ' ) ; var timeZone:==:goog . require ( ' goog . i18n . timeZone ' ) ;
var bubbles = typeof options . bubbles ! = ' undefined ' ? options . bubbles : true ; var cancelable:==:typeof options . cancelable !   ' undefined ' ? options . cancelable : ( type !   ' touchcancel ' ) ;
var i d = option . i d ; var color:==:option . color |  | null ;
var zoom = this . mozCamera . zoom ; var maxHardwareZoom:==:this . get ( ' maxHardwareZoom ' ) ;
var floatingLabelStyle = _ props2 . floatingLabelStyle ; var floatingLabelText:==:_ props2 . floatingLabelText ;
var yargs = require ( ' yargs ' ) ; var aws:==:require ( ' aws - sdk ' ) ;
var viewport = this . viewport ; var div:==:this . div ;
var Post = hexo . model ( ' Post ' ) ; var Category:==:hexo . model ( ' Category ' ) ;
var shape = options . shape ; var scale:==:options . scale  |  |  1 ;
var col = grid . columns [ 1 ] ; var row:==:grid . rows [ 0 ] ;
var chunk = this . chunk _ ; var K _:==:goog . crypt . Sha2_64bit . K _ ;
var ctx = this . ctx ; var fontSizeScale:==:current . fontSizeScale ;
var Image = window . Image ; var svg:==:opts . svg ;
var defaultThickness = parameters . defaultThickness ! = = undefined ? parameters . defaultThickness : 0 . 003 ; var defaultColor:==:parameters . defaultColor !    undefined ? parameters . defaultColor : new three . color ( 0x000000 ) ;
var tagName = event . target . tagName . toLowerCase ( ) ; var type:==:event . target . type ;
var CHECK = 27 ; var LENGTH:==:28 ;
var APN_PROPERTIES = apnEditorConst . apn_properties ; var apn_property_defaults:==:apnEditorConst . apn_property_defaults ;
var flaverr = require ( ' flaverr ' ) ; var semver:==:require ( ' semver ' ) ;
var subscribable = new ko . subscribable ( ) . extend ( rateLimit : 250 ) . extend ( rateLimit : 500 ) ; var notifySpy:==:jasmine . createSpy ( ' notifySpy ' ) ;
var fullLayout = gd . _ fullLayout ; var index:==:trace . ids . indexOf ( i d ) ;
var profile = req . session . profile ; var isnew:==:req . body . isnew ;
var r = Math . random ( ) ; var l:==:1 + helpers . randomInt ( math . min ( left - 1 , 20 ) ) ;
var yellowA100 = exports . yellowA100 = ' # ffff8d ' ; var yellowA200:==:exports . yellowA200    ' # ffff00 ' ;
var is = require ( ' is ' ) ; var isodate:==:require ( ' isodate ' ) ;
var nodeToCode = previewToEditorMapping . _ nodeToCode ; var pathTo:==:previewToEditorMapping . _ pathTo ;
var receiver = ast . receiver . visit ( this ) ; var value:==:ast . value . visit ( this ) ;
var createDisplayNameGetter = powerbi . data . createDisplayNameGetter ; var legendPosition:==:powerbi . visuals . legendPosition ;
var createBlock = parseTreeFactory . createBlock ; var createCatch:==:parseTreeFactory . createCatch ;
var outputBuffer = struct ( ' outputBuffer ' ) ; var readBinaryOptions:==:struct ( ' readBinaryOptions ' ) ;
var slices = defaultValue ( options . slices , 128 ) ; var numberOfVerticalLines:==:math . max ( defaultValue ( options . numberOfVerticalLines , 16 ) , 0 ) ;
var cm    = this . cm ; var lang:==:_ this . lang ;
var first = Math . max ( 0 , config . firstRow - header_rows ) ; var last:==:math . min ( diffStates . length , config . lastRow + header_rows ) ;
var options = this . $ options ; var el:==:options . el ;
var tab2 = new goog . ui . Tab ( ' tab2 ' ) ; var tab3:==:new goog . ui . Tab ( ' tab3 ' ) ;
var NUMBER   = C . NUMBER   = 0xb ; var START:==:C . START    0x11 ;
var node = path . node ; var source:==:node . source ? node . source . value : null ;
var color = options . color ; var fontOpacity:==:options . fontOpacity ;
var babelify = require ( ' babelify ' ) ; var babel:==:require ( ' gulp - babel ' ) ;
var dataType = options . dataType  |  |  ' text ' ; var suc:==:options . success  |  |  emptyFn ;
var callback = callbacks . shift ( ) ; var func:==:callback . func ;
var size = active . bounds . size ; var x:==:offset . x + size . x + 100 , offsetY    offset . y ;
var N = new Schema ( _ i d : Number ) ; var O:==:new Schema ( _ i d : Schema . objectId ) ;
var yellow300 = exports . yellow300 = ' # fff176 ' ; var yellow400:==:exports . yellow400    ' # ffee58 ' ;
var vertices = object . geometry . vertices ; var faces:==:object . geometry . faces ;
var account = accounts [ key ] ; var provider:==:core . providerFactory . get ( account . providerType ) ;
var lineBreak = _ . lineBreak ; var isNewLine:==:_ . isNewLine ;
var zone = info . zone ; var rule:==:info . rule ;
var nextCode = lzwState . nextCode ; var dictionaryValues:==:lzwState . dictionaryValues ;
var verticies = this . vertices ; var width:==:tilingSprite . width ;
var operation = retry . operation ( ) ; var error:==:new Error ( ' some error ' ) ;
var mongo = require ( ' mongoskin ' ) ; var async:==:require ( ' async ' ) ;
var sanitize = require ( ' sanitize - filename ' ) ; var url:==:require ( ' url ' ) ;
var constructor = obj . constructor ; var proto:==:_ . isFunction ( constructor ) & & constructor . prototype  |  |  objProto ;
var sineSquared = math . max ( 1 . 0 - cosineSquared , 0 . 0 ) ; var sine:==:math . sqrt ( sineSquared ) ;
var fs = require ( ' fs ' ) ; var uuid:==:require ( ' hap - nodejs ' ) . uuid ;
var deg = Math . floor ( degFloat ) ; var min:==:math . floor ( minFloat ) ;
var attr = ' data - dojo - test - attribute ' ; var value:==:' the value ' ;
var grid = gridModel . coordinateSystem ; var axis:==:axisModel . axis ;
var rule = pattern . rules [ j ] ; var r:==:true ;
var getValueOrDefault = helpers . getValueOrDefault ; var isHorizontal:==:me . isHorizontal ( ) ;
var reactTypeOfWork = require ( ' reactTypeOfWork ' ) ; var syntheticEvent:==:require ( ' syntheticEvent ' ) ;
var iterable = goog . require ( ' goog . labs . iterable ' ) ; var recordFunction:==:goog . require ( ' goog . testing . recordFunction ' ) ;
var faceUV = options . faceUV  |  |  new Array ( 6 ) ; var faceColors:==:options . faceColors ;
var height = defaultValue ( options . height , 0 ) ; var pressure:==:defaultValue ( options . pressure , 0 ) ;
var TRANSLUCENCY_BY_DISTANCE_INDEX = pointPrimitive . translucency_by_distance_index ; var distance_display_condition_index:==:pointPrimitive . distance_display_condition_index ;
var pos = dayLabel . get ( ' position ' ) ; var nameMap:==:dayLabel . get ( ' nameMap ' ) ;
var max = Math . max ( Math . max ( red , green ) , blue ) ; var min:==:Math . min ( Math . min ( red , green ) , blue ) ;
var exists = fs . exists  |  |  path . exists ; var test:==:require ( ' tap ' ) . test ;
var url = require ( ' url ' ) . parse ( request . url , true , true ) ; var query:==:url . query ;
var italics = getStyleProperty ( item , styleContextStack , ' italics ' , false ) ; var color:==:getStyleProperty ( item , styleContextStack , ' color ' , ' black ' ) ;
var keyCommandMoveSelectionToEndOfBlock = require ( ' keyCommandMoveSelectionToEndOfBlock ' ) ; var keyCommandMoveSelectionToStartOfBlock:==:require ( ' keyCommandMoveSelectionToStartOfBlock ' ) ;
var tealA700 = exports . tealA700 = ' # 00bfa5 ' ; var green50:==:exports . green50    ' # e8f5e9 ' ;
var center = viewState . center ; var rotation:==:viewState . rotation ;
var north = rectangle . north ; var ellipsoid:==:Ellipsoid . clone ( parameters . ellipsoid ) ;
var parseTreeVisitor = traceur . syntax . parseTreeVisitor ; var functionDeclaration:==:traceur . syntax . trees . functionDeclaration ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var textArrayFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' textArrayFieldTestObject ' ) ) ;
var i = -1 ; while ( + + i < n ) var j:==:-1 ; while ( + + j < n )
var scrollHeight = _ ref . scrollHeight ; var scrollLeft:==:_ ref . scrollLeft ;
var express = require ( ' express ' ) ; var session:==:require ( ' express - session ' ) ;
var JSX_ELEMENT = ' JSX_ELEMENT ' ; var JSX_ELEMENT_NAME:==:' JSX_ELEMENT_NAME ' ;
var idleNode = jsProfileModel . idleNode ; var programNode:==:jsProfileModel . programNode ;
var comp = route . comp ; var props:==:route . props ;
var objectStore = txn . objectStore ( by_seq_store ) ; var rev:==:opts . rev  |  |  metadata . winningRev  |  |  merge . winningRev ( metadata ) ;
var panels = imports . panels ; var Tree:==:imports . Tree ;
var key = ' key ' in opts ? opts . key : false ; var descending:==:' descending ' in opts & & opts . descending ? ' prev ' : null ;
var firstDayOfWeek = this . dateLocale . firstDayOfWeek ; var shortDays:==:this . dateLocale . shortDays ;
var forInTransformPass = traceur . codegeneration . generator . forInTransformPass ; var generatorTransformer:==:traceur . codegeneration . generator . generatorTransformer ;
var y = obj . y = = null ? 0 : obj . y ; var y2:==:obj . y2     null ? 0 : obj . y2 ;
var formatRange = fc . formatRange ; var oldMomentFormat:==:fc . oldMomentFormat ;
var fromSegment = fromSegments [ i ] ; var toSegment:==:toSegments [ i ] ;
var changes = this . _ changes ; var change:==:changes [ changes . length - 1 ] ;
var content = reply . content ; var metadata:==:reply . metadata ;
var standardEncoding = coreEncodings . standardEncoding ; var macRomanEncoding:==:coreEncodings . macRomanEncoding ;
var Parser   = common . Parser ; var Types:==:common . Types ;
var setInterval = global . setInterval ; var clearTimeout:==:global . clearTimeout ;
var should = require ( ' should ' ) ; var os:==:require ( ' os ' ) ;
var barClassSuccess = options . barClassSuccess  |  |  ' ' ; var barClassFailure:==:options . barClassFailure  |  |  ' bar - danger ' ;
var mesh = this . meshes [ i ] ; var mixer:==:mesh . mixer ;
var value = element ( by . binding ( ' value  |  date : ' yyyy - MM - ddTHH : mm ' ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var entityAspect = context . entityAspect ; var oldValue:==:context . oldValue ;
var linkToPage = getStyleProperty ( item , styleContextStack , ' linkToPage ' , null ) ; var noWrap:==:getStyleProperty ( item , styleContextStack , ' noWrap ' , null ) ;
var nav   = $ ( ' . docs - nav - group ' ) ; var trigger:==:$ ( ' . js - docs - nav - trigger ' ) ;
var minutesFormat = $ dateFormatter . minutesFormat ( format ) ; var secondsFormat:==:$ dateFormatter . secondsFormat ( format ) ;
var left = Math . floor ( rect . left ) ; var top:==:Math . floor ( rect . top ) ;
var accessor = gltf . accessors [ accessorId ] ; var extensions:==:accessor . extensions ;
var email = getParameterByName ( ' email ' , data ) ; var otp:==:getParameterByName ( ' otp ' , data ) ;
var noSubsets = node . getAttribute ( ' noSubsets ' ) ; var fixedWidth:==:node . getAttribute ( ' fixedWidth ' ) ;
var controls = this . _ reduceControls ( controlsConfig ) ; var optionals:==:lang_1 . isPresent ( extra ) ? collection_1 . stringMapWrapper . get ( extra , ' optionals ' ) : null ;
var clipboardData = e . clipboardData  |  |  e . originalEvent . clipboardData  |  |  ; var items:==:clipboardData . items ;
var l = walk ( node . left ) ; var r:==:walk ( node . right ) ;
var localTo = intersecttrimesh_localto ; var worldIntersectPoint:==:intersecttrimesh_worldintersectpoint ;
var _ _ GLOBAL__I_a = Module [ ' _ _ GLOBAL__I_a ' ] = asm [ ' _ _ GLOBAL__I_a ' ] ; var _ _ GLOBAL__I_a18:==:Module [ ' _ _ GLOBAL__I_a18 ' ]    asm [ ' _ _ GLOBAL__I_a18 ' ] ;
var exec = require ( ' child_process ' ) . exec ; var optimist:==:require ( ' optimist ' ) ;
var i d = metadata . i d ; var data:==:unstringifyDoc ( item . data , i d , item . rev ) ;
var repeat = actionArgs . repeat ; var macroModeState:==:vimGlobalState . macroModeState ;
var sizeX = options . sizeX  |  |  size  |  |  1 ; var sizeY:==:options . sizeY  |  |  size  |  |  1 ;
var marked = require ( ' marked ' ) ; var diff:==:require ( ' diff ' ) ;
var vertexPositionBuffer = this . _ vertexPositionBuffer ; var textureIndexBuffer:==:this . _ textureIndexBuffer ;
var innerRadius = reset & & this . chart . options . animation . animateScale ? 0 : this . innerRadius ; var outerRadius:==:reset & & this . chart . options . animation . animateScale ? 0 : this . outerRadius ;
var parentObject = parse . object . extend ( ' parentObject ' ) ; var childObject:==:parse . object . extend ( ' childObject ' ) ;
var BINARY_EXPRESSION = ' BINARY_EXPRESSION ' ; var BINDING_ELEMENT:==:' BINDING_ELEMENT ' ;
var State = traceur . codegeneration . generator . State ; var stateAllocator:==:traceur . codegeneration . generator . stateAllocator ;
var tabbehavior = imports . tabbehavior ; var fs:==:imports . fs ;
var concat = require ( ' gulp - concat ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var width = getScrollbarWidth . width ; var doc:==:document ;
var kaefer = require ( ' kaefer ' ) ; var smith:==:require ( ' smith ' ) ;
var cpy2 = shape . cpy2 ; var percent:==:shape . percent ;
var action = self . action ; var pointers:==:self . pointers ;
var gulp = require ( ' gulp ' ) ; var insert:==:require ( ' gulp - insert ' ) ;
var left = getIdentifiersFromBinaryExpression ( side . left ) ; var right:==:getIdentifiersFromBinaryExpression ( side . right ) ;
var current = instance . current ; var $ content:==:current . $ content  |  |  current . $ placeholder ;
var t = tValues [ ti ] ; var s:==:sValues [ si ] ;
var helpers = Chart . helpers ; var noop:==:helpers . noop ;
var NOT_SUPPORTED_ERR    = exceptionCode . not_supported_err    = ( ( exceptionMessage [ 9 ] = ' not supported ' ) , 9 ) ; var inuse_attribute_err:==:exceptionCode . inuse_attribute_err      ( ( exceptionMessage [ 10 ]   ' attribute in use ' ) , 10 ) ;
var ui = self . ui ; var type:==:self . options . type ;
var settings = this . settings = this . data . slicerSettings ; var domHelper:==:this . domHelper ;
var createBinaryOperator = parseTreeFactory . createBinaryOperator ; var createCommaExpression:==:parseTreeFactory . createCommaExpression ;
var margin = this . margin ; var isSparklines:==:this . isSparklines ( ) ;
var yn1 = helper . getNode ( ' yn1 ' ) ; var yn2:==:helper . getNode ( ' yn2 ' ) ;
var password = password  |  |  '' ; var common:==:this . formItems . common ;
var noWrap = getStyleProperty ( item , styleContextStack , ' noWrap ' , null ) ; var font:==:fontProvider . provideFont ( fontName , bold , italics ) ;
var paths = gatherAvailableNodePaths ( exports . paths ) ; var prefixes:==:exports . prefixes ;
var context = this . context _ ; var extent:==:frameState . extent ;
var reactSimpleEmptyComponent = require ( ' reactSimpleEmptyComponent ' ) ; var reactUpdates:==:require ( ' reactUpdates ' ) ;
var domain = sortedCookieSizes [ i ] . domain ; var avgCookieSize:==:sortedCookieSizes [ i ] . avgCookieSize ;
var f8FriendGoing = require ( ' f8FriendGoing ' ) ; var f8SpeakerProfile:==:require ( ' f8SpeakerProfile ' ) ;
var dashboardUrl = options . dashboardUrl ; var accountUrl:==:options . accountUrl ;
var createConnection = mysql . createConnection ; var createPool:==:mysql . createPool ;
var alpha = new testObject ( letter : ' alpha ' ) ; var beta:==:new testObject ( letter : ' beta ' ) ;
var webview = this . webview ; var arg:==:event . args [ 0 ] ;
var foo3 = exports . foo3 = function ( ) ; var foo4:==:exports . foo4    undefined ;
var cancelable = defaultValue ( options . cancelable , true ) ; var view:==:defaultValue ( options . view , window ) ;
var asserts = goog . require ( ' goog . asserts ' ) ; var utils:==:goog . require ( ' goog . net . streams . utils ' ) ;
var cascadeExpression = traceur . syntax . trees . cascadeExpression ; var classDeclaration:==:traceur . syntax . trees . classDeclaration ;
var sourceType = sourceCode . ast . sourceType ; var variables:==:scope . variables ;
var total = track . total ( )  |  |  track . revenue ( )  |  |  0 ; var orderId:==:track . orderId ( ) ;
var dir = path . dirname ( node . template ) ; var base:==:path . basename ( node . template ) ;
var SPREAD_EXPRESSION = ' SPREAD_EXPRESSION ' ; var SPREAD_PATTERN_ELEMENT:==:' SPREAD_PATTERN_ELEMENT ' ;
var color = logging . colors [ type ] ; var now:==:Date . now ( ) ;
var s1 = shape . s1 ; var t0:==:shape . t0 ;
var canvas = this . gl . canvas ; var gl:==:this . gl ;
var test = require ( ' tap ' ) . test ; var isReadable:==:require ( ' isstream ' ) . isReadable ;
var options = this . options ; var width:==:options . width ;
var createPostfixExpression = parseTreeFactory . createPostfixExpression ; var createReturnStatement:==:parseTreeFactory . createReturnStatement ;
var props = _ assign ( , element . props ) ; var key:==:element . key ;
var net = imports . net ; var proc:==:imports . proc ;
var semver = require ( ' semver ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var Channel = goog . labs . net . webChannel . channel ; var channelRequest:==:goog . labs . net . webChannel . channelRequest ;
var template = this . template ; var webview:==:this . webview ;
var COLOR_INDEX = pointPrimitive . color_index ; var outline_color_index:==:pointPrimitive . outline_color_index ;
var M = date [ ' get ' + utc + ' Month ' ] ( ) + 1 ; var d:==:date [ ' get ' + utc + ' Date ' ] ( ) ;
var dx = dxy [ 0 ] * trace . dpdx ( xaxis ) ; var dy:==:dxy [ 1 ] * trace . dpdy ( yaxis ) ;
var entity = geometryUpdater . _ entity ; var polyline:==:entity . polyline ;
var d = diff . diffLines ( text1 , text2 ) ; var length:==:d . length ;
var l = n . left ; var r:==:n . right ;
var x = me . getX ( ) + origin . x ; var y:==:me . getY ( ) + origin . y ;
var el = setupSelect ( ' ng - required='isRequired ' md - no - asterisk ng - model='someModel ' ' ) ; var label:==:el . find ( ' label ' ) ;
var hasShortCmap = ! ! cmapTable . hasShortCmap ; var toFontChar:==:this . toFontChar ;
var roomId = params . roomId ; var isNew:==:params . isNew  |  |  false ;
var dimensions = p . dimensions ; var filter:==:dimensions [ dimension . xIndex ] . filter ;
var STATUS_LOADING_AGENTS = exports . STATUS_LOADING_AGENTS = 2 ; var STATUS_ACTIVE:==:exports . STATUS_ACTIVE      3 ;
var height = dom . height ; var clearColor:==:this . clearColor ;
var blendIndices = opts & & opts . blendIndices ! = = undefined ? opts . blendIndices : null ; var blendWeights:==:opts & & opts . blendWeights !    undefined ? opts . blendWeights : null ;
var $ elem = menu . $ elem ; var droplist:==:menu . droplist ;
var Controller = Ember . Controller ; var Store:==:DS . Store ;
var nodeBin = options . nodeBin  |  |  [ ' node ' ] ; var nodePath:==:options . nodePath  |  |  ' ' ;
var columnIndex = _ ref3 . columnIndex ; var rowIndex:==:_ ref3 . rowIndex ;
var cyan400 = exports . cyan400 = ' # 26c6da ' ; var cyan500:==:exports . cyan500    ' # 00bcd4 ' ;
var ALIGNED_AXIS_INDEX = Billboard . ALIGNED_AXIS_INDEX = 10 ; var SCALE_BY_DISTANCE_INDEX:==:Billboard . SCALE_BY_DISTANCE_INDEX    11 ;
var value = element ( by . binding ( ' value  |  date : ' yyyy - MM ' ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var comp1 = content : ' some thing in comp1 ' ; var comp2:==:content : ' some thing in comp2 ' ;
var len = this . _ length ( ) ; var progress:==:this . _ progress ;
var INTERFACE_DECLARATION = ' INTERFACE_DECLARATION ' ; var JSX_ATTRIBUTE:==:' JSX_ATTRIBUTE ' ;
var entityType = entityGroup . entityType ; var mergeStrategy:==:config . mergeStrategy ;
var connection = navigator . connection  |  |  navigator . mozConnection  |  |  navigator . webkitConnection ; var type:==:connection . type ;
var status = eventArgs . status ; var error:==:eventArgs . error ;
var chalk = require ( ' chalk ' ) ; var replace:==:require ( ' replace ' ) ;
var status = _ ref . status ; var statusText:==:_ ref . statusText ;
var titles = this . _ index . titles ; var terms:==:this . _ index . terms ;
var red800 = exports . red800 = ' # c62828 ' ; var red900:==:exports . red900    ' # b71c1c ' ;
var diameter = options . diameter  |  |  1 ; var thickness:==:options . thickness  |  |  0 . 5 ;
var colors = require ( ' colors ' ) ; var request:==:require ( ' request ' ) ;
var ace = tab . editor . ace ; var session:==:ace . session ;
var d1 = _ addDiv ( ' d1 ' ) , d2 = _ addDiv ( ' d2 ' ) ; var c:==:_ jsPlumb . connect ( source : d1 , target : d2 , beforeDetach : function ( conn ) ) ;
var force = _ ref . force ; var event:==:_ ref . event ;
var isArray = angular . isArray ; var isString:==:angular . isString ;
var site = this . _ site ; var insertedElements:==:this . _ insertedElements ;
var dlnacasts = require ( ' dlnacasts ' ) ( ) ; var xmlb:==:require ( ' xmlbuilder ' ) ;
var isf = record . isf ; var ic:==:record . ic ;
var registerWrapper = scope . registerWrapper ; var unwrapIfNeeded:==:scope . unwrapIfNeeded ;
var orderItem = this . orderItem ; var itemOption:==:optionVm . itemOption ;
var bounds = camera2 . bounds ; var x:==:bounds . x * _ width * _ pixelRatio ;
var floatingLabelText = _ props2 . floatingLabelText ; var fullWidth:==:_ props2 . fullWidth ;
var node = this . nodes [ this . nodes . length - 1 ] ; var transform:==:this . transforms [ this . transforms . length - 1 ] ;
var colorHelper = powerbi . visuals . colorHelper ; var createInteractivityService:==:powerbi . visuals . createInteractivityService ;
var anchor = this . editor . selection . anchor ; var isEmpty:==:this . editor . selection . isEmpty ( ) ;
var u = aabb . upperBound ; var children:==:this . children ;
var juggler = require ( ' loopback - datasource - juggler ' ) ; var debug:==:require ( ' debug ' ) ( ' loopback : registry ' ) ;
var config = this . collection . config ; var content:==:p . content ;
var target = ev . target ; var parent:==:target . parentElement ;
var options = this . options ; var node:==:e . node ;
var dynCall_viiddddddiiii = Module [ ' dynCall_viiddddddiiii ' ] = asm [ ' dynCall_viiddddddiiii ' ] ; var dynCall_iiiiiiiiiiiidd:==:Module [ ' dynCall_iiiiiiiiiiiidd ' ]    asm [ ' dynCall_iiiiiiiiiiiidd ' ] ;
var label = this . o . labels [ pointer . uid ] ; var prc:==:pointer . value . prc ;
var type = value . type ; var subtype:==:value . subtype ;
var layout = imports . layout ; var join:==:require ( ' path ' ) . join ;
var getAnimationDuration = powerbi . visuals . animatorCommon . getAnimationDuration ; var labelLayout:==:powerbi . labelLayout ;
var property = context . property ; var oldValue:==:context . oldValue ;
var ctx = this . ctx ; var width:==:img . width , height    img . height ;
var reportEvents = t . reportEvents ; var getEventEnd:==:t . getEventEnd ;
var moment = vis . moment ; var timeline:==:vis . timeline ;
var c = rounded . coefficients ; var e:==:rounded . exponent ;
var Service = _ fxosMvcDistMvc . service ; var app:==:_ appJsModelsApp [ ' default ' ] ;
var isValidEntityCode = _ _ webpack_require _ _ ( 1023 ) . isValidEntityCode ; var fromCodePoint:==:_ _ webpack_require _ _ ( 1023 ) . fromCodePoint ;
var objects = this . _ index . objects ; var objnames:==:this . _ index . objnames ;
var index = _ ref6 . index ; var offset:==:_ ref6 . offset ;
var colors = options . colors ; var width:==:defaultValue ( options . width , 1 . 0 ) ;
var directive = resource . directive ;  var methodResource:==:resource . methodResource ;
var createMakeNodeFunction = util . createMakeNodeFunction ; var constantNode:==:math . expression . node . constantNode ;
var heightScale = defaultValue ( structure . heightScale , heightmapTessellator . default_structure . heightScale ) ; var heightOffset:==:defaultValue ( structure . heightOffset , heightmapTessellator . default_structure . heightOffset ) ;
var frameId = event . data . frameId ; var frame:==:this . _ frames [ frameId ] ;
var polyline = this . _ polyline ; var polygon:==:this . _ polygon ;
var postCategory = ctx . model ( ' postCategory ' ) ; var category:==:ctx . model ( ' category ' ) ;
var instanceID = operation . instanceID ; var type:==:operation . type ;
var txn = db . transaction ( [ storeName ] , txnType ) ; var store:==:txn . objectStore ( storeName ) ;
var concat = require ( ' gulp - concat ' ) ; var lazypipe:==:require ( ' lazypipe ' ) ;
var d = new functionAssignmentNode ( ' f ' , [ ' x ' ] , c ) ; var e:==:d . clone ( ) ;
var value = this . bindings . value . get ( ) ; var text:==:options . text  |  |  ' ' ;
var tipLabel = options . tipLabel ! = = undefined ? options . tipLabel : ' attributions ' ; var collapseLabel:==:options . collapseLabel !    undefined ? options . collapseLabel : ' \u00bb ' ;
var a = _ . extend ( , Backbone . Events ) ; var b:==:_ . extend ( , Backbone . Events ) ;
var cache = options . cache ; var caches:==:options . caches ;
var edgeFieldsCount = this . _ edgeFieldsCount ; var nodeEdgeCountOffset:==:this . _ nodeEdgeCountOffset ;
var isIntercalary = this . isIntercalaryMonth ( year , monthIndex ) ; var month:==:this . toChineseMonth ( year , monthIndex ) ;
var notch = Math . max ( 0 , Math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' notch ' , this . notch ) ) ) ) ; var arrowHead:==:math . max ( 0 , math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' arrowHead ' , this . arrowHead ) ) ) ) ;
var entityAspect = context . entityAspect ; var entityManager:==:entityAspect . entityManager ;
var type = evt . type = = = ' mousewheel '  |  |  evt . type = = = ' domMouseScroll ' ? pointerEventTypes . pointerwheel : pointerEventTypes . pointermove ; var pi:==:new pointerInfo ( type , evt , pickResult ) ;
var c = a . colorspace ; var d:==:a . width ;
var debug = utils . debug ; var error:==:debug ( ' A - Frame : error ' ) ;
var connection = node . _ connection ; var parent:==:node . parent ;
var fixedHeight = _ props4 . fixedHeight ; var keepCollapsedContent:==:_ props4 . keepCollapsedContent ;
var options = options  |  |  ; var data:==:stringifyData ( options . data  |  |  ) ;
var y = sphere0 . centerWorld . y - sphere1 . centerWorld . y ; var z:==:sphere0 . centerWorld . z - sphere1 . centerWorld . z ;
var split = window . env . split ; var s:==:editor . session ;
var functionMatch = functionMatches [ key ] ; var listener:==:functionMatch . listener ;
var attributes = options . attributes ; var indexBuffer:==:options . indexBuffer ;
var store = this . store = new viewHistory ( i d ) ; var pdfViewer:==:this . pdfViewer ;
var moment = require ( ' moment ' ) ; var argv:==:require ( ' yargs ' ) . argv ;
var Group = Facade . Group ; var Identify:==:Facade . Identify ;
var reply_id = req . params . reply_id ; var content:==:req . body . t_content ;
var s = this . _ hsv [ 1 ] ; var v:==:this . _ hsv [ 2 ] ;
var shell = require ( ' gulp - shell ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var view = view_ref_1 . internalView ( viewRef ) ; var parentView:==:view_ref_1 . internalView ( viewContainerLocation . parentView ) ;
var normalizeDdocFunctionName = pouchdb . utils . normalizeDdocFunctionName ; var parseDdocFunctionName:==:pouchdb . utils . parseDdocFunctionName ;
var _ i64Add = module [ ' _ i64Add ' ] = asm [ ' _ i64Add ' ] ; var _ memmove:==:module [ ' _ memmove ' ]    asm [ ' _ memmove ' ] ;
var remoteTransport = kendo . data . remoteTransport ; var model:==:kendo . data . model ;
var fs      = require ( ' fs ' ) ; var path:==:require ( ' path ' ) ;
var errorHeader = leafletHelpers . errorHeader ; var helpers:==:leafletHelpers ;
var that = $ ( that ) ; var cell:==:that . closest ( ' . cal - cell ' ) ;
var axisExpandWidth = layoutInfo . axisExpandWidth ; var axisCount:==:layoutInfo . axisCount ;
var https = require ( ' https ' ) ; var http:==:require ( ' http ' ) ;
var dir = game . player . dir ; var sky:==:game . map . skybox ;
var isName = corePrimitives . isName ; var isRef:==:corePrimitives . isRef ;
var h = d . i d _ * 16 * a . cache_y_stride _ ; var i:==:d . i d _ * 8 * a . cache_uv_stride _ ;
var railway = feature . get ( ' railway ' ) ; var sort_key:==:feature . get ( ' sort_key ' ) ;
var position = this . $ container . position ( ) ; var offset:==:this . $ container . offset ( ) ;
var centerX = widget . _ centerX ; var centerY:==:widget . _ centerY ;
var adapters = PouchDB$2 . adapters ; var preferredAdapters:==:pouchdb$2 . preferredAdapters ;
var uglify = require ( ' gulp - uglify ' ) ; var stringify:==:require ( ' stringify ' ) ;
var path = require ( ' path ' ) ; var prompt:==:require ( ' prompt ' ) ;
var overlayStyle = _ props . overlayStyle ; var style:==:_ props . style ;
var a = new constantNode ( 1 ) ; var b:==:new symbolNode ( ' epsilon ' ) ;
var x = p * fx ; var y:==:p * fy ;
var outputName = metadata . outputName  |  |  metadata . sourceName  |  |  ' < loaderOutput > ' ; var sourceRoot:==:metadata . sourceRoot ;
var type = data . type ; var enterClass:==:data . enterClass ;
var path = route . overview_path ; var legs:==:route . legs ;
var getEventTarget = require ( ' getEventTarget ' ) ; var isEventSupported:==:require ( ' isEventSupported ' ) ;
var star = stars . eq ( i ) ; var state:==:$ rootScope . states [ i ] ;
var start = me . options . start ! = undefined ? me . options . start : range . min ; var end:==:me . options . end !   undefined ? me . options . end : range . max ;
var createCharacterList = require ( ' createCharacterList ' ) ; var encodeInlineStyleRanges:==:require ( ' encodeInlineStyleRanges ' ) ;
var should = require ( ' should ' ) ; var fs:==:require ( ' fs ' ) ;
var moment = vis . moment ; var dataSet:==:vis . dataSet ;
var props = this . props ; var rowClassNameGetter:==:props . rowClassNameGetter  |  |  emptyFunction ;
var p2 = [ cp2x , cp2y ] ; var p3:==:[ p3x , p3y ] ;
var path    = require ( ' path ' ) ; var List:==:require ( ' immutable ' ) . List ;
var a = aabb1 . elements ; var b:==:aabb2 . elements ;
var bind = require ( ' component - bind ' ) ; var debug:==:require ( ' debug ' ) ( ' socket . io - client : socket ' ) ;
var startRadius = locModeb . startRadius + locModeb . startRadiusVar * locRandomMinus11 ( ) ; var endRadius:==:locModeb . endRadius + locModeb . endRadiusVar * locRandomMinus11 ( ) ;
var panelId = item . panelId ; var menuItem:==:item . menuItem ;
var createEnumType = powerbi . createEnumType ; var selectionId:==:powerbi . visuals . selectionId ;
var p = pattern [ pi ] ; var f:==:file [ fi ] ;
var minimumSignificantDigits = options . minimumSignificantDigits ; var maximumSignificantDigits:==:options . maximumSignificantDigits ;
var mtlLoader = this . mtlLoader ; var objLoader:==:this . objLoader ;
var radii = ellipsoid . radii ; var p:==:frameState . camera . positionwc ;
var private_cdn = option_consume ( options , ' private_cdn ' , $ . cloudinary . config ( ) . private_cdn ) ; var secure_distribution:==:option_consume ( options , ' secure_distribution ' , $ . cloudinary . config ( ) . secure_distribution ) ;
var pitch = camera . pitch ; var positionCartographic:==:camera . positionCartographic ;
var keyCode = evt . keyCode ; var which:==:evt . which ;
var O = ES . toObject ( this ) ; var n:==:es . toUint32 ( o . length ) ;
var argv = require ( ' optimist ' ) . argv ; var browser:==:( typeof argv . browser !    ' boolean ' ? false : argv . browser )  |  |  ! ! argv . features ;
var organizationName = $ ( ' # organizationName ' ) . val ( ) ; var jobName:==:$ ( ' # jobName ' ) . val ( ) ;
var rangeNode = math . expression . node . rangeNode ; var arrayNode:==:math . expression . node . arrayNode ;
var ctx = _ bindings$event$i . ctx ; var once:==:_ bindings$event$i . once ;
var currentTarget = e . currentTarget ; var relatedTarget:==:e . relatedTarget ;
var item = result . rows . item ( i ) ; var seq:==:item . seq ;
var chalk = require ( ' chalk ' ) ; var os:==:require ( ' os ' ) ;
var bdi = document . createElement ( ' bdi ' ) ; var givenName:==:( contact . givenName & & contact . givenName [ 0 ] )  |  |  '' ;
var A = db . model ( ' A ' , n : [ age : ' number ' ] ) ; var a:==:new A ( n : [ age : ' 47 ' ] ) ;
var current = this . currentModule _ ; var name:==:tree . name . value ;
var indigo800 = exports . indigo800 = ' # 283593 ' ; var indigo900:==:exports . indigo900    ' # 1a237e ' ;
var startTime = _ lifeCycleTimerStack$ . startTime ; var nestedFlushStartTime:==:_ lifeCycleTimerStack$ . nestedFlushStartTime ;
var getopt = require ( ' posix - getopt ' ) ; var restify:==:require ( ' restify ' ) ;
var buffer = attribute . buffer ; var type:==:attribute . type ;
var xmax = options . xmax ; var zmax:==:options . zmax ;
var ftyp = isoFile . getBox ( ' ftyp ' ) ; var moov:==:isoFile . getBox ( ' moov ' ) ;
var rejected = adapter . rejected ; var pending:==:adapter . pending ;
var resolve = angular . extend ( , options . resolve ) ; var locals:==:angular . extend ( , options . locals ) ;
var category = track . category ( ) ; var repeat:==:track . proxy ( ' properties . repeat ' ) ;
var minHeight = options . minHeight ; var maxHeight:==:options . maxHeight  |  |  10 ;
var def = ' default ' ; var label:==:' label ' ;
var contours = trace . contours ; var line:==:trace . line ;
var f8Button = require ( ' f8Button ' ) ; var navigator:==:require ( ' navigator ' ) ;
var enable = getAndPrepare ( ' enable ' ) ; var disable:==:getAndPrepare ( ' disable ' ) ;
var rotation = viewState . rotation ; var size:==:frameState . size ;
var start = this . newBlock ( ' list gen start ' ) ; var skip:==:this . newBlock ( ' list gen skip ' ) ;
var keys = ' local keys ' ; var values:==:' local values ' ;
var length = this . length ( ) ; var preservedValues:==:this . _ preservedValues ;
var config = ref . config ; var nextTick:==:ref . nextTick ;
var fixedDataTableBufferedRows = require ( ' fixedDataTableBufferedRows . react ' ) ; var fixedDataTableColumnResizeHandle:==:require ( ' fixedDataTableColumnResizeHandle . react ' ) ;
var has_stree   = desc . stat_desc . has_stree ; var extra:==:desc . stat_desc . extra_bits ;
var containerSize = _ ref7 . containerSize ; var offset:==:_ ref7 . offset ;
var a = ' foobar ' + x ( ) + ' moofoo ' + y ( ) + ' xyz ' + q ( ) ; var b:==:' foo1 ' + x ( ) + ' 2boo ' ;
var edgeShortcutType = this . _ edgeShortcutType ; var edgeWeakType:==:this . _ edgeWeakType ;
var drawMonth = inst . drawMonth - showCurrentAtPos ; var drawYear:==:inst . drawYear ;
var rowspan = cell . hasAttribute ( ' rowspan ' ) ? parseInt ( cell . getAttribute ( ' rowspan ' ) , 10 ) : 1 ; var colspan:==:cell . hasAttribute ( ' colspan ' ) ? parseInt ( cell . getAttribute ( ' colspan ' ) , 10 ) : 1 ;
var x = plane . normal . x ; var y:==:plane . normal . y ;
var COLON    = C . COLON    = 0x5 ; var COMMA:==:C . COMMA      0x6 ;
var columnIndex = _ ref2 . columnIndex ; var isScrolling:==:_ ref2 . isScrolling ;
var extent = frameState . extent ; var size:==:frameState . size ;
var section = sections [ i ] ; var current:==:Math . abs ( currentScroll - section . offsetTop ) ;
var skipStart = typeof options . skipStart = = ' boolean ' ? options . skipStart : false ; var skipTermination:==:typeof options . skipTermination     ' boolean ' ? options . skipTermination : false ;
var w = hand . width * this . scale ; var h:==:hand . height * this . scale ;
var ed1 = join ( ' ed1 ' ) ; var ed2:==:join ( ' ed2 ' ) ;
var section = this . treeOutline ? this . treeOutline . section : null ; var skipProto:==:section ? section . _ skipProto : true ;
var focusRippleColor = _ props3 . focusRippleColor ; var focusRippleOpacity:==:_ props3 . focusRippleOpacity ;
var mousemove = fakeDispatch ( ' mousemove ' , 100 , 2 ) ; var mouseup:==:fakeDispatch ( ' mouseup ' , 100 , 2 ) ;
var port = UI . getSetting ( ' port ' ) ; var path:==:ui . getSetting ( ' path ' ) ;
var space = HTMLCSS . TeX . nulldelimiterspace * this . mscale ; var style:==:span . childNodes [ htmlcss . msiePaddingWidthBug ? 1 : 0 ] . style ;
var phone = $ ( ' input#phone ' ) . val ( ) ; var message:==:$ ( ' textarea#message ' ) . val ( ) ;
var assert = require ( ' assert ' ) ; var grunt:==:require ( ' grunt ' ) ;
var d = _ d ; var s2:==:_ s2 ;
var props = this . _ props ; var keys:==:Object . keys ( data ) ;
var Location = Struct ( ' Location ' ) ; var memoryWriter:==:struct ( ' memoryWriter ' ) ;
var style = _ props . style ; var touchGenerated:==:_ props . touchGenerated ;
var el = els [ i d ] , r = el . _ region ; var c:==:el . ddScrollConfig ? el . ddScrollConfig : dds ;
var monthDay = app . monthDay ; var date:==:monthDay . date ;
var edgeInsetsPropType = require ( ' edgeInsetsPropType ' ) ; var activityIndicator:==:require ( ' activityIndicator ' ) ;
var fs = require ( ' fs ' ) ; var clone:==:require ( ' clone ' ) ;
var fs = imports . fs ; var save:==:imports . save ;
var path = require ( ' path ' ) ; var requirejs:==:require ( ' requirejs ' ) ;
var orderBy = options . orderBy ; var order:==:orderCriteria [ orderBy ] ;
var action = logEntry . action ; var prevState:==:logEntry . prevState ;
var symbolSize = symbolMeta . symbolSize ; var symbolOffset:==:itemModel . get ( ' symbolOffset ' ) ;
var slen1 = tables . SFLEN_TABLE [ channel . scalefac_compress ] . slen1 ; var slen2:==:tables . SFLEN_TABLE [ channel . scalefac_compress ] . slen2 ;
var width = parsePercent ( positionInfo . width , containerWidth ) ; var height:==:parsePercent ( positionInfo . height , containerHeight ) ;
var menus = imports . menus ; var workspace:==:imports [ ' collab . workspace ' ] ;
var a = ' 11433856eed2f1285fb3aa11136718c1198ed5647875096952c66bf8cb976306 ' ; var b:==:' 91433856eed2f1285fb3aa11136718c1198ed5647875096952c66bf8cb976306 ' ;
var tokenType = traceur . syntax . tokenType ; var block:==:traceur . syntax . trees . block ;
var extend = Tools . extend , each = Tools . each ; var trim:==:Tools . trim , resolve    Tools . resolve ;
var minify   = require ( ' gulp - minify - css ' ) ; var plumber:==:require ( ' gulp - plumber ' ) ;
var polygons = this . polygons ; var polygonPool:==:this . polygonPool ;
var extrudedHeight = options . extrudedHeight ; var ellipsoid:==:options . ellipsoid ;
var c = ec * 8 ; var d:==:dB - du ;
var port = req . port ; var handler:==:handlers [ req . keyword ] ;
var isObject = leafletHelpers . isObject ; var createLayer:==:leafletLayerHelpers . createLayer ;
var renderer = scope . _ renderer ; var coordinator:==:scope . _ coordinator ;
var Identify = require ( ' facade ' ) . Identify ; var Track:==:require ( ' facade ' ) . Track ;
var Contacts = Windows . applicationModel . contacts ; var contactPicker:==:contacts . contactPicker ;
var x1 = shape . x1 ; var y1:==:shape . y1 ;
var p   = path ; var readline:==:require ( ' readline ' ) ;
var uniforms = material . uniforms ; var defines:==:material . defines ;
var options = obj . options ; var key:==:event . keyCode  |  |  ( extra & & extra . keyCode ) ;
var arc = ( options . arc < = 0  |  |  options . arc > 1 ) ? 1 . 0 : options . arc  |  |  1 . 0 ; var slice:==:( options . slice <   0 ) ? 1 . 0 : options . slice  |  |  1 . 0 ;
var el = this . el ; var rotationAux:==:this . rotationAux    this . rotationAux  |  |  x : 0 , y : 0 , z : 0 ;
var selectable = that . options . selectable ; var selectedIndices:==:that . _ selectedIndices ;
var path = require ( ' path ' ) ; var https:==:require ( ' https ' ) ;
var mkdirp = Promise . promisify ( require ( ' mkdirp ' ) ) ; var beautify:==:require ( ' js - beautify ' ) . js_beautify ;
var mkdirp = require ( ' mkdirp ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var x = o . x ; var y:==:o . y ;
var params = formalParameters . params ; var stricted:==:formalParameters . stricted ;
var ui = $ . summernote . ui ; var options:==:context . options ;
var wrench = require ( ' wrench ' ) ; var os:==:require ( ' os ' ) ;
var contentState = require ( ' contentState ' ) ; var draftModifier:==:require ( ' draftModifier ' ) ;
var SHOW_SPINNER = exports . SHOW_SPINNER = ' SHOW_SPINNER ' ; var HIDE_SPINNER:==:exports . HIDE_SPINNER    ' HIDE_SPINNER ' ;
var bind = require ( ' bind - component ' ) ; var type:==:require ( ' type - component ' ) ;
var fs = require ( ' fs ' ) ; var keys:==:Object . keys ;
var groupId = group . groupId ( ) ; var traits:==:group . traits ( ) ;
var coords = bot . action . prepareToInteractWith _ ( element , opt_coords ) ; var mouse:==:opt_mouse  |  |  new bot . mouse ( ) ;
var bufferViews = model . gltf . bufferViews ; var bufferView:==:bufferViews [ bufferViewId ] ;
var purple400 = exports . purple400 = ' # ab47bc ' ; var purple500:==:exports . purple500    ' # 9c27b0 ' ;
var terrainProvider = this . terrainProvider ; var hasWaterMask:==:this . showWaterEffect & & terrainProvider . ready & & terrainProvider . hasWaterMask ;
var dimensions = this . dimensions ; var axesMap:==:this . _ axesMap ;
var g = ASN1HEX . getVbyList ( info . algparam , 0 , [ 2 ] , ' 02 ' ) ; var y:==:asn1hex . gethexofv_atobj ( info . keyhex , 0 ) ;
var t = percentage ; var x:==:Math . pow ( 1 - t , 2 ) * this . fromPoint . x + 2 * t * ( 1 - t ) * viaNode . x + math . pow ( t , 2 ) * this . toPoint . x ;
var r = safe_decode_range ( sheet [ ' ! ref ' ] ) ; var FS:==:o . FS !    undefined ? o . FS : ' , ' , fs    FS . charCodeAt ( 0 ) ;
var symbolSize = normalize ( itemModel . getShallow ( ' symbolSize ' , true ) ) ; var opacity:==:itemModel . get ( opacityQuery ) ;
var firstRowIndex = ( oldState & & oldState . firstRowIndex )  |  |  0 ; var firstRowOffset:==:( oldState & & oldState . firstRowOffset )  |  |  0 ;
var r = Math . min ( right , data [ 0 ] . length ) ; var b:==:Math . min ( bottom , data . length ) ;
var style = flattenStyle ( this . props . style )  |  |  ; var margin:==:resolveBoxStyle ( ' margin ' , style ) ;
var height = _ props3 . height ; var rowCount:==:_ props3 . rowCount ;
var dataLabelManager = powerbi . dataLabelManager ; var visualDataRoleKind:==:powerbi . visualDataRoleKind ;
var settings = document . getElementById ( ' settings ' ) ; var instructions:==:document . getElementById ( ' instructions ' ) ;
var options = this . options , that = this ; var ignoreVal:==:options . ignoreVal ;
var defaults = zrUtil . defaults ; var normalizeToArray:==:modelUtil . normalizeToArray ;
var isCustomComponent = require ( ' isCustomComponent ' ) ; var setInnerhtml:==:require ( ' setInnerhtml ' ) ;
var forceLayout = seriesModel . forceLayout ; var layoutAnimation:==:seriesModel . get ( ' force . layoutAnimation ' ) ;
var query = url . parse ( req . url , true ) . query ; var referer:==:req . headers . referer ;
var start = this . remote . startDate ; var end:==:this . remote . endDate ;
var CONTENT_TYPE_HEADER = goog . net . xhrIo . content_type_header ; var content_transfer_encoding:==:goog . net . xhrIo . content_transfer_encoding ;
var collection = this . transformAny ( tree . collection ) ; var body:==:this . transformToBlockOrStatement ( tree . body ) ;
var end = this . end ; var scheduler:==:this . scheduler ;
var camera = frameState . camera ; var mode:==:frameState . mode ;
var beforeAppear = ref . beforeAppear ; var appear:==:ref . appear ;
var child_process = require ( ' child_process ' ) ; var https:==:require ( ' https ' ) ;
var alice = name : ' alice ' ; var bob:==:name : ' bob ' ;
var previousCellSize = _ ref . previousCellSize ; var previousScrollToAlignment:==:_ ref . previousScrollToAlignment ;
var cellToDate = t . cellToDate ; var getIsCellAllDay:==:t . getIsCellAllDay ;
var edgeFieldsCount = this . _ edgeFieldsCount ; var containmentEdges:==:this . containmentEdges ;
var Track = require ( ' facade ' ) . Track ; var each:==:require ( ' each ' ) ;
var editor = new baidu . editor . Editor ( ' autoFloatEnabled ' : false ) ; var div:==:document . body . appendChild ( document . createElement ( ' div ' ) ) ;
var unset   = options . unset ; var silent:==:options . silent ;
var r = processFeature ( dataSource , parent , placemark , entityCollection , styleCollection , sourceUri , uriResolver , promises , context ) ; var entity:==:r . entity ;
var _ bar = docSet . getByLongname ( ' thingy#_bar ' ) [ 0 ] ; var _ gnu:==:docSet . getByLongname ( ' thingy#_gnu ' ) [ 0 ] ;
var method = req . method ; var signature:==:req . query . msg_signature ;
var container = config . container ; var shadowCanvas:==:this . shadowCanvas    document . createElement ( ' canvas ' ) ;
var unit = texture . unit ; var target:==:texture . target ;
var title = item . title ; var description:==:item . description  |  |  item . summary  |  |  item . content  |  |  ' ' ;
var LITERAL_EXPRESSION = ' LITERAL_EXPRESSION ' ; var LITERAL_PROPERTY_NAME:==:' LITERAL_PROPERTY_NAME ' ;
var GMAIL_USERNAME = process . env [ ' GMAIL_USERNAME ' ] ; var GMAIL_PASSWORD:==:process . env [ ' GMAIL_PASSWORD ' ] ;
var provider = this . provider ; var parent:==:node . parent ;
var frame = this . state . frames [ i ] ; var cache:==:this . _ cachedFrame ( frame , i ) ;
var iconImageCache = ol . style . iconImageCache ; var iconImage:==:iconImageCache . get ( src , crossOrigin , color ) ;
var disableTouchRipple = _ props . disableTouchRipple ; var children:==:_ props . children ;
var title = option . title ? option . title : null ; var value:==:option . value ;
var instanceCount = item . instanceCount ; var totalDuration:==:item . totalDuration ;
var setupTestHooks = blueprintHelpers . setupTestHooks ; var emberNew:==:blueprintHelpers . emberNew ;
var detail = defaultValue ( options . detail , 0 ) ; var screenx:==:defaultValue ( options . screenx , 0 ) ;
var amber50 = exports . amber50 = ' # fff8e1 ' ; var amber100:==:exports . amber100    ' # ffecb3 ' ;
var p1 = input . p1 ; var p2:==:input . p2 ;
var accessorNode = math . expression . node . accessorNode ; var indexNode:==:math . expression . node . indexNode ;
var commander = require ( ' commander ' ) ; var fs:==:require ( ' fs ' ) ;
var transitionEnabled = _ props . transitionEnabled ; var zDepth:==:_ props . zDepth ;
var clipPaths = this . _ _ clipPaths ; var style:==:this . style ;
var inherit = require ( ' component - inherit ' ) ; var debug:==:require ( ' debug ' ) ( ' engine . io - client : polling - xhr ' ) ;
var directiveIndex = directiveRecord . directiveIndex ; var t:==:new bindingTarget ( host_event , directiveIndex . elementIndex , eventName , null , ast . toString ( ) ) ;
var start = this . _ delegate . start ( oControl , sAggregationName , isDefaultAggregation ) ; var middle:==:this . _ delegate . middle ( oControl , sAggregationName , isDefaultAggregation ) ;
var dimsDef = ( opt . dimsDef  |  |  [ ] ) . slice ( ) ; var encodeDef:==:zrUtil . createHashMap ( opt . encodeDef ) ;
var from = Math . max ( visible . from - cm . options . viewportMargin , 0 ) ; var to:==:math . min ( doc . size , visible . to + cm . options . viewportMargin ) ;
var fs = require ( ' fs ' ) ; var expect:==:require ( ' expect . js ' ) ;
var root = graph . getNode ( this . root ) ; var parent:==:this . parent ;
var Element = window . Element ; var mutationObserver:==:window . mutationObserver ;
var oldHeight    = pair . value . oldHeight ; var newHeight:==:pair . value . newHeight ;
var head = el . querySelector ( ' gui - list - view - head ' ) ; var row:==:document . createElement ( ' gui - list - view - row ' ) ;
var enqueueMutation = scope . enqueueMutation ; var getTreeScope:==:scope . getTreeScope ;
var width = jpxImage . width ; var height:==:jpxImage . height ;
var a = new Parse . Object ( ' testObject ' ) ; var b:==:new parse . object ( ' testObject ' ) ;
var position = powerbi . dataViewObjects . getValue ( objects , properties [ ' position ' ] , defaultSettings . position ) ; var backgroundColor:==:new visuals . colorHelper ( colors , properties [ ' backgroundColor ' ] , defaultSettings . backgroundColor ) . getColorForMeasure ( objects , ' ' ) ;
var nodeIndices = this . body . nodeIndices ; var nodes:==:this . body . nodes ;
var vertexFormat = options . vertexFormat ; var geometry:==:options . geometry ;
var nodePath = options . nodePath  |  |  ' ' ; var runners:==:options . runners  |  |  ;
var ox = parseInt ( lasso . attr ( ' ox ' ) ) ; var oy:==:parseInt ( lasso . attr ( ' oy ' ) ) ;
var async = require ( ' async ' ) ; var assert:==:require ( ' power - assert ' ) ;
var tag = el . tag ; var type:==:el . attrsMap . type ;
var baseLayerPicker = viewer . _ baseLayerPicker ; var animation:==:viewer . _ animation ;
var h = hsla [ 0 ] ; var s:==:hsla [ 1 ] ;
var path = options . path ; var args:==:options . args ;
var prim = cm . doc . sel . primary ( ) ; var line:==:cm . getLine ( prim . head . line ) ;
var transaction = db . transaction ( ' search_engines ' ) ; var objectStore:==:transaction . objectStore ( ' search_engines ' ) ;
var candle = _ . first ( candles ) ; var spy:==:sinon . spy ( ) ;
var n = vrotate ( this . grv_n , a . rot ) ; var d:==:vdot ( ta , n ) ;
var remaining = Browser . mainLoop . remainingBlockers ; var expected:==:browser . mainLoop . expectedBlockers ;
var once = require ( ' once ' ) ; var semver:==:require ( ' semver ' ) ;
var del = require ( ' del ' ) ; var gulp:==:require ( ' gulp ' ) ;
var onclose = options . onclose  |  |  undefined ; var onshow:==:options . onshow  |  |  undefined ;
var val = fragment . val = c . val ; var index:==:fragment . index    c . index ;
var width = Math . min ( frame . x + frame . width , otherFrame . x + otherFrame . width ) ; var y:==:math . max ( frame . y , otherFrame . y ) ;
var p    = require ( ' path ' ) ; var chalk:==:require ( ' chalk ' ) ;
var readable = opts . readable  |  |  ( opts . readable ! = = false & & stream . readable ) ; var writable:==:opts . writable  |  |  ( opts . writable !    false & & stream . writable ) ;
var dataServiceVersion = context . dataServiceVersion  |  |  ' 1 . 0 ' ; var useJsonLight:==:defined ( context . useJsonLight , handler . useJsonLight ) ;
var sinon = require ( ' sinon ' ) ; var Store:==:require ( ' connect ' ) . session . memoryStore ;
var subtitleStyle = _ props . subtitleStyle ; var title:==:_ props . title ;
var DOM = domUtils . dom ; var each:==:tools . each , grep    tools . grep ;
var c = new String ( ' c ' ) ; var d:==:new String ( 'd ' ) ;
var shadowsEnabled = frameState . shadowHints . shadowsEnabled ; var shadowMaps:==:frameState . shadowHints . shadowMaps ;
var snapsPerSlot = this . snapsPerSlot ; var colCoordCache:==:this . colCoordCache ;
var canUndo = canDo ( ' canUndo ' ) ; var canRedo:==:canDo ( ' canRedo ' ) ;
var heightData = options . heightData ; var widthData:==:options . widthData ;
var shell = require ( ' gulp - shell ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var pagestack = require ( ' pagestack ' ) ; var utils:==:require ( ' utils ' ) ;
var models = _ _ alloyId37 . models ; var len:==:models . length ;
var dataLabelUtils = powerbi . visuals . dataLabelUtils ; var objectEnumerationBuilder:==:powerbi . visuals . objectEnumerationBuilder ;
var w = n . getData ( ' width ' ) + siblingOffset ; var h:==:n . getData ( ' height ' ) + siblingOffset ;
var exchange = $ scope . exchange ; var currency:==:Currency . from_human ( $ scope . exchange . currency_name ? $ scope . exchange . currency_name : ' XRP ' ) ;
var footer   = require ( ' gulp - footer ' ) ; var header:==:require ( ' gulp - header ' ) ;
var rotation = typeof options . rotation ! = ' undefined ' ? options . rotation : 0 . 0 ; var relatedTarget:==:typeof options . relatedTarget !   ' undefined ' ? options . relatedTarget : null ;
var a = _ . extend ( , Backbone . Events ) . once ( ' event ' , f ) ; var b:==:_ . extend ( , Backbone . Events ) . on ( ' event ' , f ) ;
var content = this . getDom ( ' content ' ) ; var iframe:==:this . getDom ( ' iframe ' ) ;
var expandable = _ props . expandable ; var style:==:_ props . style ;
var crypto = require ( ' crypto ' ) ; var semver:==:require ( ' semver ' ) ;
var dropTarget = defaultValue ( options . dropTarget , viewer . container ) ; var clampToGround:==:defaultValue ( options . clampToGround , true ) ;
var top = this . getAttribute ( ' data - top ' ) ; var offset:==:this . getAttribute ( ' data - offset ' ) ;
var panels = imports . panels ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var fontSizeScale = current . fontSizeScale ; var charSpacing:==:current . charSpacing ;
var margin = drawOptions . margin ; var height:==:drawOptions . height ;
var Controller = _ fxosMvcDistMvc . controller ; var deviceNameService:==:_ appJsServicesDeviceNameService [ ' default ' ] ;
var col = db . collection ( ' find_one_and_replace_with_generators ' ) ; var r:==:yield col . insertMany ( [ a : 1 , b : 1 ] , w : 1 ) ;
var thisArg = this . thisArg ; var iterator:==:getIterator ( object ( this . iterator ) ) ;
var _ malloc = Module [ ' _ malloc ' ] = asm [ ' _ malloc ' ] ; var _ im_get_predicts_utf8:==:Module [ ' _ im_get_predicts_utf8 ' ]    asm [ ' _ im_get_predicts_utf8 ' ] ;
var barPos = math . max ( 0 , math . min ( 100 , parseFloat ( mxUtils . getValue ( this . state . style , ' barPos ' , this . barPos ) ) ) ) ; var barh:==:parseFloat ( mxUtils . getValue ( this . state . style , ' barHeight ' , this . barHeight ) ) ;
var width = backgroundBillboard . width * scale ; var height:==:backgroundBillboard . height * scale ;
var r = k . rot ; var s:==:k . scale ;
var createAssignStateStatement = parseTreeFactory . createAssignStateStatement ; var createAssignmentStatement:==:parseTreeFactory . createAssignmentStatement ;
var _ calloc = Module [ ' _ calloc ' ] = asm [ ' _ calloc ' ] ; var runPostSets:==:module [ ' runPostSets ' ]    asm [ ' runPostSets ' ] ;
var name = ' ' + categories [ i ] . name ; var short_name:==:categories [ i ] . short_name ;
var zIndex = math . max . apply ( math , parentsZindex ) + this . o . zIndexOffset ; var offset:==:this . component ? this . component . parent ( ) . offset ( ) : this . element . offset ( ) ;
var f8Button = require ( ' f8Button ' ) ; var toastAndroid:==:require ( ' toastAndroid ' ) ;
var after = require ( ' after ' ) ; var each:==:require ( ' each ' ) ;
var forEach = _ angular . forEach ; var isObject:==:_ angular . isObject ;
var querystring = require ( ' querystring ' ) ; var url:==:require ( ' url ' ) ;
var errorCheck = options . errorCheck ; var env:==:options . env ;
var performanceLogger = require ( ' performanceLogger ' ) ; var react:==:require ( ' react ' ) ;
var supertest = require ( ' supertest ' ) ( app ) ; var mm:==:require ( ' mm ' ) ;
var a = Ext . eventManager ; var b:==:ext . lib . dom ;
var address = evt . address ; var i d:==:' div [ data - id ' ' + address + ' ' ] progress ' ;
var BINDING_ELEMENT = ' BINDING_ELEMENT ' ; var BINDING_IDENTIFIER:==:' BINDING_IDENTIFIER ' ;
var compile = _ _ dependency4 _ _ . compile ; var precompile:==:_ _ dependency4 _ _ . precompile ;
var dataSource = this . dataSource ; var settings:==:dataSource & & dataSource . settings ;
var g = from . g + ( to . g - from . g ) * this . progress ( ) ; var b:==:from . b + ( to . b - from . b ) * this . progress ( ) ;
var constantinople = require ( ' constantinople ' ) ; var stringify:==:require ( ' js - stringify ' ) ;
var context = frameState . context ; var texturesToCreate:==:model . _ loadResources . texturesToCreate ;
var options = this . options . options ; var token:==:this . options . token ;
var texthScale = current . texthScale ; var fontMatrix:==:current . fontMatrix  |  |  identity_matrix ;
var dynCall_viiiddddi = Module [ ' dynCall_viiiddddi ' ] = asm [ ' dynCall_viiiddddi ' ] ; var dynCall_iddddiii:==:Module [ ' dynCall_iddddiii ' ]    asm [ ' dynCall_iddddiii ' ] ;
var fixedColumnsLeft = this . wot . getSetting ( ' fixedColumnsLeft ' ) ; var totalRows:==:this . wot . getSetting ( ' totalRows ' ) ;
var unsafeUnwrap = scope . unsafeUnwrap ; var wrap:==:scope . wrap ;
var source = asset . source ; var path:==:asset . path ;
var environment = this . environment ? this . environment . buildCode ( builder , ' c ' , slot : ' environment ' ) : undefined ; var environmentAlpha:==:this . environmentAlpha & & this . environment ? this . environmentAlpha . buildCode ( builder , ' fv1 ' ) : undefined ;
var body = registeredMesh . body ; var center:==:mesh . getBoundingInfo ( ) . boundingBox . center ;
var inherit = utils . inherit ; var clone:==:utils . clone ;
var _ memmove = Module [ ' _ memmove ' ] = asm [ ' _ memmove ' ] ; var _ i64Subtract:==:module [ ' _ i64Subtract ' ]    asm [ ' _ i64Subtract ' ] ;
var page = data . page  |  |  1 ; var uid:==:data . uid  |  |  0 ;
var remote = new PouchDB ( dbs . remote ) ; var bulkDocs:==:remote . bulkDocs ;
var lat = scratchCartographic . latitude ; var lon:==:scratchCartographic . longitude ;
var probe = axm . probe ( ) ; var http:==:require ( ' http ' ) ;
var parseTreeTransformer = traceur . codegeneration . parseTreeTransformer ; var breakStatement:==:traceur . syntax . trees . breakStatement ;
var formatString = visuals . valueFormatter . getFormatString ( metadataColumn , gauge . formatStringProp ) ; var precision:==:visuals . dataLabelUtils . getLabelPrecision ( dataLabelSettings . precision , formatString ) ;
var checkIfAttachable = options . checkIfAttachable ; var noEdges:==:options . noEdges ;
var exportStarBinding = $ _ _ 6 . exportStarBindings [ index ] ; var moduleBinding:==:$ _ _ 6 . moduleBindings [ index ] ;
var isObject = leafletHelpers . isObject ; var isDefined:==:leafletHelpers . isDefined ;
var eventTarget = scope . wrappers . eventTarget ; var mixin:==:scope . mixin ;
var atNameExpression = traceur . syntax . trees . atNameExpression ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var center = options . center ; var ellipsoid:==:options . ellipsoid ;
var x = game . math . snapToFloor ( pointer . x , 32 , 0 ) ; var y:==:game . math . snapToFloor ( pointer . y , 32 , 0 ) ;
var readFile = promise . promisify ( fs . readFile ) ; var gzip:==:promise . promisify ( zlib . gzip ) ;
var thunkify = require ( ' thunkify ' ) ; var unyield:==:require ( ' unyield ' ) ;
var test = require ( ' tap ' ) . test ; var spawn:==:require ( ' child_process ' ) . spawn ;
var f8Touchable = require ( ' f8Touchable ' ) ; var text:==:require ( ' f8Text ' ) ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var parseTreeType:==:traceur . syntax . trees . parseTreeType ;
var r = floor ( random ( 0 , happy . length ) ) ; var li:==:createElement ( ' li ' , happy [ r ] ) ;
var pooledClass = require ( ' pooledClass ' ) ; var reactElement:==:require ( ' reactElement ' ) ;
var specs = grunt . option ( ' specs ' ) ; var seleniumAddress:==:grunt . option ( ' seleniumAddress ' ) ;
var bar1 = angular . element ( element [ 0 ] . querySelector ( ' . md - bar1 ' ) ) ; var bar2:==:angular . element ( element [ 0 ] . querySelector ( ' . md - bar2 ' ) ) ;
var vertexFormat = ellipsoidGeometry . _ vertexFormat ; var slicePartitions:==:ellipsoidGeometry . _ slicePartitions + 1 ;
var ui = imports . ui ; var callstack:==:imports . callstack ;
var y = q . y ( ) ; var z:==:q . z ( ) ;
var checkFocus = window . checkFocus ; var setFocusOutsideOfTable:==:window . setFocusOutsideOfTable ;
var ref = self . $ ref ( ) ; var def:==:$ q . defer ( ) ;
var cropBox = self . cropBox ; var cropped:==:self . cropped & & cropBox ;
var accuracy = e . heading . accuracy ; var trueHeading:==:e . heading . trueHeading ;
var frame = this . _ frames [ this . _ index ] ; var sc:==:frame . scale*this . _ scale ;
var spawn = require ( ' child_process ' ) . spawn ; var rimraf:==:require ( ' rimraf ' ) ;
var viewportHeight = priv . viewportHeight ; var horizontalScrollbarHeight:==:priv . horizontalScrollbarHeight  |  |  0 ;
var iceCandidate = window . mozrtcIceCandidate  |  |  window . rtcIceCandidate ; var sessionDescription:==:window . mozrtcSessionDescription  |  |  window . rtcSessionDescription ;
var Button = declareInterfaceClass ( buttonImpl ) ; var eventSink:==:declareInterfaceClass ( eventSinkImpl ) ;
var data = message . data  |  |  ; var docId:==:data . docId  |  |  ' ' ;
var client = this . _ . client ; var i d:==:this . _ . i d ;
var gridLines = options . gridLines ; var scaleLabel:==:options . scaleLabel ;
var msub = cTop . createElement ( ' msub ' ) ; var mrow:==:args ? args [ 0 ] : cTop . createElement ( ' mrow ' ) ;
var records   = method . records ; var searches:==:method . searches ;
var index = el . parent . children . indexOf ( el ) ; var p:==:el . parent ;
var diagram = this . diagram ; var paper:==:this . _ paper ;
var access = env . opts . access ; var priv:==:! ! env . opts . private ;
var ctx = this . ctx ; var font:==:this . current . font ;
var _ im_search = Module [ ' _ im_search ' ] = asm [ ' _ im_search ' ] ; var _ memcpy:==:Module [ ' _ memcpy ' ]    asm [ ' _ memcpy ' ] ;
var mainGroup = this . _ mainGroup ; var labelGroup:==:this . _ labelGroup ;
var T = new Twit ( config ) ; var stream:==:T . stream ( ' user ' ) ;
var db = syncBrowserdb . db . _ db ; var transaction:==:db . transaction ( dbos_tabs , ' readwrite ' ) ;
var key = _ ref . key ; var value:==:_ ref . value ;
var info = imports . info ; var auth:==:imports . auth ;
var destroy = require ( ' destroy ' ) ; var tmp:==:require ( ' tmp ' ) ;
var index = sourceIndex  |  |  0 ; var source:==:sources [ index ] ;
var express = require ( ' express ' ) ; var workerpool:==:require ( ' workerpool ' ) ;
var moduleSymbol = traceur . semantics . symbols . moduleSymbol ; var canonicalizeUrl:==:traceur . util . canonicalizeUrl ;
var isArray = sharedUtil . isArray ; var shadow:==:sharedUtil . shadow ;
var comprehensionList = this . transformList ( tree . comprehensionList ) ; var expression:==:this . transformAny ( tree . expression ) ;
var newEntry = entries [ newEntryIndex ] ; var oldChild:==:oldChildren [ oldChildIndex ] ;
var lang = this . model . get ( ' lang ' ) ; var code:==:this . $ el . find ( ' # code ' ) [ 0 ] ;
var _ i64Subtract = module [ ' _ i64Subtract ' ] = asm [ ' _ i64Subtract ' ] ; var _ memset:==:module [ ' _ memset ' ]    asm [ ' _ memset ' ] ;
var watcher = imports . watcher ; var query:==:options . query ;
var adapters = PouchDB . adapters ; var preferredAdapters:==:pouchdb . preferredAdapters ;
var s = editor . settings ; var depth:==:parseInt ( s . toc_depth , 10 )  |  |  0 ;
var userAgent = navigator . userAgent . toLowerCase ( ) ; var productSub:==:navigator . productSub ;
var i d = item . i d ; var module:==:get_module_details ( id , token ) ;
var keys = Object . keys ( m ) ; var length:==:keys . length ;
var height = image . height ; var canvas:==:document . createElement ( ' canvas ' ) ;
var node = e . node ; var action:==:e . action ;
var bottom = getPropertyAsFloat ( style , ' padding - bottom ' ) ; var top:==:getPropertyAsFloat ( style , ' padding - top ' ) ;
var fs = require ( ' fs ' ) ; var page:==:require ( ' webpage ' ) . create ( ) ;
var sfField     = sfBuilderProvider . builders . sfField ; var ngModel:==:sfBuilderProvider . builders . ngModel ;
var rating = request . parameters . rating ; var filePath:==:decodeuriComponent ( request . parameters . filePath ) ;
var gulp = require ( ' gulp ' ) ; var karma:==:require ( ' karma ' ) . server ;
var pieceList = this . _ pieceList ; var precision:==:thisOption . precision ;
var caseClause = traceur . syntax . trees . caseClause ; var identifierExpression:==:traceur . syntax . trees . identifierExpression ;
var task = angular . element ( ui . item [ 0 ] ) . scope ( ) . task ; var startIndex:==:ui . item . data ( ' startIndex ' ) ;
var messageType = ( keyMessage . messageType ) ? keyMessage . messageType : ' license - request ' ; var message:==:keyMessage . message ;
var path = require ( ' path ' ) ; var mongo:==:require ( ' mongodb ' ) . mongoClient ;
var purple50 = exports . purple50 = ' # f3e5f5 ' ; var purple100:==:exports . purple100    ' # e1bee7 ' ;
var isInt = sharedUtil . isInt ; var warn:==:sharedUtil . warn ;
var empty = tag . match ( regex_empty ) ; var tagname:==:regex_tagname . exec ( tag ) [ 1 ] ;
var i d = jqThis . data ( ' i d ' ) ; var name:==:jqThis . parents ( ' . pl - item ' ) . find ( ' . name ' ) . text ( ) ;
var child = element . children ( ' a ' ) ; var preventDefault:==:jasmine . createSpy ( ' preventDefault ' ) ;
var features = this . features ; var textFeatures:==:this . textFeatures ;
var save = imports . save ; var question:==:imports [ ' dialog . question ' ] . show ;
var domEventPluginOrder = require ( ' domEventPluginOrder ' ) ; var enterLeaveEventPlugin:==:require ( ' enterLeaveEventPlugin ' ) ;
var animatorCommon = powerbi . visuals . animatorCommon ; var dataLabelManager:==:powerbi . dataLabelManager ;
var name = desc . name ; var path:==:fs . realpathSync ( desc . path ) ;
var styleParser = utils . styleParser ; var warn:==:utils . debug ( ' core : component : warn ' ) ;
var path = require ( ' path ' ) ; var uuid:==:require ( ' node - uuid ' ) ;
var TYPE_PARAMETER = ' TYPE_PARAMETER ' ; var TYPE_PARAMETERS:==:' TYPE_PARAMETERS ' ;
var a = worldTransform . a ; var b:==:worldTransform . b ;
var _ calloc = Module [ ' _ calloc ' ] = asm [ ' _ calloc ' ] ; var _ im_choose:==:Module [ ' _ im_choose ' ]    asm [ ' _ im_choose ' ] ;
var xi = ContactEquation_getImpactVelocityAlongNormal_xi ; var xj:==:ContactEquation_getImpactVelocityAlongNormal_xj ;
var deepOrange700 = exports . deepOrange700 = ' # e64a19 ' ; var deepOrange800:==:exports . deepOrange800    ' # d84315 ' ;
var emulateTouch = this . emulationEnabled ( ) & & this . settings . emulateTouch . get ( ) & & ! this . _ touchEmulationSuspended ; var targets:==:webInspector . targetManager . targets ( ) ;
var d1 = _ addDiv ( ' d1 ' ) ; var d2:==:_ addDiv ( ' d2 ' ) ;
var top = _ ref . top ; var left:==:_ ref . left ;
var column = columns_2 [ _ i ] ; var roles:==:column . roles ;
var texture = displayObject . texture ; var frame:==:texture . frame ;
var path = require ( ' path ' ) ; var merge:==:require ( ' utils - merge ' ) ;
var notAuthorizedError = errors . notAuthorizedError ; var resourceNotFoundError:==:errors . resourceNotFoundError ;
var fixedDataTable = require ( ' fixedDataTable . react ' ) ; var fixedDataTableCellDefault:==:require ( ' fixedDataTableCellDefault . react ' ) ;
var printContainer = this . printContainer ; var body:==:document . querySelector ( ' body ' ) ;
var SELECT = ' SELECT ' ; var ACTION_CHANNEL:==:' ACTION_CHANNEL ' ;
var jimp = require ( ' jimp ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var isDown = aggregator . _ isDown ; var eventStartPosition:==:aggregator . _ eventStartPosition ;
var reactdomUnknownPropertyHook = require ( ' reactdomUnknownPropertyHook ' ) ; var reactdomNullInputValuePropHook:==:require ( ' reactdomNullInputValuePropHook ' ) ;
var i d = this . i d ; var name:==:this . options . data . name ;
var object = util . object ; var isArray:==:array . isArray ;
var rowContainer = $ scope . rowContainer ; var colContainer:==:$ scope . colContainer ;
var column = options . column ; var path:==:options . path ;
var box = aBox ( ' the scripted box ' ) ; var sphere:==:aSphere ( ' the scripted sphere ' ) ;
var item = listbox . items ( ) . eq ( 0 ) ; var items:==:listbox . items ( ) ;
var l2_decay_mul = typeof pg . l2_decay_mul ! = = ' undefined ' ? pg . l2_decay_mul : 1 . 0 ; var l1_decay_mul:==:typeof pg . l1_decay_mul !    ' undefined ' ? pg . l1_decay_mul : 1 . 0 ;
var rotl32 = utils . rotl32 ; var sum32:==:utils . sum32 ;
var arguments = scenarioTest . operation . arguments ; var filter:==:arguments . filter ;
var sortedCols = g . sortedCols ( ) ; var sortedRows:==:g . sortedRows ( ) ;
var parseTreeType = traceur . syntax . trees . parseTreeType ; var argumentList:==:traceur . syntax . trees . argumentList ;
var Inject = makeParamDecorator ( ' inject ' , [ [ ' token ' , undefined ] ] ) ; var optional:==:makeParamDecorator ( ' optional ' , [ ] ) ;
var stamp = header . stamp ; var headerLength:==:header . headerLength ;
var head = document . head  |  |  document . getElementsByTagName ( ' head ' ) [ 0 ]  |  |  document . documentElement ; var s:==:document . createElement ( ' script ' ) ;
var value = state . value ; var subscriber:==:state . subscriber ;
var metadata = imports . metadata ; var question:==:imports [ ' dialog . question ' ] ;
var http = require ( ' http ' ) . Server ( app ) ; var io:==:require ( ' socket . io ' ) ( http ) ;
var uint16 = Fn . uint16 ; var uint24:==:Fn . uint24 ;
var fs = require ( ' graceful - fs ' ) ; var readdir:==:fs . readdir . bind ( fs ) ;
var when s = gxTrackObject . when s ; var s:==:ol . xml . getAllTextContent ( node , false ) ;
var fs = require ( ' fs ' ) ; var winston:==:require ( ' winston ' ) ;
var thead = this . dom _ . createElement ( ' thead ' ) ; var tbody:==:this . dom _ . createElement ( ' tbody ' ) ;
var el = options . element  |  |  document ; var speed:==:options . speed  |  |  100 ;
var tls = require ( ' tls ' ) ; var fs:==:require ( ' fs ' ) ;
var n = pts . length - 1 ; var tr:==:state . view . translate ;
var aperture = ( params . aperture ! = = undefined ) ? params . aperture : 0 . 025 ; var maxblur:==:( params . maxblur !    undefined ) ? params . maxblur : 1 . 0 ;
var end = state . end ; var subscriber:==:state . subscriber ;
var connect = imports [ ' collab . connect ' ] ; var workspace:==:imports [ ' collab . workspace ' ] ;
var nconf = require ( ' nconf ' ) ; var assert:==:require ( ' assert ' ) ;
var chalk = require ( ' chalk ' ) ; var util:==:require ( ' util ' ) ;
var name = enc ( elm . name ) ; var type:==:elm . type . toLowerCase ( ) ;
var NUMBER1 = C . NUMBER1 = 0x51 ; var NUMBER3:==:C . NUMBER3    0x53 ;
var text = child . getChildNode ( ' # text ' ) ; var name:==:child . getChildNode ( ' name ' ) ;
var syntheticEvent = require ( ' syntheticEvent ' ) ; var inputValueTracking:==:require ( ' inputValueTracking ' ) ;
var rowStopIndex = _ ref6 . rowStopIndex ; var onRowsRendered:==:this . props . onRowsRendered ;
var xScale2 = chart . scales . xScale2 ; var xScale3:==:chart . scales . xScale3 ;
var tryCatch1 = util . tryCatch1 ; var errorObj:==:util . errorObj ;
var options = grunt . option ( ' grunt - chrome - build - options ' ) ; var buildDir:==:options . buildDir ;
var file = files [ filename ] ; var match:==:filename . match ( markupRegEx ) ;
var dirname = _ path2 . default . dirname ( this . opts . filename )  |  |  process . cwd ( ) ; var parser:==:( 0 , _ resolve2 . default ) ( parserOpts . parser , dirname ) ;
var path = db . options . path ; var log:==:ctx . log ;
var svg = this . svg ; var desc:==:this . desc ;
var command = event . detail . command ; var direction:==:event . detail . direction ;
var b = this . b ; var r1:==:this . r1 ;
var i = this . ij [ 0 ] ; var j:==:this . ij [ 1 ] ;
var text = data . text ; var userId:==:userIds . userId ;
var currentConfig = config . build . currentConfig ; var buildConfiguration:==:config . buildConfigurations [ currentConfig ] ;
var client = this . client ; var section:==:client . api . page . simplePageObj ( ) . section . signUp ;
var domProperty = require ( ' domProperty ' ) ; var must_use_property:==:domProperty . injection . must_use_property ;
var objectId = mongoose . schema . types . objectId ; var schema:==:mongoose . schema ;
var oldLen = unpacked . oldLen ; var newLen:==:unpacked . newLen ;
var aspect = ( params . aspect ! = = undefined ) ? params . aspect : camera . aspect ; var aperture:==:( params . aperture !    undefined ) ? params . aperture : 0 . 025 ;
var index = stack . indexOf ( message ) ; var actual:==:err . actual ;
var scope = options . scope ; var scrollView:==:options . scrollView ;
var parseuri = _ dereq _ ( ' parseuri ' ) ; var debug:==:_ dereq _ ( ' debug ' ) ( ' socket . io - client : url ' ) ;
var foreColor = colorInfo . foreColor ; var backColor:==:colorInfo . backColor ;
var curr = state . tokens . curr ; var val:==:state . tokens . curr . value ;
var position = camera3D . position ; var direction:==:camera3D . direction ;
var surfaceHeight = rectangleGeometry . _ surfaceHeight ; var extrude:==:rectangleGeometry . _ extrude ;
var style = options . style ; var styleSpec:==:options . styleSpec ;
var docId = data . docId ; var userId:==:userIds . userId ;
var el = createUiSelect ( theme : ' select2 ' , allowClear : ' isClearAllowed ' ) ; var $ select:==:el . scope ( ) . $ select ;
var assert = require ( ' assert ' ) ; var url:==:require ( ' url ' ) ;
var doc = wrap ( document ) ; var body:==:doc . body ;
var removeWatch = ! ! scope . $ eval ( attrs . removeWatch ) ; var useTimeout:==:! ! scope . $ eval ( attrs . useTimeout ) ;
var Properties = domPropertyConfig . properties  |  |  ; var domAttributeNamespaces:==:domPropertyConfig . domAttributeNamespaces  |  |  ;
var close = ' close ' ; var inner:==:' inner ' ;
var hostname = options . hostname ; var port:==:options . port ;
var index = options . index  |  |  100 ; var height:==:options . height  |  |  ' ' ;
var oneOfType = _ react . propTypes . oneOfType ; var element:==:_ react . propTypes . element ;
var watcher = imports . watcher ; var focusManager:==:imports . focusManager ;
var getGlyphsUnicode = coreGlyphList . getGlyphsUnicode ; var getDingbatsGlyphsUnicode:==:coreGlyphList . getDingbatsGlyphsUnicode ;
var children = _ props2 . children ; var className:==:_ props2 . className ;
var pie = this . pie ; var key:==:this . key ;
var x = new symbolNode ( ' x ' ) ; var d:==:new assignmentNode ( a , x ) ;
var origin = originator . element ; var bounds:==:originator . bounds ;
var cos = spine . mathUtils . cosDeg ( rotation ) ; var sin:==:spine . mathUtils . sinDeg ( rotation ) ;
var Platform = require ( ' Platform ' ) ; var backAndroid:==:require ( ' backAndroid ' ) ;
var b = rejectThenableSoon ( ' rejected - b ' , 30 ) ; var c:==:rejectBuiltInSoon ( ' rejected - c ' , 10 ) ;
var m = sinon . create ( matcher ) ; var type:==:sinon . typeOf ( expectation ) ;
var predicate = _ _ isFunction ( predicateOrItem ) ? predicateOrItem : undefined ; var l:==:array . length ;
var s = ref . s ; var v:==:ref . v ;
var slicePartitions = ellipsoid . slicePartitions ; var outlineWidth:==:ellipsoid . outlineWidth ;
var receiver = options & & options . receiver ; var ready:==:options & & options . ready ;
var Matrix = math . type . Matrix ; var denseMatrix:==:math . type . denseMatrix ;
var bottom = options . bottom ; var top:==:options . top ;
var NUMBER_UNARY_OPERATORS = exports . NUMBER_UNARY_OPERATORS = [ ' + ' , ' - ' , ' + + ' , ' -- ' , ' ~ ' ] ; var STRING_UNARY_OPERATORS:==:exports . STRING_UNARY_OPERATORS    [ ' typeof ' ] ;
var ace = imports . ace ; var util:==:imports [ ' collab . util ' ] ;
var geometry = object . geometry ; var materials:==:object . materials ;
var jshint = require ( ' gulp - jshint ' ) ; var watch:==:require ( ' gulp - watch ' ) ;
var parent = node . parentNode ; var nextSibling:==:node . nextSibling ;
var Driver = require ( ' marionette - client ' ) . Drivers . Promises ; var net:==:require ( ' net ' ) ;
var semiMajorAxis = property . getValueOrUndefined ( ellipse . semiMajorAxis , time ) ; var semiMinorAxis:==:property . getValueOrUndefined ( ellipse . semiMinorAxis , time ) ;
var testLib    = fs . readFileSync ( testLibName , ' utf8 ' ) ; var jsdom:==:require ( ' jsdom - nogyp ' ) . jsdom ;
var accessList = tab . pane . meta . accessList ; var index:==:accessList . indexOf ( tab ) ;
var config = state . output & & state . output . config  |  |  session . config ; var command:==:config . command  |  |  ' ' ;
var createUseStrictDirective = parseTreeFactory . createUseStrictDirective ; var createVariableDeclaration:==:parseTreeFactory . createVariableDeclaration ;
var clipboard = imports . clipboard ; var commands:==:imports . commands ;
var bubble = imports [ ' notification . bubble ' ] ; var timeslider:==:imports . timeslider ;
var beforeOpeningCurlyBrace = this . _ beforeOpeningCurlyBrace ; var exceptions:==:this . _ exceptions ;
var logErrors = _ options$logErrors = = = undefined ? true : _ options$logErrors ; var collapsed:==:options . collapsed ;
var node = _ ref2 . node ; var key:==:node . key ;
var layout = imports . layout ; var ui:==:imports . ui ;
var scope = $ timepicker . $ scope ; var lang:==:options . lang ;
var name = identify . name ( ) ; var email:==:identify . email ( ) ;
var hour = parseInt ( $ ( ' . edit . ' + i d + ' . edit - alarm - hour ' ) . val ( ) ) ; var minute:==:parseInt ( $ ( ' . edit . ' + i d + ' . edit - alarm - minute ' ) . val ( ) ) ;
var getClosestAncestorIn = dom . getClosestAncestorIn ; var getNodeLength:==:dom . getNodeLength ;
var fakeGroupRow = window . fakeGroupRow ; var fakeSumRow:==:window . fakeSumRow ;
var util = require ( ' util ' ) ; var async:==:require ( ' async ' ) ;
var width = options . width ; var height:==:options . height ;
var item = event . detail . item ; var groupItems:==:this . _ groupItems ;
var touchableHighlight = require ( ' touchableHighlight ' ) ; var touchableOpacity:==:require ( ' touchableOpacity ' ) ;
var areas = this . areas = options . areas ; var tooltipOverlay:==:this . tooltipOverlay    options . tooltipOverlay ;
var cubicAt = curveTool . cubicAt ; var quadraticDerivativeAt:==:curveTool . quadraticDerivativeAt ;
var fs = require ( ' fs ' ) ; var stringDecoder:==:require ( ' string_decoder ' ) . stringDecoder ;
var timeBar = this . _ timeBarEle ; var seconds:==:julianDate . secondsDifference ( this . _ scrubJulian , this . _ startJulian ) ;
var components = exports . components = oneOfType ( [ component , object ] ) ; var route:==:exports . route    oneOfType ( [ object , element ] ) ;
var name = item . name ; var description:==:item . description  |  |  ' No description ' ;
var node = observer . nodes _ [ i ] ; var registrations:==:registrationsTable . get ( node ) ;
var debounceCore = require ( ' debounceCore ' ) ; var emptyFunction:==:require ( ' emptyFunction ' ) ;
var store = core . storeFactory . get ( storeName ) ; var trans:==:db . transaction ( store . _ dependentStores , ' readwrite ' ) ;
var callbackArguments = getChangingValue ( stub , ' callbackArguments ' ) ; var callbackContext:==:getChangingValue ( stub , ' callbackContexts ' ) ;
var value = ref . value ; var oldValue:==:ref . oldValue ;
var assert = scope . assert ; var mixin:==:scope . mixin ;
var c = ' print ( ' c ' ) ' ; var d:==:' ' d ' ' ;
var degToRad = three . math . degToRad ; var warn:==:debug ( ' components : light : warn ' ) ;
var oldValue = event . detail . oldValue ; var sortFunction:==:this . _ sortFunction ;
var x86 = path . join ( profileDir , ' x86 ' ) ; var amd64:==:path . join ( profileDir , ' amd64 ' ) ;
var deltaY = defaultValue ( options . deltay , 0 ) ; var deltaz:==:defaultValue ( options . deltaz , 0 ) ;
var v = verts [ i ] ; var edge:==:pointInPolygon_edge ;
var dispatchListeners = event . _ dispatchListeners ; var dispatchiDs:==:event . _ dispatchiDs ;
var gulp = require ( ' gulp ' ) ; var Server:==:require ( ' karma ' ) . Server ;
var d = this . z . redMul ( p . z . redAdd ( p . z ) ) ; var e:==:b . redSub ( a ) ;
var columns = $ ( ' # grid_'+ this . name + ' _ columns ' ) ; var fcolumns:==:$ ( ' # grid_'+ this . name + ' _ fcolumns ' ) ;
var Util = sharedUtil . util ; var createPromiseCapability:==:sharedUtil . createPromiseCapability ;
var getDingbatsGlyphsUnicode = coreGlyphList . getDingbatsGlyphsUnicode ; var isoAdobeCharset:==:coreCharsets . isoAdobeCharset ;
var updatable = options . updatable ; var sideOrientation:==:options . sideOrientation  |  |  babylon . mesh . defaultside ;
var context = separateDynamic ( options . context  |  |  ) ; var uniforms:==:separateDynamic ( options . uniforms  |  |  ) ;
var anchorOffset = selection . anchorOffset ; var focusNode:==:selection . focusNode ;
var Dummy2 = mongoose . model ( ' Dummy2 ' , dummy2Schema ) ; var dummy3:==:mongoose . model ( ' dummy3 ' , dummy3Schema ) ;
var Survey = Parse . Object . extend ( ' Survey ' ) ; var surveyResult:==:parse . object . extend ( ' surveyResult ' ) ;
var name = this . transformAny ( tree . name ) ; var annotations:==:this . transformList ( tree . annotations ) ;
var b = fulfillThenableSoon ( ' b ' , 30 ) ; var c:==:fulfillThenableSoon ( ' c ' , 10 ) ;
var info = imports . info ; var api:==:imports . api ;
var FS = o . FS ! = = undefined ? o . FS : ' , ' , fs = FS . charCodeAt ( 0 ) ; var rs:==:o . rs !    undefined ? o . rs : ' \n ' , rs    rs . charCodeAt ( 0 ) ;
var valueFormatter = powerbi . visuals . valueFormatter ; var selectionIdBuilder:==:powerbi . visuals . selectionIdBuilder ;
var MIDNUM = ci . MIDNUM ; var NUMERIC:==:ci . NUMERIC ;
var columnNumber = this . profileNode . columnNumber ? this . profileNode . columnNumber - 1 : 0 ; var target:==:this . tree . profileView . target ( ) ;
var radius = options . radius  |  |  1 ; var tessellation:==:options . tessellation  |  |  64 ;
var invariant = require ( ' invariant ' ) ; var nullthrows:==:require ( ' nullthrows ' ) ;
var matrixWorld = this . matrixWorld ; var threshold:==:raycaster . params . points . threshold ;
var cql = document . getElementById ( ' cql ' ) ; var output:==:document . getElementById ( ' output ' ) ;
var createCallExpression = parseTreeFactory . createCallExpression ; var createCallStatement:==:parseTreeFactory . createCallStatement ;
var orientation = defaultValue ( options . orientation , defaultValue . empty_object ) ; var mode:==:this . _ mode ;
var format = require ( ' util ' ) . format ; var fs:==:require ( ' fs ' ) ;
var settings = imports . settings ; var commands:==:imports . commands ;
var crypto = require ( ' crypto ' ) ; var http:==:require ( ' http ' ) ;
var GW = this . computeGW ( ) ; var giMf:==:this . computeGiMf ( ) ;
var Annotation = coreAnnotation . annotation ; var annotationFactory:==:coreAnnotation . annotationFactory ;
var imageResizeMode = require ( ' imageResizeMode ' ) ; var layoutPropTypes:==:require ( ' layoutPropTypes ' ) ;
var status = yargs . argv . status ; var message:==:yargs . argv . message ;
var textRenderingMode = sharedUtil . textRenderingMode ; var uint32ArrayView:==:sharedUtil . uint32ArrayView ;
var domAttributeNamespaces = domPropertyConfig . domAttributeNamespaces  |  |  ; var domAttributeNames:==:domPropertyConfig . domAttributeNames  |  |  ;
var db = client . db ( scenario . database_name ) ; var collection:==:db . collection ( scenario . collection_name ) ;
var banner = find ( ' . banner ' ) ; var alert:==:find ( ' . alert ' ) ;
var VERTICAL_ORIGIN_INDEX = Billboard . VERTICAL_ORIGIN_INDEX ; var SCALE_INDEX:==:Billboard . SCALE_INDEX ;
var anchor = lastSelection . anchorMark . find ( ) ; var head:==:lastSelection . headMark . find ( ) ;
var flags = scope . flags ; var forSubtree:==:scope . forSubtree ;
var legendIcon = powerbi . visuals . legendIcon ; var appendClearCatcher:==:powerbi . visuals . appendClearCatcher ;
var warn = sharedUtil . warn ; var tilingPattern:==:displayPatternHelper . tilingPattern ;
var title = $ slide . data ( ' title ' )  |  |  '' ; var active:==:options . className . active ;
var div = $ ( ' div#cd ' + d . comment_id ) ; var data:==:div . data ( ' comment ' ) ;
var endsText = viewData . endsText ; var showLabel:==:zrUtil . retrieve ( visualMapModel . get ( ' showLabel ' , true ) , ! endsText ) ;
var onRowDoubleClick = _ ref . onRowDoubleClick ; var onRowMouseOver:==:_ ref . onRowMouseOver ;
var blockTree = require ( ' blockTree ' ) ; var draftModifier:==:require ( ' draftModifier ' ) ;
var fromWorldPoint = orbitCameraInputTouch . fromWorldPoint ; var toWorldPoint:==:orbitCameraInputTouch . toWorldPoint ;
var getInterval = axisBuilder . getInterval ; var ifIgnoreOnTick:==:axisBuilder . ifIgnoreOnTick ;
var identifierExpression = traceur . syntax . trees . identifierExpression ; var keywords:==:traceur . syntax . keywords ;
var bsonRegExp = typeof options [ ' bsonRegExp ' ] = = ' boolean ' ? options [ ' bsonRegExp ' ] : false ; var promoteBuffers:==:options [ ' promoteBuffers ' ]     null ? false : options [ ' promoteBuffers ' ] ;
var test = helper . test ; var PORT:==:process . env . UNIT_TEST_PORT  |  |  0 ;
var redirect = encodeuriComponent ( hello . settings . redirect_uri + ' ? ' + hello . utils . param ( callback : callbackid , result : json . stringify ( force : true ) , state : '' ) ) ; var token:==:( options . authResponse  |  |  ) . access_token ;
var ctx = this . ctx ; var strokeColor:==:this . current . strokeColor ;
var iframe = document . i d ( params . iframe ) ; var onload:==:props . onload  |  |  $ empty ;
var remove = this . removeCondition _ ( mapBrowserEvent ) ; var toggle:==:this . toggleCondition _ ( mapBrowserEvent ) ;
var height = _ props7 . height ; var isScrollingChange:==:_ props7 . isScrollingChange ;
var rotation = defaultValue ( options . rotation , 0 . 0 ) ; var extrudedHeight:==:options . extrudedHeight ;
var data = this . _ data ; var headers:==:this . _ metadata . _ headers ;
var edit = self . edit ; var body:==:edit . doc . body ;
var onClick = _ props3 . onClick ; var onFocus:==:_ props3 . onFocus ;
var _ malloc = Module [ ' _ malloc ' ] = asm [ ' _ malloc ' ] ; var _ free:==:Module [ ' _ free ' ]    asm [ ' _ free ' ] ;
var li = document . createElement ( ' li ' ) ; var label:==:document . createElement ( ' label ' ) ;
var predictorStream = coreStream . predictorStream ; var runLengthStream:==:coreStream . runLengthStream ;
var blueGrey400 = exports . blueGrey400 = ' # 78909c ' ; var blueGrey500:==:exports . blueGrey500    ' # 607d8b ' ;
var tree = new goog . ui . tree . treeControl ( ' tree ' ) ; var a:==:new goog . ui . tree . treeNode ( ' a ' ) ;
var measurements = flush . measurements ; var treeSnapshot:==:flush . treeSnapshot ;
var SWITCH_STATEMENT = ' SWITCH_STATEMENT ' ; var SYNTAX_ERROR_TREE:==:' SYNTAX_ERROR_TREE ' ;
var spawn = require ( ' child_process ' ) . spawn ; var Agent:==:require ( ' smith ' ) . Agent ;
var passport = require ( ' passport ' ) ; var oauth2orize:==:require ( ' oauth2orize ' ) ;
var failTaskOnError = argv . failTaskOnError ? argv . failTaskOnError : false ; var suppressPassed:==:argv . suppressPassed ? argv . suppressPassed : false ;
var miscCounters = document . getElementById ( ' miscCounters ' ) ; var help01:==:document . getElementById ( ' help01 ' ) ;
var totalSize = this . _ totalSizedip ( ) ; var zoomFactor:==:this . _ constraintsInDip ? 1 : webInspector . zoomManager . zoomFactor ( ) ;
var width = target ? target . width : device . width ; var height:==:target ? target . height : device . height ;
var createAssignStateStatement = parseTreeFactory . createAssignStateStatement ; var createBlock:==:parseTreeFactory . createBlock ;
var x = bounds . x ; var interpolate:==:primaryGrid . interpolate ;
var dataShapeBindingDataReduction = powerbi . data . dataShapeBindingDataReduction ; var inheritSingle:==:powerbi . prototype . inheritSingle ;
var username = this . options . username ; var key:==:this . options . accesKey  |  |  this . options . access_key  |  |  this . options . password ;
var b2j = this . b2j ; var isbjunk:==:this . isbjunk ;
var vertices = data . vertices ; var primitives:==:data . primitives ;
var selection = selections [ i ] ; var line:==:codeMirror . getLine ( selection . head . line ) ;
var groupKey = item . groupKey ; var groupItem:==:groupItems [ groupKey ] ;
var secret = this . req . secret ; var signed:==:options . signed ;
var w = _ _ browserGetter . availWidth ( this . _ frame ) ; var h:==:_ _ browserGetter . availHeight ( this . _ frame ) ;
var a = opt_a  |  |  1 ; var theta:==:opt_theta  |  |  Math . PI * 1 . 5 ;
var velocityX = e . gesture . velocityX ; var x:==:e . gesture . center . x ;
var openfiles = imports . openfiles ; var commands:==:imports . commands ;
var url = Npm . require ( ' url ' ) ; var path:==:Npm . require ( ' path ' ) ;
var model = element ( by . binding ( ' model ' ) ) ; var input:==:element ( by . i d ( ' input ' ) ) ;
var csv = require ( ' csv ' ) ; var assert:==:require ( ' assert - plus ' ) ;
var indices = this . indices ; var colors:==:this . colors ;
var a = new constantNode ( 2 ) ; var n:==:new functionAssignmentNode ( ' f ' , [ ' x ' ] , a ) ;
var axon   = require ( ' pm2-axon ' ) ; var debug:==:require ( ' debug ' ) ( ' pm2 : satan ' ) ;
var word = options & & options . word  |  |  WORD ; var range:==:options & & options . range  |  |  RANGE ;
var asyncQueue = $ rootScope . $ $ asyncQueue = [ ] ; var postDigestQueue:==:$ rootScope . $ $ postDigestQueue    [ ] ;
var fs = require ( ' fs ' ) ; var escape:==:utils . escape ;
var Matrix = math . type . Matrix ; var Help:==:math . type . Help ;
var operation = req . service . api . operations [ req . operation ] ; var authtype:==:operation ? operation . authtype : '' ;
var allowSwipeToPrev = s . params . allowSwipeToPrev ; var allowSwipeToNext:==:s . params . allowSwipeToNext ;
var isInt = sharedUtil . isInt ; var stringToBytes:==:sharedUtil . stringToBytes ;
var pathMap = ref . pathMap ; var nameMap:==:ref . nameMap ;
var F32 = new primitiveType ( ' f32 ' , 4 , ' f ' ) ; var f64:==:new primitiveType ( ' f64 ' , 8 , 'd ' ) ;
var handleScrollx = this . _ handleScrollx ( deltax , deltay ) ; var handleScrolly:==:this . _ handleScrolly ( deltay , deltax ) ;
var path = derivedInfo . path ; var scope:==:logic . subscope ( this , _ path : path ) ;
var r = Math . round ( Garden . random ( rmin , rmax ) ) ; var g:==:Math . round ( Garden . random ( gmin , gmax ) ) ;
var startedTime = logEntry . startedTime ; var action:==:logEntry . action ;
var spreadTransformer = traceur . codegeneration . spreadTransformer ; var uniqueIdentifierGenerator:==:traceur . codegeneration . uniqueIdentifierGenerator ;
var formatDate = calendar . formatDate ; var calculateWeekNumber:==:calendar . calculateWeekNumber ;
var util = require ( ' util ' ) ; var url:==:require ( ' url ' ) ;
var d = readmpInt ( der , ' private exponent ' ) ; var p:==:readmpInt ( der , ' prime1 ' ) ;
var overscanCellsCount = _ ref . overscanCellsCount ; var scrollDirection:==:_ ref . scrollDirection ;
var utils = client . utils ; var translate:==:client . translate ;
var a = _ WinRT . Windows . UI . Core . animationMetrics , animationDescription = new a . animationDescription ( a . animationEffect . showPanel , a . animationEffectTarget . primary ) ; var animations:==:animationDescription . animations ;
var x = ( ' xoffset ' in parameters ) ? parameters [ ' xoffset ' ] : null ; var y:==:( ' yoffset ' in parameters ) ? parameters [ ' yoffset ' ] : null ;
var page2 = element ( by . i d ( ' page2 ' ) ) ; var page3:==:element ( by . i d ( ' page3 ' ) ) ;
var isVisible = evt . detail . isVisible ; var timer:==:this . timer ;
var commandList = frameState . commandList ; var passes:==:frameState . passes ;
var registerObject = scope . registerObject ; var registerWrapper:==:scope . registerWrapper ;
var bind = require ( ' bind ' ) ; var when:==:require ( ' when ' ) ;
var path = require ( ' path ' ) ; var closure:==:require ( ' closure - util ' ) ;
var merge = require ( ' merge - stream ' ) ; var child_process:==:require ( ' child_process ' ) ;
var container = self . container ; var canvas:==:self . canvas ;
var dy2 = mxUtils . getValue ( this . style , ' dy2 ' , ' 0 ' ) ; var dx3:==:mxUtils . getValue ( this . style , ' dx3 ' , ' 0 ' ) ;
var descriptor = extension . descriptor ( ) ; var bindings:==:descriptor [ ' bindings ' ] ;
var width = node . getBoundingClientRect ( ) . width ; var height:==:node . getBoundingClientRect ( ) . height ;
var entry = this . getAnchor ( nextRecord . entryAnchor ) ; var exit:==:this . getAnchor ( curRecord . exitAnchor ) ;
var expressions = tree . expressions ; var expression:==:expressions [ expressions . length - 1 ] ;
var preview = imports . preview ; var terminal:==:imports . terminal ;
var timeoutMs = opts . timeoutMs  |  0 ; var now:==:date . now ( ) ;
var arrayExtensions = jsCommon . arrayExtensions ; var inheritSingle:==:powerbi . prototype . inheritSingle ;
var item = this . props . item ; var type:==:item . type ;
var Divider = imports . Divider ; var panels:==:imports . panels ;
var radius = radiusAxis . dataToRadius ( data [ 0 ] ) ; var angle:==:angleAxis . dataToAngle ( data [ 1 ] ) ;
var languagePre = document . getElementById ( ' languagePre ' ) ; var languageta:==:document . getElementById ( ' languageta ' ) ;
var fontSize = helpers . getValueOrDefault ( pointLabelOptions . fontSize , globalDefaults . defaultFontSize ) ; var fontStyle:==:helpers . getValueOrDefault ( pointLabelOptions . fontStyle , globalDefaults . defaultFontStyle ) ;
var x = Cartesian3 . dot ( this . _ xAxis , v ) ; var y:==:cartesian3 . dot ( this . _ yAxis , v ) ;
var transformation = codingStyleParameters . transformation ; var precision:==:context . components [ c ] . precision ;
var http = require ( ' http ' ) ; var morgan:==:require ( ' morgan ' ) ;
var probe = pmx . probe ( ) ; var http:==:require ( ' http ' ) ;
var git = require ( ' gulp - git ' ) ; var gulp:==:require ( ' gulp ' ) ;
var localVideo = document . querySelector ( ' div#localVideo video ' ) ; var remoteVideo:==:document . querySelector ( ' div#remoteVideo video ' ) ;
var offset = renderSession . offset ; var shader:==:renderSession . shaderManager . stripShader ;
var args = JSON . parse ( target . getAttribute ( ' data - args ' ) ) ; var file:==:target . getAttribute ( ' data - file ' ) ;
var deviceNameService = _ appJsServicesDeviceNameService [ ' default ' ] ; var httpClientService:==:_ appJsServicesHttpClientService [ ' default ' ] ;
var args = util . args ; var Server:==:require ( ' karma ' ) . Server ;
var character = position . character + 1 ; var message:==:ts . flattenDiagnosticMessageText ( diagnostic . messageText , ' \n ' ) ;
var xj = ContactEquation_getImpactVelocityAlongNormal_xj ; var relVel:==:contactequation_getimpactvelocityalongnormal_relvel ;
var fs = require ( ' fs ' ) ; var gulp:==:require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ;
var cs_lu = math . sparse . cs_lu ; var cs_sqr:==:math . sparse . cs_sqr ;
var ARROWTYPE = Diagram . ARROWTYPE ; var PLACEMENT:==:Diagram . PLACEMENT ;
var aoa = aoasht [ 0 ] , ws = aoasht [ 1 ] ; var o:==:aoa_to_sheet ( aoa , opts ) ;
var util = require ( ' util ' ) ; var statuses:==:require ( ' statuses ' ) ;
var options   = this . options ; var pDiff:==:this . pDiff ;
var Readable = require ( ' readable - stream ' ) . Readable ; var xtend:==:require ( ' xtend ' ) ;
var gltf = model . gltf ; var nodes:==:gltf . nodes ;
var _ strlen = Module [ ' _ strlen ' ] = asm [ ' _ strlen ' ] ; var _ exitRecog:==:module [ ' _ exitRecog ' ]    asm [ ' _ exitRecog ' ] ;
var iconStyleLeft = _ props . iconStyleLeft ; var iconStyleRight:==:_ props . iconStyleRight ;
var util = require ( ' util ' ) ; var mkpath:==:require ( ' mkpath ' ) ;
var integration = require ( ' analytics . js - integration ' ) ; var iso:==:require ( ' to - iso - string ' ) ;
var interveningWhitespacePos = this . interveningWhitespacePos ; var leftCurlyCount:==:this . leftCurlyCount ;
var error = resp . error ; var req:==:resp . request ;
var lightBluea200 = exports . lightBluea200 = ' # 40c4ff ' ; var lightBluea400:==:exports . lightBluea400    ' # 00b0ff ' ;
var to = args . to ; var origin:==:args . origin ;
var mockery = require ( ' mockery ' ) ; var path:==:require ( ' path ' ) ;
var boundaryGap = this . get ( ' boundaryGap ' ) ; var splitNumber:==:this . get ( ' splitNumber ' ) ;
var assert = util . assert ; var Deferred:==:util . Deferred ;
var page = api . page . simplePageObj ( ) ; var section:==:page . section . signUp ;
var c = ( ( x + 1 ) * ( locGridSize . height + 1 ) + ( y + 1 ) ) ; var d:==:( x * ( locGridSize . height + 1 ) + ( y + 1 ) ) ;
var detail = evt . detail  |  |  ; var i d , timestamp , node:==:detail ;
var damping = Math . pow ( this . damping , dt ) ; var gravity:==:this . gravity ;
var b = new String ( ' b ' ) ; var c:==:new String ( ' c ' ) ;
var subtype = value . subtype ; var description:==:value . description ;
var sinon = require ( ' sinon ' ) ; var sep:==:pathFn . sep ;
var tab = tabs . focussedTab ; var path:==:tab & & tab . path ;
var canonical = require ( ' canonical ' ) ; var includes:==:require ( ' includes ' ) ;
var Breakpoint = debug . Breakpoint ; var Variable:==:debug . Variable ;
var color = data . getItemVisual ( dataIndex , ' color ' ) ; var opacity:==:data . getItemVisual ( dataIndex , ' opacity ' ) ;
var holes = options . holes  |  |  [ ] ; var depth:==:options . depth  |  |  0 ;
var purple600 = exports . purple600 = ' # 8e24aa ' ; var purple700:==:exports . purple700    ' # 7b1fa2 ' ;
var forInTransformPass = traceur . codegeneration . generator . forInTransformPass ; var state:==:traceur . codegeneration . generator . state ;
var gltf = model . gltf ; var buffers:==:gltf . buffers ;
var conditionalState = traceur . codegeneration . generator . conditionalState ; var continueState:==:traceur . codegeneration . generator . continueState ;
var m = adapter [ ' transform : get ' ] ( node , true ) . set ( 1,0,0,1,0,0 ) ; var filter:==:node . filters [ ident ] ;
var I32 = new primitiveType ( ' i32 ' , 4 , ' i ' , -0x80000000 , 0x7fffffff ) ; var u8:==:new primitiveType ( ' u8 ' , 1 , ' i ' , 0 , 255 ) ;
var set = subset ? toExpression ( subset ) : expression_escape ; var escapeOnly:==:settings . escapeOnly ;
var dots = this . dots = options . dots ; var areas:==:this . areas    options . areas ;
var debug = utils . debug ( ' core : a - entity : debug ' ) ; var warn:==:utils . debug ( ' core : a - entity : warn ' ) ;
var viewFormat = defaultValue ( queryStringValue ( link , ' viewFormat ' , namespaces . kml ) , defaultViewFormat ) ; var httpQuery:==:queryStringValue ( link , ' httpQuery ' , namespaces . kml ) ;
var valueArray = _ ref . valueArray ; var valueKey:==:_ ref . valueKey ;
var geometry = getGeometry ( data . geometry ) ; var material:==:getMaterial ( data . material ) ;
var height = jpxImage . height ; var componentsCount:==:jpxImage . componentsCount ;
var os = Npm . require ( ' os ' ) ; var path:==:Npm . require ( ' path ' ) ;
var norm = disp . norm ( )  |  |  1 ; var p:==:u . getPos ( p ) ;
var x = Math . abs ( args . start . x - args . pos . x ) ; var y:==:Math . abs ( args . start . y - args . pos . y ) ;
var clearTimeout = window . clearTimeout ; var clearInterval:==:window . clearInterval ;
var stencilTest = renderState . stencilTest ; var enabled:==:stencilTest . enabled ;
var POINTER_PEN = gestureDetector . pointer_pen = ' pen ' ; var event_start:==:gestureDetector . event_start    ' start ' ;
var INVALID_STATE_ERR    = exceptionCode . invalid_state_err    = ( ( exceptionMessage [ 11 ] = ' invalid state ' ) , 11 ) ; var syntax_err:==:exceptionCode . syntax_err       ( ( exceptionMessage [ 12 ]   ' syntax error ' ) , 12 ) ;
var Node = math . expression . node . Node ; var accessorNode:==:math . expression . node . accessorNode ;
var findInFunctionScope = traceur . codegeneration . findInFunctionScope ; var functionDeclaration:==:traceur . syntax . trees . functionDeclaration ;
var data = options . data ; var baseUrl:==:options . baseUrl ;
var canvas = self . canvas ; var aspectRatio:==:canvas . aspectRatio ;
var dynCall_v = Module [ ' dynCall_v ' ] = asm [ ' dynCall_v ' ] ; var dynCall_vifiii:==:Module [ ' dynCall_vifiii ' ]    asm [ ' dynCall_vifiii ' ] ;
var axis = axisInfo . axis ; var dim:==:axis . dim ;
var bottomPositions = pos . bottomPositions ; var topPositions:==:pos . topPositions ;
var modules = taffy ( members . modules ) ; var namespaces:==:taffy ( members . namespaces ) ;
var cellSizeAndPositionManager = _ ref . cellSizeAndPositionManager ; var previousCellsCount:==:_ ref . previousCellsCount ;
var line = getLine ( cm . view . doc , linen ) ; var visual:==:visualLine ( cm . view . doc , line ) ;
var debug = require ( ' debug ' ) ( ' nodemon ' ) ; var assert:==:require ( ' assert ' ) ;
var shelljs = require ( ' shelljs ' ) ; var chalk:==:require ( ' chalk ' ) ;
var line = pos . line + code . length - ( to . line - from . line ) - 1 ; var ch:==:pos . ch ;
var Group = graphic . Group ; var Rect:==:graphic . Rect ;
var cp = require ( dirs . core + ' cp ' ) ; var adapter:==:config [ config . adapter ] ;
var symbol = instance . getAttribute ( ' symbol ' ) ; var target:==:instance . getAttribute ( ' target ' ) ;
var width = this . width , height = this . height ; var neighborsSignificance:==:this . neighborsSignificance ;
var viewport = Crafty . viewport ; var options:==:this . options ;
var buf = new sshBuffer ( buffer : data ) ; var d:==:buf . readBuffer ( ) ;
var operand = this . transformAny ( tree . left . operand ) ; var memberName:==:tree . left . memberName ;
var content = contents [ i ] ; var select:==:content . select ;
var ms2DateTime = lib . ms2DateTime ; var dateTime2ms:==:lib . dateTime2ms ;
var keys = opts . keys ; var descending:==:' descending ' in opts ? opts . descending : false ;
var O_APPEND = constants . O_APPEND  |  |  0 ; var O_CREAT:==:constants . O_CREAT  |  |  0 ;
var categoryDim = opt . categoryDim ; var valueDim:==:opt . valueDim ;
var proc = imports . proc ; var vfs:==:imports . vfs ;
var host = parse ( url ) . hostname ; var match:==:host . match ( regexp ) ;
var touchableWithoutFeedback = require ( ' touchableWithoutFeedback ' ) ; var ensurePositiveDelayProps:==:require ( ' ensurePositiveDelayProps ' ) ;
var symbolOffset = seriesScope & & seriesScope . symbolOffset ; var labelModel:==:seriesScope & & seriesScope . labelModel ;
var p   = require ( ' path ' ) ; var util:==:require ( ' util ' ) ;
var records = this . observer . records _ ; var length:==:records . length ;
var sinon = require ( ' sinon ' ) ; var proxyquire:==:require ( ' proxyquire ' ) ;
var type = ' modules : ' + src + ' : ' + args . type ; var path:==:require ( ' path ' ) . join ( my . session . session_id ( ) , src , args . path ) ;
var after = test . after ; var beforeEach:==:test . beforeEach ;
var column = _ ref4 . column ; var columnIndex:==:_ ref4 . columnIndex ;
var ROTATION_INDEX = Billboard . ROTATION_INDEX ; var ALIGNED_AXIS_INDEX:==:Billboard . ALIGNED_AXIS_INDEX ;
var pos = this . position ( ) ; var size:==:this . size ( ) ;
var safeApply = leafletHelpers . safeApply ; var isDefined:==:leafletHelpers . isDefined ;
var abs = Math . abs ; var diveq:==:numeric . diveq ;
var nextTick = $ mdUtil . nextTick ; var timeout:==:nextTick . timeout ;
var node = this . _ node ; var rect:==:cc . rect ( 0 , 0 , node . _ contentSize . width , node . _ contentSize . height ) ;
var containerSize = _ ref6 . containerSize ; var offset:==:_ ref6 . offset ;
var tooltipManager = powerbi . visuals . tooltipManager ; var appendClearCatcher:==:powerbi . visuals . appendClearCatcher ;
var value = element ( by . binding ( ' value  |  date : ' yyyy - Www ' ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var GAIA_DISTRIBUTION_DIR = utils . getEnv ( ' gaia_distribution_dir ' ) ; var gaia_app_srcdirs:==:utils . getEnv ( ' gaia_app_srcdirs ' ) ;
var $ = window . $ ; var _:==:window . _ ;
var onTouchTap = _ props3 . onTouchTap ; var style:==:_ props3 . style ;
var left = trashRect . left + this . sprite_left _ - this . margin_hotspot _ ; var top:==:trashRect . top + this . sprite_top _ - this . margin_hotspot _ ;
var document = window . document ; var documentElement:==:document . documentElement ;
var def = exp . definition ( ) ; var fixed:==:exp . fixed_value ( ) ;
var d = bn . fromBits ( h . toBits ( vectors [ i ] . d ) ) ; var x:==:bn . fromBits ( h . toBits ( vectors [ i ] . qx ) ) ;
var attribute = spec . attribute ; var value:==:spec . value ;
var rtl = ! ! options [ ' rtl ' ] ; var horizontalLayout:==:options [ ' horizontalLayout ' ] ;
var exportMapping = traceur . syntax . trees . exportMapping ; var exportMappingList:==:traceur . syntax . trees . exportMappingList ;
var margin = style & & resolveBoxStyle ( ' margin ' , style )  |  |  blank ; var padding:==:style & & resolveBoxStyle ( ' padding ' , style )  |  |  blank ;
var clone = zrUtil . clone ; var map:==:zrUtil . map ;
var tabManager = imports . tabManager ; var commands:==:imports . commands ;
var clone = require ( ' gulp - clone ' ) ; var plumber:==:require ( ' gulp - plumber ' ) ;
var url = options . url ; var cacheKey:==:defaultValue ( options . cacheKey , getAbsoluteUri ( url ) ) ;
var async = require ( ' async ' ) ; var partials:==:require ( ' express - partials ' ) ;
var width = _ ref . width ; var x:==:_ ref . x ;
var force = this . force ; var disp:==:this . disp ;
var loadResources = this . _ loadResources ; var incrementallyLoadTextures:==:this . _ incrementallyLoadTextures ;
var margin = resolveBoxStyle ( ' margin ' , style ) ; var padding:==:resolveBoxStyle ( ' padding ' , style ) ;
var destination = this . _ destination ; var writeQueue:==:this . _ writeQueue ;
var diameterBottom = ( options . diameterBottom = = = 0 ) ? 0 : options . diameterBottom  |  |  options . diameter  |  |  1 ; var tessellation:==:options . tessellation  |  |  24 ;
var scrollX = this . _ mc . scrollX ; var scrollY:==:this . _ mc . scrollY ;
var unselect = t . unselect ; var daySelectionMousedown:==:t . daySelectionMousedown ;
var splitLongWords = _ require . splitLongWords ; var truncateString:==:_ require . truncateString ;
var proxyReq = getProxyReqFunctions ( opt . get ( ' proxyReq ' ) , opt , bs ) ; var proxyRes:==:getProxyResFunctions ( opt . get ( ' proxyRes ' ) , opt ) ;
var center = seriesModel . get ( ' center ' ) ; var radius:==:seriesModel . get ( ' radius ' ) ;
var Plugin = imports . Plugin ; var remote:==:imports . remote ;
var language = imports . language ; var c9:==:imports . c9 ;
var fixedDataTableColumn = require ( ' fixedDataTableColumn . react ' ) ; var fixedDataTableColumnGroup:==:require ( ' fixedDataTableColumnGroup . react ' ) ;
var jshint   = require ( ' gulp - jshint ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var appsHelper = _ jsLibHelpers . appsHelper ; var manifestHelper:==:_ jsLibHelpers . manifestHelper ;
var c = cells [ j ] ; var rowIndex:==:c . parentNode . rowIndex ;
var cos = Math . cos ( r ) ; var sin:==:Math . sin ( r ) ;
var has = Object . prototype . hasOwnProperty ; var onerror:==:window . onerror ;
var grappling = require ( ' grappling - hook ' ) ; var path:==:require ( ' path ' ) ;
var Person = db . model ( ' gh4631 ' , personSchema ) ; var blogPost:==:db . model ( ' gh4631_0 ' , blogPostSchema ) ;
var partials = require ( ' express - partials ' ) ; var flash:==:require ( ' connect - flash ' ) ;
var rowStartIndex = _ ref8 . rowStartIndex ; var rowStopIndex:==:_ ref8 . rowStopIndex ;
var commonmark = self . options . commonmark ; var pedantic:==:self . options . pedantic ;
var ssl = self . ssl ; var now:==:Timer . now ( ) ;
var forOfStatement = traceur . syntax . trees . forOfStatement ; var functionDeclaration:==:traceur . syntax . trees . functionDeclaration ;
var start = offsets [ j ] . start ; var count:==:offsets [ j ] . count ;
var containerSize = _ ref5 . containerSize ; var offset:==:_ ref5 . offset ;
var username = $ ( ' # username ' ) ; var password:==:$ ( ' # password ' ) ;
var ui = imports . ui ; var apf:==:imports . apf ;
var texturePath = this . texturePath  |  |  three . loader . prototype . extractUrlBase ( url ) ; var binaryPath:==:this . binaryPath  |  |  three . loader . prototype . extractUrlBase ( url ) ;
var semver = require ( ' semver ' ) ; var undefsafe:==:require ( ' undefsafe ' ) ;
var changeEventPlugin = require ( ' changeEventPlugin ' ) ; var domEventPluginOrder:==:require ( ' domEventPluginOrder ' ) ;
var nodes = this . sigInst . graph . nodes ( ) ; var prefix:==:this . sigInst . renderers [ self . config . rendererIndex ] . options . prefix ;
var parameterMap = kendo . data . transports [ ' odata ' ] . parameterMap ; var dataSource:==:kendo . data . dataSource ;
var isMobile = utils . device . isMobile ( ) ; var registerElement:==:re . registerElement ;
var cellLayoutManager = _ props3 . cellLayoutManager ; var className:==:_ props3 . className ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var emailFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' emailFieldTestObject ' ) ) ;
var dependencies = mout . object . values ( node . dependencies ) ; var version:==:! node . missing ? node . pkgMeta . _ release  |  |  node . pkgMeta . version : null ;
var Divider = imports . Divider ; var merge:==:imports . threewaymerge ;
var mimeType = data . mimeType ; var name:==:data . name ;
var l = $ ( target ) . offset ( ) . left+10 ; var t:==:$ ( target ) . offset ( ) . bottom-10 ;
var operator = path . node . operator ; var right:==:path . get ( ' right ' ) . resolve ( ) ;
var param = params [ pname ] ; var semantic:==:param . semantic ;
var htmlFor = props . htmlFor ; var onTouchTap:==:props . onTouchTap ;
var valueFormatter = powerbi . visuals . valueFormatter ; var createInteractivityService:==:powerbi . visuals . createInteractivityService ;
var hash = options . hash ; var base:==:options . base ;
var simpleOrientationSensor = windows . devices . sensors . simpleOrientationSensor ; var storageLibrary:==:windows . storage . storageLibrary ;
var left = $ ( ' < div > ' , ' class ' : ' label left ' ) ; var right:==:$ ( ' < div > ' , ' class ' : ' label right ' ) ;
var validateSort = localUtils . validateSort ; var reverseOptions:==:localUtils . reverseOptions ;
var from = this . from ; var to:==:this . to ;
var createEmptyParameterList = parseTreeFactory . createEmptyParameterList ; var createExpressionStatement:==:parseTreeFactory . createExpressionStatement ;
var layout = imports . layout ; var endpoint:==:imports [ ' vfs . endpoint ' ] ;
var minervaAnimationDuration = powerbi . visuals . animatorCommon . minervaAnimationDuration ; var svgUtil:==:powerbi . visuals . svgUtil ;
var textContent = object . getOwnPropertyDescriptor ( node . prototype , ' textContent ' ) ; var innerhtml:==:object . getOwnPropertyDescriptor ( element . prototype , ' innerhtml ' ) ;
var bind = require ( ' bind ' ) ; var clone:==:require ( ' clone ' ) ;
var hboxMain = plugin . getElement ( ' hboxMain ' ) ; var colRight:==:plugin . getElement ( ' colRight ' ) ;
var mData = _ fnGetObjectDataFn ( mDataSrc ) ; var mRender:==:oCol . mRender ? _ fnGetObjectDataFn ( oCol . mRender ) : null ;
var Heap = require ( ' Heap ' ) ; var invariant:==:require ( ' invariant ' ) ;
var a = aObj . _ startDatems ; var b:==:bObj . _ startDatems ;
var oldIndex = ev . detail . oldIndex ; var newIndex:==:ev . detail . newIndex ;
var _ main = Module [ ' _ main ' ] = asm [ ' _ main ' ] ; var _ realloc:==:Module [ ' _ realloc ' ]    asm [ ' _ realloc ' ] ;
var zlevelList = this . _ zlevelList ; var len:==:zlevelList . length ;
var canvas = this . game . canvas ; var parent:==:canvas . parentNode ;
var passwordException = sharedUtil . passwordException ; var statTimer:==:sharedUtil . statTimer ;
var long = ppo . long . result ; var macd:==:ppo . macd ;
var save = imports . save ; var watcher:==:imports . watcher ;
var isIOS = platformInfo . isios ; var isAndroid:==:platformInfo . isAndroid ;
var async = require ( ' async ' ) ; var multiline:==:require ( ' multiline ' ) ;
var preview = $ this . preview ; var codeMirror:==:$ this . codeMirror ;
var element = this . element ; var input:==:element . find ( ' input ' ) ;
var opt = t . opt ; var renderAgenda:==:t . renderAgenda ;
var totalWidth = this . options . totalWidth ; var keyArray:==:this . keyArrays . get ( totalWidth ) ;
var co = $ ( o . containment ) . offset ( ) ; var over:==:( $ ( ce ) . css ( ' overflow ' ) !   ' hidden ' ) ;
var r = convnetjs . randf ( 0 . 0 , 2 . 0 ) ; var t:==:convnetjs . randf ( 0 . 0 , 2*Math . pi ) ;
var recognizers = this . recognizers ; var curRecognizer:==:session . curRecognizer ;
var utf8StringToString = sharedUtil . utf8StringToString ; var warn:==:sharedUtil . warn ;
var ondone = options . ondone ; var onstatus:==:options . onstatus ;
var x = position . x ; var y:==:position . y ;
var actionSheetios = require ( ' actionSheetios ' ) ; var listContainer:==:require ( ' listContainer ' ) ;
var nodesWereAdded = scope . nodesWereAdded ; var nodesWereRemoved:==:scope . nodesWereRemoved ;
var multimeter = require ( ' pm2-multimeter ' ) ; var os:==:require ( ' os ' ) ;
var validator = require ( ' validator ' ) ; var async:==:require ( ' async ' ) ;
var router = _ props . router ; var history:==:_ props . history ;
var Client = firepad . Client ; var Cursor:==:firepad . Cursor ;
var dy1 = mxUtils . getValue ( this . style , ' dy1 ' , ' 0 ' ) ; var dx2:==:mxUtils . getValue ( this . style , ' dx2 ' , ' 0 ' ) ;
var valueFormatter = powerbi . visuals . valueFormatter ; var dataLabelUtils:==:powerbi . visuals . dataLabelUtils ;
var reactNativeFeatureFlags = require ( ' reactNativeFeatureFlags ' ) ; var reactNativeAttributePayload:==:require ( ' reactNativeAttributePayload ' ) ;
var touches = ev . touches & & ev . touches . length ? ev . touches : [ ev ] ; var e:==:ev . changedTouches & & ev . changedTouches [ 0 ]  |  |  touches [ 0 ] ;
var skip = that . listView . skip ( ) ; var length:==:data . length ;
var force = _ ref10$force = = = undefined ? false : _ ref10$force ; var value:==:_ ref10 . value ;
var csurf = require ( ' csurf ' ) ; var compress:==:require ( ' compression ' ) ;
var indigo300 = exports . indigo300 = ' # 7986cb ' ; var indigo400:==:exports . indigo400    ' # 5c6bc0 ' ;
var reactdomComponentTree = require ( ' reactdomComponentTree ' ) ; var reactInputSelection:==:require ( ' reactInputSelection ' ) ;
var tileHeight = defaultValue ( options . tileHeight , 256 ) ; var minimumLevel:==:defaultValue ( options . minimumLevel , 0 ) ;
var isFunction = leafletHelpers . isFunction ; var isDefined:==:leafletHelpers . isDefined ;
var webPlayer = require ( ' webPlayer ' ) ; var snackPlayer:==:require ( ' snackPlayer ' ) ;
var rule = this . _ cssParser . rules ( ) [ itemIndex ] ; var lineNumber:==:rule . lineNumber ;
var a = new largeObject ( 1 ) ; var b:==:new largeObject ( 2 ) ;
var title = $ this . attr ( ' title ' )  |  |  $ this . text ( ) ; var rel:==:$ this . attr ( ' rel ' )  |  |  ' _ blank ' ;
var ellipsoid = defaultValue ( scene . mapProjection . ellipsoid , ellipsoid . wgs84 ) ; var creditDisplay:==:scene . frameState . creditDisplay ;
var deepDiffer = require ( ' deepDiffer ' ) ; var flattenStyle:==:require ( ' flattenStyle ' ) ;
var fontColor = fontColorHelper . getColorForMeasure ( objects , ' ' ) ; var showTime:==:powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' popup ' ] [ ' showTime ' ] , pulseChart . defaultSettings . popup . showTime ) ;
var proxyquire = require ( ' proxyquire ' ) ; var path:==:require ( ' path ' ) ;
var target = this . vexpr ( ge . target , nexti ) ; var n:==:ge . ifs . length ;
var group = this . group ; var scale:==:geo . scale ;
var edgeNameOffset = snapshot . _ edgeNameOffset ; var strings:==:snapshot . strings ;
var from = Math . max ( update . visible . from - cm . options . viewportMargin , doc . first ) ; var to:==:math . min ( end , update . visible . to + cm . options . viewportMargin ) ;
var tileProvider = primitive . _ tileProvider ; var occluders:==:primitive . _ occluders ;
var yAxisPosition = powerbi . visuals . yAxisPosition ; var dataColorPalette:==:powerbi . visuals . dataColorPalette ;
var heightScale = structure . heightScale ; var exaggeration:==:meshData . exaggeration ;
var stringIteratorNextIndex = symbol ( ' stringIteratorNextIndex ' ) ; var stringIterator:==:function stringIterator ( ) ;
var frames = rotateTimeline . frames ; var bone:==:skeleton . bones [ rotateTimeline . boneIndex ] ;
var utils = hash . utils ; var assert:==:utils . assert ;
var db = mandreel_indexedDB . db ; var trans:==:db . transaction ( [ ' cache ' ] , idbTransaction . read_write ) ;
var range = sel . ranges [ i ] ; var from:==:range . from ( ) , to    range . to ( ) ;
var discussion = discussionList . shift ( ) ; var commentElt:==:commentEltMap [ discussion . discussionIndex ] ;
var s = this . _ createRootHostViewScope ( ) ; var hostProtoView:==:view_ref_1 . internalProtoView ( hostProtoViewRef ) ;
var request = options . request ; var config:==:options . config ;
var secure_distribution = option_consume ( options , ' secure_distribution ' , $ . cloudinary . config ( ) . secure_distribution ) ; var cname:==:option_consume ( options , ' cname ' , $ . cloudinary . config ( ) . cname ) ;
var nock = require ( ' nock ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var cloudinaryImageFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' cloudinaryImageFieldTestObject ' ) ) ; var textFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ;
var height = props . height ; var width:==:props . width ;
var removeEntitiesAtEdges = require ( ' removeEntitiesAtEdges ' ) ; var removeRangeFromContentState:==:require ( ' removeRangeFromContentState ' ) ;
var name = $ root . data ( ' name ' ) ; var version:==:$ root . data ( ' version ' ) ;
var collections = dataconfig . collections ; var db:==:dataconfig . db ;
var tty = require ( ' tty ' ) ; var util:==:require ( ' util ' ) ;
var parseuri = require ( ' parseuri ' ) ; var parsejson:==:require ( ' parsejson ' ) ;
var ids = this . _ profileSamples . ids ; var timestamps:==:this . _ profileSamples . timestamps ;
var maxDirtyNumber = model . _ maxDirtyNumber ; var allowPicking:==:model . allowPicking ;
var inputState = vim . inputState ; var motion:==:inputState . motion ;
var tileProvider = surface . tileProvider ; var terrainProvider:==:this . terrainProvider ;
var containerCount = checks . containerCount  |  |  1 ; var text:==:checks . text ;
var format = property . format ; var type:==:property . type ;
var styleSheetPropType = require ( ' styleSheetPropType ' ) ; var textStylePropTypes:==:require ( ' textStylePropTypes ' ) ;
var dataViewObjects = powerbi . dataViewObjects ; var selectionIdBuilder:==:powerbi . visuals . selectionIdBuilder ;
var extname = require ( ' path ' ) . extname ; var basename:==:require ( ' path ' ) . basename ;
var long = ppo . long . result ; var short:==:ppo . short . result ;
var ace = tab . editor . ace ; var renderer:==:ace . renderer ;
var a = + + Ext . data . scriptTagProxy . trans_id ; var m:==:i d : a , action : e , cb : ' stcCallback ' + a , scriptId : ' stcScript ' + a , params : d , arg : l , url : b , callback : j , scope : k , reader : h ;
var Platform = require ( ' Platform ' ) ; var crc32:==:require ( ' crc32 ' ) ;
var faces = geometry . faces ; var morphColors:==:json . morphColors [ 0 ] . colors ;
var documentElement = isie9 ( ) ? cloneNodeie9 ( ownerDocument . documentElement , options . javascriptEnabled ) : ownerDocument . documentElement . cloneNode ( true ) ; var container:==:containerDocument . createElement ( ' iframe ' ) ;
var c9 = imports . c9 ; var net:==:imports . net ;
var assert = require ( ' chai ' ) . assert ; var helper:==:global . helper    ;
var pixTolerance = _ pixTolerance & & _ pixTolerance > = 0 & & _ pixTolerance < = 1 ? _ pixTolerance : 0 ; var frameTolerance:==:_ frameTolerance & & _ frameTolerance >   0 & & _ frameTolerance <   1 ? _ frameTolerance : 0 ;
var after_close = ( $ . isFunction ( params . after_close ) ) ? params . after_close : function ( ) ; var wrap:==:$ ( ' # gritter - notice - wrapper ' ) ;
var dynCall_vi = Module [ ' dynCall_vi ' ] = asm [ ' dynCall_vi ' ] ; var dynCall_iiiidd:==:Module [ ' dynCall_iiiidd ' ]    asm [ ' dynCall_iiiidd ' ] ;
var Animated = require ( ' Animated ' ) ; var resolveAssetSource:==:require ( ' resolveAssetSource ' ) ;
var reporter = this . reporter ; var project:==:this . project ;
var origin = context . origin ; var opacity:==:context . opacity ;
var eventPluginHub = require ( ' eventPluginHub ' ) ; var eventPropagators:==:require ( ' eventPropagators ' ) ;
var module = entry . module = getOrCreateModuleRecord ( entry . name , moduleRecords ) ; var exports:==:entry . module . exports ;
var nthRoot = math . nthRoot ; var big:==:math . bignumber ;
var _ bitshift64Ashr = module [ ' _ bitshift64Ashr ' ] = asm [ ' _ bitshift64Ashr ' ] ; var _ memcpy:==:module [ ' _ memcpy ' ]    asm [ ' _ memcpy ' ] ;
var isDefined = leafletHelpers . isDefined ; var defaultTo:==:leafletHelpers . defaultTo ;
var width = corridor . width ; var outlineWidth:==:corridor . outlineWidth ;
var r = radiusExtent [ 1 ] ; var p:==:polar . coordToPoint ( [ r + labelMargin , labelsAngles [ i ] ] ) ;
var subscriptions = program . subscriptions ; var view:==:program . view ;
var Role = app . models . Role ; var User:==:app . models . User ;
var delay = this . delayTime ; var source:==:this . source ;
var positions = value . _ positions ; var length:==:positions . length ;
var position = this . _ entity . position ; var semiMajorAxis:==:ellipse . semiMajorAxis ;
var cssProperty = require ( ' cssProperty ' ) ; var isUnitlessNumber:==:cssProperty . isUnitlessNumber ;
var qunit   = require ( ' gulp - qunit ' ) ; var babel:==:require ( ' gulp - babel ' ) ;
var node1 = new goog . ui . tree . treeNode ( ' node1 ' ) ; var nodea:==:new goog . ui . tree . treeNode ( ' nodea ' ) ;
var assert = require ( ' assert ' ) ; var nock:==:require ( ' nock ' ) ;
var CPS = ' CPS ' ; var FORK:==:' FORK ' ;
var name = this . name ; var defaultError:==:this . defaultError ;
var offsetTF = this . morph . _ offsetTF ; var baseData:==:this . morph . _ baseData ;
var config = editor . config ; var signals:==:editor . signals ;
var container = pos . container ( ) ; var offset:==:pos . offset ( ) ;
var rowHeaders = this . wot . getSetting ( ' rowHeaders ' ) . length ; var columnHeaders:==:this . wot . getSetting ( ' columnHeaders ' ) . length ;
var domFactory = inJs . domFactory ; var dataViewObjectDefinitions:==:powerbi . data . dataViewObjectDefinitions ;
var chart = tooltip . _ chart ; var chartArea:==:tooltip . _ chartInstance . chartArea ;
var dynCall_iiiiiii = Module [ ' dynCall_iiiiiii ' ] = asm [ ' dynCall_iiiiiii ' ] ; var dynCall_ii:==:Module [ ' dynCall_ii ' ]    asm [ ' dynCall_ii ' ] ;
var attributes = this . transformList ( tree . attributes ) ; var children:==:this . transformList ( tree . children ) ;
var projectNode = this . _ projectNode ( uiSourceCode . project ( ) ) ; var folderNode:==:this . _ folderNode ( projectNode , uiSourceCode . parentPath ( ) ) ;
var headerCell = this . headerCell ( gridId , colNumber ) ; var resizer:==:headerCell . all ( by . css ( ' . ui - grid - column - resizer ' ) ) . first ( ) ;
var def = $ ( ' def ' ) ; var jkl:==:$ ( ' jkl ' ) ;
var plugin = getByName ( type . plugins , key ) ; var stats:==:changedPlugin . stats ;
var g1 = new pc . graphNode ( ' g1 ' ) ; var g2:==:new pc . graphNode ( ' g2 ' ) ;
var rpc = require ( ' pm2-axon - rpc ' ) ; var axon:==:require ( ' pm2-axon ' ) ;
var result = results [ resultIndex ] ; var image:==:imageryLayers [ resultIndex ] ;
var fileProperties = windows . storage . fileProperties ; var media:==:windows . media ;
var reactNativePropRegistry = require ( ' reactNativePropRegistry ' ) ; var diff:==:reactNativeAttributePayload . diff ;
var g = ( bigint > > 8 ) & 255 ; var b:==:bigint & 255 ;
var b = myIframeDoc . createElement ( ' b ' ) ; var c:==:myIframeDoc . createTextNode ( ' c ' ) ;
var manifest = manifestModel . getValue ( ) ; var url:==:manifest . url ;
var activePanels = panels . activePanels ; var active:==:panels . panels [ activePanels [ 0 ] ] ;
var complex = math . complex ; var Unit:==:math . type . Unit ;
var errorObj = util . errorObj ; var async:==:promise . _ async ;
var anchor = toAcePos ( x . anchor ) ; var head:==:toAcePos ( x . head ) ;
var topic = sanitize ( ( o . topic |  |  ' ' ) . toString ( ) ) ; var property:==:sanitize ( o . property?o . property : '' ) ;
var webserver = require ( ' gulp - webserver ' ) ; var selenium:==:require ( ' selenium - standalone ' ) ;
var added = addedObjects . values ; var removedObjects:==:this . _ removedObjects ;
var basename = path . basename ( plugin ) ; var dirname:==:path . dirname ( plugin ) ;
var chart = me . chart ; var data:==:chart . data ;
var role = opts . role  |  |  ' initiator ' ; var direction:==:opts . direction  |  |  ' outgoing ' ;
var boundingBox = instance . get ( ' boundingBox ' ) ; var contentBox:==:instance . get ( ' contentBox ' ) ;
var bufferLength = this . bufferLength ; var buffer:==:this . ensureBuffer ( bufferLength + rowBytes ) ;
var async = require ( ' async ' ) ; var winston:==:require ( ' winston ' ) ;
var htmlbarsOptions = this . _ addon . htmlbarsOptions ( ) ; var templateCompiler:==:htmlbarsOptions . templateCompiler ;
var FLAGS = 2 ; var TIME:==:3 ;
var k = n . keys [ j ] ; var t:==:k . time ;
var forEach = array . prototype . forEach . call . bind ( array . prototype . forEach ) ; var concat:==:array . prototype . concat . call . bind ( array . prototype . concat ) ;
var reactNativeBridgeEventPlugin = require ( ' reactNativeBridgeEventPlugin ' ) ; var reactNativeComponentTree:==:require ( ' reactNativeComponentTree ' ) ;
var weekNumberCalculation = opts . weekNumberCalculation ; var firstDay:==:opts . firstDay ;
var add = domTokenList . prototype . add ; var remove:==:domTokenList . prototype . remove ;
var slicePartitions = math . round ( defaultValue ( options . slicePartitions , 64 ) ) ; var vertexFormat:==:defaultValue ( options . vertexFormat , vertexFormat . default ) ;
var i = aindex [ k ] ; var v:==:inverse ? cf ( b , avalues [ k ] ) : cf ( avalues [ k ] , b ) ;
var value = axisPointerModel . get ( ' value ' ) ; var status:==:axisPointerModel . get ( ' status ' ) ;
var s = this . _ container . style ; var l:==:parseFloat ( s . left ) ;
var dayNames = ( settings ? settings . dayNames : null )  |  |  this . _ defaults . dayNames ; var monthNamesShort:==:( settings ? settings . monthNamesShort : null )  |  |  this . _ defaults . monthNamesShort ;
var babel = require ( ' babel - core ' ) ; var coffee:==:require ( ' coffee - script ' ) ;
var userProps = ob . userProps ; var params:==:ob . params ;
var selectors = $ animateProvider . $ $ selectors ; var isArray:==:angular . isArray ;
var createBlock = parseTreeFactory . createBlock ; var createConditionalExpression:==:parseTreeFactory . createConditionalExpression ;
var width = $ child . width ( ) ; var height:==:$ child . height ( ) ;
var reactControlledValuePropTypes = require ( ' reactControlledValuePropTypes ' ) ; var reactdomComponentTree:==:require ( ' reactdomComponentTree ' ) ;
var o = plot . getOptions ( ) ; var offset:==:plot . getPlaceholder ( ) . offset ( ) ;
var APN_PROPS = apnConst . apn_props ; var eu_roaming_file_path:==:apnConst . eu_roaming_file_path ;
var type = operation . type ; var payload:==:operation . payload ;
var s3tc = extras . compressedImage3dTiles . s3tc ; var pvrtc:==:extras . compressedImage3dTiles . pvrtc1 ;
var authorized = options . authorized  |  |  noop ; var background:==:options . background  |  |  noop ;
var min2 = e1 . min2 . value ; var max2:==:e1 . max2 . value ;
var installGetter = utils . installGetter ; var internalArray:==:utils . internalArray ;
var join = _ _ webpack_require _ _ ( 3 ) . join ; var validateSafeMethod:==:_ _ webpack_require _ _ ( 17 ) . validateSafeMethod ;
var payloadBatch = payloadInfo . payloadBatch ; var snapToValue:==:payloadInfo . snapToValue ;
var from = shape . dockers [ obj . from ] ; var to:==:shape . dockers [ obj . to ] ;
var concat = require ( ' gulp - concat ' ) ; var wrapper:==:require ( ' gulp - wrapper ' ) ;
var entity = component . entity ; var data:==:component . data ;
var c = Math . min ( qrcode . height - 1 , d + k ) ; var e:==:new _ ak ( this . image , h , b , i - h , c - b , g , this . _ am ) ;
var randi = global . randi ; var Net:==:global . Net ;
var direction = ray . direction ; var hitPointWorld:==:intersectheightfield_hitpointworld ;
var has_flash    = zombie_array [ index ] [ ' has_flash ' ] ; var has_web_sockets:==:zombie_array [ index ] [ ' has_web_sockets ' ] ;
var showOtherMonths = this . _ get ( inst , ' showOtherMonths ' ) ; var selectOtherMonths:==:this . _ get ( inst , ' selectOtherMonths ' ) ;
var lightGreen50 = exports . lightGreen50 = ' # f1f8e9 ' ; var lightGreen100:==:exports . lightGreen100    ' # dcedc8 ' ;
var rangeToSegments = t . rangeToSegments ; var formatDate:==:calendar . formatDate ;
var port1 = channel . port1 ; var port2:==:channel . port2 ;
var cleanNumber = lib . cleanNumber ; var ms2DateTime:==:lib . ms2DateTime ;
var height = options . height  |  |  1 ; var subdivisionsX:==:options . subdivisionsX  |  |  options . subdivisions  |  |  1 ;
var status = transport . status ; var response:==:transport . responseText ;
var tabManager = imports . tabManager ; var fs:==:imports . fs ;
var subscribable = new ko . subscribable ( ) . extend ( rateLimit : 250 ) ; var notifySpy:==:jasmine . createSpy ( ' notifySpy ' ) ;
var afterCompleteDocOpen = helpers . afterCompleteDocOpen ; var afterCompleteOpen:==:helpers . afterCompleteOpen ;
var Platform = require ( ' Platform ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var viewMatrix = camera . viewMatrix ; var position:==:camera . position ;
var allowPicking = model . allowPicking ; var rootNodes:==:model . _ runtime . rootNodes ;
var numeral = require ( ' numeral ' ) ; var util:==:require ( ' util ' ) ;
var startBufferEvery = ( this . startBufferEvery = = null ) ? bufferSize : this . startBufferEvery ; var buffers:==:this . buffers ;
var parameterList = this . transformAny ( tree . parameterList ) ; var body:==:this . transformSuperInFunctionBody _ ( tree . body , homeObject ) ;
var isArray = angular . isArray ; var forEach:==:angular . forEach ;
var clientY = defaultValue ( options . clienty , 0 ) ; var ctrlKey:==:defaultValue ( options . ctrlKey , false ) ;
var acquit = require ( ' acquit ' ) ; var hl:==:require ( ' highlight . js ' ) ;
var x = ( lon * xfactor ) + xoffset ; var y:==:( lat * yfactor ) + yoffset ;
var doc = options . document  |  |  document ; var wind:==:options . window  |  |  window ;
var l = $ ( target ) . offset ( ) . left + 10 ; var t:==:$ ( target ) . offset ( ) . top + $ ( target ) . offset ( ) . height -10 ;
var net = require ( ' net ' ) ; var ip:==:require ( ' ip ' ) ;
var redis = config . redis ; var zlib:==:require ( ' zlib ' ) ;
var dominatorsTree = this . _ dominatorsTree ; var retainedSizes:==:this . _ retainedSizes ;
var activeClass = buttonConfig . activeClass  |  |  ' active ' ; var toggleEvent:==:buttonConfig . toggleEvent  |  |  ' click ' ;
var d = vlength2 ( deltax , deltay ) ; var r:==:this . r ;
var path = require ( ' path ' ) ; var assert:==:require ( ' assert ' ) ;
var start = moment ( body . range . start ) ; var end:==:moment ( body . range . end ) ;
var top = rect . top + rect . height ; var left:==:rect . left ;
var Matrix = math . type . Matrix ; var Unit:==:math . type . Unit ;
var cli = fis . cli ; var project:==:fis . project ;
var topPosition = cartesian3 . fromArray ( topPositions , i3 , scratchCartesian3Position1 ) ; var bottomPosition:==:cartesian3 . fromArray ( bottomPositions , i3 , scratchCartesian3Position2 ) ;
var subTasks = parameters . subTasks ; var length:==:subTasks . length ;
var targets = ptargets ; var matchingOptions:==:pmatchingOptions ;
var event = track . event ( ) ; var revenue:==:track . revenue ( )  |  |  0 ;
var flash = require ( ' connect - flash ' ) ; var morgan:==:require ( ' morgan ' ) ;
var w = window . frames [ name ] ; var doc:==:w . document ;
var subdivisions = options . subdivisions  |  |  w : 1 , h : 1 ; var precision:==:options . precision  |  |  w : 1 , h : 1 ;
var recorderProfiles = this . settings . recorderProfiles ; var pictureSizes:==:this . settings . pictureSizes ;
var stop = document . getElementById ( ' stop ' ) ; var hosts:==:document . getElementById ( ' hosts ' ) ;
var unit = math . unit ; var asin:==:math . asin ;
var files = d . files ; var directories:==:d . directories ;
var removedObjects = this . _ removedObjects ; var changedObjects:==:this . _ changedObjects ;
var p2pService = _ appJsServicesp2pService [ ' default ' ] ; var wifiService:==:_ appJsServicesWifiService [ ' default ' ] ;
var rect = frame . rect ; var sourceRect:==:frame . sourceRect ;
var series = args . series  |  |  graph . series ; var vis:==:args . vis  |  |  graph . vis ;
var reactNativeEventPluginOrder = require ( ' reactNativeEventPluginOrder ' ) ; var reactNativeGlobalResponderHandler:==:require ( ' reactNativeGlobalResponderHandler ' ) ;
var userAgent = require ( ' userAgent ' ) ; var keyCommandBackspaceToStartOfLine:==:require ( ' keyCommandBackspaceToStartOfLine ' ) ;
var onLeftIconButtonTouchTap = _ props . onLeftIconButtonTouchTap ; var className:==:_ props . className ;
var val2 = w2utils . isDate ( val2 , w2utils . settings . date_format , true ) ; var val3:==:w2utils . isDate ( val3 , w2utils . settings . date_format , true ) ;
var domChildrenOperations = require ( ' domChildrenOperations ' ) ; var reactdomComponentTree:==:require ( ' reactdomComponentTree ' ) ;
var appearToClass = ref . appearToClass ; var appearActiveClass:==:ref . appearActiveClass ;
var createStrictShapeTypeChecker = require ( ' createStrictShapeTypeChecker ' ) ; var flattenStyle:==:require ( ' flattenStyle ' ) ;
var bool = row . find ( ' . bool ' ) . val ( ) ; var field:==:row . find ( ' . field ' ) . val ( ) ;
var host = url . host ; var path:==:url . path ;
var stRotation = polygonGeometry . _ stRotation ; var height:==:polygonGeometry . _ height ;
var webdriver = require ( ' gulp - webdriver ' ) ; var webserver:==:require ( ' gulp - webserver ' ) ;
var post = hexo . post ; var now:==:Date . now ( ) ;
var viewFormat = defaultValue ( queryStringValue ( iconNode , ' viewFormat ' , namespaces . kml ) , defaultViewFormat ) ; var httpQuery:==:queryStringValue ( iconNode , ' httpQuery ' , namespaces . kml ) ;
var minDistNormal = intersectconvex_mindistnormal ; var normal:==:intersectconvex_normal ;
var inquirer = require ( ' inquirer ' ) ; var exec:==:require ( ' child_process ' ) . execSync ;
var key = keys [ ii ] ; var subscription:==:subscriptions [ key ] ;
var FALSE3 = C . FALSE3 = 0x33 ; var FALSE4:==:C . FALSE4    0x34 ;
var createCallStatement = parseTreeFactory . createCallStatement ; var createExpressionStatement:==:parseTreeFactory . createExpressionStatement ;
var d = computed ( function ( ) return c . get ( ) * b . get ( ) ) ; var buf:==:buffer ( ) ;
var createIfStatement = parseTreeFactory . createIfStatement ; var createParenExpression:==:parseTreeFactory . createParenExpression ;
var type = message . type . toLowerCase ( ) ; var data:==:message . data ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var datetimeFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' datetimeFieldTestObject ' ) ) ;
var reactdomComponentTree = require ( ' reactdomComponentTree ' ) ; var reactFiberTreeReflection:==:require ( ' reactFiberTreeReflection ' ) ;
var hsla = this . hsla ( ) ; var h:==:hsla [ 0 ] ;
var extendFlat = lib . extendFlat ; var extendDeep:==:lib . extendDeep ;
var component = components . get ( utils . getParentComponent ( ) ) ; var mutations:==:component & & component . mutations  |  |  [ ] ;
var uvs = sprite . _ uvs ; var rect:==:spriteFrame . _ rect ;
var eventPluginUtils = require ( ' eventPluginUtils ' ) ; var htmldomPropertyConfig:==:require ( ' htmldomPropertyConfig ' ) ;
var tape = require ( ' tape ' ) ; var request:==:require ( ' request ' ) ;
var buffer = this . _ buffer ; var offset:==:this . _ offset + bytes - 1 ;
var Unit = math . type . Unit ; var median:==:math . median ;
var util = imports . util ; var layout:==:imports . layout ;
var errors = require ( ' restify - errors ' ) ; var invalidHeaderError:==:errors . invalidHeaderError ;
var semver = require ( ' semver ' ) ; var shell:==:require ( ' shelljs ' ) ;
var fs = require ( ' fs ' ) ; var toml:==:require ( ' toml ' ) ;
var POST = ' POST ' ; var markdown:==:' markdown ' ;
var accuracy = e . coords . accuracy ; var speed:==:e . coords . speed ;
var length = options . length ; var topRadius:==:options . topRadius ;
var minHelpCol = config . minHelpCol  |  |  20 ; var maxHelpCol:==:config . maxHelpCol  |  |  40 ;
var quality = getValue ( options . quality , 50 ) ; var destinationType:==:getValue ( options . destinationType , camera . destinationType . file_uri ) ;
var ifStatement = traceur . syntax . trees . ifStatement ; var importDeclaration:==:traceur . syntax . trees . importDeclaration ;
var disableHeader = _ props . disableHeader ; var gridClassName:==:_ props . gridClassName ;
var abs = Math . abs ; var sqrt:==:Math . sqrt ;
var edgeTypeOffset = this . _ edgeTypeOffset ; var edgeWeakType:==:this . _ edgeWeakType ;
var style = options . hasOwnProperty ( ' style ' ) ? options . style : ' list ' ; var orderby:==:options . orderby  |  |  ' date ' ;
var styleSheet = require ( ' styleSheet ' ) ; var text , heading1 , paragraph:==:require ( ' f8Text ' ) ;
var _ main = Module [ ' _ main ' ] = asm [ ' _ main ' ] ; var _ testSetjmp:==:module [ ' _ testSetjmp ' ]    asm [ ' _ testSetjmp ' ] ;
var child = action . children [ i ] ; var node:==:child . node ;
var Restaurant = Parse . Object . extend ( ' Restaurant ' ) ; var Person:==:Parse . Object . extend ( ' Person ' ) ;
var doubleTap = new hammer . tap ( event : ' doubleTap ' , taps : 2 ) ; var tripleTap:==:new hammer . tap ( event : ' tripleTap ' , taps : 3 ) ;
var f1 = ' f1 ' ; var f2:==:' f2 ' ;
var functionAssignmentNode = math . expression . node . functionAssignmentNode ; var rangeNode:==:math . expression . node . rangeNode ;
var Divider = imports . Divider ; var settings:==:imports . settings ;
var tobi = name : ' tobi ' , age : 2 ; var loki:==:name : ' loki ' , age : 1 ;
var builtinObjs = wordRegexp ( builtinObjsWords ) ; var known:==:wordRegexp ( knownWords ) ;
var i d = this . i d ; var plugins:==:JSON . parse ( this . preferences . getString ( ' pluginsData ' , ' [ ] ' ) ) ;
var foo = new accessorNode ( a , new indexNode ( [ new constantNode ( ' foo ' ) ] ) ) ; var bar:==:new accessorNode ( foo , new indexNode ( [ new constantNode ( ' bar ' ) ] ) ) ;
var fs = require ( ' fs ' ) ; var crypto:==:require ( ' crypto ' ) ;
var canvas = document . createElement ( ' canvas ' ) ; var canvasHolder:==:document . getElementById ( ' canvasHolder ' ) ;
var h = helpers ; var Firepad:==:firepad . Firepad ;
var $ = browser . $ ; var element:==:browser . element ;
var layout = imports . layout ; var menus:==:imports . menus ;
var addonTestApp = require ( ' ember - cli - addon - tests ' ) . addonTestApp ; var request:==:require ( ' request ' ) ;
var stack = new Error ( ) . stack ; var split:==:stack . split ( rline ) ;
var width = tooltipSize . width ; var height:==:tooltipSize . height ;
var y1 = layer . y1  |  |  layer . frame . y ; var x2:==:layer . x2  |  |  layer . frame . x ;
var $ links = this . $ links ; var options:==:this . options ;
var webpack = require ( ' webpack - stream ' ) ; var zip:==:require ( ' gulp - zip ' ) ;
var err = _ ref2 . err ; var subscriber:==:_ ref2 . subscriber ;
var pageInfo = ret . pageInfo ; var comments:==:ret . comments ;
var canvasWidth = self . canvasWidth ; var canvasHeight:==:self . canvasHeight ;
var chalk = require ( ' chalk ' ) ; var assign:==:require ( ' lodash ' ) . assign ;
var styleSpec = options . styleSpec ; var style:==:options . style ;
var selectedNode = event . target . selectedNode ; var target:==:this . _ profile . target ( ) ;
var createNewExpression = parseTreeFactory . createNewExpression ; var createNumberLiteral:==:parseTreeFactory . createNumberLiteral ;
var idName = this . dataSource . idName ( this . modelName ) ; var change:==:this . getChangeModel ( ) ;
var transaction = this . _ db . transaction ( [ DBOS_VISITS ] , ' readwrite ' ) ; var objectStore:==:transaction . objectStore ( dbos_visits ) ;
var index = _ ref2 . index ; var option:==:options [ index ] ;
var identifierExpression = traceur . syntax . trees . identifierExpression ; var ifStatement:==:traceur . syntax . trees . ifStatement ;
var scrollOffset = _ ref . scrollOffset ; var scrollToAlignment:==:_ ref . scrollToAlignment ;
var DOCUMENT_TYPE_NODE    = nodeType . document_type_node    = 10 ; var document_fragment_node:==:nodeType . document_fragment_node     11 ;
var row = e . getDocumentPosition ( ) . row ; var session:==:editor . session ;
var label = node . label  |  |  ' ( label is undefined ) ' ; var box:==:node . boxObject ;
var axes = axesLayout . axes ; var tickLabelMargins:==:axesLayout . tickLabelMargins ;
var stringExtensions = jsCommon . stringExtensions ; var urlUtils:==:jsCommon . urlUtils ;
var column = columns_1 [ _ i ] ; var roles:==:column . source . roles ;
var bindingIdentifier = traceur . syntax . trees . bindingIdentifier ; var block:==:traceur . syntax . trees . block ;
var eddsa = this . eddsa ; var hash:==:this . hash ( ) ;
var referenceNode = referenceNodes . nodes [ 0 ] ; var parentNode:==:referenceNode . parentNode ;
var generateDepthBuffer = options . generateDepthBuffer = = = undefined ? true : options . generateDepthBuffer ; var generateStencilBuffer:==:options . generateStencilBuffer      undefined ? false : options . generateStencilBuffer ;
var definition = result . definition ; var scopeChain:==:result . scopeChain ;
var fs = require ( ' fs ' ) ; var log:==:require ( ' some - async - logger ' ) ;
var c = a . concat ( b ) ; var d:==:a . slice ( 10 ) ;
var task = payload . task ; var code:==:task . code ;
var scale9Sprite = ccui . scale9Sprite ; var proto:==:ccui . scale9Sprite . webglRenderCmd . prototype    object . create ( cc . node . webglRenderCmd . prototype ) ;
var coordinates = readCoordinates ( coordinatesNode ) ; var polyline:==:styleEntity . polyline ;
var createElement = reactElement . createElement ; var createFactory:==:reactElement . createFactory ;
var s = group . create ( 150 , 300 , ' disk ' ) ; var r:==:game . make . sprite ( 32 , 16 , ' squad ' ) ;
var name = data . users [ j ] . name ; var sim:==:similarityScores [ name ] ;
var reactElement = require ( ' reactElement ' ) ; var canDefineProperty:==:require ( ' canDefineProperty ' ) ;
var el = this . el ; var uuid:==:el . object3D . fog . uuid ;
var operatorNode = math . expression . node . operatorNode ; var derivative:==:math . derivative ;
var el = this . el ; var controllerComponent:==:el . components [ controllerComponentName ] ;
var options = _ ref6 . options ; var maxHeight:==:this . props . maxHeight ;
var Site = require ( ' Site ' ) ; var Prism:==:require ( ' Prism ' ) ;
var doc = ( document . documentElement |  |  ) ; var h:==:window . innerHeight  |  |  doc . clientHeight  |  |  doc . scrollHeight  |  |  0 ;
var getName = options . getName ; var defaultParallel:==:options . defaultParallel  |  |  false ;
var BIND_UI_ATTRS = concat ( config . BIND_UI_ATTRS , config . UI_ATTRS ) ; var SYNC_UI_ATTRS:==:concat ( config . SYNC_UI_ATTRS , config . UI_ATTRS ) ;
var forEach = angular . forEach ; var selectors:==:$ animateProvider . $ $ selectors ;
var file = path . resolve ( manifestDir , files . shift ( ) ) ; var extname:==:path . extname ( file ) ;
var annotations = this . transformList ( tree . annotations ) ; var body:==:this . transformAsyncBody _ ( tree . body ) ;
var Status = goog . net . streams . xhrStreamReader . status ; var eventType:==:goog . net . streams . nodeReadableStream . eventType ;
var expect = chai . expect ; var async:==:require ( ' async ' ) ;
var Shape = ReactART . Shape ; var Surface:==:ReactART . Surface ;
var adapter = saveContext . adapter ; var entityManager:==:saveContext . entityManager ;
var gulp = require ( ' gulp ' ) ; var fs:==:require ( ' fs ' ) ;
var fill = element . find ( ' . donut - fill ' ) ; var title:==:element . find ( ' . donut - title ' ) ;
var a = new Date ( ) . getTime ( ) ; var c:==:qrcode . grayScaleToBitmap ( qrcode . grayscale ( ) ) ;
var tagdict = main . tagdict ; var methods:==:params . methods ;
var postScriptLexer = corePsParser . postScriptLexer ; var postScriptParser:==:corePsParser . postScriptParser ;
var two = document . getElementById ( ' two ' ) ; var last:==:document . getElementById ( ' last ' ) ;
var path = options . path ; var scriptId:==:options . script ? options . script . i d : options . scriptId ;
var two = this . find ( ' . togetherjs - typing - ellipse - two ' ) ; var three:==:this . find ( ' . togetherjs - typing - ellipse - three ' ) ;
var settings = imports . settings ; var nw:==:nativeRequire ( ' nw . gui ' ) ;
var provider = this . tree . provider ; var columns:==:provider . columns ;
var backgroundExecutionManager = background . backgroundExecutionManager ; var backgroundTaskRegistration:==:background . backgroundTaskRegistration ;
var start = parseInt ( this . options . position . start . getTime ( ) ) ; var end:==:parseInt ( this . options . position . end . getTime ( ) ) ;
var map = mapAndFlag . map ; var flag:==:mapAndFlag . flag ;
var input = createElement ( ' input ' ) ; var div:==:createElement ( ' div ' ) ;
var header = $ ( this . box ) . find ( ' > div . w2ui - form - header ' ) ; var toolbar:==:$ ( this . box ) . find ( ' > div . w2ui - form - toolbar ' ) ;
var width = itemLayout . width ; var height:==:itemLayout . height ;
var uglify   = require ( ' gulp - uglify ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var c = this . charMap _ [ str . charAt ( i ) ] ; var meta:==:c % metasize ;
var async = require ( ' async ' ) ; var url:==:require ( ' url ' ) ;
var x_color = chroma . scale ( opts . x_colors ) . mode ( opts . color_space ) ; var y_color:==:chroma . scale ( opts . y_colors ) . mode ( opts . color_space ) ;
var replaceStars = semver . replaceStars ; var toComparators:==:semver . toComparators ;
var alt = page . alt = page . alt  |  |  ; var upperCase:==:page . upperCase    page . upperCase  |  |  ;
var assert = require ( ' assert ' ) ; var spawn:==:require ( ' child_process ' ) . spawn ;
var frustum = camera . frustum ; var near:==:frustum . near ;
var cx = this . attribute ( ' cx ' ) . Length . toPixels ( ' x ' ) ; var cy:==:this . attribute ( ' cy ' ) . length . toPixels ( ' y ' ) ;
var head = el . querySelector ( ' gui - list - view - head ' ) ; var body:==:el . querySelector ( ' gui - list - view - body ' ) ;
var services = architectApp . services ; var serviceToPlugin:==:architectApp . serviceToPlugin ;
var scrollLeft = _ ref2 . scrollLeft ; var scrollTop:==:_ ref2 . scrollTop ;
var dataKey = _ column$props . dataKey ; var cellData:==:cellDataGetter ( columnData : columnData , dataKey : dataKey , rowData : rowData ) ;
var param = _ param ; var no:==:_ no ;
var O = Object ( this ) ; var len:==:parseInt ( o . length )  |  |  0 ;
var rowIndex = _ ref2 . rowIndex ; var rowRenderer:==:this . props . rowRenderer ;
var quickJoinBlock = document . getElementById ( ' quickJoinBlock ' ) ; var n:==:quickJoinBlock . childNodes . length ;
var isObject = leafletHelpers . isObject ; var helpers:==:leafletHelpers ;
var n = new conditionalNode ( condition , a , b ) ; var e:==:new constantNode ( 5 ) ;
var createMemberLookupExpression = traceur . codegeneration . parseTreeFactory . createMemberLookupExpression ; var createNullLiteral:==:traceur . codegeneration . parseTreeFactory . createNullLiteral ;
var name = res . attributes [ i ] . name ; var value:==:res . attributes [ i ] . value ;
var projectionPicker = viewer . _ projectionPicker ; var baseLayerPicker:==:viewer . _ baseLayerPicker ;
var vm = require ( ' vm ' ) ; var fs:==:require ( ' fs ' ) ;
var path = uiSourceCode . path ( ) ; var sourceFileId:==:this . _ sourceFileId ( uiSourceCode ) ;
var amber200 = exports . amber200 = ' # ffe082 ' ; var amber300:==:exports . amber300    ' # ffd54f ' ;
var data = this . dataSource . flatView ( ) ; var optionsMap:==:this . _ optionsMap ;
var offsetX = parseInt ( dom . offsetx . value , 10 ) ; var offsety:==:parseInt ( dom . offsety . value , 10 ) ;
var cleanInput = utilities . cleanInput ; var isShiftHeld:==:utilities . isShiftHeld ;
var parentShape = labelPoint . parentShape ; var validPositions:==:parentShape . validPositions ;
var p = positions [ i ] ; var x:==:p . x ;
var options = that . options ; var cascade:==:options . cascadeFrom ;
var option = options . getOptionFromViewValue ( viewValue ) ; var element:==:option & & option . element ;
var browser = _ ref$browserInfo . browser ; var version:==:_ ref$browserInfo . version ;
var accountStatus = identify . proxy ( ' traits . accountStatus ' ) ; var referralCode:==:identify . proxy ( ' traits . referralCode ' ) ;
var line = originalPosition . line ; var column:==:originalPosition . column ;
var merge = require ( ' utils - merge ' ) ; var parseurl:==:require ( ' parseurl ' ) ;
var attributes = geometry . attributes ; var modelMatrix:==:matrix4 . clone ( defaultValue ( options . modelMatrix , matrix4 . identity ) ) ;
var stream = config . stream ; var interval:==:config . interval  |  |  3000 ;
var ignoreProtocolVersion = options . ignoreProtocolVersion ; var region:==:strictRegion  |  |  options . region ;
var div = document . createElement ( ' div ' ) ; var span:==:document . createElement ( ' span ' ) ;
var fs = require ( ' fs ' ) ; var wrench:==:require ( ' wrench ' ) ;
var dockableWidget = imports . dockableWidget ; var dockableAbsoluteRenderer:==:imports . dockableAbsoluteRenderer ;
var createUndefinedExpression = parseTreeFactory . createUndefinedExpression ; var createVariableStatement:==:parseTreeFactory . createVariableStatement ;
var locales = self . locales  |  |  opts . locales  |  |  ; var locale:==:self . locale  |  |  opts . locale  |  |  ' en ' ;
var view = this . view ; var calendar:==:view . calendar ;
var reactdomStackInjection = require ( ' reactdomStackInjection ' ) ; var reactServerRenderer:==:require ( ' reactServerRenderer ' ) ;
var verification = goog . require ( ' goog . labs . mock . verification ' ) ; var atLeast:==:verification . atLeast ;
var operatorNode = math . expression . node . operatorNode ; var conditionalNode:==:math . expression . node . conditionalNode ;
var container = createElementWithClass ( ' div ' , ' object - popover - container ' ) ; var title:==:container . createChild ( ' div ' , ' function - popover - title source - code ' ) ;
var State = traceur . codegeneration . generator . State ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var results = document . getElementById ( ' results ' ) ; var r:==:results . appendChild ( document . createElement ( ' p ' ) ) ;
var isCustomComponent = require ( ' isCustomComponent ' ) ; var omittedCloseTags:==:require ( ' omittedCloseTags ' ) ;
var frameState = scene . frameState ; var camera:==:scene . camera ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var createStatementList:==:parseTreeFactory . createStatementList ;
var integration = require ( ' analytics . js - integration ' ) ; var tick:==:require ( ' next - tick ' ) ;
var headerRenderer = _ column$props2 . headerRenderer ; var label:==:_ column$props2 . label ;
var chunk = entry . chunk ; var encoding:==:entry . encoding ;
var createPropertyNameAssignment = parseTreeFactory . createPropertyNameAssignment ; var createReturnStatement:==:parseTreeFactory . createReturnStatement ;
var contentBox = instance . get ( ' contentBox ' ) ; var canvas:==:instance . canvas ;
var path = require ( ' path ' ) ; var vm:==:require ( ' vm ' ) ;
var legacy = require ( ' character - entities - legacy ' ) ; var has:==:require ( ' has ' ) ;
var c = new Mongo . Collection ( Random . i d ( ) ) ; var rawCollection:==:c . rawCollection ( ) ;
var helper = require ( ' helper ' ) ; var jsdom:==:require ( ' jsdom ' ) . jsdom ;
var removeHandler = this . removeHandler ; var selector:==:this . selector ;
var DELIMITERS = HTMLCSS . FONTDATA . DELIMITERS ; var H:==:' H ' , V    ' V ' ;
var d1 = _ addDiv ( ' d1 ' ) , d2 = _ addDiv ( ' d2 ' ) ; var c:==:_ jsPlumb . connect ( source : d1 , target : d2 ) ;
var isContentEditableFalse = nodeType . isContentEditableFalse ; var isContentEditableTrue:==:nodeType . isContentEditableTrue ;
var cellCache = _ ref . cellCache ; var cellClassName:==:_ ref . cellClassName ;
var CDATA_SECTION_NODE    = nodeType . cdata_section_node    = 4 ; var entity_reference_node:==:nodeType . entity_reference_node     5 ;
var createDefineProperty = parseTreeFactory . createDefineProperty ; var createIdentifierExpression:==:parseTreeFactory . createIdentifierExpression ;
var c9 = imports . c9 ; var tree:==:imports . tree ;
var doc = e . doc ; var tab:==:doc . tab ;
var reactdomFeatureFlags = require ( ' reactdomFeatureFlags ' ) ; var reactTestUtils:==:require ( ' reactTestUtils ' ) ;
var a = ' dc99c646fa4cb7c24314bb6f4ca2d391297acd0dacb0430a13bbf1e37dcf8071 ' ; var b:==:' cf878e00c9f2b6aa48a10f66df9706e64fef2ca399f396d65f5b0a27cb8ae237 ' ;
var wrap = shadowdomPolyfill . wrap ; var knownElements:==:shadowdomPolyfill . knownElements ;
var b = this . rgb . b ; var a:==:this . alpha ;
var viewStylePropTypes = require ( ' viewStylePropTypes ' ) ; var flattenStyle:==:require ( ' flattenStyle ' ) ;
var paypro = $ scope . paypro ; var toAddress:==:$ scope . toAddress ;
var isString = util . isString ; var isFunction:==:util . isFunction ;
var intervals = this . _ intervals ; var length:==:intervals . length ;
var debug = utils . debug ; var error:==:debug ( ' components : texture : error ' ) ;
var doc = document ; var div:==:doc . createElement ( ' div ' ) ;
var moment = require ( ' moment - timezone ' ) ; var schemaType:==:require ( ' warehouse ' ) . schemaType ;
var ui = imports . ui ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var eventproxy   = require ( ' eventproxy ' ) ; var uuid:==:require ( ' node - uuid ' ) ;
var gFalse = makeCallOrderLogger ( ' gFalse ' , false ) ; var hTrue:==:makeCallOrderLogger ( ' hTrue ' , true ) ;
var disabledBackgroundColor = props . disabledBackgroundColor ; var disabledLabelColor:==:props . disabledLabelColor ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , [ [ 0,0 ] , [ 100,100 ] ] , opts ) ;
var colModel = self . jqGrid ( ' getGridParam ' , ' colModel ' ) ; var colNames:==:self . jqGrid ( ' getGridParam ' , ' colNames ' ) ;
var _ free = Module [ ' _ free ' ] = asm [ ' _ free ' ] ; var _ main:==:Module [ ' _ main ' ]    asm [ ' _ main ' ] ;
var sql = tmp . sql ; var cql:==:tmp . cql ;
var blob = testUtils . makeBlob ( blobData ) ; var doc:==:_ i d : docId , test : true ;
var cache = this . cache ; var cacheCount:==:this . cacheCount ;
var dynCall_viiidi = Module [ ' dynCall_viiidi ' ] = asm [ ' dynCall_viiidi ' ] ; var dynCall_iid:==:Module [ ' dynCall_iid ' ]    asm [ ' dynCall_iid ' ] ;
var x1 = line . x1 + dx + 0*c*cosAngle ; var y1:==:line . y1 + dy + 0*c*sinAngle ;
var badgeNotification = windows . ui . notifications . badgeNotification ; var badges:==:notificationsExtensions . badges ;
var command = commandArg . toLowerCase ( ) ; var showUi:==:showUiArg ;
var COVER_INITIALIZED_NAME = ' COVER_INITIALIZED_NAME ' ; var DEBUGGER_STATEMENT:==:' DEBUGGER_STATEMENT ' ;
var serverConfig = config . params . serverConfig ; < % if ( filters . mongoose ) % > var mongoose:==:require ( ' mongoose ' ) ;
var shader = this . shader ; var el:==:this . el ;
var bmap = bmapModel . _ _ bmap ; var center:==:bmapModel . get ( ' center ' ) ;
var createGeometryResults = packedParameters . createGeometryResults ; var length:==:createGeometryResults . length ;
var newExpression = traceur . syntax . trees . newExpression ; var objectLiteralExpression:==:traceur . syntax . trees . objectLiteralExpression ;
var startIndex = _ ref2 . startIndex ; var stopIndex:==:_ ref2 . stopIndex ;
var commands = imports . commands ; var ace:==:imports . ace ;
var refute = referee . refute ; var fail:==:referee . fail ;
var displayUnitSystemType = powerbi . displayUnitSystemType ; var jsCommon:==:window . jsCommon ;
var scrollTop = _ ref2 . scrollTop ; var totalHeight:==:_ ref2 . totalHeight ;
var columnCount = _ props2 . columnCount ; var width:==:_ props2 . width ;
var Keys = require ( ' Keys ' ) ; var secondaryClipboard:==:require ( ' secondaryClipboard ' ) ;
var require = $ . fn . select2 . amd . require ; var define:==:$ . fn . select2 . amd . define ;
var vizion = require ( ' vizion ' ) ; var child:==:require ( ' child_process ' ) ;
var labelPosition = _ props . labelPosition ; var labelStyle:==:_ props . labelStyle ;
var dynCall_iii = Module [ ' dynCall_iii ' ] = asm [ ' dynCall_iii ' ] ; var dynCall_iiiiii:==:Module [ ' dynCall_iiiiii ' ]    asm [ ' dynCall_iiiiii ' ] ;
var bar = bar ( _ templateObject2 , 42 , _ . foobar ( ) ) ; var bar:==:bar ( _ templateObject3 , 42 , _ . baz ( ) ) ;
var options = self . options ; var ui:==:self . ui ;
var items = this . _ items ; var itemsIndom:==:this . _ itemsIndom ;
var settings = imports . settings ; var installer:==:imports . installer ;
var viewer = this . viewer ; var device:==:this . device ;
var dx4 = mxUtils . getValue ( this . style , ' dx4 ' , ' 0 ' ) ; var dy4:==:mxUtils . getValue ( this . style , ' dy4 ' , ' 0 ' ) ;
var moduleSymbol = traceur . semantics . symbols . moduleSymbol ; var project:==:traceur . semantics . symbols . project ;
var attribute = data . attribute ; var delay:==:parseInt ( data . delay , 10 ) ;
var columnStopIndex = _ ref . columnStopIndex ; var horizontalOffsetAdjustment:==:_ ref . horizontalOffsetAdjustment ;
var ignoreUnknownVariables = self . _ ignoreUnknownVariables ; var assignment:==:self . _ assignment ;
var chromeBinary = options . chromeBinary ; var keyFile:==:options . keyFile ;
var isPopup = this . isPopup ; var width:==:options . width ;
var btnsLeftWidth = this . state . btnsLeftWidth ; var btnsRightWidth:==:this . state . btnsRightWidth ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var urlFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' urlFieldTestObject ' ) ) ;
var Map   = Immutable . Map ; var isMap:==:immutable . map . isMap ;
var Map   = require ( ' immutable ' ) . Map ; var List:==:require ( ' immutable ' ) . List ;
var createIdentifierToken = parseTreeFactory . createIdentifierToken ; var createCatch:==:parseTreeFactory . createCatch ;
var should = require ( ' should ' ) ; var shelljs:==:require ( ' shelljs ' ) ;
var includes = require ( ' includes ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var containerElement = _ props3 . containerElement ; var disabled:==:_ props3 . disabled ;
var layout = this . layout ; var stride:==:this . stride ;
var metadata = this . model . get ( ' metadata ' )  |  |  ; var content:==:this . model . get ( ' content ' )  |  |  '' ;
var setup = setupPutTests ( ' file ' , mockTask ) ; var task:==:setup . task ;
var doc = documents [ docId ] ; var tab:==:doc . original . tab ;
var data = require ( ' data ' ) ; var jquery:==:require ( ' jquery ' ) ;
var binding = bindings [ i ] ; var handler:==:binding . handler ;
var filename = add instanceof window . File ? add . name : add . filename ; var type:==:add instanceof window . File ? ' file ' : ( add . type  |  |  ' file ' ) ;
var focusOption = _ ref8 . focusOption ; var labelKey:==:_ ref8 . labelKey ;
var eventName = eventInfo . eventName ; var capture:==:eventInfo . capture ;
var start = value . substr ( 0 , startPos ) ; var end:==:value . substr ( endPos ) ;
var camera = scene . camera ; var start:==:camera . getPickRay ( movement . startPosition , translate2dStart ) . origin ;
var uiSourceCode = uiSourceCodes [ i ] ; var tabId:==:this . _ tabIds . get ( uiSourceCode ) ;
var doc = this . doc ; var session:==:this . session ;
var blogPostb = db . model ( ' blogPostb ' , collection + random ( ) ) ; var a:==:title : ' a ' , author : null ;
var m = matrix ( a ) ; var r:==:_ denseBackwardSubstitution ( m , b ) ;
var styleSheet = require ( ' styleSheet ' ) ; var borderBox:==:require ( ' borderBox ' ) ;
var _ im_get_spl_start_at = Module [ ' _ im_get_spl_start_at ' ] = asm [ ' _ im_get_spl_start_at ' ] ; var _ im_get_fixed_len:==:Module [ ' _ im_get_fixed_len ' ]    asm [ ' _ im_get_fixed_len ' ] ;
var reportEventElement = t . reportEventElement ; var eventElementHandlers:==:t . eventElementHandlers ;
var notebookId = $ ( target ) . attr ( ' notebookId ' ) ; var notebook:==:notebook . cache [ notebookId ] ;
var chalk     = require ( ' chalk ' ) ; var async:==:require ( ' async ' ) ;
var log2 = sharedUtil . log2 ; var readUint16:==:sharedUtil . readUint16 ;
var after = new Blockly . fieldLabel ( ' after ' ) ; var between:==:new blockly . fieldLabel ( ' between ' ) ;
var shiftKey = event . shiftKey ; var altKey:==:event . altKey ;
var outlineColor = property . getValueOrClonedDefault ( cylinder . outlineColor , time , color . black , scratchColor ) ; var outlineWidth:==:property . getValueOrDefault ( cylinder . outlineWidth , time , 1 . 0 ) ;
var header = request . header ; var content:==:request . content ;
var markerClusterPlugin = leafletHelpers . markerClusterPlugin ; var awesomeMarkersPlugin:==:leafletHelpers . awesomeMarkersPlugin ;
var tile = tilesToUpdateHeights [ 0 ] ; var customData:==:tile . customData ;
var frecords = $ ( ' # grid_'+ this . name + ' _ frecords ' ) ; var scroll1:==:$ ( ' # grid_'+ this . name + ' _ scroll1 ' ) ;
var headerSize = ( this . options . headerSize ! = = undefined ) ? this . options . headerSize : _ resolveNodeSize . call ( this , this . header , this . options . defaultHeaderSize ) ; var footerSize:==:( this . options . footerSize !    undefined ) ? this . options . footerSize : _ resolveNodeSize . call ( this , this . footer , this . options . defaultFooterSize ) ;
var link = links [ i ] ; var rel:==:link . getAttribute ( ' rel ' ) ;
var Pattern = corePattern . pattern ; var getTilingPatternir:==:corePattern . getTilingPatternir ;
var key = event . detail . key ; var newIndex:==:event . detail . newIndex ;
var offsetY = parseInt ( dom . offsety . value , 10 ) ; var weight:==:dom . weight . value ;
var timingFunctionUtils = require ( ' timingFunctionUtils ' ) ; var stepEditorTemplate:==:require ( ' text!StepEditorTemplate . html ' ) ;
var renderDayEvents = t . renderDayEvents ; var calendar:==:t . calendar ;
var webview = dce ( ' webview ' ) ; var tab:==:browser . tabs . append ( webview ) ;
var aspect = this . cameraP . aspect ; var near:==:this . cameraP . near ;
var s = this . _ iteratedString ; var len:==:s . length ;
var second = parseInt ( kernings [ i ] . attributes . getNamedItem ( ' second ' ) . nodeValue , 10 ) ; var amount:==:parseInt ( kernings [ i ] . attributes . getNamedItem ( ' amount ' ) . nodeValue , 10 ) ;
var replace = required ( config , ' replace ' ) ; var targets:==:required ( config , ' targets ' ) ;
var w = $ this . attr ( ' width ' ) ; var h:==:$ this . attr ( ' height ' ) ;
var aliases = this . aliases = ; var indices:==:this . indices    ;
var isEventSupported = require ( ' isEventSupported ' ) ; var isTextInputElement:==:require ( ' isTextInputElement ' ) ;
var settings = imports . settings ; var ace:==:imports . ace ;
var createCommaExpression = parseTreeFactory . createCommaExpression ; var createDefineProperty:==:parseTreeFactory . createDefineProperty ;
var anims = imports . anims ; var commands:==:imports . commands ;
var assert = require ( ' assert ' ) ; var jsdom:==:require ( ' jsdom ' ) ;
var points = options . points ; var times:==:options . times ;
var resolution = document . getElementById ( ' resolution ' ) . value ; var dim:==:dims [ format ] ;
var target = args . target ; var verb:==:args . verb ;
var filename = opts . filename ; var template:==:opts . template ;
var multiLine = _ props2 . multiLine ; var onBlur:==:_ props2 . onBlur ;
var scale = scaleResult . scale ; var bestTickCount:==:scaleResult . bestTickCount ;
var View = require ( ' View ' ) ; var resolveBoxStyle:==:require ( ' resolveBoxStyle ' ) ;
var contentBox = instance . get ( ' contentBox ' ) ; var ownerTree:==:instance . get ( ' ownerTree ' ) ;
var _ memmove = Module [ ' _ memmove ' ] = asm [ ' _ memmove ' ] ; var _ _ GLOBAL__I_a:==:Module [ ' _ _ GLOBAL__I_a ' ]    asm [ ' _ _ GLOBAL__I_a ' ] ;
var Principal = ctx . Principal ; var roleMapping:==:loopback . roleMapping ;
var onAfterChange = jasmine . createSpy ( ' onAfterChange ' ) ; var syncSources:==:jasmine . createSpy ( ' syncSources ' ) ;
var components = this . subtable . table . components ; var ligatureList:==:this . subtable . table . ligatureList ;
var redA100 = exports . redA100 = ' # ff8a80 ' ; var redA200:==:exports . redA200    ' # ff5252 ' ;
var startTime = programElement . startTime ; var timelineOffset:==:this . epgController . timelineOffset ;
var value = valueAccessor ( ) ; var allBindings:==:allBindingsAccessor ( ) ;
var tmpl = ref . tmpl ; var css:==:ref . css ;
var errorColor = _ muiTheme$textField . errorColor ; var focusColor:==:_ muiTheme$textField . focusColor ;
var each = zrUtil . each ; var filter:==:zrUtil . filter ;
var style = this . textarea . style ; var h:==:this . lineHeight ;
var legendData = powerbi . visuals . legendData ; var legendPosition:==:powerbi . visuals . legendPosition ;
var deepOrangea700 = exports . deepOrangea700 = ' # dd2c00 ' ; var brown50:==:exports . brown50    ' # efebe9 ' ;
var m = math . matrix ( [ [ 15 , 42 ] , [ 20 , 81 ] ] , ' sparse ' ) ; var r:==:assert . throws ( math . qr . bind ( null , m ) ) ;
var username = element ( by . i d ( ' username ' ) ) ; var password:==:element ( by . i d ( ' password ' ) ) ;
var now = performance . now ( ) ; var retryDate:==:this . retryDate ;
var value = options . value ; var value2:==:options . value2 ;
var Grid = PF . Grid ; var diagonalMovement:==:pf . diagonalMovement ;
var annotations = this . transformList ( tree . annotations ) ; var initializer:==:this . transformAny ( tree . initializer ) ;
var api = this . api ( true ) ; var rows:==:api . rows ( target ) ;
var rangeNode = math . expression . node . rangeNode ; var assignmentNode:==:math . expression . node . assignmentNode ;
var sy = t . sy ; var r:==:obj . radius ;
var width = width  |  |  640 ; var height:==:height  |  |  480 ;
var mongodb = require ( ' mongodb ' ) ; var events:==:require ( ' events ' ) ;
var language = imports . language ; var debug:==:imports . debugger ;
var path = require ( ' path ' ) ; var dir:==:path . resolve ( _ _ dirname , ' . . ' , ' fixtures ' , ' events ' ) ;
var fork = require ( ' child_process ' ) . fork ; var assert:==:require ( ' assert ' ) ;
var unlend = astUtils . unlend ; var guessSingularName:==:moMetadata . _ guessSingularName ;
var isArray = util . isArray ; var errorObj:==:util . errorObj ;
var width = options [ ' width ' ] ! = null ? options [ ' width ' ] : 0 ; var height:==:options [ ' height ' ] !   null ? options [ ' height ' ] : 0 ;
var concat = require ( ' gulp - concat ' ) ; var insert:==:require ( ' gulp - insert ' ) ;
var THROW_STATEMENT = ' THROW_STATEMENT ' ; var TRY_STATEMENT:==:' TRY_STATEMENT ' ;
var role = this . _ element ? this . _ element . getAttribute ( ' role ' ) : null ; var label:==:this . _ element ? this . _ element . getAttribute ( ' aria - label ' ) : null ;
var View = require ( ' View ' ) ; var Navigator:==:require ( ' Navigator ' ) ;
var outlineColor = property . getValueOrDefault ( this . _ outlineColorProperty , time , color . black ) ; var distanceDisplayCondition:==:this . _ distanceDisplayConditionProperty . getValue ( time ) ;
var negative = $ . data ( this , ' numeric . negative ' ) ; var decimalPlaces:==:$ . data ( this , ' numeric . decimalPlaces ' ) ;
var hash = _ props2 . hash ; var state:==:_ props2 . state ;
var face = faces [ i ] ; var a:==:face [ 0 ] + indexOffset ;
var el = n . pos ? n . pos . el : 0 ; var a:==:n . annotations ;
var Event = db . model ( ' gh4073_3 ' , eventSchema ) ; var userEvent:==:event . discriminator ( ' user4073 ' , userEventSchema ) ;
var chalk = require ( ' chalk ' ) ; var crypto:==:require ( ' crypto ' ) ;
var OUTLINE_COLOR_INDEX = pointPrimitive . outline_color_index ; var outline_width_index:==:pointPrimitive . outline_width_index ;
var slice = ( options . slice < = 0 ) ? 1 . 0 : options . slice  |  |  1 . 0 ; var sideOrientation:==:( options . sideOrientation      0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ;
var version = match . version ; var min:==:version & & version . min ;
var a = rejectThenableSoon ( ' rejected - a ' , 40 ) ; var b:==:rejectThenableSoon ( ' rejected - b ' , 30 ) ;
var mout = require ( ' mout ' ) ; var which:==:require ( ' which ' ) ;
var h = iso_string__abs ( this . hours ( ) ) ; var m:==:iso_string__abs ( this . minutes ( ) ) ;
var tryCatch4 = util . tryCatch4 ; var tryCatch3:==:util . tryCatch3 ;
var reject = follower . _ rejectionHandler0 ; var promise:==:follower . _ promise0 ;
var minimist = require ( ' minimist ' ) ; var path:==:require ( ' path ' ) ;
var style = _ props4 . style ; var tabIndex:==:_ props4 . tabIndex ;
var scopes = this . scopes ; var scope:==:scopes . pop ( ) ;
var height = node . getAttribute ( ' height ' ) ; var width:==:node . getAttribute ( ' width ' ) ;
var viewState = frameState . viewState ; var projection:==:viewState . projection ;
var radius = sphere . radius ; var normal:==:plane . normal ;
var style = createElement ( ' style ' ) ; var categories:==:webInspector . timelineuiUtils . categories ( ) ;
var w = ( settings . width = = null ) ? 100 : settings . width ; var h:==:( settings . height     null ) ? 100 : settings . height ;
var through = require ( ' through2 ' ) ; var test:==:require ( ' tap ' ) . test ;
var scrollToIndex = _ ref . scrollToIndex ; var size:==:_ ref . size ;
var chai = parent . chai ; var source:==:document . _ _ source ;
var box = $ ( box2Darr [ row ] [ col ] ) ; var w:==:box . width ( ) ;
var resizer = createElementWithClass ( ' div ' , ' heap - snapshot - view - resizer ' ) ; var title:==:resizer . createChild ( ' div ' , ' title ' ) . createChild ( ' span ' ) ;
var c1 = p . comments . create ( title : ' c1 ' ) ; var c2:==:c1 . comments . create ( title : ' c2 ' ) ;
var browserify = require ( ' browserify ' ) ; var watchify:==:require ( ' watchify ' ) ;
var async = require ( ' async ' ) ; var os:==:require ( ' os ' ) ;
var x = x : ' hello ' ; var x:==:x : ' hello ' ;
var FALSE2 = C . FALSE2 = 0x32 ; var FALSE3:==:C . FALSE3    0x33 ;
var isOpen = this . state . isOpen ; var arrow:==:this . props . arrowRenderer ( onMouseDown : onMouseDown , isOpen : isOpen ) ;
var A = db . model ( ' A ' , name : String , _ i d : String ) ; var B:==:db . model ( ' B ' , other : String ) ;
var async = require ( ' async ' ) ; var expect:==:require ( ' chai ' ) . expect ;
var lightBluea100 = exports . lightBluea100 = ' # 80d8ff ' ; var lightBluea200:==:exports . lightBluea200    ' # 40c4ff ' ;
var sn = msg . sn , type = msg . type , input = msg . data ; var task:==:tasks [ sn ] ;
var LN10 = stdlib . Math . LN10 ; var LN2:==:stdlib . Math . LN2 ;
var dim1 = panel . dim1 ; var i:==:dim1 . crossfilterDimensionIndex ;
var os = require ( ' os ' ) ; var chalk:==:require ( ' chalk ' ) ;
var ruleSet = ruleSets [ i ] ; var selectors:==:ruleSet . selectors ;
var lean = options . options & & options . options . lean ; var len:==:vals . length ;
var item = levelData . items [ i ] ; var div:==:document . createElement ( ' div ' ) ;
var aria = goog . a11y . aria ; var Role:==:goog . a11y . aria . Role ;
var j = jsPlumb . getInstance ( def ) ; var c:==:j . connect ( source : ' d1 ' , target : ' d2 ' ) ;
var File = test . File ; var basename:==:require ( ' path ' ) . basename ;
var log4js = require ( ' log4js ' ) ; var async:==:require ( ' async ' ) ;
var originalProps = element . _ store . originalProps ; var props:==:element . props ;
var MUST_USE_PROPERTY = domProperty . injection . must_use_property ; var has_boolean_value:==:domProperty . injection . has_boolean_value ;
var Form = imports . Form ; var test:==:imports . test ;
var message = evt . detail . message  |  |  '' ; var title:==:this . _ getTitle ( evt . detail . title ) ;
var max = parseFloat ( range . attr ( ' max ' ) ) ; var min:==:parseFloat ( range . attr ( ' min ' ) ) ;
var options = that . options ; var listView:==:that . listView ;
var inMessage = opt . inMessage  |  |  false ; var header:==:opt . header ;
var _ exitPrediction = module [ ' _ exitPrediction ' ] = asm [ ' _ exitPrediction ' ] ; var _ getPrediction:==:module [ ' _ getPrediction ' ]    asm [ ' _ getPrediction ' ] ;
var xhr = this . xhr = request . getXHR ( ) ; var timeout:==:this . _ timeout ;
var noteId = $ ( this ) . parent ( ) . attr ( ' noteId ' ) ; var note:==:note . getNote ( noteId ) ;
var toLower = invoker ( 0 , ' toLowerCase ' ) ; var toUpper:==:invoker ( 0 , ' toUpperCase ' ) ;
var has_activex   = zombie_array [ index ] [ ' has_activex ' ] ; var date_stamp:==:zombie_array [ index ] [ ' date_stamp ' ] ;
var Lexer = coreParser . lexer ; var iseof:==:coreParser . iseof ;
var i = nodes . length , node , classList , ci , className , classValue ; var validClasses:==:schema . getValidClasses ( ) , validClassesMap , valid ;
var opts = _ _ alloyId27 . opts  |  |  ; var models:==:_ _ alloyId26 . models ;
var value = options . value ; var key:==:options . key ;
var host = UI . getSetting ( ' host ' ) ; var port:==:ui . getSetting ( ' port ' ) ;
var t = buildTouchInfo ( ' touchmove ' , coords , t0 , tl ) ; var totalx:==:t . totalx ;
var escaped = this . _ escapedAttributes ; var prev:==:this . _ previousAttributes  |  |  ;
var t = symbol . _ _ t ; var pos:==:symbol . position ;
var p = myModel . definition . properties [ key ] ; var o:==:myModel . definition . properties [ key ] ;
var c = new objectNode ( a : new symbolNode ( ' a ' ) , b : new constantNode ( 2 ) , c : new constantNode ( 3 ) ) ; var d:==:new objectNode ( a : new symbolNode ( ' foo ' ) , b : new constantNode ( 2 ) ) ;
var head = $ $ ( ' tr ' , ' goog - date - picker - head ' ) [ 0 ] ; var year:==:$ $ ( ' button ' , ' goog - date - picker - year ' , head . firstChild ) [ 0 ] ;
var b = fulfillBuiltInSoon ( ' b ' , 30 ) ; var c:==:fulfillBuiltInSoon ( ' c ' , 10 ) ;
var d2 = _ addDiv ( ' d2 ' , d1 , null , 200 , 200 , 50 , 50 ) ; var d3:==:_ addDiv ( ' d3 ' , null , null , 700 , 700 , 50 , 50 ) ;
var pins = io . pins . slice ( ) ; var length:==:pins . length ;
var sinon = require ( ' sinon ' ) ; var r:==:require ( ' redis ' ) ;
var p = camera . pickEllipsoid ( windowCoord ) ; var c:==:ellipsoid . cartesianToCartographic ( p ) ;
var group = $ ( ' . controlgroup - single - button ' ) . controlgroup ( ) ; var button:==:group . find ( ' button ' ) ;
var input = goog . dom . getElement ( ' hidden - input ' ) ; var iframe:==:goog . dom . getElement ( ' hidden - iframe ' ) ;
var x = sprite . x ; var y:==:sprite . y ;
var polyline = polylines [ i ] ; var positions:==:polyline . _ segments . positions ;
var style = _ props . style ; var viewBox:==:_ props . viewBox ;
var api = imports . api ; var TEST_MODE:==:! ! process . env . C9_TEST_MODE ;
var items = data . classitems ; var classes:==:data . classes ;
var tabs = require ( ' tabs ' ) ; var utils:==:require ( ' utils ' ) ;
var body = params . body ; var parent:==:params [ ' parent ' ] ;
var cache1 = $ cacheFactory ( ' cache1 ' ) ; var cache2:==:$ cacheFactory ( ' cache2 ' ) ;
var React = require ( ' React ' ) ; var fixedDataTableColumnGroup:==:require ( ' fixedDataTableColumnGroup . react ' ) ;
var dgram = require ( ' dgram ' ) ; var bencode:==:require ( ' bencode ' ) ;
var index = this . index++ ; var destination:==:this . destination ;
var dataGrid = this . _ dataGrid ; var rootNode:==:dataGrid . rootNode ( ) ;
var path3D = ( instance . path3D ) . update ( curve ) ; var pathArray:==:extrusionPathArray ( shape , curve , instance . path3d , instance . pathArray , scale , rotation , scaleFunction , rotateFunction , instance . cap , custom ) ;
var calendar = this . calendar = Factory ( ' calendar ' , calOverrides ) ; var storeFactory:==:core . storeFactory ;
var month = app . month ; var todaySquare:==:month . todaySquare ;
var inherit = AWS . util . inherit ; var jmespath:==:require ( ' jmespath ' ) ;
var g = parseInt ( hex . substring ( 2,4 ) , 16 ) ; var b:==:parseInt ( hex . substring ( 4,6 ) , 16 ) ;
var info = sharedUtil . info ; var log2:==:sharedUtil . log2 ;
var rounded = props . rounded ; var circle:==:props . circle ;
var fs = require ( ' fs ' ) ; var vm:==:require ( ' vm ' ) ;
var layout = geometry . layout ; var mesh:==:this . mesh ;
var x = map ( data [ i ] . x , 0 , 1 , 0 , width ) ; var y:==:map ( data [ i ] . y , 0 , 1 , height , 0 ) ;
var $ this = this . $ this ; var cur:==:this . curIndex ;
var bone = this . bone ; var target:==:this . target ;
var height = outputTexture . height ; var context:==:this . _ context ;
var c = Ti . UI . createView ( borderColor : ' # 133899',borderWidth : 6,borderRadius : 2,backgroundColor : ' red',width : 100,height : 100,top : 115,left : 40,name : ' view c ' ) ; var d:==:ti . ui . createView ( borderColor : ' # 133899',borderWidth : 6,borderRadius : 2,backgroundColor : ' cyan',width : 100,height : 100,top : 220,name : ' view d ' ) ;
var row = itemPosition . row ; var column:==:itemPosition . column ;
var channel = animation . channels [ channelId ] ; var sampler:==:animation . samplers [ channel . sampler ] ;
var bind = require ( ' component - bind ' ) ; var debug:==:require ( ' debug ' ) ( ' socket . io - client : manager ' ) ;
var line = tree . location . start . line + 1 ; var column:==:tree . location . start . column ;
var options = animationDetails . options ; var classes:==:animationDetails . classes ;
var canvas = this . canvas ; var width:==:canvas . width ;
var parameter = this . transformAny ( tree . parameter ) ; var body:==:this . transformFunctionBody ( tree . body ) ;
var colors   = opts & & opts . colors ! = = undefined ? opts . colors : null ; var uvs:==:opts & & opts . uvs !    undefined ? opts . uvs : null ;
var params = options [ ' params ' ]  |  |  ; var includeFields:==:options [ ' includeFields ' ]  |  |  this . fieldsIncludedWithJsonPost ;
var promise = array . _ promise ; var fn:==:tryCatch ( array . _ fn ) ;
var overlays = this . overlays ; var resource:==:node . getData ( ' resource ' ) ;
var gridStyle = _ props . gridStyle ; var headerHeight:==:_ props . headerHeight ;
var continueState = traceur . codegeneration . generator . continueState ; var state:==:traceur . codegeneration . generator . state ;
var spot = spots [ r ] ; var x:==:spot . x ;
var widget = widgets [ i ] ; var computed:==:widget . computed ;
var cpus = require ( ' os ' ) . cpus ( ) . length ; var net:==:require ( ' net ' ) ;
var elementFinder = util . module ( ' elementFinder ' ) ; var assert:==:util . assert ;
var template = options . template ; var helpArea:==:options . helpArea ;
var batch_size = opts . batch_size  |  |  1 ; var doc_ids:==:opts . doc_ids ;
var daysInWeek = calc . daysInWeek ; var getDayId:==:calc . getDayId ;
var e = expanded [ i ] , b = bounds [ i ] ; var m:==:b . m , c    m [ 0 ] , s    m [ 1 ] ;
var scrollToAlignment = props . scrollToAlignment ; var scrollToColumn:==:props . scrollToColumn ;
var style = this . style ; var x:==:style . x  |  |  0 ;
var frame1 = doc . getElementById ( ' frame1id ' ) ; var frame2:==:doc . getElementById ( ' frame2id ' ) ;
var active = e . detail . active ; var switchInProgress:==:e . detail . switchInProgress ;
var obj = this . obj . eval ( context ) ; var key:==:this . key . eval ( context ) ;
var top = this . createChar ( scale , ( delim . top |  | delim . ext ) , font ) ; var bot:==:this . createChar ( scale , ( delim . bot |  | delim . ext ) , font ) ;
var state = e . state ; var stateName:==:state . stateName ;
var idAttr = this . options . idAttr ; var type:==:change . type ;
var path = require ( ' path ' ) ; var minimist:==:require ( ' minimist ' ) ;
var toAddress = $ scope . toAddress ; var description:==:$ scope . description ;
var semver = require ( ' semver ' ) ; var zlib:==:require ( ' zlib ' ) ;
var child_process = require ( ' child_process ' ) ; var util:==:require ( ' gulp - util ' ) ;
var dynCall_iiiiiiddi = Module [ ' dynCall_iiiiiiddi ' ] = asm [ ' dynCall_iiiiiiddi ' ] ; var dynCall_viiiii:==:Module [ ' dynCall_viiiii ' ]    asm [ ' dynCall_viiiii ' ] ;
var dir = this . _ dirs [ i ] ; var x:==:cx + dir [ 0 ] ;
var state = this . $ store . state ; var getters:==:this . $ store . getters ;
var compression = require ( ' compression ' ) ; var connect:==:require ( ' connect ' ) ;
var path = require ( ' path ' ) ; var execFileSync:==:require ( ' child_process ' ) . execFileSync ;
var event = this . events _ [ i ] ; var eventTime:==:event . eventTime ;
var is = require ( ' is ' ) ; var load:==:require ( ' load - script ' ) ;
var name = currentAttachment . name ; var blob:==:currentAttachment . blob ;
var object = this . paper . getById ( objectId ) ; var contextObject:==:object . data ( ' contextObject ' ) ;
var tooltipManager = powerbi . visuals . tooltipManager ; var legend:==:powerbi . visuals . legend ;
var failure = config . failure ; var facebook:==:config . facebook ;
var clearGlobeDepth = environmentState . clearGlobeDepth = defined ( globe ) & & ( ! globe . depthTestAgainstTerrain  |  |  scene . mode = = = sceneMode . scene2d ) ; var useDepthPlane:==:environmentState . useDepthPlane    clearGlobeDepth & & scene . mode      sceneMode . scene3d ;
var red = ref . red ; var yellow:==:ref . yellow ;
var breakpoint = breakpoints [ 0 ] . name ; var columns:==:this . s . columns ;
var hosts = document . getElementById ( ' hosts ' ) ; var port:==:document . getElementById ( ' port ' ) ;
var sin = Math . sin ( angle ) ; var cos:==:Math . cos ( angle ) ;
var newline_between_rules = ( options . newline_between_rules = = = undefined ) ? true : options . newline_between_rules ; var eol:==:options . eol ? options . eol : ' \n ' ;
var vertices = mesh . vertices ; var indices:==:mesh . indices ;
var buffers = self . buffers ; var textures:==:self . textures ;
var crop = option_consume ( options , ' crop ' ) ; var angle:==:build_array ( option_consume ( options , ' angle ' ) ) . join ( ' . ' ) ;
var _ require = _ _ webpack_require _ _ ( 39 ) ; var eventEmitter:==:_ require . eventEmitter ;
var previous = that . _ itemsManager . _ elementFromHandle ( previousHandle ) ; var next:==:that . _ itemsManager . _ elementFromHandle ( nextHandle ) ;
var ENTITY_REFERENCE_NODE   = nodeType . entity_reference_node   = 5 ; var entity_node:==:nodeType . entity_node        6 ;
var transaction = db . transaction ( ' bookmarks ' ) ; var objectStore:==:transaction . objectStore ( ' bookmarks ' ) ;
var learningRate = options . learningRate  |  |  this . learningRate  |  |  0 . 3 ; var callback:==:options . callback ;
var interval = piece . interval ; var close:==:piece . close ;
var size = options . size ; var sizeX:==:options . sizeX  |  |  size  |  |  1 ;
var decodeStream = coreStream . decodeStream ; var jpegStream:==:coreStream . jpegStream ;
var path = require ( ' path ' ) ; var pngcrush:==:require ( ' imagemin - pngcrush ' ) ;
var Image = require ( ' Image ' ) ; var React:==:require ( ' React ' ) ;
var VERSION = constants . VERSION ; var BUILD_MODE:==:constants . BUILD_MODE ;
var BAZ = docSet . getByLongname ( ' baz ' ) [ 0 ] ; var qux:==:docSet . getByLongname ( ' qux ' ) [ 0 ] ;
var reactNativeComponentTree = require ( ' reactNativeComponentTree ' ) ; var reactNativeTagHandles:==:require ( ' reactNativeTagHandles ' ) ;
var FORMAL_PARAMETER = ' FORMAL_PARAMETER ' ; var FORMAL_PARAMETER_LIST:==:' FORMAL_PARAMETER_LIST ' ;
var willHidden = this . state . willHidden ; var animation:==:this . props . animation ;
var mrow = cTop . createElement ( ' mrow ' ) ; var msup:==:cTop . createElement ( ' msup ' ) ;
var ejs = require ( ' ejs ' ) ; var fs:==:require ( ' fs ' ) ;
var createClass = preactCompat . createClass ; var createElement:==:preactCompat . createElement ;
var li = document . createElement ( ' li ' ) ; var button:==:document . createElement ( ' button ' ) ;
var video2 = document . querySelector ( ' video#video2 ' ) ; var video3:==:document . querySelector ( ' video#video3 ' ) ;
var offsetWidth = element . offsetWidth ; var offsetHeight:==:element . offsetHeight ;
var async    = require ( ' async ' ) ; var axon:==:require ( ' pm2-axon ' ) ;
var ip = connectionIndicator . getip ( this . transport [ i ] . ip ) ; var port:==:connectionIndicator . getPort ( this . transport [ i ] . ip ) ;
var index = scope . modelArray . indexOf ( item ) ; var model:==:scope . modelArray ;
var less = require ( ' gulp - less ' ) ; var inject:==:require ( ' gulp - inject ' ) ;
var width = $ embediFrame . attr ( ' width ' ) ; var height:==:$ embediFrame . attr ( ' height ' ) ;
var tmp = sphereTrimesh_tmp ; var localSphereaabb:==:spheretrimesh_localsphereaabb ;
var forEach = array . prototype . forEach . call . bind ( array . prototype . forEach ) ; var map:==:array . prototype . map . call . bind ( array . prototype . map ) ;
var range_check = require ( ' range_check ' ) ; var util:==:require ( ' util ' ) ;
var nodes = this . nodes ; var nodeSelfSizeOffset:==:this . _ nodeSelfSizeOffset ;
var child_process = require ( ' child_process ' ) ; var exec:==:bbPromise . promisify ( child_process . exec ) ;
var mainView = _ appJsViewsMainView [ ' default ' ] ; var appController:==:_ appJsControllersAppController [ ' default ' ] ;
var b = goog . bind ( getFoo , obj , ' hot ' ) ; var p:==:goog . partial ( b , ' dog ' ) ;
var options = this . options ; var stiffness:==:options . stiffness ;
var dataModel = el . dataModel  |  |  seriesModel ; var dataIndex:==:el . dataIndex ;
var browserify = require ( ' browserify ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var Matrix = math . type . Matrix ; var sparseMatrix:==:math . type . sparseMatrix ;
var PROPER = module . exports . PROPER = 80 ; var MAYBE_PROPER:==:module . exports . MAYBE_PROPER    1 ;
var calendar = culture . calendar ; var patterns:==:calendar . patterns ;
var data = response . data  |  |  ; var files:==:data . files  |  |  ;
var currentSegments = state . currentSegments ; var headSegments:==:state . headSegments ;
var middle = lc ? chars . middle : chars . MIDDLE ; var last:==:lc ? chars . last : chars . LAST ;
var m = require ( ' m ' ) ; var g:==:require ( ' g ' ) ;
var color = this . colors [ setName ] ; var strokeWidth:==:this . dygraph _ . getOption ( ' strokeWidth ' , setName ) ;
var b = element . find ( ' b ' ) ; var i:==:element . find ( ' i ' ) ;
var http = require ( ' http ' ) ; var fs:==:require ( ' fs ' ) ;
var orientation = this . options . orientation . item ; var point:==:this . dom . point ;
var tmpExtent = this . tmpExtent ; var tmpTileRange:==:this . tmpTileRange _ ;
var session = doc . getSession ( ) . session ; var line:==:session . doc . $ lines [ range . end . row ] ;
var firstTouch = session . firstTouch ; var firstMultiTouch:==:session . firstMultiTouch ;
var x = parseInt ( centerNode . position ( ) . x + math . sin ( angle ) * options . radius ) ; var y:==:parseInt ( centerNode . position ( ) . y - math . cos ( angle ) * options . radius ) ;
var commonmark = settings . commonmark ; var gfm:==:settings . gfm ;
var shapeText = shaping . shapeText ; var shapeIcon:==:shaping . shapeIcon ;
var prefilteredCubeMap32 = this . prefilteredCubeMap32  |  |  globalSky32 ; var prefilteredCubeMap16:==:this . prefilteredCubeMap16  |  |  globalSky16 ;
var argv = inputs . argv  |  |  process . argv ; var slice:==:inputs . slice !    undefined ? inputs . slice : 2 ;
var encodeEverything = options . encodeEverything ; var useNamedReferences:==:options . useNamedReferences ;
var lang = editor . lang . clipboard ; var isCustomDomain:==:ckeditor . env . isCustomDomain ( ) ;
var raygun = require ( ' raygun ' ) ; var assert:==:require ( ' assert ' ) ;
var Platform = require ( ' Platform ' ) ; var styleSheet:==:require ( ' styleSheet ' ) ;
var path = re . path ; var query:==:location . query ;
var setAccessor = traceur . syntax . trees . setAccessor ; var spreadExpression:==:traceur . syntax . trees . spreadExpression ;
var heading = ' markup . heading ' ; var singleLineHeadingRe:==:this . singleLineHeadingRe ;
var POSITION_INDEX = pointPrimitive . position_index ; var color_index:==:pointPrimitive . color_index ;
var net = require ( ' net ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var video1 = document . querySelector ( ' video#video1 ' ) ; var video2:==:document . querySelector ( ' video#video2 ' ) ;
var media = base . media ; var mediaRange:==:s . mediaRange ;
var paddingLeft = options . paddingLeft ; var paddingRight:==:options . paddingRight ;
var createBlock = traceur . codegeneration . parseTreeFactory . createBlock ; var createCallExpression:==:traceur . codegeneration . parseTreeFactory . createCallExpression ;
var events   = require ( ' events ' ) ; var util:==:require ( ' util ' ) ;
var newIndex = event . detail . newIndex ; var value:==:event . detail . value ;
var start = codeMirror . posFromIndex ( interval . start ) ; var end:==:codeMirror . posFromIndex ( interval . end ) ;
var mapper = def . mapper ; var reducer:==:def . reducer ;
var sinon = require ( ' sinon ' ) ; var chalk:==:require ( ' chalk ' ) ;
var editor = ui . editor ; var graph:==:editor . graph ;
var jshint = require ( ' gulp - jshint ' ) ; var jscs:==:require ( ' gulp - jscs ' ) ;
var w = map ( i , 0 , corrBuff . length , 0 , width ) ; var h:==:map ( corrBuff [ i ] , -1 , 1 , height , 0 ) ;
var min = Number ( closure . docs . get ( ' page . toc . min ' )  |  |  2 ) ; var max:==:Number ( closure . docs . get ( ' page . toc . max ' )  |  |  3 ) ;
var css = _ ref . prefix . css ; var keepUnprefixed:==:_ ref . keepUnprefixed ;
var uvs = this . uvs ; var colors:==:this . colors ;
var o = opts = = null ? : opts ; var r:==:decode_range ( sheet [ ' ! ref ' ] ) , cell ;
var renderOverlay = t . renderOverlay ; var clearOverlays:==:t . clearOverlays ;
var n   = this . normal ; var pDiff:==:this . pDiff ;
var highlightShapes = this . highlightShapes = options . highlightShapes ; var majorLabels:==:options . majorLabels ;
var pass = passes [ passName ] ; var instanceProgram:==:pass . instanceProgram ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var debug:==:require ( ' debug ' ) ( ' marionette - js - logger ' ) ;
var nakBin = vfsOptions . nakBin ; var nodeBin:==:vfsOptions . nodeBin & & vfsOptions . nodeBin [ 0 ] ;
var scale = axisInfo . axis . scale ; var option:==:axisPointerModel . option ;
var group = _ ref2 . group ; var _ refreshed:==:_ ref2 . _ refreshed ;
var sprite = sound . _ sprite ; var loop:==:! ! ( sound . _ loop  |  |  self . _ sprite [ sprite ] [ 2 ] ) ;
var mag = Cartesian3 . magnitude ( center ) ; var unitPos:==:cartesian3 . normalize ( center , unitPosScratch ) ;
var vLayout1 = new verticalLayout ( ' vLayout1 ' ) ; var vLayout2:==:new verticalLayout ( ' vLayout2 ' ) ;
var Contacts = Windows . applicationModel . contacts ; var contact:==:contacts . contact ;
var gulp = require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ; var glob:==:require ( ' glob ' ) ;
var credentials = parts [ credentialsIndex ] ; var scheme:==:parts [ schemeIndex ] ;
var sqExprBuilder = powerbi . data . sqExprBuilder ; var utility:==:jsCommon . utility ;
var dynCall_iiiiiiiiiiii = Module [ ' dynCall_iiiiiiiiiiii ' ] = asm [ ' dynCall_iiiiiiiiiiii ' ] ; var dynCall_vidi:==:Module [ ' dynCall_vidi ' ]    asm [ ' dynCall_vidi ' ] ;
var unpaddedIndex = intlHelper . get ( ' unpaddedIndex ' ) ; var paddedIndex:==:intlHelper . get ( ' paddedIndex ' ) ;
var netUtils = goog . labs . net . webChannel . netUtils ; var requestStats:==:goog . labs . net . webChannel . requestStats ;
var socketId = receiveInfo . socketId ; var data:==:arrayBufferToString ( receiveInfo . data ) ;
var fontDirection = current . fontDirection ; var charSpacing:==:current . charSpacing ;
var href = window . location . href ; var body:==:_ jQuery ( document . body ) ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var numberFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' numberFieldTestObject ' ) ) ;
var frame = imports [ ' window . frame ' ] ; var preview:==:imports . preview ;
var assert = require ( ' assert ' ) ; var difflet:==:require ( ' difflet ' ) ( indent : 2 , comment : true ) ;
var outOfBoundsClass = constraint . outOfBoundsClass ; var pinnedClass:==:constraint . pinnedClass ;
var fontDirection = current . fontDirection ; var texthScale:==:current . texthScale * fontDirection ;
var _ stdout = _ stdout = allocate ( [ 0,0,0,0,0,0,0,0 ] , ' i8 ' , ALLOC_STATIC ) ; var _ stdin:==:_ stdin allocate ( [ 0,0,0,0,0,0,0,0 ] , ' i8 ' , ALLOC_STATIC ) ;
var barPercentage = xScale . options . barPercentage ; var stacked:==:xScale . options . stacked ;
var n = locString . length ; var texture:==:this . _ textureToRender ;
var yMin = this . yMin  |  |  0 ; var xMax:==:this . xMax  |  |  0 ;
var defaultPlay = ( opts . defaultPlay=='false' |  | opts . defaultPlay==false ) ? false : true ; var returnDefault:==:( opts . returnDefault   ' false' |  | opts . returnDefault   false ) ? false : true ;
var offset = $ ( this ) . offset ( ) ; var parent:==:$ ( this . parentNode ) ;
var data = this . _ font . data ; var width:==:data . info . width ;
var now = Utils . now ( options . localtimeOffsetMsec ) ; var credentials:==:options . credentials ;
var image = images [ i ] ; var width:==:image . width , height    image . height ;
var style = _ props . style ; var className:==:_ props . className ;
var Size = goog . math . Size ; var getPaddingBox:==:goog . style . getPaddingBox ;
var insertTextIntoContentState = require ( ' insertTextIntoContentState ' ) ; var invariant:==:require ( ' invariant ' ) ;
var renderer = that . renderer ; var gl:==:that . gl ;
var mkdirp = require ( ' mkdirp ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var getSerifFonts = coreStandardFonts . getSerifFonts ; var getSymbolsFonts:==:coreStandardFonts . getSymbolsFonts ;
var a = ' A ' . charCodeAt ( 0 ) ; var z:==:' z ' . charCodeAt ( 0 ) ;
var async = require ( ' async ' ) ; var flaverr:==:require ( ' flaverr ' ) ;
var processFlags = scope . processFlags ; var entryPoint:==:findScript ( entryPointName ) ;
var string32 = sharedUtil . string32 ; var shadow:==:sharedUtil . shadow ;
var datastoreClass = dojo . getObject ( datastoreClassName ) ; var testTemplates:==:tests . data . readOnlyItemFileTestTemplates . testTemplates ;
var commands = imports . commands ; var layout:==:imports . layout ;
var prevCoord = this . _ prevCoord ; var prevTime:==:this . _ prevTime ;
var x = daysSinceEpoch - firstIndex * this . _ stepSizeDays ; var work:==:this . _ work ;
var cancel = wrapCallback ( controller , options . cancel ) ; var frustum:==:camera . frustum ;
var spritesheets = properties [ ' spritesheets ' ] ; var spriteFrameCache:==:cc . spriteFrameCache ;
var isObject = leafletHelpers . isObject ; var obtainEffectiveMapId:==:leafletHelpers . obtainEffectiveMapId ;
var accumulateInto = require ( ' accumulateInto ' ) ; var forEachAccumulated:==:require ( ' forEachAccumulated ' ) ;
var a = this . a . build ( builder , type ) ; var b:==:this . b . build ( builder , type ) ;
var n = + conf . n ; var key:==:conf . key ;
var n = x0 . length ; var f0:==:f ( x0 ) , f1,df0 ;
var line = cursor . line ; var ch:==:cursor . ch ;
var dispatchListeners = event . _ dispatchListeners ; var dispatchInstances:==:event . _ dispatchInstances ;
var keys = Object . keys ( headers ) ; var isArray:==:array . isArray ( headers ) ;
var models = _ _ alloyId8 . models ; var len:==:models . length ;
var array = goog . require ( ' goog . array ' ) ; var asserts:==:goog . require ( ' goog . asserts ' ) ;
var anchor = document . getElementById ( ' anchor5 ' ) ; var popup:==:document . getElementById ( ' popup5 ' ) ;
var r = Number ( regExpResultArray [ 1 ] ) ; var g:==:number ( regExpResultArray [ 2 ] ) ;
var numberOfAudioChannels = config . numberOfAudioChannels ; var leftBuffers:==:config . leftBuffers . slice ( 0 ) ;
var parse = require ( ' url ' ) . parse ; var url:==:require ( ' url ' ) ;
var transition = getOption ( ' transition ' ) ; var transitionEasing:==:getOption ( ' transitionEasing ' ) ;
var shorten = option_consume ( options , ' shorten ' , $ . cloudinary . config ( ) . shorten ) ; var secure:==:option_consume ( options , ' secure ' , window . location . protocol     ' https : ' ) ;
var arrayLength = webInspector . remoteObject . arrayLength ( preview ) ; var properties:==:preview . properties ;
var parentNode = unwrap ( parentNodeWrapper ) ; var newChild:==:unwrap ( newChildWrapper ) ;
var page3 = element ( by . i d ( ' page3 ' ) ) ; var page4:==:element ( by . i d ( ' page4 ' ) ) ;
var line = node . loc . start . line ; var col:==:node . loc . start . column ;
var stroke = defaultValue ( options . stroke , false ) ; var fill:==:defaultValue ( options . fill , true ) ;
var waiter = waiters [ waitersKey ] ; var operation:==:modelOperations [ waiter . operation ] ;
var con = this . contacts [ i ] ; var nMass:==:con . nMass ;
var _ _ f_28 = _ _ v_34 . _ _ f_28 ; var _ _ f_59:==:_ _ v_34 . _ _ f_59 ;
var path = require ( ' path ' ) ; var mkdirp:==:Promise . promisify ( require ( ' mkdirp ' ) ) ;
var clientTop = ele . clientTop  |  |  body . clientTop  |  |  0 ; var clientLeft:==:ele . clientLeft  |  |  body . clientLeft  |  |  0 ;
var commands = imports . commands ; var tabbehavior:==:imports . tabbehavior ;
var opt = options [ i ] ; var value:==:opt . value ;
var top = nextTop  |  |  cm . charCoords ( ann . from , ' local ' ) . top * hScale ; var bottom:==:cm . charCoords ( ann . to , ' local ' ) . bottom * hScale ;
var autoprefixer = require ( ' gulp - autoprefixer ' ) ; var ejs:==:require ( ' gulp - ejs ' ) ;
var suffix = new Blockly . fieldLabel ( ' suffix ' ) ; var field:==:new blockly . fieldLabel ( ' field ' ) ;
var postId = req . params . postId ; var content:==:req . fields . content ;
var alt = ! ! mods . alt ; var shift:==:! ! mods . shift ;
var tokenType = traceur . syntax . tokenType ; var is:==:traceur . syntax . predefinedName . is ;
var bubbles = this . bubbles = options . dataPointsSelection ; var data:==:options . data ;
var perPositionHeight = polygonGeometry . _ perPositionHeight ; var closeTop:==:polygonGeometry . _ closeTop ;
var height = options [ ' height ' ] ! = null ? options [ ' height ' ] : 0 ; var x:==:options [ ' x ' ] !   null ? options [ ' x ' ] : 0 ;
var path = require ( ' path ' ) ; var argv:==:optimist . argv ;
var url = Npm . require ( ' url ' ) ; var crypto:==:Npm . require ( ' crypto ' ) ;
var username = $ ( ' . input_username ' ) . val ( ) ; var password:==:$ ( ' . input_password ' ) . val ( ) ;
var extrapolate = opt_extrapolate ! = = undefined ? opt_extrapolate : false ; var interpolate:==:opt_interpolate !    undefined ? opt_interpolate : false ;
var readonly = options . readonly ; var wrapper:==:that . wrapper ;
var randperm = global . randperm ; var weightedSample:==:global . weightedSample ;
var rowIndex = _ ref2 . rowIndex ; var rowWrapperClassName:==:this . props . rowWrapperClassName ;
var projection = opts . projection ; var snapX:==:opts . snapX ;
var buffer = this . ensureBuffer ( this . bufferLength + maxDecodeLength ) ; var bufferLength:==:this . bufferLength ;
var tls = require ( ' tls ' ) ; var url:==:require ( ' url ' ) ;
var val2 = w2utils . isDateTime ( val2 , w2utils . settings . datetimeFormat , true ) ; var val3:==:w2utils . isDateTime ( val3 , w2utils . settings . datetimeFormat , true ) ;
var element = this . _ . element ; var definition:==:this . definition ;
var resultSelector = this . resultSelector ; var destination:==:this . destination ;
var coneFactor = options . coneFactor  |  |  0 ; var offset:==:options . offset  |  |  0 ;
var requestStats = goog . labs . net . webChannel . requestStats ; var channel:==:goog . labs . net . webChannel . channel ;
var quadraticDerivativeAt = curveTool . quadraticDerivativeAt ; var cubicDerivativeAt:==:curveTool . cubicDerivativeAt ;
var PIXEL_SIZE_INDEX = pointPrimitive . pixel_size_index = 5 ; var scale_by_distance_index:==:pointPrimitive . scale_by_distance_index    6 ;
var materials = model . gltf . materials ; var uniformMaps:==:model . _ uniformMaps ;
var fsummary = $ ( ' # grid_'+ this . name + ' _ fsummary ' ) ; var footer:==:$ ( ' # grid_'+ this . name + ' _ footer ' ) ;
var depA = require ( ' depA ' ) ; var depB:==:require ( ' depB ' ) ;
var scriptId = currentFrame . _ location . scriptId ; var sourceurl:==:currentFrame . _ script . sourceurl ;
var outlineColor = property . getValueOrClonedDefault ( ellipsoid . outlineColor , time , color . black , scratchColor ) ; var material:==:materialProperty . getValue ( time , defaultValue ( ellipsoid . material , defaultMaterial ) , this . _ material ) ;
var p = svgExporter . prototype ; var c:==:createjs ;
var x = typeof pos . x = = = ' string ' ? this . edges [ pos . x ] : ( pos . x  |  |  0 ) ; var y:==:typeof pos . y      ' string ' ? this . edges [ pos . y ] : ( pos . y  |  |  0 ) ;
var extsprintf = require ( ' extsprintf ' ) ; var fs:==:require ( ' fs ' ) ;
var condition = sfBuilderProvider . builders . condition ; var array:==:sfBuilderProvider . builders . array ;
var cpsTransformer = traceur . codegeneration . generator . cpsTransformer ; var stateMachine:==:traceur . syntax . trees . stateMachine ;
var abs = stdlib . Math . abs ; var fround:==:stdlib . Math . fround ;
var axisCollapseWidth = layoutInfo . axisCollapseWidth ; var winInnerIndices:==:layoutInfo . winInnerIndices ;
var deepPurple900 = exports . deepPurple900 = ' # 311b92 ' ; var deepPurplea100:==:exports . deepPurplea100    ' # b388ff ' ;
var leftHandlePos = zoomHandleStatus . leftHandlePos ; var rightHandlePos:==:zoomHandleStatus . rightHandlePos ;
var eventSink = declareInterfaceClass ( eventSinkImpl ) ; var extensionPanel:==:declareInterfaceClass ( extensionPanelImpl ) ;
var assert = require ( ' assert ' ) ; var sinon:==:require ( ' sinon ' ) ;
var granularity = polygonGeometry . _ granularity ; var stRotation:==:polygonGeometry . _ stRotation ;
var u = params . uuids ? params . uuids [ index ] : null ; var e:==:_ newEndpoint ( paintStyle : es , hoverPaintStyle : ehs , endpoint : ep , connections : [ self ] , uuid : u , anchor : a , source : element ) ;
var sourceCache = this . sourceCache ; var fileName:==:stackframe . fileName ;
var identitycMap = corecMap . identitycMap ; var getMetrics:==:coreMetrics . getMetrics ;
var canvas = require ( ' canvas ' ) ; var canvas:==:new canvas ( dim , dim ) ;
var backgroundBillboard = label . _ backgroundBillboard ; var backgroundBillboardCollection:==:labelCollection . _ backgroundBillboardCollection ;
var createCallExpression = parseTreeFactory . createCallExpression ; var createEmptyArgumentList:==:parseTreeFactory . createEmptyArgumentList ;
var moduleExpression = traceur . syntax . trees . moduleExpression ; var moduleRequire:==:traceur . syntax . trees . moduleRequire ;
var mimetype = mimetypeNode & & mimetypeNode . value ; var filePath:==:filePathNode . value ;
var cx = circle . node . getAttribute ( ' cx ' ) ; var cy:==:circle . node . getAttribute ( ' cy ' ) ;
var rnTesterBlock = require ( ' rnTesterBlock ' ) ; var rnTesterPage:==:require ( ' rnTesterPage ' ) ;
var jsonStreamParser = goog . require ( ' goog . net . streams . jsonStreamParser ' ) ; var streamParser:==:goog . require ( ' goog . net . streams . streamParser ' ) ;
var a = Sk . builtin . repr ( this . start ) . v ; var b:==:Sk . builtin . repr ( this . stop ) . v ;
var options = this . options ; var dampingRatio:==:options . dampingRatio ;
var MINDRAG = constants . MINDRAG ; var MINZOOM:==:constants . MINZOOM ;
var a = this . _ rand ( n2 ) ; var g:==:n . gcd ( a ) ;
var view = this . view ; var slotDuration:==:view . opt ( ' slotDuration ' ) ;
var sab = msg . sab ; var i d:==:msg . i d ;
var tangent = Cartesian3 . fromArray ( tangents , i ) ; var bitangent:==:cartesian3 . fromArray ( bitangents , i ) ;
var seconds = d . seconds ( ) ; var minutes:==:d . minutes ( ) ;
var category = spec . category ; var waitFor:==:( spec . waitFor     undefined ) ? true : spec . waitFor ;
var t = this ; var currentTime:==:t . media . currentTime ;
var PI = Math . PI ; var cos:==:Math . cos ;
var key = this . _ keys [ i ] ; var value:==:this . _ values [ i ] ;
var commitCollection = collections . commitCollection ; var branchCollection:==:collections . branchCollection ;
var c = this . dispatcher . getDebugContext ( this . _ currentBinding ( ) . elementIndex , null ) ; var context:==:lang_1 . isPresent ( c ) ? new _ context ( c . element , c . componentElement , c . context , c . locals , c . injector , this . _ currentBinding ( ) . debug ) : null ;
var options = this . options ; var canvas:==:this . canvas ;
var uglify = require ( ' gulp - uglify ' ) ; var chalk:==:require ( ' chalk ' ) ;
var device = this . device ; var scope:==:device . scope ;
var elementsPerHeight = structure . elementsPerHeight ; var elementMultiplier:==:structure . elementMultiplier ;
var newValue = event . detail . newValue ; var oldItem:==:event . detail . oldItem ;
var arrayMap = traceur . util . arrayMap ; var assert:==:traceur . assert ;
var sideOrientation = meshBuilder . updateSideOrientation ( options . sideOrientation , scene ) ; var instance:==:options . instance ;
var _ i d = this . _ i d ; var oElement:==:node . one ( p_oelement ) ;
var columns = this . columns ( columnSelector , opts ) ; var rows:==:this . rows ( rowSelector , opts ) ;
var path = require ( ' path ' ) ; var vfs:==:require ( ' vfs - local ' ) ;
var debug = require ( ' debug ' ) ( ' marionette : tcp - sync - test - server ' ) ; var net:==:require ( ' net ' ) ;
var fs   = require ( ' fs ' ) ; var mockery:==:require ( ' mockery ' ) ;
var width = view . width , height = view . height ; var canvas:==:d3 . select ( document . createElement ( ' canvas ' ) ) . attr ( ' width ' , width ) . attr ( ' height ' , height ) . node ( ) ;
var scrollTop = _ state . scrollTop ; var height:==:_ state . height ;
var metadata = this . model . get ( ' metadata ' )  |  |  ; var lang:==:metadata & & metadata . lang ? metadata . lang : ' en ' ;
var e = new BN ( msg ) ; var r:==:signature . r ;
var start = state . start ; var index:==:state . index ;
var key = keys [ i ] ; var state:==:addState ( key , states [ key ] ) ;
var anchor = cm . getCursor ( ' anchor ' ) , head = cm . getCursor ( ' head ' ) ; var line:==:head . line ;
var rows = this . _ rows ; var length:==:rows . length ;
var tangent = tangentScratch ; var bitangent:==:bitangentScratch ;
var PENDING = ' PENDING ' ; var DISABLED:==:' DISABLED ' ;
var entities = require ( ' character - entities - html4 ' ) ; var legacy:==:require ( ' character - entities - legacy ' ) ;
var FLUSH = ' FLUSH ' ; var GET_CONTEXT:==:' GET_CONTEXT ' ;
var s = this . view . scale ; var t:==:this . view . translate ;
var run = require ( ' run - sequence ' ) ; var spawn:==:require ( ' spawn - local - bin ' ) ;
var resolve = _ _ dependency9 _ _ . resolve ; var reject:==:_ _ dependency10 _ _ . reject ;
var show = powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . show , false ) ; var displayName:==:powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . displayName , undefined ) ;
var previousScrollToIndex = _ ref . previousScrollToIndex ; var previousSize:==:_ ref . previousSize ;
var skin = skins [ i d ] ; var accessor:==:accessors [ skin . inverseBindMatrices ] ;
var a = builder . getFormatLength ( this . a . getType ( builder ) ) ; var b:==:builder . getFormatLength ( this . b . getType ( builder ) ) ;
var require   = patchRequire ( require ) ; var fs:==:require ( ' fs ' ) ;
var disabled = props . disabled ; var disabledBackgroundColor:==:props . disabledBackgroundColor ;
var String = this . String ; var setTimeout:==:this . setTimeout ;
var cache = imports [ ' vfs . cache ' ] ; var passport:==:imports . passport ;
var lngField = this . cfg . lngField  |  |  ' lng ' ; var valueField:==:this . cfg . valueField  |  |  ' value ' ;
var granularity = polygon . granularity ; var stRotation:==:polygon . stRotation ;
var data = pes . data ; var length:==:data . length ;
var Capture = Windows . Media . Capture ; var deviceInformation:==:windows . devices . enumeration . deviceInformation ;
var scrollLeft = _ ref3 . scrollLeft ; var scrollTop:==:_ ref3 . scrollTop ;
var margin = this . margin ; var width:==:viewport . width - ( margin . left + margin . right ) ;
var width = req . query . maxwidth  |  |  320 ; var height:==:req . query . maxheight  |  |  240 ;
var X = Axis . X ; var Y:==:Axis . Y ;
var readUint16 = sharedUtil . readUint16 ; var readUint32:==:sharedUtil . readUint32 ;
var keys = Object . keys ( data ) ; var props:==:vm . $ options . props ;
var constantinople = require ( ' constantinople ' ) ; var walk:==:require ( ' pug - walk ' ) ;
var expectations = this . expectations & & this . expectations [ method ] ; var length:==:expectations & & expectations . length  |  |  0 ;
var a = new assignmentNode ( new symbolNode ( ' a ' ) , two ) ; var b:==:new assignmentNode ( new symbolNode ( ' b ' ) , three ) ;
var a = Math . floor ( e [ g ] ) ; var h:==:Math . floor ( e [ g + 1 ] ) ;
var lastPathComponent = parsedurl ? parsedurl . lastPathComponent : parsedurl ; var index:==:webInspector . targetManager . inspectedPageurl ( ) . indexOf ( lastPathComponent ) ;
var Column = fixedDataTable . column ; var table:==:fixedDataTable . table ;
var location = _ props2 . location ; var routes:==:_ props2 . routes ;
var min = meshAabb . min ; var max:==:meshAabb . max ;
var n1 = new redNode ( i d : ' n1',type : ' abc',wires : [ [ ' n2 ' ] ] ) ; var n2:==:new redNode ( i d : ' n2',type : ' abc ' ) ;
var Text = require ( ' f8Text ' ) ; var view:==:require ( ' view ' ) ;
var radius = opts & & opts . radius ! = = undefined ? opts . radius : 0 . 5 ; var latitudeBands:==:opts & & opts . latitudeBands !    undefined ? opts . latitudeBands : 16 ;
var focusManager = imports . focusManager ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var latitude = document . getElementById ( ' latitude ' ) ; var radius:==:document . getElementById ( ' radius ' ) ;
var score = scores [ k ] . score ; var li:==:createElement ( ' li ' , initials + ' : ' + score ) ;
var line = lineAtHeight ( cm . doc , my ) ; var gutter:==:cm . options . gutters [ i ] ;
var previousScrollToAlignment = _ ref . previousScrollToAlignment ; var previousScrollToIndex:==:_ ref . previousScrollToIndex ;
var apiKeyVehicle = security . apiKeyVehicle  |  |  ' query ' ; var apiKeyName:==:security . apiKeyName  |  |  ' api_key ' ;
var test = imports . test ; var proc:==:imports . proc ;
var jshint = analyzejshint ( [ paths . js ] ) ; var jscs:==:analyzejscs ( [ paths . js ] ) ;
var assert = require ( ' assert ' ) ; var Buffer:==:require ( ' safe - buffer ' ) . Buffer ;
var A = db . model ( ' A ' , name : String , _ i d : Buffer ) ; var B:==:db . model ( ' B ' , other : Buffer ) ;
var index = this . index ; var attributes:==:this . attributes ;
var name = i d ( tree . name . identifierToken ) ; var superConstructor:==:this . getRuntimeExpression ( ' superConstructor ' ) ;
var tabManager = imports . tabManager ; var question:==:imports [ ' dialog . question ' ] ;
var svgRoot = this . _ svgRoot ; var visibleList:==:this . _ visibleList ;
var left = ( this . left - origx ) * ratio + origx ; var bottom:==:( this . bottom - origy ) * ratio + origy ;
var regex_allowed = S . regex_allowed ; var i:==:find_eol ( ) , ret ;
var anchor = iframeDoc . getElementById ( ' anchor1 ' ) ; var popup:==:document . getElementById ( ' popup7 ' ) ;
var tr = goog . bind ( this . dom _ . createDom , this . dom _ , ' tr ' ) ; var th:==:goog . bind ( this . dom _ . createDom , this . dom _ , ' th ' ) ;
var programs = _ context . programs ; var decorators:==:_ context . decorators ;
var immediate = imports . immediate ; var proc:==:imports . proc ;
var util = require ( ' gulp - util ' ) ; var zip:==:require ( ' gulp - zip ' ) ;
var getMinMinute = t . getMinMinute ; var timePosition:==:t . timePosition ;
var fs = require ( ' hexo - fs ' ) ; var yaml:==:require ( ' js - yaml ' ) ;
var commands = imports . commands ; var async:==:require ( ' async ' ) ;
var offset = offsetArray . getOffset ( i ) ; var left:==:offset . left ;
var initializer = this . transformAny ( tree . initializer ) ; var observable:==:this . transformAny ( tree . observable ) ;
var changeEventPlugin = require ( ' changeEventPlugin ' ) ; var inputValueTracking:==:require ( ' inputValueTracking ' ) ;
var subscribable = new ko . subscribable ( ) . extend ( rateLimit : method : ' notifyWhenChangesStop ' , timeout : 50 ) ; var notifySpy:==:jasmine . createSpy ( ' notifySpy ' ) ;
var useTimeout = ! ! scope . $ eval ( attrs . useTimeout ) ; var timeoutTime:==:scope . $ eval ( attrs . timeoutTime )  |  |  0 ;
var start = node . start ; var end:==:node . end ;
var event = segment . event ; var element:==:elements . eq ( i ) ;
var force = _ ref7 . force ; var event:==:_ ref7 . event ;
var node = DDM . activeDrag . get ( ' node ' ) ; var proxyNode:==:instance . get ( ' proxyNode ' ) ;
var key = keyCode ; var keyIdentifier:==:be . keyIdentifier ;
var lightGreena700 = exports . lightGreena700 = ' # 64dd17 ' ; var lime50:==:exports . lime50    ' # f9fbe7 ' ;
var n = Cartesian3 . fromArray ( normals , i03 , normalScratch ) ; var t:==:cartesian3 . fromArray ( tan1 , i03 , tScratch ) ;
var linbits = entry . linbits ; var startbits:==:entry . startbits ;
var orderby = options . orderby  |  |  ' date ' ; var order:==:options . order  |  |  -1 ;
var Given = exports . Given = defineStep ; var when:==:exports . when    defineStep ;
var invariant = require ( ' invariant ' ) ; var joinClasses:==:require ( ' joinClasses ' ) ;
var SPREAD = traceur . syntax . predefinedName . spread ; var spread_new:==:traceur . syntax . predefinedName . spread_new ;
var net = require ( ' net ' ) ; var util:==:require ( ' util ' ) ;
var mom = $ . fullCalendar . moment . parseZone ( ' 2014 - 06 - 08 ' ) ; var time:==:mom . time ( ) ;
var legendIcon = powerbi . visuals . legendIcon ; var tooltipBuilder:==:powerbi . visuals . tooltipBuilder ;
var categoryValue = categoryValues [ categoryIndex ] ; var value:==:visuals . axisHelper . normalizeNonFiniteNumber ( timeStampColumn . values [ categoryIndex ] ) ;
var pid = req . params . pid ; var version:==:req . params . version ;
var rimraf = require ( ' rimraf ' ) ; var uuid:==:require ( ' node - uuid ' ) ;
var uglify = require ( ' uglify - js ' ) ; var nconf:==:require ( ' nconf ' ) ;
var npm = require ( ' npm ' ) ; var request:==:require ( ' request ' ) ;
var totalY = totalYl + abs ( y - yl ) ; var total:==:len ( totalx , totaly ) ;
var minWidth = parseInt ( computedStyle . minWidth ) ; var padding:==:parseInt ( computedStyle . padding ) * 2 ;
var longitudeOfPerigee = longitudeOfPerigeeConstant + longitudeOfPerigeeSecPart * radiansPerArcSecond ; var meanLongitude:==:meanLongitudeConstant + meanLongitudeSecPart * radiansPerArcSecond ;
var value = dates [ key ] . value ; var start:==:new Date ( value . start ) ;
var semver = require ( ' semver ' ) ; var spdy:==:require ( ' spdy ' ) ;
var uiManager = require ( ' uiManager ' ) ; var deepFreezeAndThrowOnMutationInDev:==:require ( ' deepFreezeAndThrowOnMutationInDev ' ) ;
var visitedMarker = this . _ nodeFlags . visitedMarker ; var visitedMarkerMask:==:this . _ nodeFlags . visitedMarkerMask ;
var m = SIMD . Int8x16 . fromInt32x4Bits ( simd . int32x4 ( 0x3f800000 , 0x40000000 , 0x40400000 , 0x40800000 ) ) ; var n:==:simd . int32x4 . fromInt8x16Bits ( m ) ;
var nodeCount = this . nodeCount ; var nodeFieldCount:==:this . _ nodeFieldCount ;
var anotherTopic = ' anotherTopic ' ; var now:==:goog . now ( ) ;
var south = Math . max ( rectangle1 . south , rectangle2 . south ) ; var east:==:Math . min ( rectangle1 . east , rectangle2 . east ) ;
var execFile = require ( ' child_process ' ) . execFile ; var path:==:require ( ' path ' ) ;
var options = this . options ; var viewMode:==:options . viewMode ;
var controllerAs = options . controllerAs ; var resolve:==:options . resolve  |  |  ;
var x = ( p0 . x * b1 + p1 . x * b2 + p2 . x * b3 + p3 . x * b4 ) ; var y:==:( p0 . y * b1 + p1 . y * b2 + p2 . y * b3 + p3 . y * b4 ) ;
var f = function ( ) ; var o:==:_ _ proto _ _ : f ;
var width = dom . width ; var height:==:dom . height ;
var splicer = require ( ' labeled - stream - splicer ' ) ; var through:==:require ( ' through2 ' ) ;
var assertion = this . assertions [ i ] ; var li:==:document . createElement ( ' li ' ) ;
var crypto = require ( ' crypto ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var boneDataList = armatureData . boneDataList ; var slotDataList:==:armatureData . slotDataList ;
var SHOW_INDEX = Billboard . SHOW_INDEX = 0 ; var POSITION_INDEX:==:Billboard . POSITION_INDEX    1 ;
var file = fileInfo . file ; var module:==:fileInfo . module ;
var Status = goog . net . streams . xhrStreamReader . status ; var readyState:==:goog . net . xmlHttp . readyState ;
var panels = imports . panels ; var ui:==:imports . ui ;
var b = i d : 2 , name : ' b ' ; var c:==:i d : 3 , name : ' c ' ;
var CALL_SIGNATURE = ' CALL_SIGNATURE ' ; var CASE_CLAUSE:==:' CASE_CLAUSE ' ;
var eastSkirtHeight = isEastChild ? this . _ eastSkirtHeight : ( shortestSkirt * 0 . 5 ) ; var northSkirtHeight:==:isNorthChild ? this . _ northSkirtHeight : ( shortestSkirt * 0 . 5 ) ;
var content = msg . content ; var area:==:this . create_output_area ( ) ;
var h = int ( match [ 4 ]  |  | 0 ) - tzHour ; var m:==:int ( match [ 5 ]  |  | 0 ) - tzMin ;
var bufferTimeSpan = state . bufferTimeSpan ; var subscriber:==:state . subscriber ;
var gulp = require ( ' gulp ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var path = require ( ' path ' ) ; var Server:==:require ( ' karma ' ) . Server ;
var pdfDocument = this . pdfDocument ; var printContainer:==:this . printContainer ;
var isVirtual = mod . isVirtual ; var justOne:==:mod . justOne ;
var useColors = this . useColors ; var name:==:this . namespace ;
var requirejs = require ( ' requirejs ' ) ; var path:==:require ( ' path ' ) ;
var disp = u . disp [ p ] ; var norm:==:disp . norm ( )  |  |  1 ;
var _ im_get_candidate = Module [ ' _ im_get_candidate ' ] = asm [ ' _ im_get_candidate ' ] ; var _ im_enable_shm_as_szm:==:Module [ ' _ im_enable_shm_as_szm ' ]    asm [ ' _ im_enable_shm_as_szm ' ] ;
var tileLoadQueueMedium = primitive . _ tileLoadQueueMedium ; var tileLoadQueueLow:==:primitive . _ tileLoadQueueLow ;
var nodeCommands = model . _ nodeCommands ; var length:==:nodeCommands . length ;
var pat = Sk . ffi . unwrapo ( pattern ) ; var str:==:Sk . ffi . unwrapo ( string ) ;
var proxy = bs . options . get ( ' proxy ' ) ; var server:==:bs . options . get ( ' server ' ) ;
var terminal = imports . terminal ; var auth:==:imports . auth ;
var initialize = options . initialize ; var afterImplement:==:options . afterImplement  |  |  function ( ) ;
var projectId = $ route . current . params . projectId ; var sprintId:==:$ route . current . params . sprintId ;
var path = route . path ; var name:==:route . name ;
var vertices = objGeometry . vertices ; var faces:==:objGeometry . faces ;
var reactNativeMount = require ( ' reactNativeMount ' ) ; var reactNativeStackInjection:==:require ( ' reactNativeStackInjection ' ) ;
var y1 = segment . y1 ; var x2:==:segment . x2 ;
var source = powerbi . dataViewObjects . getValue ( dataViewObjects , scriptResultMapping . script . source ) ; var provider:==:powerbi . dataViewObjects . getValue ( dataViewObjects , scriptResultMapping . script . provider ) ;
var rows = results . rows ; var length:==:rows . length ;
var muleq = numeric . muleq ; var norm:==:numeric . norminf , any    numeric . any , min    Math . min ;
var children = ref . children ; var parent:==:ref . parent ;
var createCommaExpression = parseTreeFactory . createCommaExpression ; var createConditionalExpression:==:parseTreeFactory . createConditionalExpression ;
var specular = m . parameters . specular ; var ambient:==:m . parameters . ambient ;
var stringify = _ _ webpack_require _ _ ( 11 ) . stringify ; var hasOwnProperty:==:_ _ webpack_require _ _ ( 5 ) . hasOwnProperty ;
var len = str . length ; var n:==:fromIndex  |  |  0 ;
var message = _ ref5 . message ; var assert:==:_ ref5 . assert ;
var should = require ( ' should ' ) ; var crypto:==:require ( ' crypto ' ) ;
var isPositive = math . isPositive ; var bignumber:==:math . bignumber ;
var removeAttribute = element . prototype . removeAttribute ; var setAttribute:==:element . prototype . setAttribute ;
var EYE_OFFSET_INDEX = Billboard . EYE_OFFSET_INDEX ; var HORIZONTAL_ORIGIN_INDEX:==:Billboard . HORIZONTAL_ORIGIN_INDEX ;
var React = require ( ' React ' ) ; var tabBarios:==:require ( ' tabBarios ' ) ;
var start = token . loc . start . line ; var end:==:token . loc . end . line ;
var endDateLocale = this . _ findElement ( ' endDateLocale ' ) ; var endTimeLocale:==:this . _ findElement ( ' endTimeLocale ' ) ;
var isName = corePrimitives . isName ; var ascii85Stream:==:coreStream . ascii85Stream ;
var object = test_object ; var name:==:test_function_name + ' ' + test_object_name ;
var addLinkTargets = util . addLinkTargets ; var stripHtml:==:util . stripHtml ;
var ddfx = tmpx * 2 + dddfx , ddfy = tmpy * 2 + dddfy ; var dfx:==:cx1 * 0 . 3 + tmpx + dddfx * 0 . 16666667 , dfy    cy1 * 0 . 3 + tmpy + dddfy * 0 . 16666667 ;
var o = self . overlays [ i ] ; var s:==:o . computeMaxSize ( self . connector ) ;
var async = require ( ' async ' ) ; var path:==:require ( ' path ' ) ;
var document = window & & window . document ; var navigator:==:window & & window . navigator ;
var deepOrange400 = exports . deepOrange400 = ' # ff7043 ' ; var deepOrange500:==:exports . deepOrange500    ' # ff5722 ' ;
var mappings = util . getArg ( sourceMap , ' mappings ' ) ; var file:==:util . getArg ( sourceMap , ' file ' , null ) ;
var from = svg . toNumberArray ( p . from . value ) ; var to:==:svg . toNumberArray ( p . to . value ) ;
var names = element ( by . binding ( ' names ' ) ) ; var valid:==:element ( by . binding ( ' myForm . namesInput . $ valid ' ) ) ;
var tagName = activeElement . attr ( ' tagName ' ) . toLowerCase ( ) ; var type:==:activeElement . attr ( ' type ' ) . toLowerCase ( ) ;
var inputScanner = _ _ webpack_require _ _ ( 2 ) . inputScanner ; var token:==:_ _ webpack_require _ _ ( 5 ) . token ;
var floor = Math . floor ; var sqrt:==:Math . sqrt ;
var fillStyle = state . fillStyle ; var strokeStyle:==:state . strokeStyle ;
var fs = require ( ' fs ' ) ; var xml2js:==:require ( ' xml2js ' ) ;
var uiBindings = _ . result ( this , ' _ uiBindings ' ) ; var ui:==:_ . result ( this , ' ui ' ) ;
var memoryWriter = struct ( ' memoryWriter ' ) ; var module:==:struct ( ' module ' ) ;
var NOT_FOUND_ERR     = exceptionCode . not_found_err     = ( ( exceptionMessage [ 8 ] = ' not found ' ) , 8 ) ; var not_supported_err:==:exceptionCode . not_supported_err      ( ( exceptionMessage [ 9 ]   ' not supported ' ) , 9 ) ;
var screen = window . screen ; var orientation:==:screen . orientation  |  |  screen . mozOrientation  |  |  screen . msOrientation ;
var rename = require ( ' gulp - rename ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var nativeMethodsMixin = require ( ' nativeMethodsMixin ' ) ; var platform:==:require ( ' platform ' ) ;
var clientWidth = self . _ _ clientWidth ; var clientHeight:==:self . _ _ clientHeight ;
var scope = _ ref$scope = = = undefined ? defaultScope : _ ref$scope ; var redirect_uri:==:_ ref . redirect_uri ;
var left = offset . left + pos . offsetX ; var cloneClicks:==:togetherjs . config . get ( ' cloneClicks ' ) ;
var urgent = moment ( sbx . time ) . subtract ( prefs . urgentClock , ' minutes ' ) ; var warn:==:moment ( sbx . time ) . subtract ( prefs . warnClock , ' minutes ' ) ;
var left = leftChildIdx ( idx ) ; var right:==:rightChildIdx ( idx ) ;
var ui = imports . ui ; var debug:==:imports . debugger ;
var C = Constructor ; var proto:==:C . prototype ;
var b = this . b ; var n:==:b . length ;
var n = + conf . n ; var p:==:path . posix ;
var mass = cell . mass ; var t:==:Math . PI * Math . PI ;
var ttsStatusBox = document . getElementById ( ' ttsStatusBox ' ) ; var ttsStatus:==:document . getElementById ( ' ttsStatus ' ) ;
var stream = require ( ' stream ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var createBlock = parseTreeFactory . createBlock ; var createBoundCall:==:parseTreeFactory . createBoundCall ;
var conf = config  |  |  ; var pixelRatio:==:conf . pixelRatio  |  |  kinetic . pixelRatio  |  |  _ pixelRatio ;
var is = ( this . indices  |  |  $ R ( 0,tspans . length-1 ) . toArray ( ) ) ; var length:==:is . length ;
var option = this . options ; var leftTitlePadding:==:option . leftTitlePaddingRatio*nodeWidth ;
var Sensors = Windows . Devices . Sensors ; var simpleOrientation:==:windows . devices . sensors . simpleOrientation ;
var map = zrUtil . map ; var merge:==:zrUtil . merge ;
var magenta = game . add . sprite ( 0 , 0 , ' magenta ' ) ; var yellow:==:game . add . sprite ( 16 , 0 , ' yellow ' ) ;
var cloudinary = require ( ' cloudinary ' ) ; var max:==:req . query . max  |  |  10 ;
var Stream = coreStream . stream ; var chunkedStreamManager:==:coreChunkedStream . chunkedStreamManager ;
var verticies = strip . verticies ; var uvs:==:strip . uvs ;
var a = new objectNode ( a : new symbolNode ( ' a ' ) , b : new constantNode ( 2 ) ) ; var b:==:new objectNode ( a : new symbolNode ( ' a ' ) , b : new constantNode ( 2 ) ) ;
var spawn = require ( ' child_process ' ) . spawn ; var readlink:==:require ( ' graceful - readlink ' ) . readlinkSync ;
var Promise = require ( ' es6-promise ' ) . Promise ; var jsdom:==:require ( ' jsdom ' ) ;
var pathname = this . pathname  |  |  '' ; var hash:==:this . hash  |  |  '' ;
var context = this . _ context ; var vertexArray:==:defined ( computeCommand . vertexArray ) ? computeCommand . vertexArray : context . getViewportQuadVertexArray ( ) ;
var context = options . context ; var geometry:==:defaultValue ( options . geometry , defaultValue . empty_object ) ;
var maxTrySeriesLength = options . maxTrySeriesLength  |  |  3 ; var maxTrySeriesTime:==:options . maxTrySeriesTime  |  |  10000 ;
var parseISO8601 = fc . parseISO8601 ; var addDays:==:fc . addDays ;
var p   = this . _ props ; var style:==:this . el . style ;
var tab = e . tab ; var editor:==:e . editor ;
var factor = value . factor  |  0 ; var units:==:value . units  |  0 ;
var createCallExpression = parseTreeFactory . createCallExpression ; var createCascadeExpression:==:parseTreeFactory . createCascadeExpression ;
var o = new functionNode ( ' outputScope ' , [ x ] ) ; var n:==:new functionAssignmentNode ( ' f ' , [ ' x ' ] , o ) ;
var Contact = Contacts . Contact ; var contactEmail:==:contacts . contactEmail ;
var axis = axisSpecifier ( stream , a ) ; var nodeType:==:nodeTypeTest ( stream , a ) ;
var optionIndex = _ props . optionIndex ; var className:==:( 0 , _ classnames2 [ ' default ' ] ) ( this . props . className , option . className ) ;
var uglify = require ( ' gulp - uglify ' ) ; var shell:==:require ( ' gulp - shell ' ) ;
var nameMap = dayLabel . get ( ' nameMap ' ) ; var margin:==:dayLabel . get ( ' margin ' ) ;
var axis = this . dygraph _ . axisPropertiesForSeries ( setName ) ; var logscale:==:this . dygraph _ . attributes _ . getForSeries ( ' logscale ' , setName ) ;
var options = this . options ; var props:==:this . props ;
var script = document . createElement ( ' script ' ) ; var head:==:document . querySelector ( ' head ' ) ;
var currentStyle = _ state . currentStyle ; var currentVelocity:==:_ state . currentVelocity ;
var i d = $ ( this ) . closest ( ' . cly - select ' ) . attr ( ' i d ' ) ; var value:==:$ ( this ) . data ( ' value ' ) ;
var updatable = options . updatable ; var sideOrientation:==:this . updateSideOrientation ( options . sideOrientation , scene ) ;
var option = _ ref3 . option ; var options:==:_ ref3 . options ;
var message = _ ref6 . message ; var assert:==:_ ref6 . assert ;
var x = this . _ devicePixelRatio * ( tx - relatedPos . left ) ; var y:==:this . _ devicePixelRatio * ( relatedPos . top + relatedPos . height - ty ) ;
var modal = document . getElementById ( ' modal ' ) ; var underlay:==:document . getElementById ( ' underlay ' ) ;
var lightBlue400 = exports . lightBlue400 = ' # 29b6f6 ' ; var lightBlue500:==:exports . lightBlue500    ' # 03a9f4 ' ;
var sinon = require ( ' sinon ' ) ; var url:==:require ( ' url ' ) ;
var points = this . points ; var l:==:points . length ;
var method = command . method ; var args:==:command . args ;
var bodyA = c . bodyA ; var bodyB:==:c . bodyB ;
var htmlElement = scope . wrappers . htmlElement ; var mixin:==:scope . mixin ;
var nconf = require ( ' nconf ' ) ; var url:==:require ( ' url ' ) ;
var direction = ray . direction ; var normal:==:plane . normal ;
var parser = require ( ' socket . io - parser ' ) ; var debug:==:require ( ' debug ' ) ( ' socket . io : client ' ) ;
var res = this . res ; var sails:==:req . _ sails ;
var shininess = this . shininess . buildCode ( builder , ' fv1 ' ) ; var alpha:==:this . alpha ? this . alpha . buildCode ( builder , ' fv1 ' ) : undefined ;
var secret = this . req . secret ; var signed:==:opts . signed ;
var relTarget = $ ( ' # relTargetId ' ) [ 0 ] ; var goodTarget:==:$ ( ' # goodTargetId ' ) [ 0 ] ;
var abstractDataServiceAdapter = breeze . abstractDataServiceAdapter ; var autoGeneratedKeyType:==:breeze . autoGeneratedKeyType ;
var finder = imports . finder ; var util:==:imports . util ;
var warn = sharedUtil . warn ; var cmd:==:corePrimitives . cmd ;
var c = rejectThenableSoon ( ' rejected - c ' , 10 ) ; var d:==:fulfillThenableSoon ( ' d ' , 20 ) ;
var data = me . chart . data ; var isHorizontal:==:me . isHorizontal ( ) ;
var key = validator . trim ( req . query . key ) ; var name:==:validator . trim ( req . query . name ) ;
var rangeToSegments = t . rangeToSegments ; var cellToDate:==:t . cellToDate ;
var object = this . object . toTex ( options ) ; var index:==:this . index ? this . index . toTex ( options ) : '' ;
var panResponder = require ( ' panResponder ' ) ; var scrollView:==:require ( ' scrollView ' ) ;
var timeStamp = aEvent . timeStamp ; var expectedEvent:==:this . expectedEvent ;
var sequenceName = level . sequenceName ; var sequence:==:levelSequences [ sequenceName ] ;
var imageryProvider = this . _ imageryProvider ; var image:==:imagery . image ;
var inlines = nullthrows ( chunk ) . inlines . slice ( start , end ) ; var entities:==:nullthrows ( chunk ) . entities . slice ( start , end ) ;
var preview = config . preview ; var fastMode:==:config . fastMode ;
var url = require ( ' url ' ) ; var sinon:==:require ( ' sinon ' ) ;
var days = a . diff ( b,'days ' ) ; var hours:==:a . diff ( b,'hours ' ) - days * 24 ;
var rimraf = require ( ' rimraf ' ) ; var fs:==:require ( ' graceful - fs ' ) ;
var reactMount = require ( ' reactMount ' ) ; var reactUpdates:==:require ( ' reactUpdates ' ) ;
var height = this . height ; var bpc:==:this . bpc ;
var flow = security . flow ; var authorizationUrl:==:security . authorizationUrl ;
var tilingScheme = imageryProvider . tilingScheme ; var ellipsoid:==:tilingScheme . ellipsoid ;
var pointerId = defaultValue ( options . pointerId , 1 ) ; var pointerType:==:defaultValue ( options . pointerType , 0 ) ;
var southeastChild = tile . southeastChild ; var northwestChild:==:tile . northwestChild ;
var Child = Parse . Object . extend ( ' Child ' ) ; var Parent:==:Parse . Object . extend ( ' Parent ' ) ;
var plug = require ( ' gulp - load - plugins ' ) ( ) ; var env:==:plug . util . env ;
var va = sphereTrimesh_va ; var vb:==:sphereTrimesh_vb ;
var end = match . end ; var isSelected:==:( isSelectedPage & & i      selectedMatchIdx ) ;
var stringify = _ _ webpack_require _ _ ( 11 ) . stringify ; var isSafeProperty:==:_ _ webpack_require _ _ ( 17 ) . isSafeProperty ;
var center = polarModel . get ( ' center ' ) ; var radius:==:polarModel . get ( ' radius ' ) ;
var POSITION_INDEX = Polyline . POSITION_INDEX = 0 ; var SHOW_INDEX:==:Polyline . SHOW_INDEX    1 ;
var sideOrientation = options . sideOrientation  |  |  babylon . mesh . defaultside ; var radius:==:options . radius  |  |  1 ;
var operatorNode = math . expression . node . operatorNode ; var symbolNode:==:math . expression . node . symbolNode ;
var httpSignatureError = utils . httpSignatureError ; var invalidAlgorithmError:==:utils . invalidAlgorithmError ;
var domException = api . domException ; var isCharacterDataNode:==:dom . isCharacterDataNode ;
var context = this . context _ ; var contextFillState:==:this . contextFillState _ ;
var isFunction = _ _ dependency1 _ _ . isFunction ; var isNonThenable:==:_ _ dependency1 _ _ . isNonThenable ;
var m = SIMD . Uint32x4 . fromInt32x4Bits ( simd . int32x4 ( 0x3f800000 , 0x40000000 , 0x40400000 , 0x40800000 ) ) ; var n:==:simd . int32x4 . fromUint32x4Bits ( m ) ;
var notification = require ( ' notification ' ) ; var router:==:require ( ' router ' ) ;
var s = this . _ detachViewInContainerScope ( ) ; var parentView:==:view_ref_1 . internalView ( viewContainerLocation . parentView ) ;
var path = require ( ' path ' ) ; var debug:==:require ( ' debug ' ) ( ' parser ' ) ;
var canvas = options . canvas ; var contextOptions:==:options . contextOptions ;
var compression = data . getAttribute ( ' compression ' ) ; var encoding:==:data . getAttribute ( ' encoding ' ) ;
var badgeUpdateManager = windows . ui . notifications . badgeUpdateManager ; var badgeNotification:==:windows . ui . notifications . badgeNotification ;
var dirtyPath = this . _ _ dirtyPath ; var paths:==:this . shape . paths ;
var optionToContent = model . get ( ' optionToContent ' ) ; var contentToOption:==:model . get ( ' contentToOption ' ) ;
var unsupportedMediaTypeError = errors . unsupportedMediaTypeError ; var shallowCopy:==:utils . shallowCopy ;
var list = this . _ list ; var groupKey:==:list . getItemFromKey ( key ) . groupKey ;
var isArray = array . isArray ; var isNumber:==:number . isNumber ;
var TEMPLATE_LITERAL_EXPRESSION = ' TEMPLATE_LITERAL_EXPRESSION ' ; var TEMPLATE_LITERAL_PORTION:==:' TEMPLATE_LITERAL_PORTION ' ;
var ux = window . app . ns ( ' ux ' ) ; var ut:==:window . app . ns ( ' ut ' ) ;
var firstRetainerIndex = this . _ firstRetainerIndex ; var containmentEdges:==:this . containmentEdges ;
var r = input . split ( ' \r ' ) ; var n:==:input . split ( ' \n ' ) ;
var days    = abs ( this . _ days ) ; var months:==:abs ( this . _ months ) ;
var Debug = debug . Debug ; var liveEdit:==:debug . liveEdit ;
var rejected = adapter . rejected ; var dummy:==:dummy : ' dummy ' ;
var params = ob . params ; var events:==:( params . qstring & & params . qstring . events ) ;
var shiftKey = defaultValue ( options . shiftKey , false ) ; var metaKey:==:defaultValue ( options . metaKey , false ) ;
var pink50 = exports . pink50 = ' # fce4ec ' ; var pink100:==:exports . pink100    ' # f8bbd0 ' ;
var shadow = sharedUtil . shadow ; var warn:==:sharedUtil . warn ;
var input = document . createElement ( ' input ' ) ; var button:==:document . createElement ( ' button ' ) ;
var sLeft = itemData . sLeft - window . pagexOffset ; var sTop:==:itemData . sTop - window . pageyOffset ;
var widths = options . widths  |  |  ; var skins:==:options . skins  |  |  ;
var e = new pointerEvent ( ' lostpointercapture ' , bubbles : true ) ; var t:==:this . captureInfo . target ;
var voicemail = group . voicemail ; var status:==:group . status  |  |  '' ;
var PLACEMENT = Diagram . PLACEMENT ; var LINETYPE:==:Diagram . LINETYPE ;
var iccId = navigator . mozIccManager . iccIds [ cardIndex ] ; var icc:==:navigator . mozIccManager . getIccById ( iccId ) ;
var parser = require ( ' tap - parser ' ) ; var through:==:require ( ' through2 ' ) ;
var POSTFIX_EXPRESSION = ' POSTFIX_EXPRESSION ' ; var PREDEFINED_TYPE:==:' PREDEFINED_TYPE ' ;
var min_size_x = this . resize_min_size_x ; var max_size_y:==:this . resize_max_size_y ;
var height = defaultValue ( screenSpaceRectangle . height , 1 . 0 ) ; var context:==:this . _ context ;
var height = shape . height ; var radius:==:shape . radius ;
var user = db . collection ( ' user ' ) ; var blogpost:==:db . collection ( ' blogpost ' ) ;
var os = require ( ' os ' ) ; var nconf:==:require ( ' nconf ' ) ;
var composite = preEvaluatedFont . composite ; var descriptor:==:preEvaluatedFont . descriptor ;
var negative = ( config . negative = = = true ) ? true : false ; var decimalPlaces:==:( typeof config . decimalPlaces     ' undefined ' ) ? -1 : config . decimalPlaces ;
var usage = getOption ( options , ' usage ' , ' string ' , [ ' sort ' , ' search ' ] , ' sort ' ) ; var sensitivity:==:getOption ( options , ' sensitivity ' , ' string ' , [ ' base ' , ' accent ' , ' case ' , ' variant ' ] , undefined ) ;
var system = require ( ' system ' ) ; var page:==:require ( ' webpage ' ) . create ( ) ;
var radiusFunction = options . radiusFunction ; var cap:==:options . cap  |  |  babylon . mesh . no_cap ;
var settings = options . settings ; var appName:==:options . appName  |  |  testUtils . randomAppName ( ) ;
var from = codeMirror . indexFromPos ( change . from ) ; var to:==:codeMirror . indexFromPos ( change . to ) ;
var ensureLoggedIn = imports [ ' c9 . login ' ] . ensureLoggedIn ( ) ; var handler:==:imports [ ' preview . handler ' ] ;
var postCategory = hexo . model ( ' postCategory ' ) ; var asset:==:hexo . model ( ' asset ' ) ;
var is = require ( ' is ' ) ; var matter:==:require ( ' gray - matter ' ) ;
var totalWeight = node . totalWeight * samplingRate ; var selfWeight:==:node . selfWeight * samplingRate ;
var eventName = details . auxData [ ' eventName ' ] ; var targetName:==:details . auxData [ ' targetName ' ] ;
var menus = imports . menus ; var analytics:==:imports [ ' c9 . analytics ' ] ;
var original = method . original ; var fields:==:method . fields ;
var storePurchaseStatus = windows . services . store . storePurchaseStatus ; var storeConsumableStatus:==:windows . services . store . storeConsumableStatus ;
var date = post . published ? post . date . format ( ' YYYY - MM - DD ' ) : ' Draft ' ; var tags:==:post . tags . map ( mapName ) ;
var Platform = require ( ' Platform ' ) ; var actionSheetios:==:require ( ' actionSheetios ' ) ;
var bufferView = runtime . gltf . bufferViews [ source . bufferView ] ; var buffer:==:gltf2 . gltfUtils . getBufferFromBufferView ( runtime , bufferView , 0 , bufferView . byteLength , gltf2 . eComponentType . unsigned_byte ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var sinon:==:require ( ' sinon ' ) ;
var movementX = event . movementX  |  |  event . mozMovementx  |  |  event . webkitMovementx  |  |  0 ; var movementy:==:event . movementy  |  |  event . mozMovementy  |  |  event . webkitMovementy  |  |  0 ;
var parseSignedCookie = connect . utils . parseSignedCookie ; var memoryStore:==:connect . middleware . session . memoryStore ;
var notify = require ( ' gulp - notify ' ) ; var typescript:==:require ( ' gulp - typescript ' ) ;
var show = dataViewObjects . getValue ( objects , mekkoChart . properties [ ' columnBorder ' ] [ ' show ' ] , mekkoChart . defaultSettings . columnBorder . show ) ; var color:==:dataViewObjects . getFillColor ( objects , mekkoChart . properties [ ' columnBorder ' ] [ ' color ' ] , mekkoChart . defaultSettings . columnBorder . color ) ;
var os    = require ( ' os ' ) ; var p:==:require ( ' path ' ) ;
var query = connection . query ( ' SELECT * FROM stream LIMIT 2 ' ) ; var stream:==:query . stream ( ) ;
var mkdirp = require ( ' mkdirp ' ) ; var tmp:==:require ( ' tmp ' ) ;
var workspace = imports [ ' collab . workspace ' ] ; var bubble:==:imports [ ' notification . bubble ' ] ;
var Finally = traceur . syntax . trees . Finally ; var forInStatement:==:traceur . syntax . trees . forInStatement ;
var http = require ( ' http ' ) ; var events:==:require ( ' events ' ) ;
var ace = this . ace ; var row:==:ace . getCursorPosition ( ) . row ;
var activeApp = this . _ activeApp ; var detail:==:evt . detail ;
var key = mapResults [ i ] . key ; var val:==:mapResults [ i ] . val ;
var tileInfo = this . _ tileInfo ; var key:==:this . key ;
var chalk = require ( ' chalk ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var componentType = nextInstruction . componentType ; var childRouter:==:this . _ parentRouter . childRouter ( componentType ) ;
var Prism = require ( ' Prism ' ) ; var React:==:require ( ' React ' ) ;
var calendar = view . calendar ; var el:==:seg . el ;
var app = require ( ' app ' ) ; var core:==:require ( ' core ' ) ;
var subDeformer = subDeformers [ key ] ; var indices:==:subDeformer . indices ;
var mouse = createVector ( mousex , mousey ) ; var flee:==:this . flee ( mouse ) ;
var groupId = groupIds [ i ] ; var group:==:this . groups [ groupId ] ;
var entity = this . entity ; var shape:==:data . shape ;
var models = this . models ; var index:==:models . indexOf ( gltf ) ;
var min = Math . min ( width , height ) ; var x:==:obj . x     null ? 0 . 5 : obj . x ;
var messageId = request . arguments . messageId ; var objectId:==:request . arguments . objectId ;
var begin = opt . controls . find ( ' INPUT . begin - input ' ) . val ( ) ; var end:==:opt . controls . find ( ' INPUT . end - input ' ) . val ( ) ;
var billboards = this . _ billboards ; var length:==:billboards . length ;
var deviceInfo = deviceInfos [ i ] ; var option:==:document . createElement ( ' option ' ) ;
var async = require ( ' async ' ) ; var accessToken:==:twilio . accessToken ;
var isUndefined = angular . isUndefined ; var isDefined:==:angular . isDefined ;
var onsuccess = opts . onsuccess ; var onerror:==:opts . onerror ;
var k = keys [ i ] ; var e:==:terrainCache [ k ] ;
var cancel = options . cancel ; var showDontAsk:==:options . showDontAsk ;
var reactNativeComponentTree = require ( ' reactNativeComponentTree ' ) ; var reactNativeEventEmitter:==:require ( ' reactNativeEventEmitter ' ) ;
var backdrop = new Animation ( backdropEle ) ; var wrapper:==:new animation ( ele . querySelector ( ' . modal - wrapper ' ) ) ;
var util = require ( ' gulp - util ' ) ; var through2:==:require ( ' through2 ' ) ;
var oldGeoKey = oldGeoKeys [ i ] ; var oldGeo:==:oldFullLayout [ oldGeoKey ] . _ subplot ;
var letters = $ scope . letters = [ ] ; var contacts:==:$ scope . contacts    [ ] ;
var lastStat = entry . lastStat ; var stat:==:files . statOrNull ( absPath ) ;
var jshint = require ( ' gulp - jshint ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var row = widget . row ; var colspan:==:widget . colspan ;
var applicationViewWindowingMode = viewManagement . applicationViewWindowingMode ; var applicationView:==:viewManagement . applicationView ;
var url = req . url ; var settings:==:this . settings ( url ) ;
var selected = this . selected ( ) ; var index:==:options . indexOf ( selected ) ;
var httpRequest = req . httpRequest ; var api:==:req . service . api ;
var paddingTop = parseInt ( style . paddingTop , 10 )  |  |  0 ; var paddingBottom:==:parseInt ( style . paddingBottom , 10 )  |  |  0 ;
var p = b2Math . mulx ( xf , this . m_p ) ; var l:==:( - ( b2Math . dot ( normal , p ) - offset ) ) ;
var uid = data . uid  |  |  0 ; var paginate:==:data . hasOwnProperty ( ' paginate ' ) ? data . paginate : true ;
var npc = ( user & & user . backer & & user . backer . npc ) ? user . backer . npc : '' ; var level:==:( user & & user . contributor & & user . contributor . level ) ? user . contributor . level : '' ;
var gzip = require ( ' gulp - gzip ' ) ; var header:==:require ( ' gulp - header ' ) ;
var scrollX = this . _ scrollX  |  0 ; var scrollY:==:this . _ scrollY  |  0 ;
var month = this . $ headerTitle . attr ( ' data - month ' ) ; var year:==:this . $ headerTitle . attr ( ' data - year ' ) ;
var lineJoin = state . lineJoin ; var lineWidth:==:state . lineWidth ;
var lightBlue800 = exports . lightBlue800 = ' # 0277bd ' ; var lightBlue900:==:exports . lightBlue900    ' # 01579b ' ;
var tags = options . get ( ' tags ' ) ; var createTag:==:options . get ( ' createTag ' ) ;
var unsafeUnwrap = scope . unsafeUnwrap ; var wrappers:==:scope . wrappers ;
var south = Math . max ( rectangle . south , otherRectangle . south ) ; var east:==:math . min ( rectangle . east , otherRectangle . east ) ;
var O_SYNC = constants . O_SYNC  |  |  0 ; var O_TRUNC:==:constants . O_TRUNC  |  |  0 ;
var express = require ( ' express ' ) ; var crypto:==:require ( ' crypto ' ) ;
var Scrollbar = require ( ' Scrollbar . react ' ) ; var fixedDataTableBufferedRows:==:require ( ' fixedDataTableBufferedRows . react ' ) ;
var reactInstanceMap = require ( ' reactInstanceMap ' ) ; var reactPortal:==:require ( ' reactPortal ' ) ;
var selenium = require ( ' selenium - standalone ' ) ; var ngrok:==:require ( ' ngrok ' ) ;
var urlMapper = options . urlMapper  |  |  _ . identity ; var pathMapper:==:options . pathMapper  |  |  _ . identity ;
var gl = this . renderer . gl ; var width:==:this . textureBuffer . width ;
var trans = core . db . transaction ( this . _ store ) ; var store:==:trans . objectStore ( this . _ store ) ;
var upgrade = scope . upgrade ; var upgradeWithDefinition:==:scope . upgradeWithDefinition ;
var NAME_SPACE_IMPORT = ' NAME_SPACE_IMPORT ' ; var NAMED_EXPORT:==:' NAMED_EXPORT ' ;
var tag = options [ ' tag ' ] ! = null ? options [ ' tag ' ] : 0 ; var actionTag:==:options [ ' actionTag ' ] !   null ? options [ ' actionTag ' ] : 0 ;
var selection = this . _ selectionFromEventPoint ( event ) ; var node:==:selection & & selection . layer & & selection . layer . nodeForSelfOrAncestor ( ) ;
var select = core . select . findSelect ( selectLocator ) ; var option:==:core . select . option . getOptionLocator _ ( optionLocator ) ;
var to = moment . utc ( daterange . to ) ; var from:==:moment . utc ( daterange . from ) ;
var isNan = math . isNan ; var bignumber:==:math . bignumber ;
var index = options . index  |  |  100 ; var buttoncssClass:==:options . buttoncssClass ;
var height = itemLayout . height ; var p:==:points [ 0 ] ;
var l = Object . keys ( msg . payload ) . length ; var pay:==:msg . payload ;
var value = formatValue ( revenue  |  |  props . value ) ; var nonInteraction:==:! ! ( props . nonInteraction  |  |  opts . nonInteraction ) ;
var castError = error . castError ; var validatorError:==:error . validatorError ;
var zmax = options . zmax  |  |  1 . 0 ; var subdivisions:==:options . subdivisions  |  |  w : 1 , h : 1 ;
var skip = requestDef . skip  |  |  0 ; var limit:==:( ' limit ' in requestDef ? requestDef . limit : rows . length ) + skip ;
var addon = spec . addon ; var radiogroup:==:spec . radiogroup ;
var del = require ( ' del ' ) ; var shell:==:require ( ' gulp - shell ' ) ;
var entity = geometryUpdater . _ entity ; var cylinder:==:entity . cylinder ;
var far = shadowFrustum . far ; var position:==:shadowMapCamera . positionwc ;
var items = groupNode . items ; var isOpen:==:groupNode . isOpen ;
var sideOrientation = ( options . sideOrientation = = = 0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ; var cap:==:options . cap  |  |  babylon . mesh . no_cap ;
var banner = grunt . template . process ( options . banner ) ; var footer:==:grunt . template . process ( options . footer ) ;
var moment = require ( ' moment ' ) ; var async:==:require ( ' async ' ) ;
var handlerFactory = handlerFactory  |  |  undefined ; var handlerFactory2:==:handlerFactory2  |  |  undefined ;
var scope = ( options & & options . scope )  |  |  el ; var min:==:( options & & options . min )  |  |  300 ;
var body = this . body  |  |  ; var query:==:this . query  |  |  ;
var c9 = imports . c9 ; var debug:==:imports [ ' debugger ' ] ;
var Button = require ( ' elemental ' ) . Button ; var formField:==:require ( ' elemental ' ) . formField ;
var group = _ ref10 . group ; var _ refreshed:==:_ ref10 . _ refreshed ;
var zlib = require ( ' zlib ' ) ; var util:==:require ( ' util ' ) ;
var warn = debug ( ' core : propertyTypes : warn ' ) ; var propertyTypes:==:module . exports . propertyTypes    ;
var zlib = require ( ' zlib ' ) ; var readline:==:require ( ' readline ' ) ;
var edgeIndices = this . body . edgeIndices ; var edges:==:this . body . edges ;
var width = canvasEl . style . width ; var height:==:canvasEl . style . height ;
var graph = graphSeries . getGraph ( ) ; var data:==:graph . data ;
var shadow = board . find ( ' . board - item - shadow ' ) ; var target:==:e . target ;
var registerElement = re . registerElement ; var warn:==:utils . debug ( ' core : a - scene : warn ' ) ;
var face = faces [ i ] ; var normal:==:face . normal ;
var webpack = require ( ' webpack ' ) ; var moment:==:require ( ' moment ' ) ;
var response = evt . response ; var request:==:evt . request ;
var done = self . _ done ( resolve , self ) ; var detach:==:self . _ simpleBind ( self . detach , self ) ;
var from = msginfo . getAttribute ( ' from ' )  |  |  '' ; var to:==:msginfo . getAttribute ( ' to ' )  |  |  '' ;
var variable = variables [ i ] ; var def:==:variable . defs [ 0 ] ;
var c = ' c ' ; var d:==:rejectBuiltInSoon ( ' rejected - d ' , 20 ) ;
var strong = document . getElementById ( ' strong ' ) ; var table:==:div . getElementsByTagName ( ' table ' ) [ 0 ] ;
var inherits = require ( ' inherits ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var sortMarginTop = conf . logoTips . sortMarginTop  |  |  40 ; var sortDisappearTime:==:conf . logoTips . sortDisappearTime  |  |  1500 ;
var suffix = options . suffix  |  |  '' ; var separator:==:options . hasOwnProperty ( ' separator ' ) ? options . separator : ' , ' ;
var metadata = _ ref . metadata ; var signingKeys:==:_ ref . signingKeys ;
var assert   = require ( ' chai ' ) . assert ; var sinon:==:require ( ' sinon ' ) ;
var dataViewObjects = powerbi . dataViewObjects ; var appendClearCatcher:==:powerbi . visuals . appendClearCatcher ;
var pickIds = this . _ pickIds ; var length:==:pickIds . length ;
var vel2 = resolveSingleBilateral_vel2 ; var vel:==:resolveSingleBilateral_vel ;
var oldTernaryKey = oldTernaryKeys [ i ] ; var oldTernary:==:oldFullLayout [ oldTernaryKey ] . _ subplot ;
var visualDataRoleKind = powerbi . visualDataRoleKind ; var legendData:==:powerbi . visuals . legendData ;
var b = bwcService . getBitcore ( ) ; var x:==:b . hdPublicKey ( xPubKey ) ;
var rot = cesiumMath . zeroToTwoPi ( alphaDeltaw . rotation ) ; var quat:==:quaternion . fromAxisAngle ( cartesian3 . unit_z , rot , quatScratch ) ;
var accept = req . headers . accept  |  |  '' ; var json:==:~accept . indexOf ( ' json ' ) ;
var headerLinks = require ( ' headerLinks ' ) ; var metadata:==:require ( ' metadata ' ) ;
var catchBlock = this . transformAny ( tree . catchBlock ) ; var finallyBlock:==:this . transformAny ( tree . finallyBlock ) ;
var x = this . x , y = this . y , z = this . z , w = this . w ; var e:==:m . elements ;
var acos = math . acos ; var cos:==:math . cos ;
var widget = this . widget ; var options:==:widget . options ;
var surface = this . _ surface ; var pass:==:frameState . passes ;
var fixedDataTableRowBuffer = require ( ' fixedDataTableRowBuffer ' ) ; var fixedDataTableRow:==:require ( ' fixedDataTableRow . react ' ) ;
var MEMBER_EXPRESSION = ' MEMBER_EXPRESSION ' ; var MEMBER_LOOKUP_EXPRESSION:==:' MEMBER_LOOKUP_EXPRESSION ' ;
var distance = originalLight . distance ; var uniforms:==:material . uniforms ;
var systemString = ksConfigurations [ ksIdx ] . ks . systemString ; var configs:==:ksConfigurations [ ksIdx ] . configs ;
var option , instancePrefix , optionIndex = this . props ; var className:==:classNames ( this . props . className , option . className ) ;
var integration = require ( ' analytics . js - integration ' ) ; var snake:==:require ( ' to - snake - case ' ) ;
var next = this . shared . next ; var scale_upto:==:this . shared . scale_upto ;
var center = bmapModel . get ( ' center ' ) ; var zoom:==:bmapModel . get ( ' zoom ' ) ;
var nconf = require ( ' nconf ' ) ; var os:==:require ( ' os ' ) ;
var View = require ( ' View ' ) ; var propTypes:==:react . propTypes ;
var text = ' cesium - credit - text ' ; var image:==:' cesium - credit - image ' ;
var orig_feature = cascade . stage_classifier [ j ] . orig_feature ; var feature:==:cascade . stage_classifier [ j ] . feature    new Array ( cascade . stage_classifier [ j ] . count ) ;
var pointStyle = vm . pointStyle ; var radius:==:vm . radius ;
var peers = util . Module ( ' peers ' ) ; var assert:==:util . assert ;
var dataView = window . dataView ; var btoa:==:window . btoa ;
var start = this . clippedPos ( row , startColumn ) ; var end:==:this . clippedPos ( row , endColumn ) ;
var sqrt = Math . sqrt ; var pow:==:Math . pow ;
var group = this . group ; var layoutInfo:==:seriesModel . layoutInfo ;
var browserify = require ( ' browserify ' ) ; var babelify:==:require ( ' babelify ' ) ;
var uvs = this . _ uvs ; var vertices:==:this . _ vertices ;
var from = this . url . getParam ( ' from ' ) ; var until:==:this . url . getParam ( ' until ' ) ;
var filter = this . _ filter ; var list:==:this . _ list ;
var keyEscapeUtils = require ( ' keyEscapeUtils ' ) ; var traverseAllChildren:==:require ( ' traverseAllChildren ' ) ;
var paper = this . _ paper ; var f:==:font  |  |  ;
var dynCall_viiiiiii = Module [ ' dynCall_viiiiiii ' ] = asm [ ' dynCall_viiiiiii ' ] ; var dynCall_viiiiiid:==:Module [ ' dynCall_viiiiiid ' ]    asm [ ' dynCall_viiiiiid ' ] ;
var octaves = opts . octaves  |  |  9 ; var maxBG:==:opts . maxBG  |  |  400 ;
var URL = document . getElementById ( ' url ' ) . value ; var a:==:new mozActivity ( name : ' view ' , data : type : ' url ' , url : url ) ;
var brotliInput = _ _ webpack_require _ _ ( 275 ) . brotliInput ; var brotliOutput:==:_ _ webpack_require _ _ ( 275 ) . brotliOutput ;
var annotation = annotations [ i ] ; var row:==:annotation . row ;
var e = document . getElementById ( ' cronExpression ' ) ; var value:==:e . selectedItem ? e . selectedItem . value : e . value ;
var element = editingContext . element ; var config:==:editingContext . config ;
var request = require ( ' request ' ) ; var express:==:require ( ' express ' ) ;
var spy = this . sinon . spy ( modeManager , ' start ' ) ; var input:==:document . getElementById ( ' views - list - search - input ' ) ;
var EMPTY_STATEMENT = ' EMPTY_STATEMENT ' ; var EXPORT_DECLARATION:==:' EXPORT_DECLARATION ' ;
var bignumber = math . bignumber ; var fraction:==:math . fraction ;
var document = this . X . document ; var div:==:document . createElement ( ' div ' ) ;
var index = this . indexFromCharCode ( charCode ) ; var keys:==:this . json . keys ;
var unit = math . unit ; var sinh:==:math . sinh ;
var prop = this . properties [ i ] ; var key:==:prop . key ;
var path = d3 . geo . path ( ) . projection ( globe . projection ) . pointRadius ( 7 ) ; var coastline:==:d3 . select ( ' . coastline ' ) ;
var form = doc . createElement ( ' form ' ) ; var input:==:doc . createElement ( ' input ' ) ;
var notification = _ ref . notification ; var destination:==:_ ref . destination ;
var source = require ( ' vinyl - source - stream ' ) ; var buffer:==:require ( ' vinyl - buffer ' ) ;
var center = touch . center ; var offset:==:session . offsetDelta  |  |  ;
var Data = ctx . model ( ' Data ' ) ; var path:==:file . params . path ;
var path = require ( ' path ' ) ; var grunt:==:require ( ' grunt ' ) ;
var meshInstance = model . meshInstances [ i ] ; var mesh:==:meshInstance . mesh ;
var ws = require ( ' ws ' ) ; var when:==:require ( ' when ' ) ;
var source = $ ( ' clone_position_source ' ) ; var target:==:$ ( ' clone_position_target ' ) ;
var cos = Math . cos ( -alpha ) ; var sin:==:Math . sin ( -alpha ) ;
var attribute = attributes . get ( geometryAttribute ) ; var buffer:==:attribute . buffer ;
var sb = this . sb ; var graph:==:sb . graph ;
var changeCreator = this . _ changeCreator ; var type:==:type . toLowerCase ( ) ;
var canvas = this . canvas ; var aspectRatio:==:options . aspectRatio ;
var reactMultiChild = require ( ' reactMultiChild ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var snap = snaps [ i ] ; var offsetLeft:==:snap . offsetLeft ;
var chat = util . Module ( ' chat ' ) ; var assert:==:util . assert ;
var Scope = scopeAnalyzer . scope ; var variable:==:scopeAnalyzer . variable ;
var component = params . component ; var theme:==:params . theme ;
var start = _ item . data . start ; var end:==:_ item . data . end !    undefined ? _ item . data . end : start ;
var models = _ _ alloyId10 . models ; var len:==:models . length ;
var translate = client . translate ; var report_plugins:==:Nightscout . report_plugins ;
var o = Object . preventExtensions ( ) ; var v:==:o . v    50 ;
var bold = getStyleProperty ( item , styleContextStack , ' bold ' , false ) ; var italics:==:getStyleProperty ( item , styleContextStack , ' italics ' , false ) ;
var title = ' topup - incorrectcode - title2 ' ; var message:==:' topup - incorrectcode - message3 ' ;
var body = dom . getDocument ( ) . body ; var active:==:dom . getDocument ( ) . activeElement  |  |  body ;
var mkdirp = require ( ' mkdirp ' ) ; var md5:==:require ( ' md5-hex ' ) ;
var radius = options . radius  |  |  2 ; var tube:==:options . tube  |  |  0 . 5 ;
var extractCurrencySymbols = closurei18nExtractor . extractCurrencySymbols ; var extractDateTimeSymbols:==:closurei18nExtractor . extractDateTimeSymbols ;
var util = require ( ' util ' ) ; var rand:==:require ( ' random ' ) ;
var wrapNodeList = scope . wrapNodeList ; var wrappers:==:scope . wrappers ;
var retainingEdges = this . _ retainingEdges ; var firstRetainerIndex:==:this . _ firstRetainerIndex ;
var logManager = goog . debug . logManager ; var logRecord:==:goog . debug . logRecord ;
var Parser = traceur . syntax . Parser ; var moduleAnalyzer:==:traceur . semantics . moduleAnalyzer ;
var path = require ( ' path ' ) ; var s:==:require ( ' underscore . string ' ) ;
var list = this . list ; var source:==:this . source ;
var drift = options . drift ; var slop:==:-options . slop ;
var proto = protoProp : ' pass ' , propToRemove : ' foo ' ; var o:==:_ _ proto _ _ : proto ;
var zmax = options . zmax ; var subdivisions:==:options . subdivisions  |  |  w : 1 , h : 1 ;
var query = this . normalize ( this . state . query ) ; var caseSensitive:==:this . state . caseSensitive ;
var tmp = require ( ' tmp ' ) ; var async:==:require ( ' async ' ) ;
var isOpened = _ props4 . isOpened ; var style:==:_ props4 . style ;
var shelljs   = require ( ' shelljs ' ) ; var path:==:require ( ' path ' ) ;
var selectedCategories = userGesture ? : this . _ selectedCategoriesSetting . get ( ) ; var childNodes:==:this . _ categoriesElement . childNodes ;
var createArgumentList = parseTreeFactory . createArgumentList ; var createBindingIdentifier:==:parseTreeFactory . createBindingIdentifier ;
var getNode = reactdomComponentTree . getNodeFromInstance ; var listenTo:==:reactBrowserEventEmitter . listenTo ;
var target = e . htmlEvent . target ; var gutter:==:plugin . diffview . gutterEl ;
var   TYPEDO = 13 ; var   STORED:==:14 ;
var stream = opts . stream ; var expose:==:opts . expose ;
var lat = element . attr ( ' data - lat ' ) ; var lng:==:element . attr ( ' data - lng ' ) ;
var pieceList = this . _ pieceList ; var selected:==:( isInit ? thisOption : newOption ) . selected  |  |  ;
var Dict = definitions . Dict ; var Stack:==:definitions . Stack ;
var domHelper = visuals . slicerUtil . domHelper ; var slicerHeader:==:powerbi . visuals . controls . slicerHeader ;
var assert = require ( ' assert ' ) ; var path:==:require ( ' path ' ) ;
var hasSelection = this . interactivityService & & this . interactivityService . hasSelection ( ) ; var shapeGraphicsContext:==:this . shapeGraphicsContext ;
var set = classUtil . set ; var get:==:classUtil . get ;
var FORMAT = ci . FORMAT ; var KATAKANA:==:ci . KATAKANA ;
var sourcemaps = require ( ' gulp - sourcemaps ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var SET_ACCESSOR = ' SET_ACCESSOR ' ; var SPREAD_EXPRESSION:==:' SPREAD_EXPRESSION ' ;
var expect = chai . expect ; var vm:==:require ( ' vm ' ) ;
var fs = imports . fs ; var proc:==:imports . proc ;
var colorG = options [ ' colorG ' ] ; var colorB:==:options [ ' colorB ' ] ;
var http = require ( ' http ' ) ; var merge:==:require ( ' utils - merge ' ) ;
var realloc = Module . _ realloc ; var writeStringToMemory:==:module . writeStringToMemory ;
var $ $ rAF = injector . get ( ' $ $ rAF ' ) ; var $ window:==:injector . get ( ' $ window ' ) ;
var tessellation = options . tessellation  |  |  24 ; var subdivisions:==:options . subdivisions  |  |  1 ;
var index = geometry . index ; var position:==:geometry . attributes . position ;
var axisModel = this . axisModel ; var name:==:retrieve ( opt . axisName , axisModel . get ( ' name ' ) ) ;
var tip = API . _ ( el . getAttribute ( ' data - tooltip ' )  |  |  '' ) ; var img:==:document . createElement ( ' img ' ) ;
var Lax = db . model ( ' nestedLax ' , lax , ' nestdoc ' + random ( ) ) ; var strict:==:db . model ( ' nestedStrict ' , strict , ' nestdoc ' + random ( ) ) ;
var rowClassNameGetter = props . rowClassNameGetter  |  |  emptyFunction ; var rowPositionGetter:==:props . rowPositionGetter ;
var fs = require ( ' fs ' ) ; var tmp:==:require ( ' tmp ' ) ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , data1 , opts ) ;
var reactNativeContainerInfo = require ( ' reactNativeContainerInfo ' ) ; var reactNativeTagHandles:==:require ( ' reactNativeTagHandles ' ) ;
var exclude = options & & options . exclude  |  |  ; var include:==:options & & options . include ;
var minute = this . minute ; var hour:==:this . hour ;
var Stream = Struct ( ' Stream ' ) ; var strSlice:==:struct ( ' strSlice ' ) ;
var ext = imports . ext ; var ui:==:imports . ui ;
var semaphore = event . data . semaphore ; var timeout:==:event . data . timeout  |  |  15000 ;
var enterActiveClass = data . enterActiveClass ; var appearClass:==:data . appearClass ;
var Easing = require ( ' Easing ' ) ; var nativeMethodsMixin:==:require ( ' nativeMethodsMixin ' ) ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var createAssignmentStatement:==:parseTreeFactory . createAssignmentStatement ;
var blogPost = db . model ( ' refBlogPost ' , posts , ' gh-2176 - 1 ' ) ; var user:==:db . model ( ' refUser ' , users , ' gh-2176 - 2 ' ) ;
var values = m . _ values ; var index:==:m . _ index ;
var dirname = require ( ' path ' ) . dirname ; var treeAsPane:==:options . treeAsPane ;
var events = require ( ' events ' ) ; var chai:==:require ( ' chai - nightwatch ' ) ;
var uglify = require ( ' uglify - js ' ) ; var mkdirp:==:require ( ' mkdirp ' ) . sync ;
var dynCall_viiiiiiiii = Module [ ' dynCall_viiiiiiiii ' ] = asm [ ' dynCall_viiiiiiiii ' ] ; var dynCall_viiiiiiiiii:==:Module [ ' dynCall_viiiiiiiiii ' ]    asm [ ' dynCall_viiiiiiiiii ' ] ;
var newDataLabelUtils = powerbi . visuals . newDataLabelUtils ; var labelStyle:==:powerbi . visuals . labelStyle ;
var nano = require ( ' gulp - cssnano ' ) ; var postcss:==:require ( ' postcss ' ) ;
var commandProcessError = errors . commandProcessError ; var gitError:==:errors . gitError ;
var storageApplicationPermissions = windows . storage . accessCache . storageApplicationPermissions ; var recentStorageItemVisibility:==:windows . storage . accessCache . recentStorageItemVisibility ;
var o = options  |  |  ; var prefix:==:typeof o . prefix     ' undefined ' & & ' assert '  |  |  o . prefix ;
var time_start = this . options . time_start . split ( ' : ' ) ; var time_end:==:this . options . time_end . split ( ' : ' ) ;
var Prism = require ( ' Prism ' ) ; var Header:==:require ( ' Header ' ) ;
var cm   = this . cm ; var settings:==:this . settings ;
var cellCount = _ props . cellCount ; var cellSizeAndPositionGetter:==:_ props . cellSizeAndPositionGetter ;
var timestamp = eventArgs . timestamp ; var advertisementType:==:eventArgs . advertisementType ;
var filter = require ( ' gulp - filter ' ) ; var through2:==:require ( ' through2 ' ) ;
var index = timerEvents [ name ] . index ; var label:==:timerEvents [ name ] . label ;
var compress = options . compress  |  |  false ; var obfuscate:==:options . obfuscate  |  |  false ;
var width = sprite . width ; var height:==:sprite . height ;
var importBindings = $ _ _ 9 . importBindings [ index ] ; var externalExportBindings:==:$ _ _ 9 . externalExportBindings [ index ] ;
var del = require ( ' del ' ) ; var watch:==:require ( ' gulp - watch ' ) ;
var x = this [ ' x ' ] ; var y:==:this [ ' y ' ] ;
var request = require ( ' request ' ) ; var gm:==:require ( ' gm ' ) ;
var slice = [ ] . slice ; var proto:==:Function . prototype ;
var fs = require ( ' fs ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var createDataViewScopeIdentity = powerbi . data . createDataViewScopeIdentity ; var dataViewConcatenateCategoricalColumns:==:powerbi . data . dataViewConcatenateCategoricalColumns ;
var s = ( table . config . parsers [ c ] . type = = ' text ' ) ? ( ( order = = 0 ) ? makeSortFunction ( ' text ' , ' asc ' , c ) : makeSortFunction ( ' text ' , ' desc ' , c ) ) : ( ( order = = 0 ) ? makeSortFunction ( ' numeric ' , ' asc ' , c ) : makeSortFunction ( ' numeric ' , ' desc ' , c ) ) ; var e:==:' e ' + i ;
var through2 = require ( ' through2 ' ) ; var lazypipe:==:require ( ' lazypipe ' ) ;
var se = w2utils . settings ; var re:==:new regExp ( ' ^'+ ( se . currencyPrefix ? ' \\ ' + se . currencyPrefix + ' ? ' : '' ) + ' [ -+ ] ? [ 0 - 9 ] * [ \\'+ w2utils . settings . decimalSymbol + ' ] ? [ 0 - 9 ] + ' + ( se . currencySuffix ? ' \\ ' + se . currencySuffix + ' ? ' : '' ) + ' $ ' , ' i ' ) ;
var operand = this . transformAny ( tree . operand ) ; var expressions:==:this . transformList ( tree . expressions ) ;
var Output = _ _ webpack_require _ _ ( 3 ) . Output ; var lineBreak:==:acorn . lineBreak ;
var component = tile . components [ c ] ; var codingStyleParameters:==:component . codingStyleParameters ;
var maxForce = ( typeof ( options . maxForce ) = = = ' undefined ' ? number . max_value : options . maxForce ) ; var localOffsetb:==:options . localOffsetb  |  |  vec2 . fromValues ( 0,0 ) ;
var menus = imports . menus ; var ui:==:imports . ui ;
var u = ( ( Math . abs ( uv . x * uvScale . x + uvOffset . x ) * heightMapWidth ) % heightMapWidth )  |  0 ; var v:==:( ( math . abs ( uv . y * uvScale . y + uvOffset . y ) * heightMapHeight ) % heightMapHeight )  |  0 ;
var tid = data . tid ; var content:==:data . content . toString ( ) ;
var triangles = this . triangles ; var materialIndex:==:this . materialIndex ;
var links = ik . links ; var iteration:==:ik . iteration !    undefined ? ik . iteration : 1 ;
var popup = that . popup ; var options:==:that . options ;
var target = this . target ; var position:==:this . position ;
var y = box . y + margin ; var w:==:box . width - 2 * margin ;
var db = dataconfig . db ; var fs:==:require ( ' fs ' ) ;
var stagger = elementData . stagger ; var timings:==:elementData . timings ;
var typeAhead = tree . typeAhead _ ; var e:==:new object ( ) ;
var source   = require ( ' vinyl - source - stream ' ) ; var buffer:==:require ( ' vinyl - buffer ' ) ;
var now = _ _ dependency2 _ _ . now ; var all:==:_ _ dependency3 _ _ . all ;
var emissive = this . emissive ? this . emissive . buildCode ( builder , ' c ' , slot : ' emissive ' ) : undefined ; var environment:==:this . environment ? this . environment . buildCode ( builder , ' c ' , slot : ' environment ' ) : undefined ;
var extrudedHeight = rectangleGeometry . _ extrudedHeight ; var rotation:==:rectangleGeometry . _ rotation ;
var knownUserProperties = system . knownUserProperties ; var userPictureSize:==:system . userPictureSize ;
var interaction = that . interactions [ interactionIndex ] ; var request:==:interaction . requests [ requestIndex ] ;
var React = require ( ' React ' ) ; var scrollView:==:require ( ' scrollView ' ) ;
var options = context . options ; var lang:==:options . langInfo ;
var record = method . record ; var original:==:method . original ;
var e = Expression . add ( Expression . constant ( 1 ) , Expression . constant ( 2 ) ) ; var l:==:Expression . lambda ( e ) ;
var modelMatrix = this . modelMatrix ; var length:==:positions . length ;
var f = new foo ( ) ; var a:==:new Array ( ) ;
var domain = require ( ' domain ' ) ; var url:==:require ( ' url ' ) ;
var sideOrientation = ( options . sideOrientation = = = 0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ; var faceuv:==:options . faceuv  |  |  new array ( 6 ) ;
var precision = context . components [ c ] . precision ; var reversible:==:codingStyleParameters . reversibleTransformation ;
var orelse = s . orelse . length > 0 ? this . newBlock ( ' while orelse ' ) : null ; var body:==:this . newBlock ( ' while body ' ) ;
var bindCheckbox = util . bindCheckbox ; var bindDropdown:==:util . bindDropdown ;
var startSymbol = $ interpolate . startSymbol ( ) ; var endSymbol:==:$ interpolate . endSymbol ( ) ;
var arrowHead = math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' arrowHead ' , this . arrowHead ) ) ) ) ; var rounded:==:mxUtils . getValue ( this . style , ' rounded ' , ' 0 ' ) ;
var resy = args [ ' resy ' ] ; var distortion:==:args [ ' distortion ' ] ;
var r = Math . floor ( this . red*255 ) ; var g:==:Math . floor ( this . green*255 ) ;
var type = head . type ; var tag:==:head . tag ;
var url = ref . url ; var headers:==:ref . headers ;
var Plugin = imports . Plugin ; var format:==:imports . format ;
var pixelRatio = frameState . pixelRatio ; var viewState:==:frameState . viewState ;
var initialHeight = setSize ( settings . get ( ' initialHeight ' ) , ' y ' ) ; var maxWidth:==:settings . get ( ' maxWidth ' ) ;
var inline = Bools [ inlineIndex % bools . length ] ; var strict:==:bools [ strictIndex % bools . length ] ;
var tabs = this . tabs ; var type:==:shape . type ;
var argv = minimist ( process . argv . slice ( 2 ) ) ; var skip:==:argv . skip  |  |  0 ;
var movement = aggregator . _ movement ; var lastMovement:==:aggregator . _ lastMovement ;
var reactdomTextarea = require ( ' reactdomTextarea ' ) ; var reactInstrumentation:==:require ( ' reactInstrumentation ' ) ;
var FOR_INIT_KEYS = exports . FOR_INIT_KEYS = [ ' left ' , ' init ' ] ; var COMMENT_KEYS:==:exports . COMMENT_KEYS    [ ' leadingComments ' , ' trailingComments ' , ' innerComments ' ] ;
var n = new rangeNode ( start , end , step ) ; var e:==:new constantNode ( 5 ) ;
var docsSidebar = require ( ' docsSidebar ' ) ; var ejectBanner:==:require ( ' ejectBanner ' ) ;
var bubbles = typeof options . bubbles ! = ' undefined ' ? options . bubbles : true ; var cancelable:==:typeof options . cancelable !   ' undefined ' ? options . cancelable : ( event !   ' touchcancel ' ) ;
var li = e . target . closest ( ' li ' ) ; var uuid:==:li . dataset . uuid ;
var l2_decay = this . l2_decay * l2_decay_mul ; var l1_decay:==:this . l1_decay * l1_decay_mul ;
var cluster = require ( ' cluster ' ) ; var http:==:require ( ' http ' ) ;
var deepOrange200 = exports . deepOrange200 = ' # ffab91 ' ; var deepOrange300:==:exports . deepOrange300    ' # ff8a65 ' ;
var memberExpression = this . transformAny ( tree . operand . memberExpression ) ; var operand:==:this . transformAny ( tree . operand . operand ) ;
var join = path . join ; var readdirSync:==:require ( ' fs ' ) . readdirSync ;
var ny = vNode . getElementsByTagName ( ' ny ' ) [ 0 ] . textContent ; var nz:==:vNode . getElementsByTagName ( ' nz ' ) [ 0 ] . textContent ;
var https = require ( ' https ' ) ; var assert:==:require ( ' assert ' ) ;
var scale = this . body . view . scale * ( 1 + this . options . keyboard . speed . zoom ) ; var translation:==:this . body . view . translation ;
var metadata = result . metadata ; var ctx:==:result . ctx ;
var domProperty = require ( ' domProperty ' ) ; var reactdomComponentFlags:==:require ( ' reactdomComponentFlags ' ) ;
var sleep = ( this . sleepTimeThreshold ! = = infinity ) ; var bodies:==:this . bodies ;
var noErrorsPlugin = webpack . noErrorsPlugin ; var optimize:==:webpack . optimize ;
var builder = instance . get ( ' builder ' ) ; var publishedSource:==:builder . publishedSource ;
var mongoose = start . mongoose ; var assert:==:require ( ' power - assert ' ) ;
var protractor = require ( ' gulp - protractor ' ) . protractor ; var del:==:require ( ' del ' ) ;
var debuggerModel = target . debuggerModel ; var workspace:==:debuggerWorkspaceBinding . _ workspace ;
var ip = record . get ( ' ip ' ) ; var port:==:record . get ( ' port ' ) ;
var OPS = sharedUtil . ops ; var util:==:sharedUtil . util ;
var $ element = this . $ element ; var $ pureview:==:this . $ pureview ;
var height = this . app . graphicsDevice . height ; var width:==:this . app . graphicsDevice . width ;
var width = canvas . width ; var height:==:canvas . height - 2 * this . _ verticalPadding ;
var nodes = this . nodes ; var nodeFieldCount:==:this . _ nodeFieldCount ;
var preview = doc . getElementById ( ' previewframe ' ) ; var content:==:doc . getElementById ( ' contentframe ' ) ;
var layout = page . layout ; var path:==:page . path ;
var alpha = cascade . stage_classifier [ j ] . alpha ; var feature:==:cascade . stage_classifier [ j ] . feature ;
var vertex = baseName . vertexElement  |  |  baseName . vertex  |  |  baseName ; var fragment:==:baseName . fragmentElement  |  |  baseName . fragment  |  |  baseName ;
var indigo900 = exports . indigo900 = ' # 1a237e ' ; var indigoA100:==:exports . indigoA100    ' # 8c9eff ' ;
var index = $ ( el ) . attr ( ' data - index ' ) ; var type:==:$ ( el ) . attr ( ' data - type ' ) ;
var validateIndex = localUtils . validateIndex ; var massageIndexDef:==:localUtils . massageIndexDef ;
var width = parseFloat ( computedStyle . getPropertyValue ( ' width ' ) , 10 ) ; var height:==:parseFloat ( computedStyle . getPropertyValue ( ' height ' ) , 10 ) ;
var abbrev = require ( ' abbrev ' ) ; var mout:==:require ( ' mout ' ) ;
var util = imports . util ; var undoManager:==:imports . undoManager ;
var group = formatData . group ; var neg:==:formatData . neg ;
var Package = Protocol . Package ; var Message:==:Protocol . Message ;
var scope = scopeChain [ i ] ; var object:==:scope . object ( ) ;
var axes = axesLayout . axes ; var plotArea:==:axesLayout . plotArea ;
var doc = wrap ( document ) ; var div:==:doc . createElement ( ' div ' ) ;
var child_process = require ( ' child_process ' ) ; var exec:==:child_process . exec ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var breakState:==:traceur . codegeneration . generator . breakState ;
var applyEntityToContentState = require ( ' applyEntityToContentState ' ) ; var getCharacterRemovalRange:==:require ( ' getCharacterRemovalRange ' ) ;
var passport = imports . passport ; var connect:==:imports . connect ;
var custom_proxy_proc = $ ( ' # custom_proxy_proc ' ) . val ( ) ; var custom_proxy_addr:==:$ ( ' # custom_proxy_addr ' ) . val ( ) ;
var cos = Math . cos ( radian ) ; var sin:==:Math . sin ( radian ) ;
var removeEventListener = eventTool . removeEventListener ; var normalizeEvent:==:eventTool . normalizeEvent ;
var f = Q . fulfill ( 5 ) ; var r:==:Q . reject ( new Error ( ' aaargh ' ) ) ;
var grey50 = exports . grey50 = ' # fafafa ' ; var grey100:==:exports . grey100    ' # f5f5f5 ' ;
var resourceSize = number . bytesToString ( this . _ request . resourceSize ) ; var transferSize:==:number . bytesToString ( this . _ request . transferSize ) ;
var i d = options . i d ; var scale:==:options . scale ;
var value = element ( by . binding ( ' example . value  |  date : ' yyyy - Www ' ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var framework = require ( ' framework ' ) ; var tabs:==:require ( ' tabs ' ) ;
var Parent = db . model ( ' Parent ' , parentSchema , ' parents ' ) ; var child:==:db . model ( ' child ' , parentSchema , ' children ' ) ;
var offset = session . offsetDelta  |  |  ; var prevDelta:==:session . prevDelta  |  |  ;
var parentNode = unwrap ( parentNodeWrapper ) ; var child:==:unwrap ( childWrapper ) ;
var a = accessors [ accessorId ] ; var extensions:==:a . extensions ;
var div = document . createElement ( ' div ' ) ; var template:==:templateFn ( f , field )  |  |  templateFn ( f , decorator [ ' default ' ] ) ;
var n = doc . nums . pop ( ) ; var s:==:doc . strs . pop ( ) ;
var heading = e . coords . heading ; var accuracy:==:e . coords . accuracy ;
var key = this . keyFromPublic ( pub ) ; var h:==:this . hashInt ( sig . rencoded ( ) , key . pubBytes ( ) , message ) ;
var localSpherePos = spheretrimesh_localspherepos ; var tmp:==:spheretrimesh_tmp ;
var title = that . model . get ( ' title ' ) ; var episode:==:$ ( e . currentTarget ) . attr ( ' data - episode ' ) ;
var data = options . data ; var eventGroup:==:options . eventGroup ;
var stat = fs . lstatSync ( rPath ) ; var isFile:==:stat . isFile ( )  |  |  stat . isSymbolicLink ( ) ;
var preHash = records . preHash  |  |  ' x ' ; var prepreHash:==:records . prepreHash  |  |  ' x ' ;
var req = ctx & & ctx . req ; var accessToken:==:req & & req . accessToken ;
var state = start_state ; var buffer:==:lexbuf [ lex_buffer ] ;
var path = spt . pathTo ( 6 ) ; var hasPath:==:spt . hasPathTo ( 6 ) ;
var firstEdgeIndexes = snapshot . _ firstEdgeIndexes ; var nodeFieldCount:==:snapshot . _ nodeFieldCount ;
var firebaseAdapter = firepad . firebaseAdapter ; var editorClient:==:firepad . editorClient ;
var IS = traceur . syntax . predefinedName . is ; var isnt:==:traceur . syntax . predefinedName . isnt ;
var one = this . find ( ' . togetherjs - typing - ellipse - one ' ) ; var two:==:this . find ( ' . togetherjs - typing - ellipse - two ' ) ;
var len = alarms . length ; var now:==:Date . now ( ) ;
var shapePositiona = bodiesoverlap_shapepositiona ; var shapePositionb:==:bodiesoverlap_shapepositionb ;
var loading_text = options . loading_text  |  |  '' ; var update_breadcrumbs:==:options . update_breadcrumbs  |  |  typeof options . update_breadcrumbs      ' undefined ' ;
var maximum = args . form . maximum  |  |  false ; var exclusiveMaximum:==:args . form . exclusiveMaximum  |  |  false ;
var lvalue = this . transformAny ( tree . lvalue ) ; var typeAnnotation:==:this . transformAny ( tree . typeAnnotation ) ;
var move = obj . move  |  |  false ; var noSleep:==:obj . noSleep  |  |  false ;
var y = point . y ; var data:==:this . _ data ;
var express = require ( ' express ' ) ; var multer:==:require ( ' multer ' ) ;
var assert = require ( ' power - assert ' ) ; var async:==:require ( ' async ' ) ;
var paramName = options . paramName  |  |  ' nk ' ; var http:==:[ ] . concat ( sharedToClass . http  |  |  [ ] ) [ 0 ] ;
var ctrlKey = typeof options . ctrlKey ! = ' undefined ' ? options . ctrlKey : false ; var altKey:==:typeof options . altKey !   ' undefined ' ? options . altKey : false ;
var concat   = require ( ' gulp - concat ' ) ; var csslint:==:require ( ' gulp - csslint ' ) ;
var context = options . context ; var gl:==:context . _ gl ;
var top = ~dir . indexOf ( ' top ' )   & & ' top ' ; var bottom:==:~dir . indexOf ( ' bottom ' ) & & ' bottom ' ;
var item = openList . index [ workingAddress ] . item ; var small:==:item . querySelector ( ' small ' ) ;
var name = this . getAttribute ( ' data - setting - name ' ) ; var value:==:input . value ;
var ground = groundLayer . create ( 0 , 360 , ' ground ' ) ; var river:==:riverLayer . create ( 0 , 400 , ' river ' ) ;
var joinClasses = require ( ' joinClasses ' ) ; var translatedomPositionxy:==:require ( ' translatedomPositionxy ' ) ;
var hour = parseInt ( cal . find ( ' . hourselect ' ) . val ( ) , 10 ) ; var minute:==:parseInt ( cal . find ( ' . minuteselect ' ) . val ( ) , 10 ) ;
var afterLeave = ref . afterLeave ; var leaveCancelled:==:ref . leaveCancelled ;
var transaction = this . _ db . transaction ( [ ' places ' ] , ' readwrite ' ) ; var objectStore:==:transaction . objectStore ( ' places ' ) ;
var Test = mocha . Test ; var Hook:==:mocha . Hook ;
var t = this . view . translate ; var s:==:this . view . scale ;
var vertices = geometry2 . vertices ; var faces:==:geometry2 . faces ;
var velocity = -event . velocity ; var delta:==:-event . delta ;
var n = vertices . length ; var face:==:geometry . faces [ i ] ;
var container = new Hilo . Container ( i d : ' container ' ) ; var view:==:new Hilo . View ( i d : ' view ' ) ;
var layout = post . layout ; var path:==:post . path ;
var warn = sharedUtil . warn ; var ref:==:corePrimitives . ref ;
var aspectRatio = options . aspectRatio ; var container:==:this . container ;
var reactNativedomidOperations = require ( ' reactNativedomidOperations ' ) ; var reactNativeReconcileTransaction:==:require ( ' reactNativeReconcileTransaction ' ) ;
var theme = this . context . theme ; var searchText:==:this . props . searchText ;
var ed = editors [ i d ] ; var doc:==:ed . session . doc ;
var clip = clips [ i ] ; var e:==:clip . step ( time , delta ) ;
var nodeFieldCount = this . _ nodeFieldCount ; var firstEdgeIndexes:==:this . _ firstEdgeIndexes ;
var preview   = this . preview ; var classPrefix:==:this . classPrefix ;
var warningContext = settings . warningContext ; var pos:==:settings . position ;
var semiMinorAxis = options . semiMinorAxis ; var semiMajorAxis:==:options . semiMajorAxis ;
var canvas = chart . canvas ; var aspectRatio:==:( options . maintainAspectRatio & & chart . aspectRatio )  |  |  null ;
var month = getOption ( options , ' month ' , ' string ' , [ ' 2-digit ' , ' numeric ' , ' narrow ' , ' short ' , ' long ' ] , undefined ) ; var day:==:getOption ( options , ' day ' , ' string ' , [ ' 2-digit ' , ' numeric ' ] , undefined ) ;
var n = this . geodeticSurfaceNormal ( p , cartesianToCartographicn ) ; var h:==:cartesian3 . subtract ( cartesian , p , cartesianToCartographich ) ;
var lat = coerce ( ' lat ' )  |  |  [ ] ; var len:==:Math . min ( lon . length , lat . length ) ;
var deepPurple600 = exports . deepPurple600 = ' # 5e35b1 ' ; var deepPurple700:==:exports . deepPurple700    ' # 512da8 ' ;
var h = this . height - xs ; var maxValue:==:this . maxValue ;
var amber500 = exports . amber500 = ' # ffc107 ' ; var amber600:==:exports . amber600    ' # ffb300 ' ;
var values = dataView . categorical . values [ 0 ] . values ; var objects:==:dataView . categorical . categories [ 0 ] . objects ;
var showBackdropAnimation = animation . showBackdropAnimation ; var hideBackdropAnimation:==:animation . hideBackdropAnimation ;
var modals = this . _ modals ( ) ; var options:==:this . options ;
var sideOrientation = options . sideOrientation  |  |  babylon . mesh . defaultside ; var instance:==:options . instance ;
var ext = self . ext ; var realpath:==:this . realpath    _ . isAbsolute ( self . fullname ) & & _ . exists ( self . fullname ) ? _ ( self . fullname ) : _ . realpathSafe ( self . fullname ) ;
var lazypipe = require ( ' lazypipe ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var column = this . s . columns [ cell . colIdx ] ; var read:==:column . read . call ( column , cell . node ) ;
var codeMirror = options . codeMirror ; var template:==:options . template ;
var opts = opts  |  |  ; var progressFn:==:opts . progressFn  |  |  function ( ) ;
var os = require ( ' os ' ) ; var tmpdir:==:( os . tmpdir  |  |  os . tmpDir ) ( ) ;
var jshint = require ( ' gulp - jshint ' ) ; var notifier:==:require ( ' node - notifier ' ) ;
var viewport = options . viewport ; var margin:==:options . margin ;
var syntheticMouseEvent = require ( ' syntheticMouseEvent ' ) ; var syntheticDragEvent:==:require ( ' syntheticDragEvent ' ) ;
var numberFormat = kendo . getCulture ( this . options . culture ) . numberFormat ; var rules:==:this . _ rules ;
var clockRange = this . clockRange ; var startTime:==:this . startTime ;
var col = db . collection ( ' remove_one_with_generators ' ) ; var r:==:yield col . insertMany ( [ a : 1 , a : 1 ] ) ;
var description = item . description  |  |  item . summary  |  |  item . content  |  |  ' ' ; var pubdate:==:item . pubdate  |  |  item . published  |  |  item . updated ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var stringDecoder:==:require ( ' string_decoder ' ) . stringDecoder ;
var scope = picker . $ scope ; var options:==:picker . $ options ;
var a = foo : bar : 123 ; var b:==:foo : baz : 456 , bar : qux : 789 ;
var dy = Math . min ( h - 10 , Math . max ( 10 , h * Math . max ( 0 , Math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' dy ' , this . dy ) ) ) ) ) ) ; var fillColor:==:mxUtils . getValue ( this . style , ' fillColor ' , ' # ffffff ' ) ;
var assert    = require ( ' assert ' ) ; var connectionConfig:==:common . connectionConfig ;
var $ rootScope = this . $ injector . get ( ' $ rootScope ' ) ; var $ rootElement:==:this . $ injector . get ( ' $ rootElement ' ) ;
var unflattenr = util . unflattenr ; var unflattenl:==:util . unflattenl ;
var s = hsva [ 1 ] ; var v:==:hsva [ 2 ] ;
var transform = context . transform ; var opacity:==:context . opacity ;
var fnName = json . fnName ; var args:==:json . args ;
var sblimit = SBQUANT [ index ] . sblimit ; var offsets:==:SBQUANT [ index ] . offsets ;
var Name = corePrimitives . name ; var isCmd:==:corePrimitives . isCmd ;
var words = wordArray . words ; var sigBytes:==:wordArray . sigBytes ;
var dynCall_viiiiiiiiiiiiiii = Module [ ' dynCall_viiiiiiiiiiiiiii ' ] = asm [ ' dynCall_viiiiiiiiiiiiiii ' ] ; var dynCall_viiiiid:==:Module [ ' dynCall_viiiiid ' ]    asm [ ' dynCall_viiiiid ' ] ;
var acceptLink = this . boxElement . querySelector ( ' . ' + cfg . acceptLinkClass ) ; var denyLink:==:this . boxElement . querySelector ( ' . ' + cfg . denyLinkClass ) ;
var util = imports . util ; var Previewer:==:imports . Previewer ;
var name = mangleName ( this . curClass , s . names [ i ] ) . v ; var cur:==:this . cur . symFlags [ name ] ;
var definition = descriptor . definition ; var models:==:descriptor . models ;
var textures = hitDetection ? this . hitDetectionTextures _ : this . textures _ ; var groupIndices:==:hitDetection ? this . hitDetectionGroupIndices _ : this . groupIndices _ ;
var flyOverLongitude = options . flyOverLongitude ; var flyOverLongitudeWeight:==:options . flyOverLongitudeWeight ;
var classes = classesMethod ? classesMethod . call ( this , seg ) : [ ] ; var css:==:cssToStr ( cssMethod ? cssMethod . call ( this , seg ) : ) ;
var models = _ _ alloyId34 . models ; var len:==:models . length ;
var flat = flatten ( array ) ; var len:==:flat . length ;
var React = require ( ' React ' ) ; var recordingModule:==:require ( ' nativeModules ' ) . datePickerDialogRecordingModule ;
var slotDataList = armatureData . slotDataList ; var i:==:boneDataList . length ;
var teal100 = exports . teal100 = ' # b2dfdb ' ; var teal200:==:exports . teal200    ' # 80cbc4 ' ;
var boundingSphere = primitive . getGeometryInstanceAttributes ( ' cylinder ' ) . boundingSphere ; var center:==:boundingSphere . center ;
var symbolNode = math . expression . node . symbolNode ; var rangeNode:==:math . expression . node . rangeNode ;
var position = options . position  |  |  BABYLON . Vector3 . Zero ( ) ; var normal:==:options . normal  |  |  BABYLON . Vector3 . Up ( ) ;
var minimum = axisAlignedBoundingBox . minimum ; var maximum:==:axisAlignedBoundingBox . maximum ;
var pattern = obj . pattern  |  |  attrGetter ( ' ngfPattern ' , scope , $ event : evt ) ; var len:==:items . length ;
var file = ref . file ; var extension:==:ref . extension ;
var BAR = docSet . getByLongname ( ' bar ' ) [ 0 ] ; var baz:==:docSet . getByLongname ( ' baz ' ) [ 0 ] ;
var menus = imports . menus ; var favorites:==:imports [ ' tree . favorites ' ] ;
var url = require ( ' url ' ) ; var assert:==:require ( ' assert ' ) ;
var lock = $ ( ' # grid_'+ obj . name + ' _ lock ' ) ; var status:==:$ ( ' # grid_'+ obj . name + ' _ status ' ) ;
var node = this . _ node ; var display:==:node . _ displayManager . getDisplayRenderNode ( ) ;
var oCol = oSettings . aoColumns [ iCol ] ; var oClasses:==:oSettings . oClasses ;
var quasiLiteralExpression = traceur . syntax . trees . quasiLiteralExpression ; var quasiLiteralPortion:==:traceur . syntax . trees . quasiLiteralPortion ;
var min = min_max [ 0 ] ; var max:==:min_max [ 1 ] ;
var hash = $ liHeadsa . get ( key ) . hash . slice ( 1 ) ; var i d:==:$ ( value ) . attr ( ' i d ' )  |  |  foundation . getYoDigits ( 6 , ' accordion ' ) ;
var scheduler = state . scheduler ; var windowCreationInterval:==:state . windowCreationInterval ;
var http = imports . http ; var api:==:imports . api ;
var parse = acorn . parse ; var parse_dammit:==:acornLoose . parse_dammit ;
var analytics = imports [ ' c9 . analytics ' ] ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var Buffer = require ( ' buffer ' ) . Buffer ; var util:==:require ( ' core - util - is ' ) ;
var Channel = goog . labs . net . webChannel . channel ; var webChannelRequest:==:goog . labs . net . webChannel . webChannelRequest ;
var element = this . element ; var graph:==:this . graph ;
var muiTheme = props . muiTheme ; var style:==:props . style ;
var Identify = Facade . Identify ; var bind:==:require ( ' bind ' ) ;
var y = shape . cy ; var a:==:shape . width ;
var base = this . base ; var numComps:==:base . numComps ;
var anchor = document . getElementById ( ' anchor1 ' ) ; var popup:==:document . getElementById ( ' popup1 ' ) ;
var message = _ ref2 . message ; var assert:==:_ ref2 . assert ;
var root = new goog . structs . treeNode ( ' root ' , null ) ; var child1:==:new goog . structs . treeNode ( ' child1 ' , null ) ;
var url = require ( ' url ' ) ; var assert:==:require ( ' assert - plus ' ) ;
var entity = this . _ entity ; var isAvailable:==:entity . isAvailable ( time ) ;
var pre = exprInfo [ expr ] . pre ; var post:==:exprInfo [ expr ] . post ;
var b = [ this . filters [ bandIndex ] . b0 , this . filters [ bandIndex ] . b1 , this . filters [ bandIndex ] . b2 ] ; var a:==:[ this . filters [ bandIndex ] . a0 , this . filters [ bandIndex ] . a1 , this . filters [ bandIndex ] . a2 ] ;
var gulp = require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ; var path:==:require ( ' path ' ) ;
var closed = defaultValue ( options . closed , false ) ; var materialSupport:==:defaultValue ( options . materialSupport , materialAppearance . materialSupport . textured ) ;
var passkey = options . handle . passkey ; var len:==:passkey . toString ( ) . length ;
var weight = parameters . weight ! = = undefined ? parameters . weight : ' normal ' ; var style:==:parameters . style !    undefined ? parameters . style : ' normal ' ;
var paramNames = _ compilePattern2 . paramNames ; var tokens:==:_ compilePattern2 . tokens ;
var mongodb = require ( ' mongodb ' ) ; var readPref:==:mongodb . readPreference ;
var pkg = grunt . config . get ( ' pkg ' ) ; var version:==:grunt . option ( ' crafty - version ' ) ;
var email = $ ( ' # email ' ) ; var username:==:$ ( ' # username ' ) ;
var event = track . event ( ) ; var events:==:this . events ( event ) ;
var blacklist = options . blacklist ; var externalPlugins:==:options . externalPlugins  |  |  [ ] ;
var worldImpulse = body_applylocalimpulse_worldimpulse ; var worldPoint:==:body_applylocalimpulse_worldpoint ;
var toolbar = method . toolbar ; var tabs:==:method . tabs ;
var buffer = lastState . buffer ; var bufferIndex:==:lastState . bufferIndex ;
var current = this . current ; var rect:==:document . createElementns ( ns , ' svg : rect ' ) ;
var o = options  |  |  ; var e:==:document . createEvent ( ' event ' ) ;
var suggested = devicestatusEntry . openaps . suggested ; var enacted:==:devicestatusEntry . openaps . enacted ;
var tls = require ( ' tls ' ) ; var util:==:require ( ' util ' ) ;
var bind = utils . bind ; var shouldCaptureKeyEvent:==:utils . shouldCaptureKeyEvent ;
var reactInstanceMap = require ( ' reactInstanceMap ' ) ; var reactNativeFeatureFlags:==:require ( ' reactNativeFeatureFlags ' ) ;
var opts = _ _ alloyId24 . opts  |  |  ; var models:==:_ _ alloyId23 . models ;
var net = require ( ' net ' ) ; var eachline:==:require ( ' eachline ' ) ;
var username = $ ( this ) . attr ( ' username ' ) ; var company:==:$ ( this ) . attr ( ' company ' ) ;
var run = imports . run ; var fs:==:imports . fs ;
var x = 400 + this . xx [ i ] * perspective ; var y:==:300 + this . yy [ i ] * perspective ;
var head = obj . ranges [ 0 ] . head ; var anchor:==:obj . ranges [ 0 ] . anchor ;
var closeTop = polygon . closeTop ; var closeBottom:==:polygon . closeBottom ;
var bar = bar`wow\nab$ 42 $ _ . foobar ( ) ` ; var bar:==:bar`wow\naB$ 42 $ _ . baz ( ) ` ;
var getKey = localUtils . getKey ; var getUserFields:==:localUtils . getUserFields ;
var container = this . client . findElement ( ' # container ' ) ; var value:==:container . getAttribute ( ' data - value ' ) ;
var t = symbol . _ _ t ; var points:==:this . _ points ;
var v = cam . viewport . toGlobal ( this . engine . getRenderWidth ( ) , rh ) ; var tmpVec3:==:canvas2d_1 . _ tmpVec3 ;
var e = this . endContactEvent ; var l:==:endOverlaps . length ;
var text = changes . text ; var next:==:changes . next ;
var Plugin = imports . Plugin ; var connect:==:imports [ ' collab . connect ' ] ;
var ace = imports . ace ; var ui:==:imports . ui ;
var typescript = require ( ' gulp - typescript ' ) ; var assign:==:Object . assign  |  |  require ( ' object . assign ' ) ;
var collab1 = this . collab1 ; var collab2:==:this . collab2 ;
var target = this . targetPosition ; var poleTarget:==:this . poleTargetPosition ;
var seq = Parsers . seq ; var opt:==:Parsers . opt ;
var successCallback = jasmine . createSpy ( ' successCallback ' ) ; var errorCallback:==:jasmine . createSpy ( ' errorCallback ' ) ;
var duration = ( this . _ currentImage & & this . _ currentImage . duration )  |  |  this . options . duration ; var isVideo:==:isVideoSource ( this . _ currentImage ) ;
var hashingFunction = ( typeof hashingFunctionParam = = function ) ? hashingFunctionParam : hashObject ; var equalityFunction:==:( typeof equalityFunctionParam     function ) ? equalityFunctionParam : null ;
var parser = _ dereq _ ( ' engine . io - parser ' ) ; var parseuri:==:_ dereq _ ( ' parseuri ' ) ;
var localFrom = intersecttrimesh_localfrom ; var localTo:==:intersecttrimesh_localto ;
var skip = options . data . skip ; var take:==:options . data . take ;
var org = file . meta . org ; var repo:==:file . meta . repo ;
var last = _ . last ( data ) ; var first:==:_ . first ( data ) ;
var description = entity . description . getValue ( ) ; var div:==:document . createElement ( ' div ' ) ;
var reactdomComponentTree = require ( ' reactdomComponentTree ' ) ; var reactdomInjection:==:require ( ' reactdomInjection ' ) ;
var width = this . img . width ; var height:==:this . img . height ;
var defaults = require ( ' defaults ' ) ; var json:==:require ( ' json ' ) ;
var selection = selections [ i ] ; var line:==:codeMirror . getLine ( selection . head . line - 1 ) ;
var rowStyle = _ props3 . rowStyle ; var scrollbarWidth:==:this . state . scrollbarWidth ;
var TOTAL_MEMORY = Module [ ' TOTAL_MEMORY ' ]  |  |  16777216 ; var FAST_MEMORY:==:Module [ ' FAST_MEMORY ' ]  |  |  2097152 ;
var dataColorPalette = powerbi . visuals . dataColorPalette ; var colorHelper:==:powerbi . visuals . colorHelper ;
var bones = this . mesh . skeleton . bones ; var iks:==:this . mesh . geometry . iks ;
var getRowCnt = t . getRowCnt ; var getColCnt:==:t . getColCnt ;
var x = v . x , y = v . y , z = v . z ; var e:==:m . elements ;
var d = this . y . redMul ( p . y ) ; var e:==:this . curve . d . redMul ( c ) . redMul ( d ) ;
var dy4 = mxUtils . getValue ( this . style , ' dy4 ' , ' 0 ' ) ; var dx5:==:mxUtils . getValue ( this . style , ' dx5 ' , ' 0 ' ) ;
var hasOwnProperty = ref . hasOwnProperty ; var toString:==:ref . toString ;
var calendar = t . calendar ; var getEventEnd:==:calendar . getEventEnd ;
var operand = this . transformAny ( tree . left . operand ) ; var memberExpression:==:this . transformAny ( tree . left . memberExpression ) ;
var up = $ ( this ) . hasClass ( ' th - sort - up ' ) ; var down:==:$ ( this ) . hasClass ( ' th - sort - down ' ) ;
var Unit = math . type . Unit ; var min:==:math . min ;
var level = Number ( req . query . level ) ; var group:==:req . query . group  |  |  ' default ' ;
var audio = instance . _ audio ; var sourceMp3:==:instance . _ sourceMp3 ;
var childs = this . parent . childs ; var index:==:childs . indexOf ( this ) ;
var Node = mod . Node ; var Nil:==:mod . Nil ;
var min = bbox . minimumWorld ; var max:==:bbox . maximumWorld ;
var x = this . x * q1 . w + this . y * q1 . z - this . z * q1 . y + this . w * q1 . x ; var y:==:-this . x * q1 . z + this . y * q1 . w + this . z * q1 . x + this . w * q1 . y ;
var options = self . options ; var aspectRatio:==:options . aspectRatio ;
var MIDNUMLET = ci . MIDNUMLET ; var MIDLETTER:==:ci . MIDLETTER ;
var indexableKeysToKeyValues = docData . indexableKeysToKeyValues ; var changes:==:docData . changes ;
var should = require ( ' chai ' ) . should ( ) ; var mockery:==:require ( ' mockery ' ) ;
var events = this . events ( track . event ( ) ) ; var revenue:==:track . revenue ( )  |  |  0 ;
var settings = imports . settings ; var c9:==:imports . c9 ;
var autoPlay = ( opts . autoPlay=='false' |  | opts . autoPlay==false ) ? false : true ; var opp:==:( opts . opp   ' false' |  | opts . opp   false ) ? false : true ;
var Plugin = imports . Plugin ; var scm:==:imports . scm ;
var width = _ props . width ; var scrollbarWidth:==:this . state . scrollbarWidth ;
var parseqs = require ( ' parseqs ' ) ; var parser:==:require ( ' engine . io - parser ' ) ;
var x = _ ref . x ; var y:==:_ ref . y ;
var userAgent = navigator . userAgent . toLowerCase ( ) ; var oscpu:==:navigator . oscpu ;
var imageId = this . _ imageId ; var image:==:this . _ image ;
var vsindex = privateDict . vsindex ; var variationProcessor:==:this . _ font . _ variationProcessor ;
var fixedDataTableColumnResizeHandle = require ( ' fixedDataTableColumnResizeHandle . react ' ) ; var fixedDataTableRow:==:require ( ' fixedDataTableRow . react ' ) ;
var containerSize = _ ref2 . containerSize ; var offset:==:_ ref2 . offset ;
var visualDataViews = options . visualDataViews ; var dataRoles:==:options . dataRoles ;
var Globalization = Windows . Globalization ; var Geolocation:==:Windows . Devices . Geolocation ;
var onproceed = options . onproceed  |  |  undefined ; var dialogClass:==:options . dialogClass  |  |  ' ' ;
var boneName = skin . boneNames [ j ] ; var bone:==:nodes [ 0 ] . findByName ( boneName ) ;
var g = goog . functions . partialRight ( f , 2 ) ; var h:==:goog . functions . partialRight ( g , 4 ) ;
var ran = Math . random ( ) . toString ( 36 ) . slice ( 2 ) ; var label:==:document . createElement ( ' label ' ) ;
var settings = imports . settings ; var console:==:imports . console ;
var mediaElement = args . mediaElement ; var session:==:args . session ;
var net = require ( ' net ' ) ; var Stream:==:require ( ' stream ' ) . Stream ;
var onResize = options . onResize ; var minHeight:==:options . minHeight ;
var dynCall_v = Module [ ' dynCall_v ' ] = asm [ ' dynCall_v ' ] ; var dynCall_viiiiii:==:Module [ ' dynCall_viiiiii ' ]    asm [ ' dynCall_viiiiii ' ] ;
var village = $ ( ' div#village ' ) ; var population:==:$ ( ' div#population ' ) ;
var array = util . array ; var isArray:==:array . isArray ;
var Legend = powerbi . visuals . Legend ; var valueType:==:powerbi . valueType ;
var position = Cartesian3 . fromArray ( positions , i ) ; var normal:==:cartesian3 . fromArray ( normals , i ) ;
var pkg = this . pkg ; var context:==:this . context ;
var https = require ( ' https ' ) ; var util:==:require ( ' util ' ) ;
var defer = Q . defer ( ) ; var promise:==:defer . promise ;
var bold = fontObj . black ? ' 900 ' : ( fontObj . bold ? ' bold ' : ' normal ' ) ; var italic:==:fontObj . italic ? ' italic ' : ' normal ' ;
var bones = this . bones ; var geometry:==:this . geometry ;
var ui = imports . ui ; var layout:==:imports . layout ;
var orderBy = model . orderBy ; var entityNames:==:model . entityNames ;
var browser_version = zombie_array [ index ] [ ' browser_version ' ] ; var browser_icon:==:zombie_array [ index ] [ ' browser_icon ' ] ;
var l = this . $ docRowCache . length ; var i:==:this . $ getRowCacheIndex ( this . $ docRowCache , docRow ) + 1 ;
var geo = ( geometry instanceof THREE . bufferGeometry ) ? new three . geometry ( ) . fromBufferGeometry ( geometry ) : geometry ; var faces:==:geo . faces ;
var x : [ e , f ] , g = x : [ e : 4 , 5 ] , g : 6 ; var h:==:h : 7 , i    i : 8 ;
var p = this . pointOnPath ( location , absolute ) ; var m:==:_ jg . normal ( [ params . cx , params . cy ] , [ p . x , p . y ] ) ;
var x = _ this . _ viewer . mousex ; var y:==:_ this . _ viewer . mousey ;
var c = bucket . pop ( ) ; var b:==:bucket . pop ( ) ;
var x = Math . cos ( currentAngle ) * arc . radius + arc . centerPoint . x ; var y:==:math . sin ( currentAngle ) * arc . radius + arc . centerPoint . y ;
var snowlevel = config . snowlevel?config . snowlevel : 2 ; var speed:==:config . speed ;
var s = this . _ createEmbeddedViewInContainerScope ( ) ; var protoView:==:view_ref_1 . internalProtoView ( templateRef . protoViewRef ) ;
var texture = gltfRuntime . textures [ i d ] ; var source:==:gltfRuntime . images [ texture . source ] ;
var other = _ other ; var self:==:_ self ;
var nconf = require ( ' nconf ' ) ; var path:==:require ( ' path ' ) ;
var c = Math . cos ( angle ) , s = Math . sin ( angle ) ; var x:==:this . x - center . x ;
var flash = require ( ' connect - flash ' ) ; var compression:==:require ( ' compression ' ) ;
var dataset = this . chart . data . datasets [ rectangle . _ datasetIndex ] ; var index:==:rectangle . _ index ;
var motionArgs = inputState . motionArgs  |  |  ; var operator:==:inputState . operator ;
var x = data . chars [ char ] . x ; var y:==:data . chars [ char ] . y ;
var path = require ( ' path ' ) ; var webpack:==:require ( ' webpack ' ) ;
var min = seriesModel . get ( ' min ' ) ; var max:==:seriesModel . get ( ' max ' ) ;
var iccId = messagedom . dataset . iccId ; var button:==:messagedom . querySelector ( ' button ' ) ;
var allShadows = scope . targetFinding . allShadows . bind ( scope . targetFinding ) ; var pointermap:==:dispatcher . pointermap ;
var rect = params . options . rect ; var w:==:rect . width ;
var OPS = sharedUtil . ops ; var textRenderingMode:==:sharedUtil . textRenderingMode ;
var col = filterCols ( cols , group ) [ 0 ] ; var val:==:$ utils . evalProperty ( model , group ) ;
var groupedItems = this . _ groupedItems ; var groupedItem:==:groupedItems [ key ] ;
var forwardMethodsToWrapper = scope . forwardMethodsToWrapper ; var matchesNames:==:scope . matchesNames ;
var addon = spec . addon ; var timeout:==:( spec . timeout     undefined ) ? TIMEOUT_DOWNLOAD : spec . timeout ;
var a = points [ ai ] ; var b:==:points [ bi ] ;
var polygonPool = this . polygonPool ; var slots:==:skeleton . slots ;
var collection = db . collection ( ' fs . files ' ) ; var count:==:yield collection . count ( ) ;
var width = this . canvas _ . width ; var height:==:this . canvas _ . height ;
var lightGreen500 = exports . lightGreen500 = ' # 8bc34a ' ; var lightGreen600:==:exports . lightGreen600    ' # 7cb342 ' ;
var c = document . createElement ( ' canvas ' ) ; var w:==:c . width    img . width ;
var MONGODB_NEW = nconf . get ( ' MONGODB_NEW ' ) ; var mongoClient:==:mongodb . mongoClient ;
var eventType = goog . fs . fileSaver . eventType ; var readyState:==:goog . fs . fileSaver . readyState ;
var assert = require ( ' assert ' ) ; var client:==:marionette . client ( Dialer . config ) ;
var firstChild = domFragment . firstChild ; var lastChild:==:domFragment . lastChild ;
var safeAddLayer = leafletLayerHelpers . safeAddLayer ; var safeRemoveLayer:==:leafletLayerHelpers . safeRemoveLayer ;
var glTexture = texture . _ glTextures [ i ] ; var gl:==:pixi . glContexts [ i ] ;
var secondAxis = cartesian3 . normalize ( cartesian3 . cross ( reference , firstAxis , secondAxisScratch ) , secondAxisScratch ) ; var thirdAxis:==:cartesian3 . normalize ( cartesian3 . cross ( firstAxis , secondAxis , thirdAxisScratch ) , thirdAxisScratch ) ;
var gitSemverTags = context . gitSemverTags ; var commitGroups:==:context . commitGroups ;
var faces = geometry . faces ; var vertices:==:geometry . vertices ;
var s = color : ' # 666 ' , weight : 2 , opacity : 0 . 4 , fillColor : ' # 666 ' , fillOpacity : 0 . 1 , clickable : false ; var bounds:==:new l . latLngBounds ( bounds ) ;
var eventEmitter = require ( ' eventEmitter ' ) ; var image:==:require ( ' image ' ) ;
var repulsion = params . repulsion  |  |  400 . 0 ; var damping:==:params . damping  |  |  0 . 5 ;
var box = this . parseGeometry [ ' box ' ] . apply ( this , [ boxNode ] ) ; var parentNode:==:boxNode . parentNode ;
var Role = goog . a11y . aria . Role ; var State:==:goog . a11y . aria . State ;
var Text = reactCanvas . text ; var fontFace:==:reactCanvas . fontFace ;
var no = _ no ; var yes:==:_ yes ;
var alwaysOnTop = powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' popup ' ] [ ' alwaysOnTop ' ] , pulseChart . defaultSettings . popup . alwaysOnTop ) ; var width:==:math . max ( pulseChart . popupMinWidth , math . min ( pulseChart . popupMaxWidth , powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' popup ' ] [ ' width ' ] , pulseChart . defaultSettings . popup . width ) ) ) ;
var templates = opts . templates ; var item_opts:==:opts . item_opts  |  |  ;
var backFunction = stencilTest . backFunction ; var reference:==:stencilTest . reference ;
var dataRoles = options . dataRoles ; var objectDescriptors:==:options . objectDescriptors ;
var tokenType = traceur . syntax . tokenType ; var createArgumentList:==:parseTreeFactory . createArgumentList ;
var xScale0 = chart . scales . xScale0 ; var xScale1:==:chart . scales . xScale1 ;
var fftSamples = this . fftSamples ; var buffer:==:this . buffer    this . wavesurfer . backend . buffer ;
var pctThreshold = metrics . pctThreshold ; var histogram:==:metrics . histogram ;
var x = this . centerWorld . x - point . x ; var y:==:this . centerWorld . y - point . y ;
var boneMatrices = this . boneMatrices ; var boneTexture:==:this . boneTexture ;
var assert = require ( ' assert ' ) ; var clone:==:require ( ' clone ' ) ;
var options = this . props . options ; var withFirstAndLast:==:options . withFirstAndLast      undefined ? true : options . withFirstAndLast ;
var children = _ props3 . children ; var containerElement:==:_ props3 . containerElement ;
var isNum = sharedUtil . isNum ; var isString:==:sharedUtil . isString ;
var timeline = vis . timeline ; var timeStep:==:timeline . timeStep ;
var children = _ props3 . children ; var loadingPlaceholder:==:_ props3 . loadingPlaceholder ;
var escape = require ( ' escape - string - regexp ' ) ; var hasOwnProp:==:object . prototype . hasOwnProperty ;
var daterange = config . importer . daterange ; var from:==:moment . utc ( daterange . from ) ;
var unsafeUnwrap = scope . unsafeUnwrap ; var unwrapIfNeeded:==:scope . unwrapIfNeeded ;
var categoryPercentage = xScale . options . categoryPercentage ; var barPercentage:==:xScale . options . barPercentage ;
var video2 = document . querySelector ( ' video#video2 ' ) ; var startButton:==:document . querySelector ( ' button#startButton ' ) ;
var prefix   = require ( ' gulp - autoprefixer ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var debug = options . debug ! = = undefined ? options . debug : false ; var collab:==:options . collab ;
var form = document . createElement ( ' form ' ) ; var area:==:document . createElement ( ' textarea ' ) ;
var scheduler = instance . get ( ' scheduler ' ) ; var currentTime:==:scheduler . get ( ' currentTimeFn ' ) ;
var moduleVisitor = traceur . codegeneration . module . moduleVisitor ; var exportSymbol:==:traceur . semantics . symbols . exportSymbol ;
var container = parent [ 0 ] . querySelector ( ' . md - dialog - container ' ) ; var dialog:==:angular . element ( container ) . find ( ' md - dialog ' ) ;
var type = this . _ type ; var stack:==:this . _ stack ;
var leftDelim = ( typeof config . mode . leftDelimiter ! = ' undefined ' ) ? config . mode . leftDelimiter : ' ' ; var rightDelim:==:( typeof config . mode . rightDelimiter !   ' undefined ' ) ? config . mode . rightDelimiter : ' ' ;
var perPositionHeight = polygon . perPositionHeight ; var closeTop:==:polygon . closeTop ;
var listener = listenerObj . listener ; var bindTo:==:listenerObj . bindTo  |  |  listenerObj . target ;
var width = nearest_pow2 ( this . width ) ; var height:==:nearest_pow2 ( this . height ) ;
var x = bounds . x * _ width * _ pixelRatio ; var y:==:bounds . y * _ height * _ pixelRatio ;
var maxScale = _ props . maxScale ; var minScale:==:_ props . minScale ;
var quantity = Ext . getCmp ( ' time - quantity ' ) . getValue ( ) ; var units:==:ext . getCmp ( ' time - units ' ) . getValue ( ) ;
var querystring = require ( ' querystring ' ) ; var request:==:require ( ' request ' ) . defaults ( json : true ) ;
var menus = imports . menus ; var tabManager:==:imports . tabManager ;
var disabledLabelColor = props . disabledLabelColor ; var fullWidth:==:props . fullWidth ;
var tempKeyMap = config . tempKeyMap ; var entityType:==:entityGroup . entityType ;
var hasInitialization = representation . hasInitialization ( representation ) ; var hasSegments:==:representation . hasSegments ( representation ) ;
var intensity = lparams . intensity ; var distance:==:lparams . distance ;
var leaveCancelled = data . leaveCancelled ; var delayLeave:==:data . delayLeave ;
var xMin = this . xMin  |  |  0 ; var yMin:==:this . yMin  |  |  0 ;
var pos = m . position ; var rot:==:m . rotation ;
var magneticHeading = e . heading . magneticHeading ; var accuracy:==:e . heading . accuracy ;
var imgSize = options . imgSize ! = = undefined ? options . imgSize : null ; var src:==:options . src ;
var input = this . inputs [ i ] ; var source:==:this . animation . source [ input . source ] ;
var scale = crs . scale ( path . _ map . getZoom ( ) ) ; var projection:==:crs . projection ;
var inDict = inDict  |  |  ; var buttons:==:inDict . buttons ;
var value = Expression . Create ( '' + ( options . value  |  |  $ thisStr ) + '' , ' value ' ) ; var caption:==:blocks . isString ( options . caption ) & & new virtualElement ( ' option ' ) ;
var proxy = listener . proxy ; var capture:==:listener . capture ;
var bearing = ' bearing ' in options ? this . _ normalizeBearing ( options . bearing , startBearing ) : startBearing ; var pitch:==:' pitch ' in options ? + options . pitch : startPitch ;
var scrollLeft = this . _ codeMirror . doc . scrollLeft ; var scrollTop:==:this . _ codeMirror . doc . scrollTop ;
var createVariableDeclarationList = parseTreeFactory . createVariableDeclarationList ; var createVariableStatement:==:parseTreeFactory . createVariableStatement ;
var list = new fastList ( listContainer , source ) ; var scheduler:==:fastList . scheduler ;
var y = anchor . yCoordinate ; var variationProcessor:==:this . font . _ variationProcessor ;
var L = new _ cg ( 0 , 1 , ' L ' ) ; var M:==:new _ cg ( 1 , 0 , ' M ' ) ;
var provider = this . provider ; var sel:==:provider . selectedItems ;
var row = row_col [ 0 ] ; var col:==:row_col [ 1 ] ;
var names = util . getArg ( sourceMap , ' names ' , [ ] ) ; var sourceRoot:==:util . getArg ( sourceMap , ' sourceRoot ' , null ) ;
var Element = scope . wrappers . Element ; var htmlElement:==:scope . wrappers . htmlElement ;
var psw = validator . trim ( req . body . psw )  |  |  '' ; var repsw:==:validator . trim ( req . body . repsw )  |  |  '' ;
var os = require ( ' os ' ) ; var which:==:require ( ' which ' ) ;
var splitEditor = window . splitEditor = util . createSplitEditor ( ' editor ' ) ; var editor1:==:window . editor1    splitEditor . editor0 ;
var dx = e . detail . relative . dx ; var dy:==:e . detail . relative . dy ;
var expectations = this . expectations & & this . expectations [ method ] ; var length:==:expectations & & expectations . length  |  |  0 , i ;
var nconf = require ( ' nconf ' ) ; var session:==:require ( ' express - session ' ) ;
var clone = require ( ' clone ' ) ; var each:==:require ( ' each ' ) ;
var builtinFuncs = wordRegexp ( builtinFuncsWords ) ; var builtinObjs:==:wordRegexp ( builtinObjsWords ) ;
var width = Math . max ( pulseChart . popupMinWidth , math . min ( pulseChart . popupMaxWidth , powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' popup ' ] [ ' width ' ] , pulseChart . defaultSettings . popup . width ) ) ) ; var height:==:math . max ( pulseChart . popupMinHeight , math . min ( pulseChart . popupMaxHeight , powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' popup ' ] [ ' height ' ] , pulseChart . defaultSettings . popup . height ) ) ) ;
var code = encodeuriComponent ( this . props . children ) ; var params:==:this . parseParams ( this . props . params ) ;
var cookie = exports . cookie ; var levels:==:exports . levels ( url ) ;
var dist = ' dist ' + path . sep ; var today:==:grunt . template . today ( ' UTC : yyyy ' ) ;
var exififdLength = ifDlengths . exififdLength ; var exififdLengthDataSection:==:ifDlengths . exififdLengthDataSection ;
var basename = require ( ' path ' ) . basename ; var windowManager:==:window . server . windowManager ;
var defaults = this . collection . defaults  |  |  ; var metadata:==:this . model . get ( ' metadata ' )  |  |  ;
var commonmark = self . options . commonmark ; var now:==:eat . now ( ) ;
var i d = cookie . get ( ' i d ' ) ; var type:==:this . user . get ( ' type ' ) ;
var padding = options . padding  |  |  defaultPadding ; var passphrase:==:options . passphrase  |  |  null ;
var a = SIMD . Float32x4 ( 16 . 0 , 9 . 0 , 4 . 0 , 1 . 0 ) ; var c:==:SIMD . Float32x4 . replaceLane ( a , false , 20 . 0 ) ;
var start = settings . start ; var end:==:settings . end ;
var utm = require ( ' utm - params ' ) ; var uuid:==:require ( ' uuid ' ) ;
var Cluster = window . app . services . Cluster ; var test:==:window . test ;
var l = doc . getValue ( ) . length ; var random:==:math . random ( ) ;
var conceptualDataCategory = data . conceptualDataCategory ; var jsCommon:==:window . jsCommon ;
var arc = ( options . arc < = 0  |  |  options . arc > 1 ) ? 1 . 0 : options . arc  |  |  1 . 0 ; var closed:==:( options . closed      undefined ) ? true : options . closed ;
var e = new Experience ( ) ; var n:==:this . window_size ;
var createSwitchStatement = parseTreeFactory . createSwitchStatement ; var createThisExpression:==:parseTreeFactory . createThisExpression ;
var head = content . document . getElementsByTagName ( ' head ' ) [ 0 ] ; var s:==:content . document . createElement ( ' script ' ) ;
var path = require ( ' path ' ) ; var parse:==:path . parse  |  |  require ( ' path - parse ' ) ;
var element = that . element ; var options:==:that . options ;
var b = this . begin [ i ] ; var f:==:this . finish [ i ] ;
var offsetWidth = precomputedDimensions ? precomputedDimensions . offsetWidth : naturalWidth ; var offsetHeight:==:precomputedDimensions ? precomputedDimensions . offsetHeight : naturalHeight ;
var width = columns [ columnIndex ] . _ auto_width ; var property:==:columns [ columnIndex ] . property ;
var myFunction = function ( arg1 ) return [ this , ' myFunction ' , arg1 ] ; var myFunctionWithCall:==:function ( arg1 ) return [ this , ' myFunctionWithCall ' , arg1 ] ;
var setManager = docSet . getByLongname ( ' setManager ' ) [ 0 ] ; var setName:==:docSet . getByLongname ( ' setName ' ) [ 0 ] ;
var domRange = api . domRange ; var wrappedRange:==:api . wrappedRange ;
var freeze = require ( ' . . ' ) . freeze ; var liven:==:require ( ' . . ' ) . liven ;
var positionWorld = vertex . positionWorld ; var positionScreen:==:vertex . positionScreen ;
var z = ( ( ( value1 . z * part1 ) + ( value2 . z * part2 ) ) + ( tangent1 . z * part3 ) ) + ( tangent2 . z * part4 ) ; var w:==:( ( ( value1 . w * part1 ) + ( value2 . w * part2 ) ) + ( tangent1 . w * part3 ) ) + ( tangent2 . w * part4 ) ;
var when = require ( ' when ' ) ; var should:==:require ( ' should ' ) ;
var i2 = opt_i2 ? opt_i2 : this . size _ . height - 1 ; var j2:==:opt_j2 ? opt_j2 : this . size _ . width - 1 ;
var plupload = that . plupload ; var $ status:==:that . $ status ;
var todo = require ( ' gulp - todo ' ) ; var webpack:==:require ( ' webpack - stream ' ) ;
var select = rewriter . rewriteSelect ( this . selectItems , from ) ; var groupBy:==:rewriter . rewriteGroupBy ( this . groupByItems , from ) ;
var disp = this . disp ; var options:==:this . options ;
var head = cm . getCursor ( ' head ' ) ; var anchor:==:cm . getCursor ( ' anchor ' ) ;
var webserver = require ( ' gulp - webserver ' ) ; var path:==:require ( ' path ' ) ;
var tabManager = imports . tabManager ; var save:==:imports . save ;
var from = e . getAttribute ( ' from ' ) ; var to:==:e . getAttribute ( ' to ' ) ;
var printStyle = _ _ webpack_require _ _ ( 29 ) . printStyle ; var allOptions:==:_ _ webpack_require _ _ ( 59 ) . allOptions ;
var path = require ( ' path ' ) ; var cloudinaryImageFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' cloudinaryImageFieldTestObject ' ) ) ;
var a = new symbolNode ( ' a ' ) ; var c:==:new symbolNode ( ' c ' ) ;
var assert = require ( ' assert - diff ' ) ; var path:==:require ( ' path ' ) ;
var w = this . width ; var h:==:this . height ;
var zlevel = seriesModel . get ( ' zlevel ' ) ; var trailLength:==:seriesModel . get ( ' effect . trailLength ' ) ;
var ctx = this . ctx ; var current:==:this . current ;
var promoteBuffers = options [ ' promoteBuffers ' ] = = null ? false : options [ ' promoteBuffers ' ] ; var promoteLongs:==:options [ ' promoteLongs ' ]     null ? true : options [ ' promoteLongs ' ] ;
var svg = d3 . select ( offsetElement ) . select ( ' svg ' ) ; var viewBox:==:( svg . node ( ) ) ? svg . attr ( ' viewBox ' ) : null ;
var demo = document . getElementById ( ' demo ' ) ; var div:==:document . createElement ( ' div ' ) ;
var idStringify = mongoid . idStringify ; var idParse:==:mongoid . idParse ;
var hostname = hosts . hosts [ key ] . hostname ; var type:==:hosts . hosts [ key ] . type ;
var x = dataPoint [ this . _ xField ] ; var y:==:dataPoint [ this . _ yField ] ;
var button = this . mapping [ this . data . hand ] . buttons [ evt . detail . i d ] ; var buttonMeshes:==:this . buttonMeshes ;
var dynCall_iddddiii = Module [ ' dynCall_iddddiii ' ] = asm [ ' dynCall_iddddiii ' ] ; var dynCall_iiiiiiiiiiii:==:Module [ ' dynCall_iiiiiiiiiiii ' ]    asm [ ' dynCall_iiiiiiiiiiii ' ] ;
var data = that . dataSource . flatView ( ) ; var skip:==:that . listView . skip ( ) ;
var done = self . _ done ( resolve , self ) ; var show:==:self . _ simpleBind ( self . show , self ) ;
var type = activity . source . data . type ; var name:==:activity . source . name ;
var identity = identityFn ( req ) ; var yyyymmdd:==:moment ( ) . format ( ' yyyymmdd ' ) ;
var file = require ( ' file ' ) ; var archiver:==:require ( ' archiver ' ) ;
var integerBufferSet = require ( ' integerBufferSet ' ) ; var clamp:==:require ( ' clamp ' ) ;
var arrayGroup = this . arrayGroups . line [ this . arrayGroups . line . length - 1 ] ; var layoutVertexArray:==:arrayGroup . layoutVertexArray ;
var v = goog . vec . vec3d . createFromValues ( 3 , 4 , 5 ) ; var s:==:goog . vec . vec3d . createFromValues ( 6 , 7 , 8 ) ;
var shell = require ( ' shelljs ' ) ; var grunt:==:require ( ' grunt ' ) ;
var clientX = originalEvent . clientx ; var clienty:==:originalEvent . clienty ;
var dir = result . direction ; var len:==:dir . length ( ) ;
var express = require ( ' express ' ) ; var connect:==:require ( ' connect ' ) ;
var getNonStdFontMap = coreStandardFonts . getNonStdFontMap ; var getGlyphMapForStandardFonts:==:coreStandardFonts . getGlyphMapForStandardFonts ;
var ascending1 = comparator . ascending1 ; var ascending2:==:comparator . ascending2 ;
var value = event . detail . value ; var sortedKeys:==:this . _ sortedKeys ;
var ttsStatus = document . getElementById ( ' ttsStatus ' ) ; var voiceInfo:==:document . getElementById ( ' voiceInfo ' ) ;
var getString = this . _ getString ; var getUint16:==:this . _ getUint16 ;
var React = require ( ' React ' ) ; var recordingModule:==:require ( ' nativeModules ' ) . pickerAndroidRecordingModule ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var numberArrayFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' numberArrayFieldTestObject ' ) ) ;
var posConnectionTypes = windows . devices . pointOfService . posConnectionTypes ; var lineDisplay:==:windows . devices . pointOfService . lineDisplay ;
var sx = t . sx ; var sy:==:t . sy ;
var cli = imports [ ' vim . cli ' ] ; var c9:==:imports . c9 ;
var emptyFunction = require ( ' emptyFunction ' ) ; var invariant:==:require ( ' invariant ' ) ;
var object = state . objects [ i ] ; var geometry:==:object . geometry ;
var p = polar . coordToPoint ( [ r + labelMargin , labelsAngles [ i ] ] ) ; var cx:==:polar . cx ;
var CLASS_DECLARATION = ' CLASS_DECLARATION ' ; var CLASS_EXPRESSION:==:' CLASS_EXPRESSION ' ;
var node = nodes [ i ] ; var mockContact:==:mockContacts [ i ] ;
var wait = options . wait  |  |  0 ; var d:==:new Deferred ( ) ;
var createDefaultClause = parseTreeFactory . createDefaultClause ; var createEmptyParameterList:==:parseTreeFactory . createEmptyParameterList ;
var Attendance = Parse . Object . extend ( ' Attendance ' ) ; var Survey:==:Parse . Object . extend ( ' Survey ' ) ;
var widget = this . widget ; var abspos:==:widget . _ abspos ;
var tag = this . _ tag ; var URL:==:window . URL  |  |  window . webkitURL ;
var dataNode = dataNodes [ i ] ; var name:==:queryStringAttribute ( dataNode , ' name ' ) ;
var exists = require ( ' fs ' ) . existsSync  |  |  require ( ' path ' ) . existsSync ; var glob:==:require ( ' glob ' ) ;
var semver = require ( ' semver ' ) ; var os:==:require ( ' os ' ) ;
var r = ( color . r * 255 )  |  0 ; var g:==:( color . g * 255 )  |  0 ;
var option = data ? ' toggle ' : options ; var parent:==:options . parent ;
var resultSelector = this . resultSelector ; var index:==:this . index++ ;
var child_process = require ( ' child_process ' ) ; var PNG:==:require ( ' pngjs ' ) . PNG ;
var wordSpacing = current . wordSpacing ; var fontDirection:==:current . fontDirection ;
var p = $ . extend ( , params , config ) ; var val:==:$ ( this ) . val ( ) ;
var myObject = call : function ( ) return [ myObject , ' myObject . call ' ] ; var myFunction:==:function ( arg1 ) return [ this , ' myFunction ' , arg1 ] ;
var begin = taskData . begin ; var end:==:taskData . end ;
var bakeLmEnd = chunks . bakeLmEndps ; var dilate:==:chunks . dilateps ;
var useOIT = environmentState . useoit ; var usefxaa:==:environmentState . usefxaa ;
var decimal = $ . data ( this , ' numeric . decimal ' ) ; var callback:==:$ . data ( this , ' numeric . callback ' ) ;
var options = this . options ; var col:==:options . colInside ;
var target = event . target ; var value:==:target . value ;
var showDontAsk = options . showDontAsk ; var metadata:==:options . metadata ;
var clip = this . clip ; var words:==:this . words ;
var elementRef = this . elementRef ; var parentView:==:view_ref_1 . internalView ( elementRef . parentView ) ;
var w = meshInstance . skinInstance . boneTexture . width ; var h:==:meshInstance . skinInstance . boneTexture . height ;
var deviceNameView = _ appJsViewsDeviceNameView [ ' default ' ] ; var progressDialogView:==:_ appJsViewsProgressDialogView [ ' default ' ] ;
var classPrefix    = this . classPrefix ; var toolbarIcons:==:this . toolbarIcons    toolbar . find ( ' . ' + classPrefix + ' menu > li > a ' ) ;
var repl = require ( ' repl ' ) ; var util:==:require ( ' util ' ) ;
var placeholder = that . options . draggable . placeholder ; var dataItem:==:that . dataItem ( draggedElement ) ;
var tagName = details . tagName  |  |  '' ; var src:==:details . frameUrl  |  |  details . srcUrl  |  |  details . linkUrl  |  |  '' ;
var fs    = require ( ' fs ' ) ; var rim:==:require ( ' rimraf ' ) . sync ;
var DateTimeSymbols_ar = goog . require ( ' goog . i18n . DateTimeSymbols_ar ' ) ; var DateTimeSymbols_en:==:goog . require ( ' goog . i18n . DateTimeSymbols_en ' ) ;
var angle = this . angle ; var phase:==:this . phase ;
var $ elem = item . $ elem ; var value:==:item . value ;
var a = new constantNode ( 2 ) ; var x:==:new symbolNode ( ' x ' ) ;
var doc = this . buttonWindow . document ; var button:==:doc . createElement ( ' button ' ) ;
var hash = system . hash ( data ) ; var sinon:==:this . sinon ;
var offsetCenter = titleModel . get ( ' offsetCenter ' ) ; var x:==:posInfo . cx + parsePercent ( offsetCenter [ 0 ] , posInfo . r ) ;
var find = imports . find ; var settings:==:imports . settings ;
var decorations = session . $ decorations ; var firstLineNumber:==:session . $ firstLineNumber ;
var fs = require ( ' fs - extra ' ) ; var argv:==:require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ;
var columns = _ ref . columns ; var index:==:_ ref . index ;
var externalExportBindings = $ _ _ 6 . externalExportBindings [ index ] ; var exportStarBinding:==:$ _ _ 6 . exportStarBindings [ index ] ;
var o = goog . style . getPageOffset ( element ) ; var s:==:goog . style . getSize ( element ) ;
var label = field . label ( )  |  |  field . name ( ) ; var type:==:field . type ( ) ;
var dx = Math . max ( 0 , Math . min ( Math . min ( bounds . width , bounds . height ) - arrowHead , parseFloat ( mxUtils . getValue ( this . state . style , ' dx ' , this . dx ) ) ) ) ; var dy:==:math . max ( 0 , math . min ( arrowHead , parseFloat ( mxUtils . getValue ( this . state . style , ' dy ' , this . dy ) ) ) ) ;
var param = params [ key ] ; var type:==:Object . prototype . toString . call ( param ) ;
var show = new showGeometryInstanceAttribute ( isAvailable & & entity . isShowing & & this . _ showProperty . getValue ( time ) ) ; var distanceDisplayCondition:==:this . _ distanceDisplayConditionProperty . getValue ( time ) ;
var infinite = input . hasClass ( ' infinite ' ) ; var noofdrags:==:this . get_noofdrags_for_node ( input ) ;
var internalError = errors . internalError ; var invalidArgumentError:==:errors . invalidArgumentError ;
var pos = arguments [ 0 ] . pos ? arguments [ 0 ] . pos : arguments [ 1 ] ; var synsetOffset:==:arguments [ 0 ] . synsetOffset ? arguments [ 0 ] . synsetOffset : arguments [ 0 ] ;
var text = fs . readFileSync ( path . join ( context , fname ) , ' utf8 ' ) , m ; var server:==:new tern . server ( serverOptions ( context , text ) ) ;
var zlevelList = this . _ zlevelList ; var layer:==:layers [ zlevel ] ;
var target = controllerHost . target ; var pos:==:target . position ;
var target = this . vexpr ( l . target , nexti ) ; var n:==:l . ifs . length ;
var dummy = toString : goog . functions . constant ( ' [ object dummy ] ' ) ; var sentinel:==:toString : goog . functions . constant ( ' [ object sentinel ] ' ) ;
var session = this . session ; var pos:==:this . $ pos ;
var x = this . coordinate . x + viewportOffset . x ; var y:==:this . coordinate . y + viewportOffset . y ;
var contentState = require ( ' contentState ' ) ; var editorState:==:require ( ' editorState ' ) ;
var titleText = powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . treemapProps . legend . titleText , this . data . legendData . title ) ; var labelColor:==:powerbi . dataViewObject . getValue ( legendObjectProperties , visuals . legendProps . labelColor , this . data . legendData ? this . data . legendData . labelColor : visuals . legendData . defaultLegendLabelFillColor ) ;
var propagationPhases = eventConstants . propagationPhases ; var getListener:==:eventPluginHub . getListener ;
var hashish = require ( ' hashish ' ) ; var fs:==:require ( ' fs ' ) ;
var chalk = require ( ' chalk ' ) ; var path:==:require ( ' path ' ) ;
var propagating = require ( ' propagating - hammerjs ' ) ; var Hammer:==:window [ ' Hammer ' ]  |  |  require ( ' hammerjs ' ) ;
var fontSize = current . fontSize ; var fontSizeScale:==:current . fontSizeScale ;
var opacity = context . opacity ; var size:==:context . size ;
var fcb = callbacks [ i ] . fcb ; var d:==:callbacks [ i ] . data ;
var https = require ( ' https ' ) ; var url:==:require ( ' url ' ) ;
var config = this . config ; var content:==:page . content ;
var lineNumber = debuggerModelLocation . lineNumber ; var columnNumber:==:debuggerModelLocation . columnNumber  |  |  0 ;
var start = startToken ? startToken . loc . end . line : 1 ; var end:==:endToken . loc . start . line ;
var pageNumber = params . pageNumber  |  |  0 ; var dest:==:params . destArray  |  |  null ;
var wrap = shadowdomPolyfill . wrap ; var unwrap:==:shadowdomPolyfill . unwrap ;
var a = require ( ' a ' ) ; var foo:==:a . foo ;
var pointer = pointers [ objectKeys ( pointers ) [ 0 ] ] ; var container:==:self . container ;
var operatorArgs = inputState . operatorArgs  |  |  ; var registerName:==:inputState . registerName ;
var data = this . data ; var bp:==:this . bp ;
var editor = this . editor ; var provider:==:editor . provider ;
var width = this . viewport . width - this . margin . left - this . margin . right ; var height:==:this . viewport . height - this . margin . top - this . margin . bottom ;
var hasVertexNormals = encoding . hasVertexNormals ; var exaggeration:==:parameters . exaggeration ;
var modify = require ( ' gulp - modify ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var t = this . _ loading  |  |  this . _ disabled ; var d:==:this . _ disabled ;
var f = this . finishValue ; var p:==:this . getValueProportion ( ) ;
var path = require ( ' path ' ) ; var should:==:require ( ' should ' ) ;
var decoders = decoder . decoders ; var len:==:decoders . length ;
var renderWatch = nv . utils . renderWatch ( dispatch ) ; var style:==:stacked . style ( ) ;
var format = this . h ( ' format ' ) ; var className:==:this . h ( ' className ' ) ;
var forward = actionArgs . forward ; var jumpList:==:vimGlobalState . jumpList ;
var match = this . matchDimen ( dim ) ; var m:==:parseFloat ( match [ 1 ]  |  | '1 ' ) , unit    match [ 2 ] ;
var categoryScale = axisOptions . categoryScale ; var valueScale:==:axisOptions . valueScale ;
var direction = opts . direction  |  |  ' outgoing ' ; var lines:==:parsers . lines ( media ) ;
var hash = hashingFunction ( key ) ; var bucket:==:getBucketForHash ( bucketsByHash , hash ) ;
var items = list . els . items ; var source:==:list . source ;
var addMarkerWatcher = leafletMarkersHelpers . addMarkerWatcher ; var updateMarker:==:leafletMarkersHelpers . updateMarker ;
var uint16 = Fn . uint16 ; var toFixed:==:fn . toFixed ;
var assert = require ( ' assert ' ) ; var argv:==:require ( ' optimist ' ) . argv ;
var consequent = this . consequent . drop_side_effect_free ( compressor ) ; var alternative:==:this . alternative . drop_side_effect_free ( compressor ) ;
var addedEntities = this . _ addedEntities ; var removed:==:this . _ removedEntities ;
var eventPropagators = require ( ' eventPropagators ' ) ; var syntheticAnimationEvent:==:require ( ' syntheticAnimationEvent ' ) ;
var wind = options . window  |  |  window ; var noop:==:angular . noop ;
var throttle = require ( ' throttle ' ) ; var when:==:require ( ' when ' ) ;
var atMost = options . atMost ; var exactly:==:options . exactly ;
var createCallExpression = parseTreeFactory . createCallExpression ; var createMemberExpression:==:parseTreeFactory . createMemberExpression ;
var ellipsoid = options . ellipsoid ; var semiMajorAxis:==:options . semiMajorAxis ;
var contained1 = document . getElementById ( ' contained1 ' ) ; var contained1_1:==:document . getElementById ( ' contained1_1 ' ) ;
var a = arguments [ i ] ; var t:==:$ . type ( a ) ;
var STATUS_CONNECTING = exports . STATUS_CONNECTING   = 1 ; var STATUS_ACTIVE:==:exports . STATUS_ACTIVE      2 ;
var webrtc = util . Module ( ' webrtc ' ) ; var assert:==:util . assert ;
var ripples = _ state . ripples ; var prepareStyles:==:this . context . muiTheme . prepareStyles ;
var backgroundColor = props . backgroundColor ; var color:==:props . color ;
var getSelectedNode = rangeUtils . getSelectedNode ; var isAfterContentEditableFalse:==:caretUtils . isAfterContentEditableFalse ;
var minimum = getRangeValue ( categoricalValues . minimum , settings . values . minimumPercent ) ; var needsImprovement:==:getRangeValue ( categoricalValues . needsImprovement , settings . values . needsImprovementPercent ) ;
var fs = require ( ' fs - extra ' ) ; var child_process:==:require ( ' child_process ' ) ;
var z = q . z ( ) ; var w:==:q . w ( ) ;
var givenName = ( contact . givenName & & contact . givenName [ 0 ] )  |  |  '' ; var familyName:==:( contact . familyName & & contact . familyName [ 0 ] )  |  |  '' ;
var values = result . values ; var highlights:==:result . highlights ;
var name = detail . name ; var url:==:detail . url ;
var changelog = require ( ' gulp - conventional - changelog ' ) ; var tag:==:require ( ' gulp - tag - version ' ) ;
var Selectable = kendo . ui . Selectable ; var dataBoundWidget:==:kendo . ui . dataBoundWidget ;
var generateRandomKey = require ( ' generateRandomKey ' ) ; var insertIntoList:==:require ( ' insertIntoList ' ) ;
var os   = require ( ' os ' ) ; var debug:==:require ( ' debug ' ) ( ' interface : push - interactor ' ) ;
var textOperation = firepad . textOperation ; var cursor:==:firepad . cursor ;
var fixedRowsBottom = wot . getSetting ( ' fixedRowsBottom ' ) ; var fixedColumnsLeft:==:wot . getSetting ( ' fixedColumnsLeft ' ) ;
var bind = require ( ' bind ' ) ; var debug:==:require ( ' debug ' ) ( ' analytics : group ' ) ;
var semver = require ( ' semver ' ) ; var which:==:require ( ' which ' ) ;
var mdNoAsterisk = $ mdUtil . parseAttributeBoolean ( attr . mdNoAsterisk ) ; var tagName:==:element [ 0 ] . tagName . toLowerCase ( ) ;
var left = region . left ; var top:==:region . top ;
var entries = ' local entries ' ; var fill:==:' local fill ' ;
var path = require ( ' path ' ) ; var mime:==:require ( ' mime - types ' ) ;
var draftEditorTextNode = require ( ' draftEditorTextNode . react ' ) ; var react:==:require ( ' react ' ) ;
var instance = options . instance ; var lines:==:options . lines ;
var resolutionScale = label . _ labelCollection . _ resolutionScale ; var backgroundBillboard:==:label . _ backgroundBillboard ;
var atNameDeclaration = traceur . syntax . trees . atNameDeclaration ; var atNameExpression:==:traceur . syntax . trees . atNameExpression ;
var lime300 = exports . lime300 = ' # dce775 ' ; var lime400:==:exports . lime400    ' # d4e157 ' ;
var readdir = fs . readdir . bind ( fs ) ; var readdirSync:==:fs . readdirSync . bind ( fs ) ;
var fixedDataTableScrollHelper = require ( ' fixedDataTableScrollHelper ' ) ; var fixedDataTableWidthHelper:==:require ( ' fixedDataTableWidthHelper ' ) ;
var mode = oFromPageInfo . mode ; var oFromPage:==:this . getPage ( oFromPageInfo . i d ) ;
var CR = treatment . CR  |  |  20 ; var carbs:==:treatment . carbs  |  |  CR ;
var express = require ( ' express ' ) ; var webpack:==:require ( ' webpack ' ) ;
var React = require ( ' React ' ) ; var cx:==:require ( ' cx ' ) ;
var keys = JSDOC . jsPlate . keys ; var values:==:jsdoc . jsPlate . values ;
var matrixWorld = this . object . matrixWorld ; var position:==:this . geometry . attributes . position ;
var readFile = opts . readFile  |  |  fs . readFile ; var extensions:==:opts . extensions  |  |  [ ' . js ' ] ;
var Node = math . expression . node . Node ; var parenthesisNode:==:math . expression . node . parenthesisNode ;
var vy = this . vy * damping + ( gravity . y + this . f . y * this . m_inv ) * dt ; var v_limit:==:this . v_limit ;
var consequent = self . consequent ; var alternative:==:self . alternative ;
var x = ~~ ( e . pos . _ x + particle . position . x ) ; var y:==:~~ ( e . pos . _ y + particle . position . y ) ;
var drag_line = drag_lines [ 0 ] ; var src:==:null , dst , src_port ;
var isSelectionAtLeafStart = require ( ' isSelectionAtLeafStart ' ) ; var nullthrows:==:require ( ' nullthrows ' ) ;
var invalidAlgorithmError = errs . invalidAlgorithmError ; var signatureParseError:==:errs . signatureParseError ;
var INVALID = ' INVALID ' ; var PENDING:==:' PENDING ' ;
var componentBuffer = lastState . componentBuffer ; var key:==:lastState . key ;
var origin = addNodeTo ( base , options . cssClasses . origin ) ; var handle:==:addNodeTo ( origin , options . cssClasses . handle ) ;
var tooltipManager = powerbi . visuals . tooltipManager ; var axisHelper:==:powerbi . visuals . axisHelper ;
var src = $ this . attr ( ' src ' )  |  |  '' ; var alt:==:$ this . attr ( ' alt ' )  |  |  '' ;
var special = $ ( ' div#special ' ) ; var weapons:==:$ ( ' div#weapons ' ) ;
var g1 = obj . g1 ; var g2:==:Object . getOwnPropertyDescriptor ( obj , ' g2 ' ) . get ;
var reactFiber = require ( ' reactFiber ' ) ; var reactTypeOfSideEffect:==:require ( ' reactTypeOfSideEffect ' ) ;
var width = this . context . canvas . width ; var height:==:this . context . canvas . height ;
var storage = this . _ storage = ; var indices:==:this . indices    [ ] ;
var link = titleModel . get ( ' link ' ) ; var sublink:==:titleModel . get ( ' sublink ' ) ;
var path = require ( ' path ' ) ; var semver:==:require ( ' semver ' ) ;
var startCount = startCountParser . parseuShort ( ) ; var idDelta:==:idDeltaParser . parseShort ( ) ;
var sum64_hi = utils . sum64_hi ; var sum64_lo:==:utils . sum64_lo ;
var noscroll = options . noscroll ; var className:==:options . className  |  |  ' ' ;
var orientationSensor = windows . devices . sensors . orientationSensor ; var backgroundExecutionManager:==:windows . applicationModel . background . backgroundExecutionManager ;
var View = Hilo . View ; var cacheMixin:==:hilo . cacheMixin ;
var notify = require ( ' gulp - notify ' ) ; var argv:==:require ( ' yargs ' ) . argv ;
var getNodeIndex = dom . getNodeIndex ; var isOrIsAncestorOf:==:dom . isOrIsAncestorOf ;
var s = goog . isDef ( opt_precision ) ? num . toFixed ( opt_precision ) : string ( num ) ; var index:==:s . indexOf ( ' . ' ) ;
var canvas = this . canvas ; var stage:==:this . stage ;
var oldKeyGetter = this . _ oldKeyGetter ; var newKeyGetter:==:this . _ newKeyGetter ;
var topCallback = jasmine . createSpy ( ' topCallback ' ) ; var leftCallback:==:jasmine . createSpy ( ' leftCallback ' ) ;
var password = _ . get ( options , ' password ' ) ; var hostPort:==:_ . get ( options , ' hostPort ' ) ;
var head = document . head  |  |  document . getElementsByTagName ( ' head ' ) [ 0 ] ; var link:==:document . createElement ( ' link ' ) ;
var isFile = _ . isFile ; var readFileSync:==:fs . readFileSync ;
var pageSize = this . _ pageSize ; var skipCount:==:this . _ skipCount ;
var blob = request . source . data . blob ; var header:==:document . getElementById ( ' header ' ) ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , zero_to_fifty , height : 70 , valueRange : [ 0,50 ] ) ;
var forStatement = traceur . syntax . trees . forStatement ; var formalParameterList:==:traceur . syntax . trees . formalParameterList ;
var w = window ; var data:==:p . data ;
var r = spColor . r ; var g:==:spColor . g ;
var otherForm = scope . otherForm ; var childControl:==:form . childControl ;
var Request = declareInterfaceClass ( requestImpl ) ; var resource:==:declareInterfaceClass ( resourceImpl ) ;
var touch = e . type . indexOf ( ' touch ' ) = = = 0 ; var mouse:==:e . type . indexOf ( ' mouse ' )      0 ;
var enclosingScope = enclosingScopeContext . getScope ( ) ; var pos:==:enclosingScopeContext . pos - enclosingScopeContext . getScriptFragmentPosition ( ) ;
var message = env . store . createRecord ( ' message ' , i d : 1 ) ; var comment:==:env . store . createRecord ( ' comment ' , i d : 2 , message : message ) ;
var Emitter = require ( ' events ' ) . eventEmitter ; var util:==:require ( ' util ' ) ;
var arr = this . array ( ) ; var i:==:index ( arr , name ) ;
var left = leftPadding + leftPaddingAddition ; var top:==:topPadding + topPaddingAddition ;
var scrollLeft = _ ref4 . scrollLeft ; var scrollTop:==:_ ref4 . scrollTop ;
var push = Array . prototype . push ; var slice:==:Array . prototype . slice ;
var b = this . bottom ; var r:==:this . right ;
var createParameterReference = traceur . codegeneration . parseTreeFactory . createParameterReference ; var createParenExpression:==:traceur . codegeneration . parseTreeFactory . createParenExpression ;
var b = this . b ; var b2j:==:this . b2j ;
var editor   = this . editor ; var classPrefix:==:editormd . classPrefix ;
var SYNC_CALCULATION_LIMIT = Handsontable . plugins . autoRowSize . sync_calculation_limit ; var calculation_step:==:handsontable . plugins . autoRowSize . calculation_step ;
var regex_allowed = S . regex_allowed ; var i:==:find ( ' \n ' ) , ret ;
var includeZero = this . attributes _ . getForAxis ( ' includeZero ' , i ) ; var independentTicks:==:this . attributes _ . getForAxis ( ' independentTicks ' , i ) ;
var reactFiberCommitWork = require ( ' reactFiberCommitWork ' ) ; var reactFiberHostContext:==:require ( ' reactFiberHostContext ' ) ;
var defineProperty = object . defineProperty ; var getOwnPropertyNames:==:object . getOwnPropertyNames ;
var fs = require ( ' fs ' ) ; var browserify:==:require ( ' browserify ' ) ;
var data = dataA . slice ( ) ; var length:==:dataB . length ;
var texture = runtime . gltf . textures [ textureInfo . index ] ; var texCoord:==:textureInfo . texCoord  |  |  0 ;
var validator = require ( ' validator ' ) ; var winston:==:require ( ' winston ' ) ;
var container = updates . container ; var dropDown:==:updates . dropDown ;
var a = ( this . tubularSegments + 1 ) * j + i - 1 ; var b:==:( this . tubularSegments + 1 ) * ( j - 1 ) + i - 1 ;
var Plugin = imports . Plugin ; var ui:==:imports . ui ;
var selectValue = _ ref . selectValue ; var valueArray:==:_ ref . valueArray ;
var sub = stdlib . Atomics . sub ; var fround:==:stdlib . Math . fround ;
var x = this . dragOffset . x + e . pagex ; var y:==:this . dragOffset . y + e . pagey ;
var data = this . data ; var Shader:==:shaders [ shaderName ] & & shaders [ shaderName ] . shader ;
var radius = parseFloat ( e . radius ) ; var distance:==:parseFloat ( e . distance ) ;
var nodemon = require ( ' gulp - nodemon ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var each = zrUtil . each ; var map:==:zrUtil . map ;
var checkFunc = $ . isFunction ( options . checkFunc ) ? options . checkFunc : null ; var rangeFunc:==:$ . isFunction ( options . rangeFunc ) ? options . rangeFunc : null ;
var assert = require ( ' assert ' ) ; var cst:==:require ( ' cst ' ) ;
var style = _ props . style ; var textareaStyle:==:_ props . textareaStyle ;
var operatorNode = math . expression . node . operatorNode ; var assignmentNode:==:math . expression . node . assignmentNode ;
var path = require ( ' path ' ) . join ( my . session . session_id ( ) , src , args . path ) ; var payload:==:args . payload  |  |  null ;
var p = particle . position ; var n:==:this . options . normal ;
var removedObjects = this . _ removedObjects ; var removed:==:removedObjects . values ;
var flow = this . flow _ ; var executor:==:this . executor _ ;
var matchesQuery = queryTools . matchesQuery ; var item:==:parse . object . extend ( ' item ' ) ;
var newer = require ( ' gulp - newer ' ) ; var panini:==:require ( ' panini ' ) ;
var getAccessor = traceur . syntax . trees . getAccessor ; var nullTree:==:traceur . syntax . trees . nullTree ;
var win = plt . win ( ) ; var clientTop:==:ele . clientTop  |  |  body . clientTop  |  |  0 ;
var image = self . image ; var rotate:==:image . rotate ;
var title = document . getElementById ( ' title - si - sl ' ) ; var screen:==:document . getElementById ( ' si - sl - screen ' ) ;
var proc = imports . proc ; var auth:==:imports . auth ;
var getUnicodeRangeFor = coreUnicode . getUnicodeRangeFor ; var mapSpecialUnicodeValues:==:coreUnicode . mapSpecialUnicodeValues ;
var ceil = stdlib . Math . ceil ; var floor:==:stdlib . Math . floor ;
var contentBlock = require ( ' contentBlock ' ) ; var contentState:==:require ( ' contentState ' ) ;
var settings = this . settings ; var data:==:this . data ;
var container = angular . element ( parent [ 0 ] . querySelector ( ' . md - dialog - container ' ) ) ; var dialog:==:parent . find ( ' md - dialog ' ) ;
var root = convertPath ( options . root ) ; var args:==:options . args ;
var dispatch = _ props . dispatch ; var todos:==:_ props . todos ;
var isFullScreen = appWindow & & appWindow . isFullScreen ( ) ; var container:==:this . elements . containerElement ;
var i d = options . i d ; var mockOpenClose:==:options . mockOpenClose ;
var currentTarget = $ ( e . currentTarget ) ; var action:==:currentTarget . data ( ' action ' ) ;
var events = require ( ' analytics - events ' ) ; var fmt:==:require ( ' fmt ' ) ;
var method = options . method  |  |  ' GET ' ; var headers:==:options . headers  |  |  ;
var inputTimeScale = track . inputTimeScale ; var initpts:==:this . _ initpts ;
var dynCall_viiiiii = Module [ ' dynCall_viiiiii ' ] = asm [ ' dynCall_viiiiii ' ] ; var dynCall_iii:==:Module [ ' dynCall_iii ' ]    asm [ ' dynCall_iii ' ] ;
var fs = require ( ' fs ' ) ; var yaml:==:require ( ' js - yaml ' ) ;
var model = this . _ model ; var config:==:this . _ config ;
var precision = config . precision + ( Math . log ( n . toNumber ( ) )  |  0 ) ; var big:==:type . bigNumber . clone ( precision : precision ) ;
var repeat = motionArgs . repeat+ ( motionArgs . repeatOffset |  | 0 ) ; var line:==:motionArgs . forward ? cur . line + repeat : cur . line - repeat ;
var h = ref . h ; var s:==:ref . s ;
var vm = require ( ' vm ' ) ; var exists:==:fs . exists  |  |  require ( ' path ' ) . exists ;
var fs = require ( ' fs ' ) ; var pg:==:require ( ' pg ' ) ;
var walletId = wallet . credentials . walletId ; var config:==:configService . getSync ( ) . wallet . settings ;
var Y = cs . MYA * AGR + cs . MYB * BGG + cs . MYC * CGB ; var Z:==:cs . MZA * AGR + cs . MZB * BGG + cs . MZC * CGB ;
var editor = tab . editor ; var string:==:JSON . stringify ( event . data ) ;
var lineNumber = options . lineNumber ; var actual:==:options . actual ;
var rimraf = require ( ' rimraf ' ) ; var merge:==:require ( ' merge - stream ' ) ;
var pre = detail . find ( ' . pre ' ) ; var next:==:detail . find ( ' . next ' ) ;
var pdfPage = this . pdfPage ; var viewport:==:this . viewport ;
var literalToken = traceur . syntax . literalToken ; var sourcePosition:==:traceur . util . sourcePosition ;
var columnSizeAndPositionManager = _ ref . columnSizeAndPositionManager ; var columnStartIndex:==:_ ref . columnStartIndex ;
var screenTop = _ window . screenTop  |  |  _ window . screeny  |  |  0 ; var scrollLeft:==:_ document . body . scrollLeft + _ document . documentElement . scrollLeft ;
var rttc = require ( ' rttc ' ) ; var eachRecordDeep:==:require ( ' waterline - utils ' ) . eachRecordDeep ;
var Subscribable = require ( ' Subscribable ' ) ; var View:==:reactNative ;
var login = element ( by . i d ( ' login ' ) ) ; var logout:==:element ( by . i d ( ' logout ' ) ) ;
var karma = require ( ' karma ' ) ; var browserify:==:require ( ' browserify ' ) ;
var c9 = imports . c9 ; var ace:==:imports . ace ;
var documentFragment = scope . wrappers . documentFragment ; var elementFromPoint:==:scope . elementFromPoint ;
var sum64 = utils . sum64 ; var sum64_hi:==:utils . sum64_hi ;
var mqtt = require ( ' mqtt ' ) ; var events:==:require ( ' events ' ) ;
var newValue = event . detail . newValue ; var groupedItems:==:this . _ groupedItems ;
var xa = pointData . xa ; var ya:==:pointData . ya ;
var nodeFieldCount = this . _ nodeFieldCount ; var dominatorsTree:==:this . _ dominatorsTree ;
var o = this . _ options ; var w:==:Math . min ( Math . max ( obj . width , o . minWidth ) , o . maxWidth ) ;
var listController = _ jsControllerListController [ ' default ' ] ; var uploadView:==:_ jsViewUploadViewJs [ ' default ' ] ;
var rowCoords = this . rowCoords ; var colCoords:==:this . colCoords ;
var axi = gd . _ fullLayout [ updates [ updatedAxisIds [ i ] ] . axisName ] ; var to:==:updates [ updatedAxisIds [ i ] ] . to ;
var Schema = require ( ' warehouse ' ) . Schema ; var util:==:require ( ' hexo - util ' ) ;
var el = this . $ element ; var input:==:document . createElement ( ' input ' ) ;
var date = this . _ validate ( year , this . minMonth , this . minDay , main . local . invalidYear ) ; var year:==:this . _ t2gYear ( date . year ( ) ) ;
var valueKey = _ ref . valueKey ; var onOptionRef:==:_ ref . onOptionRef ;
var instance = options . instance ; var updatable:==:options . updatable ;
var _ strncasecmp = Module [ ' _ strncasecmp ' ] = asm [ ' _ strncasecmp ' ] ; var _ strcat:==:Module [ ' _ strcat ' ]    asm [ ' _ strcat ' ] ;
var layout = imports . layout ; var workspace:==:imports [ ' collab . workspace ' ] ;
var x = gridGeo . vertices [ i ] . position . x ; var y:==:gridGeo . vertices [ i ] . position . y ;
var models = _ _ alloyId11 . models ; var len:==:models . length ;
var c9 = imports . c9 ; var async:==:require ( ' async ' ) ;
var git = require ( ' gulp - git ' ) ; var fs:==:require ( ' fs ' ) ;
var touchableWithoutFeedback = require ( ' touchableWithoutFeedback ' ) ; var scrollListener:==:require ( ' nativeModules ' ) . scrollListener ;
var interactionManager = require ( ' interactionManager ' ) ; var react:==:require ( ' react ' ) ;
var min = cfg . min  |  |  0 ; var max:==:cfg . max  |  |  1 ;
var dynCall_viiiiid = Module [ ' dynCall_viiiiid ' ] = asm [ ' dynCall_viiiiid ' ] ; var dynCall_v:==:Module [ ' dynCall_v ' ]    asm [ ' dynCall_v ' ] ;
var createEmptyArgumentList = parseTreeFactory . createEmptyArgumentList ; var createIdentifierExpression:==:parseTreeFactory . createIdentifierExpression ;
var PROPERTY_SIGNATURE = ' PROPERTY_SIGNATURE ' ; var PROPERTY_VARIABLE_DECLARATION:==:' PROPERTY_VARIABLE_DECLARATION ' ;
var forward = laneDirections . forward ; var backward:==:laneDirections . backward ;
var t = this . graph . view . translate ; var s:==:this . graph . view . scale ;
var a = new String ( ' a ' ) ; var b:==:new String ( ' b ' ) ;
var prune = params . prune = = = true ; var dropOverride:==:params . dropOverride      true ;
var ARGUMENT_LIST = ' ARGUMENT_LIST ' ; var ARRAY_COMPREHENSION:==:' ARRAY_COMPREHENSION ' ;
var exec = child_process . exec ; var fs:==:require ( ' fs - extra ' ) ;
var identifierToken = traceur . syntax . identifierToken ; var literalToken:==:traceur . syntax . literalToken ;
var crypto = require ( ' crypto ' ) ; var request:==:require ( ' request ' ) ;
var failure = data . failure ; var snapshot:==:data . snapshot ;
var t = $ ( target ) . offset ( ) . top ; var h:==:$ wrapper . height ( ) ;
var encode = encodeuriComponent ; var decode:==:decodeuriComponent ;
var reactBrowserEventEmitter = require ( ' reactBrowserEventEmitter ' ) ; var reactdomFiberInput:==:require ( ' reactdomFiberInput ' ) ;
var buffers = gltf . buffers ; var bufferViews:==:gltf . bufferViews ;
var index = scope . $ index ; var key:==:hasOwn ( scope , ' $ key ' ) & & scope . $ key ;
var lightBluea400 = exports . lightBluea400 = ' # 00b0ff ' ; var lightBluea700:==:exports . lightBluea700    ' # 0091ea ' ;
var semver = require ( ' semver ' ) ; var readline:==:require ( ' readline ' ) ;
var tabs = document . getElementById ( ' tabs ' ) ; var tabPages:==:document . getElementById ( ' tabPages ' ) ;
var dataItems = that . _ dataItems ; var values:==:that . _ values ;
var data = $ . data ( this , ' pp - rwdrag ' ) ; var el:==:data . options . el [ 0 ] ;
var bindShapeMatrix = node . bindShapeMatrix ; var inverseBindMatrices:==:node . inverseBindMatrices ;
var uniforms = separateDynamic ( options . uniforms  |  |  ) ; var attributes:==:separateDynamic ( options . attributes  |  |  ) ;
var shadowOffsetx = this . ctx . shadowOffsetx ; var shadowOffsety:==:this . ctx . shadowOffsety ;
var encoding = mesh . encoding ; var indices:==:mesh . indices ;
var x = evaluate ( this . controlPoints [ 0 ] . x , this . controlPoints [ 1 ] . x , t ) ; var y:==:evaluate ( this . controlPoints [ 0 ] . y , this . controlPoints [ 1 ] . y , t ) ;
var Util = sharedUtil . util ; var isArray:==:sharedUtil . isArray ;
var O_TRUNC = constants . O_TRUNC  |  |  0 ; var O_WRONLY:==:constants . O_WRONLY  |  |  0 ;
var basename = path . basename ; var extname:==:path . extname ;
var disableRangeRequests = this . disableRangeRequests ; var cacheExpirationTime:==:this . cacheExpirationTime ;
var cpuSync = options . cpuSync ; var chromeFix:==:options . chromeFix ;
var numberLines = job . numberLines ; var sourceNode:==:job . sourceNode ;
var fs = require ( ' fs - extra ' ) ; var istanbul:==:require ( ' istanbul ' ) ;
var concat = require ( ' gulp - concat ' ) ; var header:==:require ( ' gulp - header ' ) ;
var log = options . log ? ( _ . isFunction ( options . log ) ? options . log : console . log ) : false ; var logPeriod:==:options . logPeriod  |  |  10 ;
var compress = require ( ' compression ' ) ; var cors:==:require ( ' cors ' ) ;
var touchableWithoutFeedback = require ( ' touchableWithoutFeedback ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var l = frustum . left ; var n:==:frustum . near ;
var scrollDirectionVertical = state . scrollDirectionVertical ; var scrollLeft:==:state . scrollLeft ;
var gulp = require ( ' gulp ' ) ; var browserify:==:require ( ' browserify ' ) ;
var mkdirp = require ( ' mkdirp ' ) ; var jsdom:==:require ( ' jsdom ' ) ;
var path = require ( ' path ' ) ; var url:==:require ( ' url ' ) ;
var mtr = cTop . createElement ( ' mtr ' ) ; var mtd:==:cTop . createElement ( ' mtd ' ) ;
var col = db . collection ( ' insert_many_with_generators ' ) ; var r:==:yield col . insertMany ( [ a : 1 , a : 2 ] ) ;
var forEach = angular . forEach ; var isString:==:angular . isString ;
var fs     = require ( ' fs ' ) ; var cli:==:require ( ' cli ' ) ;
var pixel = mapBrowserEvent . pixel ; var map:==:mapBrowserEvent . map ;
var variableDeclarationList = traceur . syntax . trees . variableDeclarationList ; var createArgumentList:==:parseTreeFactory . createArgumentList ;
var pinkA700 = exports . pinkA700 = ' # c51162 ' ; var purple50:==:exports . purple50    ' # f3e5f5 ' ;
var util   = require ( ' util ' ) ; var fs:==:require ( ' fs ' ) ;
var green500 = exports . green500 = ' # 4caf50 ' ; var green600:==:exports . green600    ' # 43a047 ' ;
var eventMixin = hilo . eventMixin ; var matrix:==:hilo . matrix ;
var column = options . column ; var filename:==:options . filename ;
var domRange = api . domRange ; var getBody:==:dom . getBody ;
var cst = require ( ' cst ' ) ; var Parser:==:cst . Parser ;
var length = entryStartTimes . length ; var minimumBoundary:==:this . _ dataProvider . minimumBoundary ( ) ;
var getDaySegmentContainer = t . getDaySegmentContainer ; var formatDates:==:t . calendar . formatDates ;
var React = require ( ' React ' ) ; var recordingModule:==:require ( ' nativeModules ' ) . initialPropsRecordingModule ;
var LINETYPE = Diagram . LINETYPE ; var ARROWTYPE:==:Diagram . ARROWTYPE ;
var strict = options . strict ; var end:==:options . end !    false ;
var config = data . config ; var requireConfig:==:data . requireConfig ;
var TABLE = this . instance . wtTable . table ; var td:==:closestDown ( elem , [ ' td ' , ' th ' ] , table ) ;
var duration = self . _ duration ; var sound:==:self . _ soundById ( i d ) ;
var levels = hls . levels ; var autoLevelCapping:==:hls . autoLevelCapping ;
var adapter = global . adapter ; var fulfilled:==:adapter . fulfilled ;
var shape = this . shape ; var points:==:shape . points ;
var project = options . project ; var installPath:==:options . installPath ;
var LEFT_BRACKET = C . LEFT_BRACKET = 0x3 ; var RIGHT_BRACKET:==:C . RIGHT_BRACKET    0x4 ;
var styleSheet = require ( ' styleSheet ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var path = require ( ' path ' ) ; var jade:==:require ( ' jade ' ) ;
var remaining = + res . headers [ ' x - ratelimit - remaining ' ] ; var reset:==:+ res . headers [ ' x - ratelimit - reset ' ] ;
var normal = Cartesian3 . fromArray ( normals , i ) ; var tangent:==:cartesian3 . fromArray ( tangents , i ) ;
var footer = callbacks . footer . apply ( me , arguments ) ; var afterFooter:==:callbacks . afterFooter . apply ( me , arguments ) ;
var path = binding . path ; var parent:==:path . parentPath ;
var query = searchConfig . query ; var currentMatchedRequestNode:==:this . _ currentMatchedRequestNode ;
var HAS_NATIVE_FULLSCREEN = exports . HAS_NATIVE_FULLSCREEN = hasNativeFullscreen ; var has_webkit_native_fullscreen:==:exports . has_webkit_native_fullscreen    hasWebkitNativeFullScreen ;
var parent = scope . parent ; var child:==:scope . child ;
var realpath = this . realpath = _ . isAbsolute ( self . fullname ) & & _ . exists ( self . fullname ) ? _ ( self . fullname ) : _ . realpathSafe ( self . fullname ) ; var realpathNoExt:==:this . realpathNoExt    self . rest ;
var w = window ; var peerConnection:==:w . mozrtcPeerConnection  |  |  w . webkitrtcPeerConnection ;
var architect = require ( ' architect ' ) ; var optimist:==:require ( ' optimist ' ) ;
var editors = imports . editors ; var commands:==:imports . commands ;
var srcElement = ev . target  |  |  ev . srcElement ; var i d:==:$ ( srcElement ) . attr ( ' data - id ' ) ;
var assertionError = require ( ' assert ' ) . assertionError ; var nodeunit:==:require ( ' nodeunit ' ) ;
var image = set . tiles [ ti ] . image ; var gid:==:set . firstgid + parseInt ( ti , 10 ) ;
var add = numeric . add , mul = numeric . mul , y1,erinf ; var max:==:Math . max , min    Math . min , abs    Math . abs , norminf    numeric . norminf , pow    Math . pow ;
var x = moves [ i ] . start . x ; var y:==:moves [ i ] . start . y ;
var dictionaryPrevCodes = lzwState . dictionaryPrevCodes ; var codeLength:==:lzwState . codeLength ;
var _ im_cancel_last_choice = Module [ ' _ im_cancel_last_choice ' ] = asm [ ' _ im_cancel_last_choice ' ] ; var _ memset:==:Module [ ' _ memset ' ]    asm [ ' _ memset ' ] ;
var toString = objectProto . toString ; var nativeBind:==:reNative . test ( nativeBind    toString . bind ) & & nativeBind ;
var createReactNativeComponentClass = require ( ' createReactNativeComponentClass ' ) ; var reactNativeViewAttributes:==:require ( ' reactNativeViewAttributes ' ) ;
var l = positionBlock . anchor . left ; var b:==:positionBlock . anchor . bottom ;
var n1 = helper . getNode ( ' n1 ' ) ; var n2:==:helper . getNode ( ' n2 ' ) ;
var reactWheelHandler = require ( ' reactWheelHandler ' ) ; var cssVar:==:require ( ' cssVar ' ) ;
var glyph = this . glyphs [ index ] ; var p:==:this . positions [ index ] ;
var x = e . heading . x ; var y:==:e . heading . y ;
var defaults = require ( ' defaults ' ) ; var store:==:require ( ' store . js ' ) ;
var socket   = options . get ( ' socket ' ) ; var template:==:fs . readFileSync ( config . templates . connector , ' utf-8 ' ) ;
var constantNode = math . expression . node . constantNode ; var operatorNode:==:math . expression . node . operatorNode ;
var p = goog . partial ( getFoo , ' hot ' ) ; var b:==:goog . bind ( p , obj , ' dog ' ) ;
var b1 = $ ( ' b1 ' ) ; var b2:==:$ ( ' b2 ' ) ;
var visualMapModel = this . visualMapModel ; var padding:==:formatUtil . normalizeCssArray ( visualMapModel . get ( ' padding ' )  |  |  0 ) ;
var todos = this . get ( ' todos ' ) ; var newTodo:==:this . get ( ' newTodo ' ) ;
var ellipsoid = projection . ellipsoid ; var batchTable:==:primitive . _ batchTable ;
var generate = require ( ' regjsgen ' ) . generate ; var parse:==:require ( ' regjsparser ' ) . parse ;
var offset = this . offset ; var bone:==:slot . bone ;
var realityStartTime = $ ( ' # realityStartTime ' ) . val ( ) ; var realityEndTime:==:$ ( ' # realityEndTime ' ) . val ( ) ;
var styleProperty = context . styleProperty ; var computedStyle:==:context . computedStyle ;
var axes = this . _ axesMap ; var dimensions:==:this . dimensions ;
var children = _ props . children ; var className:==:_ props . className ;
var body = tbody ( ) ; var table:==:this . dom _ . createDom ( ' table ' , null , head , body ) ;
var promise = this . _ promise ; var boundTo:==:promise . _ boundTo ;
var client = require ( ' engine . io - client ' ) ; var connectClient:==:kaefer . connectClient ;
var mouseEvent = registerGenericEvent ( ' mouseEvent ' , uiEvent , mouseEventProto ) ; var focusEvent:==:registerGenericEvent ( ' focusEvent ' , uiEvent , focusEventProto ) ;
var i d = options . i d ; var mode:==:options . mode ;
var icon = icons ; var title:==:titles ;
var gammaInput = renderer . gammaInput ; var gammaOutput:==:renderer . gammaOutput ;
var change = changes [ i ] ; var from:==:offsetPos ( change . from , oldPrev , newPrev ) ;
var bytes = device . bytes ; var delay:==:device . delay ;
var edgeToNodeOffset = this . _ edgeToNodeOffset ; var firstEdgeIndexes:==:this . _ firstEdgeIndexes ;
var undoManager = firepad . undoManager ; var textOperation:==:firepad . textOperation ;
var backgroundExecutionManager = windows . applicationModel . background . backgroundExecutionManager ; var backgroundAccessStatus:==:windows . applicationModel . background . backgroundAccessStatus ;
var width = Base . window . width * . 50  |  0 ; var total:==:runner . total ;
var root = options . root ; var extname:==:options . extname ;
var confirm = imports [ ' dialog . confirm ' ] . show ; var accessControl:==:imports . accessControl ;
var FIELD_NAME = ' FIELD_NAME ' ; var LABEL0:==:' LABEL0 ' ;
var spawn = require ( ' child_process ' ) . spawn ; var chalk:==:require ( ' chalk ' ) ;
var selectableLegendDataPoints = this . selectableLegendDataPoints ; var selectableLabelsDataPoints:==:this . selectableLabelsDataPoints ;
var crc = require ( ' crc ' ) ; var path:==:require ( ' path ' ) ;
var models = _ _ alloyId15 . models ; var len:==:models . length ;
var maindiv = this . maindiv _ ; var i d:==:( maindiv & & maindiv . i d ) ? maindiv . i d : maindiv ;
var object = this . object . toString ( options ) ; var index:==:this . index ? this . index . toString ( options ) : '' ;
var item = event . detail . item ; var filter:==:this . _ filter ;
var callbacks = this . _ callbacks ; var contexts:==:this . _ contexts ;
var v1Sub = v1Subs [ subIdx ]  |  |  '' ; var v2Sub:==:v2Subs [ subIdx ]  |  |  '' ;
var user = msg . user . toLowerCase ( ) ; var text:==:$ scope . query . text . toLowerCase ( ) ;
var user = req . user ; var provider:==:req . query . provider ;
var getUint16 = this . _ getUint16 ; var getUint32:==:this . _ getUint32 ;
var c = Math . cos ( this . cookieAngle * pc . math . deg_to_rad ) ; var s:==:math . sin ( this . cookieAngle * pc . math . deg_to_rad ) ;
var ui = util . Module ( ' ui ' ) ; var assert:==:util . assert ;
var filename = options . filename ; var src:==:options . src ;
var issues = ' issues ' : oData . issues ; var appInfos:==:' appInfos ' : oData . application ;
var component = components [ i ] ; var collisionData:==:this . _ collisionData [ component ] ;
var col = db . collection ( ' remove_many_with_generators ' ) ; var r:==:yield col . insertMany ( [ a : 1 , a : 1 ] ) ;
var generatorComprehensionTransformer = traceur . codegeneration . generatorComprehensionTransformer ; var generatorTransformPass:==:traceur . codegeneration . generatorTransformPass ;
var n3 = new redNode ( i d : ' n3',type : ' abc ' ) ; var n4:==:new redNode ( i d : ' n4',type : ' abc ' ) ;
var x = this . _ tempPoint . x ; var y:==:this . _ tempPoint . y ;
var width = strokeSize . width ; var hl:==:stroke . drawingAttributes . drawAsHighlighter ;
var icon = self . settings . icon ? prefix + ' ico ' + prefix + ' i- ' + self . settings . icon : '' ; var image:==:self . settings . image ? ' style ' background - image : url ( \ '' + self . settings . image + ' \ ' ) ' ' : '' ;
var stiffness = options . stiffness ; var damping:==:options . damping ;
var Person = db . model ( ' gh4284_a ' , personSchema ) ; var blogPost:==:db . model ( ' gh4284_a0 ' , blogPostSchema ) ;
var cropBox = this . cropBox ; var width:==:cropBox . width ;
var instanceLights = data . instanceLights ; var instanceGeometries:==:data . instanceGeometries ;
var iconClassName = _ props . iconClassName ; var onKeyboardFocus:==:_ props . onKeyboardFocus ;
var callButton = document . getElementById ( ' callButton ' ) ; var hangupButton:==:document . getElementById ( ' hangupButton ' ) ;
var terminal = session . terminal ; var rows:==:terminal . rows ;
var item = items [ i ] ; var section:==:sectioned & & this . getSectionName ( item ) ;
var x = lastMotionData . x ; var y:==:lastMotionData . y ;
var functionDeclaration = traceur . syntax . trees . functionDeclaration ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var grid = ignorePlacement ? this . ignoredGrid : this . grid ; var collisionBoxArray:==:this . collisionBoxArray ;
var async = require ( ' async ' ) ; var request:==:require ( ' request ' ) ;
var valueDim = opt . valueDim ; var categoryDim:==:opt . categoryDim ;
var extname = pathFn . extname ( path ) ; var dirname:==:pathFn . dirname ( path ) ;
var criticalOnly = options . criticalOnly ; var skipDetail:==:options . skipDetail ;
var processColor = require ( ' processColor ' ) ; var processTransform:==:require ( ' processTransform ' ) ;
var target = $ ( e . target ) ; var action:==:target . attr ( ' data - action ' ) ;
var path = require ( ' path ' ) ; var cheerio:==:require ( ' cheerio ' ) ;
var depth = options . depth  |  |  options . size  |  |  1 ; var sideOrientation:==:( options . sideOrientation      0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ;
var vertical = font . vertical ; var defaultvMetrics:==:font . defaultvMetrics ;
var transaction = db . transaction ( DBOS_BOOKMARKS ) ; var objectStore:==:transaction . objectStore ( dbos_bookmarks ) ;
var b = pixel . b ; var a:==:pixel . a ;
var cropBox = this . cropBox ; var cropped:==:this . cropped & & cropBox ;
var foo = foo : ' foo ' ; var bar:==:bar : ' bar ' ;
var s = this . searchText & & this . searchText . toLowerCase ( ) ; var f:==:$ . isEmptyObject ( this . filterColumns ) ? null : this . filterColumns ;
var async = require ( ' async ' ) ; var nconf:==:require ( ' nconf ' ) ;
var integrations = opts . integrations  |  |  ; var providers:==:opts . providers  |  |  ;
var isMouseDown = this . instance . view . isMouseDown ( ) ; var isMeta:==:event ? ( 0 , _ unicode . isMetaKey ) ( event . keyCode ) : false ;
var dynCall_viiiiiii = Module [ ' dynCall_viiiiiii ' ] = asm [ ' dynCall_viiiiiii ' ] ; var dynCall_viiiii:==:Module [ ' dynCall_viiiii ' ]    asm [ ' dynCall_viiiii ' ] ;
var sin = Math . sin ; var cos:==:Math . cos ;
var sdp = maybePreferAudioSendCodec ( insdp ) ; var sdp:==:maybePreferVideoSendCodec ( insdp ) ;
var axisTick = this . get ( ' axisTick ' ) ; var axisLabel:==:this . get ( ' axisLabel ' ) ;
var inherit = _ dereq _ ( ' component - inherit ' ) ; var debug:==:_ dereq _ ( ' debug ' ) ( ' engine . io - client : polling - xhr ' ) ;
var gulp = require ( ' gulp ' ) ; var path:==:require ( ' path ' ) ;
var needInfo_end = $ ( ' . needInfo_end ' ) ; var needInfo_text:==:$ ( ' . needInfo_text ' ) ;
var isFunction = _ _ dependency3 _ _ . isFunction ; var isArray:==:_ _ dependency3 _ _ . isArray ;
var descending = ' descending ' in opts ? opts . descending : false ; var limit:==:' limit ' in opts ? opts . limit : -1 ;
var title = tokens [ idx ] . title ? ( ' title= ' ' + escapeHtml ( replaceEntities ( tokens [ idx ] . title ) ) + ' ' ' ) : '' ; var target:==:tokens [ idx ] . target ? ( ' target ' ' + escapeHtml ( tokens [ idx ] . target ) + ' ' ' ) : '' ;
var $ button = event . data . $ button ; var button:==:event . data . button ;
var max = options . max_font  |  |  20 ; var orderby:==:options . orderby  |  |  ' name ' ;
var o2 = foo : foo2 , that2 : ' that2 ' ; var o3:==:foo : foo3 , that3 : ' that3 ' ;
var maxNodeId = nodeFilter . maxNodeId ; var allocationNodeId:==:nodeFilter . allocationNodeId ;
var ptr = g . _ ptr ; var size:==:g . _ size ;
var debug = require ( ' debug ' ) ( ' marionette - js - runner : hostmanager ' ) ; var prettyjson:==:require ( ' prettyjson ' ) ;
var log = pouchdbUtils . guardedConsole . bind ( null , ' log ' ) ; var isArray:==:array . isArray ;
var width = this . width = options . width  |  |  1 ; var height:==:this . height    options . height  |  |  1 ;
var draw    = compat ( ' sEcho ' ,     ' draw ' ) ; var recordsTotal:==:compat ( ' iTotalRecords ' ,   ' recordsTotal ' ) ;
var editor = this . editor ; var $ elem:==:this . $ elem ;
var terrainCache = this . _ terrainCache ; var metadata:==:this . _ metadata ;
var x = cmd . x , y = cmd . y ; var radius:==:cmd . radius ;
var key = this . key ; var outlineType:==:this . outlineType ;
var g = mixins . marginConvention ( my , svg ) ; var line:==:d3 . svg . line ( ) . interpolate ( ' basis ' ) ;
var DISABLE_DEPTH_DISTANCE = Billboard . DISABLE_DEPTH_DISTANCE ; var NUMBER_OF_PROPERTIES:==:Billboard . NUMBER_OF_PROPERTIES ;
var closest = closestPointOnSegment2 ( p . x , p . y , v0x , v0y , v1x , v1y ) ; var dist:==:vdist ( p , closest ) ;
var skew = interp ( fromM . skew , toM . skew , f ) ; var perspective:==:interp ( fromM . perspective , toM . perspective , f ) ;
var head = ( document . getElementsByTagName ( ' head ' ) ) [ 0 ] ; if ( ! head ) head = document . bodyvar script:==:document . createElement ( ' script ' ) ;
var createFunctionDeclaration = traceur . codegeneration . parseTreeFactory . createFunctionDeclaration ; var createIdentifierExpression:==:traceur . codegeneration . parseTreeFactory . createIdentifierExpression ;
var utils = require ( ' utils ' ) ; var esomin:==:require ( ' esomin ' ) ;
var guardBits = quantizationParameters . guardBits ; var segmentationSymbolUsed:==:codingStyleParameters . segmentationSymbolUsed ;
var caller = $ super . caller ; var nom:==:caller . nom ;
var data = $ . data ( current . el , ' pp - rwdrag ' ) ; var left:==:( current . oleft + ( e . pageX  |  |  e . clientX ) - current . ox ) ;
var collection = db . collection ( ' test_should_throw_error_if_serializing_function ' ) ; var func:==:function ( ) return 1 ;
var tagName = tagNameFromBlobType ( blobType ) ; var region:==:' region ' image ' ' ;
var metaKey = defaultValue ( options . metaKey , false ) ; var deltax:==:defaultValue ( options . deltax , 0 ) ;
var Panel = imports . Panel ; var tabManager:==:imports . tabManager ;
var camera = this . camera ; var system:==:this . system ;
var form = document . querySelector ( ' form ' ) ; var textarea:==:form . querySelector ( ' textarea ' ) ;
var script = debuggerModelLocation . script ( ) ; var uiSourceCode:==:this . _ uiSourceCodeForScriptId . get ( script . scriptId ) ;
var deleteListener = eventPluginHub . deleteListener ; var getNode:==:reactdomComponentTree . getNodeFromInstance ;
var Keywords = traceur . syntax . Keywords ; var tokenType:==:traceur . syntax . tokenType ;
var wtViewport = wot . wtViewport ; var totalRows:==:wot . getSetting ( ' totalRows ' ) ;
var method = msg . data . method ; var args:==:msg . data . args  |  |  [ ] ;
var ul = parent . getElementsByTagName ( ' ul ' ) [ 0 ] ; var display:==:ul . style . display ;
var test = imports [ ' plugin . test ' ] ; var myplugin:==:imports . myplugin ;
var Image = require ( ' Image ' ) ; var colorPropType:==:require ( ' colorPropType ' ) ;
var reactNativeViewAttributes = require ( ' reactNativeViewAttributes ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var draftRemovableWord = require ( ' draftRemovableWord ' ) ; var editorState:==:require ( ' editorState ' ) ;
var required = element ( by . binding ( ' form . input . $ error . required ' ) ) ; var model:==:element ( by . binding ( ' model ' ) ) ;
var eventListener = require ( ' eventListener ' ) ; var cancelAnimationFramePolyfill:==:require ( ' cancelAnimationFramePolyfill ' ) ;
var arrowHead = math . max ( 0 , math . min ( math . min ( bounds . height , bounds . width ) - parseFloat ( mxUtils . getValue ( this . state . style , ' dx ' , this . dx ) ) , parseFloat ( mxUtils . getValue ( this . state . style , ' arrowHead ' , this . arrowHead ) ) ) ) ; var dx:==:math . max ( 0 , math . min ( math . min ( bounds . width , bounds . height ) - arrowHead , parseFloat ( mxUtils . getValue ( this . state . style , ' dx ' , this . dx ) ) ) ) ;
var edgeSettings = tablixUtils . edgeSettings ; var edgeType:==:tablixUtils . edgeType ;
var mkdirp = require ( ' mkdirp ' ) ; var winston:==:require ( ' winston ' ) ;
var y = defaultValue ( viewport . y , 0 . 0 ) ; var width:==:defaultValue ( viewport . width , 0 . 0 ) ;
var input = inputs [ i ] ; var source:==:sources [ input . source ] ;
var stringify = _ _ webpack_require _ _ ( 11 ) . stringify ; var getSafeProperty:==:_ _ webpack_require _ _ ( 17 ) . getSafeProperty ;
var divisor = divisors [ i ] ; var div:==:int32Div ( divisor ) ;
var titleText = powerbi . dataViewObject . getValue ( this . legendObjectProperties , visuals . legendProps . titleText , this . layerLegendData ? this . layerLegendData . title : '' ) ; var labelColor:==:powerbi . dataViewObject . getValue ( this . legendObjectProperties , visuals . legendProps . labelColor , visuals . legendData . defaultLegendLabelFillColor ) ;
var c = numberOfVertices + ( ix + 1 ) + gridx1 * ( iy + 1 ) ; var d:==:numberOfVertices + ( ix + 1 ) + gridx1 * iy ;
var winston = require ( ' winston ' ) ; var passport:==:require ( ' passport ' ) ;
var incompat = new CS . Solver . Step ( stepBaseName + ' _ incompat ' ) ; var major:==:new cs . solver . step ( stepBaseName + ' _ major ' ) ;
var graph = this . editor . graph ; var model:==:graph . model ;
var util = require ( ' util ' ) ; var assert:==:require ( ' assert - plus ' ) ;
var qs = require ( ' qs ' ) ; var querystring:==:require ( ' querystring ' ) ;
var editor   = mouseHandler . editor ; var headingLayer:==:editor . renderer . $ headingLayer ;
var diagram = this . diagram ; var font:==:this . font _ ;
var params = paramsFromOptions ( options ) ; var salt:==:( options & & options . salt )  |  |  random . secret ( ) ;
var design = ICAL . design ; var helpers:==:ICAL . helpers ;
var path = require ( ' path ' ) ; var through2:==:require ( ' through2 ' ) ;
var form = that . _ send_form ; var area:==:that . _ send_area ;
var E2E = ! ! options . E2E ; var DEV:==:! ! options . DEV ;
var Parser = coreParser . parser ; var chunkedStream:==:coreChunkedStream . chunkedStream ;
var dateTimeSymbolsType = goog . require ( ' goog . i18n . dateTimeSymbolsType ' ) ; var interval:==:goog . require ( ' goog . date . interval ' ) ;
var group = this . groups [ groupId ] ; var foreground:==:group . dom . foreground ;
var n = + conf . n ; var p:==:path . win32 ;
var fontColor = new visuals . colorHelper ( colors , properties [ ' fontColor ' ] , defaultSettings . fontColor ) . getColorForMeasure ( objects , ' ' ) ; var show:==:powerbi . dataViewObjects . getValue ( objects , properties [ ' show ' ] , defaultSettings . show ) ;
var snap = entry . indexOf ( ' snap ' ) > = 0 ; var hover:==:entry . indexOf ( ' hover ' ) >   0 ;
var onTouchTap = props . onTouchTap ; var prepareStyles:==:muiTheme . prepareStyles ;
var helper = this . helper ; var form:==:this . getBoneTransform ( ) ;
var http = require ( ' http ' ) ; var findFreePort:==:require ( ' netutil ' ) . findFreePort ;
var rowCount = _ ref3 . rowCount ; var startIndex:==:_ ref3 . startIndex ;
var chat = imports . chat ; var timeslider:==:imports . timeslider ;
var screenLeft = _ window . screenLeft  |  |  _ window . screenx  |  |  0 ; var screenTop:==:_ window . screenTop  |  |  _ window . screeny  |  |  0 ;
var x = this . sprite . x ; var y:==:this . sprite . y ;
var maxSatisfying = semver . maxSatisfying ; var resourceNotFoundError:==:errors . resourceNotFoundError ;
var dir = path . dirname ( filepath ) ; var basename:==:path . basename ( filepath ) ;
var nameMap = monthLabel . get ( ' nameMap ' ) ; var margin:==:monthLabel . get ( ' margin ' ) ;
var fs = require ( ' fs ' ) ; var dirname:==:path . dirname ;
var Text = require ( ' Text ' ) ; var textInput:==:require ( ' textInput ' ) ;
var leave = data . leave ; var afterLeave:==:data . afterLeave ;
var element = info . element ; var data:==:info . data ;
var Plugin = imports . Plugin ; var settings:==:imports . settings ;
var order = $ scope . order ; var pair:==:order . currency_pair ;
var props = data . props ; var domProps:==:data . domProps ;
var techniques = gltf . techniques ; var uniformMaps:==:model . _ uniformMaps ;
var Panel = imports . Panel ; var commands:==:imports . commands ;
var event = track . event ( ) ; var revenue:==:track . revenue ( ) ;
var isNW = platformInfo . isnw ; var isCordova:==:platformInfo . isCordova ;
var abiword = exports . abiwordAvailable ( ) ; var soffice:==:exports . sofficeAvailable ( ) ;
var start = document . getElementById ( ' start ' ) ; var stop:==:document . getElementById ( ' stop ' ) ;
var indicesBuffer = this . indicesBuffer ; var textures:==:this . textures _ ;
var a = x : ' a ' , y : ' c ' ; var b:==:x : ' b ' , z : 'd ' ;
var concat = require ( ' concat - stream ' ) ; var temp:==:require ( ' temp ' ) ;
var MNC_SETTINGS_KEY = apnConst . mnc_settings_key ; var apn_props:==:apnConst . apn_props ;
var digits = opts ( ' digitsAfterDecimal ' ) ; var maxNumberWidth:==:opts ( ' maxNumberWidth ' ) ;
var navigate = imports . navigate ; var save:==:imports . save ;
var repo = file . meta . repo ; var ref:==:file . meta . ref ;
var attr = xmlNode . attributes [ i ] ; var value:==:attr . value ;
var fontSize = current . fontSize ; var texthScale:==:current . texthScale ;
var assert = require ( ' assert ' ) ; var validator:==:require ( ' validator ' ) ;
var moment = require ( ' moment ' ) ; var assign:==:require ( ' object - assign ' ) ;
var run = imports . run ; var util:==:imports . util ;
var file = this . file ; var body:==:this . body ;
var rename = require ( ' gulp - rename ' ) ; var postcss:==:require ( ' gulp - postcss ' ) ;
var bytesPerSample = options . bytesPerSample  |  |  defaults . bytesPerSample ; var numChannels:==:options . numChannels  |  |  defaults . numChannels ;
var weight = dom . weight . value ; var rotation:==:parseFloat ( dom . rotation . value ) ;
var cache = ref . cache ; var shouldPreload:==:ref . shouldPreload ;
var createUndefinedExpression = parseTreeFactory . createUndefinedExpression ; var createVariableDeclaration:==:parseTreeFactory . createVariableDeclaration ;
var t = CHTML . TEX . rule_thickness ; var h:==:( sbox |  | pbox ) . h , d    ( Sbox |  | Pbox ) . d ;
var experimental = imports [ ' preferences . experimental ' ] ; var pluginManager:==:imports . pluginManager ;
var IMAGE_INDEX_INDEX = Billboard . IMAGE_INDEX_INDEX = 7 ; var COLOR_INDEX:==:Billboard . COLOR_INDEX    8 ;
var doc = _ i d : ' foodoc ' ; var doc2:==:_ i d : ' foodoc2 ' ;
var orange50 = exports . orange50 = ' # fff3e0 ' ; var orange100:==:exports . orange100    ' # ffe0b2 ' ;
var size = context . size ; var opacity:==:context . opacity ;
var toolbar1 = name : ' test - toolbar1 ' ; var toolbar2:==:name : ' test - toolbar2 ' ;
var editor = this . editor ; var $ textElem:==:editor . $ textElem ;
var addrs = alladdrs ( req , trust ) ; var addr:==:addrs [ addrs . length - 1 ] ;
var down = $ ( this ) . hasClass ( ' th - sort - down ' ) ; var url:==:$ ( this ) . data ( ' url ' ) ;
var M = CMD . M ; var C:==:CMD . C ;
var operatorNode = math . expression . node . operatorNode ; var rangeNode:==:math . expression . node . rangeNode ;
var element = this . element [ 0 ] ; var content:==:this . content [ 0 ] ;
var r = new Phaser . Rectangle ( 0 , 0 , cellWidth , cellHeight ) ; var w:==:( width * cellWidth ) ;
var calculateMD5 = coreCrypto . calculatemd5 ; var operatorList:==:coreEvaluator . operatorList ;
var lookup = FS . lookupPath ( path , follow : ! dontFollow ) ; var node:==:lookup . node ;
var ensurePositiveDelayProps = require ( ' ensurePositiveDelayProps ' ) ; var processColor:==:require ( ' processColor ' ) ;
var getSnapMinutes = t . getSnapMinutes ; var getSlotContainer:==:t . getSlotContainer ;
var dynCall_iiiiiii = Module [ ' dynCall_iiiiiii ' ] = asm [ ' dynCall_iiiiiii ' ] ; var dynCall_iiiii:==:Module [ ' dynCall_iiiii ' ]    asm [ ' dynCall_iiiii ' ] ;
var type = res . headers [ ' content - type ' ] ; var extension:==:mime . extension ( type ) ;
var subarg = require ( ' subarg ' ) ; var glob:==:require ( ' glob ' ) ;
var a = SIMD . Float32x4 ( 8 . 0 , 4 . 0 , 2 . 0 , -2 . 0 ) ; var c:==:SIMD . Float32x4 . reciprocalApproximation ( a ) ;
var binding = this . transformAny ( tree . binding ) ; var catchBody:==:this . transformAny ( tree . catchBody ) ;
var htmlContentElement = scope . wrappers . htmlContentElement ; var htmlShadowElement:==:scope . wrappers . htmlShadowElement ;
var limit = obj . limit ; var ratio:==:Math . ceil ( obj . ratio ) ;
var argv = require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ; var crypto:==:require ( ' crypto ' ) ;
var cli     = require ( ' cli ' ) ; var path:==:require ( ' path ' ) ;
var fixedDataTableRow = require ( ' fixedDataTableRow . react ' ) ; var fixedDataTableScrollHelper:==:require ( ' fixedDataTableScrollHelper ' ) ;
var parent = firstNode . parent ; var editor:==:firstNode . editor ;
var max = Math . max ; var min:==:Math . min ;
var movementX = e . movementX  |  |  e . mozMovementx  |  |  0 ; var movementy:==:e . movementy  |  |  e . mozMovementy  |  |  0 ;
var reviver = math . json . reviver ; var Range:==:math . type . Range ;
var $ tip = $ ( this . $ tip ) ; var e:==:$ . Event ( ' hide . bs . ' + this . type ) ;
var newValue = context . newValue ; var entityManager:==:entityAspect . entityManager ;
var Unit = math . type . Unit ; var Fraction:==:math . type . Fraction ;
var moduleInfo = this . moduleInfoMap _ [ moduleId ] ; var d:==:new goog . async . deferred ( ) ;
var breakpointItems = this . _ storage . breakpointItems ( this . _ sourceFileId ( uiSourceCode ) ) ; var provisionalBreakpoints:==:this . _ provisionalBreakpointsForSourceFileId ( sourceFileId ) ;
var outlineColor = property . getValueOrClonedDefault ( rectangle . outlineColor , time , color . black , scratchColor ) ; var outlineWidth:==:property . getValueOrDefault ( rectangle . outlineWidth , time , 1 . 0 ) ;
var moment = require ( ' moment - timezone ' ) ; var minimatch:==:require ( ' minimatch ' ) ;
var dynCall_dii = Module [ ' dynCall_dii ' ] = asm [ ' dynCall_dii ' ] ; var dynCall_i:==:Module [ ' dynCall_i ' ]    asm [ ' dynCall_i ' ] ;
var adapter = global . adapter ; var pending:==:adapter . pending ;
var parent = options . parent ; var renderer:==:options . renderer ;
var UNARY_EXPRESSION = ' UNARY_EXPRESSION ' ; var UNION_TYPE:==:' UNION_TYPE ' ;
var progress = e . progress ; var callback:==:e . callback ;
var caseSensitive = this . state . caseSensitive ; var phraseSearch:==:this . state . phraseSearch ;
var mode = renderSettings . mode ; var el:==:renderSettings . el ;
var entryPoint = findScript ( entryPointName ) ; var base:==:entryPoint . basePath ;
var elementFromPoint = scope . elementFromPoint ; var getInnerhtml:==:scope . getInnerhtml ;
var environmentState = scene . _ environmentState ; var passes:==:scene . _ frameState . passes ;
var password = elements . password . value ; var identity:==:elements . identity . value ;
var render = ref . render ; var template:==:ref . template ;
var pkg = require . modules [ pkgfile ] ( ) ; var b:==:pkg . browserify ;
var Warning = Errors . Warning ; var commandResult:==:errors . commandResult ;
var gulp = require ( ' gulp ' ) ; var newer:==:require ( ' gulp - newer ' ) ;
var ReactDOM = require ( ' ReactDOM ' ) ; var reactTestUtils:==:require ( ' reactTestUtils ' ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var schema:==:mongoose . schema ;
var activityIndicator = require ( ' activityIndicator ' ) ; var react:==:require ( ' react ' ) ;
var margin = this . layout . margin ; var width:==:viewport . width - ( margin . left + margin . right ) ;
var col = grid . columns [ 0 ] ; var row:==:grid . rows [ 1 ] ;
var grey100 = exports . grey100 = ' # f5f5f5 ' ; var grey200:==:exports . grey200    ' # eeeeee ' ;
var domPropertyOperations = require ( ' domPropertyOperations ' ) ; var reactControlledValuePropTypes:==:require ( ' reactControlledValuePropTypes ' ) ;
var sky = skyLayer . create ( 0 , 0 , ' sky ' ) ; var cloud0:==:cloudLayer . create ( 200 , 120 , ' cloud0 ' ) ;
var attrs = this . attrs ; var outputs:==:this . info . outputs ;
var node = e . node ; var value:==:e . value ;
var inherits = require ( ' util ' ) . inherits ; var Stream:==:require ( ' stream ' ) . Stream ;
var Platform = require ( ' Platform ' ) ; var rctDeviceEventEmitter:==:require ( ' rctDeviceEventEmitter ' ) ;
var width = ( u1 - u0 ) * texture . width ; var height:==:( v1 - v0 ) * texture . height ;
var reactdomFiberComponent = require ( ' reactdomFiberComponent ' ) ; var reactdomFrameScheduling:==:require ( ' reactdomFrameScheduling ' ) ;
var length = names . length ; var allowPicking:==:primitive . allowPicking ;
var a = foo : 1 , cat1 : ' ginger ' ; var b:==:baz : 2 , cat2 : ' phoebe ' ;
var fstream = require ( ' fstream ' ) ; var zlib:==:require ( ' zlib ' ) ;
var appName = this . context . appName ; var orgName:==:this . context . orgName ;
var MODULE_REQUIRE = parseTreeType . module_require ; var variable_statement:==:parseTreeType . variable_statement ;
var Bar = docSet . getByLongname ( ' bar ' ) [ 0 ] ; var socket:==:docSet . getByLongname ( 's . socket ' ) [ 0 ] ;
var cartOrder = dataservice . cartOrder ; var draftOrder:==:dataservice . draftOrder ;
var c9 = imports . c9 ; var menus:==:imports . menus ;
var NAME = 7 ; var COMMENT:==:8 ;
var yaw = parseFloat ( e . yaw ) ; var radius:==:parseFloat ( e . radius ) ;
var moduleRequireVisitor = traceur . codegeneration . module . moduleRequireVisitor ; var canonicalizeUrl:==:traceur . util . canonicalizeUrl ;
var models = _ _ alloyId5 . models ; var len:==:models . length ;
var helpers = Rx . helpers ; var chai:==:parent . chai ;
var insertFragmentIntoContentState = require ( ' insertFragmentIntoContentState ' ) ; var insertTextIntoContentState:==:require ( ' insertTextIntoContentState ' ) ;
var scrollHeight = $ yearUl . get ( 0 ) . scrollHeight ; var scrollTop:==:$ yearUl . scrollTop ( ) ;
var autoprefixer = require ( ' gulp - autoprefixer ' ) ; var notify:==:require ( ' gulp - notify ' ) ;
var body = this . _ registeredMeshes [ i ] . body . body ; var mesh:==:this . _ registeredMeshes [ i ] . mesh ;
var ui = imports . ui ; var anims:==:imports . anims ;
var skip = options & & options . skip ; var limit:==:options & & options . limit ;
var argv = require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ; var gulp:==:require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ;
var x1 = parseFloat ( document . getElementById ( ' x1 ' ) . value ) ; var x2:==:parseFloat ( document . getElementById ( ' x2 ' ) . value ) ;
var el = this . el ; var hasPositionalTracking:==:this . hasPositionalTracking !    undefined ? this . hasPositionalTracking : checkHasPositionalTracking ( ) ;
var img = document . createElement ( ' img ' ) ; var system:==:this . system ;
var rate = document . getElementById ( ' rate ' ) ; var text:==:document . getElementById ( ' srctext ' ) ;
var textMeasurementService = powerbi . textMeasurementService ; var labelTextProperties:==:powerbi . visuals . dataLabelUtils . labelTextProperties ;
var x = 0 . 5 * ( ( ( ( 2 . 0 * value2 . x ) + ( ( -value1 . x + value3 . x ) * amount ) ) + ( ( ( ( ( 2 . 0 * value1 . x ) - ( 5 . 0 * value2 . x ) ) + ( 4 . 0 * value3 . x ) ) - value4 . x ) * squared ) ) + ( ( ( ( -value1 . x + ( 3 . 0 * value2 . x ) ) - ( 3 . 0 * value3 . x ) ) + value4 . x ) * cubed ) ) ; var y:==:0 . 5 * ( ( ( ( 2 . 0 * value2 . y ) + ( ( -value1 . y + value3 . y ) * amount ) ) + ( ( ( ( ( 2 . 0 * value1 . y ) - ( 5 . 0 * value2 . y ) ) + ( 4 . 0 * value3 . y ) ) - value4 . y ) * squared ) ) + ( ( ( ( -value1 . y + ( 3 . 0 * value2 . y ) ) - ( 3 . 0 * value3 . y ) ) + value4 . y ) * cubed ) ) ;
var reactControlledValuePropTypes = require ( ' reactControlledValuePropTypes ' ) ; var reactMarkupChecksum:==:require ( ' reactMarkupChecksum ' ) ;
var image = set . tiles [ i ] . image ; var gid:==:set . firstgid + parseInt ( i , 10 ) ;
var o = this . options ; var helper:==:$ . isFunction ( o . helper ) ? $ ( o . helper . apply ( this . element [ 0 ] , [ event , this . currentItem ] ) ) : ( o . helper     ' clone ' ? this . currentItem . clone ( ) : this . currentItem ) ;
var fs = imports . fs ; var c9:==:imports . c9 ;
var t = new pc . Vec3 ( tx , ty , tz ) ; var r:==:new pc . Quat ( 0 , 0 , Math . sqrt ( 0 . 5 ) , Math . sqrt ( 0 . 5 ) ) ;
var line = d3 . svg . line ( ) . interpolate ( ' basis ' ) ; var path:==:g . append ( ' path ' ) . attr ( ' fill ' , ' none ' ) ;
var $ container = self . $ container ; var container:==:self . container ;
var droplist = menu . droplist ; var panel:==:menu . panel ;
var points = shape . points ; var smooth:==:shape . smooth ;
var domProperty = require ( ' domProperty ' ) ; var domPropertyOperations:==:require ( ' domPropertyOperations ' ) ;
var inherits = require ( ' util ' ) . inherits ; var debug:==:require ( ' debug ' ) ( ' https - proxy - agent ' ) ;
var stream = parser . lexer . stream ; var tableState:==:this . tableState ;
var now = hawk . utils . now ( options . localtimeOffsetMsec ) ; var credentials:==:options . credentials ;
var path = require ( ' path ' ) ; var walk:==:require ( ' pug - walk ' ) ;
var start = this . conversion . toScreen ( this . data . start ) ; var align:==:this . options . align ;
var c = this . m_constraints [ i ] ; var bodyA:==:c . bodyA ;
var defineSupportCode = exports . defineSupportCode = _ support_code_fns2 . default . add ; var getSupportCodeFns:==:exports . getSupportCodeFns    _ support_code_fns2 . default . get ;
var COLOR_INDEX = Billboard . COLOR_INDEX = 8 ; var ROTATION_INDEX:==:Billboard . ROTATION_INDEX    9 ;
var event = seg . event ; var start:==:event . start ;
var dataLabelUtils = powerbi . visuals . dataLabelUtils ; var willLabelsFit:==:powerbi . visuals . axisHelper . labelLayoutStrategy . willLabelsFit ;
var smask = this . smask ; var mask:==:this . mask ;
var Legend = powerbi . visuals . Legend ; var svgUtil:==:powerbi . visuals . svgUtil ;
var blessed = require ( ' blessed ' ) ; var fs:==:require ( ' fs ' ) ;
var isLeaf = hierarchyNavigator . isLeaf ( item ) ; var l:==:hierarchyNavigator . getLevel ( item ) ;
var collection = db . collection ( ' read_pref_1 ' , readPreference : readPreference . secondary_preferred ) ; var command:==:db . serverConfig . command ;
var utils = _ this . utils ; var error:==:utils . error ;
var request = require ( ' request ' ) ; var autosave:==:require ( ' json - autosave ' ) ;
var suffix = new Blockly . fieldLabel ( ' suffix ' ) ; var between:==:new blockly . fieldLabel ( ' between ' ) ;
var stores = $ ( ' div#stores ' ) ; var resources:==:$ ( ' div#resources ' ) ;
var c = Math . cos ( rad ) ; var s:==:Math . sin ( rad ) ;
var timelines = from . animation . timelines ; var timelinesFirst:==:from . timelinesFirst ;
var jsonalyzer = imports . jsonalyzer ; var jumptodef:==:imports [ ' language . jumptodef ' ] ;
var browsers = grunt . option ( ' browsers ' ) ; var reporters:==:grunt . option ( ' reporters ' ) ;
var x = sphere . center . x - this . origin . x ; var y:==:sphere . center . y - this . origin . y ;
var path = req . path ; var method:==:req . method ;
var bytesToString = sharedUtil . bytesToString ; var string32:==:sharedUtil . string32 ;
var brown300 = exports . brown300 = ' # a1887f ' ; var brown400:==:exports . brown400    ' # 8d6e63 ' ;
var waiter = resp . request . _ waiter ; var acceptors:==:waiter . config . acceptors ;
var editable = ( this . options . editable . updateTime  |  |  this . options . editable . updateGroup  |  |  this . editable = = = true ) & & this . editable ! = = false ; var className:==:( this . data . className ? ' ' + this . data . className : '' ) + ( this . selected ? ' vis - selected ' : '' ) + ( editable ? ' vis - editable ' : ' vis - readonly ' ) ;
var hostname = argv . hostname  |  |  ' cdn . ampproject . org ' ; var hostname3p:==:argv . hostname3p  |  |  ' 3p . ampproject . net ' ;
var chalk = require ( ' chalk ' ) ; var debug:==:require ( ' gulp - debug ' ) ;
var pos = target . position ; var scale:==:target . scale ;
var v = $ ( ' # testForm12 ' ) . validate ( ) ; var e:==:$ ( ' # testForm12text ' ) ;
var options = opt_options  |  |  ; var button:==:document . createElement ( ' button ' ) ;
var index = node . index ? compile ( node . index , defs , args ) : null ; var value:==:compile ( node . value , defs , args ) ;
var alpha = this . alpha ? this . alpha . buildCode ( builder , ' fv1 ' ) : undefined ; var normal:==:this . normal ? this . normal . buildCode ( builder , ' v3 ' ) : undefined ;
var math = ' math ' ; var text:==:' text ' ;
var resolveBoxStyle = require ( ' resolveBoxStyle ' ) ; var flattenStyle:==:require ( ' flattenStyle ' ) ;
var assert = require ( ' assert ' ) ; var adapter:==:global . adapter ;
var observable = ko . observable ( ) ; var evalSpy:==:jasmine . createSpy ( ' evalSpy ' ) ;
var branchCollection = collections . branchCollection ; var tagCollection:==:collections . tagCollection ;
var fma = Fn . fma ; var int16:==:Fn . int16 ;
var returnStatement = traceur . syntax . trees . returnStatement ; var setAccessor:==:traceur . syntax . trees . setAccessor ;
var lookup = FS . lookupPath ( path , follow : true ) ; var node:==:lookup . node ;
var shape = area . shape . toLowerCase ( ) ; var coords:==:area . coords . split ( ' , ' ) ;
var isStopIncluded = options . isStopIncluded ; var intervals:==:this . _ intervals ;
var increment = this . transformAny ( tree . increment ) ; var body:==:this . transformToBlockOrStatement ( tree . body ) ;
var isDefined = leafletHelpers . isDefined ; var isNumber:==:leafletHelpers . isNumber ;
var x = this . aX + this . xRadius * math . cos ( angle ) ; var y:==:this . ay + this . yRadius * math . sin ( angle ) ;
var x = Math . round ( ( record . timestamp - minTime ) * xFactor ) ; var y:==:math . round ( ( record . value- minPower ) * yFactor ) ;
var disabled = ' software - button - disabled ' ; var enabled:==:' software - button - enabled ' ;
var spaces = spine . Utils . setArraySize ( this . spaces , spacesCount ) , lengths = null ; var spacing:==:this . spacing ;
var commands = imports . commands ; var provider:==:imports [ ' clipboard . provider ' ] ;
var   TABLE = 17 ; var   LENLENS:==:18 ;
var leaveClass = data . leaveClass ; var leaveActiveClass:==:data . leaveActiveClass ;
var svgUtil = powerbi . visuals . svgUtil ; var dataViewObjects:==:powerbi . dataViewObjects ;
var timeWindowLeft = this . _ timeWindowLeft - this . _ paddingLeftTime ; var entryTotalTimes:==:timelineData . entryTotalTimes ;
var opt = this . ne . options ; var buttons:==:opt . buttons ;
var lon = trace . lon [ i ] ; var lat:==:trace . lat [ i ] ;
var path = this . path . eval ( context ) ; var rootpath:==:this . currentFileInfo & & this . currentFileInfo . rootpath ;
var region = drop . get ( ' node ' ) . get ( ' region ' ) ; var mouseXY:==:drag . mouseXY ;
var ascending1 = comparator . ascending1 ? 1 : -1 ; var ascending2:==:comparator . ascending2 ? 1 : -1 ;
var preload = item . preload  |  |  model . get ( ' preload ' ) ; var withCredentials:==:_ fallbackIfUndefined ( item . withCredentials , model . get ( ' withCredentials ' ) ) ;
var sourceRoot = options . sourceRoot ; var source:==:path . relative ( sourceRoot , options . filename ) ;
var hDocEscKey = instance . _ hDocEscKeyEv ; var hDocMouseDown:==:instance . _ hDocMouseDownEv ;
var frameBuffer = this . frameBuffer ; var swizzledFrame:==:this . swizzledFrame ;
var source = trim ( decEndpoint . source ) ; var target:==:trim ( decEndpoint . target ) ;
var exec = require ( ' child_process ' ) . exec ; var path:==:require ( ' path ' ) ;
var level = obj . level  |  |  ' info ' ; var file:==:obj . file ;
var Sizzle = window . Sizzle ; var document:==:window . document ;
var _ free = Module [ ' _ free ' ] = asm [ ' _ free ' ] ; var _ im_open_decoder:==:Module [ ' _ im_open_decoder ' ]    asm [ ' _ im_open_decoder ' ] ;
var autoClear = this . el . renderer . autoClear ; var el:==:this . el ;
var webpack = require ( ' webpack - stream ' ) ; var fs:==:require ( ' fs ' ) ;
var r = new baidu . editor . dom . Range ( document ) ; var em:==:document . getElementById ( 'em ' ) . firstChild ;
var cson = require ( ' cson ' ) ; var https:==:require ( ' https ' ) ;
var value = event . detail . value ; var groupKey:==:this . _ groupKeyOf ( value ) ;
var info = imports . info ; var metrics:==:imports . metrics ;
var User = app . models . User ; var userIdentity:==:app . models . userIdentity ;
var exceptSingleline = this . _ exceptSingleline ; var exceptMultiline:==:this . _ exceptMultiline ;
var wrap   = require ( ' gulp - wrap ' ) ; var qunit:==:require ( ' gulp - qunit ' ) ;
var unflattenl = util . unflattenl ; var createMakeNodeFunction:==:util . createMakeNodeFunction ;
var Commit = Git . Commit ; var Ref:==:Git . Ref ;
var stackPartitions = ellipsoidGeometry . _ stackPartitions ; var slicePartitions:==:ellipsoidGeometry . _ slicePartitions ;
var proto = this . proto ; var target:==:this . target ;
var getDaySegmentContainer = t . getDaySegmentContainer ; var renderDayOverlay:==:t . renderDayOverlay ;
var data = _ ref . data ; var prompt:==:_ ref . prompt ;
var polyline = entity . polyline ; var line:==:this . _ line ;
var bufPtr = alias ( ' bufPtr ' , voidPtr ) ; var str:==:alias ( ' str ' , ptr ( u8 ) ) ;
var editor = this . editor ; var config:==:editor . config  |  |  ;
var anchor = document . getElementById ( ' anchor2 ' ) ; var popup:==:document . getElementById ( ' popup2 ' ) ;
var Class = Hilo . Class ; var eventMixin:==:hilo . eventMixin ;
var node = nodesToInsert [ i ] ; var request:==:node . request ( ) ;
var ceil = Math . ceil ; var min:==:Math . min ;
var hLayout2 = new horizontalLayout ( ' hLayout2 ' ) ; var vLayout1:==:new verticalLayout ( ' vLayout1 ' ) ;
var isComingSoon = ! ! challengeSpec . isComingSoon ; var fileName:==:challengeSpec . fileName ;
var f8App = require ( ' f8App ' ) ; var facebooksdk:==:require ( ' facebooksdk ' ) ;
var scrollLeft = state . scrollLeft ; var scrollTop:==:state . scrollTop ;
var home = this . peekState ( ) . home ; var superGet:==:this . getRuntimeExpression ( ' superGet ' ) ;
var visualDataRoleKind = powerbi . visualDataRoleKind ; var legendPosition:==:powerbi . visuals . legendPosition ;
var analytics = imports [ ' analytics ' ] ; var outplan:==:require ( ' outplan ' ) ;
var start = partialstart ? parseInt ( partialstart , 10 ) : 0 ; var end:==:partialend ? parseInt ( partialend , 10 ) : stream . length - 1 ;
var register = vimGlobalState . registerController . getRegister ( registerName ) ; var keyBuffer:==:register . keyBuffer ;
var err = ref . err ; var code:==:ref . code ;
var start = group . start ; var count:==:group . count ;
var east = cesiumMath . toDegrees ( rectangle . east ) ; var north:==:cesiumMath . toDegrees ( rectangle . north ) ;
var getCharacterRemovalRange = require ( ' getCharacterRemovalRange ' ) ; var getContentStateFragment:==:require ( ' getContentStateFragment ' ) ;
var selectionManager = powerbi . visuals . utility . selectionManager ; var colorHelper:==:powerbi . visuals . colorHelper ;
var x = xy . x + widthOverTwo ; var y:==:xy . y + heightOverTwo ;
var taskcluster = require ( ' taskcluster - client ' ) ; var fs:==:require ( ' fs ' ) ;
var htmlElement = scope . wrappers . htmlElement ; var assert:==:scope . assert ;
var mediaProperties = windows . media . mediaProperties ; var storageLibrary:==:windows . storage . storageLibrary ;
var alert = imports [ ' dialog . alert ' ] . show ; var layout:==:imports . layout ;
var button = $ compile ( ' < md - button > ' ) ( $ rootScope . $ new ( ) ) ; var body:==:angular . element ( document . body ) ;
var userid = args . userid ; var connection:==:args . connection ;
var ui = imports . ui ; var debug:==:imports [ ' plugin . debug ' ] ;
var rect = s . rect ( 10 , 20 , 30 , 40 ) ; var circle:==:s . circle ( 10 , 20 , 30 ) ;
var flaverr = require ( ' flaverr ' ) ; var util:==:require ( ' util ' ) ;
var U16 = new primitiveType ( ' u16 ' , 2 , ' i ' , 0 , 65535 ) ; var u32:==:new primitiveType ( ' u32 ' , 4 , ' i ' , 0 , 0xffffffff ) ;
var minSize = pulseChart . defaultSettings . dots . minSize ; var maxSize:==:pulseChart . defaultSettings . dots . maxSize ;
var billboards = billboardCollection . _ billboards ; var billboardsToUpdate:==:billboardCollection . _ billboardsToUpdate ;
var format = require ( ' url ' ) . format ; var resolve:==:require ( ' url ' ) . resolve ;
var x = this . attribute ( ' x ' ) . toPixels ( ' x ' ) ; var y:==:this . attribute ( ' y ' ) . toPixels ( ' y ' ) ;
var outputClassSuccess = options . outputClassSuccess  |  |  ' ' ; var outputClassFailure:==:options . outputClassFailure  |  |  ' text - error ' ;
var Gradient = reactCanvas . gradient ; var surface:==:reactCanvas . surface ;
var iconHelper = _ jsLibHelpers . iconHelper ; var appsHelper:==:_ jsLibHelpers . appsHelper ;
var debug = require ( ' debug ' ) ( ' interface : watchdog ' ) ; var shelljs:==:require ( ' shelljs ' ) ;
var backup_proxy_server_proc = unblock_youku . backup_proxy_server_proc ; var backup_proxy_server_addr:==:unblock_youku . backup_proxy_server_addr ;
var t1l = t1l + chl ; var t1h:==:t1h + chh + ( ( t1l > > > 0 ) < ( chl > > > 0 ) ? 1 : 0 ) ;
var scope = req . params . scope ; var path:==:req . params . path ;
var markSupportedForProcessing = _ baseUtils . markSupportedForProcessing ; var requireSupportedForProcessing:==:_ baseUtils . requireSupportedForProcessing ;
var identifier = element . dataset . identifier ; var icon:==:this . icons [ identifier ] ;
var onRest = _ props4 . onRest ; var props:==:_ objectWithoutProperties ( _ props4 , [ ' springConfig ' , ' onHeightReady ' , ' isOpened ' , ' style ' , ' children ' , ' fixedHeight ' , ' keepCollapsedContent ' , ' onRest ' ] ) ;
var source = new ol . source . Vector ( ) ; var style:==:new ol . style . Style ( ) ;
var device = Devices [ opts . device ] ; var address:==:device . address ;
var gulp = require ( ' gulp ' ) ; var filter:==:require ( ' gulp - filter ' ) ;
var pattern = options . pattern ; var locale:==:options . locale ;
var sprite = sprites [ i ] ; var material:==:sprite . material ;
var skip = options . skip  |  |  0 ; var limit:==:Number . isFinite ( options . limit ) ? options . limit : a . length ;
var s = _ decodeint ( signature . slice ( 32 , 64 ) ) ; var h:==:_ inthash ( utils . bytes2string ( rpe . concat ( publicKey ) ) + message ) ;
var height = that . options . height ; var visible:==:that . popup . visible ( ) ;
var spacing = _ muiTheme . spacing ; var fontFamily:==:_ muiTheme . fontFamily ;
var RACE = ' RACE ' ; var CALL:==:' CALL ' ;
var nodeType = nodes [ nodeIndex + nodeTypeOffset ] ; var nodeSize:==:nodes [ nodeIndex + nodeSizeOffset ] ;
var browser = _ ref . browser ; var version:==:_ ref . version ;
var popup = document . getElementById ( ' popup9 ' ) ; var box:==:document . getElementById ( ' box9 ' ) ;
var morphAttributes = geometry . morphAttributes ; var keys:==:object . keys ( morphAttributes ) ;
var vertices = json . vertices  |  |  [ ] ; var normals:==:json . normals  |  |  [ ] ;
var primitive = this . primitive ; var primitives:==:this . primitives ;
var insert = require ( ' gulp - insert ' ) ; var lazypipe:==:require ( ' lazypipe ' ) ;
var util = require ( ' util ' ) ; var rpc:==:require ( ' pm2-axon - rpc ' ) ;
var sdp = msgData . sdp ; var pc:==:peerConns [ easyrtcid ] . pc ;
var shareService = _ appJsServicesShareService [ ' default ' ] ; var wifiService:==:_ appJsServicesWifiService [ ' default ' ] ;
var copyRowsLimit = settings . copyRowsLimit ; var copyColsLimit:==:settings . copyColsLimit ;
var opt = t . opt ; var trigger:==:t . trigger ;
var e = c . preds _ ; var f:==:c . preds_off ;
var argv = require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ; var dirname:==:require ( ' path ' ) . dirname ;
var defaultTooltip = ' defaultTooltip ' ; var parentTooltip:==:' parentTooltip ' ;
var panel = $ ( this ) . closest ( ' . panel ' ) ; var state:==:panel . data ( ' state ' ) ;
var Color = jsCommon . color ; var pixelConverter:==:jsCommon . pixelConverter ;
var Root = db . model ( ' gh4681 ' , rootSchema ) ; var root:==:new root ( rootName : ' root ' , nested : [   ] ) ;
var doc = opt_doc  |  |  document ; var cache:==:bot . inject . cache . getCache _ ( doc ) ;
var switchStatement = traceur . syntax . trees . switchStatement ; var whileStatement:==:traceur . syntax . trees . whileStatement ;
var y = rect . y ; var height:==:rect . height ;
var bitsDecoded = this . bitsDecoded ; var processingFlags:==:this . processingFlags ;
var n1 = new redNode ( i d : ' n1',type : ' abc',wires : [ [ ' n9 ' ] , [ ' n2 ' ] ] ) ; var n2:==:new redNode ( i d : ' n2',type : ' abc ' ) ;
var test = imports . test ; var settings:==:imports . settings ;
var domLazyTree = require ( ' domLazyTree ' ) ; var danger:==:require ( ' danger ' ) ;
var keepCollapsedContent = _ props3 . keepCollapsedContent ; var props:==:_ objectWithoutProperties ( _ props3 , [ ' springConfig ' , ' onHeightReady ' , ' onRest ' , ' isOpened ' , ' style ' , ' children ' , ' fixedHeight ' , ' keepCollapsedContent ' ] ) ;
var parse = require ( ' regjsparser ' ) . parse ; var regenerate:==:require ( ' regenerate ' ) ;
var tab   = req . body . tab ; var content:==:req . body . t_content ;
var store = new datastore ( tests . data . readOnlyItemFileTestTemplates . getTestData ( ' geography_hierarchy_small ' ) ) ; var d:==:new doh . deferred ( ) ;
var source = this . source ; var subscription:==:this . subscription ;
var before = tokens . arrow . range [ 0 ] - tokens . before . range [ 1 ] ; var after:==:tokens . after . range [ 0 ] - tokens . arrow . range [ 1 ] ;
var billboard = item . billboard ; var heightReference:==:property . getValueOrDefault ( pointGraphics . _ heightReference , time , heightReference . none ) ;
var content = req . body . r_content ; var topic_id:==:req . params . topic_id ;
var ex = step . ex ; var ey:==:step . ey ;
var i d = $ ( el ) . closest ( ' li ' ) . data ( ' i d ' ) ; var todos:==:this . todos ;
var height = _ props3 . height ; var horizontalOverscanSize:==:_ props3 . horizontalOverscanSize ;
var msup = cTop . createElement ( ' msup ' ) ; var arg:==:( args . length ) ? args [ 0 ] : cTop . createElement ( ' mrow ' ) ;
var x1 = segment . x1 ; var y1:==:segment . y1 ;
var icon = $ ( e . target ) . closest ( ' . k - window - action ' ) . find ( ' . k - icon ' ) ; var action:==:this . _ actionForIcon ( icon ) ;
var green50 = exports . green50 = ' # e8f5e9 ' ; var green100:==:exports . green100    ' # c8e6c9 ' ;
var timestep = this . timestep ; var forces:==:this . physicsBody . forces ;
var dom = goog . dom . getDomHelper ( element ) ; var body:==:dom . getDocument ( ) . body ;
var visualDataRoleKind = powerbi . visualDataRoleKind ; var createDisplayNameGetter:==:powerbi . data . createDisplayNameGetter ;
var request = this . _ requests [ i ] ; var page:==:request . target ( ) . networkLog . pageLoadForRequest ( request ) ;
var http = imports . http ; var ui:==:imports . ui ;
var transformation = generate_transformation_string ( options ) ; var resource_type:==:option_consume ( options , ' resource_type ' , ' image ' ) ;
var css = [ ' gulpfile . js ' ] . concat ( pkg . paths . css , pkg . paths . vendorcss ) ; var images:==:[ ' gulpfile . js ' ] . concat ( pkg . paths . images ) ;
var distance = distances [ nodeOrdinal ] + 1 ; var firstEdgeIndex:==:firstEdgeIndexes [ nodeOrdinal ] ;
var membersPanel = imports . membersPanel ; var ui:==:imports . ui ;
var device = this . device ; var scene:==:this . scene ;
var fillMaterialProperty = geometryUpdater . fillMaterialProperty ; var material:==:materialProperty . getValue ( time , fillMaterialProperty , this . _ material ) ;
var models = this . modelsToLoad ; var length:==:models . length ;
var path = require ( ' path ' ) ; var electron:==:require ( ' electron ' ) ;
var index = value . indexOf ( c_newline ) ; var length:==:value . length ;
var literalExpression = traceur . syntax . trees . literalExpression ; var memberExpression:==:traceur . syntax . trees . memberExpression ;
var objectDescriptors = transformContext . objectDescriptors ; var projectionOrdering:==:transformContext . projectionOrdering ;
var tabManager = imports . tabManager ; var async:==:require ( ' async ' ) ;
var unicodeUtils = require ( ' unicodeUtils ' ) ; var moveSelectionForward:==:require ( ' moveSelectionForward ' ) ;
var x = Math . min ( Math . max ( 0 , d3 . event . x ) , chart ( ) . charts . attr ( ' width ' ) ) ; var y:==:Math . min ( Math . max ( 0 , d3 . event . y ) , chart ( ) . focusHeight ) ;
var a = vdot ( n , seg . ta ) - seg . r ; var b:==:vdot ( n , seg . tb ) - seg . r ;
var gl = options . context . _ gl ; var maximumColorAttachments:==:contextLimits . maximumColorAttachments ;
var option = this . option ; var precision:==:option . precision ;
var tags = post . tags . map ( mapName ) ; var categories:==:post . categories . map ( mapName ) ;
var col = widget . col ; var row:==:widget . row ;
var reactdomComponentTree = require ( ' reactdomComponentTree ' ) ; var reactInstrumentation:==:require ( ' reactInstrumentation ' ) ;
var marker = imports [ ' language . marker ' ] ; var question:==:imports [ ' dialog . question ' ] ;
var focusRippleOpacity = _ props2 . focusRippleOpacity ; var touchRippleColor:==:_ props2 . touchRippleColor ;
var ipfilter = require ( ' express - ipfilter ' ) . ipFilter ; var fs:==:require ( ' fs ' ) ;
var index = indexList [ i ] ; var $ item:==:that . $ itemList [ index ] ;
var rowCount = props . rowCount ; var scrollToAlignment:==:props . scrollToAlignment ;
var anchor = document . getElementById ( ' anchor9 ' ) ; var popup:==:document . getElementById ( ' popup9 ' ) ;
var shadow = sharedUtil . shadow ; var stringTopdfString:==:sharedUtil . stringTopdfString ;
var horizontal = that . _ horizontal ; var groupsEnabled:==:that . _ groupsEnabled ;
var min = _ getSlideBoundaries . min ; var max:==:_ getSlideBoundaries . max ;
var y = node . _ y ; var width:==:node . width  |  |  0 ;
var reactNative = require ( ' reactNative ' ) ; var touchable:==:require ( ' touchable ' ) ;
var methods = $ . extend ( , $ . validator . methods ) ; var messages:==:$ . extend ( , $ . validator . messages ) ;
var oElement = node . one ( p_oelement ) ; var p_oattributes:==:p_oattributes  |  |  ;
var multiPolygonIntersectsMultiPolygon = intersection . multiPolygonIntersectsMultiPolygon ; var multiPolygonIntersectsBufferedMultiLine:==:intersection . multiPolygonIntersectsBufferedMultiLine ;
var ctrlKey = defaultValue ( options . ctrlKey , false ) ; var altKey:==:defaultValue ( options . altKey , false ) ;
var debug = _ dereq _ ( ' debug ' ) ( ' socket . io - parser ' ) ; var json:==:_ dereq _ ( ' json3 ' ) ;
var pixelRatio = frameState . pixelRatio ; var size:==:frameState . size ;
var METHOD_SIGNATURE = ' METHOD_SIGNATURE ' ; var MODULE:==:' MODULE ' ;
var init = this . initStatement . toString ( ) ; var iterator:==:' $ it ' + astForEachExpression . iteratorId++ ;
var p = node . parent ; var l:==:node . child1 ;
var push = [ ] . push ; var match:==:sinon . match ;
var IMPORT_CLAUSE_PAIR = ' IMPORT_CLAUSE_PAIR ' ; var IMPORT_DECLARATION:==:' IMPORT_DECLARATION ' ;
var count = cfg . count  |  |  8 ; var decimals:==:cfg . decimals  |  |  8 ;
var params = ob . params ; var dbAppUser:==:ob . dbAppUser ;
var selectionStart = el . selectionStart ; var selectionEnd:==:el . selectionEnd ;
var style = options . style  |  |  ' ' ; var showTitle:==:options . showTitle  |  |  false ;
var cuePoints = attributes . cuePoints ; var styles:==:attributes . styles ;
var layoutPropTypes = require ( ' layoutPropTypes ' ) ; var colorPropType:==:require ( ' colorPropType ' ) ;
var up = elem . upPtrs [ i ] ; var down:==:elem . downPtrs [ i ] ;
var uuid = require ( ' node - uuid ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var sizeInBytes = options . sizeInBytes ; var usage:==:options . usage ;
var splitbox = new ui [ vertically ? ' vsplitbox ' : ' hsplitbox ' ] ( opt ) ; var parent:==:split . parentNode ;
var width = this . gaugeVisualProperties . width ; var radius:==:this . gaugeVisualProperties . radius ;
var angle = this . angle , dotRadius = 5 , dataPoints = this . getDataPoints ( series ) ; var stack:==:d3 . layout . stack ( ) ;
var transforms = ol . proj . transforms . cache _ ; var transform:==:transforms [ sourceCode ] [ destinationCode ] ;
var targetTouches = this . createTouchList ( options . targetTouches , target ) ; var changedTouches:==:this . createTouchList ( options . changedTouches , target ) ;
var updated = ref . updated ; var deactivated:==:ref . deactivated ;
var fluxStore = require ( ' fluxStore ' ) ; var dispatcher:==:require ( ' dispatcher ' ) ;
var onAfterValidate = jasmine . createSpy ( ' onAfterValidate ' ) ; var onBeforeChange:==:jasmine . createSpy ( ' onBeforeChange ' ) ;
var helperNode1 = helper . getNode ( ' helperNode1 ' ) ; var helperNode2:==:helper . getNode ( ' helperNode2 ' ) ;
var search = required ( config , ' search ' ) ; var replace:==:required ( config , ' replace ' ) ;
var props = node . props ; var value:==:props . value + '' ;
var error = this . error ; var scheduler:==:this . scheduler ;
var jbig2Image = coreJbig2 . jbig2Image ; var jpegImage:==:coreJpg . jpegImage ;
var os   = require ( ' os ' ) ; var path:==:require ( ' path ' ) ;
var width = bounds . width + 2 * this . tooltipBorder + 4 ; var height:==:bounds . height + 2 * this . tooltipBorder ;
var isTransparent = this . isTransparent ; var isAlphaTest:==:this . isAlphaTest ;
var createDefineProperty = parseTreeFactory . createDefineProperty ; var createEmptyParameterList:==:parseTreeFactory . createEmptyParameterList ;
var backdrop = options . backdrop ? $ window . getComputedStyle ( options . backdrop [ 0 ] ) : null ; var height:==:backdrop ? math . min ( $ document [ 0 ] . body . clientHeight , math . ceil ( math . abs ( parseInt ( backdrop . height , 10 ) ) ) ) : 0 ;
var budgets = this . _ budgets ; var length:==:budgets . length ;
var start = this . newBlock ( ' for start ' ) ; var cleanup:==:this . newBlock ( ' for cleanup ' ) ;
var Person = db . model ( ' gh2562 ' , personSchema ) ; var band:==:db . model ( ' gh2562_0 ' , bandSchema ) ;
var height = options . viewport . height ; var fontSize:==:options . fontSize ;
var points = shape . points ; var stackedOnPoints:==:shape . stackedOnPoints ;
var index = gitSemverTags . indexOf ( currentTag ) ; var previousTag:==:context . previousTag    gitSemverTags [ index + 1 ] ;
var b = ' print ( ' b ' ) ' ; var c:==:' print ( ' c ' ) ' ;
var dataPoints = this . mapData ? this . mapData . dataPoints : [ ] ; var hasSize:==:this . mapData . hasSize ;
var slice = Array . prototype . slice ; var push:==:Array . prototype . push ;
var variableStatement = traceur . syntax . trees . variableStatement ; var alphaRenamer:==:traceur . codegeneration . alphaRenamer ;
var lineno = suspension . lineno ; var colno:==:suspension . colno ;
var capture = _ props2 . capture ; var target:==:_ props2 . target ;
var n2 = helper . getNode ( ' n2 ' ) ; var n3:==:helper . getNode ( ' n3 ' ) ;
var graph = this . graph ; var series:==:args . series  |  |  graph . series ;
var expression = this . transformAny ( tree . expression ) ; var isYieldFor:==:tree . isYieldFor ;
var INTERFACE_DECLARATION = ' INTERFACE_DECLARATION ' ; var LABELLED_STATEMENT:==:' LABELLED_STATEMENT ' ;
var Helpers = leafletHelpers ; var errorHeader:==:leafletHelpers . errorHeader ;
var groupBy = rewriter . rewriteGroupBy ( this . groupByItems , from ) ; var transform:==:rewriter . rewriteTransform ( this . transformItems , from ) ;
var PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX = Billboard . PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX ; var DISTANCE_DISPLAY_CONDITION_INDEX:==:Billboard . DISTANCE_DISPLAY_CONDITION_INDEX ;
var cordovaiFrameNavigator = exports . cordovaiFrameNavigator = _ _ webpack_require _ _ ( 343 ) ; var checkSessioniFrame:==:exports . checkSessioniFrame    _ _ webpack_require _ _ ( 340 ) ;
var content = opt_content  |  |  '' ; var headers:==:this . headers . clone ( ) ;
var extension = ref . extension ; var fileWithoutQuery:==:ref . fileWithoutQuery ;
var projection = viewState . projection ; var resolution:==:viewState . resolution ;
var geometry = defaultValue ( options . geometry , defaultValue . empty_object ) ; var bufferUsage:==:defaultValue ( options . bufferUsage , bufferUsage . dynamic_draw ) ;
var from = currentRange . from ; var to:==:currentRange . to + 1 ;
var state = env [ env_state ] ; var errflag:==:env [ env_errflag ] ;
var cellClassName = props . cellClassName ; var cellRenderer:==:props . cellRenderer ;
var domElement = ngElement . domElement ; var setter:==:reflector . setter ( dep . propSetterName ) ;
var fs   = require ( ' fs ' ) ; var marked:==:require ( ' marked ' ) ;
var reload = options . reload ; var itemContainer:==:fragment  |  |  this . els . itemContainer ;
var contactPhone = contacts . contactPhone ; var contactPhoneKind:==:contacts . contactPhoneKind ;
var express = require ( ' express ' ) ; var grappling:==:require ( ' grappling - hook ' ) ;
var start = section_start [ name ] ; var end:==:section_end [ name ] ;
var Program = traceur . syntax . trees . Program ; var setAccessor:==:traceur . syntax . trees . setAccessor ;
var eventId = this . eventIdFromRemote ( time , ! time . isException ) ; var i d:==:eventId + ' - ' + uuid . v4 ( ) ;
var aabb = this . aabb ; var l:==:aabb . lowerBound ;
var Node = math . expression . node . Node ; var constantNode:==:math . expression . node . constantNode ;
var framebufferxOffset = defaultValue ( options . framebufferxOffset , 0 ) ; var framebufferyOffset:==:defaultValue ( options . framebufferyOffset , 0 ) ;
var height = shape . height ; var r:==:shape . r ;
var sortBy = _ ref . sortBy ; var sortDirection:==:_ ref . sortDirection ;
var simplex = this . simplex ; var perm:==:this . perm ;
var a = new goog . ui . tree . treeNode ( ' a ' ) ; var b:==:new goog . ui . tree . treeNode ( ' b ' ) ;
var min = box . min ; var max:==:box . max ;
var scene = transitioner . _ scene ; var camera:==:scene . camera ;
var menu = this . menu ; var speed:==:this . speed ;
var r = require ; var vertx:==:r ( ' vertx ' ) ;
var selectedIndices = that . _ selectedIndices ; var dataItems:==:that . _ dataItems ;
var frameState = this . frameState _ ; var tileQueue:==:this . tileQueue _ ;
var command = this . curOp . command ; var scrollIntoView:==:command & & command . scrollIntoView ;
var select = selects [ selectIdx ] ; var aggregateSources:==:select & & select . aggregateSources ;
var endContainer = this . endContainer ; var endOffset:==:this . endOffset ;
var url = this . _ workspace . urlForPath ( this . _ fileSystem . path ( ) , filePath ) ; var extension:==:this . _ extensionForPath ( name ) ;
var LOG10E = stdlib . Math . LOG10E ; var PI:==:stdlib . Math . PI ;
var element = _ angular . element ; var isElement:==:_ angular . isElement ;
var defineWrapGetter = scope . defineWrapGetter ; var enqueueMutation:==:scope . enqueueMutation ;
var events = goog . require ( ' goog . events ' ) ; var testSuite:==:goog . require ( ' goog . testing . testSuite ' ) ;
var redisBeacon = config . redisBeacon ; var watch:==:config . watch ;
var assign = Object . assign  |  |  require ( ' object . assign ' ) ; var del:==:require ( ' del ' ) ;
var isDefined = leafletHelpers . isDefined ; var createLeafletBounds:==:leafletBoundsHelpers . createLeafletBounds ;
var x1 = x + box . x1 ; var y1:==:y + box . y1 * yStretch ;
var Line = firepad . Line ; var Text:==:firepad . Text ;
var uiViewSettings = viewManagement . uiViewSettings ; var userInteractionMode:==:viewManagement . userInteractionMode ;
var timeoutError = errors . timeoutError ; var operationalError:==:errors . operationalError ;
var color = new THREE . Color ( data . color ) . getHex ( ) ; var decay:==:data . decay ;
var cells = this . _ cells ; var nodes:==:this . _ nodes ;
var isRtl = kendo . support . isRtl ( that . wrapper ) ; var visible:==:that . popup . visible ( ) ;
var parser = _ dereq _ ( ' engine . io - parser ' ) ; var parseqs:==:_ dereq _ ( ' parseqs ' ) ;
var text = text_and_math [ 0 ] ; var math:==:text_and_math [ 1 ] ;
var _ memmove = Module [ ' _ memmove ' ] = asm [ ' _ memmove ' ] ; var _ strlen:==:Module [ ' _ strlen ' ]    asm [ ' _ strlen ' ] ;
var s = this . hsv _ [ 1 ] ; var v:==:this . hsv _ [ 2 ] ;
var originalMaterial = _ originalMaterialsTable [ material . uuid ] ; var uniforms:==:material . uniforms ;
var outTangents = this . outTangents ; var i:==:this . _ lastTimeIndex    this . findTimeInterval ( time , this . _ lastTimeIndex ) ;
var handlers = list . handlers ; var len:==:handlers . length ;
var panini = require ( ' panini ' ) ; var supercollider:==:require ( ' supercollider ' ) ;
var ellipsoid = globe . ellipsoid ; var surface:==:globe . _ surface ;
var crypto = require ( ' crypto ' ) ; var bigInteger:==:require ( ' jsbn ' ) . bigInteger ;
var attachments = options . attachments ; var attachmentsView:==:options . attachmentsView ;
var Promise = promiseProvider . get ( ) ; var options:==:utils . clone ( this . options ) ;
var progress = require ( ' request - progress ' ) ; var request:==:require ( ' request ' ) ;
var height = node . height  |  |  0 ; var rotation:==:node . _ rotation  |  |  0 ;
var footer = this . $ element . find ( ' . repeater - footer ' ) ; var viewport:==:this . $ element . find ( ' . repeater - viewport ' ) ;
var p = new operatorNode ( ' ^ ' , ' pow ' , [ o , a ] ) ; var n:==:new functionAssignmentNode ( ' f ' , [ ' x ' ] , p ) ;
var callFrame = callFrames [ i ] ; var script:==:target . debuggerModel . scriptForId ( callFrame . location . scriptId ) ;
var coffee = this . env . options . coffee ; var typescript:==:this . env . options . typescript ;
var panelSizex = panel . panelSizex ; var panelSizey:==:panel . panelSizey ;
var createIfStatement = parseTreeFactory . createIfStatement ; var createMemberExpression:==:parseTreeFactory . createMemberExpression ;
var nodeFrom = viz . graph . getNode ( adj . nodeFrom . i d ) ; var nodeTo:==:viz . graph . getNode ( adj . nodeTo . i d ) ;
var slide = s . slides . eq ( index ) ; var img:==:slide . find ( ' img . swiper - lazy : not ( . swiper - lazy - loaded ) : not ( . swiper - lazy - loading ) ' ) ;
var disabled = ' disabled ' ; var data:==:$ element . data ( ) ;
var axisCount = layoutInfo . axisCount ; var axisCollapseWidth:==:layoutInfo . axisCollapseWidth ;
var frame = frames [ key ] ; var spriteFrame:==:spriteFrames [ key ] ;
var stdout = Caml_io . stdout ; var stderr:==:Caml_io . stderr ;
var Package = protocol . Package ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var keys = require ( ' object ' ) . keys ; var len:==:require ( ' object ' ) . length ;
var functionInfos = this . _ functionInfos ; var idToTopDownNode:==:this . _ idToTopDownNode ;
var winston = require ( ' winston ' ) ; var cron:==:require ( ' cron ' ) . cronJob ;
var head = this . head ( ) ; var tail:==:this . tail ( ) ;
var uniformsLib = three . uniformsLib ; var shaderLib:==:three . shaderLib ;
var format = options . format ; var type:==:options . type  |  |  ' monthly ' ;
var username = req . param ( ' username ' ) ; var email:==:req . param ( ' email ' ) . trim ( ) ;
var MIDLETTER = ci . MIDLETTER ; var MIDNUM:==:ci . MIDNUM ;
var noResultsText = _ props2 . noResultsText ; var searchPromptText:==:_ props2 . searchPromptText ;
var DEFAULT_CLAUSE = ' DEFAULT_CLAUSE ' ; var DO_WHILE_STATEMENT:==:' DO_WHILE_STATEMENT ' ;
var ACCESS_KEY = process . env . BROWSER_STACK_ACCESS_KEY ; var READY_FILE:==:process . env . BROWSER_PROVIDER_READY_FILE ;
var embedAppId = document . querySelector ( ' # embedAppId ' ) ; var embedAppData:==:document . querySelector ( ' # embedAppData ' ) ;
var tessellation = options . tessellation  |  |  16 ; var sideOrientation:==:( options . sideOrientation      0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ;
var radius = data . radius  |  |  0 . 5 ; var height:==:Math . max ( ( data . height  |  |  2 ) - 2 * radius , 0 ) ;
var webpack = require ( ' webpack ' ) ; var cssnext:==:require ( ' postcss - cssnext ' ) ;
var showSeconds = $ dateFormatter . showSeconds ( format ) ; var showam:==:$ dateFormatter . showam ( format ) ;
var urlUtils = jsCommon . urlUtils ; var edgeSettings:==:tablixUtils . edgeSettings ;
var completed = Todos . completed ( ) . length ; var remaining:==:Todos . remaining ( ) . length ;
var icon = content . getAttribute ( ' data - icon ' ) ; var map:==:new bMap . map ( ' bd - map ' ) ;
var compareExchange = stdlib . atomics . compareExchange ; var fround:==:stdlib . math . fround ;
var $ tabNav = this . $ tabNav ; var href:==:$ nav . attr ( ' href ' ) ;
var createVariableDeclaration = parseTreeFactory . createVariableDeclaration ; var createVariableDeclarationList:==:parseTreeFactory . createVariableDeclarationList ;
var chain = this . chain ; var fired:==:this . fired ;
var shadow = sharedUtil . shadow ; var arithmeticDecoder:==:coreArithmeticDecoder . arithmeticDecoder ;
var layout = this . layer . layout ; var features:==:this . features ;
var uuid = require ( ' node - uuid ' ) ; var mongoose:==:require ( ' mongoose ' ) ;
var queue = this . _ queue ; var i:==:this . _ index++ ;
var minY = origin [ 1 ] + tileRange . miny * tileSize [ 1 ] * resolution ; var maxy:==:origin [ 1 ] + ( tileRange . maxy + 1 ) * tileSize [ 1 ] * resolution ;
var divisor = divisors [ i ] ; var div:==:uint32Div ( divisor ) ;
var rgb = this . rgb . build ( builder , ' v3 ' ) ; var adjustment:==:this . adjustment . build ( builder , ' fv1 ' ) ;
var crossPageChannelRole = goog . net . xpc . crossPageChannelRole ; var deferred:==:goog . async . deferred ;
var url = require ( ' url ' ) ; var winston:==:require ( ' winston ' ) ;
var passport = require ( ' passport ' ) ; var crypto:==:require ( ' crypto ' ) ;
var left = parsePercent ( positionInfo . left , containerWidth ) ; var top:==:parsePercent ( positionInfo . top , containerHeight ) ;
var selectionIdBuilder = powerbi . visuals . selectionIdBuilder ; var createInteractivityService:==:powerbi . visuals . createInteractivityService ;
var forwardMethodsToWrapper = scope . forwardMethodsToWrapper ; var mixin:==:scope . mixin ;
var filter = spec . filter ; var timeout:==:( spec . timeout     undefined ) ? TIMEOUT : spec . timeout ;
var sourceRange = traceur . util . sourceRange ; var sourcePosition:==:traceur . util . sourcePosition ;
var isCordova = platformInfo . isCordova ; var isnw:==:platformInfo . isnw ;
var pack = encodeAsString ( deconstruction . packet ) ; var buffers:==:deconstruction . buffers ;
var Asset = hexo . model ( ' Asset ' ) ; var Page:==:hexo . model ( ' Page ' ) ;
var paintType = this . paintType ; var tilingType:==:this . tilingType ;
var fs = require ( ' fs ' ) ; var path:==:require ( ' canonical - path ' ) ;
var sshpk = require ( ' sshpk ' ) ; var jsprim:==:require ( ' jsprim ' ) ;
var zip = require ( ' gulp - zip ' ) ; var shell:==:require ( ' gulp - shell ' ) ;
var a = i * tubularSegments + j ; var b:==:( i + 1 ) * tubularSegments + j ;
var rangeColor = this . rangeColors _ [ i ] ; var fromValue:==:rangeColor . fromValue ;
var event = e  |  |  window . event ; var keyCode:==:event . which  |  |  event . keyCode ;
var tanImp = c . tanImp ; var binImp:==:c . binImp ;
var b = ' var b ' ; var c:==:' var c ' ;
var iccId = this . conns [ cardIndex ] . iccId ; var icc:==:this . iccManager . getIccById ( iccId ) ;
var target = event . target ; var keyCode:==:event . keyCode ;
var key = event . detail . key ; var newValue:==:event . detail . newValue ;
var iterator1 = el . iterator1 ? ( ' , ' + ( el . iterator1 ) ) : '' ; var iterator2:==:el . iterator2 ? ( ' , ' + ( el . iterator2 ) ) : '' ;
var getViewportDimensions = require ( ' getViewportDimensions ' ) ; var reactComponentExpect:==:require ( ' reactComponentExpect ' ) ;
var components = $ ( ' . docs - components ' ) ; var platform:==:$ ( this ) . attr ( ' data - platform ' ) ;
var rotation = rectangleGeometry . _ rotation ; var stRotation:==:rectangleGeometry . _ stRotation ;
var inherits = require ( ' util ' ) . inherits ; var extend:==:require ( ' util ' ) . _ extend ;
var borderColor = nodeItemStyleModel . get ( ' borderColor ' ) ; var borderColorSaturation:==:nodeItemStyleModel . get ( ' borderColorSaturation ' ) ;
var indexOf = utils . indexOf ; var keys:==:utils . keys ;
var parser = require ( ' engine . io - parser ' ) ; var inherit:==:require ( ' component - inherit ' ) ;
var item = event . detail . item ; var filteredKeys:==:this . _ filteredKeys ;
var isNumber = leafletHelpers . isNumber ; var isSameCenterOnMap:==:leafletHelpers . isSameCenterOnMap ;
var buffer = _ dereq _ ( ' buffer ' ) ; var transform:==:_ dereq _ ( ' jstransform ' ) . transform ;
var Result = goog . result . Result ; var simpleResult:==:goog . result . simpleResult ;
var onAfterChange = jasmine . createSpy ( ' onAfterChange ' ) ; var asyncSources:==:jasmine . createSpy ( ' asyncSources ' ) ;
var mixin = scope . mixin ; var nodeList:==:scope . wrappers . nodeList ;
var WRONG_DOCUMENT_ERR    = exceptionCode . wrong_document_err    = ( ( exceptionMessage [ 4 ] = ' wrong document ' ) , 4 ) ; var invalid_character_err:==:exceptionCode . invalid_character_err     ( ( exceptionMessage [ 5 ]   ' invalid character ' ) , 5 ) ;
var metadata = this . metadata ; var versions:==:metadata [ serviceIdentifier ] . versions  |  |  [ ] ;
var valueColumn = reader . getValueColumn ( valueColumnRoleName , seriesIndex ) ; var value:==:values [ 0 ] [ seriesIndex ] ;
var labelKey = _ ref8 . labelKey ; var option:==:_ ref8 . option ;
var f = _ settings . fractions [ parseInt ( j , 10 ) ] ; var div:==:document . createElement ( ' div ' ) ;
var geometry = this . geometry ; var material:==:this . material ;
var fs = require ( ' fs ' ) ; var assert:==:require ( ' assert - plus ' ) ;
var icon = _ props . icon ; var label:==:_ props . label ;
var uiSelect = angular . element ( element [ 0 ] . querySelector ( ' . ui - select - container ' ) ) . controller ( ' uiSelect ' ) ; var choices:==:angular . element ( element [ 0 ] . querySelector ( ' . ui - select - choices ' ) ) ;
var shadow = this . options . shadow ; var offset:==:this . options . offset ;
var loop = S . in_loop ; var labels:==:S . labels ;
var scrollOffset = priv . scrollOffset ; var totalRows:==:priv . totalRows ;
var rampTime = rampTime  |  |  0 ; var tFromNow:==:tFromNow  |  |  0 ;
var createWhileStatement = parseTreeFactory . createWhileStatement ; var breakState:==:traceur . codegeneration . generator . breakState ;
var start = range . start ; var end:==:range . end ;
var Author = db . model ( ' Author ' , authorSchema ) ; var book:==:db . model ( ' book ' , bookSchema ) ;
var ymag = data . optics . parameters . ymag ; var xmag:==:data . optics . parameters . xmag ;
var cellStyle = _ ref . cellStyle ; var columnSizeAndPositionManager:==:_ ref . columnSizeAndPositionManager ;
var reactErrorUtils = require ( ' reactErrorUtils ' ) ; var accumulateInto:==:require ( ' accumulateInto ' ) ;
var data = this . data ; var series:==:data . series ;
var asec = math . asec ; var sec:==:math . sec ;
var ace = imports . ace ; var language:==:imports . language ;
var model = tooltip . _ model ; var chart:==:tooltip . _ chart ;
var attr = props . attr ; var many:==:props . many ;
var leaveClass = data . leaveClass ; var leaveToClass:==:data . leaveToClass ;
var x = game . world . centerX + xx [ i ] * perspective ; var y:==:game . world . centerY + yy [ i ] * perspective ;
var params = ob . params ; var validate:==:validateAnyAdmin ;
var Decorated = db . model ( ' gh2360 ' , decoratedSchema , ' gh2360 ' ) ; var d:==:new decorated ( title : ' 1 ' ) ;
var assign = require ( ' lodash ' ) . assign ; var expect:==:require ( ' chai ' ) . expect ;
var terrainCache = this . _ terrainCache ; var keys:==:object . keys ( terrainCache ) ;
var ui = window . app . ns ( ' ui ' ) ; var ux:==:window . app . ns ( ' ux ' ) ;
var countBy = createIterator ( baseIteratorOptions , countByIteratorOptions ) ; var every:==:createIterator ( baseIteratorOptions , everyIteratorOptions ) ;
var atNameDeclaration = traceur . syntax . trees . atNameDeclaration ; var awaitStatement:==:traceur . syntax . trees . awaitStatement ;
var decodeOffsets = decodeParams . decodeOffsets ; var decodeScales:==:decodeParams . decodeScales ;
var exportSpecifierSet = traceur . syntax . trees . exportSpecifierSet ; var expressionStatement:==:traceur . syntax . trees . expressionStatement ;
var dy = Math . min ( h - 20 , Math . max ( 20 , h * Math . max ( 0 , Math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' dy ' , this . dy ) ) ) ) ) ) ; var fillColor:==:mxUtils . getValue ( this . style , ' fillColor ' , ' # ffffff ' ) ;
var hintText = _ props2 . hintText ; var hintStyle:==:_ props2 . hintStyle ;
var axes = axesMapping [ key ] ; var changed:==:evt . detail . changed ;
var tagList = multiselect . tagList ; var tag:==:tagList . children ( ' : first ' ) ;
var app = detail . app ; var manifest:==:app . manifest ? app . manifest : app . updateManifest ;
var t = tk [ j ] ; var m:==:q . match ( t . re ) ;
var createMemberExpression = traceur . codegeneration . parseTreeFactory . createMemberExpression ; var createNumberLiteral:==:traceur . codegeneration . parseTreeFactory . createNumberLiteral ;
var pre = buildLineContent ( cm , line , null , true ) . pre ; var end:==:pre . appendChild ( zeroWidthElement ( cm . display . measure ) ) ;
var c = this . canvas ; var g:==:this . grid ;
var tr = document . createElement ( ' tr ' ) ; var td:==:document . createElement ( ' td ' ) ;
var clientX = event . center ? event . center . x : event . clientX ; var clientY:==:event . center ? event . center . y : event . clientY ;
var billboard = glyph . billboard ; var spareBillboards:==:labelCollection . _ spareBillboards ;
var optionHandlers = codeMirror . optionHandlers = ; var defaults:==:codeMirror . defaults    ;
var deepOrange600 = exports . deepOrange600 = ' # f4511e ' ; var deepOrange700:==:exports . deepOrange700    ' # e64a19 ' ;
var requirejs = require ( ' requirejs ' ) ; var chalk:==:require ( ' chalk ' ) ;
var clone = require ( ' clone ' ) ; var cookie:==:require ( ' cookie ' ) ;
var arrayComprehensionTransformer = traceur . codegeneration . arrayComprehensionTransformer ; var arrowFunctionTransformer:==:traceur . codegeneration . arrowFunctionTransformer ;
var anchor   = options . anchor  |  |  source . position ; var period:==:options . period ;
var Image = require ( ' Image ' ) ; var Text:==:require ( ' f8Text ' ) ;
var canvas = renderer . canvas ; var gl:==:renderer . gl ;
var falafel = require ( ' falafel ' ) ; var glob:==:require ( ' glob ' ) ;
var object = util . object ; var number:==:util . number ;
var spawn = require ( ' child_process ' ) . spawn ; var falafel:==:require ( ' falafel ' ) ;
var isString = sharedUtil . isString ; var getLookupTableFactory:==:sharedUtil . getLookupTableFactory ;
var full = ! ! script . getAttribute ( ' data - full ' ) ; var init:==:! ! script . getAttribute ( ' data - init ' ) ;
var appendClearCatcher = powerbi . visuals . appendClearCatcher ; var svgUtil:==:powerbi . visuals . svgUtil ;
var height = textRect . height + paddings [ 0 ] + paddings [ 2 ] ; var align:==:labelPos . align ;
var editorState = require ( ' editorState ' ) ; var expandRangeToStartOfLine:==:require ( ' expandRangeToStartOfLine ' ) ;
var length = ! ! obj & & ' length ' in obj & & obj . length ; var type:==:$ . type ( obj ) ;
var title = tab . title  |  |  '' ; var tpl:==:tab . tpl  |  |  '' ;
var width = $ ( this ) [ 0 ] . getbBox ( ) . width ; var x:==:$ ( this ) . attr ( ' x ' ) ;
var moveFromRow = settings . moveFromRow ; var moveFromCol:==:settings . moveFromCol ;
var torus = BABYLON . Mesh . createTorus ( ' torus ' , 5 , 1 , 10 , scene , false ) ; var knot:==:babylon . mesh . createTorusKnot ( ' knot ' , 2 , 0 . 5 , 128 , 64 , 2 , 3 , scene ) ;
var context = this . context _ ; var contextStrokeState:==:this . contextStrokeState _ ;
var loadingTask = this . loadingTask ; var pdfDataRangeTransport:==:this . pdfDataRangeTransport ;
var node = Parsers . node ; var or:==:Parsers . or ;
var stencil = this . stencil ; var resourceId:==:shape . resourceId ;
var editor = this . editor ; var toolbar:==:this . toolbar ;
var f = fs [ 0 ] ; var g:==:f . getGeometry ( ) ;
var colorizer = require ( ' colorizer ' ) ; var events:==:require ( ' events ' ) ;
var view = this . view ; var source:==:event . source  |  |  ;
var sampler = rendererSamplers [ texture . sampler ] ; var internalFormat:==:gltfTexture . internalFormat ;
var x = this . canvas . _ xconvertdoMtoCanvas ( pointer . x ) ; var y:==:this . canvas . _ yconvertdoMtoCanvas ( pointer . y ) ;
var node = options . node ; var ellipsisCharacter:==:options . ellipsisCharacter  |  |  ' . . . ' ;
var fs = require ( ' fs - extra ' ) ; var npm:==:require ( ' npm ' ) ;
var path = require ( ' path ' ) ; var util:==:require ( ' util ' ) ;
var y = anchorPoint . y ; var x1:==:x + box . x1 ;
var w = bb . width ; var h:==:bb . height ;
var undo = options . undo ; var redo:==:options . redo ;
var minimumHeight = parameters . minimumHeight * exaggeration ; var maximumHeight:==:parameters . maximumHeight * exaggeration ;
var focusNode = selection . focusNode ; var focusOffset:==:selection . focusOffset ;
var moduleExpression = traceur . syntax . trees . moduleExpression ; var moduleSpecifier:==:traceur . syntax . trees . moduleSpecifier ;
var cloud1 = cloudLayer . create ( -60 , 120 , ' cloud1 ' ) ; var cloud2:==:cloudLayer . create ( 900 , 170 , ' cloud2 ' ) ;
var createFunctionExpression = parseTreeFactory . createFunctionExpression ; var createGetAccessor:==:parseTreeFactory . createGetAccessor ;
var sum = Fn . sum ; var toFixed:==:fn . toFixed ;
var tokenType = traceur . syntax . tokenType ; var variableDeclaration:==:traceur . syntax . trees . variableDeclaration ;
var allowNone = activity . source . data . allowNone ; var currentToneid:==:activity . source . data . currentToneid ;
var width = chart . canvas . width ; var height:==:chart . canvas . height ;
var token = this . tokens [ i ] ; var t:==:token . text ;
var yr = this . yr ; var kl:==:this . kl ;
var flatCoordinates = gxTrackObject . flatCoordinates ; var s:==:ol . xml . getAllTextContent ( node , false ) ;
var i d = typeof options . i d ! = ' undefined ' ? options . i d : this . getIdentity ( object ) ; var store:==:this . store ;
var fs = require ( ' fs ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var attrs = ref . attrs ; var onCreate:==:ref . onCreate ;
var size = this . $ size ; var provider:==:this . provider ;
var property = _ ref . property ; var value:==:_ ref . value ;
var options = this . options ; var extensions:==:this . extensions ;
var to = this . to ; var distance:==:from . distanceTo ( hitPointWorld ) ;
var target = ast . target . visit ( this ) ; var args:==:this . _ visitAll ( ast . args ) ;
var domLazyTree = require ( ' domLazyTree ' ) ; var reactdomComponentTree:==:require ( ' reactdomComponentTree ' ) ;
var observable = this . transformAny ( tree . observable ) ; var body:==:this . transformToBlockOrStatement ( tree . body ) ;
var db = this . _ db ; var upgradeFrom:==:this . upgradeFrom ;
var fs = require ( ' fs ' ) ; var babel:==:require ( ' babel - core ' ) ;
var setName = this . setNames [ setIdx ] ; var connectSeparated:==:this . dygraph _ . getOption ( ' connectSeparatedPoints ' , setName ) ;
var hintColor = _ context$muiTheme$tex . hintColor ; var errorColor:==:_ context$muiTheme$tex . errorColor ;
var aspectRatio = options . aspectRatio ; var width:==:cropBox . width ;
var subscriber = _ ref . subscriber ; var buffer:==:_ ref . buffer ;
var username = options . username ; var email:==:options . email ;
var before = test . before ; var after:==:test . after ;
var h = this ; var u:==:r . success ;
var clipboard = imports . clipboard ; var ui:==:imports . ui ;
var tooltipModel = this . _ tooltipModel ; var ecModel:==:this . _ ecModel ;
var e = edges [ i ] ; var n1:==:e . n1 ;
var bindToAddress = document . getElementById ( ' bindToAddress ' ) . checked ; var bindToAdapter:==:document . getElementById ( ' bindToAdapter ' ) . checked ;
var createNumberLiteral = parseTreeFactory . createNumberLiteral ; var createPostfixExpression:==:parseTreeFactory . createPostfixExpression ;
var lineHeight = renderer . layerConfig . lineHeight ; var height:==:renderer . $ size . height - 1 ;
var logger = require ( ' pomelo - logger ' ) . getLogger ( ' pomelo ' , _ _ filename ) ; var fs:==:require ( ' fs ' ) ;
var context = this . context _ ; var pixelRatio:==:frameState . pixelRatio ;
var debug   = require ( ' debug ' ) ( ' axm : transport ' ) ; var stringify:==:require ( ' json - stringify - safe ' ) ;
var a = new constructor ( initialLen ) ; var s:==:a . subarray ( start , end ) ;
var pidusage   = require ( ' pidusage ' ) ; var util:==:require ( ' util ' ) ;
var session = this . session ; var start:==:range . start . row ;
var show = new showGeometryInstanceAttribute ( isAvailable & & entity . isShowing & & this . _ showProperty . getValue ( time ) & & this . _ fillProperty . getValue ( time ) ) ; var distanceDisplayCondition:==:this . _ distanceDisplayConditionProperty . getValue ( time ) ;
var t3 = window . frames [ ' t3 ' ] ; var doc:==:iframe . doc ( t3 ) ;
var bottom = frustum . bottom ; var right:==:frustum . right ;
var height = this . _ opaqueTexture . height ; var accumulationTexture:==:this . _ accumulationTexture ;
var retain = opts . retain ? protocol . RETAIN_MASK : 0 ; var topic:==:opts . topic ;
var p = path . join ( root , d ) ; var stat:==:fs . statSync ( p ) ;
var matchesInterface = scope . matchesInterface ; var addWrapNodeListMethod:==:scope . addWrapNodeListMethod ;
var def = $ firebaseUtils . defer ( ) ; var ref:==:this . $ ref ( ) . ref ( ) . push ( ) ;
var props = column . props ; var isKey:==:props . isKey  |  |  keyField      props . dataField ;
var lineDash = state . lineDash ; var lineDashOffset:==:state . lineDashOffset ;
var v3pool = this . v3pool ; var sides:==:sphereBox_sides ;
var store = new datastore ( tests . data . readOnlyItemFileTestTemplates . getTestData ( ' countries_withdates ' ) ) ; var d:==:new doh . deferred ( ) ;
var edgeData = this . edgeData ; var nodes:==:this . nodes ;
var script = debuggerModelLocation . script ( ) ; var uiSourceCode:==:this . _ editorAction . _ uiSourceCodes . get ( script ) ;
var UPDATE_OPERATORS = exports . UPDATE_OPERATORS = [ ' + + ' , ' -- ' ] ; var BOOLEAN_NUMBER_BINARY_OPERATORS:==:exports . BOOLEAN_NUMBER_BINARY_OPERATORS    [ ' > ' , ' < ' , ' > ' , ' < ' ] ;
var bind = utils . bind ; var debug:==:utils . debug ( ' core : a - entity : debug ' ) ;
var mux = muxConfig [ i ] ; var probe:==:mux . demux . probe ;
var oneOf = scope . oneOf ; var registerWrapper:==:scope . registerWrapper ;
var path = require ( ' path ' ) ; var http:==:require ( ' http ' ) ;
var typeAnnotation = this . transformAny ( tree . typeAnnotation ) ; var annotations:==:this . transformList ( tree . annotations ) ;
var hashbang = _ ref . hashbang ; var onChange:==:_ ref . onChange ;
var height = defaultValue ( options . height , 0 . 0 ) ; var perPositionHeight:==:defaultValue ( options . perPositionHeight , false ) ;
var TRACEUR = traceur . syntax . predefinedName . traceur ; var parseTreeType:==:traceur . syntax . trees . parseTreeType ;
var r = Math . sqrt ( dx*dx + dy*dy ) ; var t:==:Math . atan2 ( dy , dx ) ;
var cy = posInfo . cy ; var r:==:posInfo . r ;
var canonicalizeUrl = traceur . util . canonicalizeUrl ; var evaluateStringLiteral:==:traceur . util . evaluateStringLiteral ;
var O_EXCL = constants . O_EXCL  |  |  0 ; var O_NOCTTY:==:constants . O_NOCTTY  |  |  0 ;
var width = defaultValue ( options . width , gl . drawingBufferWidth ) ; var height:==:defaultValue ( options . height , gl . drawingBufferHeight ) ;
var skipCurrent = options . skipCurrent ! = = false ; var wrap:==:options . wrap ;
var anchor = element . data ( ' anchor ' ) ; var index:==:element . index ( ) ;
var r = Math . floor ( Math . random ( ) * tipCount ) ; var tip:==:red . _ ( ' infotips : info . tip'+r ) ;
var shape = options . shape ; var holes:==:options . holes  |  |  [ ] ;
var experimental = imports [ ' preferences . experimental ' ] ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var TNS_PREFIX = utils . TNS_PREFIX ; var findPrefix:==:utils . findPrefix ;
var async = require ( ' async ' ) ; var format:==:require ( ' util ' ) . format ;
var type = Math . floor ( Math . random ( ) * $ scope . types . length ) ; var quote:==:Math . floor ( Math . random ( ) * $ scope . quotes . length ) ;
var yaml = require ( ' js - yaml ' ) ; var util:==:require ( ' hexo - util ' ) ;
var createParenExpression = parseTreeFactory . createParenExpression ; var delete_property:==:traceur . syntax . predefinedName . delete_property ;
var options = that . options ; var timeView:==:that . timeView ;
var View = require ( ' View ' ) ; var touchableWithoutFeedback:==:require ( ' touchableWithoutFeedback ' ) ;
var size = this . _ size ; var barGroup:==:this . _ displayables . barGroup ;
var convert = require ( ' npm - convert ' ) ; var utils:==:require ( ' npm - utils ' ) ;
var startButton = document . getElementById ( ' startButton ' ) ; var callButton:==:document . getElementById ( ' callButton ' ) ;
var heading = options . heading ; var body:==:options . body ;
var valueType = powerbi . valueType ; var dateTimeSequence:==:powerbi . dateTimeSequence ;
var derivedKeywords = cachedShader . derivedKeywords ; var length:==:derivedKeywords . length ;
var cx = posInfo . cx ; var cy:==:posInfo . cy ;
var layoutVertexArray = group . layoutVertexArray ; var angle:==:-collisionTile . angle ;
var metadata = value . _ _ metadata  |  |  ; var deferred:==:value . _ _ deferred  |  |  ;
var Parent = Parse . Object . extend ( ' Parent ' ) ; var Grandparent:==:Parse . Object . extend ( ' Grandparent ' ) ;
var style = el . style ; var svgEl:==:el . _ _ svgEl ;
var continuous = opts . continuous  |  |  false ; var doc_ids:==:opts . doc_ids ;
var nssocket = require ( ' nssocket ' ) ; var events:==:require ( ' events ' ) ;
var info = sharedUtil . info ; var warn:==:sharedUtil . warn ;
var rQi = this . _ sock . get_rqi ( ) ; var rq:==:this . _ sock . rQwhole ( ) ;
var transitionManager = _ createRouterObjects . transitionManager ; var router:==:_ createRouterObjects . router ;
var utc = moment . utc ; var telegram:==:require ( ' node - telegram - bot - api ' ) ;
var root = options . root  |  |  ' ' ; var methods:==:options . methods  |  |  Object . keys ( vfs ) ;
var dataId = this . _ attributes [ dataIdAttr ] ; var each:==:this . _ each ;
var evt = this . _ evt ; var type:==:e . type ;
var max1 = e1 . max1 . value ; var min2:==:e1 . min2 . value ;
var blockDefCheck = document . getElementById ( ' blockDefCheck ' ) ; var genStubCheck:==:document . getElementById ( ' genStubCheck ' ) ;
var m = SIMD . Float32x4 . fromInt32x4Bits ( simd . int32x4 ( 0x3f800000 , 0x40000000 , 0x40400000 , 0x40800000 ) ) ; var n:==:simd . int32x4 . fromFloat32x4Bits ( m ) ;
var moduleDefinitionVisitor = traceur . codegeneration . module . moduleDefinitionVisitor ; var validationVisitor:==:traceur . codegeneration . module . validationVisitor ;
var periods = args . periods  |  |  [ ] ; var now:==:Date . now ( ) ;
var r = window . document . selection . createRange ( ) ; var type:==:window . document . selection . type . toUpperCase ( ) ;
var x = parseFloat ( hotSpotNode . getAttribute ( ' x ' ) ) ; var y:==:parseFloat ( hotSpotNode . getAttribute ( ' y ' ) ) ;
var directive = directives [ directiveIndex ] ; var annotation:==:directive . annotation ;
var left = options . left ; var right:==:options . right ;
var path = ' M ' + makepath ( xp , yp , gridline . smoothing ) ; var el:==:d3 . select ( this ) ;
var el = this . el ; var obj:==:this . obj ;
var each = zrUtil . each ; var isString:==:zrUtil . isString ;
var vDiff   = this . vDiff ; var impulse1:==:this . impulse1 ;
var utils = require ( ' utils ' ) ; var manager:==:require ( ' homescreen - manager ' ) ;
var lazypipe = require ( ' lazypipe ' ) ; var util:==:require ( ' gulp - util ' ) ;
var target = grunt . option ( ' target ' )  |  |  ' development ' ; var beta:==:grunt . option ( ' beta ' )  |  |  false ;
var Transform = require ( ' readable - stream ' ) . Transform ; var inherits:==:require ( ' inherits ' ) ;
var size = config . size  |  |  100 ; var precision:==:config . precision  |  |  2 ;
var ellipsoid = ellipseGeometry . _ ellipsoid ; var minHeight:==:minHeightFunc ( granularity , ellipsoid ) ;
var w = ( width + originX > image . width ) ? image . width - originX : width ; var h:==:( height + originY > image . height ) ? image . height - originY : height ;
var css = data . css ; var type:==:data . type ;
var uglify = require ( ' gulp - uglify ' ) ; var karma:==:require ( ' karma ' ) . server ;
var coll = new Mongo . Collection ( collName , connection : conn ) ; var o:==:observeCursor ( test , coll . find ( ) ) ;
var hours   = makeGetter ( ' hours ' ) ; var days:==:makeGetter ( ' days ' ) ;
var httpCors = goog . require ( ' goog . net . rpc . httpCors ' ) ; var testSuite:==:goog . require ( ' goog . testing . testSuite ' ) ;
var colCoordCache = this . colCoordCache ; var slatCoordCache:==:this . slatCoordCache ;
var express = require ( ' express ' ) ; var path:==:require ( ' path ' ) ;
var Dummy6 = mongoose . model ( ' Dummy6 ' , dummy6Schema ) ; var dummy7:==:mongoose . model ( ' dummy7 ' , dummy7Schema ) ;
var heightOffset = structure . heightOffset ; var heightScale:==:structure . heightScale ;
var ao = this . ao ? this . ao . buildCode ( builder , ' fv1 ' ) : undefined ; var ambient:==:this . ambient ? this . ambient . buildCode ( builder , ' c ' ) : undefined ;
var sol = stream . sol ( )  |  |  state . afterSection ; var eol:==:stream . eol ( ) ;
var styleSheet = require ( ' styleSheet ' ) ; var f8Touchable:==:require ( ' f8Touchable ' ) ;
var mode = l . pm2_env . exec_mode . split ( ' _ mode ' ) [ 0 ] ; var status:==:l . pm2_env . status ;
var key = EvpKDF . create ( keySize : keySize + ivSize ) . compute ( password , salt ) ; var iv:==:wordArray . create ( key . words . slice ( keySize ) , ivSize * 4 ) ;
var message = ' message ' ; var snippet:==:' snippet ' ;
var inherits = utils . inherits ; var Date:==:global . Date ;
var btn1 = plugin . getElement ( ' btn1 ' ) ; var btn3:==:plugin . getElement ( ' btn3 ' ) ;
var cos = Math . cos ; var sin:==:Math . sin ;
var ptr = m . _ ptr ; var size:==:m . _ size ;
var img = self . data [ idx ] [ 7 ]  |  |  self . img_sets [ img_set ] . path + idx + ' . png ' + self . img_suffix ; var title:==:self . include_title ? ' title ' ' + ( actual  |  |  self . data [ idx ] [ 3 ] [ 0 ] ) + ' ' ' : '' ;
var mode = frameState . mode ; var pass:==:frameState . passes ;
var a = aObj . start . utc ; var b:==:bObj . start . utc ;
var headers = options . headers  |  |  [ ] ; var cookies:==:options . cookies  |  |  [ ] ;
var g = readmpInt ( der , ' g ' ) ; var y:==:readmpInt ( der , ' y ' ) ;
var trans = frag . node . _ _ v_trans ; var hooks:==:trans & & trans . hooks ;
var width = props . width ; var isScrolling:==:state . isScrolling ;
var variablesInFunction = variableBinder . variablesInFunction ; var variablesInBlock:==:variableBinder . variablesInBlock ;
var boundingBoxes = this . boundingBoxes ; var polygons:==:this . polygons ;
var numCorners = pos . numCorners ; var length:==:topPositions . length ;
var cityB = points [ citybIndex ] ; var d:==:dist ( citya . x , citya . y , cityb . x , cityb . y ) ;
var colors = this . colors ; var positions:==:this . positions ;
var whileStatement = traceur . syntax . trees . whileStatement ; var withStatement:==:traceur . syntax . trees . withStatement ;
var stripHtml = util . stripHtml ; var asyncForEach:==:util . asyncForEach ;
var bindToAdapter = document . getElementById ( ' bindToAdapter ' ) . checked ; var inboundBufferSize:==:document . getElementById ( ' inboundBufferSize ' ) . value ;
var children = _ props . children ; var enterDelay:==:_ props . enterDelay ;
var TRUE2 = C . TRUE2 = 0x22 ; var TRUE3:==:C . TRUE3    0x23 ;
var x = math . complex ( 2 , 3 ) ; var a:==:math . matrix ( [ x ] ) ;
var winston = require ( ' winston ' ) ; var os:==:require ( ' os ' ) ;
var faceColors = options . faceColors ; var flat:==:( options . flat      undefined ) ? true : options . flat ;
var red700 = exports . red700 = ' # d32f2f ' ; var red800:==:exports . red800    ' # c62828 ' ;
var installer = imports . installer ; var proc:==:imports . proc ;
var legendSettings = streamGraphData . streamGraphSettings . legendSettings ; var legendData:==:streamGraphData . legendData ;
var eventType = goog . net . streams . nodeReadableStream . eventType ; var status:==:goog . net . streams . xhrStreamReader . status ;
var ctx = this . _ ctx ; var canvas:==:this . _ canvas ;
var movementX = event . movementX  |  |  event . mozMovementx ; var movementy:==:event . movementy  |  |  event . mozMovementy ;
var legendIcon = powerbi . visuals . legendIcon ; var tooltipManager:==:powerbi . visuals . tooltipManager ;
var row = this . _ grid . getOrCreateRow ( rowIndex + this . _ rowLayoutManager . _ gridOffset ) ; var column:==:this . _ grid . getOrCreateColumn ( columnIndex ) ;
var p = result . pathname  |  |  '' ; var s:==:result . search  |  |  '' ;
var timezone = comp . getFirstSubcomponent ( ' vtimezone ' ) ; var tzid:==:timezone . getFirstPropertyValue ( ' tzid ' ) ;
var autoHeight = _ props3 . autoHeight ; var cellCount:==:_ props3 . cellCount ;
var doc = bot . getWindow ( ) . document ; var body:==:doc . body ;
var writeConcern = common . writeConcern ( shallowClone ( options ) , collection , options ) ; var promiseLibrary:==:options . promiseLibrary ;
var cache = options . cached ; var request:==:this . _ requestEvents ( connection , calendar , options ) ;
var dataLabelUtils = powerbi . visuals . dataLabelUtils ; var textMeasurementService:==:powerbi . textMeasurementService ;
var startDate = recorder . get ( ' startDate ' ) ; var duration:==:recorder . get ( ' duration ' ) ;
var css = $ . extend ( , $ . blockUI . defaults . css , opts . css  |  |  ) ; var themedCSS:==:$ . extend ( , $ . blockUI . defaults . themedCSS , opts . themedCSS  |  |  ) ;
var btn3 = plugin . getElement ( ' btn3 ' ) ; var btn4:==:plugin . getElement ( ' btn4 ' ) ;
var start = options . start ; var stop:==:options . stop ;
var Map = Immutable . Map ; var Record:==:Immutable . Record ;
var name = req . fields . name ; var gender:==:req . fields . gender ;
var wraphtmlCollection = scope . wraphtmlCollection ; var unwrap:==:scope . unwrap ;
var top = parseFloat ( $ ( obj ) . offset ( ) . top ) + parseFloat ( obj . offsetHeight ) ; var left:==:parseFloat ( $ ( obj ) . offset ( ) . left ) ;
var option = _ ref8 . option ; var selectValue:==:_ ref8 . selectValue ;
var isNewLine = _ . isNewLine ; var sourceLocation:==:_ . sourceLocation ;
var When = this . When = ; var Then:==:this . Then    ;
var beautify = require ( ' js - beautify ' ) . js_beautify ; var readdir:==:Promise . promisify ( require ( ' recursive - readdir ' ) ) ;
var cropper = $ image2 . data ( ' cropper ' ) ; var canvas:==:cropper . canvas ;
var item = result . rows . item ( i ) ; var metadata:==:safeJsonParse ( item . metadata ) ;
var ppo = this . indicators . ppo ; var short:==:ppo . short . result ;
var technique = techniques [ techniqueName ] ; var parameters:==:technique . parameters ;
var front = this . _ front ; var capacity:==:this . _ capacity ;
var endpoint = subscription . endpoint ; var subscriptionId:==:subscription . subscriptionId ;
var events = require ( ' events ' ) ; var crypto:==:require ( ' crypto ' ) ;
var canvas = demo . canvas ; var renderFunc:==:demo . renderFunc ;
var mouseOverStop = ( opts . mouseOverStop=='false' |  | opts . mouseOverStop==false ) ? false : true ; var defaultPlay:==:( opts . defaultPlay   ' false' |  | opts . defaultPlay   false ) ? false : true ;
var w = layer . width + 100 ; var h:==:layer . height + 100 ;
var cropHeight = instance . get ( ' cropHeight ' ) ; var cropWidth:==:instance . get ( ' cropWidth ' ) ;
var prefilteredCubeMap16 = this . prefilteredCubeMap16  |  |  globalSky16 ; var prefilteredCubeMap8:==:this . prefilteredCubeMap8  |  |  globalSky8 ;
var socket = require ( ' socket . io ' ) ; var client:==:require ( ' socket . io - client ' ) ;
var div = document . createElement ( ' div ' ) ; var a:==:document . createElement ( ' a ' ) ;
var message = evt . detail . message  |  |  '' ; var title:==:evt . detail . title  |  |  '' ;
var extname = path . extname ( fileObj . url ) ; var basename:==:path . basename ( fileObj . url , extname ) ;
var component = components & & components . components [ this . name ] ; var schema:==:this . schema ;
var path = require ( ' path ' ) ; var nunjucks:==:require ( ' nunjucks ' ) ;
var baz = new testObject ( foo : ' baz ' ) ; var qux:==:new testObject ( foo : ' qux ' ) ;
var buffer   = require ( ' vinyl - buffer ' ) ; var wrap:==:require ( ' gulp - wrap ' ) ;
var PI = Math . PI ; var sin:==:Math . sin ;
var m = matrices [ 0 ] ; var s:==:cs_sqr ( 1 , m , false ) ;
var path1 = options . path1  |  |  options . path  |  |  ' _ ' ; var path2:==:options . path2  |  |  path1 ;
var e = ( Math . floor ( k [ i ] ) * 4 ) + ( Math . floor ( k [ i + 1 ] ) * qrcode . width * 4 ) ; var f:==:b [ Math . floor ( k [ i ] ) + qrcode . width * Math . floor ( k [ i + 1 ] ) ] ;
var keys = Object . keys ( this . states ) ; var length:==:keys . length ;
var through = require ( ' through2 ' ) ; var os:==:require ( ' os ' ) ;
var getLabelFormattedText = powerbi . visuals . dataLabelUtils . getLabelFormattedText ; var objectEnumerationBuilder:==:powerbi . visuals . objectEnumerationBuilder ;
var mcc = this . _ iccCard . iccInfo . mcc  |  |  ' 000 ' ; var mnc:==:this . _ iccCard . iccInfo . mnc  |  |  ' 00 ' ;
var expect = require ( ' chai ' ) . expect ; var cst:==:require ( ' cst ' ) ;
var target = controllerHost . target ; var zoomLimit:==:controllerHost . zoomLimit ;
var margin = this . margin ; var width:==:this . viewportIn . width ;
var getter = this . reflector . getter ( i d ) ; var setter:==:this . reflector . setter ( i d ) ;
var trackedEntity = viewer . _ trackedEntity ; var currentTime:==:viewer . clock . currentTime ;
var block = this . blocks [ i ] ; var node:==:this . _ ifNode ( callback ( block . node , ' blocks [ ' + i + ' ] . node ' , this ) ) ;
var Node = mod . Node ; var Hashtable:==:mod . Hashtable ;
var log = require ( dirs . core + ' log ' ) ; var async:==:require ( ' async ' ) ;
var margin = this . _ root . _ margin ; var is:==:this . _ initialSize ;
var utils = PouchDB . utils . mapReduceUtils ; var promise:==:pouchdb . utils . promise ;
var Page = Facade . Page ; var Track:==:Facade . Track ;
var w = size . width ; var h:==:size . height ;
var Previewer = imports . Previewer ; var c9:==:imports . c9 ;
var logger = require ( ' pomelo - logger ' ) . getLogger ( ' pomelo ' , _ _ filename ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var editor = sp . $ editors [ 1 ] ; var i d:==:sp . $ editors [ 0 ] . session . $ mode . $ i d  |  |  ' ' ;
var Request = fxdriver . Request ; var Response:==:fxdriver . Response ;
var assert = require ( ' assert ' ) ; var vm:==:require ( ' vm ' ) ;
var rgb = ntc . rgb ( color ) ; var r:==:rgb [ 0 ] , g    rgb [ 1 ] , b    rgb [ 2 ] ;
var prompt = require ( ' gulp - prompt ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var vector = intersectConvex_vector ; var minDistIntersect:==:intersectconvex_mindistintersect ;
var texture = sprite . texture ; var baseTexture:==:texture . baseTexture ;
var rowRenderer = _ props3 . rowRenderer ; var rowStyle:==:_ props3 . rowStyle ;
var showTitle = powerbi . dataViewObject . getValue ( this . legendObjectProperties , visuals . legendProps . showTitle , true ) ; var titleText:==:powerbi . dataViewObject . getValue ( this . legendObjectProperties , visuals . legendProps . titleText , this . layerLegendData ? this . layerLegendData . title : '' ) ;
var scene3dOnly = frameState . scene3dOnly ; var context:==:frameState . context ;
var color = e . color ; var fillAlpha:==:g . getNumericOption ( ' fillAlpha ' , setName ) ;
var settings = editor . settings , dom = editor . dom , selection = editor . selection ; var schema:==:editor . schema , blockElements    schema . getBlockElements ( ) ;
var ui = imports . ui ; var vfs:==:imports . vfs ;
var botkit = require ( ' botkit ' ) ; var mongodb:==:require ( ' mongodb ' ) ;
var videoSendBitrate = options . videoSendBitrate ; var videoSendInitialBitrate:==:options . videoSendInitialBitrate ;
var mockClock = goog . require ( ' goog . testing . mockClock ' ) ; var testSuite:==:goog . require ( ' goog . testing . testSuite ' ) ;
var isSafeProperty = _ _ webpack_require _ _ ( 17 ) . isSafeProperty ; var hasOwnProperty:==:_ _ webpack_require _ _ ( 5 ) . hasOwnProperty ;
var typeParameters = this . transformAny ( tree . typeParameters ) ; var objectType:==:this . transformAny ( tree . objectType ) ;
var position = geometry . attributes . position . array ; var m:==:matrix . elements ;
var analyse = exports . analyse = pipeline . analyse . bind ( pipeline ) ; var transform:==:exports . transform    pipeline . transform . bind ( pipeline ) ;
var measureSvgTextHeight = powerbi . textMeasurementService . measureSvgTextHeight ; var estimateSvgTextHeight:==:powerbi . textMeasurementService . estimateSvgTextHeight ;
var fs = require ( ' fs ' ) ; var createServer:==:require ( ' http - server ' ) . createServer ;
var stageWidth = this . config . stageWidth ! = = undefined ? this . config . stageWidth : ( window ? window . innerWidth : 1024 ) ; var stageHeight:==:this . config . stageHeight !    undefined ? this . config . stageHeight : ( window ? window . innerHeight : 1024 ) ;
var Table = require ( ' fixedDataTableNew . react ' ) ; var column:==:require ( ' fixedDataTableColumnNew . react ' ) ;
var projection = this . renderSession . projection ; var offset:==:this . renderSession . offset ;
var minute = parseInt ( this . container . find ( ' . left . minuteselect ' ) . val ( ) , 10 ) ; var second:==:this . timePickerSeconds ? parseInt ( this . container . find ( ' . left . secondselect ' ) . val ( ) , 10 ) : 0 ;
var parent = $ this . parents ( ' ul ' ) . first ( ) ; var ul:==:parent . find ( ' ul : visible ' ) . slideUp ( animationSpeed ) ;
var foldWidgets = this . $ showFoldWidgets & & session . foldWidgets ; var diffStates:==:session . bgTokenizer . diffStates ;
var showEvents = t . showEvents ; var hideEvents:==:t . hideEvents ;
var eventElementHandlers = t . eventElementHandlers ; var showEvents:==:t . showEvents ;
var browserify = require ( ' browserify ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var Panel = imports . Panel ; var panels:==:imports . panels ;
var createExpressionStatement = parseTreeFactory . createExpressionStatement ; var createIdentifierExpression:==:parseTreeFactory . createIdentifierExpression ;
var marked = require ( ' marked ' ) ; var util:==:require ( ' util ' ) ;
var clearOverlays = t . clearOverlays ; var renderDayEvents:==:t . renderDayEvents ;
var iceServers = options . iceServers  |  |  defaults . iceServers ; var constraints:==:options . constraints  |  |  defaults . constraints ;
var markAsOriginatingFromRejection = errors . markAsOriginatingFromRejection ; var canAttach:==:errors . canAttach ;
var headers = resp . httpResponse . headers  |  |  ; var region:==:headers [ ' x - amz - bucket - region ' ]  |  |  null ;
var Stream = require ( ' stream ' ) . Stream ; var Transport:==:require ( ' . . ' ) . Transport ;
var step = data . step ; var tour:==:data . tour ;
var str = replaceRaw ( json . stringify ( elements [ i ] . value . value ) ) ; var loc:==:elements [ i ] . location ;
var https = require ( ' https ' ) ; var pem:==:require ( ' pem ' ) ;
var name = new manifestHelper ( manifest ) . name ; var origin:==:app . origin ;
var totalRows = this . instance . getSetting ( ' totalRows ' ) ; var rowHeaders:==:this . wot . getSetting ( ' rowHeaders ' ) . length ;
var x = _ this . currTouch . x = touch . clientx - rect . left ; var y:==:_ this . currTouch . y    touch . clienty - rect . top ;
var events = this . events ; var tracks:==:this . tracks ;
var textAlign = style . textAlign ; var font:==:style . textFont  |  |  style . font ;
var isInteger = _ _ webpack_require _ _ ( 2 ) . isInteger ; var size:==:_ _ webpack_require _ _ ( 3 ) . size ;
var interval = list [ i ] . interval ; var close:==:list [ i ] . close ;
var methods = options . methods  |  |  Object . keys ( vfs ) ; var readonly:==:' readonly ' in options ? options . readonly : false ;
var impulse = this . impulse ; var drift:==:this . options . drift ;
var animation = this . _ animation ; var paused:==:this . paused ;
var completed = todosCollection . completed ( ) . length ; var remaining:==:todosCollection . remaining ( ) . length ;
var availablePlugins = exports . availablePlugins = ; var availablePresets:==:exports . availablePresets    ;
var x = box . right + node . getStyle ( ' space - left ' ) ; var y:==:box . cy ;
var buildDir = options . buildDir ; var zipFile:==:options . zipFile ;
var placeholder = instance . get ( ' placeholder ' ) ; var proxyNode:==:instance . get ( ' proxyNode ' ) ;
var async = require ( ' async ' ) ; var flash:==:require ( ' connect - flash ' ) ;
var fs = require ( ' fs ' ) ; var jsdom:==:require ( ' jsdom ' ) . jsdom ;
var positionOnActivate = this . state . touchable . positionOnActivate ; var dimensionsOnActivate:==:this . state . touchable . dimensionsOnActivate ;
var querystring = require ( ' querystring ' ) ; var uglify:==:require ( ' uglify - js ' ) ;
var width = hl_lh_hh . width ; var height:==:hl_lh_hh . height ;
var subPixelOptimize = graphic . subPixelOptimize ; var shape:==:param . shape ;
var r = range . create2 ( this . range . _ contentStart + 1 , this . range . end - 1 ) ; var source:==:this . source ( ) ;
var g = p . get ( ' global ' ) ; var lastIndex:==:p . get ( ' lastIndex ' ) ;
var callback = callback  |  |  false ; var implicitYou:==:this . implicitYou ( ) ;
var separator = options . separator  |  |  ' . ' ; var precision:==:options . precision ;
var async = require ( ' async ' ) ; var utils:==:require ( ' keystone - utils ' ) ;
var preWidth = curAttrs . preWidth  |  |  curAttrs . width ; var preHeight:==:curAttrs . preHeight  |  |  curAttrs . height ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var markdownFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' markdownFieldTestObject ' ) ) ;
var isValidBounds = leafletBoundsHelpers . isValidBounds ; var isNumber:==:leafletHelpers . isNumber ;
var operator = tree . operator ; var operand:==:tree . operand ;
var localAnchora = this . localAnchora ; var localAnchorb:==:this . localAnchorb ;
var parent = plugin . getElement ( ' parent ' ) ; var btn1:==:plugin . getElement ( ' btn1 ' ) ;
var options = this . _ options ; var center:==:Property . getValueOrUndefined ( entity . position , time , options . center ) ;
var chalk = require ( ' chalk ' ) ; var sep:==:pathFn . sep ;
var value = element ( by . binding ( ' value  |  date : ' HH : mm ' ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var width = game . cache . getImage ( images [ i ] ) . width ; var height:==:game . cache . getImage ( images [ i ] ) . height ;
var debuggerClient = this . _ debuggerClient ; var injectorClient:==:this . _ injectorClient ;
var x = this . centerCoordinates . x + radius * math . sin ( angleConvert * hsv . h ) ; var y:==:this . centerCoordinates . y + radius * math . cos ( angleConvert * hsv . h ) ;
var reactInstrumentation = require ( ' reactInstrumentation ' ) ; var quoteAttributeValueForBrowser:==:require ( ' quoteAttributeValueForBrowser ' ) ;
var Display = Windows . Graphics . Display ; var displayOrientations:==:windows . graphics . display . displayOrientations ;
var bool = ' boolean ' ; var number:==:' number ' ;
var zr = this . _ _ zr ; var storage:==:this . _ _ storage ;
var createObjectLiteralExpression = parseTreeFactory . createObjectLiteralExpression ; var createPropertyNameAssignment:==:parseTreeFactory . createPropertyNameAssignment ;
var fs = require ( ' fs ' ) ; var https:==:require ( ' https ' ) ;
var pathname = url . parse ( request . url ) . pathname ; var host:==:request . headers . host ;
var ReactDOM = require ( ' ReactDOM ' ) ; var reactComponentWithPureRenderMixin:==:require ( ' reactComponentWithPureRenderMixin ' ) ;
var popupWindowFeatures = _ ref . popupWindowFeatures ; var popupWindowTarget:==:_ ref . popupWindowTarget ;
var assetManager = this . assetManager ; var imagesPath:==:this . config . imagesPath ;
var options = this . _ options ; var positions:==:positionsProperty . getValue ( iso8601 . minimum_value , options . positions ) ;
var path = require ( ' path ' ) ; var lex:==:require ( ' pug - lexer ' ) ;
var height = $ embediFrame . attr ( ' height ' ) ; var name:==:$ embediFrame . attr ( ' name ' ) ;
var divisionByZero = fraction [ ' divisionByZero ' ] = createError ( ' divisionByZero ' ) ; var invalidParameter:==:fraction [ ' invalidParameter ' ]    createError ( ' invalidParameter ' ) ;
var connect = require ( ' connect ' ) ; var fs:==:require ( ' fs ' ) ;
var iframe = plugin . activeSession . iframe ; var editor:==:plugin . activeSession . editor ;
var ejs = require ( ' ejs ' ) ; var yaml:==:require ( ' js - yaml ' ) ;
var model = this . model ; var seriesIndex:==:model . get ( ' seriesIndex . ' + type ) ;
var setVal = foreign . setVal ; var getVal:==:foreign . getVal ;
var ranges = this . ranges ; var editor:==:this . editor ;
var paddingBottom = options . paddingBottom ; var paddingLeft:==:options . paddingLeft ;
var editors = imports . editors ; var Editor:==:imports . Editor ;
var normalizePath = util . normalizePath ; var mkdirRecursive:==:util . mkdirRecursive ;
var extrudedHeight = options . extrudedHeight ; var stRotation:==:options . stRotation ;
var type = ref . type ; var enterClass:==:ref . enterClass ;
var _ elImage = this . _ elImage ; var _ oContext:==:this . _ oContext ;
var sass    = require ( ' gulp - ruby - sass ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var x = euler . _ x , y = euler . _ y , z = euler . _ z , order = euler . order ; var cos:==:Math . cos ;
var onlyChild = require ( ' onlyChild ' ) ; var createElement:==:reactElement . createElement ;
var contents = stripComments ( file . contents . toString ( ) ) ; var relative:==:file . relative ;
var filterQueryOp = this . _ filterQueryOp ; var value:==:this . _ value ;
var children = this . _ element . children ; var transform:==:CSS . transform ;
var polygonOffset = renderState . polygonOffset ; var enabled:==:polygonOffset . enabled ;
var container = self . container ; var minContainerWidth:==:number ( options . minContainerWidth )  |  |  200 ;
var paths = opts . paths  |  |  ; var pathMap:==:opts . pathMap ;
var createParameterReference = parseTreeFactory . createParameterReference ; var createPromise:==:parseTreeFactory . createPromise ;
var pos = w . _ position ; var dim:==:w . _ dimension ;
var options = that . options ; var animation:==:options . animation ;
var dbname = options . dbargs . dbname ; var executes:==:options . executes ;
var scrollTop = $ window . scrollTop ( ) ; var scrollLeft:==:$ window . scrollLeft ( ) ;
var lineNumber = this . _ breakpoint . _ lineNumber ; var columnNumber:==:this . _ breakpoint . _ columnNumber ;
var script = command . script ; var context:==:command . context  |  |  ;
var constrain = Fn . constrain ; var fma:==:Fn . fma ;
var scene = controller . _ scene ; var globe:==:controller . _ globe ;
var ace = imports . ace ; var Document:==:imports . Document ;
var device = options . device ; var sourceCubemap:==:options . sourceCubemap ;
var keys = ' keys ' in opts ? opts . keys : false ; var limit:==:' limit ' in opts ? opts . limit : false ;
var container = this . container ; var options:==:util . extend ( , this . options ) ;
var reactCompositeComponentTypes = require ( ' reactCompositeComponentTypes ' ) ; var reactErrorUtils:==:require ( ' reactErrorUtils ' ) ;
var parse = propertyTypes . selector . parse ; var stringify:==:propertyTypes . selector . stringify ;
var prop = this . properties [ propChanged . key ] ; var property:==:this . getStencil ( ) . property ( propChanged . key ) ;
var hasStroke = style . hasStroke ( ) ; var hasFill:==:style . hasFill ( ) ;
var dy1 = Math . max ( 0 , Math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' dy1 ' , this . dy1 ) ) ) ) ; var dx1:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx1 ' , this . dx1 ) ) ) ) ;
var fixedHeight = _ props3 . fixedHeight ; var keepCollapsedContent:==:_ props3 . keepCollapsedContent ;
var SCRIPT = ' SCRIPT ' ; var SET_ACCESSOR:==:' SET_ACCESSOR ' ;
var isPrimitive = util . isPrimitive ; var wrapsPrimitiveReceiver:==:util . wrapsPrimitiveReceiver ;
var disableKeyboardFocus = _ props3 . disableKeyboardFocus ; var disableTouchRipple:==:_ props3 . disableTouchRipple ;
var b = goog . bind ( getFoo , obj , ' hot ' ) ; var p:==:goog . functions . partialRight ( b , ' dog ' ) ;
var evt = isUndefined ( v [ ' evt ' ] ) ? ' mouseover ' : v [ ' evt ' ] ; var pos:==:isUndefined ( v [ ' pos ' ] ) ? ' 43 ' : v [ ' pos ' ] ;
var entityManager = saveContext . entityManager ; var helper:==:entityManager . helper ;
var font = defaultValue ( options . font , ' 10px sans - serif ' ) ; var stroke:==:defaultValue ( options . stroke , false ) ;
var majorTicks = this . majorTicks _ ; var minorTicks:==:this . minorTicks _ ;
var state = this . state ; var skeleton:==:this . skeleton ;
var offset = data . offset  |  |  x : 0 , y : 0 ; var repeat:==:data . repeat  |  |  x : 1 , y : 1 ;
var ALIAS_KEYS = exports . ALIAS_KEYS = ; var NODE_FIELDS:==:exports . NODE_FIELDS    ;
var rename = require ( ' gulp - rename ' ) ; var ignore:==:require ( ' gulp - ignore ' ) ;
var nssocket   = require ( ' nssocket ' ) ; var events:==:require ( ' events ' ) ;
var fTrue = makeCallOrderLogger ( ' fTrue ' , true ) ; var gFalse:==:makeCallOrderLogger ( ' gFalse ' , false ) ;
var Text = window . Text ; var Comment:==:window . Comment ;
var error = jQuery . sap . log . error ; var warning:==:jQuery . sap . log . warning ;
var annotations = this . transformList ( tree . annotations ) ; var body:==:this . getDoNotRecurse ( tree ) ? tree . body : this . transformAny ( tree . body ) ;
var i d = schema . options . i d ; var keys:==:Object . keys ( schema . options ) ;
var rights = this . rights ; var len:==:lefts . length ;
var item = event . detail . item ; var sortedKeys:==:this . _ sortedKeys ;
var orderby = options . orderby  |  |  ' name ' ; var order:==:options . order  |  |  1 ;
var changed = this . changed ; var prev:==:this . _ previousAttributes ;
var addSpy = jasmine . createSpy ( ' addSpy ' ) ; var removeSpy:==:jasmine . createSpy ( ' removeSpy ' ) ;
var util = require ( ' util ' ) ; var connect:==:require ( ' connect ' ) ;
var default_proxy_server_proc = background . unblock_youku . default_proxy_server_proc ; var default_proxy_server_addr:==:background . unblock_youku . default_proxy_server_addr ;
var el = this . element ; var o:==:this . options ;
var predefinedMetrics = ob . predefinedMetrics ; var userProps:==:ob . userProps ;
var error = logEntry . error ; var took:==:logEntry . took ;
var vizion = require ( ' vizion ' ) ; var fs:==:require ( ' fs ' ) ;
var CLASS_EXPRESSION = ' CLASS_EXPRESSION ' ; var COMMA_EXPRESSION:==:' COMMA_EXPRESSION ' ;
var beforeFooter = this . _ options . tooltips . callbacks . beforeFooter . apply ( this , arguments ) ; var footer:==:this . _ options . tooltips . callbacks . footer . apply ( this , arguments ) ;
var pickIds = model . _ pickIds ; var length:==:pickIds . length ;
var Tab = imports . Tab ; var Pane:==:imports . Pane ;
var glob = require ( ' glob ' ) ; var madge:==:require ( ' madge ' ) ;
var parseqs = require ( ' parseqs ' ) ; var inherit:==:require ( ' component - inherit ' ) ;
var dataView = this . dataView = options . dataViews [ 0 ] ; var viewport:==:options . viewport ;
var client = this . client ; var page:==:client . api . page . simplePageObj ( ) ;
var accessTokenEvents = exports . accessTokenEvents = _ _ webpack_require _ _ ( 335 ) ; var metadataService:==:exports . metadataService    _ _ webpack_require _ _ ( 306 ) ;
var transform = exports . transform = pipeline . transform . bind ( pipeline ) ; var transformFromAst:==:exports . transformFromAst    pipeline . transformFromAst . bind ( pipeline ) ;
var cancel = options . cancel  |  |  gettext ( ' Cancel ' ) ; var proceed:==:options . proceed  |  |  gettext ( ' Proceed ' ) ;
var locStartColor = this . _ startColor , locStartColorVar = this . _ startColorVar ; var locEndColor:==:this . _ endColor , locEndColorVar    this . _ endColorVar ;
var opts = _ _ alloyId15 . opts  |  |  ; var models:==:_ _ alloyId14 . models ;
var east = rectangle . east ; var west:==:rectangle . west ;
var w = this . _ element . width ; var h:==:this . _ element . height ;
var records = $ ( ' # grid_'+ this . name + ' _ records ' ) ; var frecords:==:$ ( ' # grid_'+ this . name + ' _ frecords ' ) ;
var time = this . arg ( ' time ' ) ; var format:==:this . h ( ' format ' ) ;
var springConfig = _ props2 . springConfig ; var isOpenedChanged:==:this . state . isOpenedChanged ;
var d1 = _ addDiv ( ' d1 ' ) , d2 = _ addDiv ( ' d2 ' ) , d3 = _ addDiv ( ' d3 ' ) ; var conn:==:_ jsPlumb . connect ( source : d1 , target : d2 , overlays : [ ' arrow ' ] ) ;
var current = this . _ currentAttributes ; var changes:==:this . _ changes ;
var f = fulfillBuiltInSoon ( ' f ' , 30 ) ; var g:==:rejectThenableSoon ( ' rejected - g ' , 10 ) ;
var chalk = require ( ' chalk ' ) ; var tildify:==:require ( ' tildify ' ) ;
var points = this . points ( ) ; var n:==:points . length ;
var search = obj . searches [ search_ind ] ; var range:==:$ ( ' # grid_'+ obj . name + ' _ range_'+ search_ind ) ;
var hint = hints [ $ item . data ( ' index ' ) ] ; var item:==:$ item . data ( ' item ' ) ;
var key = event . detail . key ; var oldIndex:==:event . detail . oldIndex ;
var year = date . year ( ) ; var month:==:date . month ( ) + 1 ;
var unsubscribe = this . _ unsubscribe ; var subscriptions:==:this . _ subscriptions ;
var f8SegmentedControl = require ( ' f8SegmentedControl ' ) ; var parallaxBackground:==:require ( ' parallaxBackground ' ) ;
var route = response . routes [ 0 ] ; var path:==:route . overview_path ;
var formatString = visuals . valueFormatter . getFormatString ( valuesMetadata , formatStringProp ) ; var pct:==:visuals . valueFormatter . format ( percentage , pctFormatString ) ;
var Animated = require ( ' Animated ' ) ; var edgeInsetsPropType:==:require ( ' edgeInsetsPropType ' ) ;
var actualSize = this . actualSize . multiplyByFloats ( isCanvas ? 1 : this . scalex , isCanvas ? 1 : this . scaley ) ; var w:==:hasLayout ? ( this . layoutAreaPos . x + this . layoutArea . width ) : ( marginh + actualSize . width ) ;
var name = opts . name  |  |  gettextCatalog . getString ( ' personal wallet ' ) ; var myName:==:opts . myName  |  |  gettextCatalog . getString ( ' me ' ) ;
var executeDispatch = eventPluginUtils . executeDispatch ; var pluginModule:==:eventPluginRegistry . getPluginModuleForEvent ( event ) ;
var replace = require ( ' replace ' ) ; var prompt:==:require ( ' prompt ' ) ;
var props = this . props ; var foreground:==:this . dom . foreground ;
var right = bounds . right  |  |  0 ; var bottom:==:bounds . bottom  |  |  0 ;
var attr = DS . attr ; var belongsTo:==:ds . belongsTo ;
var firebase = require ( ' firebase ' ) ; var path:==:require ( ' path ' ) ;
var count = offsets [ j ] . count ; var index:==:offsets [ j ] . index ;
var b = goog . Promise . resolve ( ' b ' ) ; var c:==:rejectSoon ( ' rejected - c ' , 10 ) ;
var CLEARANCE = goog . ui . editor . Bubble . VERTICAL_CLEARANCE _ ; var bubbleContainer:==:bubble . bubbleContainer _ ;
var aax = trace . aaxis ; var bax:==:trace . baxis ;
var anchor = anchors [ i ] ; var href:==:anchor . getAttribute ( ' href ' ) ;
var section = document . createElement ( ' section ' ) ; var header:==:group . querySelector ( ' header ' ) ;
var type = matchingTel . type  |  |  ' mobile ' ; var carrier:==:matchingTel . carrier ;
var matrix = object . matrixWorld ; var me:==:matrix . elements ;
var min = that . options . min ; var element:==:that . element ;
var message = _ ref4 . message ; var assert:==:_ ref4 . assert ;
var Plugin = imports . Plugin ; var menus:==:imports . menus ;
var title = $ ( this ) . data ( ' title ' ) ; var url:==:$ ( this ) . data ( ' url ' ) ;
var options = this . options ; var scrollTop:==:this . $ window . scrollTop ( ) ;
var lastQuadrant = instance . lastQuadrant ; var quadrant:==:instance . quadrant ;
var values = coerce ( ' values ' ) ; var visible:==:coerce ( ' visible ' , values . length > 0 ) ;
var height = options . height ; var extrudedHeight:==:options . extrudedHeight ;
var gulp = require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ; var util:==:require ( ' gulp - util ' ) ;
var cellRangeRenderer = props . cellRangeRenderer ; var cellStyle:==:props . cellStyle ;
var globalScope = sharedGlobal . globalScope ; var pdfjs:==:sharedGlobal . pdfjs ;
var btnPerf = document . getElementById ( ' btnPerf ' ) ; var miscCounters:==:document . getElementById ( ' miscCounters ' ) ;
var each = zrUtil . each ; var curry:==:zrUtil . curry ;
var fields = method . fields ; var toolbar:==:method . toolbar ;
var packageName = options . packageName ; var version:==:options . version ;
var orderBy = $ filter ( ' orderBy ' ) ; var filter:==:$ filter ( ' filter ' ) ;
var resolveAssetSource = require ( ' resolveAssetSource ' ) ; var react:==:require ( ' react ' ) ;
var registerWrapper = scope . registerWrapper ; var renderAllPending:==:scope . renderAllPending ;
var confirm = this . querySelector ( ' gaia - buttons . confirm ' ) ; var cancel:==:this . querySelector ( ' gaia - buttons . cancel ' ) ;
var createBreakStatement = parseTreeFactory . createBreakStatement ; var createContinueStatement:==:parseTreeFactory . createContinueStatement ;
var i d = _ getAttribute ( element , ' i d ' ) ; var endpoints:==:endpointsByElement [ i d ] ;
var createPromiseCapability = sharedUtil . createPromiseCapability ; var combineUrl:==:sharedUtil . combineUrl ;
var targetIndex = _ ref3 . targetIndex ; var totalSize:==:_ ref3 . totalSize ;
var ignore_quoted = options . ignore_quoted ; var debug:==:( options . debug !    false ) ;
var sass = require ( ' gulp - ruby - sass ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var c = this . unicodeChar ( n ) ; var hdw:==:this . gethdw ( c , unknown . className ) ;
var os = require ( ' os ' ) ; var platform:==:os . platform ( ) ;
var options = this . options ; var val:==:$ element . is ( ' input ' ) ? ' val ' : ' html ' ;
var member = members [ m ] ; var size:==:sizeOf ( member . type ) ;
var ssaoRatio = ratio . ssaoRatio  |  |  ratio ; var combineRatio:==:ratio . combineRatio  |  |  ratio ;
var response = lang_1 . isPresent ( xhr . response ) ? xhr . response : xhr . responseText ; var status:==:xhr . status      1223 ? 204 : xhr . status ;
var html = doc . appendChild ( doc . createElementns ( ns , ' html ' ) ) ; var head:==:html . appendChild ( doc . createElementns ( ns , ' head ' ) ) ;
var invert = options . invert ; var filter:==:options . filter ;
var pathname = _ ref . pathname ; var query:==:_ ref . query ;
var path = angular . element ( node . querySelector ( ' path ' ) ) ; var startIndeterminate:==:$ mdProgressCircular . startIndeterminate ;
var i d = e . getAttribute ( ' i d ' ) ; var from:==:e . getAttribute ( ' from ' ) ;
var hovermode = opts . hovermode ; var rotateLabels:==:opts . rotateLabels ;
var categories = categorical & & categorical . categories  |  |  [ ] ; var values:==:categorical & & categorical . values  |  |  [ ] ;
var episode = $ ( e . currentTarget ) . attr ( ' data - episode ' ) ; var season:==:$ ( e . currentTarget ) . attr ( ' data - season ' ) ;
var uri = setup . uri ; var assert:==:require ( ' assert ' ) ;
var isHorizontal = referenceLineHelper . isHorizontal ( refLine , options . axes ) ; var viewport:==:options . viewport ;
var y = tag . getAttribute ( ' y ' ) ; var p:==:node . pos . getp ( true ) ;
var recordingModule = require ( ' nativeModules ' ) . datePickerDialogRecordingModule ; var view:==:require ( ' view ' ) ;
var s = ' What 's the width of this line ? ' ; var textWidth:==:p . textWidth ( s ) ;
var measureSvgTextWidth = powerbi . textMeasurementService . measureSvgTextWidth ; var measureSvgTextHeight:==:powerbi . textMeasurementService . measureSvgTextHeight ;
var should = require ( ' should ' ) ; var versions:==:require ( ' apidoc - example ' ) . versions ;
var expect = require ( ' chai ' ) . expect ; var fs:==:require ( ' fs ' ) ;
var SPREAD_PATTERN_ELEMENT = ' SPREAD_PATTERN_ELEMENT ' ; var STATE_MACHINE:==:' STATE_MACHINE ' ;
var aoColumns = oSettings . aoColumns ; var aoData:==:oSettings . aoData ;
var diff = require ( ' diff ' ) ; var run:==:require ( path . join ( _ _ dirname , ' run - solution ' ) ) ;
var template = this . _ template ; var list:==:this . list ;
var decode = decodeuriComponent ; var trim:==:require ( ' trim ' ) ;
var vizion   = require ( ' vizion ' ) ; var debug:==:require ( ' debug ' ) ( ' pm2 : god ' ) ;
var sFilter = blanket . options ( ' sap - ui - cover - only ' )  |  |  sFilterAttr ; var sAntiFilter:==:blanket . options ( ' sap - ui - cover - never ' )  |  |  sAntiFilterAttr ;
var pos = this [ ' pos ' ] ; var w:==:this [ ' w ' ] ;
var i d = e . getAttribute ( ' i d ' ) ; var from:==:e . getAttribute ( ' from ' )  |  |  '' ;
var open = document . getElementById ( ' open ' ) ; var opensave:==:document . getElementById ( ' opensave ' ) ;
var reactdomFrameScheduling = require ( ' reactdomFrameScheduling ' ) ; var reactdomInjection:==:require ( ' reactdomInjection ' ) ;
var tar = require ( ' gulp - tar ' ) ; var gzip:==:require ( ' gulp - gzip ' ) ;
var len = refs . length ; var timescale:==:sidx . timescale ;
var h = div2 . height ( ) ; var w:==:div2 . width ( ) ;
var scrollToRow = props . scrollToRow ; var scrollTop:==:state . scrollTop ;
var offsetLeft = _ props . offsetLeft ; var props:==:_ objectWithoutProperties ( _ props , [ ' offsetLeft ' ] ) ;
var T_COMMENT = Sk . Tokenizer . T_COMMENT ; var T_NL:==:Sk . Tokenizer . T_NL ;
var recid = $ ( el ) . attr ( ' recid ' ) ; var field:==:$ ( el ) . attr ( ' field ' ) ;
var heightSegments = opts & & opts . heightSegments ! = = undefined ? opts . heightSegments : 1 ; var sides:==:opts & & opts . sides !    undefined ? opts . sides : 20 ;
var object = _ react$PropTypes . object ; var string:==:_ react$PropTypes . string ;
var row = this . range . from . row ; var col:==:this . range . from . col ;
var sub = axon . socket ( ' sub - emitter ' ) ; var sub_sock:==:this . sub_sock    sub . connect ( sub_port ) ;
var postcss = require ( ' gulp - postcss ' ) ; var doiuse:==:require ( ' doiuse ' ) ;
var request = info . request ; var response:==:info . response ;
var front = this . _ front ; var length:==:this . _ length ;
var origin = this . _ origin ; var xAxis:==:this . _ xAxis ;
var type = schema . type  |  |  ' object ' ; var format:==:schema . format ;
var multitree = config . multitree ; var align:==:config . align ;
var book = store . createRecord ( ' book ' , name : ' the greatest book ' ) ; var relationship:==:book . _ internalModel . _ relationships . get ( ' author ' ) ;
var reliableSocket = kaefer . reliableSocket ; var reconnectSocket:==:kaefer . reconnectSocket ;
var htmldomPropertyConfig = require ( ' htmldomPropertyConfig ' ) ; var reactBrowserEventEmitter:==:require ( ' reactBrowserEventEmitter ' ) ;
var source = require ( ' vinyl - source - stream ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var t = $ ( ' # templates . report ' ) . clone ( ) ; var js:==:$ ( ' div . js ' , this ) . text ( ) . trim ( ) ;
var object = intersection . object ; var material:==:object . material ;
var group = el . getAttribute ( ' data - group ' ) ; var placeholder:==:el . getAttribute ( ' data - placeholder ' ) ;
var ARRAY_COMPREHENSION = ' ARRAY_COMPREHENSION ' ; var ARRAY_LITERAL_EXPRESSION:==:' ARRAY_LITERAL_EXPRESSION ' ;
var f8Colors = require ( ' f8Colors ' ) ; var react:==:require ( ' react ' ) ;
var isInt = sharedUtil . isInt ; var isValidUrl:==:sharedUtil . isValidUrl ;
var common = parent . _ _ common ; var frameId:==:window . _ _ frameId ;
var name = node . attributes [ j ] . name ; var val:==:node . attributes [ j ] . value ;
var materials = gltf . materials ; var meshes:==:gltfNode . meshes ;
var IMPORTED_BINDING = ' IMPORTED_BINDING ' ; var INDEX_SIGNATURE:==:' INDEX_SIGNATURE ' ;
var color = colorHelper . getColorForMeasure ( objects , ' ' ) ; var minSize:==:math . max ( 0 , math . min ( 9999 , powerbi . dataViewObjects . getValue ( objects , properties [ ' minSize ' ] , defaultSettings . minSize ) ) ) ;
var coordSysMgr = this . _ coordSysMgr ; var zr:==:this . _ zr ;
var w = menuView . $ el . width ( ) ; var h:==:menuView . $ el . height ( ) ;
var callFrames = details . callFrames ; var asyncStackTrace:==:details . asyncStackTrace ;
var defaultParallel = options . defaultParallel  |  |  false ; var defaultParallelConcurrency:==:options . defaultParallelConcurrency  |  |  4 ;
var width = data . width ; var height:==:data . height ;
var input = operation . input ; var output:==:operation . output ;
var win = window . frames [ 0 ] ; var doc:==:win . document ;
var value = props . value ; var checked:==:props . checked ;
var textStylePropTypes = require ( ' textStylePropTypes ' ) ; var unimplementedView:==:require ( ' unimplementedView ' ) ;
var async   = require ( ' async ' ) ; var debug:==:require ( ' debug ' ) ( ' pm2 : cli ' ) ;
var os     = require ( ' os ' ) ; var domain:==:require ( ' domain ' ) ;
var yieldState = traceur . codegeneration . generator . yieldState ; var variableBinder:==:traceur . semantics . variableBinder ;
var COLOR_INDEX = pointPrimitive . color_index = 2 ; var outline_color_index:==:pointPrimitive . outline_color_index    3 ;
var MOBILE = goog . userAgent . mobile ; var ie:==:goog . userAgent . ie ;
var edgeTypeOffset = this . _ edgeTypeOffset ; var edgeToNodeOffset:==:this . _ edgeToNodeOffset ;
var noteId = noteIds [ i ] ; var note:==:me . getNote ( noteId ) ;
var v = this . value ; var s:==:scope [ v ] ;
var Widget = kendo . ui . Widget ; var init:==:Widget . fn . init ;
var tabbehavior = imports . tabbehavior ; var tabManager:==:imports . tabManager ;
var height = shape . height ; var width:==:shape . width ;
var x = polyline . getAnchor ( last ) . x ; var y:==:polyline . getAnchor ( last ) . y ;
var React = require ( ' React ' ) ; var fixedDataTableCell:==:require ( ' fixedDataTableCell . react ' ) ;
var segmentationSymbolUsed = codingStyleParameters . segmentationSymbolUsed ; var precision:==:context . components [ c ] . precision ;
var dirname = require ( ' path ' ) . dirname ; var staticPrefix:==:options . staticPrefix ;
var ErrorA = function ErrorA ( ) ; var ErrorB:==:function ErrorB ( ) ;
var h = int ( match [ 4 ]  |  |  0 ) - tzHour ; var m:==:int ( match [ 5 ]  |  |  0 ) - tzMin ;
var layout = this . layout ; var flatCoordinates:==:this . flatCoordinates ;
var inherits = require ( ' util ' ) . inherits ; var spawn:==:require ( ' child_process ' ) . spawn ;
var scrollLeft = htmlNode . scrollLeft ; var scrollTop:==:htmlNode . scrollTop ;
var menu = document . querySelector ( ' . menu ' ) ; var script:==:document . querySelector ( ' . script ' ) ;
var isString = sharedUtil . isString ; var warn:==:sharedUtil . warn ;
var React = require ( ' React ' ) ; var reactNative:==:require ( ' reactNative ' ) ;
var dimensions = docSet . getByLongname ( ' dimensions ' ) ; var width:==:docSet . getByLongname ( ' width ' ) ;
var createdAt = doc . createdAt ; var updatedAt:==:doc . updatedAt ;
var stringToutf8String = sharedUtil . stringToutf8String ; var warn:==:sharedUtil . warn ;
var promise = follower . _ promise0 ; var receiver:==:follower . _ receiverAt ( 0 ) ;
var l = corner . leftPositions ; var r:==:corner . rightPositions ;
var height = _ state . height ; var width:==:_ state . width ;
var outlineColor = label . _ outlineColor ; var outlineWidth:==:label . _ outlineWidth ;
var length = stack . length ; var values:==:stack . values ;
var debug = require ( ' debug ' ) ( ' marionette - js - logger ' ) ; var util:==:require ( ' util ' ) ;
var listView = that . listView ; var dataItem:==:listView . dataItemByIndex ( listView . getElementIndex ( candidate ) ) ;
var bar_mm = document . getElementById ( ' bar_mm ' ) ; var bar_px:==:document . getElementById ( ' bar_px ' ) ;
var img = imgs [ i ] ; var data:==:img . data ;
var labelKey = _ ref . labelKey ; var onFocus:==:_ ref . onFocus ;
var tween = this . tweens [ i ] ; var d:==:tween . duration ;
var STRING3 = C . STRING3 = 0x63 ; var STRING4:==:C . STRING4    0x64 ;
var left = offset . left ; var top:==:offset . top ;
var options = that . options ; var data:==:that . dataSource . flatView ( ) ;
var module = angular . module ( name , deps ) ; var doc:==:window . document ;
var requireNativeComponent = require ( ' requireNativeComponent ' ) ; var clippableView:==:requireNativeComponent ( ' clippableView ' , null ) ;
var state = utils . retrieveIgnoreError ( ' gdrive . state ' ) ; var userId:==:storage [ accountId + ' . userId ' ] ;
var l = Expression . lambda ( e ) ; var c:==:l . compileToFunction ( ) ;
var util = require ( ' util ' ) ; var pluralize:==:require ( ' pluralize ' ) ;
var t = this ; if ( arguments . length ) var i:==:Array . prototype . slice . call ( arguments ) ; i . forEach ( function ( i )
var extend = _ dereq _ ( ' extend ' ) ; var nodify:==:_ dereq _ ( ' promise - nodify ' ) ;
var sourcemaps = require ( ' gulp - sourcemaps ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var dynCall_iiii = Module [ ' dynCall_iiii ' ] = asm [ ' dynCall_iiii ' ] ; var dynCall_viiiii:==:Module [ ' dynCall_viiiii ' ]    asm [ ' dynCall_viiiii ' ] ;
var granularity = polygonGeometry . _ granularity ; var ellipsoid:==:polygonGeometry . _ ellipsoid ;
var key = ref . key ; var val:==:ref . val ;
var inherits = require ( ' util ' ) . inherits ; var smith:==:require ( ' smith ' ) ;
var doWhileStatement = traceur . syntax . trees . doWhileStatement ; var emptyStatement:==:traceur . syntax . trees . emptyStatement ;
var tops = this . tops ; var bottoms:==:this . bottoms ;
var buffer = require ( ' vinyl - buffer ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var dx = Math . max ( inset , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx ' , this . dx ) ) ) ) ; var dy:==:math . max ( inset , math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' dy ' , this . dy ) ) ) ) ;
var lang   = this . lang ; var editor:==:this . editor ;
var style = styleRule . style ( ) ; var allProperties:==:style . allProperties ;
var message = options . message  |  |  ' ' ; var question:==:options . question  |  |  gettext ( ' Are you sure you want to proceed ? ' ) ;
var networkURL = this . _ networkMapping . networkurl ( uiSourceCode ) ; var styleSheetIds:==:this . _ cssModel . styleSheetIdsForurl ( networkurl ) ;
var n = string2 . length ; var A:==:new Array ( m+1 ) ;
var pattern = patterns [ i ] ; var index:==:pattern . index ;
var path = data . path ; var layout:==:data . layout ;
var context = scene . context ; var uniformState:==:context . uniformState ;
var offset = $ . offset ( zoom . zoomer ) ; var top:==:offset . top ;
var fullSceneLayout = scene . fullSceneLayout ; var dataScale:==:scene . dataScale ;
var setInterval = window . setInterval ; var clearTimeout:==:window . clearTimeout ;
var zip = require ( ' gulp - zip ' ) ; var postcss:==:require ( ' gulp - postcss ' ) ;
var c = tree . c = b . firstChild ; var sr:==:tree . sr    b . createShadowRoot ( ) ;
var shape = options . shape ; var radius:==:options . radius  |  |  1 ;
var storage = this . _ _ storage ; var zr:==:this . _ _ zr ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var relationshipFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' relationshipFieldTestObject ' ) ) ;
var verticalPosition = props . verticalPosition ; var horizontalPosition:==:props . horizontalPosition ;
var sampleCoverage = renderState . sampleCoverage ; var enabled:==:sampleCoverage . enabled ;
var blogPost = require ( ' blogPost ' ) ; var blogPostHeader:==:require ( ' blogPostHeader ' ) ;
var findAncestorOffsetKey = require ( ' findAncestorOffsetKey ' ) ; var getSelectionOffsetKeyForNode:==:require ( ' getSelectionOffsetKeyForNode ' ) ;
var code = document . createElement ( ' code ' ) ; var pre:==:document . createElement ( ' pre ' ) ;
var clipList = this . _ clipList ; var animation:==:this . animation ;
var delayLeave = data . delayLeave ; var duration:==:data . duration ;
var urlUtils = jsCommon . urlUtils ; var edgeSettings:==:powerbi . visuals . controls . internal . tablixUtils . edgeSettings ;
var pow = stdlib . Math . pow ; var imul:==:stdlib . Math . imul ;
var fontSizeFreq = fontSizeFreq  |  |  ' 12px ' ; var fontSizeUnit:==:fontSizeUnit  |  |  ' 10px ' ;
var dict = data . sys . dict ; var protos:==:data . sys . protos ;
var val = parseInt ( this . $ input . val ( ) ) ; var options:==:$ . extend ( value : val , this . options . spinner ) ;
var reactdomEventListener = require ( ' reactdomEventListener ' ) ; var svgdomPropertyConfig:==:require ( ' svgdomPropertyConfig ' ) ;
var left = param . get ( ' left ' ) ; var right:==:param . get ( ' right ' ) ;
var editor = this . editor ; var gutter:==:editor . renderer . $ gutterLayer ;
var h = texture . height ; var c:==:texture . channels ;
var properties = featureObj . properties ; var geo:==:featureObj . geometry ;
var defineParameterType = exports . defineParameterType = proxySupportCode ( ' defineParameterType ' ) ; var after:==:exports . after    proxySupportCode ( ' after ' ) ;
var getDayId = calc . getDayId ; var isAllDay:==:calc . isAllDay ;
var View = require ( ' View ' ) ; var f8Colors:==:require ( ' f8Colors ' ) ;
var parser = require ( ' socket . io - parser ' ) ; var debug:==:require ( ' debug ' ) ( ' socket . io : server ' ) ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , simpleData , ) ;
var i d = i d  |  |  options . size ( ) ; var option:==:chart_option_list ( ) ;
var request = require ( ' request ' ) ; var winston:==:require ( ' winston ' ) ;
var header = require ( ' gulp - header ' ) ; var connect:==:require ( ' gulp - connect ' ) ;
var literalExpression = traceur . syntax . trees . literalExpression ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var IE = goog . userAgent . ie ; var root_panel_class:==:' . ' + goog . tweak . tweakUi . root_panel_class _ ;
var b = fulfillSoon ( ' b ' , 30 ) ; var c:==:fulfillSoon ( ' c ' , 10 ) ;
var texture = textureLoader . load ( getImage ( surface . init_from ) ) ; var extra:==:textureObject . extra ;
var radius = proxyA . m_radius + proxyB . m_radius ; var tolerance:==:input . tolerance ;
var length = commands . length ; var shadowsEnabled:==:scene . frameState . shadowHints . shadowsEnabled ;
var snippetMap = this . snippetMap ; var snippetNameMap:==:this . snippetNameMap ;
var r0 = Math . max ( shape . r0  |  |  0 , 0 ) ; var r:==:Math . max ( shape . r , 0 ) ;
var interactors = this . interactors = options . interactors ; var clearCatcher:==:options . clearCatcher ;
var filter = arguments . filter ; var replacement:==:arguments . replacement ;
var l = rows . length ; var s:==:( c . page * c . size ) ;
var JSX_TEXT = ' JSX_TEXT ' ; var LABELLED_STATEMENT:==:' LABELLED_STATEMENT ' ;
var predefinedMetrics = ob . predefinedMetrics ; var params:==:ob . params ;
var toString = class2type . toString ; var hasOwn:==:class2type . hasOwnProperty ;
var machine = this . machine . toString ( 16 ) ; var pid:==:this . pid . toString ( 16 ) ;
var reactFiberReconciler = require ( ' reactFiberReconciler ' ) ; var reactInputSelection:==:require ( ' reactInputSelection ' ) ;
var annotationBorderStyleType = sharedUtil . annotationBorderStyleType ; var annotationFlag:==:sharedUtil . annotationFlag ;
var index = graphStore . indexOf ( record ) ; var clone:==:cloneGraphRecord ( record ) ;
var orange800 = exports . orange800 = ' # ef6c00 ' ; var orange900:==:exports . orange900    ' # e65100 ' ;
var sampleRate = config . sampleRate ; var internalInterleavedLength:==:config . internalInterleavedLength ;
var iter = goog . iter . zip ( ) ; var ex:==:assertThrows ( function ( ) iter . next ( ) ) ;
var uiSourceCode = nodes [ i ] . uiSourceCode ( ) ; var inspectedPageurl:==:webInspector . targetManager . inspectedPageurl ( ) ;
var createExpressionStatement = parseTreeFactory . createExpressionStatement ; var createFunctionExpression:==:parseTreeFactory . createFunctionExpression ;
var preferredAdapters = pouchdb . preferredAdapters ; var prefix:==:pouchdb . prefix ;
var label = ( feature . style & & feature . style . label ) ? feature . style . label : feature . i d ; var name:==:feature . attributes . name  |  |  label ;
var assert = util . assert ; var startup:==:util . Module ( ' startup ' ) ;
var text = element ( by . binding ( ' url . text ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var closure = require ( ' closure - util ' ) ; var debounce:==:require ( ' debounce ' ) ;
var accessRequest = ctx . accessRequest ; var role:==:loopback . role ;
var resolve = require ( ' url ' ) . resolve ; var methods:==:require ( ' methods ' ) ;
var res = _ res ; var i:==:_ i ;
var state = testSet . state ; var stats:==:testSet . stats ;
var prepend = attributes [ ' data - prepend ' ] ; var append:==:attributes [ ' data - append ' ] ;
var correctOrientation = ! ! options . correctOrientation ; var saveToPhotoAlbum:==:! ! options . saveToPhotoAlbum ;
var viewState = frameState . viewState ; var center:==:viewState . center ;
var backup = parseInt ( this . realtime . root . get ( ' backupDate ' ) ) ; var modified:==:parseInt ( this . realtime . root . get ( ' modifiedDate ' ) ) ;
var actors = diagram . actors ; var signals:==:diagram . signals ;
var attributes = technique . attributes ; var program:==:model . _ rendererResources . programs [ technique . program ] ;
var r = results [ i ] ; var ex:==:expected [ i ] ;
var hosts = test . hosts ; var options:==:test . options ;
var cssClass = theme . cssClass ; var div:==:document . createElement ( ' div ' ) ;
var state = location . state ; var action:==:location . action ;
var error = _ ref . error ; var error_description:==:_ ref . error_description ;
var getAccessor = traceur . syntax . trees . getAccessor ; var ifStatement:==:traceur . syntax . trees . ifStatement ;
var pos = array [ j ] . position ; var rot:==:array [ j ] . rotation ;
var request = require ( ' request ' ) ; var iconv:==:require ( ' iconv - lite ' ) ;
var a = shape . bounds . a ; var b:==:shape . bounds . b ;
var rpc     = require ( ' pm2-axon - rpc ' ) ; var axon:==:require ( ' pm2-axon ' ) ;
var http = require ( ' http ' ) ; var url:==:require ( ' url ' ) ;
var createFinally = parseTreeFactory . createFinally ; var createForInStatement:==:parseTreeFactory . createForInStatement ;
var _ bitshift64Shl = module [ ' _ bitshift64Shl ' ] = asm [ ' _ bitshift64Shl ' ] ; var _ testSetjmp:==:module [ ' _ testSetjmp ' ]    asm [ ' _ testSetjmp ' ] ;
var a4 = expected [ i ] . locals . a4 ; var b4:==:expected [ i ] . locals . b4 ;
var stride = data . stride ; var offset:==:data . offset ;
var spec = jEl . data ( ' spec ' ) ; var uqids:==:jEl . data ( ' uqids ' )  |  |  [ ] ;
var face = faces [ i ] ; var worldNormal:==:sphereconvex_worldnormal ;
var step = stepResult . step ; var scenario:==:step . scenario ;
var index = this . index ? this . index . toTex ( options ) : '' ; var value:==:this . value . toTex ( options ) ;
var text = textToSynthesize . value ; var language:==:synthesizer . voice . language ;
var tail = ' tail ' ; var name:==:' name ' ;
var x = this . x ; var y:==:this . y ;
var rimraf = require ( ' rimraf ' ) ; var child_process:==:require ( ' child_process ' ) ;
var remote = require ( ' remote ' ) ; var dialog:==:remote . require ( ' dialog ' ) ;
var bindingRecord = proto . bindingRecord ; var directiveRecord:==:bindingRecord . directiveRecord ;
var deprecated = sharedUtil . deprecated ; var info:==:sharedUtil . info ;
var legendPosition = powerbi . visuals . legendPosition ; var selectionId:==:powerbi . visuals . selectionId ;
var movementThreshold = options . movementThreshold = = = undefined ? movement_threshold : options . movementThreshold ; var sensitiveArea:==:options . sensitiveArea      undefined ? sensitive_area : options . sensitiveArea ;
var usesdkaspi = document . getElementById ( ' usesdkaspi ' ) . checked ; var launchapp:==:document . getElementById ( ' launchapp ' ) . checked ;
var localScope = callFrame . localScope ( ) ; var functionLocation:==:callFrame . functionLocation ( ) ;
var my = oThis . _ my ; var at:==:oThis . _ at ;
var r = s . right ; var t:==:s . top ;
var geometry = task . geometry ; var moduleName:==:task . moduleName ;
var custom = point . custom  |  |  ; var model:==:point . _ model ;
var Buffer = buffer . Buffer ; var slowBuffer:==:buffer . slowBuffer ;
var createReturnStatement = parseTreeFactory . createReturnStatement ; var createThisExpression:==:parseTreeFactory . createThisExpression ;
var ACTION_CHANNEL = ' ACTION_CHANNEL ' ; var CANCELLED:==:' CANCELLED ' ;
var geometries = primitive . _ geometries ; var scene3dOnly:==:frameState . scene3dOnly ;
var selectFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' selectFieldTestObject ' ) ) ; var textFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ;
var slice = Array . prototype . slice ; var hasOwn:==:object . prototype . hasOwnProperty ;
var cellCount = _ ref . cellCount ; var cellSizeAndPositionGetter:==:_ ref . cellSizeAndPositionGetter ;
var NUM_ITERATIONS = process . env . NUM_ITERATIONS  |  |  40 ; var NUM_SOFT_ITERATIONS:==:process . env . NUM_SOFT_ITERATIONS  |  |  30 ;
var query = require ( ' component~query@0 . 0 . 3 ' ) ; var after:==:require ( ' yields~after - transition@0 . 0 . 1 ' ) ;
var listView = that . listView ; var visible:==:that . popup . visible ( ) ;
var selectionState = require ( ' selectionState ' ) ; var style:==:require ( ' style ' ) ;
var x = Phaser . Math . clamp ( circle . center . x , body . left , body . right ) ; var y:==:Phaser . Math . clamp ( circle . center . y , body . top , body . bottom ) ;
var c9 = imports . c9 ; var settings:==:imports . settings ;
var viewState = frameState . viewState ; var replayGroup:==:this . replayGroup _ ;
var red = Color . floatToByte ( this . red ) ; var green:==:color . floatToByte ( this . green ) ;
var labelTextProperties = powerbi . visuals . dataLabelUtils . labelTextProperties ; var getLabelFormattedText:==:powerbi . visuals . dataLabelUtils . getLabelFormattedText ;
var map = this . _ map ; var length:==:map . length ;
var jsv = require ( ' jsverify ' ) ; var fMap:==:jsv . _ . fMap ;
var mainGroup = this . _ createGroup ( ' mainGroup ' ) ; var labelGroup:==:this . _ createGroup ( ' labelGroup ' ) ;
var O_DIRECTORY = constants . O_DIRECTORY  |  |  0 ; var O_EXCL:==:constants . O_EXCL  |  |  0 ;
var gulp = require ( ' gulp ' ) ; var gzip:==:require ( ' gulp - gzip ' ) ;
var editorState = require ( ' editorState ' ) ; var moveSelectionForward:==:require ( ' moveSelectionForward ' ) ;
var repsw = validator . trim ( req . body . repsw )  |  |  '' ; var key:==:validator . trim ( req . body . key )  |  |  '' ;
var v = values [ i ] ; var f:==:this . findField ( v . i d ) ;
var sshpk = require ( ' sshpk ' ) ; var util:==:require ( ' util ' ) ;
var w = this . _ drawWidth ; var h:==:this . _ drawHeight ;
var moduleDeclaration = traceur . syntax . trees . moduleDeclaration ; var moduleDefinition:==:traceur . syntax . trees . moduleDefinition ;
var min = version & & version . min ; var max:==:version & & version . max ;
var duration = args . duration  |  |  367 ; var timing:==:args . timing  |  |  ' cubic - bezier ( 0 . 1 , 0 . 9 , 0 . 2 , 1 ) ' ;
var source = this . source ; var scheduler:==:this . scheduler ;
var isAssociative = util . isAssociative ; var allChildren:==:util . allChildren ;
var rename = require ( ' gulp - rename ' ) ; var del:==:require ( ' del ' ) ;
var extractDateTimeSymbols = closurei18nExtractor . extractDateTimeSymbols ; var outputLocale:==:closurei18nExtractor . outputLocale ;
var _ strncpy = Module [ ' _ strncpy ' ] = asm [ ' _ strncpy ' ] ; var _ im_get_spl_start_at:==:Module [ ' _ im_get_spl_start_at ' ]    asm [ ' _ im_get_spl_start_at ' ] ;
var concat = deletedIds . concat ; var push:==:deletedIds . push ;
var parseqs = _ dereq _ ( ' parseqs ' ) ; var parser:==:_ dereq _ ( ' engine . io - parser ' ) ;
var os = require ( ' os ' ) ; var NODE:==:exports . NODE    ' node ' ;
var eventId = result . eventId ; var calendarId:==:result . calendarId ;
var printError = common . printError ; var printOut:==:common . printOut ;
var page = locals . page ; var lang:==:page . lang  |  |  page . language ;
var subtotal = get ( this . properties ( ) , ' subtotal ' ) ; var total:==:this . total ( ) ;
var replace = require ( ' gulp - replace ' ) ; var inject:==:require ( ' gulp - inject ' ) ;
var w = gl . drawingBufferWidth ; var h:==:gl . drawingBufferHeight ;
var skip = opt_skip & & this . selectedElement _ ; var dir:==:opt_direction  |  |  1 ;
var pageX = isTouchEvent ? event . touches [ 0 ] . pagex : event . pagex ; var pagey:==:isTouchEvent ? event . touches [ 0 ] . pagey : event . pagey ;
var fs      = require ( ' fs ' ) ; var os:==:require ( ' os ' ) ;
var fs = require ( ' fs - extra ' ) ; var gulp:==:$ $ . help ( require ( ' gulp ' ) ) ;
var extend = require ( ' util ' ) . _ extend ; var juggler:==:require ( ' loopback - datasource - juggler ' ) ;
var westNormal = this . westNormal ; var southNormal:==:this . southNormal ;
var meta = this . meta ; var name:==:load . name ;
var expression = this . transformAny ( tree . expression ) ; var statements:==:this . transformList ( tree . statements ) ;
var fontType = sharedUtil . fontType ; var util:==:sharedUtil . util ;
var lightGreen400 = exports . lightGreen400 = ' # 9ccc65 ' ; var lightGreen500:==:exports . lightGreen500    ' # 8bc34a ' ;
var length = this . inputLayouts . layouts [ showed . group ] . length ; var index:==:( showed . index + 1 ) % length ;
var scope = args . scope  |  |  self ; var query:==:args . query ;
var children = _ props . children ; var name:==:_ props . name ;
var height = drawOptions . height ; var targetSettings:==:this . targetSettings ;
var Server = require ( ' mongodb ' ) . Server ; var moment:==:require ( ' moment ' ) ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var moneyFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' moneyFieldTestObject ' ) ) ;
var locals = angular . extend ( , options . locals ) ; var transformTemplate:==:options . transformTemplate  |  |  angular . identity ;
var gulp = require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ; var through:==:require ( ' through2 ' ) ;
var call = functionPrototype . call ; var max:==:math . max ;
var i = nodes . length , node , value , internalName = ' data - mce- ' + name ; var urlConverter:==:settings . url_converter , urlConverterScope    settings . url_converter_scope , undef ;
var elementsPerHeight = defaultValue ( structure . elementsPerHeight , heightmapTessellator . default_structure . elementsPerHeight ) ; var stride:==:defaultValue ( structure . stride , heightmapTessellator . default_structure . stride ) ;
var a = new global . tests . _ base . declare . tmp22 ( ) ; var b:==:new global . tests . _ base . declare . tmp23 ( ) ;
var satellite = obj . satellite ; var stderr:==:obj . stderr  |  |  '' ;
var exceptUndefined = this . _ exceptUndefined ; var exceptRequire:==:this . _ exceptRequire ;
var spec = jEl . data ( ' spec ' ) ; var uqid:==:jEl . data ( ' uqid ' )  |  |  null ;
var nodeFieldCount = this . _ nodeFieldCount ; var edgeToNodeOffset:==:this . _ edgeToNodeOffset ;
var readonly = options . readonly ; var dashboardUrl:==:options . dashboardUrl ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var page:==:require ( ' page ' ) ;
var Pattern = util . Pattern ; var Permalink:==:util . Permalink ;
var noop   = angular . noop ; var extend:==:angular . extend ;
var createClassAndSelector = jsCommon . cssConstants . createClassAndSelector ; var visualDataRoleKind:==:powerbi . visualDataRoleKind ;
var standingMatrix = this . standingMatrix ; var vrDisplay:==:this . system . vrDisplay ;
var timelinesRotation = current . timelinesRotation ; var timelinesFirst:==:current . timelinesFirst ;
var page = parseInt ( req . query . page , 10 )  |  |  1 ; var topicsPerPage:==:meta . config . topicsPerPage  |  |  20 ;
var NEW_EXPRESSION = ' NEW_EXPRESSION ' ; var OBJECT_LITERAL:==:' OBJECT_LITERAL ' ;
var successMulti = successMultiOptDisabledNoReceiver ; var syncSuccessMulti:==:syncSuccessMultiOptDisabledNoReceiver ;
var scale = this . view . scale ; var tr:==:this . view . translate ;
var createIdentifierExpression = traceur . codegeneration . parseTreeFactory . createIdentifierExpression ; var createMemberExpression:==:traceur . codegeneration . parseTreeFactory . createMemberExpression ;
var dotSizeMax = lineDotChart . defaultSettings . dotSizeMax ; var counterTitle:==:lineDotChart . defaultSettings . counterTitle ;
var a = Y . Cookie . getSub ( ' data ' , ' a ' ) ; var c:==:y . cookie . getSub ( ' data ' , ' c ' ) ;
var x = e . clientX + scrollOffset . x ; var y:==:e . clienty + scrollOffset . y ;
var blue = Color . floatToByte ( this . blue ) ; var alpha:==:color . floatToByte ( this . alpha ) ;
var atNameToken = traceur . syntax . atNameToken ; var identifierToken:==:traceur . syntax . identifierToken ;
var start = this . clippedPos ( range . start . row , range . start . column ) ; var end:==:this . clippedPos ( range . end . row , range . end . column ) ;
var controller = this . _ controller ; var controllerHost:==:this . _ controllerHost ;
var length = opt_length  |  |  bytes . length ; var seed:==:opt_seed  |  |  goog . crypt . hash32 . SEED32 ;
var parent = this . parentNode ; var children:==:parent . children ;
var contained1_1 = document . getElementById ( ' contained1_1 ' ) ; var contained1_2:==:document . getElementById ( ' contained1_2 ' ) ;
var predefinedName = traceur . syntax . predefinedName ; var program:==:traceur . syntax . trees . program ;
var success = config . success ; var failure:==:config . failure ;
var fs = imports . fs ; var analytics:==:imports [ ' c9 . analytics ' ] ;
var left = pos . left ; var top:==:pos . top ;
var r = from . r + ( to . r - from . r ) * this . progress ( ) ; var g:==:from . g + ( to . g - from . g ) * this . progress ( ) ;
var argv = require ( ' yargs ' ) . argv ; var child_process:==:require ( ' child_process ' ) ;
var request = this . request ; var content:==:request . content ;
var d = a . thread_ctx _ ; var e:==:cf [ a . filter_type _ ] ;
var elementIndex = directiveRecord . directiveIndex . elementIndex ; var t:==:new bindingTarget ( directive , elementIndex , propertyName , null , ast . toString ( ) ) ;
var stringify = json . stringify ; var parse:==:json . parse ;
var dt = this . s . dt ; var width:==:$ ( window ) . width ( ) ;
var a = ar . slice ( ) ; var b:==:mobx . observable ( a ) ;
var m = SIMD . Uint8x16 . fromInt32x4Bits ( simd . int32x4 ( 0x3f800000 , 0x40000000 , 0x40400000 , 0x40800000 ) ) ; var n:==:simd . int32x4 . fromUint8x16Bits ( m ) ;
var p = self . pointAlongPathFrom ( location , distance ) ; var m:==:segmentGradients [ p . segmentInfo . index ] ;
var path = require ( ' path ' ) ; var expect:==:require ( ' chai ' ) . expect ;
var name = Ctor . options . name ; var cache:==:context . cache ;
var Thing = db . model ( ' Thing4104 ' , thingSchema ) ; var person:==:db . model ( ' person4104 ' , personSchema ) ;
var nconf = require ( ' nconf ' ) ; var validator:==:require ( ' validator ' ) ;
var y2 = shape . y2 ; var percent:==:shape . percent ;
var brown800 = exports . brown800 = ' # 4e342e ' ; var brown900:==:exports . brown900    ' # 3e2723 ' ;
var w = width*1 ; var h:==:height*1 ;
var r = frustum . right ; var l:==:frustum . left ;
var leaveRoutes = _ computeChangedRoutes . leaveRoutes ; var changeRoutes:==:_ computeChangedRoutes . changeRoutes ;
var after = require ( ' after ' ) ; var should:==:require ( ' should ' ) ;
var width = layoutInfo . width ; var height:==:layoutInfo . height ;
var error = ' Some error ' ; var successCallback:==:jasmine . createSpy ( ' successCallback ' ) ;
var y = pt . y ; var width:==:tooltipSize . width ;
var colContainer = containerCtrl . colContainer ; var grid:==:uiGridCtrl . grid ;
var contactAddressKind = contacts . contactAddressKind ; var contactEmail:==:contacts . contactEmail ;
var hour = parseInt ( alarms [ i d ] [ ' hour ' ] ) ; var minute:==:parseInt ( alarms [ i d ] [ ' minute ' ] ) ;
var clone = require ( ' clone ' ) ; var util:==:require ( ' util ' ) ;
var target = evt . target ; var type:==:evt . type ;
var color = object . color  |  |  definition . color  |  |  ' # fff ' ; var bgColor:==:object . bgColor  |  |  ' # 000 ' ;
var semanticFilter = powerbi . data . semanticFilter ; var urlUtils:==:jsCommon . urlUtils ;
var http = require ( ' http ' ) ; var Emitter:==:require ( ' events ' ) . eventEmitter ;
var bot = this . createChar ( scale , ( delim . bot |  | delim . ext ) , font ) ; var h:==:top . h + top . d + bot . h + bot . d ;
var shift = ev . shiftKey ; var ctrl:==:ev . ctrlKey ;
var p = extendsModel . instance _ . properties _ [ i ] ; var name:==:constantize ( p . name ) ;
var valid = element ( by . binding ( ' myForm . namesInput . $ valid ' ) ) ; var error:==:element ( by . css ( ' span . error ' ) ) ;
var columnGroups = method . columnGroups ; var records:==:method . records ;
var ty = wt . ty ; var colors:==:this . colors ;
var view = this . view ; var el:==:seg . el ;
var nodeWidth = seriesModel . get ( ' nodeWidth ' ) ; var nodeGap:==:seriesModel . get ( ' nodeGap ' ) ;
var createBindingIdentifier = traceur . codegeneration . parseTreeFactory . createBindingIdentifier ; var options:==:traceur . options . parse ;
var startPoint = copyPoint ( selection . startPoint ) ; var endPoint:==:copyPoint ( selection . endPoint ) ;
var str = '' + string ; var match:==:matchHtmlRegExp . exec ( str ) ;
var followSurface = property . getValueOrDefault ( polyline . _ followSurface , time , true ) ; var globe:==:geometryUpdater . _ scene . globe ;
var scrollHeight = _ ref7 . scrollHeight ; var scrollTop:==:_ ref7 . scrollTop ;
var ONESEC = constants . ONESEC ; var BADNUM:==:constants . BADNUM ;
var descriptor = preEvaluatedFont . descriptor ; var type:==:preEvaluatedFont . type ;
var btn1 = document . getElementById ( ' btn1 ' ) ; var btn2:==:document . getElementById ( ' btn2 ' ) ;
var expensiveChecks = options . expensiveChecks ; var getterFnCache:==:( expensiveChecks ? getterFnCacheExpensive : getterFnCacheDefault ) ;
var acsc = math . acsc ; var csc:==:math . csc ;
var path = require ( ' path ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var material = this . material ; var matrixWorld:==:this . matrixWorld ;
var debug = require ( ' debug ' ) ( ' loopback : registry ' ) ; var dataSource:==:juggler . dataSource ;
var eslint = require ( ' gulp - eslint ' ) ; var file:==:require ( ' gulp - file ' ) ;
var a = rejectSoon ( ' rejected - a ' , 40 ) ; var b:==:rejectThenableSoon ( ' rejected - b ' , 30 ) ;
var sign = Math . sign ( v ) ; var abs:==:_ abs ( v ) ;
var CANCEL = sym ( ' CANCEL_PROMISE ' ) ; var SAGA_ACTION:==:sym ( ' SAGA_ACTION ' ) ;
var value = spec . value ; var parent:==:spec . parent ;
var _ strlen = Module [ ' _ strlen ' ] = asm [ ' _ strlen ' ] ; var _ memcpy:==:Module [ ' _ memcpy ' ]    asm [ ' _ memcpy ' ] ;
var arrayExtensions = jsCommon . arrayExtensions ; var enumExtensions:==:jsCommon . enumExtensions ;
var from = this . _ ranges [ name ] . from ; var to:==:this . _ ranges [ name ] . to ;
var url = _ url ; var timeout:==:options . timeout  |  |  defaultOptions . timeout ;
var t2 = Prim2DBase_1 . _ t2 ; var as:==:Prim2DBase_1 . _ ts0 ;
var NOT_PROPER = module . exports . NOT_PROPER = 0 ; var KIND_EVENT:==:module . exports . KIND_EVENT    ' event ' ;
var fs   = require ( ' fs ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var proto = testSet [ i ] . proto ; var funcs:==:testSet [ i ] . funcs ;
var cos = spine . mathUtils . cosDeg ( angle ) ; var sin:==:spine . mathUtils . sinDeg ( angle ) ;
var nonElementParentNodeInterface = scope . nonElementParentNodeInterface ; var parentNodeInterface:==:scope . parentNodeInterface ;
var x = source . x + 10 ; var y:==:source . y + 10 ;
var c = table . config . widgets ; var l:==:c . length ;
var STATEMENT_OR_BLOCK_KEYS = exports . STATEMENT_OR_BLOCK_KEYS = [ ' consequent ' , ' body ' , ' alternate ' ] ; var FLATTENABLE_KEYS:==:exports . FLATTENABLE_KEYS    [ ' body ' , ' expressions ' ] ;
var mout = require ( ' mout ' ) ; var junk:==:require ( ' junk ' ) ;
var mockery = require ( ' mockery ' ) ; var util:==:require ( ' util ' ) ;
var finalPos = eventArgs [ 0 ] . finalPos  |  |  eventArgs [ 0 ] . pos ; var p:==:left : finalPos [ 0 ] , top : finalPos [ 1 ] ;
var networkUsageAlarm = window . parent . networkUsageAlarm ; var addNetworkUsageAlarm:==:window . parent . addNetworkUsageAlarm ;
var lastFocus = apf . menu . lastFocussed ; var opener:==:this . opener ;
var context = options . context ; var width:==:options . width ;
var cleanup = this . newBlock ( ' for cleanup ' ) ; var end:==:this . newBlock ( ' for end ' ) ;
var requestCamera = this . camera . requestCamera ; var release:==:this . camera . release ;
var matrix = this . _ matrix . clone ( ) ; var parent:==:this . _ parent ;
var second = this . second ; var minute:==:this . minute ;
var path = require ( ' path ' ) ; var serve:==:require ( ' serve - static ' ) ;
var options = el . options ; var i:==:options . length ;
var entity = geometryUpdater . _ entity ; var wall:==:entity . wall ;
var settings = imports . settings ; var proc:==:imports . proc ;
var canvas = this . canvas ; var aspectRatio:==:canvas . aspectRatio ;
var ui = imports . ui ; var dashboard:==:imports . dashboard ;
var span = body . append ( ' span ' ) ; var div:==:body . selectAll ( ' div ' ) . data ( [ 0 , 1 ] ) . enter ( ) . insert ( ' div ' , ' span ' ) ;
var min = index . min ( ) ; var max:==:index . max ( ) ;
var startParam = firstDefined ( source . startParam , options . startParam ) ; var endParam:==:firstDefined ( source . endParam , options . endParam ) ;
var height = polygonGeometry . _ height ; var extrudedHeight:==:polygonGeometry . _ extrudedHeight ;
var path = require ( ' path ' ) ; var readFileSync:==:require ( ' fs ' ) . readFileSync ;
var semver = require ( ' semver ' ) ; var ver:==:process . versions . node ;
var nodes = this . nodes _ ; var node:==:nodes [ index ] ;
var TRY_ENV = utils . getEnv ( ' try_env ' ) ; var test_files:==:utils . getEnv ( ' test_files ' ) ;
var powerbi = window . powerbi ; var powerbitests:==:window . powerbitests ;
var reactdomComponentTree = require ( ' reactdomComponentTree ' ) ; var reactGenericBatching:==:require ( ' reactGenericBatching ' ) ;
var each = zrUtil . each ; var parsePercent:==:numberUtil . parsePercent ;
var shouldPreload = ref . shouldPreload ; var clientManifest:==:ref . clientManifest ;
var widgetConfig = modalData . widgetConfig ; var component:==:modalData . dashboard . application . components [ 0 ] ;
var assert = require ( ' assert ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var hoverItemStyle = seriesScope & & seriesScope . hoverItemStyle ; var symbolRotate:==:seriesScope & & seriesScope . symbolRotate ;
var x2 = line . x2 ; var y2:==:line . y2 ;
var system = require ( ' system ' ) ; var stdio:==:system . stdio ;
var display = opts . display ; var isHorizontal:==:this . isHorizontal ( ) ;
var loc = core . locators . parseLocator _ ( locator ) ; var win:==:opt_win  |  |  bot . getWindow ( ) ;
var mode = prepSettings . mode ; var el:==:prepSettings . el ;
var red = ' red ' ; var blue:==:' blue ' ;
var evOutput = instance . _ evOutput ( ) ; var lastQuadrant:==:instance . lastQuadrant ;
var isRTL = opt ( ' isRTL ' ) ; var event:==:segment . event ;
var isLoading = _ state . isLoading ; var options:==:_ state . options ;
var sin = Math . sin ; var sqrt:==:Math . sqrt ;
var parse = propertyTypes . array . parse ; var stringify:==:propertyTypes . array . stringify ;
var dialog = dialogDiv ( this , template , options & & options . bottom ) ; var duration:==:options & & ( options . duration      undefined ? 5000 : options . duration ) ;
var bgColor = opts . bgColor ; var container:==:opts . container ;
var messages = file . messages ; var length:==:messages . length ;
var x = Math . round ( uv . x * width ) % width ; var y:==:Math . round ( uv . y * height ) % height ;
var every = createIterator ( baseIteratorOptions , everyIteratorOptions ) ; var filter:==:createIterator ( baseIteratorOptions , filterIteratorOptions ) ;
var navigate = imports . navigate ; var watcher:==:imports . watcher ;
var center = chordSeries . get ( ' center ' ) ; var radius:==:chordSeries . get ( ' radius ' ) ;
var pi = math . pi ; var acos:==:math . acos ;
var rimraf = require ( ' rimraf ' ) ; var winston:==:require ( ' winston ' ) ;
var list = document . getElementById ( base + ' -list ' ) ; var summary:==:document . getElementById ( base + ' -summary ' ) ;
var readFile = require ( ' fs ' ) . readFileSync ; var resolve:==:require ( ' path ' ) . resolve ;
var not_container = document . getElementById ( ' not_container ' ) ; var not_contained:==:document . getElementById ( ' not_contained ' ) ;
var i = frameIndex * curveTimeline . bezier_size ; var curves:==:this . curves ;
var x = instance . get ( ' x ' ) ; var y:==:instance . get ( ' y ' ) ;
var clientHeight = _ ref . clientHeight ; var clientWidth:==:_ ref . clientWidth ;
var arrowHead = math . max ( 0 , math . min ( bounds . height , parseFloat ( mxUtils . getValue ( this . state . style , ' arrowHead ' , this . arrowHead ) ) ) ) ; var dx:==:math . max ( 0 , math . min ( bounds . width , parseFloat ( mxUtils . getValue ( this . state . style , ' dx ' , this . dx ) ) ) ) ;
var NULL    = C . NULL    = 0x9 ; var STRING:==:C . STRING     0xa ;
var gulp = require ( ' gulp ' ) ; var streamqueue:==:require ( ' streamqueue ' ) ;
var bindingIdentifier = traceur . syntax . trees . bindingIdentifier ; var parseTreeType:==:traceur . syntax . trees . parseTreeType ;
var topic = subtopics [ args . subtopic ] ; var subtopic:==:args . subtopic ;
var cancel = options . cancel ; var metadata:==:options . metadata ;
var actual = escape ? escapeInvisibles ( err . actual ) : err . actual ; var expected:==:escape ? escapeInvisibles ( err . expected ) : err . expected ;
var tmpdir = require ( ' os ' ) . tmpdir ( ) ; var fs:==:require ( ' fs ' ) ;
var appInfos = ' appInfos ' : oData . application ; var technicalInfo:==:' technicalInfo ' : oData . technical ;
var slugize = util . slugize ; var hasOwn:==:object . prototype . hasOwnProperty ;
var borderDash = helpers . getValueOrDefault ( gridLines . borderDash , globalDefaults . borderDash ) ; var borderDashOffset:==:helpers . getValueOrDefault ( gridLines . borderDashOffset , globalDefaults . borderDashOffset ) ;
var diff = flowUtils . diffConfigs ( config , newConfig ) ; var flow:==:flow . create ( config , config . flows [ ' t1 ' ] ) ;
var intervalPrecision = result . intervalPrecision ; var interval:==:result . interval ;
var vertexFormat = defaultValue ( options . vertexFormat , vertexFormat . default ) ; var ellipsoid:==:defaultValue ( options . ellipsoid , ellipsoid . wgs84 ) ;
var contentPos = this . state . contentPos ; var contentWidth:==:this . state . contentWidth ;
var keyHandler = this . _ keyHandler . bind ( this ) ; var keypad:==:this . _ el . querySelector ( ' . pin - keypad ' ) ;
var MEM = 31 ; var SYNC:==:32 ;
var updateClasses = _ tetherBase$Utils . updateClasses ; var defer:==:_ tetherBase$Utils . defer ;
var isAudio = detail . isAudio ; var isVideo:==:detail . isVideo ;
var mailer = require ( ' nodemailer ' ) ; var assert:==:require ( ' assert ' ) ;
var token = tokens [ 0 ] ; var value:==:token . value ;
var c = rejectBuiltInSoon ( ' rejected - c ' , 10 ) ; var d:==:createThrowingThenable ( ' rejected - d ' ) ;
var filterMode = dataZoomModel . get ( ' filterMode ' ) ; var valueWindow:==:this . _ valueWindow ;
var del = require ( ' del ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var dayNamesMin = this . _ get ( inst , ' dayNamesMin ' ) ; var monthNames:==:this . _ get ( inst , ' monthNames ' ) ;
var angle = -collisionTile . angle ; var yStretch:==:collisionTile . yStretch ;
var option = options_1 [ _ i ] ; var displayName:==:option . displayName ( get : this . localize ) ;
var ii1 = this . ii1 . elements ; var ii2:==:this . ii2 . elements ;
var columnCount = _ props . columnCount ; var rowCount:==:_ props . rowCount ;
var type = tok . type ; var text:==:tok . text ;
var Size = goog . math . Size ; var getBorderBox:==:goog . style . getBorderBox ;
var start = $ . fullCalendar . formatDate ( event . start , ' yyyy - mm - dd hh : mm : ss ' ) ; var end:==:$ . fullCalendar . formatDate ( event . end , ' yyyy - mm - dd hh : mm : ss ' ) ;
var Switch = require ( ' Switch ' ) ; var View:==:require ( ' View ' ) ;
var max = args . signal . range . max ; var step:==:args . signal . range . step ;
var prevChild = prevChildren & & prevChildren [ name ] ; var nextChild:==:nextChildren [ name ] ;
var Dispatcher = require ( ' flux ' ) . Dispatcher ; var payloadSources:==:appConstants . payloadSources ;
var trigger = t . trigger ; var renderOverlay:==:t . renderOverlay ;
var callButton = document . querySelector ( ' button#callButton ' ) ; var sendTonesButton:==:document . querySelector ( ' button#sendTonesButton ' ) ;
var snaps = this . snaps ; var length:==:snaps . length ;
var east = queryNumericValue ( latLonBox , ' east ' , namespaces . kml ) ; var north:==:queryNumericValue ( latLonBox , ' north ' , namespaces . kml ) ;
var mkdirp = require ( ' mkdirp ' ) ; var pgp:==:require ( ' openpgp ' ) ;
var query = req . query ; var storage:==:req . storage  |  |  ctx . entries ;
var start = camera . getPickRay ( movement . startPosition , translate2dStart ) . origin ; var end:==:camera . getPickRay ( movement . endPosition , translate2dEnd ) . origin ;
var remotingContext = context . remotingContext ; var model:==:context . model ;
var closeOnDateSelection = angular . isDefined ( attrs . closeOnDateSelection ) ? scope . $ eval ( attrs . closeOnDateSelection ) : datepickerPopupConfig . closeOnDateSelection ; var dateFormat:==:attrs . datepickerPopup  |  |  datepickerPopupConfig . dateFormat ;
var afterLastParagraph = options . afterLastParagraph = = null ? afterParagraph : options . afterLastParagraph ; var linkFormatter:==:typeof options . linkFormatter      ' function ' ? options . linkFormatter : defaultLinkFormatter ;
var tileSize = windows . ui . startScreen . tileSize ; var uri:==:windows . foundation . uri ;
var version = _ ref . version ; var prefix:==:_ ref . prefix ;
var combo = $ scope . combo ; var dropDown:==:$ scope . dropDown ;
var naturalHeight = precomputedFeatures ? precomputedFeatures . naturalHeight : imageElement . naturalHeight ; var offsetWidth:==:precomputedFeatures ? precomputedFeatures . offsetWidth : naturalWidth ;
var colors = require ( ' colors ' ) ; var fs:==:require ( ' fs ' ) ;
var useragent = Npm . require ( ' useragent ' ) ; var send:==:Npm . require ( ' send ' ) ;
var dirname = require ( ' path ' ) . dirname ; var join:==:require ( ' path ' ) . join ;
var type = message . type ; var payload:==:message . payload ;
var mediaConstraints = options . mediaConstraints  |  |  ; var n:==:navigator ;
var name = left . node . name ; var exports:==:this . exports [ name ] ;
var list = this . _ list ; var groupKeyOf:==:this . _ groupKeyOf ;
var fcolumns = $ ( ' # grid_'+ this . name + ' _ fcolumns ' ) ; var records:==:$ ( ' # grid_'+ this . name + ' _ records ' ) ;
var name = this . transformAny ( tree . name ) ; var value:==:this . transformAny ( tree . value ) ;
var width = ( screen . width ) ? screen . width : '' ; var height:==:( screen . height ) ? screen . height : '' ;
var name = prop . name ; var name$ _:==:prop . name$ _ ;
var run = Ember . run ; var Store:==:DS . Store ;
var formatConstructor = formatConstructors [ i ] ; var format:==:new formatConstructor ( ) ;
var tilelat = tileLayout . tilelat ; var startcol:==:tileLayout . startcol ;
var each = zrUtil . each ; var clone:==:zrUtil . clone ;
var _ malloc = Module [ ' _ malloc ' ] = asm [ ' _ malloc ' ] ; var _ bitshift64Ashr:==:module [ ' _ bitshift64Ashr ' ]    asm [ ' _ bitshift64Ashr ' ] ;
var newValue = event . detail . newValue ; var list:==:this . _ list ;
var m = matrices [ 0 ] ; var s:==:cs_sqr ( 0 , m , false ) ;
var createIdentifierExpression = traceur . codegeneration . parseTreeFactory . createIdentifierExpression ; var tokenType:==:traceur . syntax . tokenType ;
var metaKey = typeof options . metaKey ! = ' undefined ' ? options . metaKey : false ; var scale:==:typeof options . scale !   ' undefined ' ? options . scale : 1 . 0 ;
var type = options & & options . type  |  |  this . _ options . type ; var filter:==:options & & options . filter ;
var y = selectedEntry . position ( ) . top ; var h:==:selectedEntry . height ( ) ;
var path = require ( ' path ' ) ; var run:==:require ( ' run - sequence ' ) ;
var li = lis [ i ] ; var text:==:li . textContent ;
var oscpu = navigator . oscpu ; var platform:==:navigator . platform . toLowerCase ( ) ;
var start = moment ( value ) . startOf ( ' day ' ) . toDate ( ) ; var end:==:moment ( value ) . endOf ( ' day ' ) . toDate ( ) ;
var fs    = require ( ' fs ' ) ; var nodemailer:==:require ( ' nodemailer ' ) ;
var row = annot . row ; var col:==:annot . column ;
var ri = r . ri ; var rj:==:r . rj ;
var direction = camera . direction ; var up:==:camera . up ;
var editor = menu . editor ; var $ textContainerElem:==:editor . $ textContainerElem ;
var integration = require ( ' analytics . js - integration ' ) ; var when:==:require ( ' when ' ) ;
var date_stamp    = zombie_array [ index ] [ ' date_stamp ' ] ; var hb_id:==:zombie_array [ index ] [ ' hb_id ' ] ;
var Complex = math . type . Complex ; var denseMatrix:==:math . type . denseMatrix ;
var db = this . _ db ; var transaction:==:db . transaction ( DBOS_BOOKMARKS ) ;
var test = jasmine . createSpy ( ' test ' ) ; var test1:==:jasmine . createSpy ( ' test1 ' ) ;
var sass   = require ( ' gulp - sass ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var preset = presets [ i ] ; var throughput:==:preset . throughput  |  0 ;
var value = this . arg ( ' value ' ) ; var selected:==:this . arg ( ' selected ' ) ;
var BINARY_OPERATORS = exports . BINARY_OPERATORS = [ ' + ' ] . concat ( NUMBER_BINARY_OPERATORS , BOOLEAN_BINARY_OPERATORS ) ; var BOOLEAN_UNARY_OPERATORS:==:exports . BOOLEAN_UNARY_OPERATORS    [ ' delete ' , ' ! ' ] ;
var exec = require ( ' child - process - promise ' ) . exec ; var mkdirp:==:require ( ' mkdirp ' ) ;
var alpha = parsedCamera . alpha ; var beta:==:parsedCamera . beta ;
var name = this . props . name ; var callSig:==:this . props . callSig  |  |  ;
var contained1_2_1 = document . getElementById ( ' contained1_2_1 ' ) ; var contained2:==:document . getElementById ( ' contained2 ' ) ;
var localSphereaabb = spheretrimesh_localsphereaabb ; var v2:==:spheretrimesh_v2 ;
var n = new rangeNode ( start , end , step ) ; var e:==:new constantNode ( 3 ) ;
var expertEncoding = coreEncodings . expertEncoding ; var getEncoding:==:coreEncodings . getEncoding ;
var Dummy5 = mongoose . model ( ' Dummy5 ' , dummy5Schema ) ; var dummy6:==:mongoose . model ( ' dummy6 ' , dummy6Schema ) ;
var recordingModule = require ( ' nativeModules ' ) . timePickerDialogRecordingModule ; var view:==:require ( ' view ' ) ;
var left = getPropertyAsFloat ( style , ' border - left - width ' ) ; var right:==:getPropertyAsFloat ( style , ' border - right - width ' ) ;
var Plugin = imports . Plugin ; var immediate:==:imports . immediate ;
var clampToGround = defaultValue ( options . clampToGround , true ) ; var proxy:==:options . proxy ;
var Symbol = traceur . semantics . symbols . Symbol ; var symbolType:==:traceur . semantics . symbols . symbolType ;
var priv = privatePool . get ( this ) ; var totalColumns:==:priv . totalColumns ;
var r = new testReader ( 5 ) ; var w:==:[ new testWriter , new testWriter ] ;
var Plugin = imports . Plugin ; var Form:==:imports . Form ;
var hasNext = ( this . get ( ' visible ' ) & & this . get ( ' showControls ' ) & & this . hasNext ( ) ) ; var hasPrev:==:( this . get ( ' visible ' ) & & this . get ( ' showControls ' ) & & this . hasPrev ( ) ) ;
var _ memcpy = Module [ ' _ memcpy ' ] = asm [ ' _ memcpy ' ] ; var _ llvm_ctlz_i32:==:Module [ ' _ llvm_ctlz_i32 ' ]    asm [ ' _ llvm_ctlz_i32 ' ] ;
var getSampleStateForTesting = require ( ' getSampleStateForTesting ' ) ; var removeRangeFromContentState:==:require ( ' removeRangeFromContentState ' ) ;
var TOTAL_STACK = Module [ ' TOTAL_STACK ' ]  |  |  131072 ; var TOTAL_MEMORY:==:Module [ ' TOTAL_MEMORY ' ]  |  |  4194304 ;
var setup = device . setup ; var preread:==:device . preread ;
var vi = ContactEquation_getImpactVelocityAlongNormal_vi ; var vj:==:ContactEquation_getImpactVelocityAlongNormal_vj ;
var flatCoordinates = this . flatCoordinates ; var ends:==:this . ends _ ;
var name = this . props . name ; var memberName:==:this . props . memberName ;
var ceil = createRound ( ' ceil ' ) ; var floor:==:createRound ( ' floor ' ) ;
var b = b16 ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ; var i1:==:i16 ( 1 , 0 , 1 , 8 , 1 , 0 , 1 , 8 , 1 , 0 , 1 , 8 , 1 , 0 , 1 , 8 ) ;
var javascript = safeForhtml ( bin . javascript  |  |  '' ) ; var processors:==:bin . processors ;
var ranges = inlineWidgets [ 0 ] . _ ranges [ 0 ] ; var document:==:ranges . textRange . document ;
var onHeaderClick = _ props2 . onHeaderClick ; var sort:==:_ props2 . sort ;
var cache = require ( ' gulp - cached ' ) ; var progeny:==:require ( ' gulp - progeny ' ) ;
var worldForce = body_applylocalforce_worldforce ; var worldPoint:==:body_applylocalforce_worldpoint ;
var column = columns [ i ] ; var width:==:widths [ i ] . _ calcWidth ;
var shaders = gltf . shaders ; var programs:==:gltf . programs ;
var SET_PROPERTY = traceur . syntax . predefinedName . set_property ; var traceur:==:traceur . syntax . predefinedName . traceur ;
var scope = _ ref . scope ; var authority:==:_ ref . authority ;
var appearance = this . appearance ; var material:==:appearance . material ;
var onKeyUp = _ props3 . onKeyUp ; var onKeyDown:==:_ props3 . onKeyDown ;
var context = frameState . context ; var scene3dOnly:==:frameState . scene3dOnly ;
var escapePrettyMode = this . escapePrettyMode ; var pp:==:this . pp ;
var x2 = obj . x2 = = null ? 1 : obj . x2 ; var y:==:obj . y     null ? 0 : obj . y ;
var bounds = task . _ bounds ; var viewport:==:task . _ viewport ;
var traverse = require ( ' traverse ' ) ; var ObjectID:==:require ( ' mongodb ' ) . ObjectID ;
var uiManager = require ( ' uiManager ' ) ; var assertEquals:==:require ( ' asserts ' ) . assertEquals ;
var group = this . group ; var scale:==:group . scale ;
var debug = require ( ' debug ' ) ( ' socket . io - parser ' ) ; var json:==:require ( ' json3 ' ) ;
var ui = imports . ui ; var ace:==:imports . ace ;
var expect = require ( ' chai ' ) . expect ; var sinon:==:require ( ' sinon ' ) ;
var eventPluginUtils = require ( ' eventPluginUtils ' ) ; var rctEventEmitter:==:require ( ' rctEventEmitter ' ) ;
var model = models [ modelType ]  |  |  ; var type:==:model . definition & & model . definition . type ? model . definition . type : ' object ' ;
var newProperty = ' newProperty ' ; var toString:==:' toString ' ;
var metaEvent = metaEvents [ i ] ; var process:==:metaEvent . thread . process ( ) ;
var commands = imports . commands ; var util:==:imports . util ;
var output = operation . output ; var payload:==:output . payload ;
var createBindingIdentifier = parseTreeFactory . createBindingIdentifier ; var createBlock:==:parseTreeFactory . createBlock ;
var pkg = input . pkg ; var callbacks:==:input . callbacks ;
var viz = this . viz ; var nStyles:==:this . nStyles ;
var Animated = require ( ' Animated ' ) ; var Easing:==:require ( ' Easing ' ) ;
var Surface = reactCanvas . surface ; var listView:==:reactCanvas . listView ;
var files = e . dataTransfer . files ; var f:==:files [ 0 ] ;
var head = document . getElementsByTagName ( ' head ' ) [ 0 ]  |  |  document . documentElement ; var s:==:document . createElement ( ' script ' ) ;
var jid = this . context . jid ; var wait:==:this . wait ;
var normal = defaultValue ( ellipsoid , ellipsoid . wgs84 ) . geodeticSurfaceNormal ( position , normalScratch ) ; var right:==:cartesian3 . cross ( velocity , normal , rightScratch ) ;
var inner = ' inner ' ; var mathord:==:' mathord ' ;
var typedArray = options . typedArray ; var sizeInBytes:==:options . sizeInBytes ;
var styleSheet = require ( ' styleSheet ' ) ; var view:==:require ( ' view ' ) ;
var X = cs . XW * fn_g ( L ) ; var Y:==:cs . YW * fn_g ( M ) ;
var createLegend = powerbi . visuals . createLegend ; var getAnimationDuration:==:powerbi . visuals . animatorCommon . getAnimationDuration ;
var categorical = dataView & & dataView . categorical ; var values:==:categorical & & categorical . values ;
var debug = imports [ ' plugin . debug ' ] ; var Plugin:==:imports . Plugin ;
var bodySpacing = vm . bodySpacing ; var body:==:vm . body ;
var complex = math . complex ; var unit:==:math . unit ;
var a = new symbolNode ( ' a ' ) ; var x:==:new symbolNode ( ' x ' ) ;
var abs = Math . abs ; var x:==:this . x ;
var metadataBlog = require ( ' metadataBlog ' ) ; var blogPost:==:require ( ' blogPost ' ) ;
var pink200 = exports . pink200 = ' # f48fb1 ' ; var pink300:==:exports . pink300    ' # f06292 ' ;
var gradientUtils = powerbi . visuals . gradientUtils ; var axisType:==:powerbi . visuals . axisType ;
var a = response [ ' a ' ] ; var aInb:==:response [ ' aInb ' ] ;
var update_active = options . update_active  |  |  typeof options . update_active = = = ' undefined ' ; var close_active:==:options . close_active  |  |  typeof options . close_active      ' undefined ' ;
var checkSymlinks = options . checkSymlinks ; var sandbox:==:options . sandbox ;
var activeGroup = this . get ( ' activeGroup ' ) ; var activeClass:==:this . get ( ' activeClass ' ) ;
var foo = docSet . getByLongname ( ' thingy~foo ' ) [ 0 ] ; var _ bar:==:docSet . getByLongname ( ' thingy#_bar ' ) [ 0 ] ;
var deepPurple200 = exports . deepPurple200 = ' # b39ddb ' ; var deepPurple300:==:exports . deepPurple300    ' # 9575cd ' ;
var declaredPropTypes = component & & component . declaredPropTypes  |  |  [ ] ; var ignorePropsValidation:==:component & & component . ignorePropsValidation  |  |  false ;
var activeElement = document . activeElement ; var tagName:==:activeElement . tagName ;
var bytesFilled = pullIntoDescriptor . bytesFilled ; var elementSize:==:pullIntoDescriptor . elementSize ;
var defer = utils . deferred ; var uuid:==:utils . uuid ;
var x = bn . fromBits ( h . toBits ( vectors [ i ] . qx ) ) ; var y:==:bn . fromBits ( h . toBits ( vectors [ i ] . qy ) ) ;
var nestedKey = db . model ( ' nestedKey ' , nestedKeySchema ) ; var n:==:new nestedKey ( ) ;
var promise = enumerator . promise ; var input:==:enumerator . _ input ;
var jshint = analyzejshint ( [ ] . concat ( paths . js , paths . specs , paths . nodejs ) ) ; var jscs:==:analyzejscs ( [ ] . concat ( paths . js , paths . nodejs ) ) ;
var data = this . data ; var spacingMode:==:data . spacingMode ;
var foo = docSet . getByLongname ( ' foo ' ) [ 0 ] ; var bar:==:docSet . getByLongname ( ' bar ' ) [ 0 ] ;
var Map    = require ( ' immutable ' ) . Map ; var fromJS:==:require ( ' immutable ' ) . fromJS ;
var isStrictModeSupported = testUtils . isStrictModeSupported ; var onUnhandledFail:==:testUtils . onUnhandledFail ;
var coordinateToPixelTransform = frameState . coordinateToPixelTransform ; var pixelToCoordinateTransform:==:frameState . pixelToCoordinateTransform ;
var isRowLoaded = _ props . isRowLoaded ; var minimumBatchSize:==:_ props . minimumBatchSize ;
var texture = cachedSprite . texture ; var canvas:==:cachedSprite . buffer . canvas ;
var columns = columnNode . columns ; var availableWidth:==:this . writer . context ( ) . availableWidth ;
var type = obj . type  |  |  ' jointHinge ' ; var axe1:==:obj . axe1  |  |  [ 1,0,0 ] ;
var appearClass = data . appearClass ; var appearToClass:==:data . appearToClass ;
var tr = graph . view . translate ; var scale:==:graph . view . scale ;
var listener = goog . events . listeners _ [ key ] ; var type:==:listener . type ;
var b = new objectNode ( a : new symbolNode ( ' a ' ) , b : new constantNode ( 2 ) ) ; var c:==:new objectNode ( a : new symbolNode ( ' a ' ) , b : new constantNode ( 2 ) , c : new constantNode ( 3 ) ) ;
var _ _ getUserInput = document . _ _ getUserInput  |  |  ( x = > x ) ; var checkChallengePayload:==:document . _ _ checkChallengePayload ;
var oldValue = event . detail . oldValue ; var newValue:==:event . detail . newValue ;
var trigger = t . trigger ; var getView:==:t . getView ;
var length = value . length ; var commonmark:==:settings . commonmark ;
var d = when . defer ( ) , cancel = this . cancel ; var projection:==:globe . projection ;
var env = process . env . NODE_ENV ; var PACKAGE_NAME:==:configFactory . package_name ;
var compute = stringMatch . _ computeRangesAndScore ; var specialMatch:==:stringMatch . _ specialMatch ;
var fill = state . fillStyle ! = = undefined ; var stroke:==:state . strokeStyle !   undefined ;
var merge = require ( ' merge - stream ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var Self = makeParamDecorator ( ' self ' , [ ] ) ; var skipSelf:==:makeParamDecorator ( ' skipSelf ' , [ ] ) ;
var tabManager = imports . tabManager ; var watcher:==:imports . watcher ;
var setAttribute = element . prototype . setAttribute ; var noop:==:function noop ( ) ;
var assert = scope . assert ; var getTreeScope:==:scope . getTreeScope ;
var Y = this . YW * g ( M ) ; var Z:==:this . ZW * g ( N ) ;
var typeAnnotation = this . transformAny ( tree . typeAnnotation ) ; var initializer:==:this . transformAny ( tree . initializer ) ;
var isChrome = browserVersion . isChrome  |  |  false ; var ishta:==:browserVersion . ishta  |  |  false ;
var currency = $ scope . send . currency . slice ( 0 , 3 ) . toUpperCase ( ) ; var amount:==:send . amount_feedback ;
var margin = axesLayout . margin ; var axes:==:axesLayout . axes ;
var rayvector = castRay_rayvector ; var target:==:castRay_target ;
var withoutRoot = options . withoutRoot ; var root:==:options . root  |  |  jsbin . root ;
var width = image . width ; var height:==:image . height ;
var Db = mongo . Db ; var Server:==:mongo . Server ;
var columnWidth = axisOptions . columnWidth ; var isScalar:==:axisOptions . isScalar ;
var a = parseInt ( data . a  |  |  0 ) ; var b:==:parseInt ( data . b  |  |  0 ) ;
var isReadable = require ( ' isstream ' ) . isReadable ; var isWritable:==:require ( ' isstream ' ) . isWritable ;
var greenA200 = exports . greenA200 = ' # 69f0ae ' ; var greenA400:==:exports . greenA400    ' # 00e676 ' ;
var options = this . options ; var selected:==:$ ( obj . el ) . data ( ' selected ' ) ;
var horizontalOverscanSize = _ props3 . horizontalOverscanSize ; var noContentRenderer:==:_ props3 . noContentRenderer ;
var unit = math . unit ; var acsc:==:math . acsc ;
var w = p . width ? s . width : 0 ; var h:==:p . height ? s . height : 0 ;
var A = db . model ( ' A ' , name : String , _ i d : Number ) ; var B:==:db . model ( ' B ' , other : Number ) ;
var denseMatrix = math . type . denseMatrix ; var sparseMatrix:==:math . type . sparseMatrix ;
var tab = tabs . focussedTab ; var toggle:==:args . toggle  |  |  args . source     ' click ' ;
var mrow = cTop . createElement ( ' mrow ' ) ; var c:==:cTop . createElement ( type ) ;
var JS_CHECK_TIMEOUT = process . env . JS_CHECK_TIMEOUT  |  |  300 ; var JS_TIMEOUT:==:process . env . JS_TIMEOUT  |  |  10 * 1000 ;
var app = detail . app ; var i d:==:detail . i d ;
var isUndefinedOrEmpty = leafletHelpers . isUndefinedOrEmpty ; var errorHeader:==:leafletHelpers . errorHeader ;
var b = genModule ( ' module - big - async ' , 5 , 2 , 9 , 2 , [ ] ) ; var c:==:genModule ( ' module - broad - async ' , 3 , 3 , 20 , 10 , [ ] ) ;
var args = demoSequence [ step ] . args ; var duration:==:demoSequence [ step ] . duration  |  |  3000 ;
var hasOwnProp = object . prototype . hasOwnProperty ; var syntax:==:jsdoc . src . syntax . syntax ;
var radi = data . radi ; var data:==:data . data ;
var dateTimeFormatter = dateTimeFormatting . dateTimeFormatter ; var calendarIdentifiers:==:windows . globalization . calendarIdentifiers ;
var y = this . attribute ( ' y ' ) . toPixels ( ' y ' ) ; var width:==:this . attribute ( ' width ' ) . toPixels ( ' x ' ) ;
var position = geometry . attributes . position ; var colors:==:geometry . attributes . colors ;
var cp1 = symbol . _ _ cp1 ; var t:==:symbol . _ _ t ;
var month = app . month ; var weekdayHeaders:==:month . weekdayHeaders ;
var tap = require ( ' tap ' ) ; var test:==:tap . test ;
var parent = this . start . parentNode ; var model:==:parent & & parent . _ _ v_model ;
var crawl = require ( ' npm - crawl ' ) ; var convert:==:require ( ' npm - convert ' ) ;
var appVersion = ( navigator & & navigator . appVersion  |  |  '' ) . toLowerCase ( ) ; var userAgent:==:( navigator & & navigator . userAgent  |  |  '' ) . toLowerCase ( ) ;
var setAccessor = traceur . syntax . trees . setAccessor ; var parseTreeTransformer:==:traceur . codegeneration . parseTreeTransformer ;
var startPos = self . select . startPos ; var endPos:==:self . select . endPos ;
var zapfDingbatsEncoding = coreEncodings . zapfDingbatsEncoding ; var expertEncoding:==:coreEncodings . expertEncoding ;
var program = gltfRuntime . programs [ technique . program ] ; var states:==:technique . states ;
var chalk   = require ( ' chalk ' ) ; var fclone:==:require ( ' fclone ' ) ;
var menus = imports . menus ; var editors:==:imports . editors ;
var tanh = math . tanh ; var complex:==:math . complex ;
var net = require ( ' net ' ) ; var d:==:dnode ( ) ;
var Scope = loopback . Scope ; var ACL:==:loopback . ACL ;
var string = _ react$PropTypes . string ; var func:==:_ react$PropTypes . func ;
var shaderProgram = command . shaderProgram ; var vertexShaderSource:==:shaderProgram . vertexShaderSource ;
var label = div . appendChild ( document . createElement ( ' label ' ) ) ; var input:==:label . appendChild ( document . createElement ( ' input ' ) ) ;
var Util = sharedUtil . util ; var bytesToString:==:sharedUtil . bytesToString ;
var channel = animation . channels [ i ] ; var sampler:==:animation . samplers [ channel . sampler ] ;
var topOverlayCallback = jasmine . createSpy ( ' topOverlayCallback ' ) ; var leftOverlayCallback:==:jasmine . createSpy ( ' leftOverlayCallback ' ) ;
var applyFuncToAll = graphDataWindow . applyFuncToAll . createDelegate ( graphDataWindow ) ; var applyFuncToEach:==:graphDataWindow . applyFuncToEach . createDelegate ( graphDataWindow ) ;
var preview = imports . preview ; var ext:==:imports . ext ;
var o = escapeRegExp ( openTag ) ; var c:==:escapeRegExp ( closeTag ) ;
var flush_time = graphiteStats . flush_time  |  |  0 ; var flush_length:==:graphiteStats . flush_length  |  |  0 ;
var mongoose = require ( ' mongoose ' ) ; var bcrypt:==:require ( ' bcrypt - nodejs ' ) ;
var priv = privatePool . get ( this ) ; var target:==:priv . target . row ;
var edge = options . edge  |  |  ' 10 10 10 10 ' ; var rowheight:==:options . rowheight  |  |  40 ;
var strength   = this . options . strength ; var forceFunction:==:this . options . forceFunction ;
var utils = require ( ' utils ' ) ; var f:==:utils . format ;
var marked = require ( ' marked ' ) ; var fs:==:require ( ' fs ' ) ;
var row = this . selectionLead . row ; var column:==:this . selectionLead . column ;
var settings = $ ( obj ) . data ( ' settings ' ) ; var selected:==:$ ( obj ) . data ( ' selected ' ) ;
var w = image . bitmap . width ; var h:==:image . bitmap . height ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var parseTreeTransformer:==:traceur . codegeneration . parseTreeTransformer ;
var decodeEntityRanges = require ( ' decodeEntityRanges ' ) ; var decodeInlineStyleRanges:==:require ( ' decodeInlineStyleRanges ' ) ;
var async = require ( ' async ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var Track = require ( ' facade ' ) . Track ; var bind:==:require ( ' bind ' ) ;
var path = require ( ' path ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var reactVersion = require ( ' reactVersion ' ) ; var finddomNode:==:require ( ' finddomNode ' ) ;
var gulp = require ( ' gulp ' ) ; var handlebars:==:require ( ' gulp - handlebars ' ) ;
var async = require ( ' async ' ) ; var dirname:==:require ( ' path ' ) . dirname ;
var loadJpegStream = sharedUtil . loadJpegStream ; var stringToBytes:==:sharedUtil . stringToBytes ;
var sinon = require ( ' sinon ' ) ; var assign:==:require ( ' object - assign ' ) ;
var src = _ props . src ; var style:==:_ props . style ;
var value = that . listView . value ( ) [ 0 ] ; var optionLabel:==:that . _ optionLabelDataItem ( ) ;
var L = CMD . L ; var R:==:CMD . R ;
var deltaControllerPosition = this . deltaControllerPosition ; var hand:==:( controller ? controller . hand : undefined )  |  |  default_handedness ;
var zr = controller . _ zr ; var covers:==:controller . _ covers ;
var surface = context [ ' surface ' ] ; var multiCurve:==:context [ ' multiCurve ' ] ;
var candidate = ice . candidate ; var sdpmLineIndex:==:ice . sdpmLineIndex ;
var width = this . attribute ( ' width ' ) . Length . toPixels ( ' x ' ) ; var height:==:this . attribute ( ' height ' ) . length . toPixels ( ' y ' ) ;
var Dimensions = require ( ' Dimensions ' ) ; var f8Header:==:require ( ' f8Header ' ) ;
var serialport = require ( ' serialport ' ) ; var serialPort:==:serialport . serialPort ;
var complete = imports [ ' language . complete ' ] ; var tooltip:==:imports [ ' language . tooltip ' ] ;
var domChildrenOperations = require ( ' domChildrenOperations ' ) ; var reactdomidOperations:==:require ( ' reactdomidOperations ' ) ;
var join = require ( ' path ' ) . join ; var sliced:==:require ( ' sliced ' ) ;
var name = this . find ( ' [ data - name ] ' ) . val ( ) ; var url:==:this . find ( ' [ data - url ] ' ) . val ( ) ;
var fAsync = o . fAsync ; var getOwnPropertyNames:==:object . getOwnPropertyNames ( o ) ;
var parent = self . parent ; var scope:==:parent . scope ;
var functionDeclaration = traceur . syntax . trees . functionDeclaration ; var literalExpression:==:traceur . syntax . trees . literalExpression ;
var MATERIAL_INDEX = Polyline . MATERIAL_INDEX ; var POSITION_SIZE_INDEX:==:Polyline . POSITION_SIZE_INDEX ;
var mongoClient = configuration . require . mongoClient ; var domain:==:require ( ' domain ' ) ;
var redis = config . redis ; var intercept:==:require ( ' intercept - stdout ' ) ;
var noop = testUtils . noop ; var isStrictModeSupported:==:testUtils . isStrictModeSupported ;
var playData = this . playData ; var frameData:==:playData . frameData ;
var fresh = eval ( $ this . attr ( ' fresh ' )  |  |  ' true ' ) ; var external:==:eval ( $ this . attr ( ' external ' )  |  |  ' false ' ) ;
var normal = intersectPlane_normal ; var len:==:intersectPlane_len ;
var tangent = line . tangentAt ( halfPercent ) ; var n:==:[ tangent [ 1 ] , -tangent [ 0 ] ] ;
var vel = this . vel = new Vector2 ( 0,0 ) ; var targetVel:==:this . targetVel    new vector2 ( 0,0 ) ;
var setWorldConstructor = exports . setWorldConstructor = proxySupportCode ( ' setWorldConstructor ' ) ; var given:==:exports . given    defineStep ;
var privateKey = fs . existsSync ( path . resolve ( config . secure . privateKey ) ) ; var certificate:==:fs . existsSync ( path . resolve ( config . secure . certificate ) ) ;
var app = require ( ' electron ' ) . app ; var fs:==:require ( ' fs ' ) ;
var c = worldTransform . c ; var d:==:worldTransform . d ;
var toString = emptyObject . toString ; var hasOwn:==:emptyObject . hasOwnProperty ;
var fs = require ( ' fs ' ) ; var chai:==:require ( ' chai ' ) ;
var mode = bs . options . get ( ' mode ' ) ; var open:==:bs . options . get ( ' open ' ) ;
var Schema = mongoose . Schema ; var mongo:==:require ( ' mongodb ' ) ;
var uvPositionBuffer = this . _ uvPositionBuffer ; var alphaBuffer:==:this . _ alphaBuffer ;
var dependencies = this . dependencies ; var ignore:==:this . ignore ;
var beforeFirstParagraph = options . beforeFirstParagraph = = null ? beforeParagraph : options . beforeFirstParagraph ; var afterLastParagraph:==:options . afterLastParagraph     null ? afterParagraph : options . afterLastParagraph ;
var assert = require ( ' assert ' ) ; var xml2js:==:require ( ' xml2js ' ) ;
var superExpression = traceur . syntax . trees . superExpression ; var switchStatement:==:traceur . syntax . trees . switchStatement ;
var max = Math . max ( normR , normG , normB ) ; var min:==:Math . min ( normR , normG , normB ) ;
var pitch = defaultValue ( options . pitch , -CesiumMath . pi_over_two ) ; var roll:==:defaultValue ( options . roll , 0 . 0 ) ;
var show = powerbi . dataViewObjects . getValue ( objects , properties [ ' show ' ] , defaultSettings . show ) ; var position:==:powerbi . dataViewObjects . getValue ( objects , properties [ ' position ' ] , defaultSettings . position ) ;
var app = req . app ; var registry:==:app . registry ;
var clone = require ( ' clone ' ) ; var fs:==:require ( ' fs ' ) ;
var NEWLINE = ci . NEWLINE ; var EXTEND:==:ci . EXTEND ;
var a = a : ' a ' ; var b:==:b : ' b ' ;
var reactInstrumentation = require ( ' reactInstrumentation ' ) ; var reactUpdateQueue:==:require ( ' reactUpdateQueue ' ) ;
var r = 255 - Math . abs ( 255 - color2 . rgb [ 0 ] - color1 . rgb [ 0 ] ) ; var g:==:255 - Math . abs ( 255 - color2 . rgb [ 1 ] - color1 . rgb [ 1 ] ) ;
var c9 = imports . c9 ; var previewBaseUrl:==:options . previewBaseUrl ;
var predicate = this . predicate ; var resultSelector:==:this . resultSelector ;
var toIndexableString = pouchCollate . toIndexableString ; var normalizeKey:==:pouchCollate . normalizeKey ;
var FALSE1 = C . FALSE1 = 0x31 ; var FALSE2:==:C . FALSE2    0x32 ;
var minLines = this . _ minLines ; var exceptConditionals:==:this . _ exceptConditionals ;
var readFile = promise . promisify ( require ( ' fs ' ) . readFile ) ; var writeFile:==:promise . promisify ( require ( ' fs ' ) . writeFile ) ;
var a = fulfillThenableSoon ( ' a ' , 40 ) ; var b:==:fulfillThenableSoon ( ' b ' , 30 ) ;
var x = _ ref3 . x ; var y:==:_ ref3 . y ;
var events = _ interopDefault ( require ( ' events ' ) ) ; var inherits:==:_ interopDefault ( require ( ' inherits ' ) ) ;
var sphere = BABYLON . Mesh . createSphere ( ' sphere ' , 10 . 0 , 10 . 0 , scene ) ; var plan:==:babylon . mesh . createPlane ( ' plane ' , 10 . 0 , scene ) ;
var height = params . height ; var extrudedHeight:==:params . extrudedHeight ;
var clearTimeout = global . clearTimeout ; var clearInterval:==:global . clearInterval ;
var from = new rgbColor ( this . attribute ( ' from ' ) . value ) ; var to:==:new rgbColor ( this . attribute ( ' to ' ) . value ) ;
var btoa = require ( ' btoa ' ) ; var fs:==:require ( ' fs ' ) ;
var touchRippleOpacity = _ props2 . touchRippleOpacity ; var isKeyboardFocused:==:this . state . isKeyboardFocused ;
var assert = require ( ' assert - plus ' ) ; var gatewayTimeoutError:==:require ( ' restify - errors ' ) . gatewayTimeoutError ;
var node = nodes [ i ] ; var c:==:projection ( node . loc ) ;
var Object = platform . Object ; var regExp:==:platform . regExp ;
var session = require ( ' express - session ' ) ; var compression:==:require ( ' compression ' ) ;
var fullWidth = _ props2 . fullWidth ; var hintText:==:_ props2 . hintText ;
var connection = options . connection ; var mediaConstraints:==:options . mediaConstraints  |  |  ;
var submenu = options . submenu ; var divider:==:options . divider ;
var enhanced = opts . enhancedLinkAttribution ; var ignore:==:opts . ignoredReferrers ;
var acoth = math . acoth ; var coth:==:math . coth ;
var createThrowStatement = parseTreeFactory . createThrowStatement ; var createUndefinedExpression:==:parseTreeFactory . createUndefinedExpression ;
var position = this . position ; var spaces:==:this . spaces , out    spine . Utils . setArraySize ( this . positions , spacesCount * 3 + 2 ) , world    null ;
var equal = require ( ' assert ' ) . equal ; var path:==:require ( ' path ' ) ;
var inner = document . getElementById ( setup . inner ) ; var outer:==:document . getElementById ( setup . outer ) ;
var logger = goog . debug . Logger . getLogger ( loggers [ i ] ) ; var sel:==:dh . getElement ( ' sel ' + loggers [ i ] ) ;
var error = props . error ; var errorStyle:==:props . errorStyle ;
var min = $ element . attr ( ' minchecked ' ) ; var max:==:$ element . attr ( ' maxchecked ' )  |  |  options . maxChecked ;
var dependencies = options . dependencies ; var arch:==:options . arch ;
var promise = this . _ promise0 ; var receiver:==:this . _ receiverAt ( 0 ) ;
var E = stdlib . Math . E ; var LN10:==:stdlib . Math . LN10 ;
var skirtHeight = options . skirtHeight ; var isGeographic:==:defaultValue ( options . isGeographic , true ) ;
var edgeToNodeOffset = this . _ edgeToNodeOffset ; var edgeTypeOffset:==:this . _ edgeTypeOffset ;
var reactMarkupChecksum = require ( ' reactMarkupChecksum ' ) ; var reactReconciler:==:require ( ' reactReconciler ' ) ;
var dynCall_iiiii = Module [ ' dynCall_iiiii ' ] = asm [ ' dynCall_iiiii ' ] ; var dynCall_viiii:==:Module [ ' dynCall_viiii ' ]    asm [ ' dynCall_viiii ' ] ;
var assignmentNode = math . expression . node . assignmentNode ; var operatorNode:==:math . expression . node . operatorNode ;
var Types = keystone . Field . Types ; var targetRelationship:==:new keystone . list ( ' targetRelationship ' ) ;
var topRadius = cylinder . topRadius ; var bottomRadius:==:cylinder . bottomRadius ;
var ptr = A . _ ptr ; var size:==:A . _ size ;
var useCollab = options . useCollab ; var useSend:==:! options . useCollab & & options . useSend ;
var FP_SAFE = constants . FP_SAFE ; var ONEAVGYEAR:==:constants . ONEAVGYEAR ;
var dynCall_ii = Module [ ' dynCall_ii ' ] = asm [ ' dynCall_ii ' ] ; var dynCall_viiiddddi:==:Module [ ' dynCall_viiiddddi ' ]    asm [ ' dynCall_viiiddddi ' ] ;
var amber700 = exports . amber700 = ' # ffa000 ' ; var amber800:==:exports . amber800    ' # ff8f00 ' ;
var arrayBuffer = window . arrayBuffer ; var uint8Array:==:window . uint8Array ;
var spec = options . spec ; var watch:==:options . watch ;
var objectPattern = traceur . syntax . trees . objectPattern ; var objectPatternField:==:traceur . syntax . trees . objectPatternField ;
var label = props . label ; var labelPosition:==:props . labelPosition ;
var entity = entityCollection . getOrCreateEntity ( i d ) ; var properties:==:geoJson . properties ;
var reactWheelHandler = require ( ' reactWheelHandler ' ) ; var scrollbar:==:require ( ' scrollbar . react ' ) ;
var isSupported = this . isSupported ( ) ; var isPrefixed:==:this . isPrefixed _ ( ) ;
var node = tree . node ; var children:==:tree . children ;
var chalk = require ( ' chalk ' ) ; var filesize:==:require ( ' filesize ' ) ;
var positions = this . positions ; var colors:==:this . colors ;
var c = goog . crypt . hash32 . toSigned _ ( bytes [ offset + 2 ] ) ; var d:==:goog . crypt . hash32 . toSigned _ ( bytes [ offset + 3 ] ) ;
var URL = window . URL  |  |  window . webkitURL  |  |  window . mozURL ; var Worker:==:window . Worker ;
var container = cc . game . container ; var a:==:t . a * scaleX , b    t . b , c    t . c , d    t . d * scaleY ;
var centerRipple = _ props3 . centerRipple ; var children:==:_ props3 . children ;
var lat = imageProperties . latitude ; var long:==:imageProperties . longitude ;
var element = parameters [ ' element ' ] ? Utils . getElementAt ( parameters [ ' element ' ] , doc ) : null ; var x:==:( ' xoffset ' in parameters ) ? parameters [ ' xoffset ' ] : null ;
var fill = elem . getAttributens ( null , ' fill ' ) ; var stroke:==:elem . getAttributens ( null , ' stroke ' ) ;
var dest = options . dest & & convertPath ( options . dest ) ; var root:==:convertPath ( options . root ) ;
var context = this . localNames [ r . contextIndex ] ; var pipe:==:this . pipeNames [ r . selfIndex ] ;
var dotOffset = edge . dotOffset  |  |  3 ; var dotSize:==:edge . dotSize  |  |  1 ;
var stopwatch = priv . get ( this ) . stopwatch ; var node:==:this . nodes . laps ;
var event = track . event ( ) ; var category:==:this . _ category  |  |  props . category  |  |  ' All ' ;
var defaults = wavEncoder . defaults ; var bytesPerSample:==:options . bytesPerSample  |  |  defaults . bytesPerSample ;
var item = obj . item ; var frame:==:obj . frame ;
var Packets   = common . Packets ; var packetWriter:==:common . packetWriter ;
var chai = require ( ' chai - nightwatch ' ) ; var flag:==:chai . flag ;
var formButton = docSet . getByLongname ( ' formButton ' ) [ 0 ] ; var myClass:==:docSet . getByLongname ( ' myClass ' ) [ 0 ] ;
var childNodeInterface = scope . childNodeInterface ; var getElementsByInterface:==:scope . getElementsByInterface ;
var regexpSource = _ compilePattern2 . regexpSource ; var paramNames:==:_ compilePattern2 . paramNames ;
var menus = imports . menus ; var Menu:==:imports . Menu ;
var listener = this . _ listeners [ l ] ; var cb:==:listener . cb ;
var userId = stateProps . userId ; var onSubmitUserId:==:dispatchProps . onSubmitUserId ;
var dt   = this . s . dt ; var details:==:this . c . details ;
var clear = defaultValue ( options . clear , true ) ; var epsilon:==:defaultValue ( options . epsilon , 0 ) ;
var requiredFirst = configuration . requiredFirst  |  |  false ; var callbacksLast:==:configuration . callbacksLast  |  |  false ;
var sin = Math . sin ( v ) ; var cos:==:- Math . cos ( v ) ;
var base_url = that . notebook . base_url ; var notebook_path:==:utils . encode_uri_components ( that . notebook . notebook_path ) ;
var util = imports . util ; var debug:==:imports [ ' debugger ' ] ;
var culture = this . culture _ ; var hidpi:==:this . hidpi _ ;
var X = this . XW * g ( L ) ; var Y:==:this . YW * g ( M ) ;
var state = this . state ; var editor:==:this . editor ;
var iccId = window . navigator . mozIccManager . iccIds [ 0 ] ; var icc:==:window . navigator . mozIccManager . getIccById ( iccId ) ;
var item = e . item ; var dataItem:==:that . listView . dataItemByIndex ( that . listView . getElementIndex ( item ) ) ;
var furTexture = babylon . furMaterial . generateTexture ( ' furTexture ' , scene ) ; var fur:==:new babylon . furMaterial ( ' fur ' , scene ) ;
var outlineWidth = ellipsoid . outlineWidth ; var subdivisions:==:ellipsoid . subdivisions ;
var module = $ btn . attr ( ' data - module ' ) ; var uuid:==:$ btn . attr ( ' data - uuid ' ) ;
var rec = this . records [ index ] ; var recid:==:rec ? rec . recid : null ;
var render = imports [ ' connect . render ' ] ; var analytics:==:imports [ ' analytics ' ] ;
var params = ob . params ; var validateUserForMgmtReadapi:==:ob . validateUserForMgmtReadapi ;
var TOTAL_MEMORY = Module [ ' TOTAL_MEMORY ' ]  |  |  134217728 ; var FAST_MEMORY:==:Module [ ' FAST_MEMORY ' ]  |  |  2097152 ;
var from = alias . from ( ) ; var to:==:alias . to ( ) ;
var iNumberOfCols = window . iNumberOfCols ; var setFocusOutsideOfTable:==:window . setFocusOutsideOfTable ;
var workspace = imports [ ' collab . workspace ' ] ; var collab:==:imports . collab ;
var debugID = _ lifeCycleTimerStack$ . debugid ; var timerType:==:_ lifeCycleTimerStack$ . timerType ;
var compare = grunt . option ( ' compare ' ) ; var update:==:grunt . option ( ' update ' ) ;
var w = this . canvas . width ; var h:==:this . canvas . height ;
var visualDataRoleKind = powerbi . visualDataRoleKind ; var dataViewAnalysis:==:powerbi . dataViewAnalysis ;
var menuItem = imports . menuItem ; var commands:==:imports . commands ;
var range = math . range ; var fix:==:math . fix ;
var stack = this . stack ; var l:==:stack . length - n ;
var ds = app . dataSource ( ' ds ' , connector : ' memory ' ) ; var score:==:app . registry . createModel ( ' score ' ) ;
var open = document . getElementById ( ' open ' ) ; var opensavefile:==:document . getElementById ( ' opensavefile ' ) ;
var tid = postData . tid ; var title:==:data . title ? data . title . trim ( ) : '' ;
var iccId = event . target . getAttribute ( ' stk - menu - item - iccId ' ) ; var identifier:==:event . target . getAttribute ( ' stk - help - item - identifier ' ) ;
var len = element . style . length ; var style:==:element . style ;
var del = require ( ' del ' ) ; var fs:==:require ( ' fs ' ) ;
var sinon = require ( ' sinon ' ) ; var assign:==:require ( ' lodash ' ) . assign ;
var getSlotDuration = t . getSlotDuration ; var getSlotContainer:==:t . getSlotContainer ;
var istanbul = require ( ' browserify - istanbul ' ) ; var isparta:==:require ( ' isparta ' ) ;
var mpath = require ( ' mpath ' ) ; var ms:==:require ( ' ms ' ) ;
var syntheticAnimationEvent = require ( ' syntheticAnimationEvent ' ) ; var syntheticClipboardEvent:==:require ( ' syntheticClipboardEvent ' ) ;
var title = tokens [ idx ] . title ? ( ' title= ' ' + escapeHtml ( replaceEntities ( tokens [ idx ] . title ) ) + ' ' ' ) : '' ; var alt:==:' alt ' ' + ( tokens [ idx ] . alt ? escapeHtml ( replaceEntities ( unescapeMd ( tokens [ idx ] . alt ) ) ) : '' ) + ' ' ' ;
var c = this . c ; var d:==:this . d ;
var search = conf . search ; var encoding:==:conf . encoding ;
var exec = require ( ' child - process - promise ' ) . exec ; var karma:==:require ( ' karma ' ) ;
var prefix = options . prefix ! = = undefined ? options . prefix : ' ^ ' ; var suffix:==:options . suffix !    undefined ? options . suffix : ' \\b ' ;
var exists = fs . exists  |  |  require ( ' path ' ) . exists ; var crypto:==:require ( ' crypto ' ) ;
var createMemberExpression = parseTreeFactory . createMemberExpression ; var createVariableDeclaration:==:parseTreeFactory . createVariableDeclaration ;
var requestEncoding = this . requestEncoding _ ; var tileGrid:==:options . tileGrid ;
var badRequestError = require ( ' restify - errors ' ) . badRequestError ; var assert:==:require ( ' assert - plus ' ) ;
var msg = error . err  |  |  error . errmsg  |  |  error . errMessage  |  |  error ; var e:==:mongoError . create ( message : msg , driver : true ) ;
var PROPERTY_NAME_ASSIGNMENT = ' PROPERTY_NAME_ASSIGNMENT ' ; var PROPERTY_NAME_SHORTHAND:==:' PROPERTY_NAME_SHORTHAND ' ;
var p = editor . document . getElementsByTagName ( ' p ' ) [ 0 ] ; var r:==:new baidu . editor . dom . range ( editor . document ) ;
var depth = defaultValue ( options . depth , 0 . 0 ) ; var clear:==:defaultValue ( options . clear , true ) ;
var f8Touchable = require ( ' f8Touchable ' ) ; var image:==:require ( ' image ' ) ;
var sourceEl = this . sourceEl ; var targetEl:==:this . targetEl ;
var int16 = Fn . int16 ; var sum:==:Fn . sum ;
var preview = this . preview ; var toolbar:==:this . toolbar ;
var i d = identify . userId ( ) ; var group:==:this . analytics . group ( ) ;
var line = sm . line  |  |  bp . line ; var column:==:sm . column  |  |  bp . column ;
var tag = ctx . extend . tag ; var ext:==:data . engine  |  |  ( source ? pathFn . extname ( source ) : '' ) ;
var db = this . _ db ; var transaction:==:this . _ db . transaction ( [ DBOS_PLACES ] , ' readwrite ' ) ;
var s = ' a ' + escapeChar + ' string escaped ' ; var e:==:_ . escape ( s ) ;
var telnet = require ( ' telnet - client ' ) ; var me:==:' my_username ' ;
var y = xy . y  |  0 ; var data:==:this . hitContext . getImageData ( x , y , 1 , 1 ) . data ;
var width = rrectData . width ; var height:==:rrectData . height ;
var db = syncBrowserdb . db . _ db ; var transaction:==:db . transaction ( dbos_places , ' readwrite ' ) ;
var gulp = require ( ' gulp ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var font = parameters . font ! = = undefined ? parameters . font : ' helvetiker ' ; var weight:==:parameters . weight !    undefined ? parameters . weight : ' normal ' ;
var webChannelBaseTransport = goog . labs . net . webChannel . webChannelBaseTransport ; var webChannelBase:==:goog . labs . net . webChannel . webChannelBase ;
var green800 = exports . green800 = ' # 2e7d32 ' ; var green900:==:exports . green900    ' # 1b5e20 ' ;
var height = this . gaugeVisualProperties . height ; var width:==:this . gaugeVisualProperties . width ;
var html = pan . html ( ) ; var st:==:pan [ 0 ] . style . cssText ;
var quasiLiteralPortion = traceur . syntax . trees . quasiLiteralPortion ; var quasiSubstitution:==:traceur . syntax . trees . quasiSubstitution ;
var File = source . File ; var Asset:==:hexo . model ( ' Asset ' ) ;
var access_token = tokenData . access_token ; var expires:==:number ( tokenData . expires ) ;
var purpleA100 = exports . purpleA100 = ' # ea80fc ' ; var purpleA200:==:exports . purpleA200    ' # e040fb ' ;
var min = Math . min ( extent [ 0 ] , extent [ 1 ] ) ; var max:==:Math . max ( extent [ 0 ] , extent [ 1 ] ) ;
var accessorNode = math . expression . node . accessorNode ; var constantNode:==:math . expression . node . constantNode ;
var i d = $ ( this ) . attr ( ' i d ' ) ; var file_id:==:$ ( this ) . attr ( ' file_id ' ) ;
var group = groups [ g ] ; var length:==:group . layoutVertexArray . length ;
var bmp = parts . bmp ; var astral:==:parts . astral ;
var gl = context . _ gl ; var pixelFormat:==:defaultValue ( options . pixelFormat , pixelFormat . rgb ) ;
var sel = vim . sel ; var head:==:actionArgs . head  |  |  cm . getCursor ( ' head ' ) ;
var from_index = opt_from_index  |  |  0 ; var to_index:==:opt_to_index  |  |  this . length ( ) - 1 ;
var wizardPage = imports . wizardPage ; var ui:==:imports . ui ;
var ellipsoid = corridorGeometry . _ ellipsoid ; var vertexFormat:==:corridorGeometry . _ vertexFormat ;
var isOpaque = this . props . isOpaque ; var verticalTop:==:this . props . verticalTop  |  |  0 ;
var parent = node . parentNode ; var wrapper:==:$ ( ' < ' + wrapperName + ' > ' ) [ 0 ] ;
var toolbar = $ ( this . box ) . find ( ' > div . w2ui - form - toolbar ' ) ; var tabs:==:$ ( this . box ) . find ( ' > div . w2ui - form - tabs ' ) ;
var selector = selectors [ i ] ; var keys:==:Object . keys ( selector ) ;
var intro = this . getHtmlRenderer ( ' intro ' , rowType ) ( row  |  |  0 ) ; var outro:==:this . getHtmlRenderer ( ' outro ' , rowType ) ( row  |  |  0 ) ;
var additional = settings . additional ; var nonTerminated:==:settings . nonTerminated ;
var r = resp . httpResponse ; var operation:==:req . service . api . operations [ req . operation ] ;
var store_id = $ ( this ) . attr ( ' gs_store_id ' ) ; var title:==:$ ( this ) . attr ( ' gs_title ' ) ? $ ( this ) . attr ( ' gs_title ' ) : '' ;
var indices = options . indices ; var maximumIndex:==:options . maximumIndex ;
var o = rows [ i ] ; var l:==:o . length ;
var next = order . next ; var prev:==:order . prev ;
var spy = sinon . spy ( ) ; var marker:==:L . marker ( [ 0 , 0 ] , icon : new L . divIcon ( ) ) . addTo ( map ) ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var dateArrayFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' dateArrayFieldTestObject ' ) ) ;
var gulp = require ( ' gulp ' ) ; var markdown:==:require ( ' gulp - markdown ' ) ;
var splitDataNode = dom . splitDataNode ; var getClosestAncestorIn:==:dom . getClosestAncestorIn ;
var spy = this . sinon . spy ( modeManager , ' start ' ) ; var input:==:document . getElementById ( ' views - tiles - search - input ' ) ;
var htmlTemplateElement = window . htmlTemplateElement ; var nodeFilter:==:window . nodeFilter ;
var byteLength = aws . util . string . byteLength ; var buffer:==:aws . util . buffer ;
var embeddedTracks = config . embeddedTracks ; var isFragmented:==:config . isFragmented ;
var sigBytes = wordArray . sigBytes ; var map:==:this . _ map ;
var ty = m . ty ; var x:==:bounds . x ;
var hintStyle = _ props2 . hintStyle ; var i d:==:_ props2 . i d ;
var reactdomEventListener = require ( ' reactdomEventListener ' ) ; var reactEventEmitterMixin:==:require ( ' reactEventEmitterMixin ' ) ;
var snap = this . options . snap  |  |  null ; var item:==:this . itemFromTarget ( event ) ;
var initScopeMetadata = utils . initScopeMetadata ; var syntax:==:esprima . syntax ;
var child = element . children [ i ] ; var text:==:$ . htmlClean . trim ( textClean ( isText ( child ) ? child : child . childrenToString ( ) ) ) ;
var textureWidth = options . textureWidth ! = = undefined ? options . textureWidth : 512 ; var textureHeight:==:options . textureHeight !    undefined ? options . textureHeight : 512 ;
var left = attachment . left ; var top:==:attachment . top ;
var readUint32 = sharedUtil . readUint32 ; var shadow:==:sharedUtil . shadow ;
var config = this . config ; var dialog:==:this . dialog    $ . openPicker ( this . gethtml ( ) ) ;
var fontFaceObject = displayFontLoader . fontFaceObject ; var fontLoader:==:displayFontLoader . fontLoader ;
var polylineBuckets = collection . _ polylineBuckets = ; var polylines:==:collection . _ polylines ;
var dashNb = options . dashNb  |  |  200 ; var points:==:options . points ;
var generateMatchList = stringMatch . _ generateMatchList ; var specialMatch:==:stringMatch . _ specialMatch ;
var sequence   = require ( ' run - sequence ' ) ; var insert:==:require ( ' gulp - insert ' ) ;
var fork = require ( ' child_process ' ) . fork ; var env:==:process . env ;
var _ oContext = this . _ oContext ; var _ htOption:==:this . _ htOption ;
var os = require ( ' os ' ) ; var fs:==:require ( ' fs ' ) ;
var attr = DS . attr ; var resolve:==:Ember . RSVP . resolve ;
var selectionId = powerbi . visuals . selectionId ; var dataViewObject:==:powerbi . dataViewObject ;
var pdfFunction = coreFunction . pdfFunction ; var colorSpace:==:coreColorSpace . colorSpace ;
var Hilo = window . Hilo ; var Drawable:==:Hilo . Drawable ;
var propTypes = require ( ' react ' ) . propTypes ; var createStrictShapeTypeChecker:==:require ( ' createStrictShapeTypeChecker ' ) ;
var Complex = math . type . Complex ; var Range:==:math . type . Range ;
var bottom = parsePercent ( positionInfo . bottom , containerHeight ) ; var width:==:parsePercent ( positionInfo . width , containerWidth ) ;
var viz = this . viz ; var options:==:$ . merge ( this . options , viz . controller , opt ) , root    viz . root ;
var dx = Math . max ( 0 , Math . min ( bounds . width , parseFloat ( mxUtils . getValue ( this . state . style , ' dx ' , this . dx ) ) ) ) ; var dy:==:math . max ( 0 , math . min ( arrowHead , parseFloat ( mxUtils . getValue ( this . state . style , ' dy ' , this . dy ) ) ) ) ;
var element = current . element ; var childNodes:==:dom . childNodes ( dom . templateAwareRoot ( element ) ) ;
var commaExpression = traceur . syntax . trees . commaExpression ; var comprehensionFor:==:traceur . syntax . trees . comprehensionFor ;
var tar = require ( ' tar ' ) ; var fstream:==:require ( ' fstream ' ) ;
var operand = this . transformAny ( tree . operand ) ; var elements:==:tree . elements ;
var data = this . data ; var path:==:require ( ' path ' ) ;
var SCROLL_DIRECTION_BACKWARD = exports . SCROLL_DIRECTION_BACKWARD = -1 ; var SCROLL_DIRECTION_FIXED:==:exports . SCROLL_DIRECTION_FIXED    0 ;
var t = this . trigger . getTop ( ) ; var h:==:this . trigger . getHeight ( ) ;
var granularity = geometry . _ granularity ; var ellipsoid:==:geometry . _ ellipsoid ;
var channel = animation . channel [ i ] ; var sampler:==:animation . sampler [ i ] ;
var lng = parseFloat ( readCookie ( ' ingress . intelmap . lng ' ) )  |  |  0 . 0 ; var z:==:parseInt ( readCookie ( ' ingress . intelmap . zoom ' ) )  |  |  17 ;
var success = options . success ; var wait:==:options . wait ;
var children = props . children ; var htmlFor:==:props . htmlFor ;
var subscriber = state . subscriber ; var delay:==:state . delay ;
var settings    = this . settings ; var cm:==:this . cm ;
var mtype = isUndefined ( v [ ' mtype ' ] ) ? ' menu ' : v [ ' mtype ' ] ; var evt:==:isUndefined ( v [ ' evt ' ] ) ? ' mouseover ' : v [ ' evt ' ] ;
var path = sm . source  |  |  bp . path ; var line:==:sm . line  |  |  bp . line ;
var showTime = powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' popup ' ] [ ' showTime ' ] , pulseChart . defaultSettings . popup . showTime ) ; var showTitle:==:powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' popup ' ] [ ' showTitle ' ] , pulseChart . defaultSettings . popup . showTitle ) ;
var stringTopdfString = sharedUtil . stringTopdfString ; var warn:==:sharedUtil . warn ;
var fs = require ( ' fs ' ) ; var exists:==:fs . exists  |  |  path . exists ;
var positions = simplePolylineGeometry . _ positions ; var colors:==:simplePolylineGeometry . _ colors ;
var component = this . components [ name ] ; var attrValue:==:component & & component . attrValue ;
var util = imports . util ; var commands:==:imports . commands ;
var text = Expression . Create ( '' + ( options . text  |  |  $ thisStr ) + '' ) ; var value:==:expression . create ( '' + ( options . value  |  |  $ thisStr ) + '' , ' value ' ) ;
var assignmentNode = math . expression . node . assignmentNode ; var symbolNode:==:math . expression . node . symbolNode ;
var swig = require ( ' swig ' ) ; var slash:==:require ( ' gulp - slash ' ) ;
var singleChar = node . getAttribute ( ' singleChar ' ) ; var esc:==:node . getAttribute ( ' escape ' ) ;
var unit = math . unit ; var nthRoot:==:math . nthRoot ;
var html = response . html ; var embed:==:win . find ( ' # embed ' ) [ 0 ] ;
var shadowMaps = frameState . shadowHints . shadowMaps ; var lightShadowMaps:==:frameState . shadowHints . lightShadowMaps ;
var instance = interceptorOptions . instance ; var property:==:interceptorOptions . property ;
var nodesMap = this . _ nodesMap ; var edgesMap:==:this . _ edgesMap ;
var e = fulfillThenableSoon ( ' e ' , 40 ) ; var f:==:fulfillBuiltInSoon ( ' f ' , 30 ) ;
var slot = slots [ i ] ; var attachment:==:slot . attachment ;
var bind = _ dereq _ ( ' component - bind ' ) ; var debug:==:_ dereq _ ( ' debug ' ) ( ' socket . io - client : socket ' ) ;
var parseTreeTransformer = traceur . codegeneration . parseTreeTransformer ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var retry = require ( ' retry ' ) ; var hasOwn:==:object . prototype . hasOwnProperty ;
var dbContext = dbContexts [ dbInfo . name ] ; var forages:==:dbContext . forages ;
var line = pos . line + lendiff ; var ch:==:pos . ch ;
var diameterX = options . diameterX  |  |  options . diameter  |  |  1 ; var diameterY:==:options . diameterY  |  |  options . diameter  |  |  1 ;
var extendedData = kmlData . extendedData ; var description:==:queryStringValue ( node , ' description ' , namespaces . kml ) ;
var response = cr . response  |  |  cr ; var statusCode:==:response . statusCode ;
var items = this . _ items ; var source:==:this . source ;
var holderURL = flags . holderURL ; var engineSettings:==:extend ( _ engineSettings , null ) ;
var commonLabelOpts = opts . commonLabelOpts  |  |  ; var fontFamily:==:opts . fontFamily  |  |  constants . hoverfont ;
var stream = require ( ' stream ' ) ; var fs:==:require ( ' fs ' ) ;
var sha1 = require ( ' sha1 ' ) ; var express:==:require ( ' express ' ) ;
var center = box . center ; var normal:==:plane . normal ;
var debug = require ( ' debug ' ) ( ' pm2 : paths ' ) ; var p:==:require ( ' path ' ) ;
var DIFF_EQUAL = DMP . DIFF_EQUAL ; var DIFF_INSERT:==:DMP . DIFF_INSERT ;
var orient = this . _ orient ; var useHandle:==:this . _ useHandle ;
var operand = this . transformAny ( tree . operand ) ; var memberExpression:==:this . transformAny ( tree . memberExpression ) ;
var workspace = imports [ ' collab . workspace ' ] ; var timeslider:==:imports . timeslider ;
var uniqueIndex = store . getIndex ( ' uniqueIndex ' ) ; var multirowIndex:==:store . getIndex ( ' multirowIndex ' ) ;
var target = targetMap . get ( name ) ; var selectedMode:==:this . get ( ' selectedMode ' ) ;
var fsummary = $ ( ' # grid_'+ this . name + ' _ fsummary ' ) ; var summary:==:$ ( ' # grid_'+ this . name + ' _ summary ' ) ;
var backwards = options . backwards = = true ; var skipCurrent:==:options . skipCurrent !   false ;
var d = new Tracker . Dependency ; var e:==:new Tracker . Dependency ;
var length = self . values . length ; var values:==:self . values ;
var onlyFullyVisible = priv . onlyFullyVisible ; var overrideFn:==:priv . overrideFn ;
var word = line . children [ wordKey ] ; var x:==:dpr * ( textGroup . x + line . x + word . x ) ;
var header = frame . header ; var nch:==:header . nchannels ( ) ;
var top = Math . ceil ( box . top ) ; var left:==:Math . ceil ( box . left ) ;
var xhr = this . xhr = request . getXHR ( ) ; var query:==:this . _ query . join ( ' & ' ) ;
var content = request . content ; var metadata:==:request . metadata ;
var createArrayLiteralExpression = parseTreeFactory . createArrayLiteralExpression ; var createAssignmentExpression:==:parseTreeFactory . createAssignmentExpression ;
var collab = imports . collab ; var membersPanel:==:imports . membersPanel ;
var mkdirp    = require ( ' mkdirp ' ) ; var jas:==:require ( ' jasmine - node ' ) ;
var TEMPLATE_LITERAL_PORTION = ' TEMPLATE_LITERAL_PORTION ' ; var TEMPLATE_SUBSTITUTION:==:' TEMPLATE_SUBSTITUTION ' ;
var docId = data . docId ; var clientId:==:userIds . clientId ;
var fs = imports . fs ; var util:==:imports . util ;
var li = document . createElement ( ' li ' ) ; var a:==:document . createElement ( ' a ' ) ;
var viewManagement = windows . ui . viewManagement ; var applicationViewWindowingMode:==:viewManagement . applicationViewWindowingMode ;
var pop = $ ( ' # w2ui - popup ' ) ; var sel:==:' input : visible , button : visible , select : visible , textarea : visible ' ;
var a = angle % ( 2 * Math . PI ) ; var set:==:vec2 . set ;
var debug = require ( ' debug ' ) ( ' socket . io : server ' ) ; var url:==:require ( ' url ' ) ;
var runtime = require ( ' pug - runtime ' ) ; var stringify:==:require ( ' js - stringify ' ) ;
var switchNode1 = helper . getNode ( ' switchNode1 ' ) ; var helperNode1:==:helper . getNode ( ' helperNode1 ' ) ;
var programInterface = programInterfaces [ programName ] ; var paintVertexArrayTypes:==:options . paintVertexArrayTypes [ programName ] ;
var arg = rule . args [ i ] ; var exampleValues:==:arg . exampleValues  |  |  [ ] ;
var it = lab . it ; var expect:==:Code . expect ;
var admin = path . join ( _ _ dirname , ' assets ' , name , ' admin ' ) ; var dir:==:path . join ( _ _ dirname , ' assets ' , name , ' repo ' ) ;
var async = require ( ' async ' ) ; var staticPrefix:==:options . staticPrefix ;
var holder = this . clone . wtTable . holder ; var hider:==:this . clone . wtTable . hider ;
var tabs = this . tabs ; var input:==:operation . input ;
var edges = option . edges  |  |  option . links  |  |  [ ] ; var nodes:==:option . data  |  |  option . nodes  |  |  [ ] ;
var async   = require ( ' async ' ) ; var path:==:require ( ' path ' ) ;
var n = new conditionalNode ( condition , a , b ) ; var e:==:new constantNode ( 4 ) ;
var reactdomInput = require ( ' reactdomInput ' ) ; var reactdomOption:==:require ( ' reactdomOption ' ) ;
var start = range . start . row ; var end:==:range . end . row ;
var sfnt = this . sfnt ; var tables:==:this . tables ;
var message = evt . detail . message  |  |  '' ; var elements:==:this . elements ;
var geo = event . geo  |  |  false ; var description:==:event . description  |  |  false ;
var geometry = geometries [ geometryIndex ] ; var instance:==:instances [ instanceIndex ] ;
var jasmine = window . jasmine ; var Microsoft:==:window . Microsoft ;
var login_hint = _ ref . login_hint ; var acr_values:==:_ ref . acr_values ;
var warn = sharedUtil . warn ; var isDict:==:corePrimitives . isDict ;
var elOption = elOptions [ i ] ; var el:==:elMap . get ( elOption . i d ) ;
var from = codeMirror . posFromIndex ( node . location + change . from ) ; var to:==:codeMirror . posFromIndex ( node . location + change . to ) ;
var fold = pos . fold ; var folds:==:this . folds ;
var data = this . data ; var edgeData:==:this . edgeData ;
var a = ' foo ' + ' bar ' + x ( ) + ' moo ' + ' foo ' + y ( ) + ' x ' + ' y ' + ' z ' + q ( ) ; var b:==:' foo ' + 1 + x ( ) + 2 + ' boo ' ;
var groupName = groupHeader . getAttribute ( ' data - groupName ' ) ; var groupNumber:==:groupHeader . getAttribute ( ' data - groupNumber ' ) ;
var rel = link . rel ; var href:==:link . href ;
var startAngle = shape . startAngle ; var endAngle:==:shape . endAngle ;
var collabPanel = imports . collabPanel ; var c9:==:imports . c9 ;
var source = require ( ' vinyl - source - stream ' ) ; var through:==:require ( ' through2 ' ) ;
var fs = require ( ' fs ' ) ; var util:==:require ( ' util ' ) ;
var pwd = options . pwd  |  |  '' ; var https:==:options . https ;
var zlib = require ( ' zlib ' ) ; var request:==:require ( ' request ' ) ;
var g = gSlider . value ( ) ; var b:==:bSlider . value ( ) ;
var immutableDenseMatrix = math . type . immutableDenseMatrix ; var sparseMatrix:==:math . type . sparseMatrix ;
var animation = UI . support . animation ; var transition:==:UI . support . transition ;
var clearTimeout = global . clearTimeout ; var window:==:global . window ;
var target = data . options . target ; var width:==:current . owidth ;
var debug = imports [ ' debugger ' ] ; var Frame:==:debug . Frame ;
var appendText = this . _ get ( inst , ' appendText ' ) ; var isrtl:==:this . _ get ( inst , ' isrtl ' ) ;
var selector = ( typeof selector ! = ' undefined ' ) ? selector : that . selector ; var scope:==:( typeof scope !   ' undefined ' ) ? scope : that . scope ;
var propertyNameAssignment = traceur . syntax . trees . propertyNameAssignment ; var setAccessor:==:traceur . syntax . trees . setAccessor ;
var bendPath = options . bendPath ; var extrudePath:==:options . extrudePath ;
var valueType = powerbi . valueType ; var dataViewTransform:==:powerbi . data . dataViewTransform ;
var webpack = require ( ' webpack ' ) ; var fs:==:require ( ' fs ' ) ;
var name = $ ( this ) . attr ( ' gs_name ' ) ; var callback:==:$ ( this ) . attr ( ' gs_callback ' ) ;
var session = this . session ; var selection:==:this . selection ;
var rename = require ( ' gulp - rename ' ) ; var moment:==:require ( ' moment ' ) ;
var x = vNode . getElementsByTagName ( ' x ' ) [ 0 ] . textContent ; var y:==:vNode . getElementsByTagName ( ' y ' ) [ 0 ] . textContent ;
var editor = this . editor ; var toolbars:==:this . toolbars  |  |  [ ] ;
var pids = this . pids ; var cisco:==:this . cisco ;
var Site = require ( ' Site ' ) ; var slugify:==:require ( ' slugify ' ) ;
var Modifiers = goog . ui . keyboardShortcutHandler . modifiers ; var keyCodes:==:goog . events . keyCodes ;
var dirty = this . _ dirtyStyleProperties  |  |  ( this . _ dirtyStyleProperties = ) ; var style:==:this . element . style ;
var caller = jsonx . caller & & jsonx . caller . name ; var sails:==:req . _ sails ;
var inputValueTracking = require ( ' inputValueTracking ' ) ; var getEventTarget:==:require ( ' getEventTarget ' ) ;
var isArray = angular . isArray ; var isObject:==:angular . isObject ;
var keys = this . keys ; var length:==:keys . length ;
var focusedOption = _ ref . focusedOption ; var instancePrefix:==:_ ref . instancePrefix ;
var del    = require ( ' del ' ) ; var gulp:==:require ( ' gulp ' ) ;
var through2 = require ( ' through2 ' ) ; var series:==:require ( ' stream - series ' ) ;
var pageX = aTouches [ 0 ] . pagex ; var pagey:==:aTouches [ 0 ] . pagey ;
var headers = localStorage . getItem ( ' headers ' ) ; var referer:==:localStorage . getItem ( ' referer ' )  |  |  defaultreferer ;
var async = require ( ' async ' ) ; var Buffer:==:require ( ' buffer ' ) . Buffer ;
var metadata = config . prose . metadata ; var q:==:queue ( 1 ) ;
var fs = require ( ' hexo - fs ' ) ; var Permalink:==:util . Permalink ;
var findVisitor = traceur . codegeneration . findVisitor ; var formalParameterList:==:traceur . syntax . trees . formalParameterList ;
var a = db . model ( ' gh5128 ' , aSchema ) ; var b:==:db . model ( ' gh5128_0 ' , bSchema ) ;
var terms = this . _ index . terms ; var titleterms:==:this . _ index . titleterms ;
var w = hasLayout ? ( this . layoutAreaPos . x + this . layoutArea . width ) : ( marginh + actualSize . width ) ; var h:==:hasLayout ? ( this . layoutAreaPos . y + this . layoutArea . height ) : ( marginv + actualSize . height ) ;
var hsep = opts . hsep = = = undefined ? ' ' : opts . hsep ; var align:==:opts . align  |  |  [ ] ;
var maxX = origin [ 0 ] + ( tileRange . maxx + 1 ) * tileSize [ 0 ] * resolution ; var miny:==:origin [ 1 ] + tileRange . miny * tileSize [ 1 ] * resolution ;
var addEventListener = eventTool . addEventListener ; var removeEventListener:==:eventTool . removeEventListener ;
var Timer = goog . require ( ' goog . Timer ' ) ; var Replacer:==:goog . require ( ' goog . testing . propertyReplacer ' ) ;
var isEastChild = parameters . isEastChild ; var isNorthChild:==:parameters . isNorthChild ;
var div = document . createElement ( ' div ' ) ; var c:==:div . appendChild ( document . createElement ( ' c ' ) ) ;
var yScale2 = chart . scales . yScale2 ; var yScale3:==:chart . scales . yScale3 ;
var x = backgroundBillboard . _ translate . x ; var y:==:- ( backgroundBillboard . _ translate . y + height ) ;
var contactCardHeaderKind = contacts . contactCardHeaderKind ; var placement:==:windows . ui . popups . placement ;
var dialer = launchApp ( ' dialer ' ) ; var contacts:==:launchApp ( ' contacts ' ) ;
var writeWrap = process . binding ( ' stream_wrap ' ) . writeWrap ; var port:==:common . port ;
var Promise = goog . require ( ' goog . Promise ' ) ; var propertyReplacer:==:goog . require ( ' goog . testing . propertyReplacer ' ) ;
var topLevelTypes = eventConstants . topLevelTypes ; var isStartish:==:eventPluginUtils . isStartish ;
var transform = painter . transform ; var color:==:layer . paint [ ' background - color ' ] ;
var setName = e . setName ; var strokeWidth:==:e . strokeWidth ;
var commands = imports . commands ; var jumptodef:==:imports [ ' language . jumptodef ' ] ;
var width = cluster . width = cluster . width * factor ; var height:==:cluster . height    cluster . height * factor ;
var fixedDataTableWidthHelper = require ( ' fixedDataTableWidthHelper ' ) ; var cx:==:require ( ' cx ' ) ;
var a32 = this . a32 ; var a33:==:this . a33 ;
var getScrollParents = _ tetherBase$Utils . getScrollParents ; var getBounds:==:_ tetherBase$Utils . getBounds ;
var iceTransport = transceiver . iceTransport ; var dtlsTransport:==:transceiver . dtlsTransport ;
var rename = require ( ' gulp - rename ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var model = graph . model ; var t:==:graph . view . translate ;
var e = Crafty . e ( ' Text ' ) ; var h:==:e . _ getFontHeight ( ' 10px ' ) ;
var target = $ ( event . target ) ; var btn:==:target . closest ( ' a . sys - icon - btn ' ) ;
var key = ' key ' in opts ? opts . key : false ; var skip:==:opts . skip  |  |  0 ;
var deepOrangea400 = exports . deepOrangea400 = ' # ff3d00 ' ; var deepOrangea700:==:exports . deepOrangea700    ' # dd2c00 ' ;
var resolve = path . resolve ; var extname:==:path . extname ;
var isElement = nodeType . isElement ; var isText:==:nodeType . isText ;
var bodies = this . bodies ; var constraints:==:this . constraints ;
var A = db . model ( ' gh4278_0 ' , aSchema ) ; var b:==:db . model ( ' gh4278_1 ' , bSchema ) ;
var group = $ ( ' # group ' ) ; var select1:==:$ ( ' # select1 ' ) ;
var group = $ ( this ) . data ( ' group ' ) ; var name:==:$ ( this ) . data ( ' name ' ) ;
var states = technique . states ; var vertexShader:==:babylon . effect . shadersStore [ program . vertexShader + ' vertexShader ' ] ;
var test    = require ( ' utest ' ) ; var assert:==:common . assert ;
var bubble = imports [ ' notification . bubble ' ] ; var panels:==:imports . panels ;
var TESTING_HOST = process . env . AMP_TESTING_HOST ; var target:==:argv . target  |  |  TESTING_HOST ;
var Renderer = Hilo . Renderer ; var Drawable:==:Hilo . Drawable ;
var parse = require ( ' url ' ) . parse ; var format:==:require ( ' url ' ) . format ;
var decoder = this . decoder ; var contexts:==:this . contexts ;
var min = range . min ! = = null ? range . min . valueOf ( ) : null ; var max:==:range . max !    null ? range . max . valueOf ( ) : null ;
var x = ( scaleVal - 1 ) * ( _ x ) ; var y:==:( scaleVal - 1 ) * ( _ y ) ;
var less = require ( ' less ' ) ; var async:==:require ( ' async ' ) ;
var x = capInsets . x , y = capInsets . y ; var width:==:capInsets . width , height    capInsets . height ;
var y = this . y ; var index:==:this . detail . index ;
var editor = tab . editor . ace ; var session:==:( tab . document . getSession ( )  |  |  0 ) . session ;
var template = material . _ template ; var uniforms:==:template . uniforms ;
var i = config . firstRow ; var lastRow:==:config . lastRow ;
var log = console . log . bind ( console ) ; var error:==:console . error . bind ( console ) ;
var subscriber = state . subscriber ; var scheduler:==:state . scheduler ;
var complete = wrapCallback ( controller , options . complete ) ; var cancel:==:wrapCallback ( controller , options . cancel ) ;
var d = moment . duration ( totalSeconds , ' seconds ' ) ; var seconds:==:d . seconds ( ) ;
var parameterList = this . transformAny ( tree . parameterList ) ; var annotations:==:this . transformList ( tree . annotations ) ;
var cy = this . attribute ( ' cy ' ) . toPixels ( ' y ' ) ; var r:==:this . attribute ( ' r ' ) . toPixels ( ) ;
var builder = instance . get ( ' builder ' ) ; var selected:==:instance . get ( ' selected ' ) ;
var x = result . x ; var y:==:result . y ;
var key = keys [ i ] ; var timer:==:timers [ key ] ;
var selectedImagery = this . selectedImagery ; var selectedTerrain:==:this . selectedTerrain ;
var attrs = this . attrs ; var inputs:==:this . info . inputs ;
var fakeSumRow = window . fakeSumRow ; var fakeGroupRow:==:window . fakeGroupRow ;
var jsep = callbacks . jsep ; var pluginHandle:==:pluginHandles [ handleId ] ;
var r = shape . r ; var r0:==:shape . r0 ;
var map = mobx . map ; var autorun:==:mobx . autorun ;
var deviceNameService = _ appJsServicesDeviceNameService [ ' default ' ] ; var shareService:==:_ appJsServicesShareService [ ' default ' ] ;
var Dummy7 = mongoose . model ( ' Dummy7 ' , dummy7Schema ) ; var dummy8:==:mongoose . model ( ' dummy8 ' , dummy8Schema ) ;
var pubdate = item . pubdate  |  |  item . published  |  |  item . updated ; var url:==:item . url  |  |  item . link  |  |  ' ' ;
var button = this . mapping [ ' button ' + evt . detail . i d ] ; var buttonMeshes:==:this . buttonMeshes ;
var polygonOffset = defaultValue ( rs . polygonOffset , ) ; var scissorTest:==:defaultValue ( rs . scissorTest , ) ;
var getBody = dom . getBody ; var getContentDocument:==:dom . getContentDocument ;
var separator = options . separator = = = undefined ? ' , ' : options . separator ; var dataVar:==:options . dataVar      undefined ? ' data ' : options . dataVar ;
var tagName = e . tagName . toLowerCase ( ) ; var type:==:e . type ;
var topic_id = req . params . topic_id ; var reply_id:==:req . body . reply_id ;
var paste = this . actions . get ( ' paste ' ) ; var pasteHere:==:this . actions . get ( ' pasteHere ' ) ;
var exec = require ( ' child_process ' ) . exec ; var spawn:==:require ( ' child_process ' ) . spawn ;
var args = this . args ; var scheduler:==:this . scheduler ;
var triangle = this . triangles [ i ] ; var d:==:triangle . intersect ( origin , dir , near , far ) ;
var pixelRatio = frameState . pixelRatio ; var resolution:==:viewState . resolution ;
var fs    = require ( ' fs ' ) ; var colorizer:==:require ( ' colorizer ' ) ;
var width = this . props . width * this . props . scale ; var height:==:this . props . height * this . props . scale ;
var emissive = this . emissive ? this . emissive . buildCode ( builder , ' c ' , slot : ' emissive ' ) : undefined ; var environment:==:this . environment ? this . environment . buildCode ( builder , ' c ' , cache : ' env ' , requires : requires , slot : ' environment ' ) : undefined ;
var stagger = elementData . stagger ; var itemIndex:==:elementData . itemIndex ;
var callback1 = jasmine . createSpy ( ' callback1 ' ) ; var callback2:==:jasmine . createSpy ( ' callback2 ' ) ;
var merge = imports . threewaymerge ; var fs:==:imports . fs ;
var events = require ( ' events ' ) ; var assert:==:require ( ' assert ' ) ;
var setName = docSet . getByLongname ( ' setName ' ) [ 0 ] ; var setPizzaToppings:==:docSet . getByLongname ( ' setPizzaToppings ' ) [ 0 ] ;
var node1 = new goog . ui . tree . treeNode ( ' node1 ' ) ; var node2:==:new goog . ui . tree . treeNode ( ' node2 ' ) ;
var strength = opt_strength  |  |  6 ; var d:==:Movement . distance ( dx , dy ) ;
var onUnhandledFail = testUtils . onUnhandledFail ; var onUnhandledSucceed:==:testUtils . onUnhandledSucceed ;
var north = rectangle . north ; var south:==:rectangle . south ;
var ifClause = this . transformToBlockOrStatement ( tree . ifClause ) ; var elseClause:==:this . transformToBlockOrStatement ( tree . elseClause ) ;
var index = current . index ; var opts:==:current . opts ;
var massageSelector = localUtils . massageSelector ; var massageSort:==:localUtils . massageSort ;
var async    = require ( ' async ' ) ; var os:==:require ( ' os ' ) ;
var unwrap = shadowdomPolyfill . unwrap ; var visual:==:shadowdomPolyfill . visual ;
var pfx = options . pfx ; var passphrase:==:options . passphrase ;
var arrowHead = math . max ( 0 , math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' arrowHead ' , this . arrowHead ) ) ) ) ; var rounded:==:mxUtils . getValue ( this . style , ' rounded ' , ' 0 ' ) ;
var observers = this . observers ; var len:==:observers . length ;
var port = server . port  |  |  server . clientPort ; var host:==:server . host ;
var title = this . _ titleForFile ( uiSourceCode ) ; var tooltip:==:this . _ tooltipForFile ( uiSourceCode ) ;
var debug = options . debug ; var isTouch:==:options . isTouch ;
var dataLabelUtils = powerbi . visuals . dataLabelUtils ; var colorHelper:==:powerbi . visuals . colorHelper ;
var i = this . $ getRowCacheIndex ( rowCache , screenRow ) ; var l:==:rowCache . length ;
var material = materials [ primitive . material ] ; var technique:==:techniques [ material . technique ] ;
var operation = req . operation ; var output:==:req . service . api . operations [ operation ] . output ;
var reactComponentBrowserEnvironment = require ( ' reactComponentBrowserEnvironment ' ) ; var reactdomComponent:==:require ( ' reactdomComponent ' ) ;
var getEventCharCode = require ( ' getEventCharCode ' ) ; var getEventKey:==:require ( ' getEventKey ' ) ;
var through = require ( ' through2 ' ) ; var duplexer:==:require ( ' duplexer ' ) ;
var faintBlack = exports . faintBlack = ' rgba ( 0 , 0 , 0 , 0 . 12 ) ' ; var fullWhite:==:exports . fullWhite    ' rgba ( 255 , 255 , 255 , 1 ) ' ;
var cellRenderer = _ ref . cellRenderer ; var cellStyle:==:_ ref . cellStyle ;
var chalk = require ( ' chalk ' ) ; var semver:==:require ( ' semver ' ) ;
var clipShape = zrUtil . extend ( , symbolMeta . clipShape ) ; var valueDim:==:opt . valueDim ;
var PIXEL_OFFSET_INDEX = Billboard . PIXEL_OFFSET_INDEX ; var EYE_OFFSET_INDEX:==:Billboard . EYE_OFFSET_INDEX ;
var a = new Element ( ' a [ text='Hello world ' ] ' ) ; var div:==:new element ( ' div ' ) . inject ( document . body ) . adopt ( a ) . addEvent ( ' click : relay ( a ) ' , spy ) . fireEvent ( ' click ' ) ;
var fontFlags = coreFonts . fontFlags ; var font:==:coreFonts . font ;
var lightBluea700 = exports . lightBluea700 = ' # 0091ea ' ; var cyan50:==:exports . cyan50    ' # e0f7fa ' ;
var width = toolboxRect . width ; var height:==:toolboxRect . height ;
var hour=-1 ; var minute:==:-1 ;
var commands = imports . commands ; var watcher:==:imports . watcher ;
var source = sourceExpr ? sourceExpr . value : null ; var provider:==:providerExpr ? providerExpr . value : null ;
var workspace = imports . workspace ; var settings:==:imports . settings ;
var westSkirtHeight = isEastChild ? ( shortestSkirt * 0 . 5 ) : this . _ westSkirtHeight ; var southSkirtHeight:==:isNorthChild ? ( shortestSkirt * 0 . 5 ) : this . _ southSkirtHeight ;
var name = identify . name ( ) ; var i d:==:identify . userId ( ) ;
var monster = monsters [ p ] ; var sum:==:0 , sum2    0 ;
var tls = require ( ' tls ' ) ; var http:==:require ( ' http ' ) ;
var nodes = panel . nodes ; var timer:==:panel . timer ;
var exports = file . metadata . modules . exports ; var declar:==:path . get ( ' declaration ' ) ;
var max = new Date ( range . max . valueOf ( ) + interval * 0 . 01 ) ; var animation:==:( options & & options . animation !    undefined ) ? options . animation : true ;
var nextCellsCount = _ ref . nextCellsCount ; var nextCellSize:==:_ ref . nextCellSize ;
var attributes = specialAttrHolder . firstChild . attributes ; var attribute:==:attributes [ 0 ] ;
var spawn = require ( ' child_process ' ) . spawn ; var slimerjs:==:require ( ' slimerjs ' ) ;
var observable = ko . observable ( ' original ' ) . extend ( deferred : true ) ; var notifySpy:==:jasmine . createSpy ( ' notifySpy ' ) ;
var underlineFocusStyle = _ props2 . underlineFocusStyle ; var underlineShow:==:_ props2 . underlineShow ;
var a = globalScope ; var b:==:globalScope ;
var newline = config . newline ; var comments:==:config . comments ;
var timeline = viewer . _ timeline ; var fullscreenButton:==:viewer . _ fullscreenButton ;
var scene = this . _ scene ; var globe:==:scene . _ globe ;
var parseqs = _ dereq _ ( ' parseqs ' ) ; var inherit:==:_ dereq _ ( ' component - inherit ' ) ;
var inactiveColor = legendModel . get ( ' inactiveColor ' ) ; var isSelected:==:legendModel . isSelected ( name ) ;
var el = this . el ; var rotation:==:el . getAttribute ( ' rotation ' ) ;
var root = instance . root ; var doc:==:root . document ;
var modelMatrix = this . modelMatrix ; var polylines:==:this . polylines ;
var parser = self . _ parser ; var responseType:==:self . _ responseType ;
var p2 = $ ( ' p2 ' ) ; var testEl2:==:$ ( ' testEl2 ' ) ;
var stack = obj . stack ; var message:==:obj . message & & obj . message . length ? ' : ' + obj . message : ' ' ;
var a = ct . a , b = ct . b , f = ct . f ; var L:==:openLayers . util . rad ( p2 . lon - p1 . lon ) ;
var ctrlKey = event . srcEvent & & ( event . srcEvent . ctrlKey  |  |  event . srcEvent . metaKey ) ; var shiftKey:==:event . srcEvent & & event . srcEvent . shiftKey ;
var bignumber = math . bignumber ; var complex:==:math . complex ;
var eventTarget = scope . wrappers . eventTarget ; var nodeList:==:scope . wrappers . nodeList ;
var fixedTop = this . options . fixedTop ; var offset:==:this . options . offset ;
var createPromiseCapability = sharedUtil . createPromiseCapability ; var isInt:==:sharedUtil . isInt ;
var path = require ( ' path ' ) ; var repl:==:require ( ' repl ' ) ;
var options = opt_options  |  |  ; var size:==:options . size ;
var row = delta . start . row ; var column:==:delta . start . column ;
var div = document . body . appendChild ( document . createElement ( ' div ' ) ) ; var input:==:div . appendChild ( document . createElement ( ' input ' ) ) ;
var slicePartitions = math . round ( defaultValue ( options . slicePartitions , 8 ) ) ; var subdivisions:==:math . round ( defaultValue ( options . subdivisions , 128 ) ) ;
var hash = _ ref . hash ; var state:==:_ ref . state ;
var clockseq = options . clockseq ! = null ? options . clockseq : _ clockseq ; var msecs:==:options . msecs !   null ? options . msecs : new Date ( ) . getTime ( ) ;
var multiplier = clockViewModel . multiplier ; var currentTime:==:clockViewModel . currentTime ;
var key = options . key ; var number:==:options . number ;
var a = this . agents [ j ] ; var d:==:a . p . dist_from ( it . p ) ;
var offset = file_ids [ file_id ] . offset ; var buffer:==:file_ids [ file_id ] . buffer ;
var browserify = require ( ' browserify ' ) ; var path:==:require ( ' path ' ) ;
var activityIndicatorios = require ( ' activityIndicatorios ' ) ; var progressBarAndroid:==:require ( ' progressBarAndroid ' ) ;
var center = options . center ; var semiMajorAxis:==:options . semiMajorAxis ;
var destination = this . destination ; var resultSelector:==:this . resultSelector ;
var spawn = require ( ' child_process ' ) . spawn ; var path:==:require ( ' path ' ) ;
var target = target  |  |  new Vec3 ( ) ; var e:==:this . elements ;
var isFetchNeeded = t . isFetchNeeded ; var fetchEvents:==:t . fetchEvents ;
var extrude = queryBooleanValue ( geometryNode , ' extrude ' , namespaces . kml ) ; var altitudeMode:==:queryStringValue ( geometryNode , ' altitudeMode ' , namespaces . kml ) ;
var width = flyoutRect . width ; var height:==:flyoutRect . height ;
var IDENTITY_MATRIX = sharedUtil . identity_matrix ; var imageKind:==:sharedUtil . imageKind ;
var connect = require ( ' gulp - connect ' ) ; var less:==:require ( ' gulp - less ' ) ;
var sum32_4 = utils . sum32_4 ; var blockHash:==:hash . common . blockHash ;
var _ realloc = Module [ ' _ realloc ' ] = asm [ ' _ realloc ' ] ; var _ im_get_spl_start:==:Module [ ' _ im_get_spl_start ' ]    asm [ ' _ im_get_spl_start ' ] ;
var direction = camera3D . direction ; var up:==:camera3D . up ;
var rowBytes = this . rowBytes ; var bufferLength:==:this . bufferLength ;
var appListView = _ jsViewAppListView [ ' default ' ] ; var addonListView:==:_ jsViewAddonListView [ ' default ' ] ;
var lockSlider = this . client . findElement ( this . selector . lockSlider ) ; var size:==:lockSlider . size ( ) ;
var y = readmpInt ( der , ' y ' ) ; var p:==:readmpInt ( der , ' p ' ) ;
var p = tip ( e ) ; var c:==:p . find ( ' . editable - clear - x ' ) ;
var left = Math . max ( rect1 . left , rect2 . left ) ; var top:==:Math . max ( rect1 . top , rect2 . top ) ;
var priv = privatePool . get ( this ) ; var onlyFullyVisible:==:priv . onlyFullyVisible ;
var cheerio = require ( ' cheerio ' ) ; var superagent:==:require ( ' superagent ' ) ;
var uglify = require ( ' gulp - uglify ' ) ; var zip:==:require ( ' gulp - zip ' ) ;
var opts = task . opts ; var callback:==:task . callback ;
var util = require ( ' util ' ) ; var hasOwnProp:==:object . prototype . hasOwnProperty ;
var pathArray = options . pathArray ; var closeArray:==:options . closeArray ;
var maxRows = this . instance . getSettings ( ) . maxRows ; var maxCols:==:this . instance . getSettings ( ) . maxCols ;
var lowPriorityWarning = require ( ' lowPriorityWarning ' ) ; var reactDebugCurrentFrame:==:require ( ' reactDebugCurrentFrame ' ) ;
var a1 = field : ' a1 ' , field2 : ' hello ' ; var a2:==:field : ' a2 ' , field2 : 33 ;
var x = vec [ 0 ] * this . fromPoint . x + vec [ 1 ] * via1 . x + vec [ 2 ] * via2 . x + vec [ 3 ] * this . toPoint . x ; var y:==:vec [ 0 ] * this . fromPoint . y + vec [ 1 ] * via1 . y + vec [ 2 ] * via2 . y + vec [ 3 ] * this . toPoint . y ;
var etag = payloadMetadata . etag ; var uri:==:payloadMetadata . uri ;
var menuItem = imports . menuItem ; var workspace:==:imports [ ' collab . workspace ' ] ;
var children = results . children ( ) ; var length:==:children . length ;
var gulp = require ( ' gulp ' ) ; var imagemin:==:require ( ' gulp - imagemin ' ) ;
var width = that . imageObj . width ( ) ; var height:==:that . imageObj . height ( ) ;
var should = require ( ' should ' ) ; var mm:==:require ( ' mm ' ) ;
var value = _ ref . value ; var browser:==:_ ref . browserInfo . browser ;
var header   = require ( ' gulp - header ' ) ; var minify:==:require ( ' gulp - minify - css ' ) ;
var mkdirp = require ( ' mkdirp ' ) ; var expect:==:require ( ' expect . js ' ) ;
var height = _ cache . height ; var width:==:_ cache . width ;
var jsonResultsAdapter = breeze . jsonResultsAdapter ; var dataProperty:==:breeze . dataProperty ;
var glyph = font . glyphs . get ( i ) ; var unicode:==:glyph . unicode  |  0 ;
var run = test . runId ( ) ; var coll:==:new mongo . collection ( ' cursorDedup-'+run , collectionOptions ) ;
var rowContainer = containerCtrl . rowContainer ; var colContainer:==:containerCtrl . colContainer ;
var menuItem = imports . menuItem ; var tabManager:==:imports . tabManager ;
var toObject = schema . options . toObject ; var _ i d:==:schema . options . _ i d ;
var readFileSync = require ( ' fs ' ) . readFileSync ; var join:==:require ( ' path ' ) . join ;
var inner = dom . createDom ( ' div ' , goog . getCssName ( baseClass , ' inner - edge ' ) ) ; var outer:==:dom . createDom ( ' div ' , goog . getCssName ( baseClass , ' outer - edge ' ) ) ;
var noSleep = obj . noSleep  |  |  false ; var p:==:obj . pos  |  |  [ 0,0,0 ] ;
var _ gnu = docSet . getByLongname ( ' thingy#_gnu ' ) [ 0 ] ; var pez:==:docSet . getByLongname ( ' thingy#pez ' ) [ 0 ] ;
var postMessage = imports [ ' remote . postMessage ' ] ; var cssDocument:==:imports . cssDocument ;
var disable = options . disable ; var readonly:==:options . readonly ;
var React = require ( ' React ' ) ; var rnTesterBlock:==:require ( ' rnTesterBlock ' ) ;
var Editor = imports . Editor ; var List:==:imports . List ;
var component = exports . component = internalPropTypes . component ; var components:==:exports . components    internalPropTypes . components ;
var height = opts & & opts . height ! = = undefined ? opts . height : 1 . 0 ; var heightSegments:==:opts & & opts . heightSegments !    undefined ? opts . heightSegments : 1 ;
var normals = data . normals ; var colors:==:data . colors ;
var point = b2ContactSolver . s_psm . m_points [ j ] ; var separation:==:b2ContactSolver . s_psm . m_separations [ j ] ;
var time = $ . timePicker . _ timeStringToDate ( settings . startTime ) ; var endTime:==:$ . timePicker . _ timeStringToDate ( settings . endTime ) ;
var campaigns = this . options . campaigns ; var path:==:window . location . pathname ;
var rect = this . _ rect ; var axes:==:this . _ axesMap ;
var User = db . model ( ' userWithNumberId ' , userSchema , random ( ) ) ; var note:==:db . model ( ' noteWithNumberId ' , noteSchema , random ( ) ) ;
var isPointLight = shadowMap . isPointLight ; var passes:==:shadowMap . passes ;
var v1 = triangleNode . getAttribute ( ' v1 ' ) ; var v2:==:triangleNode . getAttribute ( ' v2 ' ) ;
var A = db . model ( ' gh4618 ' , aSchema ) ; var b:==:db . model ( ' gh4618_0 ' , bSchema ) ;
var x = ( vector . x * transformation . m [ 0 ] ) + ( vector . y * transformation . m [ 4 ] ) + ( vector . z * transformation . m [ 8 ] ) ; var y:==:( vector . x * transformation . m [ 1 ] ) + ( vector . y * transformation . m [ 5 ] ) + ( vector . z * transformation . m [ 9 ] ) ;
var p = new path . Path ( ) ; var commands:==:this . path . commands ;
var link = credit . link ; var span:==:document . createElement ( ' span ' ) ;
var get = Ember . get ; var run:==:Ember . run ;
var w = Math . floor ( this . width * this . pixelRatio ) ; var h:==:math . floor ( this . height * this . pixelRatio ) ;
var tx = wt . tx ; var ty:==:wt . ty ;
var cssClass = theme . cssClass ; var isDark:==:theme . isDark ;
var rowGetter = _ props3 . rowGetter ; var rowRenderer:==:_ props3 . rowRenderer ;
var Socket = require ( ' net ' ) . Socket ; var incomingMessage:==:require ( ' http ' ) . incomingMessage ;
var allowEdit = ! ! options . allowEdit ; var correctOrientation:==:! ! options . correctOrientation ;
var script = scriptLocation . script ( ) ; var target:==:scriptLocation . target ( ) ;
var x = defaultValue ( queryNumericValue ( iconNode , ' x ' , namespaces . gx ) , 0 ) ; var y:==:defaultValue ( queryNumericValue ( iconNode , ' y ' , namespaces . gx ) , 0 ) ;
var index = parseInt ( $ li . attr ( ' data - interaction - index ' ) , 10 ) ; var interaction:==:that . interactions [ index ] ;
var f8Colors = require ( ' f8Colors ' ) ; var f8MapView:==:require ( ' f8MapView ' ) ;
var i d = data . i d ; var url:==:data . url ;
var _ memcpy = Module [ ' _ memcpy ' ] = asm [ ' _ memcpy ' ] ; var _ strlen:==:Module [ ' _ strlen ' ]    asm [ ' _ strlen ' ] ;
var path = require ( ' path ' ) ; var passport:==:require ( ' passport ' ) ;
var test = require ( ' tap ' ) . test ; var shasum:==:require ( ' shasum ' ) ;
var models = _ _ alloyId13 . models ; var len:==:models . length ;
var modify = require ( ' gulp - modify ' ) ; var moment:==:require ( ' moment ' ) ;
var retried = this . retried ; var count:==:this . count ;
var each = require ( ' each ' ) ; var foldl:==:require ( ' foldl ' ) ;
var path = require ( ' path ' ) ; var favicon:==:require ( ' serve - favicon ' ) ;
var events = require ( ' events ' ) ; var has:==:require ( ' has ' ) ;
var selectionId = powerbi . visuals . selectionId ; var legendData:==:powerbi . visuals . legendData ;
var add = new operatorNode ( ' + ' , ' add ' , [ a , b ] ) ; var mult:==:new operatorNode ( ' * ' , ' multiply ' , [ a , b ] ) ;
var axis = ( data . axis ! = = undefined ) ? data . axis : 1 ; var radius:==:( data . radius !    undefined ) ? data . radius : 0 . 5 ;
var valueKey = this . props . valueKey ; var focusedOption:==:this . state . focusedOption  |  |  selectedOption ;
var once = require ( ' once ' ) ; var fs:==:require ( ' fs ' ) ;
var subdivisionsX = options . subdivisionsX  |  |  options . subdivisions  |  |  1 ; var subdivisionsY:==:options . subdivisionsY  |  |  options . subdivisions  |  |  1 ;
var blue600 = exports . blue600 = ' # 1e88e5 ' ; var blue700:==:exports . blue700    ' # 1976d2 ' ;
var createMemberExpression = parseTreeFactory . createMemberExpression ; var createReturnStatement:==:parseTreeFactory . createReturnStatement ;
var once = require ( ' once ' ) ; var extend:==:require ( ' extend ' ) ;
var store = core . storeFactory . get ( ' event ' ) ; var provider:==:yield store . providerFor ( event ) ;
var maxwidth = options . colmaxwidth  |  |  300 ; var widths:==:options . widths  |  |  ;
var chunks = this . chunks ; var actionId:==:el . getAttribute ( ' actionId ' ) ;
var file = result . file ; var error:==:result . error ;
var sub = new operatorNode ( ' - ' , ' subtract ' , [ a , b ] ) ; var add:==:new operatorNode ( ' + ' , ' add ' , [ a , b ] ) ;
var symbolPatternSize = itemModel . get ( ' symbolPatternSize ' )  |  |  2 ; var isAnimationEnabled:==:itemModel . isAnimationEnabled ( ) ;
var transformOrigin = kendo . effects . transformOrigin ; var fillScale:==:kendo . effects . fillScale ;
var touches = originalEvent & & originalEvent . touches ; var e:==:event ;
var withStatement = traceur . syntax . trees . withStatement ; var slice:==:array . prototype . slice . call . bind ( array . prototype . slice ) ;
var Node = scope . wrappers . Node ; var getElementsByInterface:==:scope . getElementsByInterface ;
var draftOffsetKey = require ( ' draftOffsetKey ' ) ; var editorState:==:require ( ' editorState ' ) ;
var fs = imports [ ' fs ' ] ; var panels:==:imports . panels ;
var draw = compiled . draw ; var batch:==:compiled . batch ;
var headerPair = headerPairs [ i ] ; var index:==:headerPair . indexOf ( ' \u003a\u0020 ' ) ;
var d3 = require ( ' d3 ' ) ; var fs:==:require ( ' fs ' ) ;
var state = active . state ; var offset:==:active . bounds . offset ;
var heightReference = property . getValueOrDefault ( pointGraphics . _ heightReference , time , heightReference . none ) ; var show:==:entity . isShowing & & entity . isAvailable ( time ) & & property . getValueOrDefault ( pointGraphics . _ show , time , true ) ;
var PROPER = scopeAnalyzer . proper ; var maybe_proper:==:scopeAnalyzer . maybe_proper ;
var destination = this . destination ; var predicate:==:this . predicate ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var ms:==:require ( ' ms ' ) ;
var deepPurple400 = exports . deepPurple400 = ' # 7e57c2 ' ; var deepPurple500:==:exports . deepPurple500    ' # 673ab7 ' ;
var y = this . y ; var z:==:this . z ;
var registerWrapper = scope . registerWrapper ; var wrappers:==:scope . wrappers ;
var reactComponentEnvironment = require ( ' reactComponentEnvironment ' ) ; var reactCompositeComponentTypes:==:require ( ' reactCompositeComponentTypes ' ) ;
var page1 = element ( by . i d ( ' page1 ' ) ) ; var page2:==:element ( by . i d ( ' page2 ' ) ) ;
var client = apps . _ client ; var body:==:client . findElement ( ' body ' ) ;
var redis = require ( ' redis ' ) ; var url:==:require ( ' url ' ) ;
var tpl = this . tpl ; var buttons:==:this . button . buttons ;
var realOut = this . realOut = [ ] ; var unexpectedOut:==:this . unexpectedOut    null ;
var SQRT1_2 = stdlib . Math . SQRT1_2 ; var SQRT2:==:stdlib . Math . SQRT2 ;
var buffer = require ( ' vinyl - buffer ' ) ; var merge2:==:require ( ' merge2 ' ) ;
var a = wt . a ; var b:==:wt . b ;
var requirejs = require ( ' requirejs ' ) ; var fs:==:require ( ' fs ' ) ;
var Class = Hilo . Class ; var Renderer:==:Hilo . Renderer ;
var w = e . currentTarget . w ; var editor:==:this . editor ;
var number = ref . number ; var trim:==:ref . trim ;
var total = data . total ; var pages:==:data . pages ;
var stream = streams [ name ] ; var url:==:stream . url ;
var entities = dataSource . entities . values ; var billboard:==:entities [ 0 ] . billboard ;
var opts = opts  |  |  ; var walletId:==:wallet . credentials . walletId ;
var index = name . indexOf ( keyword ) ; var items:==:node . items  |  |  node . children ;
var resizable = options . resizable ; var onResize:==:options . onResize ;
var regex = options . regex ; var keep_quoted:==:options . keep_quoted ;
var from = fileUtils . splitPath ( fromFile . parent ) ; var to:==:fileUtils . splitPath ( toFile ) ;
var hierarchyNav = this . owner . hierarchyNavigator ; var row:==:this . _ grid . getOrCreateRow ( rowIndex ) ;
var dragLeftItem = this . touchParams . dragLeftItem ; var dragRightItem:==:this . touchParams . dragRightItem ;
var Image = require ( ' Image ' ) ; var toolbarAndroid:==:require ( ' toolbarAndroid ' ) ;
var parseuri = _ dereq _ ( ' parseuri ' ) ; var parsejson:==:_ dereq _ ( ' parsejson ' ) ;
var Size = goog . math . Size ; var setContentBoxSize:==:goog . style . setContentBoxSize ;
var spawn = require ( ' child_process ' ) . spawn ; var zip:==:require ( ' gulp - zip ' ) ;
var o = e . contentWindow . document ; var m:==:o . getElementById ( ' state ' ) ;
var x = rectData . x ; var y:==:rectData . y ;
var view = that . dataSource . view ( ) ; var template:==:that . templates . itemTemplate ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var textareaFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' textareaFieldTestObject ' ) ) ;
var pi = math . pi ; var asec:==:math . asec ;
var roleKindByQueryRef = options . roleKindByQueryRef ; var queryProjectionsByRole:==:options . queryProjectionsByRole ;
var add   = createAdder ( 1 , ' add ' ) ; var subtract:==:createAdder ( -1 , ' subtract ' ) ;
var lineNumber = styleSheetHeader . lineNumberInSource ( ruleLocation . startLine ) ; var columnNumber:==:styleSheetHeader . columnNumberInSource ( ruleLocation . startLine , ruleLocation . startColumn ) ;
var f = function ( a ) return a ; var x:==:[ ' fluorescence ' , 0 , 0 , 0x41414141 ] ;
var tMin = tmpVeca . copy ( this . getMin ( ) ) . sub ( ray . origin ) . data ; var tMax:==:tmpVecb . copy ( this . getMax ( ) ) . sub ( ray . origin ) . data ;
var element = cssSelector . element ; var classNames:==:cssSelector . classNames ;
var asserts = goog . require ( ' goog . asserts ' ) ; var dateIntervalSymbols:==:goog . require ( ' goog . i18n . dateIntervalSymbols ' ) ;
var root = opt_root  |  |  document . body ; var doc:==:root . ownerDocument  |  |  document ;
var hostname = os . hostname ( ) ; var uptime:==:formatUptime ( process . uptime ( ) ) ;
var Divider = imports . Divider ; var menuItem:==:imports . menuItem ;
var error_description = _ ref . error_description ; var error_uri:==:_ ref . error_uri ;
var radii = ellipsoid . radii ; var p:==:camera . positionWC ;
var trace = cd [ 0 ] . trace ; var t:==:cd [ 0 ] . t ;
var hotspot = this . hotspots [ i d ] ; var outer:==:hotspot . getObjectByName ( ' outer ' ) ;
var isPropType = isPropTypesDeclaration ( property ) ; var isDefaultProp:==:isDefaultPropsDeclaration ( property ) ;
var hideModalAnimation = animation . hideModalAnimation ; var showBackdropAnimation:==:animation . showBackdropAnimation ;
var baseEncodingName = properties . baseEncodingName ; var differences:==:properties . differences ;
var x = value . x ; var y:==:value . y ;
var pose = controller . pose ; var controllerQuaternion:==:this . controllerQuaternion ;
var abs = Math . abs ; var cos:==:Math . cos ;
var subplotsRegistry = plots . subplotsRegistry ; var transformsRegistry:==:plots . transformsRegistry ;
var important = notification . important ; var link:==:notification . link ;
var input = element . find ( ' input ' ) . eq ( 0 ) ; var attributes:==:field . attributes ( ) ;
var recipient = send . recipient_actual  |  |  send . recipient_address ; var currency:==:send . currency ;
var osenv = require ( ' osenv ' ) ; var crypto:==:require ( ' crypto ' ) ;
var minorgridlines = axis . _ minorgridlines = [ ] ; var boundarylines:==:axis . _ boundarylines    [ ] ;
var low = candle . low ; var high:==:candle . high ;
var db = this . _ db ; var transaction:==:this . _ db . transaction ( [ DBOS_VISITS ] , ' readwrite ' ) ;
var Evaluator = imports . Evaluator ; var settings:==:imports . settings ;
var clone = require ( ' clone ' ) ; var when:==:require ( ' when ' ) ;
var purple500 = exports . purple500 = ' # 9c27b0 ' ; var purple600:==:exports . purple600    ' # 8e24aa ' ;
var alpha = grunt . option ( ' alpha ' )  |  |  false ; var env:==:process . env ;
var levels = crunch . _ crn_get_levels ( src , srcSize ) ; var width:==:crunch . _ crn_get_width ( src , srcSize ) ;
var attribute = node . attributes [ i ] ; var nodeName:==:normalizeAttributeName ( attribute . nodeName ) ;
var item = xml . childNodes . item ( i ) ; var nodeName:==:item . nodeName ;
var deepPurple50 = exports . deepPurple50 = ' # ede7f6 ' ; var deepPurple100:==:exports . deepPurple100    ' # d1c4e9 ' ;
var flattenStyle = require ( ' flattenStyle ' ) ; var merge:==:require ( ' merge ' ) ;
var c9 = imports . c9 ; var anims:==:imports . anims ;
var state = _ props2 . state ; var activeClassName:==:_ props2 . activeClassName ;
var toolbar    = this . toolbar ; var settings:==:this . settings ;
var width = + props . width ; var height:==:+ props . height ;
var options = context . options [ 0 ]  |  |  ; var allowKeywords:==:options . allowKeywords      void 0  |  |  ! ! options . allowKeywords ;
var offsetPF = this . morph . _ offsetPF ; var offsetNF:==:this . morph . _ offsetNF ;
var lightBlack = exports . lightBlack = ' rgba ( 0 , 0 , 0 , 0 . 54 ) ' ; var minBlack:==:exports . minBlack    ' rgba ( 0 , 0 , 0 , 0 . 26 ) ' ;
var height = this . _ height ; var structure:==:this . _ structure ;
var range = options . range ; var start:==:options . start ;
var min = node . getAttribute ( ' min ' ) ; var max:==:node . getAttribute ( ' max ' ) ;
var timer_counters = metrics . timer_counters ; var pctThreshold:==:metrics . pctThreshold ;
var l = 0 + ( sleft ? pleft . size + ( pleft . resizable ? this . resizer : this . padding ) : 0 ) ; var t:==:height - ( sbottom ? pbottom . size + ( pbottom . resizable ? this . resizer : this . padding ) : 0 ) - pprev . size ;
var fold = this . getNextFoldTo ( row , column ) . fold ; var folds:==:this . folds ;
var rowHeaders = this . wot . getSetting ( ' rowHeaders ' ) ; var fixedColumnsLeft:==:this . wot . getSetting ( ' fixedColumnsLeft ' ) ;
var edgeVector = spheretrimesh_edgevector ; var edgeVectorUnit:==:spheretrimesh_edgevectorunit ;
var current = $ . rwdrag . current ; var data:==:$ . data ( current . el , ' pp - rwdrag ' ) ;
var assert = require ( ' assert - plus ' ) ; var formidable:==:require ( ' formidable ' ) ;
var targetHeight = getValue ( options . targetHeight , -1 ) ; var encodingType:==:getValue ( options . encodingType , camera . encodingType . jpeg ) ;
var spawn = require ( ' child_process ' ) . spawn ; var argv:==:process . argv ;
var autoIncrement = this . autoIncrement ; var includeSpinner:==:this . includeSpinner ;
var frameState = e . frameState ; var extent:==:frameState . extent ;
var batch_size = opts . batch_size  |  |  100 ; var batches_limit:==:opts . batches_limit  |  |  10 ;
var mid = data . mid ; var checked:==:! ! this . checkedMissions [ mid ] ;
var x = this . x * 2 ; var y:==:this . y * 2 ;
var parseQueryString = _ props3 . parseQueryString ; var stringifyQuery:==:_ props3 . stringifyQuery ;
var item = options . items [ options . index ] ; var multi:==:$ ( obj . helpers . multi ) . find ( ' input ' ) ;
var h = ( hue - Math . floor ( hue ) ) * 6 . 0 ; var f:==:h - Math . floor ( h ) ;
var ctx = this . ctx ; var c:==:this . canvas ;
var _ saveSetjmp = module [ ' _ saveSetjmp ' ] = asm [ ' _ saveSetjmp ' ] ; var _ memset:==:module [ ' _ memset ' ]    asm [ ' _ memset ' ] ;
var defaultStyle = _ props . defaultStyle ; var style:==:_ props . style ;
var vertexFormat = polylineGeometry . _ vertexFormat ; var colors:==:polylineGeometry . _ colors ;
var color = props . color ; var hoverColor:==:props . hoverColor ;
var elements = this . elements _ ; var priorities:==:this . priorities _ ;
var addresses = dom . querySelector ( ' # contacts - form - addresses ' ) ; var dates:==:dom . querySelector ( ' # contacts - form - dates ' ) ;
var async = require ( ' async ' ) ; var fs:==:require ( ' fs ' ) ;
var    DIST = 23 ; var    DISTEXT:==:24 ;
var fov = m . fov ; var interpolation:==:m . interpolation ;
var generateRandomKey = require ( ' generateRandomKey ' ) ; var invariant:==:require ( ' invariant ' ) ;
var c = Ext . urlEncode ( ext . apply ( d , this . extraParams ) ) ; var b:==:this . buildUrl ( e , g ) ;
var r = this . right ; var l:==:this . left ;
var cancel = element . querySelector ( ' . cancel ' ) ; var confirm:==:element . querySelector ( ' . confirm ' ) ;
var prevent = require ( ' prevent ' ) ; var querystring:==:require ( ' querystring ' ) ;
var el = this . el ; var object3D:==:el . object3D ;
var tryCatch2 = util . tryCatch2 ; var tryCatchApply:==:util . tryCatchApply ;
var fs = require ( ' fs ' ) ; var moment:==:require ( ' moment ' ) ;
var ignorePunctuation = getOption ( options , ' ignorePunctuation ' , ' boolean ' , undefined , false ) ; var caseFirst:==:getOption ( options , ' caseFirst ' , ' string ' , [ ' upper ' , ' lower ' , ' false ' ] , undefined ) ;
var _ main = Module [ ' _ main ' ] = asm [ ' _ main ' ] ; var _ rand_r:==:Module [ ' _ rand_r ' ]    asm [ ' _ rand_r ' ] ;
var assert = require ( ' assert ' ) ; var expect:==:require ( ' chai ' ) . expect ;
var assert = require ( ' assert ' ) ; var co:==:require ( ' co ' ) ;
var offsetY = defaultValue ( options . offsety , 0 ) ; var width:==:defaultValue ( options . width , 0 ) ;
var createForStatement = parseTreeFactory . createForStatement ; var createFunctionDeclaration:==:parseTreeFactory . createFunctionDeclaration ;
var buttons = buttonsDefaults ( menuIn , menuOut ) ; var visible:==:coerce ( ' visible ' , buttons . length > 0 ) ;
var isName = corePrimitives . isName ; var isDict:==:corePrimitives . isDict ;
var colorSpace = coreColorSpace . colorSpace ; var murmurhash3_64:==:coreMurmurHash3 . murmurhash3_64 ;
var host = node . server  |  |  msg . host ; var port:==:node . port  |  |  msg . port ;
var User = db . model ( ' gh4213 ' , userSchema ) ; var post:==:db . model ( ' gh4213_0 ' , postSchema ) ;
var flat = ( options . flat = = = undefined ) ? true : options . flat ; var subdivisions:==:options . subdivisions  |  |  4 ;
var map = ctx . config . tag_map  |  |  ; var name:==:this . name ;
var aiDisplay = oSettings . aiDisplay ; var aiDisplayMaster:==:oSettings . aiDisplayMaster ;
var nunjucks = require ( ' nunjucks ' ) ; var marked:==:require ( ' marked ' ) ;
var path = this . getResponseHeader ( ' path ' ) ; var method:==:this . getResponseHeader ( ' method ' ) ;
var ikSolver = mesh . ikSolver ; var grantSolver:==:mesh . grantSolver ;
var dragging = options . dragging  |  |  this . dragging ; var forceZoomChange:==:options . forceZoomChange ;
var param = _ param ; var len:==:_ len ;
var declaration = this . transformAny ( tree . declaration ) ; var annotations:==:this . transformList ( tree . annotations ) ;
var me = matrix . elements ; var radius:==:- object . geometry . boundingSphere . radius * matrix . getMaxScaleOnAxis ( ) ;
var column = columns_1 [ _ i ] ; var roles:==:column . roles ;
var exchange = _ . find ( exchanges , function ( e ) return e . slug = = = slug ) ; var name:==:exchange . name ;
var x = transform . x ; var y:==:transform . y ;
var fontFamily = extractSingleFontFamily ( font . fontFamily ) ; var fontSize:==:+ font . fontSize  |  |  12 ;
var seg = this . segments _ [ i ] ; var n:==:goog . math . Path . segmentArgCounts _ [ seg ] * this . count _ [ i ] ;
var shallowEqual = require ( ' shallowEqual ' ) ; var translatedomPositionxy:==:require ( ' translatedomPositionxy ' ) ;
var node = nodes [ i d ] ; var runtimeSkin:==:runtimeSkins [ node . skin ] ;
var interval = this . shared . interval ; var scale:==:this . shared . scale ;
var leading = ( state . values . lineleading = = null ? state . VALUES : state . values ) . lineleading * state . scale ; var Y:==:state . Y ;
var m = minutes ; var s:==:seconds ;
var fetchBuiltIncMap = params . fetchBuiltIncMap ; var usecMap:==:params . usecMap ;
var module = this [ ' @module ' ] ; var keys:==:Object . keys ( module ) ;
var coordsArr = this . coordsArr ; var shadingType:==:this . shadingType ;
var y = ( ( ( value1 . y * part1 ) + ( value2 . y * part2 ) ) + ( tangent1 . y * part3 ) ) + ( tangent2 . y * part4 ) ; var z:==:( ( ( value1 . z * part1 ) + ( value2 . z * part2 ) ) + ( tangent1 . z * part3 ) ) + ( tangent2 . z * part4 ) ;
var createCallback = parseTreeFactory . createCallback ; var createEmptyArgumentList:==:parseTreeFactory . createEmptyArgumentList ;
var scheduler = this . scheduler ; var actions:==:scheduler . actions ;
var index = slot . index ; var simCard:==:slot . simCard ;
var rigidBodies = mesh . geometry . rigidBodies ; var bodies:==:mesh . physics . bodies ;
var less = require ( ' gulp - less ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var impulse = this . impulse ; var options:==:this . options ;
var Group = ReactART . Group ; var Shape:==:ReactART . Shape ;
var startcol = tileLayout . startcol ; var startrow:==:tileLayout . startrow ;
var w = game . world . width + margin * 2 ; var h:==:game . world . height + margin * 2 ;
var len = s . length ; var r:==:Caml_string . caml_create_string ( len ) ;
var div = document . createElement ( ' div ' ) ; var e:==:new mouseEvent ( ' mouseover ' , relatedTarget : div ) ;
var left = ( current . oleft + ( e . pageX  |  |  e . clientX ) - current . ox ) ; var top:==:( current . otop + ( e . pageY  |  |  e . clientY ) - current . oy ) ;
var custom = arc & & arc . custom  |  |  ; var getValueAtIndexOrDefault:==:helpers . getValueAtIndexOrDefault ;
var el = shader . el ; var material:==:shader . material ;
var f8DrawerLayout = require ( ' f8DrawerLayout ' ) ; var view:==:require ( ' view ' ) ;
var x = fromAxisAngleScratch . x * s ; var y:==:fromAxisAngleScratch . y * s ;
var size = parameters . size ! = = undefined ? parameters . size : 100 ; var curveSegments:==:parameters . curveSegments !    undefined ? parameters . curveSegments : 4 ;
var x = node . pos . x ; var y:==:node . pos . y ;
var gen = ref . gen ; var num:==:ref . num ;
var slice = array . slice ; var splice:==:array . splice ;
var dimensions = this . dimensions ; var dimensionInfos:==:this . _ dimensionInfos ;
var should = require ( ' should ' ) ; var async:==:require ( ' async ' ) ;
var Person = db . model ( ' gh4261 ' , personSchema ) ; var blogPost:==:db . model ( ' gh4261_0 ' , blogPostSchema ) ;
var i d = room . i d ; var password:==:room . password ;
var pickIds = model . _ pickIds ; var allowPicking:==:model . allowPicking ;
var properties = item . properties ; var loggedIn:==:data . config ? data . config . loggedIn : false ;
var identifiers = parserConf . identifiers |  |  new regExp ( ' ^ [ _ a - za - z ] [ _ a - za - z0 - 9 ] * ' ) ; var hangingIndent:==:parserConf . hangingIndent  |  |  conf . indentUnit ;
var Previewer = imports . Previewer ; var ui:==:imports . ui ;
var pi = math . pi ; var complex:==:math . complex ;
var focusedOption = _ ref8 . focusedOption ; var focusOption:==:_ ref8 . focusOption ;
var atLeast = verification . atLeast ; var atMost:==:verification . atMost ;
var padRight = _ require . padRight ; var padCenter:==:_ require . padCenter ;
var model = this . X . lookup ( e . getAttribute ( ' model ' )  |  |  p . subType ) ; var children:==:e . children ;
var localCapabilities = transceiver . localCapabilities ; var remoteCapabilities:==:transceiver . remoteCapabilities ;
var nconf = require ( ' nconf ' ) ; var mongoose:==:require ( ' mongoose ' ) ;
var expect = require ( ' chai ' ) . expect ; var glob:==:require ( ' glob ' ) ;
var Plugin = imports . Plugin ; var finder:==:imports . finder ;
var expect = chai . expect ; var sinon:==:require ( ' sinon ' ) ;
var tr = $ ( ' < tr > ' ) ; var select:==:$ ( ' < select > ' ) . attr ( ' class','pe_selectabletime ' ) . attr ( ' id',e . prefix+'_from_'+i ) ;
var renderingQueue = options . renderingQueue ; var textLayerFactory:==:options . textLayerFactory ;
var color = itemModel . get ( colorQuery ) ; var opacity:==:itemModel . get ( opacityQuery ) ;
var scale = options . scale ; var defaultViewport:==:options . defaultViewport ;
var activityIndicator = require ( ' activityIndicator ' ) ; var edgeInsetsPropType:==:require ( ' edgeInsetsPropType ' ) ;
var href = window . location . href ; var hash:==:window . location . hash ;
var d = new objectNode ( a : new symbolNode ( ' foo ' ) , b : new constantNode ( 2 ) ) ; var e:==:new objectNode ( a : new symbolNode ( ' a ' ) ) ;
var dict = params . dict ; var data:==:this . data ;
var stRotation = defaultValue ( options . stRotation , 0 . 0 ) ; var height:==:defaultValue ( options . height , 0 . 0 ) ;
var forceFunction = options . forceFunction ; var maxLength:==:options . maxLength ;
var resource = response . resourceSets [ 0 ] . resources [ 0 ] ; var maxZoom:==:this . maxZoom _     -1 ? resource . zoomMax : this . maxZoom _ ;
var size = calculate_size ( ) ; var terminal:==:terminado . make_terminal ( $ ( ' # terminado - container ' ) [ 0 ] , size , ws_url ) ;
var recordingModule = require ( ' nativeModules ' ) . initialPropsRecordingModule ; var text:==:require ( ' text ' ) ;
var color = node . getAttribute ( ' color ' ) ; var size:==:fontSizeMappings [ node . getAttribute ( ' size ' ) ] ;
var pin_up = that . options . classes . pin_up = = = null ? notice . styles . pin_up : that . options . classes . pin_up ; var pin_down:==:that . options . classes . pin_down      null ? notice . styles . pin_down : that . options . classes . pin_down ;
var f8Touchable = require ( ' f8Touchable ' ) ; var view:==:require ( ' view ' ) ;
var poweron = subject . _ poweron ; var poweroff:==:subject . _ poweroff ;
var eventproxy = require ( ' eventproxy ' ) ; var superagent:==:require ( ' superagent ' ) ;
var leaveClass = ref . leaveClass ; var leaveToClass:==:ref . leaveToClass ;
var store = pendingRequest . store ; var type:==:pendingRequest . type ;
var x = quaternion . x * inverseMagnitude ; var y:==:quaternion . y * inverseMagnitude ;
var cache = imports [ ' vfs . cache ' ] ; var error:==:require ( ' http - error ' ) ;
var clientWidth = this . element . clientWidth ; var clientHeight:==:this . element . clientHeight ;
var eventPluginHub = require ( ' eventPluginHub ' ) ; var eventPluginRegistry:==:require ( ' eventPluginRegistry ' ) ;
var preProcess = this . _ preProcess ? bind ( this . _ preProcess , this ) : null ; var postProcess:==:this . _ postProcess ? bind ( this . _ postProcess , this ) : null ;
var canvas = this . canvas ; var embedded:==:this . getAttribute ( ' embedded ' ) & & ! this . is ( ' vr - mode ' ) ;
var cfg = this . cfg ; var iv:==:cfg . iv ;
var denodeify = require ( ' denodeify ' ) ; var browserify:==:require ( ' browserify ' ) ;
var a = ( y : any ) ; var a:==:( ( y : foo ) : any ) ;
var functionDeclaration = traceur . syntax . trees . functionDeclaration ; var identifierExpression:==:traceur . syntax . trees . identifierExpression ;
var semver = require ( ' semver ' ) ; var express:==:require ( ' express ' ) ;
var className = _ props . className ; var noRowsRenderer:==:_ props . noRowsRenderer ;
var isArray = sharedUtil . isArray ; var isArrayBuffer:==:sharedUtil . isArrayBuffer ;
var second = calendar . month . second ( ) ; var daysInMonth:==:moment ( [ year , month ] ) . daysInMonth ( ) ;
var yes = binding . yes ; var no:==:binding . no ;
var child = require ( ' child_process ' ) ; var fs:==:require ( ' fs ' ) ;
var reactNativeViewAttributes = require ( ' reactNativeViewAttributes ' ) ; var platform:==:require ( ' platform ' ) ;
var jsCommon = window . jsCommon ; var powerbi:==:window . powerbi ;
var OBJECT_LITERAL = ' OBJECT_LITERAL ' ; var OBJECT_PATTERN:==:' OBJECT_PATTERN ' ;
var formatStringProp = waterfallChart . formatStringProp ; var categories:==:dataView . categorical . categories  |  |  [ ] ;
var sampleRate = this . buffer . sampleRate ; var buffer:==:this . buffer ;
var w = World_step_step_w ; var wq:==:World_step_step_wq ;
var dx = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx ' , this . dx ) ) ) ) ; var notch:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' notch ' , this . notch ) ) ) ) ;
var open = require ( ' open ' ) ; var browserify:==:require ( ' browserify ' ) ;
var meshes = this . parseList ( json . meshes , this . parseMesh ) ; var materials:==:this . parseList ( json . materials , this . parseMaterial ) ;
var key = parseKeys ( private_key ) ; var k:==:key . modulus . byteLength ( ) ;
var dynCall_vidii = Module [ ' dynCall_vidii ' ] = asm [ ' dynCall_vidii ' ] ; var dynCall_iiiii:==:Module [ ' dynCall_iiiii ' ]    asm [ ' dynCall_iiiii ' ] ;
var shader = this . shader ; var samplers:==:shader . samplers ;
var charset = cff . charset . charset ; var encoding:==:cff . encoding ? cff . encoding . encoding : null ;
var layer = isUndefined ( v [ ' layer ' ] ) ? 1 : v [ ' layer ' ] ; var duration:==:isUndefined ( v [ ' duration ' ] ) ? 2 : v [ ' duration ' ] ;
var WAIT_AFTER_LAST_REQUEST = process . env . WAIT_AFTER_LAST_REQUEST  |  |  500 ; var JS_CHECK_TIMEOUT:==:process . env . JS_CHECK_TIMEOUT  |  |  300 ;
var manifestURL = options . manifestURL ; var entryPoint:==:options . entryPoint ;
var keys = Object . keys ( path ) ; var len:==:keys . length ;
var xMax = this . xMax  |  |  0 ; var yMax:==:this . yMax  |  |  0 ;
var cursorLayer = collabDoc . cursorLayer ; var renderer:==:editor . renderer ;
var forward = motionArgs . forward = = = lastSearch . forward ; var increment:==:( lastSearch . increment ? 1 : 0 ) * ( forward ? -1 : 1 ) ;
var Widget = kendo . ui . Widget ; var dataSource:==:data . dataSource ;
var A = numeric . clone ( x ) , Ai , Aj ; var I:==:numeric . identity ( m ) , Ii , Ij ;
var eventEnd = t . eventEnd ; var eventElementHandlers:==:t . eventElementHandlers ;
var offset3D = this . _ offset3D ; var camera:==:scene . camera ;
var async = require ( ' async ' ) ; var semver:==:require ( ' semver ' ) ;
var when = require ( ' when ' ) ; var sinon:==:require ( ' sinon ' ) ;
var key = options . key  |  |  options ; var padding:==:options . padding  |  |  defaultPadding ;
var canvas = this . shared . canvas ; var interval:==:this . shared . interval ;
var height = opts & & opts . height ! = = undefined ? opts . height : 1 . 0 ; var heightSegments:==:opts & & opts . heightSegments !    undefined ? opts . heightSegments : 5 ;
var keyParseError = errs . keyParseError ; var keyEncryptedError:==:errs . keyEncryptedError ;
var m00 = this . m00 _ ; var m01:==:this . m01 _ ;
var base = entryPoint . basePath ; var flags:==:loader . flags ;
var technique = techniques [ material . technique ] ; var parameters:==:technique . parameters ;
var sWantedSelectedKey = this . _ sWantedSelectedKey ; var sWantedSelectedItemId:==:this . _ sWantedSelectedItemId ;
var _ kmq = _ kmq  |  |  [ ] ; var _ kmk:==:_ kmk  |  |  ' d945f04ff5e68057c85f5323b46f185efb3826b3 ' ;
var hyperglue = require ( ' hyperglue ' ) ; var fs:==:require ( ' fs ' ) ;
var editors = imports . editors ; var settings:==:imports . settings ;
var mangledNames = init . mangledNames ; var mangledGlobalNames:==:init . mangledGlobalNames ;
var orange600 = exports . orange600 = ' # fb8c00 ' ; var orange700:==:exports . orange700    ' # f57c00 ' ;
var ms = 0 , msMin = infinity , msMax = 0 ; var fps:==:0 , fpsMin    infinity , fpsMax    0 ;
var defaults = require ( ' defaults ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var targetbgHigh = record . targetbgHigh ; var isf:==:record . isf ;
var enableJsonpCallback = defined ( request . enableJsonpCallback , this . enableJsonpCallback ) ; var callbackParameterName:==:defined ( request . callbackParameterName , this . callbackParameterName ) ;
var clockseq = options . clockseq ! = = undefined ? options . clockseq : _ clockseq ; var msecs:==:options . msecs !    undefined ? options . msecs : new Date ( ) . getTime ( ) ;
var React = require ( ' React ' ) ; var progressBar:==:require ( ' progressBarAndroid ' ) ;
var name = user . name  |  |  ' default ' ; var d:==:'d blank ' ;
var width = imgData . width ; var height:==:imgData . height ;
var channels = animation . channels ; var parameters:==:animation . parameters ;
var indexNode = math . expression . node . indexNode ; var accessorNode:==:math . expression . node . accessorNode ;
var className = _ props . className ; var style:==:_ props . style ;
var highlightsHue = params . highlightsHue ; var highlightsSaturation:==:params . highlightsSaturation ;
var Characteristic = require ( ' hap - nodejs ' ) . Characteristic ; var inherits:==:require ( ' util ' ) . inherits ;
var run = test . runId ( ) ; var coll:==:new mongo . collection ( ' livedata_update_result_'+run , collectionOptions ) ;
var path = require ( ' path ' ) ; var hashish:==:require ( ' hashish ' ) ;
var createCallExpression = parseTreeFactory . createCallExpression ; var createFunctionExpression:==:parseTreeFactory . createFunctionExpression ;
var tree = imports . tree ; var ui:==:imports . ui ;
var state = element ( by . i d ( ' current - state ' ) ) ; var page:==:element ( by . css ( ' . page__content ' ) ) ;
var testModule = reactNative . nativeModules ; var deepDiffer:==:require ( ' deepDiffer ' ) ;
var options = opt_options ? opt_options : ; var pixelRatio:==:options . pixelRatio  |  |  ol . has . device_pixel_ratio ;
var CONST = $ . fn . utilities . CONST ; var COMMA_KEYCODE:==:CONST . COMMA_KEYCODE ;
var gridModel = finder . gridModel ; var coordsList:==:this . _ coordsList ;
var render = _ props4 . render ; var props:==:_ objectWithoutProperties ( _ props4 , [ ' createElement ' , ' render ' ] ) ;
var next = cb . next ; var nextContext:==:cb . nextContext ;
var url = ( typeof this . url ! = ' object ' ? this . url : this . url . get ) ; var sel:==:this . last . selection ;
var color = new visuals . colorHelper ( colors , properties [ ' color ' ] , defaultSettings . color ) . getColorForMeasure ( objects , ' ' ) ; var fontColor:==:new visuals . colorHelper ( colors , properties [ ' fontColor ' ] , defaultSettings . fontColor ) . getColorForMeasure ( objects , ' ' ) ;
var startButton = document . querySelector ( ' button#startButton ' ) ; var sendButton:==:document . querySelector ( ' button#sendButton ' ) ;
var strList = db . model ( ' strList ' ) ; var t:==:new strList ( ) ;
var position = line . geometry . attributes . position ; var array:==:position . array ;
var d = new gd ( 2008 , 9 , 13 ) ; var f:==:gdr . offsetInMonths _ ;
var from = req . params . from ; var to:==:req . params . to ;
var h = this . _ state . minimized ; var f:==:! this . _ state . focused ;
var mockControl = goog . require ( ' goog . testing . mockControl ' ) ; var multiTestRunner:==:goog . require ( ' goog . testing . multiTestRunner ' ) ;
var action = location . action ; var key:==:location . key ;
var getElementsByInterface = scope . getElementsByInterface ; var node:==:scope . wrappers . node ;
var fallThroughState = traceur . codegeneration . generator . fallThroughState ; var finallyFallThroughState:==:traceur . codegeneration . generator . finallyFallThroughState ;
var stylish = require ( ' jshint - stylish ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var userIdentity = app . models . userIdentity ; var userCredential:==:app . models . userCredential ;
var gulp = require ( ' gulp ' ) ; var pluginError:==:require ( ' gulp - util ' ) . pluginError ;
var metadata = this . providers . metadata ; var torrents:==:this . providers . torrents ;
var query = req . uri . query ; var path:==:query & & query . path + ' ' ;
var IO = sym ( ' IO ' ) ; var TAKE:==:' TAKE ' ;
var connect = document . getElementById ( ' connect ' ) ; var address:==:document . getElementById ( ' address ' ) ;
var animationTop = element ( by . i d ( ' animationTop ' ) ) ; var toggledNode:==:element ( by . i d ( ' toggledNode ' ) ) ;
var replace = require ( ' gulp - replace ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var coordinates = geometry . coordinates ; var encodeOffsets:==:geometry . encodeOffsets ;
var backLink = jQuery . sap . byId ( i d + ' --backLink ' ) . toggleClass ( ' sapUiLnk ' , ! isFirst ) . toggleClass ( ' sapUiLnkDsbl ' , isFirst ) ; var forwardLink:==:jQuery . sap . byId ( i d + ' --forwardLink ' ) . toggleClass ( ' sapUiLnk ' , ! isLast ) . toggleClass ( ' sapUiLnkDsbl ' , isLast ) ;
var files = self . filesOnlyList ( ) ; var folders:==:self . foldersOnlyList ( ) ;
var div = document . createElement ( ' div ' ) ; var form:==:document . createElement ( ' form ' ) ;
var component = components . get ( node ) ; var declaredPropTypes:==:component & & component . declaredPropTypes  |  |  [ ] ;
var sinon = require ( ' sinon ' ) ; var passport:==:require ( ' passport ' ) ;
var basename = state . file . opts . basename  |  |  ' unknownFile ' ; var filename:==:state . file . opts . filename  |  |  ' unknownFile ' ;
var monthNames = settings . monthNames  |  |  this . local . monthNames ; var calculateWeek:==:settings . calculateWeek  |  |  this . local . calculateWeek ;
var userContext = context . userContext ; var ctor:==:node . componentOptions . ctor ;
var characterSpacing = getStyleProperty ( item , styleContextStack , ' characterSpacing ' , 0 ) ; var link:==:getStyleProperty ( item , styleContextStack , ' link ' , null ) ;
var draft = $ draft . last ( ) ; var recent:==:$ recent . last ( ) ;
var shadowTree = shadowTrees [ i ] ; var shadow:==:getShadowInsertionPoint ( shadowTree ) ;
var hasFill = style . hasFill ( ) ; var fill:==:style . fill ;
var css = obj . css ; var media:==:obj . media ;
var tree1 = item . tree1 ; var tree2:==:item . tree2 ;
var browser = data . browser ; var round:==:data . round ;
var onAfterValidate = jasmine . createSpy ( ' onAfterValidate ' ) ; var onAfterChange:==:jasmine . createSpy ( ' onAfterChange ' ) ;
var keys = Object . keys ( obj ) ; var key:==:req . accepts ( keys ) ;
var settings = imports . settings ; var editors:==:imports . editors ;
var nodes = this . nodes ; var node:==:nodes [ idx ] ;
var nconf = require ( ' nconf ' ) ; var templates:==:require ( ' templates . js ' ) ;
var scrollbarWidth = this . state . scrollbarWidth ; var rowClass:==:rowClassName instanceof function ? rowClassName ( index : index ) : rowClassName ;
var archimate3 = this . archimate3 ; var electrical:==:this . electrical ;
var prompt = require ( ' gulp - prompt ' ) ; var spawn:==:require ( ' spawn - local - bin ' ) ;
var path   = require ( ' path ' ) ; var glob:==:bluebird . promisify ( require ( ' glob ' ) ) ;
var tag = options . tag ; var content:==:options . content  |  |  '' ;
var HORIZONTAL_ORIGIN_INDEX = Billboard . HORIZONTAL_ORIGIN_INDEX = 4 ; var VERTICAL_ORIGIN_INDEX:==:Billboard . VERTICAL_ORIGIN_INDEX    5 ;
var x = matrix . a*point . x+matrix . c*point . y+matrix . e*1 ; var y:==:matrix . b*point . x+matrix . d*point . y+matrix . f*1 ;
var services = require ( ' services ' ) ; var cards:==:require ( ' cards ' ) ;
var http = require ( ' http ' ) ; var path:==:require ( ' path ' ) ;
var w = child . size . width * 2 ; var h:==:child . size . height * 2 ;
var gulp = require ( ' gulp ' ) ; var git:==:require ( ' gulp - git ' ) ;
var reactHostComponent = require ( ' reactHostComponent ' ) ; var reactReconcileTransaction:==:require ( ' reactReconcileTransaction ' ) ;
var event = seg . event ; var source:==:event . source  |  |  ;
var renderStatic = this . renderStatic ; var height:==:this . state . height ;
var fs = require ( ' fs ' ) ; var querystring:==:require ( ' querystring ' ) ;
var focus = this . helpers . focus ; var multi:==:this . helpers . multi ;
var cellSizeAndPositionGetter = _ props . cellSizeAndPositionGetter ; var sectionSize:==:_ props . sectionSize ;
var tryStatement = traceur . syntax . trees . tryStatement ; var unaryExpression:==:traceur . syntax . trees . unaryExpression ;
var hostname = url . hostname ; var pathname:==:url . pathname ;
var times = options . times ; var firstInnerQuadrangle:==:options . firstInnerQuadrangle ;
var editor    = this . editor ; var settings:==:this . settings ;
var React = require ( ' React ' ) ; var recordingModule:==:require ( ' nativeModules ' ) . timePickerDialogRecordingModule ;
var connect = require ( ' gulp - connect ' ) ; var webpack:==:require ( ' webpack - stream ' ) ;
var key = req . param ( ' key ' ) ; var flagged:==:req . param ( ' flagged ' )  |  |  false ;
var puk = this . pukInput . value ; var newPin:==:this . newPinInput . value ;
var primitives = this . _ primitives ; var groundPrimitives:==:this . _ groundPrimitives ;
var net = require ( ' net ' ) ; var inspector:==:require ( ' node - inspector ' ) ;
var r = pixel . r ; var g:==:pixel . g ;
var instance_material = instance_materials [ j ] ; var mat:==:materials [ instance_material . target ] ;
var path = require ( ' path ' ) ; var yeoman:==:require ( ' yeoman - generator ' ) ;
var applicationData = windows . storage . applicationData ; var cameraRotationHelper:==:sdkSample . cameraRotationHelper ;
var Symbol = traceur . semantics . symbols . Symbol ; var evaluateStringLiteral:==:traceur . util . evaluateStringLiteral ;
var process = metaEvent . thread . process ( ) ; var startTime:==:metaEvent . startTime ;
var routes = _ props2 . routes ; var params:==:_ props2 . params ;
var walk = require ( ' pug - walk ' ) ; var error:==:require ( ' pug - error ' ) ;
var range = this . $ options . range  |  |  session . getSelection ( ) . getRange ( ) ; var start:==:this . $ options . start  |  |  range [ searchSelection ? ' end ' : ' start ' ] ;
var getSampleStateForTesting = require ( ' getSampleStateForTesting ' ) ; var insertFragmentIntoContentState:==:require ( ' insertFragmentIntoContentState ' ) ;
var save = imports . save ; var menus:==:imports . menus ;
var w = a . width ; var h:==:a . height ;
var db = syncBrowserdb . db . _ db ; var transaction:==:db . transaction ( dbos_visits , ' readwrite ' ) ;
var clearOverlays = t . clearOverlays ; var daySelectionMousedown:==:t . daySelectionMousedown ;
var i d = payload . i d  |  |  payload [ 0 ] . i d ; var method:==:payload . method  |  |  payload [ 0 ] . method ;
var y = ' g . y ' ; var z:==:' g . z ' ;
var x1 = this . x1 _ ; var x2:==:this . x2 _ ;
var context = frameState . context ; var vertexBuffersToCreate:==:loadResources . vertexBuffersToCreate ;
var vertexFormat = defaultValue ( options . vertexFormat , vertexFormat . default ) ; var granularity:==:defaultValue ( options . granularity , cesiumMath . radians_per_degree ) ;
var cm    = this . cm ; var lang:==:this . lang ;
var i d = normalizeModule ( parentId , i d ) ; var module:==:require . modules [ i d ] ;
var flateStream = coreStream . flateStream ; var jbig2Stream:==:coreStream . jbig2Stream ;
var after = _ dereq _ ( ' after ' ) ; var utf8:==:_ dereq _ ( ' utf8 ' ) ;
var i d = i d  |  |  options . size ( ) ; var option:==:chart_option_color ( ) ;
var minFontSize = settings . general . minFontSize * wordCloud . fontSizePercentageCoefficent ; var maxFontSize:==:settings . general . maxFontSize * wordCloud . fontSizePercentageCoefficent ;
var cache = require ( ' memory - cache ' ) ; var argv:==:optimist . argv ;
var enqueue = document . getElementById ( ' enqueue ' ) ; var lang:==:document . getElementById ( ' lang ' ) ;
var previousCellsCount = _ ref . previousCellsCount ; var previousCellSize:==:_ ref . previousCellSize ;
var syntheticClipboardEvent = require ( ' syntheticClipboardEvent ' ) ; var syntheticEvent:==:require ( ' syntheticEvent ' ) ;
var target = this . _ target ( ) ; var bitField:==:target . _ bitField ;
var drawingBufferWidth = context . drawingBufferWidth ; var drawingBufferHeight:==:context . drawingBufferHeight ;
var exchange = $ scope . exchange ; var currency:==:ripple . Currency . from_human ( exchange . currency_name ) ;
var option = gRequire ( ' option ' ) ; var help:==:gRequire ( ' help ' ) ;
var currency = config . watch . currency ; var asset:==:config . watch . asset ;
var parse = propertyTypes . boolean . parse ; var stringify:==:propertyTypes . boolean . stringify ;
var jDiv = jDivInit ( i d ) ; var len:==:jDiv . children ( ' div . comments ' ) . children ( ) . length ;
var startLine = this . _ ruleLocation . startLine ; var startColumn:==:this . _ ruleLocation . startColumn ;
var preferencePanel = imports . preferencePanel ; var ui:==:imports . ui ;
var ref = file . meta . ref ; var path:==:file . meta . path ;
var karma = require ( ' karma ' ) ; var gulp:==:require ( ' gulp ' ) ;
var eventTarget = scope . wrappers . eventTarget ; var selection:==:scope . wrappers . selection ;
var acquit = require ( ' acquit ' ) ; var marked:==:require ( ' marked ' ) ;
var _ i d = schema . options . _ i d ; var i d:==:schema . options . i d ;
var identitycMap = corecMap . identitycMap ; var getGlyphsUnicode:==:coreGlyphList . getGlyphsUnicode ;
var chromeBar = this . chromeBar ; var titleBar:==:this . titleBar ;
var state = cm . getTokenAt ( cm . getCursor ( ) ) . state ; var inner:==:codeMirror . innerMode ( cm . getMode ( ) , state ) ;
var axisList = this . axisList ; var lower:==:aabb . lowerBound [ axis ] ;
var summary = $ ( ' # grid_'+ this . name + ' _ summary ' ) ; var footer:==:$ ( ' # grid_'+ this . name + ' _ footer ' ) ;
var jbig2Stream = coreStream . jbig2Stream ; var jpegStream:==:coreStream . jpegStream ;
var predefinedName = traceur . syntax . predefinedName ; var tempVarTransformer:==:traceur . codegeneration . tempVarTransformer ;
var test   = require ( ' utest ' ) ; var assert:==:require ( ' assert ' ) ;
var visualMapModel = this . visualMapModel ; var shapes:==:this . _ shapes ;
var scalerank = feature . get ( ' scalerank ' ) ; var labelrank:==:feature . get ( ' labelrank ' ) ;
var method = req . method ; var url:==:req . url ;
var scale = event . scale  |  |  1 ; var rotation:==:event . rotation  |  |  0 ;
var node = stack . node ; var index:==:stack . index++ ;
var div = document . body . appendChild ( document . createElement ( ' div ' ) ) ; var span:==:div . appendChild ( document . createElement ( ' span ' ) ) ;
var draftEntity = require ( ' draftEntity ' ) ; var createCharacterList:==:require ( ' createCharacterList ' ) ;
var start = rng . startContainer ; var end:==:rng . endContainer ;
var dirname = pathFn . dirname ( path ) ; var basename:==:pathFn . basename ( path , extname ) ;
var col = pos . widget . col ; var row:==:pos . widget . row ;
var oView = this . _ oView ; var oDialog:==:oView . byId ( ' helloDialog ' ) ;
var type = contentmmlNode . getAttribute ( ' type ' ) ; var base:==:contentmmlNode . getAttribute ( ' base ' ) ;
var Tree = imports . Tree ; var Datagrid:==:imports . Datagrid ;
var roundRadius = ( settings . roundRadius = = null ) ? 0 : settings . roundRadius ; var borderThickness:==:( settings . borderThickness     null ) ? 1 : settings . borderThickness ;
var start = toInt ( res . feed . openSearch$startIndex . $ t ) ; var total:==:toInt ( res . feed . openSearch$totalResults . $ t ) ;
var waitid = typeof waitid = = ' undefined '  |  |  waitid = = = null ? showid : ( waitid ! = = '' ? waitid : '' ) ; var showidclass:==:! showidclass ? '' : showidclass ;
var radius = this . radius ; var previousRadius:==:this . previousRadius ;
var testModule = require ( ' nativeModules ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var boundingBox = instance . get ( ' boundingBox ' ) ; var paginator:==:instance . get ( ' paginator ' ) ;
var COMPUTED_PROPERTY_NAME = ' COMPUTED_PROPERTY_NAME ' ; var CONDITIONAL_EXPRESSION:==:' CONDITIONAL_EXPRESSION ' ;
var api = imports . api ; var pubsub:==:imports . pubsub ;
var f = function ( obj ) return obj . x * obj . y ; var m:==:functionUtils . memoize ( f ) ;
var x2 = parsePercent ( positionInfo . x2 , containerWidth ) ; var y2:==:parsePercent ( positionInfo . y2 , containerHeight ) ;
var listView = require ( ' listView ' ) ; var dimensions:==:require ( ' dimensions ' ) ;
var defaults = codeMirror . defaults = ; var optionHandlers:==:codeMirror . optionHandlers    ;
var urlSpan = this . boxElement . querySelector ( ' . ' + cfg . urlSpanClass ) ; var acceptLink:==:this . boxElement . querySelector ( ' . ' + cfg . acceptLinkClass ) ;
var rtcPeerConnection = window . mozrtcPeerConnection  |  |  window . webkitrtcPeerConnection ; var rtcSessionDescription:==:window . mozrtcSessionDescription  |  |  window . rtcSessionDescription ;
var b = rejectSoon ( ' rejected - b ' , 30 ) ; var c:==:fulfillSoon ( ' c ' , 10 ) ;
var dest = options . dest  |  |  new uint8Array ( destw * desth * 4 ) ; var quality:==:options . quality      undefined ? 3 : options . quality ;
var canvas = this . canvas = fabric . isLikelyNode ? fabric . createCanvasForNode ( ) : new fabric . canvas ( el ) ; var upperCanvasEl:==:canvas . upperCanvasEl ;
var sel = $ ( this ) . selectedValues ( ) ; var a:==:typeof ( ascending )     ' undefined ' ? true : ! ! ascending ;
var element = that . element ; var custom:==:that . _ customOption ;
var rotation = node . _ rotation  |  |  0 ; var scaleX:==:( typeof node . _ scaleX      ' number ' ) ? node . _ scaleX : 1 ;
var fieldName2 = comparator . fieldName2 ; var ascending1:==:comparator . ascending1 ;
var constantNode = math . expression . node . constantNode ; var symbolNode:==:math . expression . node . symbolNode ;
var util = require ( ' util ' ) ; var binding:==:process . binding ( ' fs ' ) ;
var dy2 = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dy2 ' , this . dy2 ) ) ) ) ; var arrowHead:==:math . max ( 0 , math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' arrowHead ' , this . arrowHead ) ) ) ) ;
var bodyReps = body . bodyReps ; var len:==:bodyReps . length ;
var era = getOption ( options , ' era ' , ' string ' , [ ' narrow ' , ' short ' , ' long ' ] , undefined ) ; var year:==:getOption ( options , ' year ' , ' string ' , [ ' 2-digit ' , ' numeric ' ] , undefined ) ;
var t = test . bind ( , 1 ) ; var p:==:new Proxy ( test , trap ) ;
var b = require ( ' comp_b ' ) ; var b:==:require ( ' comp_b ' ) ;
var reactNativeStackInjection = require ( ' reactNativeStackInjection ' ) ; var reactUpdates:==:require ( ' reactUpdates ' ) ;
var Util = sharedUtil . util ; var error:==:sharedUtil . error ;
var FUNCTION_DECLARATION = parseTreeType . function_declaration ; var identifier_expression:==:parseTreeType . identifier_expression ;
var rack = this . rack ; var pids:==:this . pids ;
var React = require ( ' React ' ) ; var Platform:==:require ( ' Platform ' ) ;
var ddr = state . ddr ; var pins:==:state . pins ;
var width = node . getData ( ' width ' ) ; var height:==:node . getData ( ' height ' ) ;
var query = location . query ; var hash:==:location . hash ;
var path = require ( ' path ' ) ; var existsSync:==:fs . existsSync  |  |  path . existsSync ;
var node = cmd . _ node ; var texture:==:node . _ texture  |  |  ( node . _ spriteFrame ? node . _ spriteFrame . _ texture : null ) ;
var objectId = result . result . result . objectId ; var promise:==:protocol . runtime . awaitPromise ( promiseObjectId : objectId ) ;
var isDefined = leafletHelpers . isDefined ; var defaults:==:leafletMapDefaults . setDefaults ( scope . defaults , attrs . i d ) ;
var eventType = goog . fs . fileReader . eventType ; var readyState:==:goog . fs . fileReader . readyState ;
var onSelect = _ ref . onSelect ; var optionClassName:==:_ ref . optionClassName ;
var selected = this . option . selected ; var selectedMode:==:this . get ( ' selectedMode ' ) ;
var has     = _ _ webpack_require _ _ ( 1023 ) . has ; var isValidEntityCode:==:_ _ webpack_require _ _ ( 1023 ) . isValidEntityCode ;
var colors = Logger . colors ; var format:==:util . format ;
var stencilSet = stencilSets [ i ] ; var nodes:==:stencilSet . nodes ( ) ;
var button = options . buttons [ i ] ; var b:==:$ ( ' < button > ' ) . button ( ) . appendTo ( buttonBar ) ;
var getSelectAll = window . getSelectAll ; var iNumberOfRows:==:window . iNumberOfRows ;
var argumentList = traceur . syntax . trees . argumentList ; var arrayLiteralExpression:==:traceur . syntax . trees . arrayLiteralExpression ;
var key = options . key ; var value:==:options . value ;
var constrain = ghost  |  |  ( params . constrain = = = true ) ; var revert:==:params . revert !    false ;
var value1 = element ( by . binding ( ' value1 ' ) ) ; var value2:==:element ( by . binding ( ' value2 ' ) ) ;
var method = options . method ; var ignoreSize:==:options . ignoreSize ;
var center = geometry . boundingSpherecv . center ; var x:==:center . x ;
var direction = camera . direction ; var right:==:camera . right ;
var option = this . option ; var iconPaths:==:this . iconPaths ;
var b = bProp : 1 ; var c:==:cProp : 2 ;
var refreshMode = queryStringValue ( iconNode , ' refreshMode ' , namespaces . kml ) ; var viewRefreshMode:==:queryStringValue ( iconNode , ' viewRefreshMode ' , namespaces . kml ) ;
var align = this . align _ ; var font:==:this . font _ ;
var target = seriously . target ( ' # p5canvas ' ) ; var chroma:==:seriously . effect ( ' chroma ' ) ;
var tryCatch2 = util . tryCatch2 ; var tryCatch1:==:util . tryCatch1 ;
var tabbehavior = architectApp . services . tabbehavior ; var filePath:==:selected . packageConfig & & selected . packageConfig . filePath ;
var $ toolbarElem = editor . $ toolbarElem ; var menus:==:this . menus ;
var windows = this . windows ; var len:==:windows . length ;
var sourceActivity = this . g . getById ( sourceActivityId ) ; var destinationActivity:==:this . g . getById ( destinationActivityId ) ;
var layoutAnimation = require ( ' layoutAnimation ' ) ; var react:==:require ( ' react ' ) ;
var fcol = fcols [ idx ] ; var resizer:==:document . createElement ( ' gui - list - view - column - resizer ' ) ;
var O = ES . toObject ( this ) ; var len:==:es . toLength ( o . length ) ;
var valueFormatter = powerbi . visuals . valueFormatter ; var double:==:powerbi . double ;
var host = this . host ; var port:==:portPattern . exec ( host ) ;
var header = segment . header ; var data:==:segment . data , position    segment . start , end    segment . end ;
var App = _ appJsModelsApp [ ' default ' ] ; var deviceNameService:==:_ appJsServicesDeviceNameService [ ' default ' ] ;
var parameters = technique . parameters ; var attributes:==:technique . attributes ;
var Platform = require ( ' Platform ' ) ; var React:==:require ( ' React ' ) ;
var css = [ ' gulpfile . js ' ] . concat ( paths . css , paths . vendorcss ) ; var images:==:[ ' gulpfile . js ' ] . concat ( paths . images ) ;
var axon    = require ( ' pm2-axon ' ) ; var util:==:require ( ' util ' ) ;
var chunkLength = this . chunkLength ( wrapper ) ; var childNodes:==:wrapper . childNodes ;
var util = require ( ' util ' ) ; var chalk:==:require ( ' chalk ' ) ;
var l = arguments . length ; var a:==:new Array ( l - 3 ) ;
var c = p . cos ( angle ) ; var s:==:p . sin ( angle ) ;
var literalExpression = traceur . syntax . trees . literalExpression ; var parseTree:==:traceur . syntax . trees . parseTree ;
var Complex = math . type . Complex ; var Matrix:==:math . type . Matrix ;
var msecs = ( options . msecs ! = null ) ? options . msecs : new Date ( ) . getTime ( ) ; var nsecs:==:( options . nsecs !   null ) ? options . nsecs : _ lastnSecs + 1 ;
var bind = _ angular . bind ; var isUndefined:==:_ angular . isUndefined ;
var ch = input . charAt ( nextCharIndex++ ) ; var b:==:goog . crypt . base64 . charToByteMap _ [ ch ] ;
var progress = parseFloat ( $ el . data ( ' progress ' ) ) + ' % ' ; var title:==:$ el . data ( ' title ' )  |  |  '' ;
var end = cmap . endCode . get ( _ i5 ) ; var start:==:cmap . startCode . get ( _ i5 ) ;
var fixedDataTableCell = require ( ' fixedDataTableCell . react ' ) ; var cx:==:require ( ' cx ' ) ;
var doWhileStatement = traceur . syntax . trees . doWhileStatement ; var forOfStatement:==:traceur . syntax . trees . forOfStatement ;
var settings = imports . settings ; var save:==:imports . save ;
var desiredCapabilities = parameters [ ' desiredCapabilities ' ] ; var requiredCapabilities:==:parameters [ ' requiredCapabilities ' ] ;
var element = this . element = args . element ; var graphs:==:this . graphs    args . graphs ;
var assert = require ( ' assert - plus ' ) ; var format:==:require ( ' util ' ) . format ;
var moment = require ( ' moment ' ) ; var mongoose:==:require ( ' mongoose ' ) ;
var parentGlobalTransform = result ? result . parentGlobalTransform : null ; var parentGlobalTransformMatrix:==:result ? result . parentGlobalTransformMatrix : null ;
var key1 = ' key1 ' , comp1 = content : ' some thing in comp1 ' ; var comp2:==:name : ' key2 ' , content : ' some thing in comp2 ' ;
var isAfterContentEditableFalse = caretUtils . isAfterContentEditableFalse ; var isBeforeContentEditableFalse:==:caretUtils . isBeforeContentEditableFalse ;
var line = lastSelectionCurEnd . line - lastSelectionCurStart . line ; var ch:==:line ? lastSelectionCurEnd . ch : lastSelectionCurEnd . ch - lastSelectionCurStart . ch ;
var outputEncodings = this . outputEncodings ; var outputCallbacks:==:this . outputCallbacks ;
var path = require ( ' path ' ) ; var spawnSync:==:require ( ' child_process ' ) . spawnSync ;
var floatingLabelFixed = _ props2 . floatingLabelFixed ; var floatingLabelFocusStyle:==:_ props2 . floatingLabelFocusStyle ;
var stRotation = geometry . _ stRotation ; var extrudedHeight:==:geometry . _ extrudedHeight ;
var getUserName = togetherjs . config . get ( ' getUserName ' ) ; var getUserColor:==:togetherjs . config . get ( ' getUserColor ' ) ;
var pid = postEl . attr ( ' data - pid ' ) ; var index:==:parseInt ( postEl . attr ( ' data - index ' ) , 10 ) ;
var kr = this . kr ; var n:==:yl . length ;
var desc = weather . description  |  |  ' < unknown weather > ' ; var temp:==:main . temp  |  |  ' < unknown temp > ' ;
var rev = opts . rev ? doc . revs [ opts . rev ] . data : doc . data ; var digest:==:rev . _ attachments [ attachId ] . digest ;
var debug = imports [ ' debugger ' ] ; var fs:==:imports [ ' fs ' ] ;
var first = document . getElementById ( ' first ' ) . firstChild ; var two:==:document . getElementById ( ' two ' ) . firstChild ;
var code = req . query . code ; var state:==:req . query . state ;
var throughput = preset . throughput  |  0 ; var latency:==:preset . latency  |  0 ;
var b = m . observable ( 0 ) ; var c:==:m . computed ( ( )   > a . get ( ) + b . get ( ) ) ;
var tilingPattern = displayPatternHelper . tilingPattern ; var getShadingPatternFromir:==:displayPatternHelper . getShadingPatternFromir ;
var e = end + 1 ; var s:==:start - 1 ;
var style = _ props . style ; var width:==:_ props . width ;
var dateTimeSequence = powerbi . dateTimeSequence ; var dataViewObjects:==:powerbi . dataViewObjects ;
var x = screenCoords . x , y = screenHeight - screenCoords . y - 1 ; var tmp:==:this . tmp ;
var x = this . normal . x ; var y:==:this . normal . y ;
var fs = require ( ' fs ' ) ; var request:==:require ( ' request ' ) ;
var v = particle . velocity ; var r:==:particle . radius  |  |  0 ;
var fs = require ( ' fs ' ) ; var helmet:==:require ( ' helmet ' ) ;
var debug = require ( ' debug ' ) ( ' engine . io - client : socket ' ) ; var index:==:require ( ' indexof ' ) ;
var htmlShadowElement = scope . wrappers . htmlShadowElement ; var node:==:scope . wrappers . node ;
var net = require ( ' net ' ) ; var child:==:require ( ' child_process ' ) ;
var editor = e . editor ; var ace:==:editor . ace ;
var cache = Cache . findById ( cacheId ) ; var hash:==:hashStream . read ( ) . toString ( ' hex ' ) ;
var readline = require ( ' readline ' ) ; var keytar:==:require ( ' keytar ' ) ;
var route = what  |  |  this [ config . restangularFields . route ] ; var fetchUrl:==:urlHandler . fetchUrl ( this , what ) ;
var path = require ( ' path ' ) ; var root:==:options . root ;
var exportVisitor = traceur . codegeneration . module . exportVisitor ; var importStarVisitor:==:traceur . codegeneration . module . importStarVisitor ;
var path = require ( ' path ' ) ; var utils:==:require ( ' keystone - utils ' ) ;
var main = $ ( this ) . find ( ' form . main ' ) . serializeArray ( ) ; var rewards:==:$ ( this ) . find ( ' form . rewards ' ) . serializeArray ( ) ;
var draftEntitySegments = require ( ' draftEntitySegments ' ) ; var getRangesForDraftEntity:==:require ( ' getRangesForDraftEntity ' ) ;
var mout = require ( ' mout ' ) ; var multiline:==:require ( ' multiline ' ) . stripIndent ;
var field = this . options . field ; var FIELDS:==:vectorField . fields ;
var widget = script . getAttribute ( ' data - widget ' ) ; var deprecated:==:! ! script . getAttribute ( ' data - deprecated ' ) ;
var supportConstantColor = exports . supportConstantColor = ' aliceblue | antiquewhite | aqua | aquamarine | azure | beige | bisque | black | blanchedalmond | blue | blueviolet | brown | burlywood | cadetblue | chartreuse | chocolate | coral | cornflowerblue | cornsilk | crimson | cyan | darkblue | darkcyan | darkgoldenrod | darkgray | darkgreen | darkgrey | darkkhaki | darkmagenta | darkolivegreen | darkorange | darkorchid | darkred | darksalmon | darkseagreen | darkslateblue | darkslategray | darkslategrey | darkturquoise | darkviolet | deeppink | deepskyblue | dimgray | dimgrey | dodgerblue | firebrick | floralwhite | forestgreen | fuchsia | gainsboro | ghostwhite | gold | goldenrod | gray | green | greenyellow | grey | honeydew | hotpink | indianred | indigo | ivory | khaki | lavender | lavenderblush | lawngreen | lemonchiffon | lightblue | lightcoral | lightcyan | lightgoldenrodyellow | lightgray | lightgreen | lightgrey | lightpink | lightsalmon | lightseagreen | lightskyblue | lightslategray | lightslategrey | lightsteelblue | lightyellow | lime | limegreen | linen | magenta | maroon | mediumaquamarine | mediumblue | mediumorchid | mediumpurple | mediumseagreen | mediumslateblue | mediumspringgreen | mediumturquoise | mediumvioletred | midnightblue | mintcream | mistyrose | moccasin | navajowhite | navy | oldlace | olive | olivedrab | orange | orangered | orchid | palegoldenrod | palegreen | paleturquoise | palevioletred | papayawhip | peachpuff | peru | pink | plum | powderblue | purple | rebeccapurple | red | rosybrown | royalblue | saddlebrown | salmon | sandybrown | seagreen | seashell | sienna | silver | skyblue | slateblue | slategray | slategrey | snow | springgreen | steelblue | tan | teal | thistle | tomato | turquoise | violet | wheat | white | whitesmoke | yellow | yellowgreen ' ; var supportConstantFonts:==:exports . supportConstantFonts    ' arial | century | comic | courier | cursive | fantasy | garamond | georgia | helvetica | impact | lucida | symbol | system | tahoma | times | trebuchet | utopia | verdana | webdings | sans - serif | serif | monospace ' ;
var chalk = require ( ' chalk ' ) ; var execSync:==:require ( ' child_process ' ) . execSync ;
var Switch = require ( ' Switch ' ) ; var Text:==:require ( ' Text ' ) ;
var createIdentifierToken = parseTreeFactory . createIdentifierToken ; var createSetAccessor:==:parseTreeFactory . createSetAccessor ;
var g = this . mesh . geometry . grants [ i ] ; var b:==:this . mesh . skeleton . bones [ g . index ] ;
var sign = this . sign_bit ? -1 : 1 ; var exponent:==:this . exponent_bits - 1023 ;
var path = pathArray [ p ] ; var l:==:path . length ;
var cssmin = require ( ' gulp - cssmin ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var build = imports . build ; var fs:==:imports . fs ;
var extra    = desc . stat_desc . extra_bits ; var base:==:desc . stat_desc . extra_base ;
var Class = Hilo . Class ; var View:==:Hilo . View ;
var face = this . face ; var i:==:this . ij [ 0 ] ;
var memoryStore = connect . middleware . session . memoryStore ; var session:==:connect . middleware . session . session ;
var start = typeof options . start = = ' number ' ? options . start : -32768 ; var end:==:typeof options . end     ' number ' ? options . end : 1000 ;
var loadingPlaceholder = _ props3 . loadingPlaceholder ; var placeholder:==:_ props3 . placeholder ;
var visualMode = vim . visualMode ; var operatorMotionArgs:==:copyArgs ( command . operatorMotionArgs ) ;
var closeAtx = self . options . closeAtx ; var depth:==:node . depth ;
var scene = this . _ scene ; var screenSpaceCameraController:==:scene . screenSpaceCameraController ;
var prevLine = this . prevLine ; var line:==:this . line ;
var s = require ( ' underscore . string ' ) ; var exec:==:childProcess . exec ;
var DISTANCE_DISPLAY_CONDITION_INDEX = Billboard . DISTANCE_DISPLAY_CONDITION_INDEX ; var DISABLE_DEPTH_DISTANCE:==:Billboard . DISABLE_DEPTH_DISTANCE ;
var stringExtensions = jsCommon . stringExtensions ; var formatting:==:jsCommon . formatting ;
var roll = camera . roll ; var positionCartographic:==:camera . positionCartographic ;
var indices = this . indices = [ ] ; var dimensions:==:this . dimensions ;
var offset = jQuery ( this . splitterBar ) . offset ( ) ; var height:==:jQuery ( this . splitterBar ) . height ( ) ;
var http = require ( ' http ' ) ; var Transform:==:require ( ' stream ' ) . Transform ;
var observable = ko . observable ( ) . extend ( rateLimit : 500 ) ; var computed:==:ko . computed ( observable ) ;
var piurl = document . getElementById ( ' piurl ' ) . value . trim ( ) ; var ppgurl:==:document . getElementById ( ' ppgurl ' ) . value . trim ( ) ;
var events = require ( ' events ' ) ; var fs:==:require ( ' fs ' ) ;
var dy = h * 0 . 5 * Math . max ( 0 , Math . min ( 1 , parseFloat ( mxUtils . getValue ( this . style , ' dy ' , this . dy ) ) ) ) ; var dx:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx ' , this . dx ) ) ) ) ;
var rect = this . _ rect ; var style:==:this . style ;
var scriptId = this . _ scriptIdForuiSourceCode . get ( uiSourceCode ) ; var script:==:this . _ debuggerModel . scriptForId ( scriptId ) ;
var path    = require ( ' path ' ) ; var async:==:require ( ' async ' ) ;
var lineWidth = params . lineWidth  |  |  1 ; var foldback:==:params . foldback  |  |  0 . 623 ;
var surfaceHeight = rectangleGeometry . _ surfaceHeight ; var extrudedHeight:==:rectangleGeometry . _ extrudedHeight ;
var max = this . options . max ; var min:==:this . options . min ;
var top = ref . style . top ; var bottom:==:ref . style . bottom ;
var createReturnStatement = parseTreeFactory . createReturnStatement ; var createScopedExpression:==:parseTreeFactory . createScopedExpression ;
var start = Math . min ( offsets . start , length ) ; var end:==:offsets . end      undefined ? start : Math . min ( offsets . end , length ) ;
var schemaType = mongoose . schemaType ; var validatorError:==:schemaType . validatorError ;
var red100 = exports . red100 = ' # ffcdd2 ' ; var red200:==:exports . red200    ' # ef9a9a ' ;
var actual = path . join ( _ _ dirname , dir , ' actual . txt ' ) ; var expected:==:path . join ( _ _ dirname , dir , ' expected . txt ' ) ;
var filter = arguments . filter ; var update:==:arguments . update ;
var utils = require ( ' keystone - utils ' ) ; var debug:==:require ( ' debug ' ) ( ' keystone : fields : file ' ) ;
var async = require ( ' async ' ) ; var walk:==:require ( ' walk ' ) . walk ;
var height = cropBox . height ; var left:==:cropBox . left ;
var blockMapBuilder = require ( ' blockMapBuilder ' ) ; var characterMetadata:==:require ( ' characterMetadata ' ) ;
var response_type = _ ref . response_type ; var scope:==:_ ref . scope ;
var root = this . _ root ; var use:==:this . _ use ;
var n = new rangeNode ( start , end ) ; var e:==:new constantNode ( 3 ) ;
var c = processDiagramCanvas . g . path ( ' m'+nextSrcx+','+nextSrcy+'l'+bx+','+by ) . attr ( stroke : color . get ( 255 , 153 , 51 ) , ' stroke - dasharray ' : ' - ' ) ; var c:==:processDiagramCanvas . g . ellipse ( ax , ay , 2 , 2 ) . attr ( stroke : color . slateGrey ) ;
var byteLength = bufferView . byteLength  |  |  0 ; var byteOffset:==:bufferView . byteOffset  |  |  0 ;
var fs = imports . fs ; var layout:==:imports . layout ;
var callback = require ( ' callback ' ) ; var clone:==:require ( ' clone ' ) ;
var ngModel     = sfBuilderProvider . builders . ngModel ; var ngModelOptions:==:sfBuilderProvider . builders . ngModelOptions ;
var variablesInBlock = variableBinder . variablesInBlock ; var createIdentifierExpression:==:parseTreeFactory . createIdentifierExpression ;
var expecting = Parser . expecting ; var assertion:==:Parsers . assertion ;
var buffer = context . buffer ; var subscription:==:context . subscription ;
var _ realloc = Module [ ' _ realloc ' ] = asm [ ' _ realloc ' ] ; var _ sass_compile_emscripten:==:Module [ ' _ sass_compile_emscripten ' ]    asm [ ' _ sass_compile_emscripten ' ] ;
var nodeCommands = model . _ nodeCommands ; var pickIds:==:model . _ pickIds ;
var showUi = showUiArg ; var value:==:valueArg ;
var number = opt . number  |  |  '' ; var email:==:opt . email  |  |  '' ;
var outerWidth = kendo . _ outerWidth ; var outerHeight:==:kendo . _ outerHeight ;
var firstChild = fragment . firstChild ; var lastChild:==:fragment . lastChild ;
var api = imports . api ; var fs:==:imports . fs ;
var characterData = scope . wrappers . characterData ; var enqueueMutation:==:scope . enqueueMutation ;
var nextPage = topics [ catid ] . nextPage ; var hasNextPage:==:topics [ catid ] . hasNextPage ;
var asn1 = require ( ' asn1 ' ) ; var crypto:==:require ( ' crypto ' ) ;
var photos = type ? options . photos : , data = photos . data  |  |  [ ] ; var start:==:photos . start  |  |  0 ;
var menus = imports . menus ; var auth:==:imports . auth ;
var dynCall_iiiiiiiiiiiidd = Module [ ' dynCall_iiiiiiiiiiiidd ' ] = asm [ ' dynCall_iiiiiiiiiiiidd ' ] ; var dynCall_vidii:==:Module [ ' dynCall_vidii ' ]    asm [ ' dynCall_vidii ' ] ;
var a = game . physics . arcade . angleBetween ( arrow , target ) ; var t:==:game . math . rotateToAngle ( arrow . rotation , a , 0 . 01 ) ;
var s = this . _ indexToValueInSpace ( hash , this . _ satSpace ) ; var l:==:this . _ indexToValueInSpace ( hash , this . _ lightnessSpace ) ;
var key = ' key ' in opts ? opts . key : false ; var descending:==:' descending ' in opts ? opts . descending : false ;
var extension = options . extensions . length > 0 ? ' . ' + this . pick ( options . extensions ) : ' ' ; var domain:==:options . domain_prefix ? options . domain_prefix + ' . ' + options . domain : options . domain ;
var usesDepthTexture = shadowMap . _ usesDepthTexture ; var polygonOffsetSupported:==:shadowMap . _ polygonOffsetSupported ;
var parent = list . parent ( ' . k - animation - container ' ) ; var height:==:that . options . height ;
var tabIndex = _ props3 . tabIndex ; var type:==:_ props3 . type ;
var outlineColor = property . getValueOrClonedDefault ( ellipse . outlineColor , time , color . black , scratchColor ) ; var outlineWidth:==:property . getValueOrDefault ( ellipse . outlineWidth , time , 1 . 0 ) ;
var r = renderer  |  |  constants . P2D ; var c:==:document . createElement ( ' canvas ' ) ;
var context = this . _ context ; var uniformState:==:context . uniformState ;
var count = drawCommand . _ count ; var instanceCount:==:drawCommand . instanceCount ;
var reactReconciler = require ( ' reactReconciler ' ) ; var reactVersion:==:require ( ' reactVersion ' ) ;
var forOfTransformer = traceur . codegeneration . forOfTransformer ; var freeVariableChecker:==:traceur . semantics . freeVariableChecker ;
var hovermode = opts . hovermode ; var container:==:opts . container ;
var async = require ( ' async ' ) ; var p:==:path ;
var collectionTransformer = traceur . codegeneration . collectionTransformer ; var defaultParametersTransformer:==:traceur . codegeneration . defaultParametersTransformer ;
var rimraf = require ( ' rimraf ' ) ; var chmodr:==:require ( ' chmodr ' ) ;
var isDefined = angular . isDefined ; var isFunction:==:angular . isFunction ;
var sceneModePicker = viewer . _ sceneModePicker ; var projectionPicker:==:viewer . _ projectionPicker ;
var error = utils . debug ( ' components : material : error ' ) ; var registerComponent:==:component . registerComponent ;
var transaction = e . target . transaction ; var oldVersion:==:e . oldVersion ;
var cursor = cursorPoint ( evt ) ; var x:==:cursor . x ;
var npm = think . npm ; var error:==:think . error ;
var outlineColor = property . getValueOrClonedDefault ( box . outlineColor , time , color . black , scratchColor ) ; var outlineWidth:==:property . getValueOrDefault ( box . outlineWidth , time , 1 . 0 ) ;
var container = option . container ; var width:==:option . width ;
var cascadeExpression = traceur . syntax . trees . cascadeExpression ; var caseClause:==:traceur . syntax . trees . caseClause ;
var pink900 = exports . pink900 = ' # 880e4f ' ; var pinkA100:==:exports . pinkA100    ' # ff80ab ' ;
var Plots = plotlyInternal . plots ; var axes:==:plotlyInternal . axes ;
var parent = goog . dom . getElement ( ' offset - parent - overflow ' ) ; var child:==:goog . dom . getElement ( ' offset - child - overflow ' ) ;
var h = a . alpha_data_size _ ; var i:==:e * a . pic_hdr _ . height _ ;
var token = tokens [ 0 ] ; var t:==:token . text ;
var i d = $ ( this ) . attr ( ' dialog_id ' ) ; var title:==:$ ( this ) . attr ( ' dialog_title ' ) ? $ ( this ) . attr ( ' dialog_title ' ) : '' ;
var list = item . parents ( ' . accordion - list ' ) . eq ( 0 ) ; var content:==:item . children ( ' . accordion - item - content ' ) ;
var dot = numeric . dot , inv = numeric . inv , sub = numeric . sub , add = numeric . add , ten = numeric . tensor , div = numeric . div , mul = numeric . mul ; var all:==:numeric . all , isfinite    numeric . isFinite , neg    numeric . neg ;
var special = _ getFormattedItemReference ( ' items . special ' , _ . keys ( content . special ) , ' numeric quantity ' ) ; var gear:==:_ getFormattedItemReference ( ' items . gear . owned ' , _ . keys ( content . gear . flat ) , ' boolean ' ) ;
var clientWidth = this . wrapper . clientWidth ; var clientHeight:==:this . wrapper . clientHeight ;
var callback = options . callback  |  |  function ( ) ; var scope:==:options . scope  |  |  window ;
var node = d3 . select ( sel . node ( ) ) ; var data:==:node . data ( ) ;
var typescript = require ( ' gulp - typescript ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var editor = new baidu . editor . Editor ( options ) ; var div:==:document . body . appendChild ( document . createElement ( ' div ' ) ) ;
var KINEMATIC = Body . KINEMATIC ; var STATIC:==:Body . STATIC ;
var leftRightMarginLimit = this . leftRightMarginLimit ; var layers:==:this . layers ;
var snippetId = this . _ snippetIdForuiSourceCode . get ( uiSourceCode )  |  |  ' ' ; var snippet:==:this . _ snippetStorage . snippetForId ( snippetId ) ;
var intersectedEl = this . intersectedEl ; var intersection:==:this . intersection ;
var expression = this . transformAny ( tree . expression ) ; var body:==:this . transformToBlockOrStatement ( tree . body ) ;
var c = checkCompiling . call ( this , schema , root , baseId ) ; var compilation:==:this . _ compilations [ c . index ] ;
var layerState = this . layerStates [ i ] ; var layer:==:this . map . layers [ i ] ;
var href = tag . href ? ' href= ' ' + tag . href + ' ' ' : '' ; var sizes:==:tag . sizes ? ' sizes ' ' + tag . sizes + ' ' ' : '' ;
var showContentAnimation = animation . showContentAnimation ; var hideContentAnimation:==:animation . hideContentAnimation ;
var lime900 = exports . lime900 = ' # 827717 ' ; var limeA100:==:exports . limeA100    ' # f4ff81 ' ;
var spaces = this . spaces ; var maxes:==:this . maxes ;
var c = df . appendChild ( document . createTextNode ( ' c ' ) ) ; var d:==:df . appendChild ( document . createTextNode ( 'd ' ) ) ;
var hasOwnProperty = _ _ webpack_require _ _ ( 5 ) . hasOwnProperty ; var getSafeProperty:==:_ _ webpack_require _ _ ( 17 ) . getSafeProperty ;
var cos = Math . cos ( angle ) ; var sin:==:Math . sin ( angle ) ;
var old_pass = validator . trim ( req . body . old_pass ) ; var new_pass:==:validator . trim ( req . body . new_pass ) ;
var dasherize = utils . dasherize ; var nameify:==:utils . nameify ;
var p    = require ( ' path ' ) ; var blessed:==:require ( ' blessed ' ) ;
var fixedDataTableColumnGroup = require ( ' fixedDataTableColumnGroup . react ' ) ; var fixedDataTableColumn:==:require ( ' fixedDataTableColumn . react ' ) ;
var ctrl = e . ctrlKey  |  |  false ; var shift:==:e . shiftKey  |  |  false ;
var colorIdx = get ( scope , ' colorIdx ' )  |  |  0 ; var colorNameMap:==:get ( scope , ' colorNameMap ' )  |  |  set ( scope , ' colorNameMap ' , ) ;
var Switch = require ( ' Switch ' ) ; var toolbarAndroid:==:require ( ' toolbarAndroid ' ) ;
var reflectivity = this . reflectivity ? this . reflectivity . buildCode ( builder , ' fv1 ' ) : undefined ; var light:==:this . light ? this . light . buildCode ( builder , ' v3 ' , cache : ' light ' ) : undefined ;
var treeWriter = traceur . outputgeneration . treeWriter ; var predefinedName:==:traceur . syntax . predefinedName ;
var unwrap = scope . unwrap ; var rewrap:==:scope . rewrap ;
var slash = require ( ' gulp - slash ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var throughput = conditions . throughput ; var latency:==:conditions . latency ;
var username = $ ( ' # input_username ' ) . val ( ) ; var password:==:$ ( ' # input_password ' ) . val ( ) ;
var setPrivate = m . setPrivate ; var getPrivate:==:m . getPrivate ;
var lineNumber = this . profileNode . lineNumber ? this . profileNode . lineNumber - 1 : 0 ; var columnNumber:==:this . profileNode . columnNumber ? this . profileNode . columnNumber - 1 : 0 ;
var min_uptime = typeof ( proc . pm2_env . min_uptime ) ! = = ' undefined ' ? proc . pm2_env . min_uptime : 1000 ; var max_restarts:==:typeof ( proc . pm2_env . max_restarts ) !    ' undefined ' ? proc . pm2_env . max_restarts : 16 ;
var generics = options . generics ; var initialize:==:options . initialize ;
var timelineData = this . _ timelineData ( ) ; var entryStartTimes:==:timelineData . entryStartTimes ;
var source = this . source ; var template:==:this . _ templateSection ;
var tag = info . tag ; var onEffects:==:info . onEffects ;
var shadowMaps = frameState . shadowMaps ; var length:==:shadowMaps . length ;
var debug = utils . debug ; var setComponentProperty:==:utils . entity . setComponentProperty ;
var chunk = e . currentTarget . chunk ; var session:==:this . session ;
var webview = document . querySelector ( ' webview ' ) ; var controls:==:document . querySelector ( ' # controls ' ) ;
var containerSize = _ ref3 . containerSize ; var currentOffset:==:_ ref3 . currentOffset ;
var doclet = doclets [ i ] ; var params:==:doclet . params ;
var React = require ( ' React ' ) ; var fixedDataTableCellGroup:==:require ( ' fixedDataTableCellGroup . react ' ) ;
var $ rowsSpans = that . $ rowsSpans = $ datatable . children ( ' . datatable - rows ' ) . children ( ' . datatable - rows - span ' ) ; var $ headSpans:==:that . $ headSpans    $ datatable . children ( ' . datatable - head ' ) . children ( ' . datatable - head - span ' ) ;
var font = font : ' 11px Arial ' , ' font - style ' : ' italic ' , opacity : 1 , ' fill ' : LABEL_COLOR , stroke : LABEL_COLOR , ' stroke - width ' : . 3 ; var font:==:font : ' 11px Arial ' , opacity : 1 , ' fill ' : LABEL_COLOR ;
var worldTransform = this . worldTransform ; var a:==:worldTransform . a ;
var Catch = traceur . syntax . trees . Catch ; var classDeclaration:==:traceur . syntax . trees . classDeclaration ;
var options = me . options ; var scales:==:me . scales    ;
var s = sources [ sourceIndex++ % sources . length ] ; var f:==:flags [ flagIndex++ % flags . length ] ;
var timeZone = goog . require ( ' goog . i18n . timeZone ' ) ; var array:==:goog . require ( ' goog . array ' ) ;
var hideBackdropAnimation = animation . hideBackdropAnimation ; var showContentAnimation:==:animation . showContentAnimation ;
var b = worldTransform . b ; var c:==:worldTransform . c ;
var format = _ _ webpack_require _ _ ( 11 ) . format ; var lazy:==:_ _ webpack_require _ _ ( 5 ) . lazy ;
var headers = element . _ headers ; var footers:==:element . _ footers ;
var size = this . _ size ; var dataZoomModel:==:this . dataZoomModel ;
var parallaxBackground = require ( ' parallaxBackground ' ) ; var react:==:require ( ' react ' ) ;
var keys = this . keys _ ; var map:==:this . map _ ;
var Node = test . Node ; var async:==:require ( ' async ' ) ;
var opacity = parseFloat ( _ getPropValue ( parentElm , ' opacity ' ) ) ; var transform:==:_ getPropValue ( parentElm , ' transform ' )  |  |  _ getPropValue ( parentElm , ' -webkit - transform ' )  |  |  _ getPropValue ( parentElm , ' -moz - transform ' )  |  |  _ getPropValue ( parentElm , ' -ms - transform ' )  |  |  _ getPropValue ( parentElm , ' -o - transform ' ) ;
var show = dataViewObject . getValue ( this . legendObjectProperties , legendProps . show , this . legend . isVisible ( ) ) ; var showTitle:==:dataViewObject . getValue ( this . legendObjectProperties , legendProps . showTitle , true ) ;
var p = stream . pos ; var e:==:end ;
var options = that . options ; var resizable:==:options . resizable ;
var line = getLine ( cm . doc , linen ) ; var visual:==:visualLine ( cm . doc , line ) ;
var genre = $ ( ' . genres . value ' ) . data ( ' value ' ) ; var sorter:==:$ ( ' . sorters . value ' ) . data ( ' value ' ) ;
var v2 = currVolumeNode . getElementsByTagName ( ' v2 ' ) [ 0 ] . textContent ; var v3:==:currVolumeNode . getElementsByTagName ( ' v3 ' ) [ 0 ] . textContent ;
var columnMinWidth = _ props . columnMinWidth ; var columnCount:==:_ props . columnCount ;
var batches = that . _ batches ; var length:==:batches . length ;
var data = this . _ data ; var cells:==:this . _ cells ;
var fs = require ( ' graceful - fs ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var semver   = require ( ' semver ' ) ; var cluster:==:require ( ' cluster ' ) ;
var yAlign = vm . yAlign ; var x:==:pt . x ;
var pinkA200 = exports . pinkA200 = ' # ff4081 ' ; var pinkA400:==:exports . pinkA400    ' # f50057 ' ;
var ya = plotinfo . yaxis ; var fullLayout:==:gd . _ fullLayout ;
var radiusX = p . radiusX ! = null ? p . radiusX : p . radius ; var radiusY:==:p . radiusY !   null ? p . radiusY : p . radius ;
var unauthorized = ' unauthorized ' ; var uninitialized:==:' uninitialized ' ;
var layout = imports . layout ; var Tree:==:imports . Tree ;
var MCC_SETTINGS_KEY = apnConst . mcc_settings_key ; var mnc_settings_key:==:apnConst . mnc_settings_key ;
var deferred = options . deferred  |  |  Q . defer ( ) ; var chain:==:options . chain  |  |  deferred . promise ;
var containmentEdges = this . containmentEdges ; var strings:==:this . strings ;
var size = require ( ' gulp - size ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var canvas = self . canvas ; var cropBox:==:self . cropBox ;
var cellSize = _ ref . cellSize ; var cellSizeAndPositionManager:==:_ ref . cellSizeAndPositionManager ;
var grey300 = exports . grey300 = ' # e0e0e0 ' ; var grey400:==:exports . grey400    ' # bdbdbd ' ;
var itmSbWrap = window . itmSbWrap ; var itmSbWrappm:==:window . itmSbWrappm ;
var node = optimization . node ; var sourceIndex:==:optimization . sourceIndex ;
var a = this . sandbox . spy ( ) ; var b:==:this . sandbox . spy ( ) ;
var preferredAdapters = pouchdb$2 . preferredAdapters ; var prefix:==:pouchdb$2 . prefix ;
var uuid = li . dataset . uuid ; var el:==:li . querySelector ( ' input ' ) ;
var url = _ ref . url ; var id_token_hint:==:_ ref . id_token_hint ;
var errors = require ( ' restify - errors ' ) ; var vasync:==:require ( ' vasync ' ) ;
var GALAXY_USERNAME = process . env . GALAXY_USERNAME ; var GALAXY_PASSWORD:==:process . env . GALAXY_PASSWORD ;
var first_currency = order . first_currency = ripple . Currency . from_json ( pair [ 0 ] . substring ( 0,3 ) ) ; var second_currency:==:order . second_currency    ripple . Currency . from_json ( pair [ 1 ] . substring ( 0,3 ) ) ;
var alert = imports [ ' dialog . alert ' ] . show ; var upgrade:==:imports . upgrade ;
var disp   = this . disp ; var strength:==:options . strength ;
var Unit = math . type . Unit ; var max:==:math . max ;
var e = scenes . $ g . firstChild ; var s:==:scenes [ 0 ] ;
var x = s . data [ 0 ] . x ; var y:==:s . data [ 0 ] . y ;
var rewire = require ( ' rewire ' ) ; var sinon:==:require ( ' sinon ' ) ;
var start = node . start ; var children:==:node . children ;
var all = Ember . RSVP . all ; var hash:==:Ember . RSVP . hash ;
var reactNativeEventEmitter = require ( ' reactNativeEventEmitter ' ) ; var reactNativeEventPluginOrder:==:require ( ' reactNativeEventPluginOrder ' ) ;
var Post = hexo . model ( ' Post ' ) ; var postCategory:==:hexo . model ( ' postCategory ' ) ;
var listenTo = reactBrowserEventEmitter . listenTo ; var registrationNameModules:==:reactBrowserEventEmitter . registrationNameModules ;
var x = ' x ' ; var derivedDataProperty:==:' derivedDataProperty ' ;
var state = states [ stateIdx ] ; var object:==:objects [ state . objectIdRef ] ;
var express = require ( ' express ' ) ; var format:==:require ( ' util ' ) . format ;
var k = _ k ; var acc:==:_ acc ;
var path = require ( ' path ' ) ; var spawn:==:require ( ' cross - spawn ' ) ;
var numChannels = options . numChannels  |  |  defaults . numChannels ; var sampleRateHz:==:options . sampleRateHz  |  |  defaults . sampleRateHz ;
var asin = Math . asin ; var atan2:==:Math . atan2 ;
var origin = app . origin ; var activities:==:app . manifest . activities ;
var loader = _ this7 . aurelia . loader ; var info:==:_ this7 . info ;
var trim    = String . prototype . trim ; var trimLeft:==:string . prototype . trimLeft ;
var pattern = this . pattern ; var options:==:this . options ;
var pageX = event . pageX ; var pageY:==:event . pageY ;
var simpleTransclusion = sfBuilderProvider . builders . simpleTransclusion ; var ngModelOptions:==:sfBuilderProvider . builders . ngModelOptions ;
var lazypipe = require ( ' lazypipe ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var record_on = Test . anotherWay . _ record_control_get_element ( ' record_on ' ) ; var record_off:==:test . anotherWay . _ record_control_get_element ( ' record_off ' ) ;
var horizontalOrigin = billboard . horizontalOrigin ; var verticalOrigin:==:billboard . _ verticalOrigin ;
var Tree = imports . Tree ; var Menu:==:imports . Menu ;
var clockwise = shape . clockwise  |  |  false ; var cx:==:shape . cx ;
var metadataNode = metadataNodes [ i ] ; var name:==:metadataNode . getAttribute ( ' name ' ) ;
var through = require ( ' through2 ' ) ; var path:==:require ( ' path ' ) ;
var pos = this . body . position ; var angle:==:this . body . angle ;
var recordingModule = require ( ' nativeModules ' ) . swipeRefreshLayoutRecordingModule ; var scrollView:==:require ( ' scrollView ' ) ;
var bottomRadius = options . bottomRadius ; var slices:==:defaultValue ( options . slices , 128 ) ;
var os = require ( ' os ' ) ; var winston:==:require ( ' winston ' ) ;
var touches = nativeEvent . touches ; var changedTouches:==:nativeEvent . changedTouches ;
var uuid = require ( ' uuid ' ) ; var debug:==:require ( ' debug ' ) ( ' jsbin : flash ' ) ;
var createStringLiteral = parseTreeFactory . createStringLiteral ; var createTryStatement:==:parseTreeFactory . createTryStatement ;
var min = args . signal . range . min ; var max:==:args . signal . range . max ;
var getIsCellAllDay = t . getIsCellAllDay ; var colContentLeft:==:t . colContentLeft ;
var mantissa_23_bits = this . mantissa_23_bits + ( 1 < < 23 ) ; var round:==:( ( mantissa_23_bits & round_mask ) !   0 )  |  0 ;
var w = window . innerWidth - 10 ; var h:==:window . innerHeight - 150 ;
var methods = require ( ' methods ' ) ; var slice:==:Array . prototype . slice ;
var location = el . attr ( ' data - location ' ) ; var area:==:el . children ( ' . widget - area ' ) ;
var where = ctx . where ; var data:==:ctx . instance  |  |  ctx . data ;
var kind = node . kind ; var key:==:node . key ;
var fs = require ( ' fs ' ) ; var Schema:==:mongoose . Schema ;
var documentURI = item . data . documentURI ; var uri:==:item . data . uri ;
var validFrom = options . validFrom ; var validUntil:==:options . validUntil ;
var oldRegion = cmd . _ oldRegion ; var currentRegion:==:cmd . _ currentRegion ;
var styleSheet = require ( ' styleSheet ' ) ; var tvEventHandler:==:require ( ' tvEventHandler ' ) ;
var show = new showGeometryInstanceAttribute ( isAvailable & & entity . isShowing & & this . _ showProperty . getValue ( time ) & & this . _ fillProperty . getValue ( time ) ) ; var distanceDisplayCondition:==:distanceDisplayConditionGeometryInstanceAttribute . fromDistanceDisplayCondition ( this . _ distanceDisplayCondition . getValue ( time ) ) ;
var vfs = imports . vfs ; var info:==:imports . info ;
var data = me . _ data ; var chartInstance:==:me . _ chartInstance ;
var parseBytes = utils . parseBytes ; var cachedProperty:==:utils . cachedProperty ;
var path = getPath ( descriptor . path ) ; var notify:==:notifyFunction ( object , name ) ;
var y = dataPoint [ this . _ yField ] ; var radi:==:this . _ radi ;
var provider = propertyProviders [ providerKey ] ; var prepare:==:preparers [ prepKey ] ;
var preview = panels . preview ; var parent:==:preview . parentNode ;
var httpReq = this . request . httpRequest ; var endpoint:==:httpReq . endpoint ;
var htmlMediaElement = scope . wrappers . htmlMediaElement ; var registerWrapper:==:scope . registerWrapper ;
var i d = node . getAttribute ( ' i d ' ) ; var src:==:node . getAttribute ( ' src ' ) ;
var list = new fastList ( listContainer , source ) ; var dialog:==:document . querySelector ( ' gaia - dialog - alert ' ) ;
var should = require ( ' should ' ) ; var moment:==:require ( ' moment - timezone ' ) ;
var defaultFontSizeInPt = visuals . dataLabelUtils . defaultFontSizeInPt ; var defaultLabelDensity:==:visuals . dataLabelUtils . defaultLabelDensity ;
var to = docSet . getByLongname ( ' message~headers . to ' ) ; var from:==:docSet . getByLongname ( ' message~headers . from ' ) ;
var axes = options . axes ; var viewport:==:options . viewport ;
var jshint = require ( ' jshint ' ) . JSHINT ; var babel:==:require ( ' babel ' ) ;
var util = require ( ' util ' ) ; var when:==:require ( ' when ' ) ;
var dx = e . detail . absolute . dx ; var dy:==:e . detail . absolute . dy ;
var memberGroups = this . props . memberGroups ; var doc:==:def . doc  |  |  ;
var bubble = tree . bubbleCheck ; var cascade:==:tree . cascadeCheck ;
var wrap = scope . wrap ; var getTreeScope:==:scope . getTreeScope ;
var mediaBuffer = this . mediaBuffer ? this . mediaBuffer : media ; var bufferInfo:==:_ bufferHelper2 . default . bufferInfo ( mediaBuffer , currentTime , this . config . maxBufferHole ) ;
var breakState = traceur . codegeneration . generator . breakState ; var breakContinueTransformer:==:traceur . codegeneration . generator . breakContinueTransformer ;
var cell = client . cells [ i ] ; var angle:==:cell . position . angleTo ( client . mouse . x , client . mouse . y ) ;
var a = new jsbn ( params . a ) ; var b:==:new jsbn ( params . b ) ;
var positive = intersectCache . positive ; var intersections:==:intersectCache . intersections ;
var limit = parseInt ( params . qstring . limit  |  |  20 ) ; var skip:==:parseInt ( params . qstring . skip  |  |  0 ) ;
var order = options . order  |  |  1 ; var transform:==:options . transform ;
var widthData = options . widthData ; var keyExpression:==:options . keyExpression ;
var keyEscapeUtils = require ( ' keyEscapeUtils ' ) ; var reactFeatureFlags:==:require ( ' reactFeatureFlags ' ) ;
var scrollToColumn = _ props3 . scrollToColumn ; var scrollToRow:==:_ props3 . scrollToRow ;
var user = data . user ; var pass:==:data . pass1 ;
var regionFlag = cmd . _ regionFlag ; var oldRegion:==:cmd . _ oldRegion ;
var file = opts . file ; var hash:==:opts . hash ;
var height = this . attribute ( ' height ' ) . Length . toPixels ( ' y ' ) ; var rx:==:this . attribute ( ' rx ' ) . length . toPixels ( ' x ' ) ;
var onMouseLeave = _ props . onMouseLeave ; var onMouseEnter:==:_ props . onMouseEnter ;
var zip = require ( ' gulp - zip ' ) ; var del:==:require ( ' del ' ) ;
var form = createElement ( ' form ' ) ; var input:==:createElement ( ' input ' ) ;
var offset = $ ( c ) . offset ( ) ; var w:==:$ ( c ) . width ( ) ;
var domain     = zombie_array [ index ] [ ' domain ' ] ; var port:==:zombie_array [ index ] [ ' port ' ] ;
var row = grid . rows [ 0 ] ; var col:==:grid . columns [ 1 ] ;
var define = loader . global . define ; var require:==:loader . global . require ;
var p1 = [ cp1x , cp1y ] ; var p2:==:[ cp2x , cp2y ] ;
var roamTransform = this . _ roamTransform ; var viewTransform:==:this . _ viewTransform ;
var lastY = instance . lastY ; var lastX:==:instance . lastX ;
var template = angular . element ( templates [ i ] ) ; var i d:==:template . attr ( ' i d ' ) ;
var read = require ( ' fs ' ) . readFileSync ; var parse:==:require ( ' url ' ) . parse ;
var height = $ ( window ) . height ( ) - header . offsetHeight ; var width:==:$ ( ' # terminado - container ' ) . width ( ) ;
var extent = frameState . extent ; var pixelRatio:==:frameState . pixelRatio ;
var path = require ( ' path ' ) ; var env:==:process . env ;
var polygonOffsetSupported = shadowMap . _ polygonOffsetSupported ; var isPointLight:==:shadowMap . _ isPointLight ;
var Gaze = require ( ' gaze ' ) . Gaze ; var closure:==:require ( ' closure - util ' ) ;
var categorical = dataView ? dataView . categorical : null ; var dataPoint:==:dataPoints [ categoryIndex ] ;
var geometry = object . geometry ; var material:==:object . material ;
var createEnumType = powerbi . createEnumType ; var visualDataRoleKind:==:powerbi . visualDataRoleKind ;
var radius = options . radius  |  |  1 ; var flat:==:( options . flat      undefined ) ? true : options . flat ;
var viewState = frameState . viewState ; var resolution:==:viewState . resolution ;
var tid = postData . tid ; var uid:==:postData . uid ;
var Unit = math . type . Unit ; var std:==:math . std ;
var x = Math . max ( frame . x , locpsRect . x ) ; var y:==:math . max ( frame . y , locpsRect . y ) ;
var r = floor ( random ( 0 , flowers . length ) ) ; var b:==:new Bubble ( mouseX , mouseY , flowers [ r ] ) ;
var start = interaction . start ; var end:==:interaction . end ;
var graph = this . editor . graph ; var view:==:graph . view ;
var a = SIMD . Float32x4 ( 16 . 0 , 9 . 0 , 4 . 0 , 1 . 0 ) ; var c:==:SIMD . Float32x4 . replaceLane ( a , true , 20 . 0 ) ;
var sourceRoot = util . getArg ( sourceMap , ' sourceRoot ' , null ) ; var mappings:==:util . getArg ( sourceMap , ' mappings ' ) ;
var db = syncBrowserdb . db . _ db ; var transaction:==:db . transaction ( dbos_bookmarks , ' readwrite ' ) ;
var latch = allback . latch ( ) ; var storage:==:this . storage ;
var scrollTop = input . get ( ' scrollTop ' ) ; var scrollLeft:==:input . get ( ' scrollLeft ' ) ;
var render = ref . render ; var staticRenderFns:==:ref . staticRenderFns ;
var opt    = new proxyOption ( ) . mergeDeep ( bs . options . get ( ' proxy ' ) ) ; var proxy:==:httpProxy . createProxyServer ( opt . get ( ' proxyOptions ' ) . set ( ' target ' , opt . get ( ' target ' ) ) . tojs ( ) ) ;
var a = goog . dom . getElement ( ' a ' ) ; var range:==:goog . dom . browserrange . createRangeFromNodes ( a , 1 , a , 1 ) ;
var express = require ( ' express ' ) ; var utility:==:require ( ' utility ' ) ;
var target = this . target ; var webGL:==:this . _ webglCache ;
var http = require ( ' http ' ) ; var ecstatic:==:require ( ' ecstatic ' ) ;
var request = webInspector . remoteObject . fromLocalObject ( json . parse ( dataEntries [ i ] . request ) ) ; var response:==:webInspector . remoteObject . fromLocalObject ( json . parse ( dataEntries [ i ] . response ) ) ;
var defaultParametersTransformer = traceur . codegeneration . defaultParametersTransformer ; var destructuringTransformer:==:traceur . codegeneration . destructuringTransformer ;
var motion = inputState . motion ; var motionArgs:==:inputState . motionArgs  |  |  ;
var foldWidgets = this . $ showFoldWidgets & & session . foldWidgets ; var breakpoints:==:session . $ breakpoints ;
var through = require ( ' through2 ' ) ; var requirejs:==:require ( ' requirejs ' ) ;
var keys = Object . keys ( files ) ; var metadata:==:metalsmith . metadata ( ) ;
var v = particle . velocity ; var p:==:particle . position ;
var ux = app . ns ( ' ux ' ) ; var services:==:app . ns ( ' services ' ) ;
var desc = $ ( ' # description ' , Events . eventPanel ( ) ) ; var lootButtons:==:$ ( ' < div > ' ) . attr ( ' i d ' : ' lootButtons ' , ' data - legend ' : _ ( ' take : ' ) ) ;
var scope = angular . element ( $ ( ' body ' ) ) . scope ( ) ; var i d:==:obj . i d . split ( ' . ' ) ;
var wrapT = defaultValue ( options . wrapt , textureWrap . clamp_to_edge ) ; var minificationFilter:==:defaultValue ( options . minificationFilter , textureMinificationFilter . linear ) ;
var editorButton = document . getElementById ( ' editorButton1600 ' ) ; var scene:==:engine . scenes [ 0 ] ;
var effector = bones [ ik . effector ] ; var target:==:bones [ ik . target ] ;
var visualMapModel = this . visualMapModel ; var option:==:visualMapModel . option ;
var stepPlot = g . getBooleanOption ( ' stepPlot ' , setName ) ; var points:==:e . points ;
var returnStatement = exports . returnStatement = buildLabelStatement ( ' return ' , ' argument ' ) ; var breakStatement:==:exports . breakStatement    buildLabelStatement ( ' break ' ) ;
var body = Fe . body ( ) ; var W:==:body . documentWidth ;
var Table = fixedDataTable . table ; var column:==:fixedDataTable . column ;
var b = model . bones [ i ] ; var grant:==:b . grant ;
var lightBlue700 = exports . lightBlue700 = ' # 0288d1 ' ; var lightBlue800:==:exports . lightBlue800    ' # 0277bd ' ;
var base = this . _ baseRect ; var current:==:this . _ currentRect ;
var addWrapNodeListMethod = scope . addWrapNodeListMethod ; var enqueueMutation:==:scope . enqueueMutation ;
var svgTag = svgTags [ i ] ; var c:==:document . createElement ( ' canvas ' ) ;
var AT = ci . AT ; var classify:==:stringMapper . classify ;
var integerDivideByZero = caml_exceptions . create ( ' numeric_error . integerDivideByZero ' ) ; var invalidConversionToInteger:==:caml_exceptions . create ( ' numeric_error . invalidConversionToInteger ' ) ;
var expandMemberExpression = traceur . codegeneration . expandMemberExpression ; var expandMemberLookupExpression:==:traceur . codegeneration . expandMemberLookupExpression ;
var vertices = geometry . vertices ; var faces:==:geometry . faces ;
var captionStart = description . indexOf ( captionStartTag ) ; var captionEnd:==:description . indexOf ( captionEndTag ) ;
var gcp = this . gcp ; var rack:==:this . rack ;
var iconStyleRight = _ props . iconStyleRight ; var onTitleTouchTap:==:_ props . onTitleTouchTap ;
var onBlur = _ props3 . onBlur ; var onClick:==:_ props3 . onClick ;
var req = this . req ; var buffer:==:this . _ buffer ;
var rectangle = parameters . rectangle ; var west:==:rectangle . west ;
var console = imports . console ; var commands:==:imports . commands ;
var e = a . cache_y_stride _ ; var f:==:d . f_info _ [ 1 + b ] ;
var autohide = options . autohide  |  |  false ; var index:==:options . index  |  |  100 ;
var ccittFaxStream = coreStream . ccittFaxStream ; var flateStream:==:coreStream . flateStream ;
var mongo = require ( ' mongodb ' ) ; var objectId:==:schema . types . objectId ;
var options = this . options ; var aspectRatio:==:options . aspectRatio ;
var color = node . getAttribute ( ' color ' ) ; var size:==:parseInt ( node . getAttribute ( ' size ' ) ) ;
var never = verification . never ; var times:==:verification . times ;
var isWP = platformInfo . iswp ; var isios:==:platformInfo . isios ;
var reactReconciler = require ( ' reactReconciler ' ) ; var instantiateReactComponent:==:require ( ' instantiateReactComponent ' ) ;
var r = shape . r ; var width:==:shape . width ;
var a = ' abc ' ; var b:==:' abc ' ;
var numComps = this . context . numComps ; var bitsPerComponent:==:this . context . bitsPerComponent ;
var models = _ _ alloyId29 . models ; var len:==:models . length ;
var new_source = new_source . replace ( ' 25 ' , ' 26 ' ) ; var new_source:==:new_source . replace ( ' Help ' , ' Hello ' ) ;
var slot = this . _ armature . slotHasChildArmatureList [ i ] ; var childArmature:==:slot . childArmature ;
var button1 = new Button ( ' button1 ' ) ; var hLayout1:==:new horizontalLayout ( ' hLayout1 ' ) ;
var m = matrix ( a ) ; var r:==:_ denseForwardSubstitution ( m , b ) ;
var defineReactive = _ vue$util . defineReactive ; var init:==:vue . prototype . _ init ;
var metadata = event . detail [ 0 ] . metadata ; var n:==:event . detail . length ;
var proceed = options . proceed  |  |  gettext ( ' Proceed ' ) ; var proceedClass:==:options . proceedClass  |  |  ' danger ' ;
var exportSymbol = traceur . semantics . symbols . exportSymbol ; var moduleSymbol:==:traceur . semantics . symbols . moduleSymbol ;
var symbol = definition . symbol ; var color:==:object . color  |  |  definition . color  |  |  ' # fff ' ;
var ui = imports . ui ; var fs:==:imports . fs ;
var emptyFunction = require ( ' emptyFunction ' ) ; var nativeRequestAnimationFrame:==:require ( ' nativeRequestAnimationFrame ' ) ;
var a = document . createElement ( ' script ' ) ; var m:==:document . getElementsByTagName ( ' script ' ) [ 0 ] ;
var date = require ( ' load - date ' ) ; var domify:==:require ( ' domify ' ) ;
var formatDate = fc . formatDate ; var formatRange:==:fc . formatRange ;
var clearTimeout = global$1 . clearTimeout ; var document:==:window & & window . document ;
var lock = $ ( ' # form_'+ obj . name + ' _ lock ' ) ; var status:==:$ ( ' # form_'+ obj . name + ' _ status ' ) ;
var minimum = skirtOptions . minimum ; var maximum:==:skirtOptions . maximum ;
var path = require ( ' path ' ) ; var diff:==:require ( ' diff ' ) ;
var _ im_delsearch = Module [ ' _ im_delsearch ' ] = asm [ ' _ im_delsearch ' ] ; var _ strcpy:==:Module [ ' _ strcpy ' ]    asm [ ' _ strcpy ' ] ;
var jsonRules = new hash ( stencilSet . jsonRules ( ) ) ; var namespace:==:stencilSet . namespace ( ) ;
var n = _ n ; var xs:==:_ xs ;
var title = document . getElementById ( ' title - details ' ) ; var screen:==:document . getElementById ( ' cp - details - screen ' ) ;
var body = editor . body ; var br:==:baidu . editor . browser . ie ? ' ' : ' < br > ' ;
var t = inTrackingData ; var d:==:this . calcPositionDelta ( t . downEvent , inEvent ) ;
var matrixMath = require ( ' matrixMath ' ) ; var platform:==:require ( ' platform ' ) ;
var shown = ssl_observatory . myGetBoolPref ( ' popup_shown ' ) ; var enabled:==:ssl_observatory . myGetBoolPref ( ' enabled ' ) ;
var run = test . runId ( ) ; var coll:==:new mongo . collection ( ' livedata_upsert_errorparse_collection_'+run , collectionOptions ) ;
var skin = skinCtrl . skin ; var skeleton:==:visualScene . getChildById ( ctrl . skeleton [ 0 ] ) ;
var hash = hashingFunction ( key ) , bucketIndex , oldValue = null ; var bucket:==:getBucketForHash ( bucketsByHash , hash ) ;
var maxOpacity = this . _ maxOpacity ; var minOpacity:==:this . _ minOpacity ;
var keys = _ . keys ( columns ) ; var len:==:keys . length ;
var i = 0 , listening ; var context:==:options . context , listeners    options . listeners ;
var oidcClient = exports . oidcClient = _ _ webpack_require _ _ ( 301 ) ; var webStorageStateStore:==:exports . webStorageStateStore    _ _ webpack_require _ _ ( 303 ) ;
var invalidAlgorithmError = errs . invalidAlgorithmError ; var keyParseError:==:errs . keyParseError ;
var count = state . count ; var subscriber:==:state . subscriber ;
var x = matrix [ 0 ] * cartesian . x + matrix [ 2 ] * cartesian . y ; var y:==:matrix [ 1 ] * cartesian . x + matrix [ 3 ] * cartesian . y ;
var options = that . options ; var overflowWrapper:==:that . _ overflowWrapper ( ) ;
var cellCount = _ ref . cellCount ; var cellSizeGetter:==:_ ref . cellSizeGetter ;
var parseDdocFunctionName = pouchdb . utils . parseDdocFunctionName ; var createError:==:pouchdb . utils . createError ;
var s = this . m_ctx ; var drawScale:==:this . m_drawscale ;
var fs = require ( ' hexo - fs ' ) ; var chalk:==:require ( ' chalk ' ) ;
var prevKey = object . animationCache . prevKey ; var nextKey:==:object . animationCache . nextKey ;
var l = left  |  |  0 ; var r:==:right !    undefined ? right : this . length ;
var word = select ( ' # word ' ) . value ( ) ; var score:==:select ( ' # scoreinput ' ) . value ( ) ;
var Schema = mongoose . Schema ; var assert:==:require ( ' power - assert ' ) ;
var Change = Model . getChangeModel ( ) ; var rev:==:change . revisionForInst ( current ) ;
var status = element ( by . binding ( ' status ' ) ) ; var data:==:element ( by . binding ( ' data ' ) ) ;
var AWS = helpers . AWS ; var Buffer:==:AWS . util . Buffer ;
var chai = require ( ' chai ' ) ; var expect:==:chai . expect ;
var sinon   = require ( ' sinon ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var title = evt . detail . title  |  |  '' ; var elements:==:this . elements ;
var gulp    = require ( ' gulp ' ) ; var plugins:==:require ( ' gulp - load - plugins ' ) ( ) ;
var group = sw [ ' group ' ] ; var domain:==:sw [ ' domain ' ] ;
var store = new datastore ( tests . data . readOnlyItemFileTestTemplates . getTestData ( ' countries_withboolean ' ) ) ; var d:==:new doh . deferred ( ) ;
var range = doc . sel . ranges [ i ] ; var from:==:range . from ( ) , to    range . to ( ) ;
var Token = _ . Token ; var isNewLine:==:_ . isNewLine ;
var reactdomFiberInput = require ( ' reactdomFiberInput ' ) ; var reactdomFiberOption:==:require ( ' reactdomFiberOption ' ) ;
var firstEdgeIndexes = this . _ firstEdgeIndexes ; var containmentEdges:==:this . containmentEdges ;
var url = feed . url  |  |  ' ' ; var encoding:==:feed . encoding  |  |  ' UTF-8 ' ;
var x = Math . round ( ( p . eyePosx - p . outerDist ) * xPxPerTanAngle ) ; var y:==:math . round ( ( p . eyePosy - p . bottomDist ) * yPxPerTanAngle ) ;
var zoomLimit = controllerHost . zoomLimit ; var pos:==:target . position ;
var createParenExpression = parseTreeFactory . createParenExpression ; var createStringLiteral:==:parseTreeFactory . createStringLiteral ;
var benv = require ( ' benv ' ) ; var read:==:require ( ' fs ' ) . readFileSync ;
var val = jEl . val ( ) ; var spec:==:jEl . data ( ' spec ' ) ;
var reactdomStackInjection = require ( ' reactdomStackInjection ' ) ; var reactServerRendering:==:require ( ' reactServerRendering ' ) ;
var grantSolver = mesh . grantSolver ; var physics:==:mesh . physics ;
var east = rectangleScratch . east ; var south:==:rectangleScratch . south ;
var a = grid [ x ] [ y ] . a ; var b:==:grid [ x ] [ y ] . b ;
var f = ' f ' ; var b:==:' b ' ;
var ik = iks [ i ] ; var effector:==:bones [ ik . effector ] ;
var settings = imports . settings ; var layout:==:imports . layout ;
var belongsTo = ds . belongsTo ; var run:==:ember . run ;
var w = ( width * cellWidth ) ; var h:==:( height * cellHeight ) ;
var x = ( touch . pageX - bbox . x1 ) ; var y:==:( touch . pageY - bbox . y1 ) ;
var ut = u * p , ut3 = ut * 3 , uut3 = u * ut3 , utt3 = ut3 * p ; var x:==:x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt , y    y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt ;
var isNew = node . isNew ; var column:==:e . column ;
var BLOCK_SCOPED_SYMBOL = exports . BLOCK_SCOPED_SYMBOL = ( 0 , _ for2 . default ) ( ' var used to be block scoped ' ) ; var NOT_LOCAL_BINDING:==:exports . NOT_LOCAL_BINDING    ( 0 , _ for2 . default ) ( ' should not be considered a local binding ' ) ;
var labelGroup = this . _ createGroup ( ' labelGroup ' ) ; var axis:==:this . _ axis    this . _ createAxis ( layoutInfo , timelineModel ) ;
var labelContainer = this . labelContainer ; var label:==:this . label ;
var pos = this . _ position ? this . position : ( this . layoutAreaPos  |  |  prim2dbase_1 . _ v0 ) ; var postScale:==:this . _ postScale ;
var data = request . source . data ; var blob:==:request . source . data . blob ;
var theme = params . theme ; var i d:==:params . i d ;
var layoutInfo = data . getLayout ( ' layoutInfo ' ) ; var rect:==:layoutInfo . rect ;
var db = BrowserDB . db . _ db ; var transaction:==:db . transaction ( ' visits ' , ' readwrite ' ) ;
var moveSelectionBackward = require ( ' moveSelectionBackward ' ) ; var removeTextWithStrategy:==:require ( ' removeTextWithStrategy ' ) ;
var syntheticCompositionEvent = require ( ' syntheticCompositionEvent ' ) ; var syntheticInputEvent:==:require ( ' syntheticInputEvent ' ) ;
var createFunctionExpression = parseTreeFactory . createFunctionExpression ; var createMemberExpression:==:parseTreeFactory . createMemberExpression ;
var options   = this . options ; var force:==:this . force ;
var rect = data . rect ; var view:==:pdfPage . view ;
var name = _ props . name ; var hintText:==:_ props . hintText ;
var x = w * Text . H_OFFSETS [ this . textAlign |  | 'left ' ] ; var lineHeight:==:this . lineHeight |  | this . getMeasuredLineHeight ( ) ;
var uglify = require ( ' gulp - uglify ' ) ; var buffer:==:require ( ' vinyl - buffer ' ) ;
var row = ace . selection . lead . row ; var i:==:findChunkIndex ( this . chunks , row , orig ) ;
var src = o . src ; var dst:==:o . dst ;
var Table = fixedDataTable . table ; var columnGroup:==:fixedDataTable . columnGroup ;
var seleniumAddressProxy = grunt . option ( ' seleniumAddressProxy ' ) ; var take:==:grunt . option ( ' take ' ) ;
var data = item . data ; var layout:==:item . layout ;
var sysml = this . sysml ; var eip:==:this . eip ;
var selection = selections [ 0 ] ; var token:==:this . tokenAtTextPosition ( selection . startLine , selection . startColumn ) ;
var swig = require ( ' swig ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var icon = getIconHref ( iconNode , dataSource , sourceUri , uriResolver , false ) ; var x:==:queryNumericValue ( iconNode , ' x ' , namespaces . gx ) ;
var i d = elem . getAttribute ( ' data - l10n - id ' ) ; var args:==:elem . getAttribute ( ' data - l10n - args ' ) ;
var range = math . range ; var floor:==:math . floor ;
var html = htmlpanel . getCode ( ) ; var value:==:this . value ;
var changeYear = this . _ get ( inst , ' changeYear ' ) ; var showMonthAfterYear:==:this . _ get ( inst , ' showMonthAfterYear ' ) ;
var ui = imports . ui ; var Tree:==:imports . Tree ;
var Style = require ( ' Style ' ) ; var unicodeBidiDirection:==:require ( ' unicodeBidiDirection ' ) ;
var el = this . el ; var scene:==:this . scene ;
var min = cfg . min  |  |  0 ; var max:==:cfg . max  |  |  100 ;
var x = docSet . getByLongname ( ' x ' ) [ 0 ] ; var foo:==:docSet . getByLongname ( ' foo ' ) [ 0 ] ;
var node = RED . nodes . getNode ( req . params . i d ) ; var state:==:req . params . state ;
var sum64_5_lo = utils . sum64_5_lo ; var blockHash:==:hash . common . blockHash ;
var strLen = alias ( ' strLen ' , u32 ) ; var strPtr:==:alias ( ' strPtr ' , ptr ( u8 ) ) ;
var translate_content = $ ( ' . translate_content ' ) ; var charts_more:==:$ ( ' . charts_more ' ) ;
var content = data . content ; var ncells:==:this . ncells ( ) ;
var relation = unfetchedCar . relation ( ' wheels ' ) ; var query:==:relation . query ( ) ;
var Editor = imports . Editor ; var Datagrid:==:imports . Datagrid ;
var Dummy4 = mongoose . model ( ' Dummy4 ' , dummy4Schema ) ; var dummy5:==:mongoose . model ( ' dummy5 ' , dummy5Schema ) ;
var allbackMaker = $ allback . allbackMaker ; var compositeIncomingAccount:==:incoming . compositeIncomingAccount ;
var utils = require ( ' utils ' ) ; var webpage:==:require ( ' webpage ' ) ;
var enumExtensions = jsCommon . enumExtensions ; var createClassAndSelector:==:jsCommon . cssConstants . createClassAndSelector ;
var clearCoat = this . clearCoat ? this . clearCoat . buildCode ( builder , ' fv1 ' ) : undefined ; var clearCoatRoughness:==:this . clearCoatRoughness ? this . clearCoatRoughness . buildCode ( builder , ' fv1 ' ) : undefined ;
var SCROLL_DIRECTION_FIXED = exports . SCROLL_DIRECTION_FIXED = 0 ; var SCROLL_DIRECTION_FORWARD:==:exports . SCROLL_DIRECTION_FORWARD    1 ;
var data = app . ns ( ' data ' ) ; var ux:==:app . ns ( ' ux ' ) ;
var r = reader . getFloat32 ( 0 , true ) ; var g:==:reader . getFloat32 ( 4 , true ) ;
var config = this . config ; var lineHeight:==:config . lineHeight ;
var n = this . n ; var r1:==:this . r1 ;
var createCallStatement = parseTreeFactory . createCallStatement ; var createCallback:==:parseTreeFactory . createCallback ;
var tmp = new THREE . Vector3 ( ) , tmp2 = new THREE . Vector3 ( ) ; var n:==:new THREE . Vector3 ( ) , n2    new THREE . Vector3 ( ) ;
var arrayToObject = util . arrayToObject ; var stripHtml:==:util . stripHtml ;
var new_counter = new_counters_row [ destination_bytecode ] ; var old_counter:==:old_counters_row [ destination_bytecode ] ;
var w = parseFloat ( svgRoot . getAttribute ( ' width ' ) ) ; var h:==:parseFloat ( svgRoot . getAttribute ( ' height ' ) ) ;
var semver = require ( ' semver ' ) ; var should:==:require ( ' should ' ) ;
var slicePartitions = ellipsoidGeometry . _ slicePartitions ; var subdivisions:==:ellipsoidGeometry . _ subdivisions ;
var xmppbot = config . xmppbot ; var utc:==:moment . utc ;
var edgeInsetsPropType = require ( ' edgeInsetsPropType ' ) ; var react:==:require ( ' react ' ) ;
var b = tree . b = sr2 . firstChild ; var content2:==:tree . content2    b . firstChild ;
var winston = require ( ' winston ' ) ; var less:==:require ( ' less ' ) ;
var sinon = require ( ' sinon ' ) ; var clone:==:require ( ' clone ' ) ;
var ctx = this . ctx ; var w:==:width , h    height ;
var dynCall_diii = Module [ ' dynCall_diii ' ] = asm [ ' dynCall_diii ' ] ; var dynCall_dii:==:Module [ ' dynCall_dii ' ]    asm [ ' dynCall_dii ' ] ;
var path = e . path ; var len:==:path . length ;
var O_NOFOLLOW = constants . O_NOFOLLOW  |  |  0 ; var O_RDONLY:==:constants . O_RDONLY  |  |  0 ;
var forOfTransformer = traceur . codegeneration . forOfTransformer ; var forInTransformPass:==:traceur . codegeneration . generator . forInTransformPass ;
var commands = imports . commands ; var openPath:==:imports . openPath ;
var rename = require ( ' gulp - rename ' ) ; var filter:==:require ( ' gulp - filter ' ) ;
var v = verts [ i ] ; var worldCorner:==:sphereconvex_worldcorner ;
var entity = geometryUpdater . _ entity ; var ellipse:==:entity . ellipse ;
var tileUpdateManager = windows . ui . notifications . tileUpdateManager ; var tiles:==:notificationsExtensions . tiles ;
var winston = require ( ' winston ' ) ; var fs:==:require ( ' fs ' ) ;
var target = channel . target ; var sampler:==:samplers [ channel . sampler ] ;
var allowEscape = this . _ allowEscape ; var ignorejsx:==:this . _ ignorejsx ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var nodeunit:==:require ( ' nodeunit ' ) ;
var daysBetween = calc . daysBetween ; var daysInWeek:==:calc . daysInWeek ;
var charging = document . getElementById ( ' charging ' ) ; var level:==:document . getElementById ( ' level ' ) ;
var greenA400 = exports . greenA400 = ' # 00e676 ' ; var greenA700:==:exports . greenA700    ' # 00c853 ' ;
var from = this . from ; var distance:==:distanceFromIntersectionSquared ( from , this . direction , position ) ;
var goals = this . goals ( track . event ( ) ) ; var revenue:==:track . revenue ( ) ;
var outlineColor = property . getValueOrClonedDefault ( wall . outlineColor , time , color . black , scratchColor ) ; var outlineWidth:==:property . getValueOrDefault ( wall . outlineWidth , time , 1 . 0 ) ;
var User = db . model ( ' gh4329 ' , userSchema ) ; var task:==:db . model ( ' gh4329_0 ' , taskSchema ) ;
var nativeMethodsMixin = require ( ' nativeMethodsMixin ' ) ; var nativeModules:==:require ( ' nativeModules ' ) ;
var polyline = item . polyline ; var show:==:entity . isShowing & & ( ! defined ( showProperty )  |  |  showProperty . getValue ( time ) ) ;
var axis = axisModel . axis ; var grid:==:axis . grid ;
var rowOverscanStartIndex = _ ref6 . rowOverscanStartIndex ; var rowOverscanStopIndex:==:_ ref6 . rowOverscanStopIndex ;
var GW = this . computeGW ( ) ; var Gq:==:this . computeGq ( ) ;
var async   = require ( ' async ' ) ; var shelljs:==:require ( ' shelljs ' ) ;
var touch = require ( ' touch ' ) ; var crypto:==:require ( ' crypto ' ) ;
var mutedErrorReporter = traceur . util . mutedErrorReporter ; var keywords:==:traceur . syntax . keywords ;
var x = array [ startingIndex ] ; var y:==:array [ startingIndex + 1 ] ;
var pathPrefix = this . _ entries [ itemId ] . pathPrefix ; var fileSystemPath:==:this . _ entries [ itemId ] . fileSystemPath ;
var clientHeight = _ ref5 . clientHeight ; var scrollHeight:==:_ ref5 . scrollHeight ;
var tokenType = traceur . syntax . tokenType ; var expandMemberExpression:==:traceur . codegeneration . expandMemberExpression ;
var htmlContentElement = scope . wrappers . htmlContentElement ; var node:==:scope . wrappers . node ;
var current = this . current ; var x:==:current . x , y    current . y ;
var forStatement = traceur . syntax . trees . forStatement ; var functionDeclaration:==:traceur . syntax . trees . functionDeclaration ;
var mainContainer = document . getElementById ( ' mainContainer ' ) ; var outerContainer:==:document . getElementById ( ' outerContainer ' ) ;
var granularity = rectangleGeometry . _ granularity ; var ellipsoid:==:rectangleGeometry . _ ellipsoid ;
var minimumBatchSize = _ props . minimumBatchSize ; var rowCount:==:_ props . rowCount ;
var floor = stdlib . Math . floor ; var exp:==:stdlib . Math . exp ;
var roundTrips = sockjs [ protocol ] . roundTrips  |  |  1 ; var to:==:( ( that . _ options . rto  |  |  0 ) * roundTrips )  |  |  5000 ;
var parent = this . _ idTodomNode [ parentId ] ; var prev:==:this . _ idTodomNode [ prevId ] ;
var fullBuildTimeout = this . fullBuildTimeout ; var requestTimeout:==:this . requestTimeout ;
var LABELLED_STATEMENT = ' LABELLED_STATEMENT ' ; var LITERAL_EXPRESSION:==:' LITERAL_EXPRESSION ' ;
var should = require ( ' should ' ) ; var p:==:require ( ' path ' ) ;
var fs = require ( ' fs ' ) ; var rollup:==:require ( ' rollup ' ) ;
var reactServerRenderingTransaction = require ( ' reactServerRenderingTransaction ' ) ; var reactUpdates:==:require ( ' reactUpdates ' ) ;
var frags = this . frags = new Array ( data . length ) ; var alias:==:this . alias ;
var line = cur . line ; var ch:==:cur . ch ;
var infoBox = viewer . _ infoBox ; var selectionIndicator:==:viewer . _ selectionIndicator ;
var captureCallbacks = this . _ captureCallbacks [ type ]  |  |  [ ] ; var bubbleCallbacks:==:this . _ bubbleCallbacks [ type ]  |  |  [ ] ;
var email = $ ( ' input#email ' ) . val ( ) ; var phone:==:$ ( ' input#phone ' ) . val ( ) ;
var timeStamp = ev . timeStamp  |  |  date . now ( ) ; var elapsedTime:==:parseFloat ( ev . elapsedTime . toFixed ( 3 ) ) ;
var semiMinorAxis = options . semiMinorAxis ; var granularity:==:defaultValue ( options . granularity , cesiumMath . radians_per_degree ) ;
var layout = imports . layout ; var http:==:imports . http ;
var joinClasses = require ( ' joinClasses ' ) ; var shallowEqual:==:require ( ' shallowEqual ' ) ;
var ctx = this . ctx ; var drawOrder:==:skeleton . drawOrder ;
var mustNotExist = self . _ mustNotExist ( absPath ) ; var mustBeaFile:==:self . _ mustBeaFile ( absPath ) ;
var offset = this . _ offsets [ attributeIndex ] ; var stride:==:this . _ stride ;
var bind = utils . bind ; var getBounds:==:utils . getBounds ;
var edgeInternalType = snapshot . _ edgeInternalType ; var edgeFieldsCount:==:snapshot . _ edgeFieldsCount ;
var callbackParameterName = defined ( request . callbackParameterName , this . callbackParameterName ) ; var formatQueryString:==:defined ( request . formatQueryString , this . formatQueryString ) ;
var renderAllPending = scope . renderAllPending ; var rewrap:==:scope . rewrap ;
var flatCoordinates = this . flatCoordinates ; var layout:==:this . layout ;
var canvas = context . canvas ; var options:==:opt_options ? opt_options : ;
var vid1 = document . getElementById ( ' vid1 ' ) ; var vid2:==:document . getElementById ( ' vid2 ' ) ;
var settings = imports . settings ; var join:==:require ( ' path ' ) . join ;
var gotAccum = this . _ gotAccum ; var valuesPhase:==:this . _ valuesPhase ;
var escapeTextContentForBrowser = require ( ' escapeTextContentForBrowser ' ) ; var setInnerhtml:==:require ( ' setInnerhtml ' ) ;
var rangeNode = math . expression . node . rangeNode ; var objectNode:==:math . expression . node . objectNode ;
var Picker = require ( ' Picker ' ) ; var View:==:require ( ' View ' ) ;
var syntheticEvent = require ( ' syntheticEvent ' ) ; var syntheticFocusEvent:==:require ( ' syntheticFocusEvent ' ) ;
var util = require ( ' util ' ) ; var https:==:require ( ' https ' ) ;
var firstTaskIndex = info . firstTaskIndex ; var lastTaskIndex:==:info . lastTaskIndex ;
var uglify = require ( ' gulp - uglify ' ) ; var yaml:==:require ( ' js - yaml ' ) . safeLoad ;
var x = this . parseProperty ( iconNode , ' * ' , ' x ' ) ; var y:==:this . parseProperty ( iconNode , ' * ' , ' y ' ) ;
var min = d3 . min ( data , function ( d ) return d [ field ] ) ; var max:==:d3 . max ( data , function ( d ) return d [ field ] ) ;
var page = this . pageCache [ data . pageIndex ] ; var depFonts:==:data . depFonts ;
var target = event . target ; var nodeName:==:target . nodeName ;
var g = this . _ rgba [ 1 ] ; var b:==:this . _ rgba [ 2 ] ;
var dataGridPage = options . dataGridPage ? options . dataGridPage : $ ( ' # ' + dataGrid . attr ( ' i d ' ) + ' page ' ) ; var searchForm:==:options . searchForm ? options . searchForm : $ ( ' # searchForm ' ) ;
var child = require ( ' child_process ' ) ; var printError:==:common . printError ;
var wrap = scope . wrap ; var wraphtmlCollection:==:scope . wraphtmlCollection ;
var initializer = this . transformAny ( tree . initializer ) ; var collection:==:this . transformAny ( tree . collection ) ;
var shadow = sharedUtil . shadow ; var stringToBytes:==:sharedUtil . stringToBytes ;
var item = $ ( event . target ) . data ( ' item ' ) ; var name:==:item . data ( ' name ' ) ;
var EXTENDNUMLET = ci . EXTENDNUMLET ; var OTHER:==:ci . OTHER ;
var domain = domains [ i ] ; var types:==:domain [ ' types ' ]  |  |  [ ] ;
var tMax = tmpVecb . copy ( this . getMax ( ) ) . sub ( ray . origin ) . data ; var dir:==:ray . direction . data ;
var ONEAVGYEAR = constants . ONEAVGYEAR ; var ONEAVGMONTH:==:constants . ONEAVGMONTH ;
var debug = require ( ' debug ' ) ( ' memory ' ) ; var util:==:require ( ' util ' ) ;
var pre = m . pre ; var body:==:m . body ;
var pkg = this . pkg ; var fileUrl:==:pkg . fileUrl    pkg . nextFileUrl  |  |  pkg . origFileUrl ;
var syntheticDragEvent = require ( ' syntheticDragEvent ' ) ; var syntheticTouchEvent:==:require ( ' syntheticTouchEvent ' ) ;
var recipient = send . recipient_actual  |  |  send . recipient_address ; var amount:==:send . amount_actual  |  |  send . amount_feedback ;
var changeset = msg . changeset ; var author:==:( msg . author  |  |  '' ) ;
var aMin = cartesian3 . fromArray ( minMax . min , 0 , aMinScratch ) ; var aMax:==:cartesian3 . fromArray ( minMax . max , 0 , aMaxScratch ) ;
var granularity = defaultValue ( options . granularity , cesiumMath . radians_per_degree ) ; var height:==:defaultValue ( options . height , 0 . 0 ) ;
var isScalar = layout . isScalar ; var outerPaddingRatio:==:layout . outerPaddingRatio ;
var plist = require ( ' plist ' ) ; var util:==:require ( ' util ' ) ;
var b = Object . freeze ( a ) ; var c:==:Object . create ( b ) ;
var w = ( k . width - x * 16 ) ; var h:==:( k . height - y * 16 ) ;
var client = Nightwatch . client ( ) ; var api:==:client . api ;
var ip = parseip ( addr ) ; var kind:==:ip . kind ( ) ;
var color = lparams . color . getHex ( ) ; var intensity:==:lparams . intensity ;
var projectId = webInspector . networkProject . projectId ( target , spliturl [ 0 ] , true ) ; var project:==:this . _ workspace . project ( projectId ) ;
var through = require ( ' through2 ' ) ; var vm:==:require ( ' vm ' ) ;
var next = changes . next ; var length:==:text . length ;
var base_url = this . base_url ; var w:==:window . open ( '' , iPython . _ target ) ;
var $ = this . $ ; var parent:==:$ . parentNode ;
var show = powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' gaps ' ] [ ' show ' ] , pulseChart . defaultSettings . gaps . show ) ; var visibleGapsPercentage:==:math . max ( 1 , math . min ( 100 , powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' gaps ' ] [ ' transparency ' ] , pulseChart . defaultSettings . gaps . visibleGapsPercentage ) ) ) ;
var path = getRealPath ( i . path ) ; var dirname:==:utils . dirname ( path ) ;
var dstArea = gridpanellayoutengine_1 . dstArea ; var dstAreaPos:==:gridpanellayoutengine_1 . dstAreaPos ;
var compass = this . compass ; var gulp:==:this . gulp ;
var children = this . _ children ; var column:==:columns [ colNum ] ;
var escape = window . escape ; var unescape:==:window . unescape ;
var popup = this . _ _ popup ; var current:==:Popup . current ;
var OUTLINE_COLOR_INDEX = pointPrimitive . outline_color_index = 3 ; var outline_width_index:==:pointPrimitive . outline_width_index    4 ;
var e = this . node , b = e . attributes ; var d:==:e . parentNode ? e . parentNode . ui . getContainer ( ) : e . ownerTree . innerCt . dom ;
var Block = traceur . syntax . trees . Block ; var breakStatement:==:traceur . syntax . trees . breakStatement ;
var hi = $ ( ' . say - hi ' ) ; var content:==:hi . find ( ' . content ' ) ;
var w = this . _ width ; var h:==:this . _ height ;
var nodeFieldCount = snapshot . _ nodeFieldCount ; var nodeTypeOffset:==:snapshot . _ nodeTypeOffset ;
var mixin = scope . mixin ; var registerTransientObservers:==:scope . registerTransientObservers ;
var up = connect ( document , ' mouseup ' , operation ( dragEnd ) , true ) ; var drop:==:connect ( scroller , ' drop ' , operation ( dragEnd ) , true ) ;
var scrollTop = window . pageyOffset  |  |  document . documentElement . scrollTop ; var scrollLeft:==:window . pagexOffset  |  |  document . documentElement . scrollLeft ;
var String = platform . String ; var Date:==:platform . Date ;
var Foo = db . model ( ' Foo ' , fooSchema ) ; var bar:==:db . model ( ' bar ' , barSchema ) ;
var breakStatement = traceur . syntax . trees . breakStatement ; var callExpression:==:traceur . syntax . trees . callExpression ;
var redis = config . redis ; var assert:==:require ( ' assert ' ) ;
var delimiter = options . delimiter  |  |  ' , ' ; var separator:==:options . separator  |  |  ' . ' ;
var oPopup1 = new sap . ui . core . popup ( oPopup1DomRef ) ; var oPopup2:==:new sap . ui . core . popup ( oPopup2DomRef ) ;
var up = SIMD . float32x4 ( upRef . x , upRef . y , upRef . z , 0 ) ; var f:==:simd . float32x4 . sub ( center , eye ) ;
var firstInput = session . firstInput ; var firstMultiple:==:session . firstMultiple ;
var methods = vm . $ options . methods ; var method:==:methods & & methods [ handler ] ;
var scheduler = fastList . scheduler ; var poplar:==:require ( ' poplar ' ) ;
var direction = self . getDirection ( data . direction ) ; var easing:==:easing_functions [ data . easing ] ;
var pairSetOffset = pairSetOffsets [ firstGlyph ] ; var sharedPairSet:==:sharedPairSets [ pairSetOffset ] ;
var path = require ( ' path ' ) ; var dist:==:' dist ' + path . sep ;
var e = inEvent ; var l:==:this . moveQueue . length ;
var prompt    = require ( ' prompt - sync ' ) ; var child_process:==:require ( ' child_process ' ) ;
var rotation = options . rotation ! = = undefined ? options . rotation : 0 ; var scale:==:options . scale !    undefined ? options . scale : 1 ;
var scope = frag . scope ; var index:==:scope . $ index ;
var referee = require ( ' referee ' ) ; var assert:==:referee . assert ;
var _   = _ dereq _ ( ' underscore ' ) ; var events:==:_ dereq _ ( ' events ' ) ;
var samplers = json . samplers  |  |  ; var sampler:==:samplers [ texture . sampler ]  |  |  ;
var uniformMap = computeCommand . uniformMap ; var clearCommand:==:clearCommandScratch ;
var extend = require ( ' util ' ) . _ extend ; var git:==:require ( ' gulp - git ' ) ;
var coffee   = require ( ' gulp - coffee ' ) ; var changed:==:require ( ' gulp - changed ' ) ;
var it = this . iterators _ [ this . currentIdx _ ] ; var next:==:it . next ( ) ;
var bold = getStyleProperty ( , styleContextStack , ' bold ' , false ) ; var italics:==:getStyleProperty ( , styleContextStack , ' italics ' , false ) ;
var drag = instance . drag ; var resize:==:instance . resize ;
var className = ' className ' ; var classList:==:' classList ' ;
var workspace = imports [ ' collab . workspace ' ] ; var question:==:imports [ ' dialog . question ' ] ;
var x = clientX + scroll . x ; var y:==:clientY + scroll . y ;
var inline1 = options . _ _ inline1 _ _ ; var inline2:==:options . _ _ inline2 _ _ ;
var call = calls [ i ] ; var name:==:call . name ;
var type   = $ ( this ) . attr ( ' datatype ' ) ; var max:==:$ ( this ) . attr ( ' maxvalue ' ) ;
var cache = this . caches [ this . caches . length - 1 ] ; var slot:==:this . slots [ this . slots . length - 1 ] ;
var rotate = options . rotate ; var scaleX:==:options . scaleX ;
var lab = exports . lab = Lab . script ( ) ; var expect:==:Code . expect ;
var each = zrUtil . each ; var ifAxisCrossZero:==:axisHelper . ifAxisCrossZero ;
var renderDayOverlay = t . renderDayOverlay ; var clearOverlays:==:t . clearOverlays ;
var origin = ray . origin ; var direction:==:ray . direction ;
var gutterxUnit = parseFloat ( params . gutterxUnit ) ; var edgexUnit:==:parseFloat ( params . edgexUnit ) ;
var p = camera . pickEllipsoid ( windowCoord , ellipsoid ) ; var c:==:ellipsoid . cartesianToCartographic ( p ) ;
var contents = capabilities . contents ; var layers:==:contents . layers ;
var domApp = inputApp . domApp ; var manifest:==:new manifestHelper ( domApp . manifest ) ;
var Person = db . model ( ' gh4288 ' , personSchema ) ; var blogPost:==:db . model ( ' gh4288_0 ' , blogPostSchema ) ;
var path = require ( ' path ' ) ; var codeFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' codeFieldTestObject ' ) ) ;
var io = require ( ' socket . io ' ) ( server ) ; var path:==:require ( ' path ' ) ;
var del = require ( ' del ' ) ; var debug:==:require ( ' gulp - debug ' ) ;
var a = trace . a ; var b:==:trace . b ;
var operand = this . transformAny ( left . operand ) ; var right:==:this . transformAny ( tree . right ) ;
var el = this . $ element ; var pos:==:Utils . $ position ( element , el ) ;
var params = ob . params ; var validate:==:ob . validateUserForDataWriteapi ;
var appendChild = htmlFormElement . prototype . appendChild ; var submit:==:htmlFormElement . prototype . submit ;
var isNumeric = math . isNumeric ; var bignumber:==:math . bignumber ;
var session = e . session ; var path:==:calcRootedPath ( session . url  |  |  session . path  |  |  session . initPath ) ;
var should = require ( ' should ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var path = options . path ; var radius:==:options . radius  |  |  1 ;
var Renderer = Hilo . Renderer ; var Matrix:==:Hilo . Matrix ;
var xScale4 = chart . scales . xScale4 ; var yScale0:==:chart . scales . yScale0 ;
var retries = options . hasOwnProperty ( ' retries ' ) ? options . retries : 5 ; var retryDelay:==:options . hasOwnProperty ( ' retryDelay ' ) ? options . retryDelay : 50 ;
var index = point . _ index ; var custom:==:point . custom  |  |  ;
var complete = imports [ ' language . complete ' ] ; var ui:==:imports . ui ;
var semver = require ( ' semver ' ) ; var inherits:==:require ( ' util ' ) . inherits ;
var x = nodes [ nodeIndices [ i ] ] . x ; var y:==:nodes [ nodeIndices [ i ] ] . y ;
var Cancel = axios . Cancel ; var cancelToken:==:axios . cancelToken ;
var update = aggregator . _ update ; var movement:==:aggregator . _ movement ;
var a = this . alpha ; var m:==:typeof multiplier !    ' undefined ' ? multiplier : 0 . 5 ;
var Color = jsCommon . color ; var dataRoleHelper:==:powerbi . data . dataRoleHelper ;
var contactEmailKind = contacts . contactEmailKind ; var contactPhone:==:contacts . contactPhone ;
var vAPI = self . vAPI = self . vAPI  |  |  ; var chrome:==:self . chrome ;
var polyline = polylines [ i ] ; var width:==:polyline . width ;
var first = visibleThumbs . first . i d ; var last:==:( numVisibleThumbs > 1 ? visibleThumbs . last . i d : first ) ;
var random = p5 . prototype . random ; var randomSeed:==:p5 . prototype . randomSeed ;
var laneSets = processDefinitionDiagramLayout . laneSets ; var activities:==:processDefinitionDiagramLayout . activities ;
var data = stringifyData ( options . data  |  |  ) ; var type:==:( options . type  |  |  ' get ' ) . toUpperCase ( ) ;
var   TYPE = 12 ; var   TYPEDO:==:13 ;
var index = this . index ; var data:==:this . data ;
var keys = entry . keys ; var obj:==:entry . obj ;
var prop = propertiesToTest [ propKey ] ; var provider:==:propertyProviders [ providerKey ] ;
var assert = require ( ' core - assert ' ) ; var async:==:require ( ' async ' ) ;
var mustache = require ( ' gulp - mustache ' ) ; var browserify:==:require ( ' browserify ' ) ;
var noSleep = obj . noSleep  |  |  false ; var p:==:obj . pos  |  |  [ 0 , 0 , 0 ] ;
var trans = database . transaction ( [ objStoreName ] , ' readwrite ' ) ; var objectStore:==:trans . objectStore ( objStoreName ) ;
var torrents = this . model . get ( ' torrents ' ) ; var quality:==:Settings . movies_default_quality ;
var strong = dates [ 0 ] . querySelector ( ' strong ' ) ; var formatDate:==:utils . misc . formatDate ( mozContact . bday ) ;
var Item1 = db . model ( ' dynrefItem1 ' , item1Schema , ' gh3108_1 ' ) ; var item2:==:db . model ( ' dynrefItem2 ' , item2Schema , ' gh3108_2 ' ) ;
var rename = require ( ' gulp - rename ' ) ; var spawn:==:require ( ' child_process ' ) . spawn ;
var h1 = document . createElement ( ' h1 ' ) ; var s:==:h1 . style ;
var e = event ; var action:==:this . action ;
var surface = effect . profile . surfaces [ sampler . source ] ; var texture:==:textureLoader . load ( getImage ( surface . init_from ) ) ;
var username = _ . get ( options , ' username ' ) ; var password:==:_ . get ( options , ' password ' ) ;
var Catch = traceur . syntax . trees . Catch ; var forInStatement:==:traceur . syntax . trees . forInStatement ;
var assert = require ( ' assert ' ) ; var http:==:require ( ' http ' ) ;
var f8Button = require ( ' f8Button ' ) ; var f8Colors:==:require ( ' f8Colors ' ) ;
var up = Cartesian3 . clone ( camera . up ) ; var right:==:Cartesian3 . clone ( camera . right ) ;
var atLeast = options . atLeast ; var atMost:==:options . atMost ;
var size = _ ref . size ; var updateScrollIndexCallback:==:_ ref . updateScrollIndexCallback ;
var toolbar = this . toolbar ; var settings:==:this . settings ;
var accessors = gltf . accessors ; var skins:==:gltf . skins ;
var extend = require ( ' extend ' ) ; var ccount:==:require ( ' ccount ' ) ;
var p = body . position ; var m:==:body . mass ;
var extension = this . _ extensionForPath ( name ) ; var contentType:==:this . _ contentTypeForExtension ( extension ) ;
var context = scene . context ; var frameState:==:scene . frameState ;
var disputed = feature . get ( ' disputed ' ) ; var maki:==:feature . get ( ' maki ' ) ;
var parseTree = traceur . syntax . trees . parseTree ; var createFunctionDeclaration:==:parseTreeFactory . createFunctionDeclaration ;
var b = rgba [ 2 ] ; var a:==:rgba [ 3 ]  |  |  1 ;
var prefix = store . prefix ( ) [ 0 ] ; var cache:==:transaction . _ cache ;
var links = option . edges  |  |  option . links ; var nodes:==:option . data  |  |  option . nodes ;
var REJECTED = [ ' REJECTED ' ] ; var FULFILLED:==:[ ' FULFILLED ' ] ;
var long = $ el . data ( ' long ' ) ; var zip:==:$ el . data ( ' zip ' ) ;
var exaggeration = parameters . exaggeration ; var minimumHeight:==:parameters . minimumHeight * exaggeration ;
var isStartish = eventPluginUtils . isStartish ; var isEndish:==:eventPluginUtils . isEndish ;
var Program = cst . types . Program ; var Fragment:==:cst . Fragment ;
var assets = this . system . app . assets ; var asset:==:assets . get ( i d ) ;
var reportSelection = t . reportSelection ; var unselect:==:t . unselect ;
var workspace = imports . workspace ; var proc:==:imports . proc ;
var restParameter = traceur . syntax . trees . restParameter ; var returnStatement:==:traceur . syntax . trees . returnStatement ;
var move = onEvt ( doc , ' touchmove ' , this . move , this ) ; var end:==:onEvt ( doc , ' touchend ' , ontouchend , this ) ;
var foo = function * foo ( ) ; var foo:==:function foo ( ) ;
var banner = this . _ banner ; var title:==:$ ( ' notification - title ' ) ;
var keys = other . keys ( ) ; var values:==:other . values ( ) ;
var expect = require ( ' chai ' ) . expect ; var rewire:==:require ( ' rewire ' ) ;
var i = pointPrimitive . _ index ; var color:==:pointPrimitive . color ;
var doc = global . document ; var addEvent:==:addEventEasy ;
var Message = Protocol . Message ; var eventEmitter:==:window . eventEmitter ;
var c = table . config ; var l:==:rows . length ;
var context = this . context ; var vertices:==:strip . vertices ;
var channelRequest = goog . labs . net . webChannel . channelRequest ; var connectionState:==:goog . labs . net . webChannel . connectionState ;
var parent = nodeWithId ( res . parentNodeId ) ; var previousNode:==:nodeWithId ( res . previousNodeId ) ;
var gpsifdLength = ifDlengths . gpsifdLength ; var gpsifdLengthDataSection:==:ifDlengths . gpsifdLengthDataSection ;
var Optional = makeParamDecorator ( ' optional ' , [ ] ) ; var injectable:==:makeDecorator ( ' injectable ' , [ ] ) ;
var core = require ( ' mongodb - core ' ) ; var crypto:==:require ( ' crypto ' ) ;
var response = lang_1 . isPresent ( _ xhr . response ) ? _ xhr . response : _ xhr . responseText ; var status:==:_ xhr . status      1223 ? 204 : _ xhr . status ;
var modules = projectJson . modules  |  |  [ ' core ' ] ; var renderMode:==:projectJson . renderMode  |  |  0 ;
var mkpath = require ( ' mkpath ' ) ; var fs:==:require ( ' fs ' ) ;
var align = _ ref2 . align ; var cellIndex:==:_ ref2 . cellIndex ;
var onSubmitUserId = _ ref . onSubmitUserId ; var onChangeUserId:==:_ ref . onChangeUserId ;
var fs = require ( ' fs ' ) ; var helper:==:require ( ' helper ' ) ;
var toProperty = $ traceurRuntime . toProperty ; var hasOwnProperty:==:object . prototype . hasOwnProperty ;
var dx2 = mxUtils . getValue ( this . style , ' dx2 ' , ' 0 ' ) ; var dy2:==:mxUtils . getValue ( this . style , ' dy2 ' , ' 0 ' ) ;
var store = stdlib . Atomics . store ; var fround:==:stdlib . Math . fround ;
var significanceState = this . significanceState ; var coefficentsMagnitude:==:this . coefficentsMagnitude ;
var images = [ ' gulpfile . js ' ] . concat ( paths . images ) ; var js:==:[ ' gulpfile . js ' ] . concat ( paths . js ) ;
var iso = require ( ' to - iso - string ' ) ; var some:==:require ( ' some ' ) ;
var OS = 4 ; var EXLEN:==:5 ;
var forms = util . Module ( ' forms ' ) ; var assert:==:util . assert ;
var ace = editor . ace ; var sel:==:ace . selection ;
var UNION_TYPE = ' UNION_TYPE ' ; var VARIABLE_DECLARATION:==:' VARIABLE_DECLARATION ' ;
var journal = response . journal ; var nodes:==:response . nodes ;
var chassisBody = this . chassisBody ; var forwardws:==:updatefriction_forwardws ;
var bones = this . bones ; var boneInverses:==:this . boneInverses ;
var extent = frameState . extent ; var resolution:==:frameState . viewState . resolution ;
var element = this . element , that = this , o = this . options ; var textarea:==:element . find ( ' textarea ' ) ;
var glob = require ( ' glob ' ) ; var semver:==:require ( ' semver ' ) ;
var moment = require ( ' moment ' ) ; var adapter:==:config [ config . adapter ] ;
var inArray = tools . inArray , trim = tools . trim , resolve = tools . resolve ; var event:==:eventUtils . event ;
var assert = require ( ' better - assert ' ) ; var doc:==:window . document ;
var jsVendor = data . jsVendor = data . webkit ? ' webkit ' : data . firefox ? ' webkit ' : data . opera ? ' o ' : data . ie ? ' ms ' : '' ; var cssVendor:==:data . cssVendor    ' - ' + jsVendor + ' - ' ;
var homeButton = viewer . _ homeButton ; var sceneModePicker:==:viewer . _ sceneModePicker ;
var deltaX = last . deltaX - touch . deltaX ; var deltaY:==:last . deltaY - touch . deltaY ;
var ispdfFunction = coreFunction . ispdfFunction ; var pdfFunction:==:coreFunction . pdfFunction ;
var priority = job . priority ; var work:==:job . _ work ;
var width = self . width  |  |  FALLBACK_WIDTH ; var scrollbarWidth:==:self . scrollbarWidth ;
var runPostSets = module [ ' runPostSets ' ] = asm [ ' runPostSets ' ] ; var dyncall_iiii:==:module [ ' dyncall_iiii ' ]    asm [ ' dyncall_iiii ' ] ;
var test = require ( ' tap ' ) . test ; var fs:==:require ( ' fs ' ) ;
var savedPose = this . savedPose ; var hasPositionalTracking:==:this . hasPositionalTracking  |  |  checkHasPositionalTracking ( ) ;
var baseTestChannel = goog . labs . net . webChannel . baseTestChannel ; var channelRequest:==:goog . labs . net . webChannel . channelRequest ;
var Platform = require ( ' Platform ' ) ; var f8DrawerLayout:==:require ( ' f8DrawerLayout ' ) ;
var slugize = util . slugize ; var escapeRegExp:==:util . escapeRegExp ;
var path = require ( ' path ' ) ; var Readable:==:require ( ' stream ' ) . Readable ;
var categoryLabels = this . data . categoryLabels ; var margin:==:this . margin ;
var haveOwnPropsChanged = this . haveOwnPropsChanged ; var hasStoreStateChanged:==:this . hasStoreStateChanged ;
var brown400 = exports . brown400 = ' # 8d6e63 ' ; var brown500:==:exports . brown500    ' # 795548 ' ;
var handleThumbs = shapes . handleThumbs ; var handleLabels:==:shapes . handleLabels ;
var reactNative = require ( ' reactNative ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var w = w _  |  0 ; var h:==:( h _  |  0 )  |  |  w ;
var b = frustum . bottom ; var r:==:frustum . right ;
var child_process = require ( ' child_process ' ) ; var fs:==:require ( ' fs ' ) ;
var TEMPLATE_SUBSTITUTION = ' TEMPLATE_SUBSTITUTION ' ; var THIS_EXPRESSION:==:' THIS_EXPRESSION ' ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var fs:==:require ( ' hexo - fs ' ) ;
var textNode = textNodeSnapshot . snapshotItem ( j ) ; var text:==:textNode . textContent ;
var call = functionPrototype . call ; var apply:==:functionPrototype . apply ;
var z = quaternion . z * inverseMagnitude ; var w:==:quaternion . w * inverseMagnitude ;
var expect = chai . expect ; var eventEmitter:==:events . eventEmitter ;
var scrollTop = _ props2 . scrollTop ; var scrollToRow:==:_ props2 . scrollToRow ;
var . . . x = z ; var x , . . . y:==:z ;
var Observer = scope . Observer ; var parser:==:scope . parser ;
var numComps = base . numComps ; var lookup:==:this . lookup ;
var rotation = rectangle . rotation ; var outlineWidth:==:rectangle . outlineWidth ;
var type = operation . type ; var key:==:operation . key ;
var object = options . object ; var property:==:options . property ;
var PAREN_EXPRESSION = ' PAREN_EXPRESSION ' ; var POSTFIX_EXPRESSION:==:' POSTFIX_EXPRESSION ' ;
var childObject = parse . object . extend ( className : ' childObject ' ) ; var parentObject:==:parse . object . extend ( className : ' parentObject ' ) ;
var tablixObjects = visuals . controls . internal . tablixObjects ; var color:==:jsCommon . color ;
var dynCall_viii = Module [ ' dynCall_viii ' ] = asm [ ' dynCall_viii ' ] ; var dynCall_viiiiid:==:Module [ ' dynCall_viiiiid ' ]    asm [ ' dynCall_viiiiid ' ] ;
var sliced = require ( ' sliced ' ) ; var mpath:==:require ( ' mpath ' ) ;
var iceGatherer = transceiver . iceGatherer ; var iceTransport:==:transceiver . iceTransport ;
var descending = ' descending ' in opts ? opts . descending : false ; var keys:==:' keys ' in opts ? opts . keys : false ;
var a = next [ x ] [ y ] . a ; var b:==:next [ x ] [ y ] . b ;
var dir = dirname ( this . filename ) ; var path:==:join ( dir , path + ' . jade ' ) ;
var fs = require ( ' fs ' ) ; var selectxPath:==:require ( ' casper ' ) . selectxPath ;
var id_token_hint = _ ref . id_token_hint ; var post_logout_redirect_uri:==:_ ref . post_logout_redirect_uri ;
var stringToBytes = sharedUtil . stringToBytes ; var string32:==:sharedUtil . string32 ;
var classIndex = node . classIndex ( ) ; var seen:==:! ! seenClassNameIndexes [ classIndex ] ;
var blue100 = exports . blue100 = ' # bbdefb ' ; var blue200:==:exports . blue200    ' # 90caf9 ' ;
var range = math . range ; var pow:==:math . pow ;
var up = this . up ; var right:==:this . right ;
var Vue = exports . Vue ; var instance:==:instances [ instanceId ] ;
var label = _ column$props2 . label ; var columnData:==:_ column$props2 . columnData ;
var service = this . request . service ; var operation:==:this . request . operation ;
var start = Dom . cursorFromBoundaryPoint ( range . startContainer , range . startOffset ) ; var end:==:dom . cursorFromBoundaryPoint ( range . endContainer , range . endOffset ) ;
var ghost = params . ghost = = = true ; var constrain:==:ghost  |  |  ( params . constrain      true ) ;
var event = animationDetails . event ; var options:==:animationDetails . options ;
var params = this . params ; var keys:==:layer . keys ;
var opacity = context . opacity ; var origin:==:context . origin ;
var cancellationError = promise . cancellationError ; var errorObj:==:util . errorObj ;
var os = require ( ' os ' ) ; var https:==:require ( ' https ' ) ;
var isDefined = leafletHelpers . isDefined ; var isArray:==:leafletHelpers . isArray ;
var serviceName = document . getElementById ( ' serviceNameConnect ' ) . value ; var dontFragment:==:document . getElementById ( ' dontFragment ' ) . winControl ;
var height = ellipse . height ; var extrudedHeight:==:ellipse . extrudedHeight ;
var windowColor = _ options . windowColor ; var windowOpacity:==:_ options . windowOpacity ;
var color = getStyleProperty ( item , styleContextStack , ' color ' , ' black ' ) ; var decoration:==:getStyleProperty ( item , styleContextStack , ' decoration ' , null ) ;
var hierarchyNavigator = this . _ owner . owner . owner . hierarchyNavigator ; var binder:==:this . binder ;
var OUTLINE_WIDTH_INDEX = pointPrimitive . outline_width_index ; var pixel_size_index:==:pointPrimitive . pixel_size_index ;
var window = context . window ; var subscription:==:context . subscription ;
var direction = this . direction ; var up:==:this . up ;
var yieldStatement = traceur . syntax . trees . yieldStatement ; var createBindingIdentifier:==:traceur . codegeneration . parseTreeFactory . createBindingIdentifier ;
var b = observable ( 3 ) ; var c:==:computed ( function ( ) return a . get ( ) * b . get ( ) ) ;
var bluebird = require ( ' bluebird ' ) ; var q:==:require ( ' q ' ) ;
var seleniumHost = grunt . option ( ' seleniumHost ' ) ; var seleniumPort:==:grunt . option ( ' seleniumPort ' ) ;
var performance = require ( ' performance ' ) ; var router:==:require ( ' router ' ) ;
var newDataLabelUtils = powerbi . visuals . newDataLabelUtils ; var axisHelper:==:powerbi . visuals . axisHelper ;
var container = this . container ; var canvas:==:this . canvas ;
var a = ' a ' ; var b:==:' b ' ;
var editor   = this . editor ; var settings:==:this . settings ;
var OPEN_BRACKET = [ SPACES , RAW_OPEN_BRACKET , SPACES ] . join ( ' ' ) ; var CLOSE_BRACKET:==:[ SPACES , RAW_CLOSE_BRACKET , SPACES ] . join ( ' ' ) ;
var p = this . port ? ' : ' + this . port : '' ; var h:==:this . hostname  |  |  '' ;
var co = require ( ' co ' ) ; var ucs2length:==:util . ucs2length ;
var plumber = require ( ' gulp - plumber ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var A = Backbone . Model . extend ( idAttribute : ' _ i d ' ) ; var b:==:backbone . model . extend ( idAttribute : ' _ i d ' ) ;
var btnMin = o . buttons . btnMin ; var btnMax:==:o . buttons . btnMax ;
var options = _ ref3 . options ; var labelKey:==:_ ref3 . labelKey ;
var start = x : Math . cos ( startAngle ) , y : math . sin ( startAngle ) ; var end:==:x : math . cos ( endAngle ) , y : math . sin ( endAngle ) ;
var owners = yield eventStore . ownersOf ( record . event ) ; var provider:==:core . providerFactory . get ( owners . account . providerType ) ;
var phi = phiStart + i * inverseSegments * phiLength ; var sin:==:math . sin ( phi ) ;
var row = e . getDocumentPosition ( ) . row ; var selection:==:editor . session . selection ;
var arrayPattern = traceur . syntax . trees . arrayPattern ; var arrowFunctionExpression:==:traceur . syntax . trees . arrowFunctionExpression ;
var b = locations [ bi ] ; var c:==:locations [ ci ] ;
var dur = p . getAttribute ( ' dur ' ) ; var end:==:p . getAttribute ( ' end ' ) ;
var lotterySearch = $ ( ' # lotterySearch ' ) ; var lotteryTable:==:$ ( ' # lotteryTable ' ) ;
var selectionStart = math . min ( selectionMgr . selectionStart , selectionMgr . selectionEnd ) ; var selectionEnd:==:math . max ( selectionMgr . selectionStart , selectionMgr . selectionEnd ) ;
var identifierExpression = traceur . syntax . trees . identifierExpression ; var literalExpression:==:traceur . syntax . trees . literalExpression ;
var parameter = this . transformAny ( tree . parameter ) ; var typeAnnotation:==:this . transformAny ( tree . typeAnnotation ) ;
var a = fulfillSoon ( ' a ' , 40 ) ; var b:==:rejectSoon ( ' rejected - b ' , 30 ) ;
var element = error . element ; var offset:==:error . offset ;
var hashId = binding . hashId ; var hash:==:( ckb [ hashId ]  |  |  ( ckb [ hashId ]    ) ) ;
var Dialog = imports . Dialog ; var util:==:imports . util ;
var form = container . find ( ' form ' ) ; var input:==:container . find ( ' input ' ) ;
var message = evt . detail . message  |  |  '' ; var type:==:evt . detail . promptType  |  |  evt . detail . type ;
var Coverage = test . Coverage ; var dirname:==:require ( ' path ' ) . dirname ;
var onKeyboardFocus = _ props . onKeyboardFocus ; var tooltip:==:_ props . tooltip ;
var getElementsByInterface = scope . getElementsByInterface ; var parentNodeInterface:==:scope . parentNodeInterface ;
var _ i64Subtract = module [ ' _ i64Subtract ' ] = asm [ ' _ i64Subtract ' ] ; var _ strcpy:==:module [ ' _ strcpy ' ]    asm [ ' _ strcpy ' ] ;
var handle = displaybles . handles [ handleIndex ] ; var handleHeight:==:this . _ handleHeight ;
var textNodes = bindings . textNodes ; var attrs:==:bindings . attrs ;
var dynCall_viiiiiiiiiii = Module [ ' dynCall_viiiiiiiiiii ' ] = asm [ ' dynCall_viiiiiiiiiii ' ] ; var dynCall_iiii:==:Module [ ' dynCall_iiii ' ]    asm [ ' dynCall_iiii ' ] ;
var label = ' label ' ; var file:==:' file ' ;
var xaxis = plot . getAxes ( ) . xaxis ; var box:==:xaxis . box ;
var archiver = require ( ' archiver ' ) ; var metaScript:==:require ( ' metaScript ' ) ;
var val = $ input . val ( ) ; var isColor:==:$ . zui . color . isColor ( val ) ;
var width = rectData . width ; var height:==:rectData . height ;
var autoPage = ( opts . autoPage=='false' |  | opts . autoPage==false ) ? false : true ; var pnLoop:==:( opts . pnLoop   ' false' |  | opts . pnLoop   false ) ? false : true ;
var children = _ props3 . children ; var onRowClick:==:_ props3 . onRowClick ;
var nameField = this . props . list . nameField ; var nameFieldIsFormHeader:==:this . props . list . nameFieldIsFormHeader ;
var dismissKeyboard = require ( ' dismissKeyboard ' ) ; var requireNativeComponent:==:require ( ' requireNativeComponent ' ) ;
var y1 = y + box . y1 * yStretch ; var x2:==:x + box . x2 ;
var preload = imports [ ' layout . preload ' ] ; var anims:==:imports . anims ;
var prev = caretWalker . prev ( startCaretPos ) ; var next:==:caretWalker . next ( endCaretPos ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var pattern:==:util . pattern ;
var i d = data . params . i d ; var classList:==:this . element . classList ;
var disabled = _ props . disabled ; var fullWidth:==:_ props . fullWidth ;
var selectionState = require ( ' selectionState ' ) ; var richTextEditorUtil:==:require ( ' richTextEditorUtil ' ) ;
var out = doc . outputStr ( ) ; var fs:==:require ( ' fs ' ) ;
var pm2 = require ( ' pm2 ' ) ; var nodemailer:==:require ( ' nodemailer ' ) ;
var cancel = onEvt ( el , ' touchcancel ' , onReleasedItem , this ) ; var scroll:==:onEvt ( window , ' scroll ' , onReleasedItem , this ) ;
var HELPER = sym ( ' HELPER ' ) ; var MATCH:==:sym ( ' MATCH ' ) ;
var release = argv . release ? argv . release : false ; var failTaskOnError:==:argv . failTaskOnError ? argv . failTaskOnError : false ;
var width = options . viewport . width - ( margin . left + margin . right ) ; var height:==:options . viewport . height ;
var utils = require ( ' utils ' ) ; var jsmin:==:require ( ' jsmin ' ) ;
var fs = require ( ' fs ' ) ; var btoa:==:require ( ' btoa ' ) ;
var paddingRight = this . parseStyle ( elemStyle . paddingRight ) ; var paddingBottom:==:this . parseStyle ( elemStyle . paddingBottom ) ;
var next = head . next ; var prev:==:head . prev ;
var min = this . schema . minimum  |  |  0 ; var max:==:this . schema . maximum  |  |  Math . max ( 100,min+1 ) ;
var template = options . template  |  |  '' ; var resolve:==:angular . extend ( , options . resolve ) ;
var page = qb ( ) . from ( ' page ' ) . select ( ' i d ' ) . whereIn ( ' chapter_id ' , chain ) ; var word:==:qb ( ) . from ( ' word ' ) . select ( ' i d ' ) . whereIn ( ' page_id ' , page ) ;
var remoteChunkSize = $ ( ' # remoteChunkSize ' ) . val ( ) ; var files:==:$ ( ' # files ' ) [ 0 ] . files ;
var size = object . size ; var type:==:object . type ;
var camera = scene . _ camera ; var context:==:scene . context ;
var input = conf . input ; var n:==:conf . n  |  0 ;
var clientTop = el . clientTop  |  |  body . clientTop  |  |  0 ; var clientLeft:==:el . clientLeft  |  |  body . clientLeft  |  |  0 ;
var Ref = corePrimitives . ref ; var refSet:==:corePrimitives . refSet ;
var a = fulfillBuiltInSoon ( ' a ' , 40 ) ; var b:==:rejectBuiltInSoon ( ' rejected - b ' , 30 ) ;
var appId = this . params _ . callstatsParams . appId ; var appSecret:==:this . params _ . callstatsParams . appSecret ;
var _ memset = Module [ ' _ memset ' ] = asm [ ' _ memset ' ] ; var _ malloc:==:Module [ ' _ malloc ' ]    asm [ ' _ malloc ' ] ;
var aws = require ( ' aws - sdk ' ) ; var mime:==:require ( ' mime ' ) ;
var IMPORT_DECLARATION = ' IMPORT_DECLARATION ' ; var IMPORT_SPECIFIER:==:' IMPORT_SPECIFIER ' ;
var re = exports . re = [ ] ; var src:==:exports . src    [ ] ;
var OBJECT_TYPE = ' OBJECT_TYPE ' ; var PAREN_EXPRESSION:==:' PAREN_EXPRESSION ' ;
var globalTransforms = layout . _ globalTransforms  |  |  [ ] ; var transformModules:==:layout . _ transformModules  |  |  [ ] ;
var TRACEUR = traceur . syntax . predefinedName . traceur ; var element_delete:==:traceur . syntax . predefinedName . element_delete ;
var isString = logic . _ isString ; var isArrayWhere:==:logic . _ isArrayWhere ;
var zlevelList = this . _ zlevelList = [ ] ; var layers:==:this . _ layers    ;
var child_process = require ( ' child_process ' ) ; var _ files:==:path . join ( _ _ dirname , ' _ files ' ) ;
var clientWidth = b . clientWidth ; var clientHeight:==:b . clientHeight ;
var logger = require ( ' pomelo - logger ' ) . getLogger ( ' pomelo ' , _ _ filename ) ; var package:==:protocol . package ;
var w = $ ( document ) . width ( ) - 10 ; var h:==:$ ( document ) . height ( ) - 100 ;
var barClassFailure = options . barClassFailure  |  |  ' bar - danger ' ; var outputClassSuccess:==:options . outputClassSuccess  |  |  ' ' ;
var f = function ( ) ; var a:==:foo : ' bar ' ;
var config = _ _ dependency1 _ _ . config ; var eventTarget:==:_ _ dependency2 _ _ . eventTarget ;
var session = ed . session ; var col:==:ed . selection . isEmpty ( ) ? ed . selection . lead . column : -1 ;
var length   = enumerator . length ; var promise:==:enumerator . promise ;
var argv = require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ; var fs:==:require ( ' fs - extra ' ) ;
var start = this . start ; var end:==:this . end ;
var dup = opts . dup ? protocol . DUP_MASK : 0 ; var qos:==:opts . qos  |  |  0 ;
var graph = ui . editor . graph ; var input:==:document . createElement ( ' input ' ) ;
var input = angular . element ( inputs [ x ] ) ; var choiceno:==:this . get_choiceno_for_node ( input ) ;
var complex = math . complex ; var matrix:==:math . matrix ;
var a = div . appendChild ( document . createTextNode ( ' a ' ) ) ; var b:==:div . appendChild ( document . createTextNode ( ' b ' ) ) ;
var env = plug . util . env ; var log:==:plug . util . log ;
var now = Date . now ( ) ; var created:==:this . created . getTime ( ) ;
var argv = require ( ' yargs ' ) . argv ; var fs:==:require ( ' fs ' ) ;
var warn = sharedUtil . warn ; var fontFaceObject:==:displayFontLoader . fontFaceObject ;
var s = new Schema ( setMaxListeners : string ) ; var m:==:mongoose . model ( ' setMaxListeners - as - property - name ' , s ) ;
var selectorsInterface = scope . selectorsInterface ; var matchesInterface:==:scope . matchesInterface ;
var col = $ ( ' # term - col ' ) . val ( ) ; var row:==:$ ( ' # term - row ' ) . val ( ) ;
var mcc = currentDataIcc . iccInfo . mcc ; var mnc:==:currentDataIcc . iccInfo . mnc ;
var b = ( graph . pageVisible ) ? graph . view . getBackgroundPageBounds ( ) : graph . getGraphBounds ( ) ; var tr:==:graph . view . translate ;
var element = Hierarchy . follow ( Element . fromDom ( viewBlock . get ( ) ) , elementPath ) . getOrDie ( ) ; var action:==:actionOption . getOrDie ( ) ;
var ctime = new Date ( stats . ctime ) . getTime ( ) ; var watcher:==:watchers [ docId ] ;
var moment = require ( ' moment - timezone ' ) ; var isMoment:==:moment . isMoment ;
var pos1 = obj . pos1  |  |  [ 0 , 0 , 0 ] ; var pos2:==:obj . pos2  |  |  [ 0 , 0 , 0 ] ;
var to = constraint . to ; var attachment:==:constraint . attachment ;
var orientation = this . options . orientation . axis ; var start:==:util . convert ( this . body . range . start , ' Number ' ) ;
var location = response . location ; var catalogItems:==:response . catalogItems ;
var traits = identify . traits ( ) ; var email:==:identify . email ( ) ;
var item = this . linegraph . groups [ groupId ] . itemsData [ i ] ; var value:==:util . convert ( item . x , ' date ' ) . valueOf ( ) ;
var online = e . online ; var networkTypeName:==:e . networkTypeName ;
var add = node . addr  |  |  msg . ip  |  |  ' ' ; var por:==:node . port  |  |  msg . port  |  |  0 ;
var index = message ? stack . indexOf ( message ) : -1 ; var actual:==:err . actual ;
var express = require ( ' express ' ) ; var util:==:require ( ' util ' ) ;
var range = math . range ; var log10:==:math . log10 ;
var debug = require ( ' debug ' ) ( ' interface : driver ' ) ; var nssocket:==:require ( ' nssocket ' ) ;
var canvas = self . canvas ; var aspectRatio:==:options . aspectRatio ;
var stun = iceCandidates . stun ; var turn:==:iceCandidates . turn ;
var from = iterator . from ; var to:==:iterator . to ;
var width = canvas . style . width ; var height:==:canvas . style . height ;
var ANNOTATION = ' ANNOTATION ' ; var ANON_BLOCK:==:' ANON_BLOCK ' ;
var COMMA_EXPRESSION = ' COMMA_EXPRESSION ' ; var COMPREHENSION_FOR:==:' COMPREHENSION_FOR ' ;
var fs = imports . fs ; var style:==:document . createElement ( ' style ' ) ;
var children = this . _ template  |  |  this . _ children ; var length:==:children . length ;
var readline = require ( ' readline ' ) ; var spawn:==:require ( ' child_process ' ) . spawn ;
var x = itemLayout . x ; var y:==:itemLayout . y ;
var monthDay = app . monthDay . getElement ( ) ; var container:==:app . monthDay . container ;
var column = columnsMetadata [ i ] ; var queryName:==:column . queryName ;
var assert = utils . assert ; var parseBytes:==:utils . parseBytes ;
var noContentRenderer = _ props4 . noContentRenderer ; var style:==:_ props4 . style ;
var offset = error . offset ; var rule:==:error . rule ;
var noMic = $ ( ' # ' + this . videoSpanId + ' > . noMic ' ) ; var noVideo:==:$ ( ' # ' + this . videoSpanId + ' > . noVideo ' ) ;
var rpcurrency = $ filter ( ' rpcurrency ' ) ; var rpcontactname:==:$ filter ( ' rpcontactname ' ) ;
var maximumRenderbufferSize = contextLimits . maximumRenderbufferSize ; var format:==:defaultValue ( options . format , renderbufferFormat . rgba4 ) ;
var touch = _ props . touch ; var iconStyle:==:_ props . iconStyle ;
var dataViewObjects = powerbi . dataViewObjects ; var visualDataRoleKind:==:powerbi . visualDataRoleKind ;
var materials = gltf . materials ; var techniques:==:gltf . techniques ;
var fingerprintFormatError = errs . fingerprintFormatError ; var invalidAlgorithmError:==:errs . invalidAlgorithmError ;
var question = imports [ ' dialog . question ' ] ; var preload:==:imports [ ' layout . preload ' ] ;
var jscs = require ( ' gulp - jscs ' ) ; var mocha:==:require ( ' gulp - spawn - mocha ' ) ;
var touchableOpacity = require ( ' touchableOpacity ' ) ; var view:==:require ( ' view ' ) ;
var lineNumber = math . max ( 0 , call . lineNumber - 1 )  |  |  0 ; var columnNumber:==:math . max ( 0 , call . columnNumber - 1 )  |  |  0 ;
var remote = new PouchDB ( dbs . remote ) ; var ajax:==:remote . _ ajax ;
var f8Colors = require ( ' f8Colors ' ) ; var f8FriendGoing:==:require ( ' f8FriendGoing ' ) ;
var height = _ ref3 . height ; var isScrolling:==:_ ref3 . isScrolling ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , data , plugins : [ p ] ) ;
var now = Date . now ( ) ; var lastDisplayTime:==:this . session . lastDisplayTime ;
var contexts = this . _ contexts ; var arg:==:this . _ arg ;
var arb = arbiters [ i ] ; var a:==:arb . body_a , b    arb . body_b ;
var proto = ctor . prototype ; var parseRawValue:==:dataType . parseRawValue ;
var linearMap = numberUtil . linearMap ; var noop:==:zrUtil . noop ;
var sunPositionec = matrix4 . multiplyByPoint ( viewMatrix , sunPosition , sunPositionecScratch ) ; var sunPositionwc:==:transforms . pointToglWindowCoordinates ( viewProjectionMatrix , viewportTransformation , sunPosition , sunPositionwcScratch ) ;
var events = require ( ' events ' ) ; var log:==:require ( dirs . core + ' log ' ) ;
var commands = imports . commands ; var fs:==:imports . fs ;
var proxy_server_addr = unblock_youku . default_proxy_server_addr ; var backup_proxy_server_proc:==:unblock_youku . backup_proxy_server_proc ;
var dfa = this . stack [ this . stack . length - 1 ] . dfa ; var state:==:this . stack [ this . stack . length - 1 ] . state ;
var parse = require ( ' url ' ) . parse ; var cookie:==:require ( ' cookie ' ) ;
var tag = vnode . tag ; var data:==:vnode . data ;
var k = kf ( key ) ; var bucket:==:this . buckets [ k . v ] ;
var json = this . json ; var extensions:==:this . extensions ;
var oldValue = that . _ oldValue ; var value:==:that . value ( ) ;
var src = scriptTags [ i ] . src ; var index:==:src . toLowerCase ( ) . indexOf ( scriptTagSrc ) ;
var expertCharset = coreCharsets . expertCharset ; var expertSubsetCharset:==:coreCharsets . expertSubsetCharset ;
var propertyChangedBase = babylon . propertyChangedBase ; var dictionaryChanged:==:babylon . dictionaryChanged ;
var useWrapMode = this . $ useWrapMode ; var action:==:delta . action ;
var controlSize = layoutInfo . controlSize ; var rotation:==:layoutInfo . rotation ;
var ELEMENT_NODE     = nodeType . element_node     = 1 ; var attribute_node:==:nodeType . attribute_node       2 ;
var len = list . length ; var i:==:d + _ . indexOf ( list , current ( ) ) ;
var createVariableStatement = parseTreeFactory . createVariableStatement ; var createVariableDeclaration:==:parseTreeFactory . createVariableDeclaration ;
var from = new rgbColor ( p . from . value ) ; var to:==:new rgbColor ( p . to . value ) ;
var height = corridorOutlineGeometry . _ height ; var width:==:corridorOutlineGeometry . _ width ;
var ace = imports . ace ; var menus:==:imports . menus ;
var settings = imports . settings ; var question:==:imports [ ' dialog . question ' ] ;
var name = props . name ; var route:==:parent . $ route ;
var document = window . document ; var slice:==:deletedIds . slice ;
var content = req . body . content  |  |  '' ; var reply_id:==:req . body . reply_id ;
var L = CMD . L ; var A:==:CMD . A ;
var closeOnContent = mfp . st . closeOnContentClick ; var closeOnBg:==:mfp . st . closeOnBgClick ;
var col = object . columns [ i ] ; var search:==:col . searchable ;
var axisKey = seriesInfo . axisKey ; var bandWidth:==:seriesInfo . bandWidth ;
var bindingIdentifier = traceur . syntax . trees . bindingIdentifier ; var identifierExpression:==:traceur . syntax . trees . identifierExpression ;
var express = require ( ' express ' ) ; var nconf:==:require ( ' nconf ' ) ;
var rename = require ( ' gulp - rename ' ) ; var webpack:==:require ( ' webpack ' ) ;
var binding = item . binding ; var command:==:item . command ;
var child = children [ i ] ; var hitArea:==:child . hitArea ;
var listView = _ appJsViewsListView [ ' default ' ] ; var proximityEmptyView:==:_ appJsViewsProximityEmptyView [ ' default ' ] ;
var yAxisModels = foundCpts . yAxisModels ; var gridModels:==:foundCpts . gridModels ;
var chokidar = require ( ' chokidar ' ) ; var p:==:require ( ' path ' ) ;
var fieldExpr = this . fieldExpr ? nodeToString ( this . fieldExpr ) : ' bitField ' ; var mask:==:this . mask ;
var nodeName = node . nodeName . toLowerCase ( ) ; var nodeType:==:node . nodeType ;
var d16 = _ addDiv ( ' d16 ' ) , d17 = _ addDiv ( ' d17 ' ) ; var conn:==:_ jsPlumb . connect ( source : d16 , target : d17 , connector : ' bezier ' ) ;
var dsFoo = appFoo . dataSource ( ' dsFoo ' , connector : ' memory ' ) ; var dsBar:==:appFoo . dataSource ( ' dsBar ' , connector : ' memory ' ) ;
var line = position . line + 1 ; var character:==:position . character + 1 ;
var legendData = powerbi . visuals . legendData ; var selectionId:==:powerbi . visuals . selectionId ;
var cookie = require ( ' cookie ' ) ; var extend:==:require ( ' extend ' ) ;
var sandbox = sinon . create ( sinon . sandbox ) ; var config:==:sinon . config  |  |  ;
var height = chart . height ; var width:==:chart . width ;
var checkEl = instance . get ( ' checkEl ' ) ; var checked:==:checkEl . attr ( ' checked ' ) ;
var _ windowTime = this . _ windowTime ; var events:==:this . events ;
var scrollView = options . scrollView ; var transclude:==:options . transclude ;
var overlayContentStyle = _ props . overlayContentStyle ; var overlayStyle:==:_ props . overlayStyle ;
var options = $ . merge ( this . options , viz . controller , opt ) ; var n:==:$ . splat ( node ) ;
var calendar = t . calendar ; var opt:==:t . opt ;
var index = callbackData . index ; var indexDisp:==:callbackData . indexDisp ;
var Navigator = require ( ' Navigator ' ) ; var f8DrawerLayout:==:require ( ' f8DrawerLayout ' ) ;
var fontRendererFactory = coreFontRenderer . fontRendererFactory ; var winAnsiEncoding:==:coreEncodings . winAnsiEncoding ;
var Lexer = coreParser . lexer ; var cMapFactory:==:corecMap . cMapFactory ;
var innerRadiusOfArc = drawOptions . innerRadiusOfArc ; var left:==:drawOptions . left ;
var filterArea = filterBlock . target . filterArea ; var x:==:filterArea . x - offsetx ;
var request = require ( ' request ' ) ; var should:==:require ( ' should ' ) ;
var x = center . x ; var y:==:center . y ;
var send = require ( ' send ' ) ; var url:==:require ( ' url ' ) ;
var foregroundElement = this . elements . foregroundElement ; var backgroundElement:==:this . elements . backgroundElement ;
var origin = target . origin ; var scale:==:target . scale  |  |  [ 1 , 1 ] ;
var through = require ( ' through2 ' ) ; var util:==:require ( ' gulp - util ' ) ;
var codeLength = lzwState . codeLength ; var prevCode:==:lzwState . prevCode ;
var assert = require ( ' assert ' ) ; var redisError:==:require ( ' redis - parser ' ) . redisError ;
var nonce = _ ref . nonce ; var authority:==:_ ref . authority ;
var f = o . f ; var fAsync:==:o . fAsync ;
var m = math . matrix ( [ [ 5 , 0 , 15 ] , [ 223 , 0 , 34 . 5 ] , [ 1 , 0 , 19 ] ] , ' dense ' ) ; var r:==:math . qr ( m ) ;
var bind = _ angular . bind ; var copy:==:_ angular . copy ;
var translate = client . translate ; var report:==:$ ( ' # hourlystats - report ' ) ;
var name = $ ( this ) . parent ( ) . children ( ' . file - name ' ) . text ( ) ; var path:==:paths [ name ] ;
var g = rgba [ 1 ] ; var b:==:rgba [ 2 ] ;
var xhr = this . xhr = request . getXHR ( ) ; var data:==:this . _ formData  |  |  this . _ data ;
var handler = progression . handler ; var promise:==:progression . promise ;
var mssql = clients . mssql ; var mysql:==:clients . mysql ;
var i d = broadcast . i d ; var type:==:broadcast . type ;
var piece = pieceList [ i ] ; var interval:==:piece . interval ;
var bindThisParameter = traceur . syntax . trees . bindThisParameter ; var bindingElement:==:traceur . syntax . trees . bindingElement ;
var children = _ props . children ; var expandable:==:_ props . expandable ;
var inputValueTracking = require ( ' inputValueTracking ' ) ; var isCustomComponent:==:require ( ' isCustomComponent ' ) ;
var maxBG = opts . maxBG  |  |  400 ; var minBG:==:opts . minBG  |  |  40 ;
var messageHandler = sharedUtil . messageHandler ; var missingpdfException:==:sharedUtil . missingpdfException ;
var minNodeId = nodeFilter . minNodeId ; var maxNodeId:==:nodeFilter . maxNodeId ;
var ends = this . endss _ [ index ] . slice ( ) ; var end:==:ends [ ends . length - 1 ] ;
var editor = data . editor ; var cm:==:editor . state . cm ;
var isInteger = _ _ webpack_require _ _ ( 2 ) . isInteger ; var format:==:_ _ webpack_require _ _ ( 11 ) . format ;
var Add = Tone_signal_Add ; var Mult:==:Tone_signal_Multiply ;
var spawn = require ( ' child_process ' ) . spawn ; var spawnSync:==:require ( ' child_process ' ) . spawnSync ;
var height = Math . floor ( bb . height ( ) ) ; var filter:==:element . style ( ' filter ' ) . value ;
var app = this . app ; var speed:==:this . speed ;
var EXPORT_DEFAULT = ' EXPORT_DEFAULT ' ; var EXPORT_SPECIFIER:==:' EXPORT_SPECIFIER ' ;
var webChannelDebug = goog . labs . net . webChannel . webChannelDebug ; var webChannelRequest:==:goog . labs . net . webChannel . webChannelRequest ;
var fill = defaultValue ( options . fill , true ) ; var strokeWidth:==:defaultValue ( options . strokeWidth , 1 ) ;
var parentEle = ele . parentElement ; var children:==:parentEle . children ;
var layers = this . layers ; var dataViews:==:this . dataViews ;
var options = self . options ; var container:==:self . container ;
var max = new Date ( range . max . valueOf ( ) + interval * 0 . 01 ) ; var animation:==:options & & options . animation !    undefined ? options . animation : true ;
var n = numeric ; var x:==:this . x , y    this . y ;
var isValidCenter = leafletHelpers . isValidCenter ; var isValidBounds:==:leafletBoundsHelpers . isValidBounds ;
var loaded = surfaceTile . loadedTerrain ; var upsampled:==:surfaceTile . upsampledTerrain ;
var fs = require ( ' fs ' ) ; var readFile:==:rsvp . denodeify ( fs . readFile ) ;
var direction = detail . direction ; var angle:==:detail . angle ;
var t = height - pbottom . sizeCalculated ; var w:==:width ;
var option = target . dataset . option ; var index:==:target . dataset . index ;
var eventPluginRegistry = require ( ' eventPluginRegistry ' ) ; var eventPluginUtils:==:require ( ' eventPluginUtils ' ) ;
var edgeVertexb = spheretrimesh_edgevertexb ; var edgeVector:==:spheretrimesh_edgevector ;
var type = indexDef . type  |  |  ' json ' ; var name:==:indexDef . name ;
var l = aabb . lowerBound ; var u:==:aabb . upperBound ;
var error = debug ( ' A - Frame : error ' ) ; var warn:==:debug ( ' A - Frame : warn ' ) ;
var unexpectedResponseException = sharedUtil . unexpectedResponseException ; var passwordException:==:sharedUtil . passwordException ;
var form = this . form ; var value:==:this . editField . value ;
var colRight = t . colRight ; var colContentLeft:==:t . colContentLeft ;
var extname = pathFn . extname ( path ) ; var name:==:path . substring ( 0 , path . length - extname . length ) ;
var a = bar ( 1 + 2 ) ; var b:==:baz ( 3 + 9 ) ;
var index = rectangle . _ index ; var custom:==:rectangle . custom  |  |  ;
var labelStyle = powerbi . visuals . labelStyle ; var donutLabelUtils:==:powerbi . visuals . donutLabelUtils ;
var config = descriptor . config ; var models:==:descriptor . models ;
var slice = Array . prototype . slice . call . bind ( Array . prototype . slice ) ; var map:==:Array . prototype . map . call . bind ( Array . prototype . map ) ;
var dataViewObject = powerbi . dataViewObject ; var interactivityUtils:==:powerbi . visuals . interactivityUtils ;
var sort = a ( cell , ' sort ' )  |  |  a ( cell , ' order ' ) ; var filter:==:a ( cell , ' filter ' )  |  |  a ( cell , ' search ' ) ;
var Plugin = imports . Plugin ; var vfs:==:imports . vfs ;
var toggle = element . find ( ' [ uib - dropdown - toggle ] ' ) ; var menu:==:$ document . find ( ' # dropdown - menu ' ) ;
var listView = that . listView ; var key:==:e . keyCode ;
var name = input . name ; var selectKey:==:input . selectKey ;
var stylish = require ( ' jshint - stylish ' ) ; var jscs:==:require ( ' gulp - jscs ' ) ;
var line = lines [ i ] ; var len:==:line . length ;
var y = ( vector . x * transformation . m [ 1 ] ) + ( vector . y * transformation . m [ 5 ] ) + ( vector . z * transformation . m [ 9 ] ) ; var z:==:( vector . x * transformation . m [ 2 ] ) + ( vector . y * transformation . m [ 6 ] ) + ( vector . z * transformation . m [ 10 ] ) ;
var env = process . env ; var execSync:==:require ( ' child_process ' ) . execSync ;
var async = require ( ' async ' ) ; var express:==:require ( ' express ' ) ;
var tan = stdlib . Math . tan ; var exp:==:stdlib . Math . exp ;
var node = nodeStack . pop ( ) ; var text:==:node . textContent  |  |  node . innerText ;
var w = $ ( window ) . height ( ) ; var h:==:$ ( ' # nav ' ) . outerHeight ( ) ;
var currentTime = julianDate . fromIso8601 ( clockPacket . clock . currentTime ) ; var multiplier:==:clockPacket . clock . multiplier ;
var touchableBounce = require ( ' touchableBounce ' ) ; var touchableHighlight:==:require ( ' touchableHighlight ' ) ;
var utils = require ( ' keystone - utils ' ) ; var debug:==:require ( ' debug ' ) ( ' keystone : core : list : addSearchToQuery ' ) ;
var b = this . b ; var c:==:this . c ;
var polygonOffset = defaultValue ( statesFunctions . polygonOffset , [ 0 . 0 , 0 . 0 ] ) ; var scissor:==:defaultValue ( statesFunctions . scissor , [ 0 . 0 , 0 . 0 , 0 . 0 , 0 . 0 ] ) ;
var text = element . textContent ; var ranges:==:rangesForMatch ( text , query ) ;
var dirs = util . dirs ( ) ; var log:==:require ( dirs . core + ' log ' ) ;
var roots = this . _ roots ; var displayList:==:this . _ displayList ;
var bandWidth = columnsOnAxis . bandWidth ; var categoryGap:==:parsePercent ( columnsOnAxis . categoryGap , bandWidth ) ;
var navCon = this . getView ( ) . byId ( ' navCon ' ) ; var target:==:evt . getSource ( ) . data ( ' target ' ) ;
var unknownErrorException = sharedUtil . unknownErrorException ; var xRefParseException:==:sharedUtil . xRefParseException ;
var notes = treatment . notes  |  |  '' ; var enteredBy:==:treatment . enteredBy  |  |  '' ;
var extensionSidebarPane = declareInterfaceClass ( extensionSidebarPaneImpl ) ; var panelWithSidebar:==:declareInterfaceClass ( panelWithSidebarImpl ) ;
var exec = require ( ' child_process ' ) . exec ; var assert:==:require ( ' assert ' ) ;
var fromSymbol = edge . getVisual ( ' fromSymbol ' ) ; var toSymbol:==:edge . getVisual ( ' toSymbol ' ) ;
var contactEmail = contacts . contactEmail ; var contactEmailKind:==:contacts . contactEmailKind ;
var key   = event . keyCode ; var shiftKey:==:event . shiftKey ;
var width = block . width ; var height:==:block . height ;
var bgnodes = DOM . getNodeArray ( options . bgnodes ) ; var stylenodes:==:dom . getNodeArray ( options . stylenodes ) ;
var touch = require ( ' touch ' ) ; var watchify:==:require ( ' watchify ' ) ;
var stringifyQuery = options . stringifyQuery ; var parseQueryString:==:options . parseQueryString ;
var x = scroll . x ; var y:==:scroll . y ;
var importStarVisitor = traceur . codegeneration . module . importStarVisitor ; var moduleDeclarationVisitor:==:traceur . codegeneration . module . moduleDeclarationVisitor ;
var size = options . size ; var height:==:options . height ;
var args = mixin . args  |  |  '' ; var block:==:mixin . block ;
var cid = req . query . cid ; var filter:==:req . params . filter  |  |  '' ;
var isSparklines = this . isSparklines ( ) ; var isHidingPercentBars:==:this . isHidingPercentBars ( ) ;
var arrayLen = alias ( ' arrayLen ' , u32 ) ; var bufLen:==:alias ( ' bufLen ' , u32 ) ;
var i d = i d  |  |  options . size ( ) ; var option:==:chart_option_checkbox ( ) ;
var y = temp . y ; var z:==:temp . z ;
var object = compile ( node . object , defs , args ) ; var index:==:node . index ? compile ( node . index , defs , args ) : null ;
var folds = this . folds ; var foldData:==:this . foldData ;
var phase = this . phase ; var ratchet:==:this . ratchet ;
var validator = v . validator ; var message:==:v . message ;
var c9 = imports . c9 ; var ui:==:imports . ui ;
var y1 = shape . y1 ; var x2:==:shape . x2 ;
var sin = sinAmplitude ; var cos:==:cosAmplitude ;
var WIDTH_INDEX = Polyline . WIDTH_INDEX ; var POSITION_INDEX:==:Polyline . POSITION_INDEX ;
var head = document . getElementsByTagName ( ' head ' ) [ 0 ] ; var style:==:document . createElement ( ' style ' ) ;
var encoding = feed . encoding  |  |  ' UTF-8 ' ; var reloadInterval:==:config . reloadInterval  |  |  5 * 60 * 1000 ;
var moment = ' moment ' ; var any:==:' any ' ;
var linearMap = numberUtil . linearMap ; var each:==:zrUtil . each ;
var headerStyle = _ props2 . headerStyle ; var onHeaderClick:==:_ props2 . onHeaderClick ;
var os = require ( ' os ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var EVENT_RELEASE = gestureDetector . event_release = ' release ' ; var event_touch:==:gestureDetector . event_touch    ' touch ' ;
var smil = message . smil ; var attachments:==:message . attachments ;
var showButtonPanel = this . _ get ( inst , ' showButtonPanel ' ) ; var hideIfNoPrevNext:==:this . _ get ( inst , ' hideIfNoPrevNext ' ) ;
var width = view . width * view . scaleX ; var height:==:view . height * view . scaleY ;
var recordFunction = goog . require ( ' goog . testing . recordFunction ' ) ; var testSuite:==:goog . require ( ' goog . testing . testSuite ' ) ;
var models = _ _ alloyId22 . models ; var len:==:models . length ;
var windowOpacity = _ options . windowOpacity ; var edgeStyle:==:_ options . edgeStyle ;
var summary = document . getElementById ( base + ' -summary ' ) ; var trigger:==:document . getElementById ( base + ' -trigger ' ) ;
var convert = require ( ' convert - dates ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var DISTANCE_DISPLAY_CONDITION_INDEX = pointPrimitive . distance_display_condition_index = 8 ; var disable_depth_distance_index:==:pointPrimitive . disable_depth_distance_index    9 ;
var keys = this . keys ; var velocity:==:this . velocity ;
var skeleton = object . skeleton ; var bones:==:skeleton . bones ;
var index = Indexes [ indexIndex % indexes . length ] ; var inline:==:bools [ inlineIndex % bools . length ] ;
var nextProp = nextProps [ propKey ] ; var lastProp:==:lastProps [ propKey ] ;
var debug   = require ( ' debug ' ) ( ' pm2 : cli ' ) ; var util:==:require ( ' util ' ) ;
var uglify = require ( ' gulp - uglify ' ) ; var logger:==:require ( ' gulp - logger ' ) ;
var util = require ( ' gulp - util ' ) ; var mocha:==:require ( ' gulp - mocha ' ) ;
var originalData = mapModel . originalData ; var group:==:this . group ;
var db = app . dataSource ( ' db ' , connector : ' memory ' ) ; var customer:==:app . registry . createModel ( ' customer ' , , base : ' user ' ) ;
var $ button = this . emojiarea . $ button ; var offset:==:$ button . offset ( ) ;
var events = require ( ' events ' ) ; var utils:==:require ( ' utils ' ) ;
var fillColor = data . fillColor  |  0 ; var lineColor:==:data . lineColor  |  0 ;
var registerWrapper = scope . registerWrapper ; var setInnerhtml:==:scope . setInnerhtml ;
var collab = imports . collab ; var Menu:==:imports . Menu ;
var Name = corePrimitives . name ; var isName:==:corePrimitives . isName ;
var charCode = evt . charCode ; var keyCode:==:evt . keyCode ;
var height = props . height ; var overscanColumnCount:==:props . overscanColumnCount ;
var chalk = require ( ' chalk ' ) ; var fs:==:require ( ' fs ' ) ;
var f = m . f ; var g:==:m . g ;
var tooltipModel = this . _ tooltipModel ; var triggerOn:==:tooltipModel . get ( ' triggerOn ' ) ;
var parent = self . _ parent ; var volume:==:( Howler . _ muted  |  |  self . _ muted  |  |  self . _ parent . _ muted ) ? 0 : self . _ volume ;
var direction = this . _ direction ; var from:==:this . from ;
var el = this . el ; var v:==:el . dom . value ;
var defaults = Chart . defaults . global . plugins ; var options:==:( config . options & & config . options . plugins )  |  |  ;
var zlevel = this . _ singleCanvas ? 0 : el . zlevel ; var layer:==:layers [ zlevel ] ;
var c = _ c ; var str_ind:==:_ str_ind ;
var defaultValue = this . props . defaultValue ; var children:==:this . props . children ;
var getter = animator . _ getter ; var setter:==:animator . _ setter ;
var add = require ( ' add ' ) ; var subtract:==:require ( ' subtract ' ) ;
var moduleObj = link . moduleObj ; var importerSetters:==:load . importerSetters ;
var timers = metrics . timers ; var sets:==:metrics . sets ;
var height = this . props . height ; var maxHeight:==:this . props . maxHeight ;
var path = require ( ' path ' ) ; var loopback:==:require ( ' loopback ' ) ;
var Controller = _ componentsFxosMvcDistMvc . controller ; var mainView:==:_ jsViewMainView [ ' default ' ] ;
var percent = percentFormat . format ( randomNumber ) ; var permille:==:permilleFormat . format ( randomNumber ) ;
var escape = utils . escape ; var Date:==:global . Date ;
var leaveActiveClass = ref . leaveActiveClass ; var beforeLeave:==:ref . beforeLeave ;
var blobBuilder = window . blobBuilder ; var url:==:window . url ;
var change = changes . pop ( ) ; var fileDesc:==:change . fileDesc ;
var components = material . _ template . components ; var source:==:material . _ template . source ;
var height = rect . height ; var width:==:rect . width ;
var p = this . protoStrategy ; var inj:==:this . injector ;
var len = conf . len  |  0 ; var encoding:==:conf . encoding ;
var start = _ item . data . start ; var end:==:( _ item . data . end !    undefined ) ? _ item . data . end : start ;
var a = x : ' a ' , y : ' a ' , z : ' a ' , t : ' a ' ; var b:==:y : ' b ' , t : ' b ' ;
var metadataService = exports . metadataService = _ _ webpack_require _ _ ( 306 ) ; var cordovaPopupNavigator:==:exports . cordovaPopupNavigator    _ _ webpack_require _ _ ( 341 ) ;
var interveningWhitespace = this . interveningWhitespace ; var interveningWhitespacePos:==:this . interveningWhitespacePos ;
var valueSpec = options . valueSpec ; var objectElementValidators:==:options . objectElementValidators  |  |  ;
var blueGrey300 = exports . blueGrey300 = ' # 90a4ae ' ; var blueGrey400:==:exports . blueGrey400    ' # 78909c ' ;
var itemStyle = getFixedItemStyle ( itemStyleModel , scale ) ; var hoverItemStyle:==:getFixedItemStyle ( hoverItemStyleModel , scale ) ;
var color = option . color |  | null ; var fps:==:option . fps ;
var orangeA200 = exports . orangeA200 = ' # ffab40 ' ; var orangeA400:==:exports . orangeA400    ' # ff9100 ' ;
var template = node . getAttribute ( ' template ' ) ; var resourceType:==:node . getAttribute ( ' resourceType ' ) ;
var current = this . current ; var font:==:current . font ;
var height = options . height ; var source:==:options . source ;
var end = message . data . end ; var count:==:start - count ;
var resolution = coerce ( ' resolution ' ) ; var projType:==:coerce ( ' projection . type ' , scopeParams . projType ) ;
var Service = _ fxosMvcDistMvc . service ; var peer:==:_ appJsModelsPeer [ ' default ' ] ;
var config = require ( configPath ) ( project . environment ) . mockServer  |  |  ; var morgan:==:require ( ' morgan ' ) ;
var byteOffset = bufferView . byteOffset + byteOffset ; var loadedBufferView:==:gltfRuntime . loadedBufferViews [ bufferView . buffer ] ;
var underlineDisabledStyle = _ props2 . underlineDisabledStyle ; var underlineFocusStyle:==:_ props2 . underlineFocusStyle ;
var newOptionCreator = _ props . newOptionCreator ; var onNewOptionClick:==:_ props . onNewOptionClick ;
var fs = require ( ' fs ' ) ; var json:==:( argv . json ? JSON . parse ( fs . readFileSync ( argv . json ) ) : ) ;
var fixedDataTableRow = require ( ' fixedDataTableRow . react ' ) ; var cx:==:require ( ' cx ' ) ;
var jison = require ( ' jison ' ) ; var gulp:==:require ( ' gulp ' ) ;
var trans = db . transaction ( [ storeName ] ) ; var store:==:trans . objectStore ( storeName ) ;
var circle = circles [ i ] ; var d:==:dist ( x , y , circle . x , circle . y ) ;
var minimumHeights = wallGeometry . _ minimumHeights ; var maximumHeights:==:wallGeometry . _ maximumHeights ;
var x = current . end . x ; var y:==:current . end . y ;
var literals = this . literals _ ; var buildPlaceholder:==:goog . bind ( this . buildPlaceholder _ , this ) ;
var columnxUnit = parseFloat ( params . columnxUnit ) ; var gutterxUnit:==:parseFloat ( params . gutterxUnit ) ;
var Text = require ( ' Text ' ) ; var panResponder:==:require ( ' panResponder ' ) ;
var col = grid . columns [ 2 ] ; var row:==:grid . rows [ 2 ] ;
var height = positionCartographic . height ; var i:==:findInterval ( height ) ;
var view = this . view ; var isRTL:==:this . isRTL ;
var errors = require ( ' restify - errors ' ) ; var methodNotAllowedError:==:errors . methodNotAllowedError ;
var texture = this . texture ; var frame:==:texture . frame ;
var from = args . from ; var to:==:args . to ;
var x = ( geo . relative ) ? geo . offset . x : geo . x ; var y:==:( geo . relative ) ? geo . offset . y : geo . y ;
var parseBackgrounds = utils . parseBackgrounds ; var offsetBounds:==:utils . offsetBounds ;
var children = element . _ children ; var headers:==:element . _ headers ;
var grunt = require ( ' grunt ' ) ; var phantomjs:==:require ( ' grunt - lib - phantomjs ' ) . init ( grunt ) ;
var background = background  |  |  chrome . extension . getBackgroundPage ( ) ; var default_redirect_server:==:background . unblock_youku . default_redirect_server ;
var cy = shape . cy ; var r:==:shape . r ;
var util = require ( ' util ' ) ; var domain:==:require ( ' domain ' ) ;
var DOM = domUtils . dom , themeManager = addOnManager . themeManager , pluginManager = addOnManager . pluginManager ; var extend:==:tools . extend , each    tools . each , explode    tools . explode ;
var keyRange = target . dataset . keyRange ; var data:==:this . dataSource [ index ] ;
var undo = this . actions . get ( ' undo ' ) ; var redo:==:this . actions . get ( ' redo ' ) ;
var material = this . material ; var envMap:==:data . envMap ;
var wrap = scope . wrap ; var mixin:==:scope . mixin ;
var x = locWorldInfo . x ; var y:==:locWorldInfo . y ;
var hidden = currentCrumb . classList . contains ( ' hidden ' ) ; var collapsed:==:currentCrumb . classList . contains ( ' collapsed ' ) ;
var z = zlevelList [ i ] ; var layer:==:self . _ layers [ z ] ;
var entryIndex = levelIndexes [ entryIndexOnLevel ] ; var entryStartTime:==:entryStartTimes [ entryIndex ] ;
var g = Number ( regExpResultArray [ 2 ] ) ; var b:==:number ( regExpResultArray [ 3 ] ) ;
var startLine = parsedScriptParams . startLine ; var endLine:==:parsedScriptParams . endLine ;
var foldWidgets = this . $ showFoldWidgets & & this . session . foldWidgets ; var lineHeight:==:config . lineHeight ;
var getAccessor = traceur . syntax . trees . getAccessor ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var x = node . x ; var y:==:node . y ;
var padCenter = _ require . padCenter ; var padLeft:==:_ require . padLeft ;
var allPaths = ! ! options . allPaths ; var store:==:this . store ;
var DOCUMENT_POSITION_CONTAINED_BY = Node . DOCUMENT_POSITION_CONTAINED_BY ; var DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC:==:Node . DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC ;
var l = Observable . never ( ) ; var r:==:Observable . never ( ) ;
var secondsFormat = $ dateFormatter . secondsFormat ( format ) ; var showSeconds:==:$ dateFormatter . showSeconds ( format ) ;
var recordingModule = require ( ' nativeModules ' ) . pickerAndroidRecordingModule ; var picker:==:require ( ' picker ' ) ;
var body = registeredMesh . body . body ; var center:==:mesh . getBoundingInfo ( ) . boundingBox . center ;
var scrollTop = math . max ( document . documentElement . scrollTop , document . body . scrollTop ) ; var scrollLeft:==:math . max ( document . documentElement . scrollLeft , document . body . scrollLeft ) ;
var url = require ( ' url ' ) ; var zlib:==:require ( ' zlib ' ) ;
var cx = parseFloat ( dockerElem . getAttributens ( oryx . config . namespace_oryx , ' cx ' ) ) ; var cy:==:parseFloat ( dockerElem . getAttributens ( oryx . config . namespace_oryx , ' cy ' ) ) ;
var createMemberExpression = parseTreeFactory . createMemberExpression ; var createObjectFreeze:==:parseTreeFactory . createObjectFreeze ;
var hash = window . location . hash . substring ( 1 ) ; var lhost:==:hash . substring ( hash . indexOf ( ' lhost ' ) + 6 , hash . indexOf ( ' & ' ) ) ;
var info = sharedUtil . info ; var isInt:==:sharedUtil . isInt ;
var div = createElement ( ' div ' ) ; var bdi:==:createElement ( ' bdi ' ) ;
var name = node . name ; var parent:==:tw . parent ( ) ;
var path = require ( ' path ' ) ; var argv:==:require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ;
var day = getOption ( options , ' day ' , ' string ' , [ ' 2-digit ' , ' numeric ' ] , undefined ) ; var hour:==:getOption ( options , ' hour ' , ' string ' , [ ' 2-digit ' , ' numeric ' ] , undefined ) ;
var a = ab . center ( ) ; var b:==:bb . center ( ) ;
var xhr = scope . xhr ; var flags:==:scope . flags ;
var Timer = goog . Timer ; var Transport:==:goog . net . xpc . Transport ;
var responseFlags = typeof options . responseFlags = = ' number ' ? options . responseFlags : 0 ; var startingFrom:==:typeof options . startingFrom     ' number ' ? options . startingFrom : 0 ;
var Dummy3 = mongoose . model ( ' Dummy3 ' , dummy3Schema ) ; var dummy4:==:mongoose . model ( ' dummy4 ' , dummy4Schema ) ;
var avatar = req . files . avatar . path . split ( path . sep ) . pop ( ) ; var password:==:req . fields . password ;
var path = require ( ' path ' ) ; var debug:==:require ( ' debug ' ) ( ' generate ' ) ;
var callbackQueue = require ( ' callbackQueue ' ) ; var pooledClass:==:require ( ' pooledClass ' ) ;
var el = this . el ; var interp:==:this . descriptor . interp ;
var rtcSessionDescription = window . mozrtcSessionDescription  |  |  window . rtcSessionDescription ; var rtcIceCandidate:==:window . mozrtcIceCandidate  |  |  window . rtcIceCandidate ;
var isCharacterDataNode = dom . isCharacterDataNode ; var getNodeIndex:==:dom . getNodeIndex ;
var anims = imports . anims ; var layout:==:imports . layout ;
var status = $ ( ' # status ' ) ; var okness:==:$ ( ' # okness ' ) ;
var indigo400 = exports . indigo400 = ' # 5c6bc0 ' ; var indigo500:==:exports . indigo500    ' # 3f51b5 ' ;
var navigator = window . navigator ; var arrayBuffer:==:window . arrayBuffer ;
var params = ob . params ; var validate:==:ob . validateUserForDataReadapi ;
var Ref = corePrimitives . ref ; var isCmd:==:corePrimitives . isCmd ;
var closed = ( options . closed = = = undefined ) ? true : options . closed ; var shape:==:options . shape ;
var height = result . height ; var html:==:result . html ;
var cyan900 = exports . cyan900 = ' # 006064 ' ; var cyanA100:==:exports . cyanA100    ' # 84ffff ' ;
var tileWidth = defaultValue ( options . tileWidth , 256 ) ; var tileHeight:==:defaultValue ( options . tileHeight , 256 ) ;
var startIndex = _ ref3 . startIndex ; var stopIndex:==:_ ref3 . stopIndex ;
var table = this . dom _ . createElement ( ' table ' ) ; var thead:==:this . dom _ . createElement ( ' thead ' ) ;
var scrollEle = this . _ scrollEle ; var parentElement:==:scrollEle . parentElement ;
var containerSize = _ ref4 . containerSize ; var offset:==:_ ref4 . offset ;
var index = legendItem . index ; var chart:==:this . chart ;
var b = ref . b ; var min:==:Math . min ( r , g , b ) ;
var viewContainer = parentView . viewContainers [ boundElementIndex ] ; var view:==:viewContainer . views [ index ] ;
var exactCandidates = rd . exactCandidates ; var conversionCandidates:==:rd . conversionCandidates ;
var edgeTypeOffset = this . _ edgeTypeOffset ; var edgeFieldsCount:==:this . _ edgeFieldsCount ;
var message = error . message ; var data:==:error . data ;
var rotationSkewx = options [ ' rotationSkewx ' ] ! = null ? options [ ' rotationSkewx ' ] : 0 ; var rotationSkewy:==:options [ ' rotationSkewy ' ] !   null ? options [ ' rotationSkewy ' ] : 0 ;
var _ left = bt . _ encodeReg ( _ left _ ) ; var _ right:==:bt . _ encodeReg ( _ right _ ) ;
var f8Button = require ( ' f8Button ' ) ; var react:==:require ( ' react ' ) ;
var createUnaryExpression = parseTreeFactory . createUnaryExpression ; var createVariableDeclarationList:==:parseTreeFactory . createVariableDeclarationList ;
var bones = this . mesh . skeleton . bones ; var bone:==:( params . boneIndex      -1 ) ? new three . bone ( ) : bones [ params . boneIndex ] ;
var format = require ( ' util ' ) . format ; var join:==:require ( ' path ' ) . join ;
var emitX = this . emitX ; var emitY:==:this . emitY ;
var head = $ $ ( ' tr ' , ' goog - date - picker - head ' ) [ 0 ] ; var month:==:$ $ ( ' button ' , ' goog - date - picker - month ' , head . firstChild ) [ 0 ] ;
var globe = options . globe ; var imageryProviderViewModels:==:defaultValue ( options . imageryProviderViewModels , [ ] ) ;
var button = document . createElement ( ' button ' ) ; var option:==:document . createElement ( ' option ' ) ;
var m = math . matrix ( [ [ 1,2,3 ] , [ 4,5,6 ] ] ) ; var t:==:transpose ( m ) ;
var key = ' key ' ; var comp1:==:content : ' some thing in comp1 ' ;
var event = e  |  |  window . event ; var target:==:event . target  |  |  event . srcElement ;
var attributeLocations = defaultValue ( options . attributeLocations , defaultValue . empty_object ) ; var interleave:==:defaultValue ( options . interleave , false ) ;
var btnPlay = document . getElementById ( ' btnPlay ' ) ; var btnStop:==:document . getElementById ( ' btnStop ' ) ;
var Y = Axis . Y ; var Z:==:Axis . Z ;
var breeze = breezeConfig . breeze ; var entityName:==:model . entityNames . session ;
var rtcIceCandidate = window . rtcIceCandidate  |  |  window . mozrtcIceCandidate ; var mediaStreamTrack:==:window . mediaStreamTrack ;
var rethrow = _ _ dependency6 _ _ . rethrow ; var defer:==:_ _ dependency7 _ _ . defer ;
var path   = require ( ' path ' ) ; var fs:==:require ( ' fs ' ) ;
var atan2 = Math . atan2 ; var cos:==:Math . cos ;
var util = require ( ' util ' ) ; var timers:==:require ( ' timers ' ) ;
var ry = this . attribute ( ' ry ' ) . Length . toPixels ( ' y ' ) ; var cx:==:this . attribute ( ' cx ' ) . length . toPixels ( ' x ' ) ;
var mkdirp = denodeify ( require ( ' mkdirp ' ) ) ; var rimraf:==:denodeify ( require ( ' rimraf ' ) ) ;
var coverage = imports [ ' test . coverage ' ] ; var basename:==:require ( ' path ' ) . basename ;
var textMeasurementService = powerbi . textMeasurementService ; var defaultLabelPrecision:==:visuals . dataLabelUtils . defaultLabelPrecision ;
var tilePosition = this . tilePosition ; var tileScale:==:this . tileScale ;
var parse = parseFunctions [ column . type ] ; var name:==:column . name ;
var w = ( this . maxWidth & & this . maxWidth < o . width ) ? this . maxWidth : o . width ; var x:==:w * text . h_offsets [ this . textAlign |  | 'left ' ] ;
var ev = event . originalEvent  |  |  event ; var timeStamp:==:ev . $ manualTimeStamp  |  |  ev . timeStamp  |  |  date . now ( ) ;
var dropDown = $ scope . dropDown ; var multiSelect:==:$ scope . multiSelect ;
var x = value1 . x - value2 . x ; var y:==:value1 . y - value2 . y ;
var editorState = require ( ' editorState ' ) ; var userAgent:==:require ( ' userAgent ' ) ;
var htmlElement = scope . wrappers . htmlElement ; var htmlShadowElement:==:scope . wrappers . htmlShadowElement ;
var a = document . createTextNode ( ' a ' ) ; var b:==:document . createTextNode ( ' b ' ) ;
var match = valueToMatch ( v , propVal , matches [ i ] , false , true ) ; var duplicate:==:duplicates [ ' _ ' + match . i d ] ;
var React = require ( ' React ' ) ; var reactNativeViewAttributes:==:require ( ' reactNativeViewAttributes ' ) ;
var frame = this . texture . frame ; var w:==:this . canvas . width ;
var el = this . el = this . field . getEl ( ) ; var f:==:this . field ;
var align = _ ref$align = = = undefined ? ' auto ' : _ ref$align ; var cellOffset:==:_ ref . cellOffset ;
var head = sel . head ; var anchor:==:sel . anchor ;
var dynCall_vf = Module [ ' dynCall_vf ' ] = asm [ ' dynCall_vf ' ] ; var dynCall_i:==:Module [ ' dynCall_i ' ]    asm [ ' dynCall_i ' ] ;
var browserify = require ( ' browserify ' ) ; var buffer:==:require ( ' vinyl - buffer ' ) ;
var Cmd = corePrimitives . cmd ; var dict:==:corePrimitives . dict ;
var path = require ( ' path ' ) ; var fs:==:require ( ' fs ' ) ;
var i d = goog . gears . fakeWorkerPool _ . idcounter_++ ; var name:==:iframeElement . name    iframeElement . i d    ' fake - worker- ' + i d ;
var h = this . hsv _ [ 0 ] ; var s:==:this . hsv _ [ 1 ] ;
var snapshotNodeList = scope . snapshotNodeList ; var unsafeUnwrap:==:scope . unsafeUnwrap ;
var positionRandomness = options . positionRandomness ! = = undefined ? options . positionRandomness : 0 ; var velocityRandomness:==:options . velocityRandomness !    undefined ? options . velocityRandomness : 0 ;
var hLayout1 = new horizontalLayout ( ' hLayout1 ' ) ; var hLayout2:==:new horizontalLayout ( ' hLayout2 ' ) ;
var tab = this . tabManager . focussedTab ; var editor:==:tab & & tab . editor ;
var boundary = source . boundary ; var x:==:boundary ? boundary . x : null ;
var isConditional = flow . isConditional ; var isHighLighted:==:flow . isHighLighted ;
var use = this . _ use ; var onUrlChanged:==:blocks . bind ( this . _ onUrlChanged , this ) ;
var syntheticuiEvent = require ( ' syntheticuiEvent ' ) ; var syntheticWheelEvent:==:require ( ' syntheticWheelEvent ' ) ;
var opts = _ _ alloyId17 . opts  |  |  ; var models:==:_ _ alloyId16 . models ;
var unitPos = cartesian3 . normalize ( center , unitPosScratch ) ; var eastVec:==:cartesian3 . cross ( cartesian3 . unit_z , center , eastVecScratch ) ;
var adapter = global . adapter ; var rejected:==:adapter . rejected ;
var level2 = db . model ( ' level_2 ' , level2Schema ) ; var level1:==:db . model ( ' level_1 ' , level1Schema ) ;
var svg = new window . Chartist . Svg ( ' svg ' ) ; var text:==:svg . elem ( ' text ' ) ;
var clone = require ( ' clone ' ) ; var fs:==:require ( ' co - fs - extra ' ) ;
var gulp = require ( ' gulp ' ) ; var rimraf:==:require ( ' rimraf ' ) . sync ;
var disconnected = ' disconnected ' ; var connected:==:' connected ' ;
var CATCH = ' CATCH ' ; var CLASS_DECLARATION:==:' CLASS_DECLARATION ' ;
var getContentStateFragment = require ( ' getContentStateFragment ' ) ; var insertFragmentIntoContentState:==:require ( ' insertFragmentIntoContentState ' ) ;
var drag = event . drag ; var drop:==:event . drop ;
var r = _ dereq _ ; var vertx:==:r ( ' vertx ' ) ;
var options = widget . prototype . options ; var prototype:==:Object . create ( htmlElement . prototype ) ;
var model = source . el . _ model  |  |  ; var scale:==:source . el . _ scale  |  |  ;
var pressTime = aggregator . _ pressTime ; var releaseTime:==:aggregator . _ releaseTime ;
var indices = this . indices ; var nameList:==:this . _ nameList ;
var reactNativeTagHandles = require ( ' reactNativeTagHandles ' ) ; var reactReconciler:==:require ( ' reactReconciler ' ) ;
var e = [ foo , null , undefined , bar ] . join ( ' - ' ) ; var f:==:[ foo , bar ] . join ( ' ' ) ;
var jshint = require ( ' gulp - jshint ' ) ; var insert:==:require ( ' gulp - insert ' ) ;
var node = drag . get ( ' node ' ) ; var helper:==:instance . get ( ' helper ' ) ;
var milliseconds = this . _ milliseconds ; var days:==:this . _ days ;
var basename = entry . basename ; var pathname:==:entry . pathname ;
var bufferSize = this . bufferSize ; var startBufferEvery:==:( this . startBufferEvery     null ) ? bufferSize : this . startBufferEvery ;
var dateTimeUnit = powerbi . dateTimeUnit ; var jsCommon:==:window . jsCommon ;
var IS_DEV = constants . IS_DEV ; var ROOT:==:constants . ROOT ;
var editorLayout = getComponent ( ' editorLayout ' , true ) ; var topbar:==:getComponent ( ' topbar ' , true ) ;
var m = createSimpleMembrane ( o ) ; var w:==:m . wrapper ;
var offsetX = parts [ offsetxIndex ] ; var match:==:offsetx . match ( cssSizePattern ) ;
var n = b . length ; var b2j:==:this . b2j    ;
var valueArray = _ ref . valueArray ; var optionRenderer:==:this . props . optionRenderer ;
var controllerEuler = this . controllerEuler ; var deltaControllerPosition:==:this . deltaControllerPosition ;
var watcher = imports . watcher ; var commands:==:imports . commands ;
var marginLeft = parseInt ( style . marginLeft , 10 ) ; var marginTop:==:parseInt ( style . marginTop , 10 ) ;
var cellCount = _ ref2 . cellCount ; var estimatedCellSize:==:_ ref2 . estimatedCellSize ;
var Types = keystone . Field . Types ; var sourceRelationship:==:new keystone . list ( ' sourceRelationship ' ) ;
var util = api . util ; var domPosition:==:dom . domPosition ;
var frame = frames [ i ] ; var sc:==:this . _ scale*frame . scale ;
var cos = math . cos ; var complex:==:math . complex ;
var a = c - this . deltaX ; var d:==:b - this . deltaY ;
var c = rejectSoon ( ' rejected - c ' , 10 ) ; var d:==:rejectSoon ( ' rejected - d ' , 20 ) ;
var STRING   = C . STRING   = 0xa ; var NUMBER:==:C . NUMBER     0xb ;
var instancePrefix = _ props . instancePrefix ; var optionIndex:==:_ props . optionIndex ;
var dirs = util . dirs ( ) ; var moment:==:require ( ' moment ' ) ;
var validatable = editable . validatable ; var destroy:==:validatable . destroy ;
var denodeify = require ( ' denodeify ' ) ; var rollup:==:require ( ' rollup ' ) ;
var containmentEdges = this . containmentEdges ; var nodes:==:this . nodes ;
var brown500 = exports . brown500 = ' # 795548 ' ; var brown600:==:exports . brown600    ' # 6d4c41 ' ;
var component = components . get ( utils . getParentComponent ( ) ) ; var setStateUsages:==:component & & component . setStateUsages  |  |  [ ] ;
var gltf = model . gltf ; var bufferView:==:gltf . bufferViews [ shader . bufferView ] ;
var EXPORT_DECLARATION = ' EXPORT_DECLARATION ' ; var EXPORT_DEFAULT:==:' EXPORT_DEFAULT ' ;
var oModel = window . oModel ; var createTables:==:window . createTables ;
var width = props . width ; var scrollLeft:==:state . scrollLeft ;
var switchStatement = traceur . syntax . trees . switchStatement ; var tokenType:==:traceur . syntax . tokenType ;
var char = text [ charNum ] ; var charWidth:==:charWidths [ charNum ] ;
var merge = require ( ' merge - stream ' ) ; var zip:==:require ( ' gulp - zip ' ) ;
var operand = this . transformAny ( left . operand ) ; var memberExpression:==:this . transformAny ( left . memberExpression ) ;
var textOperation = firepad . textOperation ; var textOp:==:firepad . textOp ;
var scene = this . _ scene ; var mode:==:scene . mode ;
var pathName = options . pathName  |  |  relation . options . path  |  |  relationName ; var paramName:==:options . paramName  |  |  ' nk ' ;
var sorter = $ ( this ) . data ( ' sorter ' ) ; var t:==:' th - sort - up ' ;
var a = df . appendChild ( document . createElement ( ' a ' ) ) ; var b:==:df . appendChild ( document . createElement ( ' b ' ) ) ;
var isInteger = logic . _ isInteger ; var isFunction:==:logic . _ isFunction ;
var n2 = new redNode ( i d : ' n2',type : ' abc ' ) ; var n3:==:new redNode ( i d : ' n3',type : ' abc ' ) ;
var div = document . createElement ( ' div ' ) ; var text:==:div . appendChild ( document . createTextNode ( ' text ' ) ) ;
var binaryOperator = traceur . syntax . trees . binaryOperator ; var bindThisParameter:==:traceur . syntax . trees . bindThisParameter ;
var model = that . reader . model ; var idField:==:model ? model . idField : ' i d ' ;
var axisType = powerbi . visuals . axisType ; var getInvalidValueWarnings:==:powerbi . visuals . getInvalidValueWarnings ;
var SHOW_INDEX = Polyline . SHOW_INDEX ; var WIDTH_INDEX:==:Polyline . WIDTH_INDEX ;
var col = grid . columns [ 1 ] ; var row:==:grid . rows [ 2 ] ;
var _ i64Subtract = module [ ' _ i64Subtract ' ] = asm [ ' _ i64Subtract ' ] ; var _ free:==:module [ ' _ free ' ]    asm [ ' _ free ' ] ;
var vm = this . vm ; var $ render:==:vm . $ render ;
var attributes = geometry . attributes ; var position:==:attributes . position ;
var nodeName = options & & options . nodeName  |  |  ' span ' ; var expandClosestSibling:==:! ! ( options & & options . expandClosestSibling ) ;
var node = action . node ; var parent:==:action . parent !    null ? action . parent : null ;
var glob   = require ( ' glob ' ) ; var path:==:require ( ' path ' ) ;
var models = _ _ alloyId16 . models ; var len:==:models . length ;
var assert = require ( ' assert ' ) ; var debug:==:require ( ' debug ' ) ( ' loopback : change ' ) ;
var ctor_0 = Realm . shared . ctor_0 ;             \var promise_ctor_0:==:Realm . shared . promise_ctor_0 ;         \
var naturalWidth = precomputedDimensions ? precomputedDimensions . naturalWidth : imageElement . naturalWidth ; var naturalHeight:==:precomputedDimensions ? precomputedDimensions . naturalHeight : imageElement . naturalHeight ;
var grey900 = exports . grey900 = ' # 212121 ' ; var black:==:exports . black    ' # 000000 ' ;
var i d = ids [ i ] ; var layer:==:this . _ layers [ i d ] ;
var coord = this . coord . build ( builder , this . project ? ' v4 ' : ' v2 ' ) ; var bias:==:this . bias ? this . bias . build ( builder , ' fv1 ' ) : undefined ;
var Post = hexo . model ( ' Post ' ) ; var Tag:==:hexo . model ( ' Tag ' ) ;
var debug = require ( ' debug ' ) ( ' calypso : me : form - base ' ) ; var notices:==:require ( ' notices ' ) ;
var renderAll = this . opts . renderAll ; var renderPhoto:==:this . opts . renderPhoto ;
var net = require ( ' net ' ) ; var spawn:==:require ( ' child_process ' ) . spawn ;
var CASE_CLAUSE = ' CASE_CLAUSE ' ; var CATCH:==:' CATCH ' ;
var fs = require ( ' fs ' ) ; var stream:==:require ( ' stream ' ) ;
var reactComponentWithPureRenderMixin = require ( ' reactComponentWithPureRenderMixin ' ) ; var reactWheelHandler:==:require ( ' reactWheelHandler ' ) ;
var headers = options . headers ; var overrideMimeType:==:options . overrideMimeType ;
var radiusY = options . radiusY  |  |  radius ; var radiusZ:==:options . radiusZ  |  |  radius ;
var commands = imports . commands ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var extendDeep = extendModule . extendDeep ; var extendDeepAll:==:extendModule . extendDeepAll ;
var el = $ ( opts . el  |  |  ' . fc - event : first ' ) ; var row:==:opts . row  |  |  0 ;
var bufferView = bufferViews [ accessor . bufferView ] ; var buffer:==:buffers [ bufferView . buffer ] ;
var stream = require ( ' event - stream ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var div = document . createElement ( ' div ' ) ; var table:==:document . createElement ( ' table ' ) ;
var signs = this . signs ; var gcp:==:this . gcp ;
var c = fulfillThenableSoon ( ' c ' , 10 ) ; var d:==:fulfillThenableSoon ( ' d ' , 20 ) ;
var https = require ( ' https ' ) ; var semver:==:require ( ' semver ' ) ;
var extent = this . _ extent ; var min:==:Math . min ( extent [ 0 ] , extent [ 1 ] ) ;
var REST_PARAMETER = ' REST_PARAMETER ' ; var RETURN_STATEMENT:==:' RETURN_STATEMENT ' ;
var eventproxy = require ( ' eventproxy ' ) ; var validator:==:require ( ' validator ' ) ;
var key = operation . key ; var value:==:operation . value ;
var createArgumentList = parseTreeFactory . createArgumentList ; var createAssignStateStatement:==:parseTreeFactory . createAssignStateStatement ;
var len = imgData . length ; var palette:==:this . _ palette ;
var principal = serviceWorkersInfo . principal ; var scope:==:serviceWorkersInfo . scope ;
var recid = parent . prev ( ) . attr ( ' recid ' ) ; var grid:==:parent . parents ( ' . w2ui - grid ' ) . attr ( ' name ' ) ;
var x = this . x - center . x ; var y:==:this . y - center . y ;
var input = that . input ; var active:==:activeElement ( ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var fs:==:require ( ' fs ' ) ;
var el = this . el ; var hasPositionalTracking:==:this . hasPositionalTracking  |  |  checkHasPositionalTracking ( ) ;
var dateRange = goog . require ( ' goog . date . dateRange ' ) ; var dateTime:==:goog . require ( ' goog . date . dateTime ' ) ;
var node = this . node ; var props:==:node . props ;
var exportClause = this . transformAny ( tree . exportClause ) ; var moduleSpecifier:==:this . transformAny ( tree . moduleSpecifier ) ;
var uint32Array = this . uint32Array ; var tint:==:( target . tint > > 16 ) + ( target . tint & 0xff00 ) + ( ( target . tint & 0xff ) < < 16 ) + ( target . _ _ webglRenderAlpha * 255 < < 24 ) ;
var attributes = this . attributes ; var groups:==:this . groups ;
var scene = controller . _ scene ; var camera:==:scene . camera ;
var shapes = this . _ shapes ; var indicator:==:shapes . indicator ;
var headers = options . headers  |  |  ; var body:==:options . body  |  |  ' ' ;
var undoManager = imports . undoManager ; var reportError:==:imports . error_handler . reportError ;
var dominatedNodes = this . _ dominatedNodes ; var nodeFieldCount:==:this . _ nodeFieldCount ;
var init = docSet . getByLongname ( ' person#initialize ' ) ; var name:==:docSet . getByLongname ( ' person#name ' ) ;
var type = data . type  |  |  '' ; var folderType:==:data . folderType  |  |  ' inbox ' ;
var vm = require ( ' vm ' ) ; var path:==:require ( ' path ' ) ;
var rowClassName = _ props . rowClassName ; var rowStyle:==:_ props . rowStyle ;
var getHoverListener = t . getHoverListener ; var rangeToSegments:==:t . rangeToSegments ;
var subcategories = this . data _ . subcategories [ category ] ; var charList:==:this . data _ . charList [ category ] ;
var l = p . length - 2 ; var tp:==:PolyK . _ tp ;
var originalSize = spriteFrame . _ originalSize ; var rect:==:spriteFrame . _ rect ;
var max = Math . max ( r , g , b ) ; var min:==:Math . min ( r , g , b ) ;
var w = w  |  |  window ; var document:==:w . document ;
var comprehensionTransformer = traceur . codegeneration . comprehensionTransformer ; var parseTree:==:traceur . syntax . trees . parseTree ;
var shape = this . shape ; var stencil:==:this . stencil ;
var titleStyle = _ props . titleStyle ; var iconStyleLeft:==:_ props . iconStyleLeft ;
var isEventResizable = t . isEventResizable ; var reportEventElement:==:t . reportEventElement ;
var apply = authorAttributes . apply ; var traverse:==:authorAttributes . traverse ;
var expect = require ( ' chai ' ) . expect ; var u:==:fis . util ;
var width = videoBlockPlugin . width ; var height:==:videoBlockPlugin . height ;
var filename = options . filename  |  |  ' xmind . xmind ' ; var form:==:document . createElement ( ' form ' ) ;
var commands = imports . commands ; var coverage:==:imports [ ' test . coverage ' ] ;
var _ strcpy = Module [ ' _ strcpy ' ] = asm [ ' _ strcpy ' ] ; var runPostSets:==:module [ ' runPostSets ' ]    asm [ ' runPostSets ' ] ;
var col = grid . columns [ 2 ] ; var row:==:grid . rows [ 0 ] ;
var Plugin = imports . Plugin ; var Dialog:==:imports . Dialog ;
var deltaX = e . deltaX ; var deltaY:==:-1 * e . deltaY ;
var protocol = this . protocol  |  |  '' ; var pathname:==:this . pathname  |  |  '' ;
var listViewDataSource = require ( ' listViewDataSource ' ) ; var platform:==:require ( ' platform ' ) ;
var semiMajorAxis = options . semiMajorAxis ; var rotation:==:options . rotation ;
var top = nodePos . top ; var height:==:nodePos . height ;
var readline = serialport . parsers . readline ; var optimist:==:require ( ' optimist ' ) ;
var checkOpen = this . _ checkOpen ; var checkClose:==:this . _ checkClose ;
var glob = require ( ' glob ' ) ; var path:==:require ( ' path ' ) ;
var missingDataException = sharedUtil . missingDataException ; var createPromiseCapability:==:sharedUtil . createPromiseCapability ;
var el = this . el ; var sinon:==:this . sinon ;
var appearActiveClass = data . appearActiveClass ; var beforeEnter:==:data . beforeEnter ;
var msgType = msg . msgType ; var msgData:==:msg . msgData ;
var child_process = require ( ' child_process ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var f = function ( x , y ) return x * y ; var m:==:functionUtils . memoize ( f ) ;
var afterAppear = data . afterAppear ; var appearCancelled:==:data . appearCancelled ;
var Range = math . type . Range ; var Matrix:==:math . type . Matrix ;
var t = self . time ( ) ; var l:==:( gp ) ? t + gp : self . lasttime ;
var debug   = require ( ' debug ' ) ( ' pm2 : satan ' ) ; var util:==:require ( ' util ' ) ;
var scrollTop = window . pageyOffset  |  |  el . scrollTop ; var scrollLeft:==:window . pagexOffset  |  |  el . scrollLeft ;
var stream = this . _ font . stream ; var pos:==:stream . pos ;
var reactNativeTextComponent = require ( ' reactNativeTextComponent ' ) ; var reactSimpleEmptyComponent:==:require ( ' reactSimpleEmptyComponent ' ) ;
var itemBox = that . _ view . items . itemBoxFrom ( item ) ; var selected:==:item . getAttribute ( ' aria - selected ' )      ' true ' ;
var reactNativePropRegistry = require ( ' reactNativePropRegistry ' ) ; var reactNativeStyleAttributes:==:require ( ' reactNativeStyleAttributes ' ) ;
var stringToBytes = sharedUtil . stringToBytes ; var utf8StringToString:==:sharedUtil . utf8StringToString ;
var top = rect . top ; var bottom:==:window . innerHeight - rect . bottom ;
var layout = imports . layout ; var tabinteraction:==:imports . tabinteraction ;
var y = extractNumber ( props . y , 0 ) ; var w:==:extractNumber ( props . width , 0 ) ;
var clusterState = data . clusterState ; var status:==:data . status ;
var tab   = req . query . tab  |  |  ' all ' ; var limit:==:Number ( req . query . limit )  |  |  config . list_topic_count ;
var cull = renderState . cull ; var enabled:==:cull . enabled ;
var gl = ( tempcanvas . getContext ( ' webgl ' )  |  |  tempcanvas . getContext ( ' experimental - webgl ' ) ) ; var ext:==:gl . getExtension ( extension ) ;
var titleColor = _ props . titleColor ; var titleStyle:==:_ props . titleStyle ;
var alt = ev . altKey ; var shift:==:ev . shiftKey ;
var state = this . state _ ; var strokeStyle:==:state . strokeStyle ;
var group = groups [ i ] ; var start:==:group . start ;
var buf = new uint8Array ( bufsize ) ; var level:==:options ? options . level : z_default_compression ;
var b = this . _ rgba [ 2 ] ; var max:==:Math . max ( r , g , b ) ;
var assert = require ( ' assert - plus ' ) ; var crypto:==:require ( ' crypto ' ) ;
var custom = rectangle . custom  |  |  ; var model:==:rectangle . _ model ;
var path = require ( ' path ' ) ; var cloudinaryImageMultipleFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' cloudinaryImageMultipleFieldTestObject ' ) ) ;
var objects = this . objects ; var listeners:==:this . animState . listeners ;
var KEY   = C . KEY   = 0x72 ; var OBJECT:==:C . OBJECT    0x81 ;
var blogPost = require ( ' blogPost ' ) ; var blogPostExcerpt:==:require ( ' blogPostExcerpt ' ) ;
var domify = require ( ' domify ' ) ; var each:==:require ( ' each ' ) ;
var memberExpression = traceur . syntax . trees . memberExpression ; var memberLookupExpression:==:traceur . syntax . trees . memberLookupExpression ;
var f8Header = require ( ' f8Header ' ) ; var f8SegmentedControl:==:require ( ' f8SegmentedControl ' ) ;
var value = fixture . value ; var expected:==:fixture . expected ;
var jshint = require ( ' gulp - jshint ' ) ; var jasmine:==:require ( ' gulp - jasmine ' ) ;
var c = cache [ trackId ] ; var arr:==:c . arr  |  |  ( c . arr    [ ] ) ;
var supertest = require ( ' supertest ' ) ; var Role:==:loopback . Role ;
var constraint = constraints [ i ] ; var a:==:constraint . a , b    constraint . b ;
var log4js = require ( ' log4js ' ) ; var db:==:new ueberDB . database ( settings . dbType , settings . dbSettings , null , log4js . getLogger ( ' ueberdb ' ) ) ;
var min = boundingBox . minimum ; var max:==:boundingBox . maximum ;
var fs = require ( ' fs ' ) ; var tls:==:require ( ' tls ' ) ;
var a = document . createElement ( ' a ' ) ; var b:==:document . createElement ( ' b ' ) ;
var xdomain = opts . xdomain ; var xscheme:==:opts . xscheme ;
var metrics = imports . metrics ; var async:==:require ( ' async ' ) ;
var translate = window . Nightscout . client . translate ; var zone:==:window . Nightscout . client . sbx . data . profile . getTimezone ( ) ;
var copy   = angular . copy ; var extend:==:angular . extend ;
var initializeHooks = _ _ initializeHooks ( sails ) ; var checkGruntConfig:==:_ _ checkGruntConfig ( sails ) ;
var rcon = this . rcon ; var invSubMix:==:this . invSubMix ;
var month = parseInt ( cal . find ( ' . monthselect ' ) . val ( ) , 10 ) ; var year:==:cal . find ( ' . yearselect ' ) . val ( ) ;
var yellowA700 = exports . yellowA700 = ' # ffd600 ' ; var amber50:==:exports . amber50    ' # fff8e1 ' ;
var file = source . file ; var type:==:source . type ;
var impulse = this . impulse ; var J:==:this . J ;
var ref = this . props . node . get ( ' ref ' ) ; var state:==:this . props . node . get ( ' state ' ) ;
var scrollViewManager = require ( ' nativeModules ' ) ; var getInstanceFromNode:==:require ( ' reactNativeComponentTree ' ) ;
var t = this . top ; var b:==:this . bottom ;
var work = job . _ work ; var context:==:job . _ context ;
var bail = require ( ' bail ' ) ; var vfile:==:require ( ' vfile ' ) ;
var spriteMaterial = game . physics . p2 . createMaterial ( ' spriteMaterial ' ) ; var worldMaterial:==:game . physics . p2 . createMaterial ( ' worldMaterial ' ) ;
var itemWidth = legendModel . get ( ' itemWidth ' ) ; var itemHeight:==:legendModel . get ( ' itemHeight ' ) ;
var oldItem = event . detail . oldItem ; var newItem:==:event . detail . newItem ;
var join = path . join ; var resolve:==:path . resolve ;
var rangeError = errors . rangeError ; var typeError:==:errors . typeError ;
var instanceCount = item . instanceCount ; var inclusiveRenderDuration:==:item . inclusiveRenderDuration ;
var node = this . results [ this . resultIndex ] . node ; var elem:==:this . results [ this . resultIndex ] . elem ;
var callback = options . callback  |  |  function ( ) ; var noSettingsTriggerCallback:==:options . noSettingsTriggerCallback  |  |  false ;
var queue = source . queue ; var scheduler:==:state . scheduler ;
var flipX = camera . flipX ? 1 : -1 ; var flipY:==:camera . flipY ? 1 : -1 ;
var prefix = kTransforms [ transform ] . prefix ; var suffix:==:kTransforms [ transform ] . suffix ;
var Interpolation = require ( ' Interpolation ' ) ; var nativeAnimatedHelper:==:require ( ' nativeAnimatedHelper ' ) ;
var firstInnerQuadrangle = options . firstInnerQuadrangle ; var lastInnerQuadrangle:==:options . lastInnerQuadrangle ;
var x = possibleCoordinates . x ; var y:==:possibleCoordinates . y ;
var style = _ props3 . style ; var verticalOverscanSize:==:_ props3 . verticalOverscanSize ;
var React = require ( ' React ' ) ; var headerLinks:==:require ( ' headerLinks ' ) ;
var children = _ props . children ; var circle:==:_ props . circle ;
var cm    = this . cm ; var editor:==:this . editor ;
var Schema = mongoose . Schema ; var objectId:==:schema . objectId ;
var f = false ; var t:==:true ;
var type = ref . type ; var payload:==:ref . payload ;
var scale = target . scale  |  |  [ 1 , 1 ] ; var rotation:==:target . rotation  |  |  0 ;
var entity = geometryUpdater . _ entity ; var rectangle:==:entity . rectangle ;
var suite = this . suite ; var options:==:this . options ;
var order = ( options & & options . order )  |  |  '' ; var query:==:( options & & options . query )  |  |  '' ;
var cell = cellInfo . cell ; var contents:==:$ ( tableCell . getContainer ( cell ) ) . contents ( ) ;
var jsonalyzer = imports [ ' jsonalyzer ' ] ; var preferences:==:imports . preferences ;
var qName = a . qName ; var value:==:a . value ;
var w = shape . width * 2 ; var h:==:shape . height * 2 ;
var b = newObjectIt ( bv ) ; var c:==:newObjectIt ( bu ) ;
var core = breeze . core ; var complexAspect:==:breeze . complexAspect ;
var user = this . analytics . user ( ) ; var events:==:this . events ( track . event ( ) ) ;
var cellClassName = _ ref . cellClassName ; var cellRenderer:==:_ ref . cellRenderer ;
var FOR_IN_STATEMENT = ' FOR_IN_STATEMENT ' ; var FOR_OF_STATEMENT:==:' FOR_OF_STATEMENT ' ;
var defineProperty = object . defineProperty ; var hasOwnProperty:==:object . hasOwnProperty ;
var name = $ interpolate ( attrs . uiView  |  |  attrs . name  |  |  '' ) ( scope ) ; var inherited:==:element . inheritedData ( ' $ uiView ' ) ;
var el = helpers . entityFactory ( ) ; var torusEl:==:this . torusEl    document . createElement ( ' a - torus ' ) ;
var assert = sharedUtil . assert ; var info:==:sharedUtil . info ;
var doc = win . document ; var undefined:==:win . undefined ;
var invert = options . invert ; var end:==:options . end ;
var name = event . detail . name ; var connected:==:event . detail . connected ;
var limit = this . _ limit ; var values:==:this . _ values ;
var visualMapModel = this . visualMapModel ; var dataInterval:==:this . _ dataInterval    visualMapModel . getSelected ( ) ;
var jsv = require ( ' jsverify ' ) ; var assert:==:require ( ' assert ' ) ;
var createAssignmentExpression = parseTreeFactory . createAssignmentExpression ; var createAssignmentStatement:==:parseTreeFactory . createAssignmentStatement ;
var tab = tabs . focussedTab ; var ace:==:tab & & tab . editor . ace ;
var state = this . model . get ( ' state ' ) ; var streamInfo:==:this . model . get ( ' streamInfo ' ) ;
var c = Math . ceil ( PI ) ; var f:==:Math . floor ( PI ) ;
var forEach = array . prototype . forEach . call . bind ( array . prototype . forEach ) ; var filter:==:array . prototype . filter . call . bind ( array . prototype . filter ) ;
var backbone = require ( ' backbone ' ) ; var test:==:require ( ' tap ' ) . test ;
var name = uniform . name ; var type:==:uniform . info . type ;
var pos = stream . pos ; var end:==:stream . end ;
var temp = require ( ' temp ' ) . track ( ) ; var exec:==:require ( ' child_process ' ) . exec ;
var path = paths [ 0 ] ; var name:==:Path . basename ( path ) ;
var BLOCK = ' BLOCK ' ; var BREAK_STATEMENT:==:' BREAK_STATEMENT ' ;
var cloneNode = scope . cloneNode ; var defineWrapGetter:==:scope . defineWrapGetter ;
var errorFont = coreFonts . errorFont ; var fontFlags:==:coreFonts . fontFlags ;
var COLOR_INDEX = Billboard . COLOR_INDEX ; var ROTATION_INDEX:==:Billboard . ROTATION_INDEX ;
var valueFormatter = powerbi . visuals . valueFormatter ; var colorHelper:==:powerbi . visuals . colorHelper ;
var decorators = descriptor . decorators ; var key:==:descriptor . key ;
var orig_nbformat = nbmodel . metadata . orig_nbformat ; var orig_nbformat_minor:==:nbmodel . metadata . orig_nbformat_minor ;
var w = m . wrapper ; var f:==:w . f ;
var exceptMultiline = this . _ exceptMultiline ; var exceptAligned:==:this . _ exceptAligned ;
var pos = monthLabel . get ( ' position ' ) ; var align:==:monthLabel . get ( ' align ' ) ;
var source = require ( ' function - source ' ) ; var proc:==:require ( ' child_process ' ) ;
var w = Titanium . UI . createWindow ( options ) ; var a:==:titanium . ui . createAnimation ( ) ;
var func = _ react$PropTypes . func ; var oneOfType:==:_ react$PropTypes . oneOfType ;
var m = SIMD . float32x4 . fromInt8x16Bits ( simd . int8x16 ( 0x3f800000 , 0x40000000 , 0x40400000 , 0x40800000 ) ) ; var n:==:simd . int8x16 . fromFloat32x4Bits ( m ) ;
var Range = math . type . Range ; var index:==:math . index ;
var minimumAlpha = defaultValue ( options . minimumAlpha , 0 ) ; var maximumAlpha:==:defaultValue ( options . maximumAlpha , 1 . 0 ) ;
var instance = this . h ( ' instance ' ) ; var color:==:this . h ( ' color ' ) ;
var text = $ el . text ( ) ; var slug:==:Flatdoc . slugify ( text ) ;
var interactionManager = require ( ' interactionManager ' ) ; var interpolation:==:require ( ' interpolation ' ) ;
var edgeTypeOffset = this . _ edgeTypeOffset ; var nodeCount:==:this . nodeCount ;
var tabId = details . tabId ; var url:==:details . url ;
var warn = sharedUtil . warn ; var dict:==:corePrimitives . dict ;
var amberA700 = exports . amberA700 = ' # ffab00 ' ; var orange50:==:exports . orange50    ' # fff3e0 ' ;
var path = require ( ' path ' ) ; var axios:==:require ( ' axios ' ) ;
var push = array . push ; var slice:==:array . slice ;
var provider = providerInfo [ i ] ; var copyrightString:==:provider . copyrightString ;
var streamify = require ( ' gulp - streamify ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var head = window . document . getElementsByTagName ( ' head ' ) [ 0 ] ; var s:==:window . document . createElement ( ' style ' ) ;
var STATUS_RELOADING   = exports . STATUS_RELOADING   = 5 ; var STATUS_RESTARTING:==:exports . STATUS_RESTARTING     6 ;
var di = require ( ' asyncdi ' ) ; var marked:==:require ( ' marked ' ) ;
var account = this . account = Factory ( ' account ' , accOverrides ) ; var calendar:==:this . calendar    factory ( ' calendar ' , calOverrides ) ;
var dynCall_vii = Module [ ' dynCall_vii ' ] = asm [ ' dynCall_vii ' ] ; var dynCall_ii:==:Module [ ' dynCall_ii ' ]    asm [ ' dynCall_ii ' ] ;
var success = options . success ; var attributes:==:this . attributes ;
var hash = location . hash  |  |  '' ; var state:==:location . state  |  |  null ;
var includeSpinner = this . includeSpinner ; var includeBar:==:this . includeBar ;
var tempPlane1 = this . tempPlane1 ; var tempPlane2:==:this . tempPlane2 ;
var filename = ( f instanceof window . File ) ? f . name : f . filename ; var dest:==:new VFS . File ( Utils . pathJoin ( args . destination , filename ) ) ;
var models = _ _ alloyId46 . models ; var len:==:models . length ;
var cx = parseFloat ( magnetElem . getAttributens ( oryx . config . namespace_oryx , ' cx ' ) ) ; var cy:==:parseFloat ( magnetElem . getAttributens ( oryx . config . namespace_oryx , ' cy ' ) ) ;
var chalk = require ( ' chalk ' ) ; var flaverr:==:require ( ' flaverr ' ) ;
var string = util . string ; var isString:==:string . isString ;
var cy = circle . node . getAttribute ( ' cy ' ) ; var r:==:circle . node . getAttribute ( ' r ' ) ;
var tab = object . tab . n ; var def:==:object . def ;
var position = Cartesian3 . clone ( this . positionWC , setTransformPosition ) ; var up:==:cartesian3 . clone ( this . upwc , setTransformUp ) ;
var group = _ ref8 . group ; var force:==:_ ref8 . force ;
var yargs = require ( ' yargs ' ) ; var argv:==:yargs . argv ;
var data = options . data ; var headers:==:options . headers ;
var orangeA100 = exports . orangeA100 = ' # ffd180 ' ; var orangeA200:==:exports . orangeA200    ' # ffab40 ' ;
var editorUi = this . editorUi ; var graph:==:editorUi . editor . graph ;
var maximumIndex = options . maximumIndex ; var cacheSize:==:defaultValue ( options . cacheSize , 24 ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var mqtt:==:require ( ' mqtt ' ) ;
var segment = segments [ i ] ; var element:==:segment . element ;
var end_with_newline = ( options . end_with_newline = = = undefined ) ? false : options . end_with_newline ; var newline_between_rules:==:( options . newline_between_rules      undefined ) ? true : options . newline_between_rules ;
var texture = textureAtlas . getTexture ( fullName ) ; var region:==:texture . region ;
var tap = require ( ' gulp - tap ' ) ; var fs:==:require ( ' fs ' ) ;
var height = options . height  |  |  options . size  |  |  1 ; var sideOrientation:==:( options . sideOrientation      0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ;
var xml2js = require ( ' xml2js ' ) ; var parseString:==:xml2js . parseString ;
var version = options . version ; var run:==:s . run ( ' show ' , name + ' @ ' + version ) ;
var w = target_width * scale ; var h:==:target_height * scale ;
var semver = require ( ' semver ' ) ; var session:==:require ( ' express - session ' ) ;
var name = attr . name ; var value:==:attr . value ;
var counter_rates = metrics . counter_rates ; var timer_data:==:metrics . timer_data ;
var axe2 = obj . axe2  |  |  [ 1 , 0 , 0 ] ; var pos1:==:obj . pos1  |  |  [ 0 , 0 , 0 ] ;
var d = this . _ disabled ; var h:==:this . _ state . minimized ;
var Readable = require ( ' stream ' ) . Readable ; var util:==:require ( ' util ' ) ;
var session = renderer . session ; var size:==:renderer . $ size ;
var scrollCtrl = infiniteScrollCtrl . scrollCtrl = ctrls [ 0 ] ; var jsScrolling:==:infiniteScrollCtrl . jsScrolling    ! ! scrollCtrl ;
var setTimeout = window . setTimeout . bind ( window ) ; var clearTimeout:==:window . clearTimeout . bind ( window ) ;
var rename = require ( ' gulp - rename ' ) ; var tools:==:require ( ' aurelia - tools ' ) ;
var start = leaf . get ( ' start ' ) ; var end:==:leaf . get ( ' end ' ) ;
var HOUR_MILLIS = exports . HOUR_MILLIS = 60 * 60 * 1000 ; var DAY_MILLIS:==:exports . DAY_MILLIS    24 * 60 * 60 * 1000 ;
var type = param . type ; var format:==:param . format ;
var View = require ( ' View ' ) ; var Text:==:require ( ' Text ' ) ;
var x = options . x ; var y:==:options . y ;
var vertSizef = this . _ vertSizef ; var offsetpf:==:this . _ offsetpf ;
var async = require ( ' async ' ) ; var crypto:==:require ( ' crypto ' ) ;
var sprite = this . sprite ; var spriteAtlas:==:this . spriteAtlas ;
var b = new stepExpr ( ' attribute ' , a ) ; var c:==:new locationExpr ( ) ;
var v = this . value ; var t:==:( this . type     ' auto ' ) ? util . type ( v ) : this . type ;
var error = details . error ; var status:==:details . status ;
var def = $ q . defer ( ) ; var ref:==:this . $ ref ( ) . ref . push ( ) ;
var nodeFieldCount = this . _ nodeFieldCount ; var containmentEdges:==:this . containmentEdges ;
var cookieJar = require ( ' cookiejar ' ) . cookieJar ; var cookieAccess:==:require ( ' cookiejar ' ) . cookieAccessInfo ;
var Pattern = util . Pattern ; var join:==:pathFn . join ;
var $ button = event . data . $ button ; var button:==:$ button . data ( ' button ' ) ;
var xTable = this . _ xTable ; var yTable:==:this . _ yTable ;
var path = require ( ' canonical - path ' ) ; var foreach:==:require ( ' gulp - foreach ' ) ;
var loops = isLoop ? cc . repeat_forever : ( ( isNan ( loopsTemp ) ) ? 1 : loopsTemp ) ; var restoreOriginalFrame:==:( animationDict [ ' restoreOriginalFrame ' ] & & animationDict [ ' restoreOriginalFrame ' ]     true ) ? true : false ;
var stride = structure . stride ; var elementsPerHeight:==:structure . elementsPerHeight ;
var distance = m . distance ; var fov:==:m . fov ;
var date = AWS . util . date . getDate ( ) ; var signerClass:==:service . getSignerClass ( req ) ;
var normalized = this . normalizedCoords ; var gvar:==:this . font . gvar ;
var offsetPF = this . _ offsetPF ; var baseData:==:this . _ baseData ;
var safeApply = leafletHelpers . safeApply ; var helpers:==:leafletHelpers ;
var extend = _ Vue$util . extend ; var isArray:==:_ vue$util . isArray ;
var semver = require ( ' semver ' ) ; var vm:==:require ( ' vm ' ) ;
var Rule = openLayers . rule ; var filter:==:openLayers . filter ;
var React = require ( ' React ' ) ; var View:==:require ( ' View ' ) ;
var O_SYMLINK = constants . O_SYMLINK  |  |  0 ; var O_SYNC:==:constants . O_SYNC  |  |  0 ;
var onload = require ( ' script - onload ' ) ; var tick:==:require ( ' next - tick ' ) ;
var children = _ props . children ; var columnKey:==:_ props . columnKey ;
var position = camera . position ; var p:==:Cartesian3 . normalize ( position , rotateVertScratchp ) ;
var className = props . className ; var children:==:props . children ;
var w = el . width ( ) , h = el . height ( ) ; var r:==:raphael ( el [ 0 ] , w , h ) ;
var reactComponentWithPureRenderMixin = require ( ' reactComponentWithPureRenderMixin ' ) ; var clamp:==:require ( ' clamp ' ) ;
var atMost = verification . atMost ; var never:==:verification . never ;
var list = that . list ; var height:==:that . options . height ;
var moduleVisitor = traceur . codegeneration . module . moduleVisitor ; var moduleSymbol:==:traceur . semantics . symbols . moduleSymbol ;
var attributes = technique . attributes ; var uniforms:==:technique . uniforms ;
var nodeName = item . nodeName . toUpperCase ( ) ; var documenturi:==:item . data . documenturi ;
var hoverElements = this . _ hoverElements ; var len:==:hoverElements . length ;
var children = _ props . children ; var style:==:_ props . style ;
var assertRange = caretAsserts . assertRange ; var createRange:==:caretAsserts . createRange ;
var getComponentProperty = entity . getComponentProperty ; var setComponentProperty:==:entity . setComponentProperty ;
var event = events [ 0 ] ; var text:==:event . text ( ) ;
var event = track . event ( ) ; var user:==:this . analytics . user ( ) ;
var files = ( evt . dataTransfer  |  |  evt . target ) . files ; var file:==:_ . first ( files ) ;
var parseTree = traceur . syntax . trees . parseTree ; var tokenType:==:traceur . syntax . tokenType ;
var foo = sce . trustAsCss ( ' foo ' ) ; var bar:==:sce . trustAsCss ( ' bar ' ) ;
var itemSize = visualMapModel . itemSize ; var orient:==:this . _ orient ;
var Surface = reactCanvas . surface ; var group:==:reactCanvas . group ;
var extend = _ tetherBase$Utils . extend ; var addClass:==:_ tetherBase$Utils . addClass ;
var key = e . keyCode ; var altKey:==:e . altKey ;
var unusedIndexes = this . _ unusedIndexes ; var length:==:unusedIndexes . length ;
var createThisExpression = parseTreeFactory . createThisExpression ; var createVariableDeclarationList:==:parseTreeFactory . createVariableDeclarationList ;
var prefix = self . prefix ; var cookie:==:self . cookie ;
var w = texture . width ; var h:==:texture . height ;
var auth = imports . auth ; var api:==:imports . api ;
var post = env . store . peekRecord ( ' post ' , 1 ) ; var comment:==:env . store . peekRecord ( ' comment ' , 2 ) ;
var chalk = require ( ' chalk ' ) ; var portfinder:==:require ( ' portfinder ' ) ;
var r = Math . max ( this . right , region . right ) ; var b:==:Math . max ( this . bottom , region . bottom ) ;
var tbody = dom . createElement ( ' tbody ' ) ; var tfoot:==:dom . createElement ( ' tfoot ' ) ;
var entity = c . entity ; var data:==:c . data ;
var s = String . format . apply ( String , Array . prototype . slice . call ( arguments , 1 ) ) ; var m:==:Ext . domHelper . append ( msgCt , html : createBox ( title , s ) , true ) ;
var maxWidth = oDimensions . maxWidth ; var maxHeight:==:oDimensions . maxHeight ;
var concat = require ( ' gulp - concat ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var linearMap = _ _ webpack_require _ _ ( 7 ) . linearMap ; var each:==:zrUtil . each ;
var left = this . $ el . offset ( ) . left ; var top:==:this . $ el . offset ( ) . top ;
var badHtml = badHtmlElement . text ( ) . trim ( ) ; var t:==:$ ( ' # templates . report ' ) . clone ( ) ;
var distance = lparams . distance ; var angle:==:lparams . falloff_angle ;
var asyncStorage = require ( ' asyncStorage ' ) ; var debug:==:require ( ' debug ' ) ( ' dcf ' ) ;
var l1 = _ l1 ; var accu:==:_ accu ;
var apf = imports . apf ; var tabManager:==:imports . tabManager ;
var runners = util . cloneObject ( options . runners ) ; var testing:==:options . testing ;
var defer = _ _ dependency7 _ _ . defer ; var config:==:_ _ dependency8 _ _ . config ;
var storageLibrary = windows . storage . storageLibrary ; var knownLibraryId:==:windows . storage . knownLibraryId ;
var ELEMENT_DELETE = traceur . syntax . predefinedName . element_delete ; var element_get:==:traceur . syntax . predefinedName . element_get ;
var r = this . game . rnd . realInRange ( player . rotation - 0 . 2 , player . rotation + 0 . 2 ) ; var b:==:this . game . rnd . between ( this . bulletSpeed - 200 , this . bulletSpeed + 200 ) ;
var FOO = docSet . getByLongname ( ' foo ' ) [ 0 ] ; var bar:==:docSet . getByLongname ( ' bar ' ) [ 0 ] ;
var showAnim = this . _ get ( inst , ' showAnim ' ) ; var duration:==:this . _ get ( inst , ' duration ' ) ;
var block = CHTML . addElement ( stack,'mjx - block ' , , [ [ ' mjx - box ' ] ] ) , line = block . firstChild ; var bbox:==:state . bbox    chtml . bbox . empty ( ) ;
var location = exports . location = locationShape ; var component:==:exports . component    internalPropTypes . component ;
var n = new functionAssignmentNode ( ' f ' , [ ' x ' ] , c ) ; var e:==:new constantNode ( 5 ) ;
var collisionBoxArray = tile . collisionBoxArray . serialize ( ) ; var symbolInstancesArray:==:tile . symbolInstancesArray . serialize ( ) ;
var position = powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . position , visuals . referenceLinePosition . front ) ; var dataLabelShow:==:powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . dataLabelShow , false ) ;
var b = df . appendChild ( document . createTextNode ( ' b ' ) ) ; var c:==:df . appendChild ( document . createTextNode ( ' c ' ) ) ;
var identifierExpression = traceur . syntax . trees . identifierExpression ; var bindingIdentifier:==:traceur . syntax . trees . bindingIdentifier ;
var pass = sinonStub ( sinonExpectation , ' pass ' ) ; var mock:==:this . mock ;
var configPath = project . project . configPath ( ) ; var config:==:require ( configPath ) ( project . environment ) . mockServer  |  |  ;
var trigger = t . trigger ; var defaultSelectionEnd:==:t . defaultSelectionEnd ;
var script = document . querySelector ( ' script [ src*= ' ' + fileName + ' ' ] ' ) ; var src:==:script . attributes . src . value ;
var meta = model . get ( ' metadata ' ) ; var content:==:model . get ( ' content ' ) ;
var geofence = report . geofence ; var i d:==:geofence . i d ;
var gulp = require ( ' gulp ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var RLM = goog . i18n . bidi . Format . RLM ; var LRE:==:goog . i18n . bidi . Format . LRE ;
var def = goog . dom . getElement ( ' def ' ) ; var jkl:==:goog . dom . getElement ( ' jkl ' ) ;
var pDiff   = this . pDiff ; var vDiff:==:this . vDiff ;
var forEach = [ ] . forEach ; var slice:==:[ ] . slice ;
var startPixel = this . startPixel _ ; var endPixel:==:this . endPixel _ ;
var axisExpandWidth = restrict ( parallelModel . get ( ' axisExpandWidth ' ) , layoutExtent ) ; var axisExpandCount:==:restrict ( parallelModel . get ( ' axisExpandCount ' )  |  |  0 , [ 0 , axisCount ] ) ;
var n = this . n ; var e:==:new BN ( msg ) ;
var n   = this . normal ; var diffP:==:this . diffP ;
var canvas = chart . canvas ; var height:==:chart . height ;
var fromDate = $ filter ( ' date ' ) ( vm . fromDate , dateFormat ) ; var toDate:==:$ filter ( ' date ' ) ( vm . toDate , dateFormat ) ;
var interactivityLines = options . interactivityLines ; var dots:==:this . dots    options . dots ;
var svgUtil = powerbi . visuals . svgUtil ; var visualDataRoleKind:==:powerbi . visualDataRoleKind ;
var app = this . _ apps [ index ] ; var manifest:==:new manifestHelper ( app . manifest  |  |  app . updateManifest ) ;
var asin = stdlib . Math . asin ; var atan:==:stdlib . Math . atan ;
var mode = group . mode ; var value:==:group . value ;
var i d = updater . entity . i d ; var dynamicUpdater:==:this . _ dynamicUpdaters . get ( i d ) ;
var Agent = require ( ' smith ' ) . Agent ; var Transport:==:require ( ' smith ' ) . Transport ;
var a = new constantNode ( 2 ) ; var n:==:new operatorNode ( ' ! ' , ' factorial ' , [ a ] ) ;
var settings = self . data ( ' timepicker - settings ' ) ; var list:==:self . data ( ' timepicker - list ' ) ;
var pattern = selectedScheme . get ( ' pattern ' ) ; var fields:==:selectedScheme . get ( ' fields ' ) ;
var b = m . b ; var c:==:m . c ;
var lastTaskIndex = info . lastTaskIndex ; var tasks:==:info . tasks ;
var EMPTY_STRING = unicodeData . empty_string ; var whitespace:==:unicodeData . whitespace ;
var floatingLabelFocusStyle = _ props2 . floatingLabelFocusStyle ; var floatingLabelStyle:==:_ props2 . floatingLabelStyle ;
var feature = features . item ( i ) ; var index:==:selected . indexOf ( feature ) ;
var startTime = record . startTime ( ) ; var endTime:==:record . endTime ( ) ;
var isCommutative = util . isCommutative ; var isAssociative:==:util . isAssociative ;
var assert = require ( ' assert ' ) ; var faker:==:require ( ' faker ' ) ;
var scrollView = require ( ' scrollView ' ) ; var text:==:require ( ' text ' ) ;
var width = defaultValue ( options . width , 0 ) ; var height:==:defaultValue ( options . height , 0 ) ;
var center = viewState . center ; var extent:==:frameState . extent ;
var key = ast . key . visit ( this ) ; var value:==:ast . value . visit ( this ) ;
var derequire = require ( ' gulp - derequire ' ) ; var flatten:==:require ( ' gulp - flatten ' ) ;
var xMin = lineDefSet . xMin ; var xMax:==:lineDefSet . xMax ;
var company = $ ( this ) . parents ( ' . innerMarbleWrap ' ) . parents ( ' . marblesWrap ' ) . attr ( ' company ' ) ; var username:==:$ ( this ) . parents ( ' . innerMarbleWrap ' ) . parents ( ' . marblesWrap ' ) . attr ( ' username ' ) ;
var unserialize = require ( ' unserialize ' ) ; var each:==:require ( ' each ' ) ;
var vm = require ( ' vm ' ) ; var http:==:require ( ' http ' ) ;
var y = node . getAttribute ( ' y ' )  |  |  0 ; var width:==:node . getAttribute ( ' width ' )  |  |  formObject . width ;
var right = region . right + dest . x ; var bottom:==:region . bottom + dest . y ;
var measure = view [ view . length - 1 ] . measure ; var map:==:measure . maps ? measure . maps [ measure . maps . length - 1 ] : measure . map ;
var script = document . querySelector ( ' script [ src*= ' ' + thisFile + ' ' ] ' ) ; var src:==:script . attributes . src . value ;
var firstEdgeIndexes = this . _ firstEdgeIndexes ; var flags:==:this . _ flags ;
var annotation = evt . annotation ; var title:==:evt . title ;
var fulfill = follower . _ fulfillmentHandler0 ; var reject:==:follower . _ rejectionHandler0 ;
var mode = modes [ kind ]  |  |  modes . html ; var localState:==:last ( state . localStates ) ;
var zoom = document . querySelector ( ' # zoom ' ) ; var find:==:document . querySelector ( ' # find ' ) ;
var textures = this . textures _ ; var hitDetectionTextures:==:this . hitDetectionTextures _ ;
var pbJsonStreamParser = goog . require ( ' goog . net . streams . pbJsonStreamParser ' ) ; var object:==:goog . require ( ' goog . object ' ) ;
var objectEnumerationBuilder = powerbi . visuals . objectEnumerationBuilder ; var appendClearCatcher:==:powerbi . visuals . appendClearCatcher ;
var vdom = this . vdom ; var fields:==:validator . fields    [ ] ;
var assignmentNode = math . expression . node . assignmentNode ; var conditionalNode:==:math . expression . node . conditionalNode ;
var connected = ' connected ' ; var connecting:==:' connecting ' ;
var value = ( item . getAttribute ( ' data - value ' )  |  |  '' ) . toLowerCase ( ) ; var tags:==:( item . getAttribute ( ' data - tags ' )  |  |  '' ) . toLowerCase ( ) ;
var fontSize = getStyleProperty ( item , styleContextStack , ' fontSize ' , 12 ) ; var bold:==:getStyleProperty ( item , styleContextStack , ' bold ' , false ) ;
var orangeA400 = exports . orangeA400 = ' # ff9100 ' ; var orangeA700:==:exports . orangeA700    ' # ff6d00 ' ;
var to = docSet . getByLongname ( ' message~headers . to ' ) ; var from:==:docSet . getByLongname ( ' < anonymous>~headers . from ' ) ;
var message = messages [ i ] ; var length:==:message . length ;
var burst = options . burst ; var rate:==:options . rate ;
var path = req . param ( ' path ' ) ; var cmd:==:req . param ( ' cmd ' ) ;
var close = $ panel . hasClass ( ' close ' ) ; var collapse:==:$ panel . hasClass ( ' collapse ' ) ;
var changed = require ( ' gulp - changed ' ) ; var plumber:==:require ( ' gulp - plumber ' ) ;
var uid = userRow . attr ( ' data - uid ' ) ; var action:==:btnEl . attr ( ' data - action ' ) ;
var codeblock = codeblocks [ i ] ; var precinctNumber:==:codeblock . precinctNumber ;
var i d = this . i d = options . i d  |  |  this . instance ; var container:==:document . i d ( options . container ) ;
var points = packed . points ; var extremes:==:packed . extremes ;
var url = require ( ' url ' ) ; var http:==:require ( ' http ' ) ;
var ajax = Backbone . ajax ; var emulateHTTP:==:Backbone . emulateHTTP ;
var canvas = me . canvas ; var aspectRatio:==:( options . maintainAspectRatio & & me . aspectRatio )  |  |  null ;
var htmlparser = require ( ' htmlparser2 ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var lineWidth = state . lineWidth ; var miterLimit:==:state . miterLimit ;
var shouldHighlight = this . opts . shouldHighlight ; var renderAll:==:this . opts . renderAll ;
var visitor = visitors [ i ] ; var state:==:states [ i ] ;
var fs   = require ( ' fs ' ) ; var config:==:require ( ' config ' ) ;
var scale = node . image . scale  |  |  1 ; var clip:==:node . image . clip  |  |  1 ;
var uniform = uniforms [ i ] ; var name:==:uniform . name ;
var options = that . options ; var orientation:==:options . orientation ;
var portKey = document . getElementById ( ' portKey ' ) . value ; var portValue:==:document . getElementById ( ' portValue ' ) . value ;
var item = this . itemSet . itemFromTarget ( event ) ; var group:==:this . itemSet . groupFromTarget ( event ) ;
var ends = this . ends _ ; var stride:==:this . stride ;
var wordSpacing = current . wordSpacing ; var texthScale:==:current . texthScale ;
var teal200 = exports . teal200 = ' # 80cbc4 ' ; var teal300:==:exports . teal300    ' # 4db6ac ' ;
var showid = isUndefined ( v [ ' showid ' ] ) ? ctrlid : v [ ' showid ' ] ; var menuid:==:isUndefined ( v [ ' menuid ' ] ) ? showid + ' _ menu ' : v [ ' menuid ' ] ;
var supportConstant = exports . supportConstant = ' absolute | after - edge | after | all - scroll | all | alphabetic | always | antialiased | armenian | auto | avoid - column | avoid - page | avoid | balance | baseline | before - edge | before | below | bidi - override | block - line - height | block | bold | bolder | border - box | both | bottom | box | break - all | break - word | capitalize | caps - height | caption | center | central | char | circle | cjk - ideographic | clone | close - quote | col - resize | collapse | column | consider - shifts | contain | content - box | cover | crosshair | cubic - bezier | dashed | decimal - leading - zero | decimal | default | disabled | disc | disregard - shifts | distribute - all - lines | distribute - letter | distribute - space | distribute | dotted | double | e - resize | ease - in | ease - in - out | ease - out | ease | ellipsis | end | exclude - ruby | fill | fixed | georgian | glyphs | grid - height | groove | hand | hanging | hebrew | help | hidden | hiragana - iroha | hiragana | horizontal | icon | ideograph - alpha | ideograph - numeric | ideograph - parenthesis | ideograph - space | ideographic | inactive | include - ruby | inherit | initial | inline - block | inline - box | inline - line - height | inline - table | inline | inset | inside | inter - ideograph | inter - word | invert | italic | justify | katakana - iroha | katakana | keep - all | last | left | lighter | line - edge | line - through | line | linear | list - item | local | loose | lower - alpha | lower - greek | lower - latin | lower - roman | lowercase | lr - tb | ltr | mathematical | max - height | max - size | medium | menu | message - box | middle | move | n - resize | ne - resize | newspaper | no - change | no - close - quote | no - drop | no - open - quote | no - repeat | none | normal | not - allowed | nowrap | nw - resize | oblique | open - quote | outset | outside | overline | padding - box | page | pointer | pre - line | pre - wrap | pre | preserve-3d | progress | relative | repeat - x | repeat - y | repeat | replaced | reset - size | ridge | right | round | row - resize | rtl | s - resize | scroll | se - resize | separate | slice | small - caps | small - caption | solid | space | square | start | static | status - bar | step - end | step - start | steps | stretch | strict | sub | super | sw - resize | table - caption | table - cell | table - column - group | table - column | table - footer - group | table - header - group | table - row - group | table - row | table | tb - rl | text - after - edge | text - before - edge | text - bottom | text - size | text - top | text | thick | thin | transparent | underline | upper - alpha | upper - latin | upper - roman | uppercase | use - script | vertical - ideographic | vertical - text | visible | w - resize | wait | whitespace | z - index | zero ' ; var supportConstantColor:==:exports . supportConstantColor    ' aliceblue | antiquewhite | aqua | aquamarine | azure | beige | bisque | black | blanchedalmond | blue | blueviolet | brown | burlywood | cadetblue | chartreuse | chocolate | coral | cornflowerblue | cornsilk | crimson | cyan | darkblue | darkcyan | darkgoldenrod | darkgray | darkgreen | darkgrey | darkkhaki | darkmagenta | darkolivegreen | darkorange | darkorchid | darkred | darksalmon | darkseagreen | darkslateblue | darkslategray | darkslategrey | darkturquoise | darkviolet | deeppink | deepskyblue | dimgray | dimgrey | dodgerblue | firebrick | floralwhite | forestgreen | fuchsia | gainsboro | ghostwhite | gold | goldenrod | gray | green | greenyellow | grey | honeydew | hotpink | indianred | indigo | ivory | khaki | lavender | lavenderblush | lawngreen | lemonchiffon | lightblue | lightcoral | lightcyan | lightgoldenrodyellow | lightgray | lightgreen | lightgrey | lightpink | lightsalmon | lightseagreen | lightskyblue | lightslategray | lightslategrey | lightsteelblue | lightyellow | lime | limegreen | linen | magenta | maroon | mediumaquamarine | mediumblue | mediumorchid | mediumpurple | mediumseagreen | mediumslateblue | mediumspringgreen | mediumturquoise | mediumvioletred | midnightblue | mintcream | mistyrose | moccasin | navajowhite | navy | oldlace | olive | olivedrab | orange | orangered | orchid | palegoldenrod | palegreen | paleturquoise | palevioletred | papayawhip | peachpuff | peru | pink | plum | powderblue | purple | rebeccapurple | red | rosybrown | royalblue | saddlebrown | salmon | sandybrown | seagreen | seashell | sienna | silver | skyblue | slateblue | slategray | slategrey | snow | springgreen | steelblue | tan | teal | thistle | tomato | turquoise | violet | wheat | white | whitesmoke | yellow | yellowgreen ' ;
var accFactor = this . handle . autoExpand . accFactor ; var acc:==:math . pow ( dx , accFactor ) ;
var query = _ props . query ; var hash:==:_ props . hash ;
var distance = from . distanceTo ( hitPointWorld ) ; var result:==:this . result ;
var language = imports . language ; var tooltip:==:imports [ ' language . tooltip ' ] ;
var mail = $ routeParams . mail ; var password:==:$ routeParams . password ;
var   START_TO_END      = 1 ; var   END_TO_END:==:2 ;
var path = require ( ' path ' ) ; var tmpdir:==:require ( ' os ' ) . tmpdir ( ) ;
var karma = require ( ' karma ' ) . server ; var jshint:==:require ( ' gulp - jshint ' ) ;
var items = settings . items ; var selected:==:$ ( this ) . data ( ' selected ' ) ;
var col = obj . columns [ column ] ; var edit:==:col ? col . editable : null ;
var inject = ref . inject ; var cache:==:ref . cache ;
var head = copyCursor ( sel . head ) ; var anchor:==:copyCursor ( sel . anchor ) ;
var builtin = parserConfig . builtin  |  |  ; var atoms:==:parserConfig . atoms  |  |  ;
var options = _ props2 . options ; var promptTextCreator:==:_ props2 . promptTextCreator ;
var iter = icalEvent . iterator ( ) ; var next:==:iter . next ( ) ;
var reactTypeOfWork = require ( ' reactTypeOfWork ' ) ; var reactTypeOfSideEffect:==:require ( ' reactTypeOfSideEffect ' ) ;
var Token = traceur . syntax . Token ; var tokenType:==:traceur . syntax . tokenType ;
var force = this . force ; var strength:==:this . options . strength ;
var a = new bigmath . expression . node . symbolNode ( ' a ' ) ; var b:==:new bigmath . expression . node . constantNode ( 2 ) ;
var Span = firepad . Span ; var h:==:helpers ;
var fontSize = current . fontSize ; var fontDirection:==:current . fontDirection ;
var nodes = data . nodes ; var instanceCameras:==:data . instanceCameras ;
var reactReconciler = require ( ' reactReconciler ' ) ; var reactServerBatchingStrategy:==:require ( ' reactServerBatchingStrategy ' ) ;
var objectOrFunction = _ _ dependency2 _ _ . objectOrFunction ; var isFunction:==:_ _ dependency2 _ _ . isFunction ;
var callbacks = input . callbacks ; var i d:==:input . i d ;
var nameFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' nameFieldTestObject ' ) ) ; var textFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ;
var body = this . transformAny ( tree . body ) ; var catchBlock:==:this . transformAny ( tree . catchBlock ) ;
var type = ref . type ; var leaveClass:==:ref . leaveClass ;
var isInt = sharedUtil . isInt ; var isNum:==:sharedUtil . isNum ;
var k = kv [ 0 ] ; var v:==:kv [ 1 ] ;
var tile = context . tiles [ tileIndex ] ; var layersCount:==:tile . codingStyleDefaultParameters . layersCount ;
var flags = Loader . flags ; var flags:==:Loader . flags ;
var address = opts . address  |  |  this . ADDRESSES [ 0 ] ; var calibrationMask:==:opts . calibrationMask  |  |  0xc0 ;
var h = window . innerHeight > document . body . clientHeight ? window . innerHeight - document . body . clientHeight + 10 : undefined ; var s:==:document . body . scrollHeight ;
var   LENLENS = 18 ; var   CODELENS:==:19 ;
var work = this . _ work ; var denom:==:this . _ denominators ;
var imageResizeMode = require ( ' imageResizeMode ' ) ; var imageStylePropTypes:==:require ( ' imageStylePropTypes ' ) ;
var x = this . toDegreesPerSecond ( state . x . value , state . x . center ) ; var y:==:this . toDegreesPerSecond ( state . y . value , state . y . center ) ;
var width = qrcode . width ; var height:==:qrcode . height ;
var isObject = _ angular . isObject ; var isNumber:==:_ angular . isNumber ;
var pixelRatio = frameState . pixelRatio ; var rotation:==:frameState . viewState . rotation ;
var STATUS_ACTIVE    = exports . STATUS_ACTIVE    = 3 ; var STATUS_OUT_OF_SYNC:==:exports . STATUS_OUT_OF_SYNC    4 ;
var contexts = this . contexts ; var len:==:contexts . length ;
var opacity = _ props . opacity ; var style:==:_ props . style ;
var concurrency = this . concurrency ( ) ; var ignores:==:this . ignores  |  |  null ;
var uSquared = ellipsoidGeodesic . _ uSquared ; var a:==:ellipsoidGeodesic . _ ellipsoid . maximumRadius ;
var x = circle . attr ( ' cx ' ) ; var y:==:circle . attr ( ' cy ' ) ;
var formatDate = calendar . formatDate ; var formatDates:==:calendar . formatDates ;
var object = this . _ extended . object ; var methods:==:this . _ extended . methods ;
var quasiSubstitution = traceur . syntax . trees . quasiSubstitution ; var restParameter:==:traceur . syntax . trees . restParameter ;
var g = rejectThenableSoon ( ' rejected - g ' , 10 ) ; var h:==:createThrowingThenable ( ' rejected - h ' ) ;
var superBlock = challengeSpec . superBlock ; var superOrder:==:challengeSpec . superOrder ;
var request = evt . request ; var path:==:request . path ;
var wrench = require ( ' wrench ' ) ; var stream:==:require ( ' stream ' ) ;
var controls = this . _ reduceControls ( controlsConfig ) ; var optionals:==:isPresent ( extra ) ? stringMapWrapper . get ( extra , ' optionals ' ) : null ;
var c9 = imports . c9 ; var membersPanel:==:imports . membersPanel ;
var allOptions = _ _ webpack_require _ _ ( 157 ) . allOptions ; var configureOptions:==:_ _ webpack_require _ _ ( 157 ) . configureOptions ;
var timings = data . timings ; var stagger:==:data . stagger ;
var purple200 = exports . purple200 = ' # ce93d8 ' ; var purple300:==:exports . purple300    ' # ba68c8 ' ;
var text = this . _ textEditor . text ( ) ; var range:==:this . _ textEditor . range ( ) ;
var clockViewModel = that . _ clockViewModel ; var multiplier:==:clockViewModel . multiplier ;
var length = this . length ; var _ input:==:this . _ input ;
var continuous = opts . continuous  |  |  opts . live  |  |  false ; var batch_size:==:opts . batch_size  |  |  100 ;
var anchor = new domPosition ( sel . anchorNode , sel . anchorOffset ) ; var focus:==:new domPosition ( sel . focusNode , sel . focusOffset ) ;
var api = this . api ( true ) ; var nodeName:==:node . nodeName . toUpperCase ( ) ;
var util    = require ( ' util ' ) ; var debug:==:require ( ' debug ' ) ( ' pm2 : actionMethod ' ) ;
var remoteVideo = document . querySelector ( ' video#remoteVideo ' ) ; var localVideo:==:document . querySelector ( ' video#localVideo ' ) ;
var p = p : 12 ; var p2:==:p2 : 23 ;
var def = $ ( ' def-4 ' ) ; var jkl:==:$ ( ' jkl-4 ' ) ;
var workspace = Blockly . Workspace . getById ( this . workspaceId ) ; var block:==:workspace . getBlockById ( this . blockId ) ;
var snapshot = this . _ snapshot ; var ordinal:==:this . ordinal ( ) ;
var data = this . data ; var margin:==:this . margin ;
var lex = require ( ' pug - lexer ' ) ; var load:==:require ( ' pug - load ' ) ;
var aspectRatio = options . aspectRatio ; var action:==:this . action ;
var anchor = this . anchor ; var lead:==:this . lead ;
var mongo = require ( ' mongoskin ' ) ; var Firebase:==:require ( ' Firebase ' ) ;
var NULL2 = C . NULL2 = 0x42 ; var NULL3:==:C . NULL3    0x43 ;
var orange700 = exports . orange700 = ' # f57c00 ' ; var orange800:==:exports . orange800    ' # ef6c00 ' ;
var getMinTime = t . getMinTime ; var getMaxTime:==:t . getMaxTime ;
var debug = require ( ' debug ' ) ( ' marionette : tcp ' ) ; var net:==:require ( ' net ' ) ;
var srsName = context [ ' srsName ' ] ; var hasz:==:context [ ' hasz ' ] ;
var vertexFormat = polygonGeometry . _ vertexFormat ; var ellipsoid:==:polygonGeometry . _ ellipsoid ;
var verticesBuffer = this . verticesBuffer ; var indicesBuffer:==:this . indicesBuffer ;
var painter = this . map . painter ; var gl:==:painter . gl ;
var length = Compass . Points . length ; var heading:==:Math . floor ( this . heading ) ;
var target = options . target ; var content:==:options . content ;
var canvas = context . canvas ; var width:==:canvas . width ;
var geometries = extractFromCache ( meta . geometries ) ; var materials:==:extractFromCache ( meta . materials ) ;
var conn = options . connection ; var projectContext:==:options . projectContext ;
var getContentStateFragment = require ( ' getContentStateFragment ' ) ; var nullthrows:==:require ( ' nullthrows ' ) ;
var codeMirror = global . codeMirror ; var ace:==:global . ace ;
var targetEntity = field . targetEntity ( ) ; var targetField:==:field . targetField ( ) ;
var onKeyboardFocus = _ props3 . onKeyboardFocus ; var onTouchTap:==:_ props3 . onTouchTap ;
var inner = el . querySelector ( ' gui - list - view - inner ' ) ; var head:==:el . querySelector ( ' gui - list - view - head ' ) ;
var run = Ember . run ; var Application:==:Ember . Application ;
var a = new int8Array ( 2 ) ; var b:==:a . subarray ( 2 , 4 ) ;
var touchcancel = isTouch ? ' touchcancel ' : ' mousecancel ' ; var touchstart:==:isTouch ? ' touchstart ' : ' mousedown ' ;
var query = Url . parse ( req . url , true ) . query ; var path:==:query . url & & Url . parse ( query . url ) . pathname ;
var labelSettings = this . cardFormatSetting . labelSettings ; var isSmallViewport:==:this . isSmallViewport ( ) ;
var startX = this . startX ; var height:==:this . height ;
var south = queryNumericValue ( latLonBox , ' south ' , namespaces . kml ) ; var east:==:queryNumericValue ( latLonBox , ' east ' , namespaces . kml ) ;
var len = entity . script . scripts . length ; var url:==:instance . url ;
var eventNS = self . eventNS ; var revertSettings:==:self . revertSettings ;
var foldl = require ( ' foldl ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var parenExpression = traceur . syntax . trees . parenExpression ; var postfixExpression:==:traceur . syntax . trees . postfixExpression ;
var semver = require ( ' semver ' ) ; var mout:==:require ( ' mout ' ) ;
var draggedElement = that . draggedElement = e . currentTarget ; var placeholder:==:that . options . draggable . placeholder ;
var win = opt_win  |  |  bot . getWindow ( ) ; var doc:==:win . document ;
var onRowMouseOut = _ props3 . onRowMouseOut ; var rowClassName:==:_ props3 . rowClassName ;
var socket   = require ( ' socket . io ' ) ; var client:==:require ( ' socket . io - client ' ) ;
var icon = this . iconEl ; var button:==:angular . element ( this . buttonEl ) ;
var canvas = document . querySelector ( ' canvas ' ) ; var video:==:document . querySelector ( ' video ' ) ;
var domProperty = require ( ' domProperty ' ) ; var eventPluginRegistry:==:require ( ' eventPluginRegistry ' ) ;
var selector = this . selector ; var subject:==:this . subjectFactory ( ) ;
var rect = layoutInfo . rect ; var boundaryGap:==:layoutInfo . boundaryGap ;
var semiMajorAxis = ellipse . semiMajorAxis ; var semiMinorAxis:==:ellipse . semiMinorAxis ;
var gcNode = jsProfileModel . gcNode ; var samples:==:jsProfileModel . samples ;
var filePath = filePathNode . value ; var currentFileInfo:==:functionContext . currentFileInfo ;
var width = image . width ; var pixelsToCheck:==:options . pixelsToCheck ;
var utils = require ( ' utils ' ) ; var widgets:==:require ( ' widgets ' ) ;
var d = new objectNode ( a : a , b : b ) ; var e:==:new objectNode ( c : c , d : d ) ;
var U8 = new primitiveType ( ' u8 ' , 1 , ' i ' , 0 , 255 ) ; var u16:==:new primitiveType ( ' u16 ' , 2 , ' i ' , 0 , 65535 ) ;
var readonly = options . readonly ; var wrapper:==:that . wrapper . add ( that . filterInput ) . off ( ns ) ;
var paddingLeft = parseInt ( style . paddingLeft , 10 )  |  |  0 ; var paddingRight:==:parseInt ( style . paddingRight , 10 )  |  |  0 ;
var line = cm . getCursor ( ) . line ; var repeat:==:motionArgs . repeat ;
var exterior = geometries [ i ] . exterior ; var interiors:==:geometries [ i ] . interiors ;
var readBinaryOptions = struct ( ' readBinaryOptions ' ) ; var script:==:struct ( ' script ' ) ;
var c = components [ i d ] ; var entity:==:c . entity ;
var rollup = require ( ' rollup ' ) ; var babel:==:require ( ' rollup - plugin - babel ' ) ;
var spawn = require ( ' cross - spawn ' ) ; var opn:==:require ( ' opn ' ) ;
var x = anchor . xCoordinate ; var y:==:anchor . yCoordinate ;
var api = imports . api ; var ui:==:imports . ui ;
var location = validator . trim ( req . body . location ) ; var weibo:==:validator . trim ( req . body . weibo ) ;
var isCompleterOpen = helpers . isCompleterOpen ; var getCompletionCalls:==:helpers . getCompletionCalls ;
var scene = viewer . scene ; var camera:==:scene . camera ;
var uglify = require ( ' gulp - uglify ' ) ; var header:==:require ( ' gulp - header ' ) ;
var createAssignmentExpression = parseTreeFactory . createAssignmentExpression ; var createBlock:==:parseTreeFactory . createBlock ;
var entryTotalTimes = timelineData . entryTotalTimes ; var entryStartTimes:==:timelineData . entryStartTimes ;
var c9 = imports . c9 ; var Plugin:==:imports . Plugin ;
var isCompressed = ( texture & & texture . isCompressedTexture ) ; var isDataTexture:==:( texture . image [ 0 ] & & texture . image [ 0 ] . isDataTexture ) ;
var push = [ ] . push ; var slice:==:Array . prototype . slice ;
var width = _ props . width ; var columnKey:==:_ props . columnKey ;
var each = zrUtil . each ; var isObject:==:zrUtil . isObject ;
var ltgt = _ interopDefault ( require ( ' ltgt ' ) ) ; var events:==:_ interopDefault ( require ( ' events ' ) ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var assign:==:require ( ' object - assign ' ) ;
var passport = require ( ' passport ' ) ; var nconf:==:require ( ' nconf ' ) ;
var path = storage . path = source . path ; var orient:==:storage . orient    source . orient ;
var path = require ( ' path ' ) ; var gulp:==:require ( ' gulp ' ) ;
var xPointArray = contextObject . xPointArray ; var yPointArray:==:contextObject . yPointArray ;
var div = testDiv . appendChild ( document . createElement ( ' div ' ) ) ; var a:==:div . appendChild ( document . createElement ( ' a ' ) ) ;
var months   = makeGetter ( ' months ' ) ; var years:==:makeGetter ( ' years ' ) ;
var deepOrange300 = exports . deepOrange300 = ' # ff8a65 ' ; var deepOrange400:==:exports . deepOrange400    ' # ff7043 ' ;
var terminal = this . terminal ; var ace:==:this . aceSession . ace ;
var principal = constraint . principal ; var dependent:==:constraint . dependent ;
var indentUnit = config . indentUnit ; var multilineTagIndentFactor:==:parserConfig . multilineTagIndentFactor  |  |  1 ;
var registerComponent = component . registerComponent ; var shaders:==:shader . shaders ;
var viewPropTypes = require ( ' viewPropTypes ' ) ; var viewStylePropTypes:==:require ( ' viewStylePropTypes ' ) ;
var unknownErrorException = sharedUtil . unknownErrorException ; var util:==:sharedUtil . util ;
var context = event . context ; var canvas:==:context . canvas ;
var path = require ( ' path ' ) ; var _ files:==:path . join ( _ _ dirname , ' _ files ' ) ;
var DateTimeSymbols_gl = goog . require ( ' goog . i18n . DateTimeSymbols_gl ' ) ; var DateTimeSymbols_hi:==:goog . require ( ' goog . i18n . DateTimeSymbols_hi ' ) ;
var relpos = sphereTrimesh_relpos ; var triangles:==:sphereTrimesh_triangles ;
var assert   = common . assert ; var incomingForm:==:common . require ( ' incoming_form ' ) . incomingForm ;
var lineNumber = parseInt ( lineNumbers [ i ] , 10 ) ; var columnNumber:==:parseInt ( columnNumbers [ j ] , 10 ) ;
var windowLow = volume . windowLow ; var windowHigh:==:volume . windowHigh ;
var c = rejectBuiltInSoon ( ' rejected - c ' , 10 ) ; var d:==:rejectBuiltInSoon ( ' rejected - d ' , 20 ) ;
var href = win . location . href ; var index:==:href . indexOf ( ' # ' ) ;
var afterLeave = data . afterLeave ; var leaveCancelled:==:data . leaveCancelled ;
var save = imports . save ; var fs:==:imports . fs ;
var contactCardOptions = contacts . contactCardOptions ; var contactCardHeaderKind:==:contacts . contactCardHeaderKind ;
var util = require ( ' util ' ) ; var mqtt:==:require ( ' mqtt ' ) ;
var dynCall_viiiiid = Module [ ' dynCall_viiiiid ' ] = asm [ ' dynCall_viiiiid ' ] ; var dynCall_viiiiiiii:==:Module [ ' dynCall_viiiiiiii ' ]    asm [ ' dynCall_viiiiiiii ' ] ;
var left = Math . min ( rect1 . left , rect2 . left ) ; var top:==:Math . min ( rect1 . top , rect2 . top ) ;
var suffix = this . helpers . suffix ; var prefix:==:this . helpers . prefix ;
var segment = this . _ segments [ i ] ; var handleIn:==:segment . _ handleIn ;
var url = require ( ' url ' ) ; var fs:==:require ( ' fs ' ) ;
var width = Base . window . width * 0 . 75  |  0 ; var nyanCatWidth:==:this . nyanCatWidth    11 ;
var dateTime2ms = lib . dateTime2ms ; var ensureNumber:==:lib . ensureNumber ;
var view = this . view ; var projectionView:==:this . projectionView ;
var require = blanket . options ( ' commonJS ' ) ? blanket . _ commonjs . require : window . require ; var requirejs:==:blanket . options ( ' commonJS ' ) ? blanket . _ commonjs . requirejs : window . requirejs ;
var options = this . _ options ; var hierarchy:==:Property . getValueOrUndefined ( polygon . hierarchy , time ) ;
var px = ' px ' ; var style:==:this . element _ . style ;
var a = newArrayWithGetter ( ) ; var s:==:a . slice ( 1 ) ;
var GENTICS = window . GENTICS ; var Aloha:==:window . Aloha ;
var line = tokens [ index ] . line ; var start:==:tokens [ index ] . start ;
var extrudedHeight = geometry . _ extrudedHeight ; var east:==:rectangle . east ;
var _ testSetjmp = module [ ' _ testSetjmp ' ] = asm [ ' _ testSetjmp ' ] ; var _ _ global__i_a:==:module [ ' _ _ global__i_a ' ]    asm [ ' _ _ global__i_a ' ] ;
var contentDoc = this . contentDocument ; var defaultView:==:contentDoc . defaultView  |  |  contentDoc . parentWindow ;
var display = opts . display ; var ctx:==:this . ctx ;
var range = scale . range ( ) ; var domain:==:scale . domain ( ) ;
var Node = test . Node ; var File:==:test . File ;
var comments = config . comments ; var step:==:config . step ;
var bind = require ( ' bind ' ) ; var domify:==:require ( ' domify ' ) ;
var ace = imports . ace ; var configure:==:imports . configure ;
var dashSize = options . dashSize  |  |  3 ; var gapSize:==:options . gapSize  |  |  1 ;
var textAlign = titleModel . get ( ' textAlign ' ) ; var textBaseline:==:titleModel . get ( ' textBaseline ' ) ;
var numComps = this . numComps ; var decodeAddends:==:this . decodeAddends ;
var tiltY = defaultValue ( options . tilty , 0 ) ; var pointerId:==:defaultValue ( options . pointerId , 1 ) ;
var less = require ( ' gulp - less ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var vm = require ( ' vm ' ) ; var through:==:require ( ' through2 ' ) ;
var save = imports . save ; var ui:==:imports . ui ;
var initPTS = this . _ initPTS ; var initDTS:==:this . _ initDTS ;
var e = a . max_code ; var g:==:a . max_length ;
var help01 = document . getElementById ( ' help01 ' ) ; var help02:==:document . getElementById ( ' help02 ' ) ;
var log = require ( dirs . core + ' log ' ) ; var adapter:==:config [ config . adapter ] ;
var len = this . data . length ; var cur:==:this . currentIndex ;
var g = new Dygraph ( graph , data , opts ) ; var o:==:new dygraphOptions ( g ) ;
var cropper = $ image . data ( ' cropper ' ) ; var canvas:==:cropper . canvas ;
var buffer = file_ids [ file_id ] . buffer ; var byteArray:==:file_ids [ file_id ] . byteArray ;
var w = width + bleed_x ; var h:==:height + bleed_y ;
var escodegen = require ( ' escodegen ' ) ; var vm:==:require ( ' vm ' ) ;
var doc = e . doc ; var tab:==:e . doc . tab ;
var y = dot . attr ( ' cy ' ) ; var yAxisx:==:( _ chart . _ yAxisx ( ) - _ chart . margins ( ) . left ) ;
var height = _ props . height ; var noRowsRenderer:==:_ props . noRowsRenderer ;
var gradW =   SPHSystem_update_gradW ; var r_vec:==:SPHSystem_update_r_vec ;
var scrollLeft = math . max ( math . min ( self . _ _ scrollLeft , self . _ _ maxScrollLeft ) , 0 ) ; var scrollTop:==:math . max ( math . min ( self . _ _ scrollTop , self . _ _ maxScrollTop ) , 0 ) ;
var focus = ( params . focus ! = = undefined ) ? params . focus : 1 . 0 ; var aspect:==:( params . aspect !    undefined ) ? params . aspect : camera . aspect ;
var callee = node . callee ; var parent:==:node . parent ;
var timestamp = options . timestamp  |  |  hawk . utils . now ( options . localtimeOffsetMsec ) ; var credentials:==:options . credentials ;
var initialName = decEndpoint . initialName ! = null ? decEndpoint . initialName : decEndpoint . name ; var fetching:==:this . _ fetching [ initialName ] ;
var right = this . _ getPropertyValueAsPx ( computedStyle , componentName + ' -right ' + suffix ) ; var bottom:==:this . _ getPropertyValueAsPx ( computedStyle , componentName + ' -bottom ' + suffix ) ;
var variableDeclarationList = traceur . syntax . trees . variableDeclarationList ; var variableDeclaration:==:traceur . syntax . trees . variableDeclaration ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , data , plugins : [ plugin ] ) ;
var legend = nv . models . legend ( ) ; var tooltip:==:nv . models . tooltip ( ) ;
var transform = context . transform ; var origin:==:context . origin ;
var assert = require ( ' assert ' ) ; var readFileSync:==:require ( ' fs ' ) . readFileSync ;
var geocodeCache = this . geocodeCache ; var maxCacheSize:==:this . maxCacheSize ;
var format = require ( ' util ' ) . format ; var multiline:==:require ( ' multiline ' ) . stripIndent ;
var namespace = e . relatedNode . namespaceuri ; var target:==:e . target ;
var visualMapModel = this . visualMapModel ; var textGap:==:visualMapModel . get ( ' textGap ' ) ;
var workers = parameters . workers ; var blockSize:==:parameters . blockSize  |  |  64 ;
var details = msg . details ; var allFrames:==:details . allFrames  |  |  false ;
var viewModel = widget . _ viewModel ; var shuttleRingDragging:==:viewModel . shuttleRingDragging ;
var variables = variableUtil . variablesInScope ( context ) ; var variable:==:variableUtil . getVariable ( variables , ' createElement ' ) ;
var drawWidth = imageObj . drawWidth ; var drawHeight:==:imageObj . drawHeight ;
var reactFiberReconciler = require ( ' reactFiberReconciler ' ) ; var reactInstanceMap:==:require ( ' reactInstanceMap ' ) ;
var shadow = this . shadow ? this . shadow . buildCode ( builder , ' c ' ) : undefined ; var emissive:==:this . emissive ? this . emissive . buildCode ( builder , ' c ' , slot : ' emissive ' ) : undefined ;
var fill = style . fill ; var stroke:==:style . stroke ;
var vfs = imports . vfs ; var installer:==:imports . installer ;
var target = url . parse ( options . target ) ; var u:==:url . parse ( proxyRes . headers [ ' location ' ] ) ;
var fill = this . fill ? series . color : ' none ' ; var stroke:==:this . stroke ? series . color : ' none ' ;
var offset = uvScaleMap . offset ; var repeat:==:uvScaleMap . repeat ;
var child_process = require ( ' child_process ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var element = this . element , o = this . options ; var tabs:==:element . children ( ' . tabs ' ) . find ( ' li ' ) . children ( ' a ' ) ;
var saveResult = saveContext . saveResult ; var entitiesWithErrors:==:saveResult . entitiesWithErrors ;
var foo = function foo ( ) ; var foo:==:async function foo ( ) ;
var vertices = this . vertices ; var offset:==:this . offset ;
var methodNotAllowedError = errors . methodNotAllowedError ; var notAuthorizedError:==:errors . notAuthorizedError ;
var l = getLiteralString ( node . left ) ; var r:==:getLiteralString ( node . right ) ;
var subset = settings . subset ; var set:==:subset ? toExpression ( subset ) : expression_escape ;
var lock = + $ ( this ) . data ( ' lock ' ) ; var width:==:$ ( this ) . data ( ' width ' ) ;
var socket = root . openSignalingChannel ( socketConfig ) ; var isofferer:==:_ config . isofferer ;
var segment = segments [ segIndex ] ; var start:==:segment . start , end    segment . end ;
var profileSamples = this . _ profileSamples ; var sizes:==:profileSamples . sizes ;
var nMass = con . nMass ; var n:==:con . n ;
var anims = imports . anims ; var menus:==:imports . menus ;
var page = data . page ; var pages:==:data . pages ;
var user = document . getElementById ( ' wifi_user ' ) . value ; var ssid:==:document . getElementById ( ' wifi_ssid ' ) . value ;
var fs = require ( ' fs ' ) ; var ejs:==:require ( ' ejs ' ) ;
var acc = _ acc ; var k:==:_ k ;
var TWILIO_ACCOUNT_SID = process . env [ ' TWILIO_ACCOUNT_SID ' ] ; var TWILIO_AUTH_TOKEN:==:process . env [ ' TWILIO_AUTH_TOKEN ' ] ;
var test = document . getElementById ( ' test ' ) ; var element:==:document . getElementById ( ' element ' ) ;
var key = self . $ keyAt ( item ) ; var def:==:$ q . defer ( ) ;
var drag = entry . indexOf ( ' drag ' ) > = 0 ; var fixed:==:entry . indexOf ( ' fixed ' ) >   0 ;
var sinon = require ( ' sinon ' ) ; var expect:==:require ( ' chai ' ) . expect ;
var dropLast = _ curry2 ( _ dispatchable ( [ ] , _ xdropLast , _ dropLast ) ) ; var dropLastWhile:==:_ curry2 ( _ dispatchable ( [ ] , _ xdropLastWhile , _ dropLastWhile ) ) ;
var Metadata = require ( ' Metadata ' ) ; var Prism:==:require ( ' Prism ' ) ;
var caption = options . caption ; var i d:==:options . i d ;
var dir = path . join ( _ _ dirname , ' . . ' , ' controllers ' ) ; var verbose:==:options . verbose ;
var level = threats [ i ] . level ; var count:==:threats [ i ] . count ;
var equal    = require ( ' assert ' ) . equal ; var deepEqual:==:require ( ' assert ' ) . deepEqual ;
var styleSpec = options . styleSpec ; var key:==:options . key ;
var apf = imports . apf ; var ace:==:imports . ace ;
var _ strcat = Module [ ' _ strcat ' ] = asm [ ' _ strcat ' ] ; var _ strlen:==:Module [ ' _ strlen ' ]    asm [ ' _ strlen ' ] ;
var a = Ext . lib . Event . getTarget ( b ) ; var d:==:this . view . findRowIndex ( a ) ;
var removePragmas = options . removePragmas ; var combineOutput:==:path . join ( ' build ' , ' combineOutput ' , optimizer ) ;
var p = particle . position ; var m:==:particle . mass ;
var props = internalInstance . props ; var state:==:internalInstance . state ;
var parser = require ( ' engine . io - parser ' ) ; var parseqs:==:require ( ' parseqs ' ) ;
var bottom = Math . ceil ( box . bottom ) ; var right:==:Math . ceil ( box . right ) ;
var image = this . image ; var rotate:==:image . rotate ;
var win = window . wrappedjsObject ; var mgmt:==:win . navigator . mozApps . mgmt ;
var outgoing = getNode ( ' outgoingServer [ @type='smtp ' ] ' , provider ) ; var oauth2Settings:==:dictifyChildNodes ( getNode ( ' oauth2Settings ' , provider ) ) ;
var totalBytes = evt . totalBytes ; var message:==:evt . message ;
var domLazyTree = require ( ' domLazyTree ' ) ; var domNamespaces:==:require ( ' domNamespaces ' ) ;
var length = cylinder . length ; var topRadius:==:cylinder . topRadius ;
var className = _ props2 . className ; var disabled:==:_ props2 . disabled ;
var w = box . width ( ) ; var h:==:box . height ( ) ;
var util = require ( ' util ' ) ; var sshpk:==:require ( ' sshpk ' ) ;
var browserify = require ( ' browserify ' ) ; var fs:==:require ( ' fs ' ) ;
var saveState = options . saveState ; var go:==:options . go ;
var dx = Math . max ( 0 , Math . min ( bounds . width , parseFloat ( mxUtils . getValue ( this . state . style , ' dx ' , this . dx ) ) ) ) ; var arrowHead:==:math . max ( 0 , math . min ( math . min ( bounds . height , bounds . width ) - dx , parseFloat ( mxUtils . getValue ( this . state . style , ' arrowHead ' , this . arrowHead ) ) ) ) ;
var i d = this . i d ; var manager:==:this . manager ;
var isSingleProperty = schema . isSingleProperty ; var parseProperties:==:schema . parseProperties ;
var objectEnumerationBuilder = powerbi . visuals . objectEnumerationBuilder ; var legendPosition:==:powerbi . visuals . legendPosition ;
var https   = require ( ' https ' ) ; var debug:==:require ( ' debug ' ) ( ' interface : http ' ) ;
var batchedBridge = require ( ' batchedBridge ' ) ; var datePickerAndroid:==:require ( ' datePickerAndroid ' ) ;
var def = accent : true ; if ( this . stack . env . font ) def . mathvariant = this . stack . env . fontvar mml:==:this . mmlToken ( mml . mo ( mml . entity ( ' # x'+accent ) ) . with ( def ) ) ;
var element = this . element ; var parent:==:this . element . _ parent ;
var yaml = require ( ' js - yaml ' ) ; var htmlparser:==:require ( ' htmlparser2 ' ) ;
var prev = remove . prev ; var next:==:remove . next ;
var isSingleProp = schema . isSingleProperty ; var stringifyProperties:==:schema . stringifyProperties ;
var template = opts . template ; var nodeVersion:==:opts . nodeVersion  |  |  process . version ;
var closePath = options . closePath ; var offset:==:options . offset ;
var lineDraw = this . _ lineDraw ; var group:==:this . group ;
var listBox = that . listBox ; var options:==:that . options ;
var tom = records . tom ; var yehuda:==:records . yehuda ;
var eastWestNormal = cartesian3 . normalize ( westVector , eastWestNormalScratch ) ; var south:==:rectangle . south ;
var setAdmins = docSet . getByLongname ( ' setAdmins ' ) [ 0 ] ; var setWidgetAccess:==:docSet . getByLongname ( ' setWidgetAccess ' ) [ 0 ] ;
var width = options . width  |  |  options . size  |  |  1 ; var height:==:options . height  |  |  options . size  |  |  1 ;
var up = camera . up ; var dir:==:camera . direction ;
var jshint = require ( ' gulp - jshint ' ) ; var each:==:require ( ' gulp - each ' ) ;
var m01 = this . m01 _ ; var m02:==:this . m02 _ ;
var fontSize = powerbi . dataViewObject . getValue ( this . legendObjectProperties , visuals . legendProps . fontSize , this . layerLegendData & & this . layerLegendData . fontSize ? this . layerLegendData . fontSize : visuals . svgLegend . defaultFontSizeInPt ) ; var position:==:powerbi . dataViewObject . getValue ( this . legendObjectProperties , visuals . legendProps . position , visuals . legendPosition . top ) ;
var sprite = game . make . sprite ( 300 , 100 , ' atari1 ' ) ; var graphics:==:game . make . graphics ( 0 , 0 ) ;
var glob = Promise . promisify ( require ( ' glob ' ) ) ; var path:==:require ( ' path ' ) ;
var store = new datastore ( data : items : arrayOfItems ) ; var d:==:new doh . deferred ( ) ;
var mime = require ( ' mime ' ) ; var https:==:require ( ' https ' ) ;
var width = dds . width ; var height:==:dds . height ;
var t = elem_type ( s ) ; var lim:==:limits ( vu32 , s ) ;
var assert = require ( ' assert ' ) ; var cookie:==:require ( ' cookie ' ) ;
var outlineColor = property . getValueOrClonedDefault ( corridor . outlineColor , time , color . black , scratchColor ) ; var outlineWidth:==:property . getValueOrDefault ( corridor . outlineWidth , time , 1 . 0 ) ;
var positions = screenSpaceEventHandler . _ positions ; var previousPositions:==:screenSpaceEventHandler . _ previousPositions ;
var button = _ context$muiTheme . button ; var raisedButton:==:_ context$muiTheme . raisedButton ;
var showMenuIconButton = _ props . showMenuIconButton ; var iconElementLeft:==:_ props . iconElementLeft ;
var showMinorLabels = this . options . showMinorLabels ; var showMajorLabels:==:this . options . showMajorLabels ;
var Schema = mongoose . Schema ; var validationError:==:mongoose . document . validationError ;
var success = options . success ; var args:==:options . args ;
var location = event . location  |  |  false ; var geo:==:event . geo  |  |  false ;
var node = this . body . nodes [ this . physicsBody . physicsNodeIndices [ i ] ] ; var force:==:this . physicsBody . forces [ this . physicsBody . physicsNodeIndices [ i ] ] ;
var hostBinding = makePropDecorator ( ' hostBinding ' , [ [ ' hostPropertyName ' , undefined ] ] ) ; var hostListener:==:makePropDecorator ( ' hostListener ' , [ [ ' eventName ' , undefined ] , [ ' args ' , [ ] ] ] ) ;
var deliveryStatus = reports . deliveryStatus ; var readStatus:==:reports . readStatus ;
var tokenType = traceur . syntax . tokenType ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var pointers = self . pointers ; var originalEvent:==:e . originalEvent ;
var n = $ ( node ) . prevAll ( node . nodeName . toLowerCase ( ) ) . length + 1 ; var i d:==:$ ( node ) . attr ( ' i d ' ) ;
var emptyFunction = require ( ' emptyFunction ' ) ; var findRangesImmutable:==:require ( ' findRangesImmutable ' ) ;
var transport = content . transport  |  |  ; var candidates:==:transport . candidates  |  |  [ ] ;
var STATUS_INACTIVE   = exports . STATUS_INACTIVE = 0 ; var STATUS_CONNECTING:==:exports . STATUS_CONNECTING    1 ;
var resolution = viewState . resolution ; var pixelRatio:==:frameState . pixelRatio ;
var getDocument = dom . getDocument ; var getBody:==:dom . getBody ;
var TRY_STATEMENT = ' TRY_STATEMENT ' ; var TYPE_ARGUMENTS:==:' TYPE_ARGUMENTS ' ;
var category = ' category ' ; var randomId:==:' randomId ' ;
var skipCurrent = options . skipCurrent ! = false ; var range:==:options . range ;
var target = renderOpts . target ; var shouldHighlight:==:this . opts . shouldHighlight ;
var closeArray = options . closeArray ; var closePath:==:options . closePath ;
var s = speed ! = = undefined ? speed : this . get ( ' animationSpeed ' ) ; var e:==:easing  |  |  this . get ( ' animationEasing ' ) ;
var name = state . name . identifierToken ; var func:==:createFunctionDeclaration ( name , parameters , functionBody ) ;
var s = this . _ destroyRootHostViewScope ( ) ; var hostView:==:view_ref_1 . internalView ( hostViewRef ) ;
var round = Math . round ; var abs:==:Math . abs ;
var iconElementLeft = _ props . iconElementLeft ; var iconElementRight:==:_ props . iconElementRight ;
var startSym = $ interpolate . startSymbol ( ) ; var endSym:==:$ interpolate . endSymbol ( ) ;
var util = require ( ' util ' ) ; var debug:==:require ( ' debug ' ) ( ' marionette - js - runner : rpc ' ) ;
var _ _ GLOBAL__I_a18 = Module [ ' _ _ GLOBAL__I_a18 ' ] = asm [ ' _ _ GLOBAL__I_a18 ' ] ; var runPostSets:==:module [ ' runPostSets ' ]    asm [ ' runPostSets ' ] ;
var del = require ( ' obj - case ' ) . del ; var integration:==:require ( ' analytics . js - integration ' ) ;
var accountId = identify . proxy ( ' traits . accountId ' ) ; var paymentProviderId:==:identify . proxy ( ' traits . paymentProviderId ' ) ;
var circle = s . circle ( 10 , 20 , 30 ) ; var group:==:s . group ( ) ;
var viewDate = scheduler . get ( ' viewDate ' ) ; var displayDaysInterval:==:instance . get ( ' displayDaysInterval ' ) ;
var polygon = this . _ polygon ; var lineGroup:==:this . _ lineGroup ;
var fs = require ( ' fs - extra ' ) ; var git:==:require ( ' gulp - git ' ) ;
var length = input . length ; var dimension:==:opt_dimension !    undefined ? opt_dimension : 2 ;
var winston = require ( ' winston ' ) ; var nconf:==:require ( ' nconf ' ) ;
var screenX = defaultValue ( options . screenx , 0 ) ; var screeny:==:defaultValue ( options . screeny , 0 ) ;
var width = bounds . width ; var height:==:bounds . height ;
var util = imports . util ; var vfs:==:imports . vfs ;
var cron = crons [ i ] ; var i d:==:parseInt ( cron . i d ) ;
var crypto = require ( ' crypto ' ) ; var fs:==:require ( ' fs ' ) ;
var GITHUB_ACCESS_TOKEN = process . env . GITHUB_ACCESS_TOKEN ; var exec:==:bbPromise . promisify ( child_process . exec ) ;
var dataset = this . chart . data . datasets [ point . _ datasetIndex ] ; var custom:==:point . custom  |  |  ;
var gl = painter . gl ; var tr:==:painter . transform ;
var onTerrain = geometryUpdater . _ onTerrain ; var primitives:==:this . _ primitives ;
var len = state . tokenStack . length ; var dep:==:( depth ? depth : 1 ) ;
var commands = imports . commands ; var experimental:==:imports [ ' preferences . experimental ' ] ;
var axisHelper = powerbi . visuals . axisHelper ; var textMeasurementService:==:powerbi . textMeasurementService ;
var upgradeDocumentTree = scope . upgradeDocumentTree ; var upgrade:==:scope . upgrade ;
var width = tilingSprite . width ; var height:==:tilingSprite . height ;
var Post = hexo . model ( ' Post ' ) ; var Page:==:hexo . model ( ' Page ' ) ;
var tooltipBuilder = powerbi . visuals . tooltipBuilder ; var getInvalidValueWarnings:==:powerbi . visuals . getInvalidValueWarnings ;
var setAttribute = proto . setAttribute ; var has:==:object . prototype . hasOwnProperty ;
var util = require ( ' util ' ) ; var utils:==:require ( ' keystone - utils ' ) ;
var secret = getParameterByName ( ' secret ' , data ) ; var email:==:getParameterByName ( ' email ' , data ) ;
var indigoA200 = exports . indigoA200 = ' # 536dfe ' ; var indigoA400:==:exports . indigoA400    ' # 3d5afe ' ;
var url = require ( ' url ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var merge    = require ( ' broccoli - merge - trees ' ) ; var concat:==:require ( ' broccoli - concat ' ) ;
var operation = req . service . api . operations [ req . operation ] ; var httpRequest:==:req . httpRequest ;
var escapeTextContentForBrowser = require ( ' escapeTextContentForBrowser ' ) ; var inputValueTracking:==:require ( ' inputValueTracking ' ) ;
var p = this . progress ( ) ; var from:==:new rgbColor ( p . from . value ) ;
var fs     = require ( ' fs ' ) ; var prompt:==:require ( ' prompt - sync ' ) ;
var style = style  |  |  node . _ style ; var rotation:==:style . rotation  |  |  0 ;
var instanceGeometries = data . instanceGeometries ; var instanceNodes:==:data . instanceNodes ;
var lazy = _ _ webpack_require _ _ ( 5 ) . lazy ; var isFactory:==:_ _ webpack_require _ _ ( 5 ) . isFactory ;
var appId = ob . appId ; var ids:==:ob . ids ;
var tmp = require ( ' tmp ' ) ; var path:==:require ( ' path ' ) ;
var reactUpdates = require ( ' reactUpdates ' ) ; var reactReconciler:==:require ( ' reactReconciler ' ) ;
var pub = ' pub - c-3c0fc243 - 9892 - 4858-aa38 - 1445e58b4ecb ' ; var sub:==:' sub - c - d0c386c6 - 7263 - 11e2 - 8b02 - 12313f022c90 ' ;
var pending = this . pending _ ; var modules:==:this . modules _ ;
var db = BrowserDB . db . _ db ; var transaction:==:db . transaction ( ' search_engines ' , ' readwrite ' ) ;
var getTilingPatternir = corePattern . getTilingPatternir ; var cMapFactory:==:corecMap . cMapFactory ;
var width = options . width  |  |  element . offsetWidth ; var height:==:options . height  |  |  element . offsetHeight ;
var left = result . left ; var right:==:result . right ;
var sensitivity = getOption ( options , ' sensitivity ' , ' string ' , [ ' base ' , ' accent ' , ' case ' , ' variant ' ] , undefined ) ; var ignorePunctuation:==:getOption ( options , ' ignorePunctuation ' , ' boolean ' , undefined , false ) ;
var numRe = exports . numRe = ' \\- ? ( ? : ( ? : [ 0 - 9 ] + )  |  ( ? : [ 0 - 9 ] * \\ . [ 0 - 9 ] + ) ) ' ; var pseudoElements:==:exports . pseudoElements    ' ( \\ : + ) \\b ( after | before | first - letter | first - line | moz - selection | selection ) \\b ' ;
var tr = $ ( ' < tr > ' ) ; var select:==:$ ( ' < select > ' ) . attr ( ' class','pe_selectabletime ' ) . attr ( ' id','pe_targetbg_from_'+i ) ;
var anchor = document . getElementById ( ' anchor8 ' ) ; var popup:==:document . getElementById ( ' popup8 ' ) ;
var alreadyRooted = options . alreadyRooted ; var checkSymlinks:==:options . checkSymlinks ;
var has = require ( ' has ' ) ; var once:==:require ( ' once ' ) ;
var multi = _ state . multi ; var multiValue:==:_ state . multiValue ;
var pixelRatio = options . pixelRatio  |  |  ol . has . device_pixel_ratio ; var size:==:options . size ;
var hash = this . hash ( data ) ; var textureCache:==:this . textureCache ;
var callButton = document . querySelector ( ' button#callButton ' ) ; var hangupButton:==:document . querySelector ( ' button#hangupButton ' ) ;
var concat = require ( ' gulp - concat ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var anonymize = opts . anonymizeIp ; var domain:==:opts . domain ;
var panel = jsbin . panels . panels [ panelId ] ; var $ panelButton:==:$ panelButtons . find ( ' a [ href$ ' ' + panelId + ' ' ] ' ) ;
var domElement = drawable . domElement ; var style:==:domElement . style ;
var style = picker . getSelectedRow ( 0 ) . style ; var presentation:==:picker . getSelectedRow ( 1 ) . presentation ;
var appsHelper = _ jsLibHelpers . appsHelper ; var iconHelper:==:_ jsLibHelpers . iconHelper ;
var sockjs = require ( ' sockjs ' ) ; var debug:==:require ( ' debug ' ) ( ' sockjs - client : test - server : app ' ) ;
var error = source . error ; var complete:==:source . complete ;
var n = timelines . length ; var usage:==:spine . Utils . setArraySize ( usageArray , n ) ;
var req = this . req ; var method:==:req . method ;
var column = itemPosition . column ; var left:==:itemPosition . left ;
var callExpression = traceur . syntax . trees . callExpression ; var cascadeExpression:==:traceur . syntax . trees . cascadeExpression ;
var r = int ( random ( 0 , spots . length ) ) ; var spot:==:spots [ r ] ;
var watcher = imports . watcher ; var tree:==:imports . tree ;
var Log = require ( ' grunt - legacy - log ' ) . Log ; var assert:==:require ( ' assert ' ) ;
var textMeasurementService = powerbi . textMeasurementService ; var visualDataRoleKind:==:powerbi . visualDataRoleKind ;
var Note = db . model ( ' noteWithStringId ' , noteSchema , random ( ) ) ; var alice:==:new user ( _ i d : ' alice ' , name : ' alice in wonderland ' ) ;
var shape = param . shape ; var lineWidth:==:param . style . lineWidth ;
var c = this . t . redMul ( this . curve . dd ) . redMul ( p . t ) ; var d:==:this . z . redMul ( p . z . redAdd ( p . z ) ) ;
var x = quadraticAt ( x0 , x1 , x2 , tx ) ; var y:==:quadraticAt ( y0 , y1 , y2 , ty ) ;
var session = this . session ; var chunks:==:this . chunks ;
var groupItem = groupItems [ i ] ; var label:==:$ ( groupItem ) . find ( ' . menu - label ' ) . html ( ) ;
var categoryValue = dataPoint . categoryValue ; var identity:==:subDataPoint . identity ;
var key = keys [ i ] ; var stat:==:this . stats _ . get ( key ) ;
var contactAddress = contacts . contactAddress ; var contactAddressKind:==:contacts . contactAddressKind ;
var dataLabelShow = powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . dataLabelShow , false ) ; var dataLabelColor:==:powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . dataLabelColor , solid : color : defaultColor ) ;
var message = config . messages [ i ] ; var status:==:config . status [ i ] ;
var objectEnumerationBuilder = powerbi . visuals . objectEnumerationBuilder ; var gradientUtils:==:powerbi . visuals . gradientUtils ;
var destination = this . destination ; var project:==:this . project ;
var STATUS_OUT_OF_SYNC = exports . STATUS_OUT_OF_SYNC = 3 ; var STATUS_SYNC_ERROR:==:exports . STATUS_SYNC_ERROR     4 ;
var v2 = sphereTrimesh_v2 ; var relpos:==:sphereTrimesh_relpos ;
var graph = ui . editor . graph ; var div:==:document . createElement ( ' div ' ) ;
var textures = extractFromCache ( meta . textures ) ; var images:==:extractFromCache ( meta . images ) ;
var debug = require ( ' debug ' ) ( ' socket . io - client : socket ' ) ; var parseqs:==:require ( ' parseqs ' ) ;
var extname = path . extname ; var mime:==:send . mime ;
var round = Math . round ; var sqrt:==:Math . sqrt ;
var id1 = ' id1 ' ; var id2:==:' id2 ' ;
var ripple = this . refs . ripple ; var tooltip:==:this . refs . tooltip ;
var thisExpression = traceur . syntax . trees . thisExpression ; var tokenType:==:traceur . syntax . tokenType ;
var categorical = dataView . categorical ; var hasHighlights:==:reader . hasHighlights ( ' y ' ) ;
var options = vm . $ options ; var parent:==:options . parent ;
var url = this . options . url ; var serverData:==:this . _ application . _ serverData ;
var reactNativeComponentTree = require ( ' reactNativeComponentTree ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var client = helper . client ( ) ; var connection:==:client . connection ;
var api = this . client . api ( ) ; var module:==:this . module . get ( ) ;
var O_RDONLY = constants . O_RDONLY  |  |  0 ; var O_RDWR:==:constants . O_RDWR  |  |  0 ;
var classTransformer = traceur . codegeneration . classTransformer ; var collectionTransformer:==:traceur . codegeneration . collectionTransformer ;
var carriers = mobileInfo . brazil . carriers ; var regions:==:mobileInfo . brazil . regions ;
var w = c . width = posterCache . width ; var h:==:c . height    posterCache . height ;
var downvotes = parseInt ( postData . downvotes , 10 )  |  |  0 ; var votes:==:upvotes - downvotes ;
var g = d3 . select ( ' g . ' + className ) ; var path:==:g . select ( ' path ' ) ;
var Store = DS . Store ; var Namespace:==:Ember . Namespace ;
var isFormulaOrTerm = logic . _ isFormulaOrTerm ; var isFormulaOrTermOrBits:==:logic . _ isFormulaOrTermOrBits ;
var technique = techniques [ materials [ primitive . material ] . technique ] ; var parameters:==:technique . parameters ;
var assert = sharedUtil . assert ; var error:==:sharedUtil . error ;
var Suite = Mocha . Suite ; var Runner:==:Mocha . Runner ;
var length = children . length ; var loose:==:node . loose ;
var heading = camera . heading ; var positionCartographic:==:camera . positionCartographic ;
var isEventResizable = t . isEventResizable ; var eventElementHandlers:==:t . eventElementHandlers ;
var samplingRatio = setting & & ( 0 , _ object . hasOwnProperty ) ( setting , ' samplingRatio ' ) ? this . hot . getSettings ( ) . autoRowSize . samplingRatio : void 0 ; var allowSampleDuplicates:==:setting & & ( 0 , _ object . hasOwnProperty ) ( setting , ' allowSampleDuplicates ' ) ? this . hot . getSettings ( ) . autoRowSize . allowSampleDuplicates : void 0 ;
var d = new indexNode ( [ new constantNode ( 2 ) , new constantNode ( 1 ) , new constantNode ( 3 ) ] ) ; var e:==:new indexNode ( [ new constantNode ( 2 ) , new constantNode ( 4 ) ] ) ;
var dh = this . dh _ ; var sel:==:dh . createDom ( ' select ' , ' i d ' : i d ) ;
var GET_CONTEXT = ' GET_CONTEXT ' ; var SET_CONTEXT:==:' SET_CONTEXT ' ;
var vertexFormat = cylinderGeometry . _ vertexFormat ; var slices:==:cylinderGeometry . _ slices ;
var type = start . type ; var name:==:as_property_name ( ) ;
var arc = ( options . arc < = 0  |  |  options . arc > 1 ) ? 1 . 0 : options . arc  |  |  1 . 0 ; var sideOrientation:==:( options . sideOrientation      0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ;
var header = this . refs . header . getHeaderColGrouop ( ) ; var tbody:==:this . refs . body . refs . tbody ;
var e = event  |  |  window . event ; var target:==:e . target  |  |  e . srcElement ;
var selectionId = powerbi . visuals . selectionId ; var axisStyle:==:powerbi . visuals . axisStyle ;
var spawnSync = require ( ' child_process ' ) . spawnSync ; var path:==:require ( ' path ' ) ;
var spy = sinon . spy ( ) ; var marker:==:L . marker ( [ 0 , 0 ] ) . addTo ( map ) ;
var st = this . st ; var graph:==:st . graph ;
var object = _ react . propTypes . object ; var arrayOf:==:_ react . propTypes . arrayOf ;
var big = math . bignumber ; var complex:==:math . complex ;
var util = imports . util ; var join:==:require ( ' path ' ) . join ;
var loneLowSurrogates = parts . loneLowSurrogates ; var bmp:==:parts . bmp ;
var isDefault = this . cli . command ( ' output ' ) . isDefault ( this . argv . output ) ; var folder:==:this . test_settings . output_folder  |  |  this . settings . output_folder ;
var south = rectangle . south ; var east:==:rectangle . east ;
var model = models [ modelType ]  |  |  ; var type:==:model . type  |  |  ' object ' ;
var green = Color . floatToByte ( color . green ) ; var blue:==:color . floatToByte ( color . blue ) ;
var Source = debug . Source ; var Breakpoint:==:debug . Breakpoint ;
var Agent = require ( ' . . ' ) . Agent ; var Transport:==:require ( ' . . ' ) . Transport ;
var input = animation . parameters [ sampler . input ] ; var output:==:animation . parameters [ sampler . output ] ;
var cx = this . attribute ( ' cx ' ) . toPixels ( ' x ' ) ; var cy:==:this . attribute ( ' cy ' ) . toPixels ( ' y ' ) ;
var margin = goog . html . safeStyle . create ( ' margin ' : ' 0 ' ) ; var padding:==:goog . html . safeStyle . create ( ' padding ' : ' 0 ' ) ;
var getFontType = coreFonts . getFontType ; var ispdfFunction:==:coreFunction . ispdfFunction ;
var baseTheme = _ context$muiTheme . baseTheme ; var paper:==:_ context$muiTheme . paper ;
var xml = require ( ' xml ' ) ; var nconf:==:require ( ' nconf ' ) ;
var continueState = traceur . codegeneration . generator . continueState ; var endState:==:traceur . codegeneration . generator . endState ;
var debug = opts . debug  |  |  false ; var tolerance:==:opts . tolerance      undefined ? 0 . 001 : opts . tolerance ;
var babel = require ( ' broccoli - babel - transpiler ' ) ; var path:==:require ( ' path ' ) ;
var entity = geometryUpdater . _ entity ; var polygon:==:entity . polygon ;
var close = options . close  |  |  gettext ( ' Close ' ) ; var onclose:==:options . onclose  |  |  undefined ;
var createNode = vmlCore . createNode ; var textVmlEl:==:this . _ textVmlEl ;
var pow = Math . pow ; var random:==:Math . random ;
var x = _ point . x * component . scaleX + _ point . y * component . scale01 + component . dx ; var y:==:_ point . y * component . scaleY + _ point . x * component . scale10 + component . dy ;
var location = window . location ; var navigator:==:window . navigator ;
var logLevels = consoleLogger . logLevels ; var ware:==:require ( ' ware ' ) ;
var locals = options . locals  |  |  ; var transformTemplate:==:options . transformTemplate  |  |  angular . identity ;
var STRING4 = C . STRING4 = 0x64 ; var STRING5:==:C . STRING5    0x65 ;
var line = target . getAttribute ( ' data - line ' ) * 1 ; var reason:==:target . getAttribute ( ' data - reason ' ) ;
var o = open [ k ] = ' \u001b [ ' + backgroundColorNums [ k ] + ' m ' ; var c:==:close [ k ]    ' \u001b [ 49 m ' ;
var store = new datastore ( tests . data . readOnlyItemFileTestTemplates . getTestData ( ' countries_withnull ' ) ) ; var d:==:new doh . deferred ( ) ;
var apply = cTop . createElement ( ' apply ' ) ; var mrow:==:cTop . createElement ( ' mrow ' ) ;
var oldIndex = event . detail . oldIndex ; var newIndex:==:event . detail . newIndex ;
var child = childView ; var el:==:this . $ element ;
var getView = t . getView ; var reportEvents:==:t . reportEvents ;
var c2 = c1 . comments . create ( title : ' c2 ' ) ; var c3:==:c2 . comments . create ( title : ' c3 ' ) ;
var node = path . node ; var body:==:node . body ;
var language = imports . language ; var jsonalyzer:==:imports [ ' jsonalyzer ' ] ;
var tealA200 = exports . tealA200 = ' # 64ffda ' ; var tealA400:==:exports . tealA400    ' # 1de9b6 ' ;
var nodeName = node . nodeName ; var nodeValue:==:node . nodeValue ;
var fs = require ( ' fs ' ) ; var fork:==:require ( ' child_process ' ) . fork ;
var progress = options & & options . progress ; var strategy:==:options & & options . strategy ;
var primitive = this . _ primitive ; var outlinePrimitive:==:this . _ outlinePrimitive ;
var start = stats . startQueryIndex ; var end:==:stats . endQueryIndex ;
var pattern = asset . pattern ; var source:==:hexo . source ;
var draftModifier = require ( ' draftModifier ' ) ; var editorState:==:require ( ' editorState ' ) ;
var y = this . centerWorld . y - point . y ; var z:==:this . centerWorld . z - point . z ;
var htmlMatcher = emmet . htmlMatcher ; var resources:==:emmet . resources ;
var req = this . req ; var app:==:req . app ;
var width = this . ctx . canvas . width ; var height:==:this . ctx . canvas . height ;
var alarms = this . arg ( ' alarms ' ) ; var isAllDay:==:this . arg ( ' isAllDay ' ) ;
var nock = require ( ' nock ' ) ; var path:==:require ( ' path ' ) ;
var wait = think . await ; var reject:==:think . reject ;
var w = Math . min ( relRect . width , rect . width - relx ) ; var h:==:math . min ( relRect . height , rect . height - rely ) ;
var focus = props . focus ; var focusStyle:==:props . focusStyle ;
var l = _ l ; var accu:==:_ accu ;
var top = region . top + dest . y ; var right:==:region . right + dest . x ;
var vm = require ( ' vm ' ) ; var backbone:==:require ( ' backbone ' ) ;
var lab = exports . lab = Lab . script ( ) ; var before:==:lab . before ;
var mode = frameState . mode ; var billboards:==:billboardCollection . _ billboards ;
var tree = imports . tree ; var settings:==:imports . settings ;
var AWAIT_EXPRESSION = ' AWAIT_EXPRESSION ' ; var BINARY_EXPRESSION:==:' BINARY_EXPRESSION ' ;
var time = cronInfo . time ; var action:==:cronInfo . action ;
var clearOverlays = t . clearOverlays ; var reportSelection:==:t . reportSelection ;
var dynCall_iiiii = Module [ ' dynCall_iiiii ' ] = asm [ ' dynCall_iiiii ' ] ; var dynCall_fii:==:Module [ ' dynCall_fii ' ]    asm [ ' dynCall_fii ' ] ;
var scope = _ ref . scope ; var redirect_uri:==:_ ref . redirect_uri ;
var a31 = this . a31 ; var a32:==:this . a32 ;
var imul = stdlib . Math . imul ; var min:==:stdlib . Math . min ;
var w = ( this . _ bRtlMode ? this . originalRectangle . width - deltax : this . originalRectangle . width + deltax )  |  |  0 ; var h:==:this . originalRectangle . height + deltay  |  |  0 ;
var line = options . line ; var column:==:options . column ;
var tangent = tangentScratch ; var normal:==:normalScratch ;
var blogPostFooter = require ( ' blogPostFooter ' ) ; var excerptLink:==:require ( ' excerptLink ' ) ;
var i = [ ] , ii = 0 ; var s:==:[ ] , si    0 ;
var color = props . color ; var innerStyle:==:props . innerStyle ;
var setInnerhtml = scope . setInnerhtml ; var unsafeUnwrap:==:scope . unsafeUnwrap ;
var option = seriesModel . option ; var smooth:==:option . smooth ? smooth : null ;
var cloud0 = cloudLayer . create ( 200 , 120 , ' cloud0 ' ) ; var cloud1:==:cloudLayer . create ( -60 , 120 , ' cloud1 ' ) ;
var colorizer = require ( ' colorizer ' ) . create ( ' Colorizer ' ) ; var fs:==:require ( ' fs ' ) ;
var height = parseInt ( $ ( this . box ) . height ( ) ) ; var width:==:parseInt ( $ ( this . box ) . width ( ) ) ;
var debug = require ( ' debug ' ) ( ' keystone : core : initExpressSession ' ) ; var promise:==:require ( ' es6-promise ' ) . promise ;
var visualizers = dataSource . _ visualizers ; var length:==:visualizers . length ;
var documentFragment = scope . wrappers . documentFragment ; var treeScope:==:scope . treeScope ;
var indentUnit = config . indentUnit ; var keywords:==:parserConfig . keywords  |  |  ;
var ui = imports . ui ; var menus:==:imports . menus ;
var showAnim = $ . datepicker . _ get ( inst , ' showAnim ' ) ; var duration:==:$ . datepicker . _ get ( inst , ' duration ' ) ;
var r = Math . min ( this . right , region . right ) ; var b:==:Math . min ( this . bottom , region . bottom ) ;
var url = domAgent . url ; var location:==:node . location ;
var l = this . _ indexToValueInSpace ( hash , this . _ lightnessSpace ) ; var a:==:this . _ indexToValueInSpace ( hash , this . _ alphaSpace ) ;
var tabManager = imports . tabManager ; var menus:==:imports . menus ;
var lab = exports . lab = Lab . script ( ) ; var describe:==:lab . describe ;
var npm = require ( ' npm ' ) ; var path:==:require ( ' path ' ) ;
var ttl = cursor . value . _ ttl ; var lastModified:==:cursor . value . _ lastModified ;
var name = param . name ; var value:==:applyScaleFactor ( param . value , scaleFactor , param . scale ) ;
var path = utils . url_path_join ( that . notebook_path , filename ) ; var filedata:==:item . data ( ' filedata ' ) ;
var j = this . ij [ 1 ] ; var level:==:this . level ;
var lineNumber = stackframe . lineNumber ; var columnNumber:==:stackframe . columnNumber ;
var autoContainerWidth = _ props4 . autoContainerWidth ; var autoHeight:==:_ props4 . autoHeight ;
var eventPropagators = require ( ' eventPropagators ' ) ; var syntheticuiEvent:==:require ( ' syntheticuiEvent ' ) ;
var n = this . near ; var f:==:this . far ;
var B = db . model ( name , sB ) ; var J:==:db . model ( ' j ' + random ( ) , sJ ) ;
var positiveValues = valuesPerType [ meta . type ] . positiveValues ; var negativeValues:==:valuesPerType [ meta . type ] . negativeValues ;
var equal = require ( ' assert - dir - equal ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var resolve = require ( ' path ' ) . resolve ; var basename:==:require ( ' path ' ) . basename ;
var isNonThenable = _ _ dependency2 _ _ . isNonThenable ; var keysOf:==:_ _ dependency2 _ _ . keysOf ;
var enterDelay = _ props . enterDelay ; var maxScale:==:_ props . maxScale ;
var plumber   = require ( ' gulp - plumber ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var merge = options . merge ; var remove:==:options . remove ;
var seed = select ( ' # seed ' ) ; var submit:==:select ( ' # submit ' ) ;
var bars = this . bars = options . bars ; var interactors:==:this . interactors    options . interactors ;
var r = der . readString ( asn1 . ber . integer , true ) ; var s:==:der . readString ( asn1 . ber . integer , true ) ;
var eslint = require ( ' gulp - eslint ' ) ; var gulp:==:require ( ' gulp ' ) ;
var invalidHeaderError = errors . invalidHeaderError ; var requestExpiredError:==:errors . requestExpiredError ;
var dx = w * Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx ' , this . dx ) ) ) ) ; var fillColor:==:mxUtils . getValue ( this . style , ' fillColor ' , ' # ffffff ' ) ;
var slice = prototypeOfArray . slice ; var toString:==:call . bind ( prototypeOfObject . toString ) ;
var res = resMap [ i d ]  |  |  resMap [ i d + ' . js ' ]  |  |  ; var pkg:==:res . pkg ;
var params = this . params = rawParams . slice ( 1 ) ; var eligibleHelper:==:this . eligibleHelper    i d . isSimple ;
var sum32_4 = utils . sum32_4 ; var sum32_5:==:utils . sum32_5 ;
var w = imgData . width ; var h:==:imgData . height ;
var util = require ( ' util ' ) ; var hark:==:require ( ' hark ' ) ;
var join = require ( ' path ' ) . join ; var rimraf:==:require ( ' rimraf ' ) ;
var lightGreen100 = exports . lightGreen100 = ' # dcedc8 ' ; var lightGreen200:==:exports . lightGreen200    ' # c5e1a5 ' ;
var tier = tiers [ index ] ; var td:==:document . createElement ( ' td ' ) ;
var left = Math . ceil ( box . left ) ; var right:==:Math . ceil ( box . right ) ;
var groupedChunk = groupedChunksToRequest [ i ] ; var begin:==:groupedChunk . beginChunk * this . chunkSize ;
var _ memcmp = Module [ ' _ memcmp ' ] = asm [ ' _ memcmp ' ] ; var _ im_get_predicts:==:Module [ ' _ im_get_predicts ' ]    asm [ ' _ im_get_predicts ' ] ;
var child = element . childNodes [ i ] ; var name:==:child . getAttribute ( ' name ' ) ;
var data = chart . data ; var datasets:==:data . datasets ;
var credit1 = new Credit ( ' credit1 ' ) ; var credit2:==:new Credit ( ' credit2 ' ) ;
var pixelConverter = jsCommon . pixelConverter ; var arrayExtensions:==:jsCommon . arrayExtensions ;
var offset = TIFF_HEADER_LENGTH + entries_length + ifd_offset + values . length ; var b:==:_ value_to_bytes ( raw_value , value_type , offset ) ;
var colors = this . colors ; var width:==:sprite . width ;
var empty = ! helper . isFalse ( element . data ( ' empty ' ) ) ; var trim:==:! helper . isFalse ( element . data ( ' trim ' ) ) ;
var ENV = process . env . NODE_ENV  |  |  ' development ' ; var express:==:require ( ' express ' ) ;
var inherits = utils . inherits ; var debug:==:require ( ' debug ' ) ( ' mocha : suite ' ) ;
var height = options . height ; var skirtHeight:==:options . skirtHeight ;
var date = this . _ validate ( year , month , day , main . local . invalidDate ) ; var year:==:this . _ t2gYear ( date . year ( ) ) ;
var backdrop = new Animation ( ele . querySelector ( ' . backdrop ' ) ) ; var wrapper:==:new animation ( ele . querySelector ( ' . alert - wrapper ' ) ) ;
var schemaType = require ( ' warehouse ' ) . schemaType ; var util:==:require ( ' util ' ) ;
var bind = utils . bind ; var isIOS:==:utils . device . isIOS ( ) ;
var props = Object . assign ( , element . props ) ; var key:==:element . key ;
var camera = this . camera ; var audioManager:==:this . audioManager ;
var doUglify = buildUtils . doUglify ; var doBrowserify:==:buildUtils . doBrowserify ;
var o = this . options ; var menu:==:this . menu ;
var tilesToRender = this . _ surface . _ tilesToRender ; var length:==:tilesToRender . length ;
var richTextCodeMirror = firepad . richTextCodeMirror ; var richTextToolbar:==:firepad . richTextToolbar ;
var path = require ( ' path ' ) ; var str:==:require ( ' string - to - stream ' ) ;
var x = options [ ' x ' ] ! = null ? options [ ' x ' ] : 0 ; var y:==:options [ ' y ' ] !   null ? options [ ' y ' ] : 0 ;
var transaction = database . transaction ( [ ' states ' ] , ' readwrite ' ) ; var objectStore:==:transaction . objectStore ( ' states ' ) ;
var east = Math . min ( rectangle1 . east , rectangle2 . east ) ; var north:==:Math . min ( rectangle1 . north , rectangle2 . north ) ;
var hasOwnProperty = require ( ' hasOwnProperty ' ) ; var toString:==:require ( ' toString ' ) ;
var getEntityKeyForSelection = require ( ' getEntityKeyForSelection ' ) ; var getTextContentFromFiles:==:require ( ' getTextContentFromFiles ' ) ;
var n = this . options . normal ; var d:==:this . options . distance ;
var setBirthYear = docSet . getByLongname ( ' setBirthYear ' ) [ 0 ] ; var setDogName:==:docSet . getByLongname ( ' setDogName ' ) [ 0 ] ;
var recent = document . getElementById ( ' option - recents ' ) ; var contacts:==:document . getElementById ( ' option - contacts ' ) ;
var path = require ( ' path ' ) ; var favicon:==:require ( ' static - favicon ' ) ;
var font = this . font _ ; var style:==:this . element _ . style ;
var fs = require ( ' fs ' ) ; var wd:==:require ( ' wd ' ) ;
var N = N  |  |  3 ; var fCtr0:==:fCtr0  |  |  15 . 625 ;
var LOST = ' LOST ' ; var EMPTY_ARRAY:==:' EMPTY_ARRAY ' ;
var createExpressionStatement = parseTreeFactory . createExpressionStatement ; var createFalseLiteral:==:parseTreeFactory . createFalseLiteral ;
var graph = data . graph ; var dataType:==:el . dataType ;
var iframe = document . getElementsByTagName ( ' iframe ' ) [ 0 ] ; var name:==:iframe . name ;
var left = leftFunc ( segment . leftCol ) ; var right:==:rightFunc ( segment . rightCol ) ;
var _ strcpy = Module [ ' _ strcpy ' ] = asm [ ' _ strcpy ' ] ; var dynCall_viiiii:==:Module [ ' dynCall_viiiii ' ]    asm [ ' dynCall_viiiii ' ] ;
var tokenType = traceur . syntax . tokenType ; var expandMemberLookupExpression:==:traceur . codegeneration . expandMemberLookupExpression ;
var settings = this . dataView . settings ; var heightColumn:==:math . max ( this . heightColumn , 0 ) ;
var checkpointInterval = opts . checkpointInterval  |  |  null ; var maxMessages:==:opts . maxMessages  |  |  infinity ;
var importDeclaration = traceur . syntax . trees . importDeclaration ; var importBinding:==:traceur . syntax . trees . importBinding ;
var br = document . createElement ( ' br ' ) ; var span:==:goog . dom . createDom ( ' span ' , null , text , br ) ;
var object = objects [ o ] . object ; var geometry:==:object . geometry ;
var rowBytes = this . rowBytes ; var pixBytes:==:this . pixBytes ;
var entity = geometryUpdater . _ entity ; var box:==:entity . box ;
var period = this . _ period ; var dueTime:==:this . dueTime ;
var style = powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . style , visuals . lineStyle . dashed ) ; var position:==:powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . position , visuals . referenceLinePosition . front ) ;
var EXPORT_SPECIFIER_SET = ' EXPORT_SPECIFIER_SET ' ; var EXPORT_STAR:==:' EXPORT_STAR ' ;
var start = this . ELAN . renderedAlignable [ i ] . start ; var end:==:this . elan . renderedAlignable [ i ] . end ;
var webdriver = require ( ' selenium - webdriver ' ) ; var async:==:require ( ' async ' ) ;
var gulp = require ( ' gulp ' ) ; var to5:==:require ( ' gulp-6to5 ' ) ;
var tls = require ( ' tls ' ) ; var inherits:==:require ( ' util ' ) . inherits ;
var testing = options . testing ; var debug:==:options . debug ;
var focusStyle = props . focusStyle ; var muiTheme:==:props . muiTheme ;
var poll = env . proc ( ' poll ' ) ; var refresh:==:env . proc ( ' refresh ' ) ;
var options = this . options ; var app:==:this . app ;
var Principal = ctx . Principal ; var accessRequest:==:ctx . accessRequest ;
var groupOp = savedFilters [ filterName ] . groupOp ; var rules:==:savedFilters [ filterName ] . rules ;
var dontShowClicks = togetherjs . config . get ( ' dontShowClicks ' ) ; var cloneClicks:==:togetherjs . config . get ( ' cloneClicks ' ) ;
var maxW = settings . maxWidth  |  |  0xffff ; var maxh:==:settings . maxHeight  |  |  0xffff ;
var outer = exports . createElement ( ' ace_outer ' ) ; var style:==:outer . style ;
var level = config . levelsToShow ; var constrained:==:config . constrained ;
var createPropertyNameAssignment = parseTreeFactory . createPropertyNameAssignment ; var createStringLiteral:==:parseTreeFactory . createStringLiteral ;
var should = require ( ' should ' ) ; var sinon:==:require ( ' sinon ' ) ;
var isScrolling = state . isScrolling ; var scrollDirectionHorizontal:==:state . scrollDirectionHorizontal ;
var fs = require ( ' fs - extra ' ) ; var path:==:require ( ' path ' ) ;
var q = a . dqm _ [ a . segment _ ] ; var f:==:a . coeffs _ ;
var left = frustum . left ; var near:==:frustum . near ;
var displayName = _ treeSnapshot$instanc . displayName ; var ownerid:==:_ treeSnapshot$instanc . ownerid ;
var dataZoomModel = this . dataZoomModel ; var ecModel:==:this . ecModel ;
var y = Math . floor ( bb . y1 ) ; var width:==:Math . floor ( bb . width ( ) ) ;
var path     = require ( ' path ' ) ; var fs:==:require ( ' fs ' ) ;
var h = $ this . outerHeight ( ) - el . height ( ) ; var w:==:$ this . outerWidth ( ) - el . width ( ) ;
var PAGE_DONE_CHECK_TIMEOUT = process . env . PAGE_DONE_CHECK_TIMEOUT  |  |  300 ; var RESOURCE_DOWNLOAD_TIMEOUT:==:process . env . RESOURCE_DOWNLOAD_TIMEOUT  |  |  10 * 1000 ;
var offset = file_ids [ file_id ] . offset-1 ; var byteArray:==:file_ids [ file_id ] . byteArray ;
var x2 = pf ( node . getAttribute ( ' x2 ' ) )  |  |  ( x1 + pf ( node . getAttribute ( ' width ' ) ) )  |  |  ( pf ( node . getAttribute ( ' cx ' ) ) + pf ( node . getAttribute ( ' r ' ) ) )  |  |  0 ; var y1:==:pf ( node . getAttribute ( ' y1 ' ) )  |  |  pf ( node . getAttribute ( ' y ' ) )  |  |  ( pf ( node . getAttribute ( ' cy ' ) ) - pf ( node . getAttribute ( ' r ' ) ) )  |  |  0 ;
var Prism = require ( ' Prism ' ) ; var Marked:==:require ( ' Marked ' ) ;
var cache = Event . cache [ uid ] ; var element:==:cache & & cache . element ;
var yearly = price . yearly . value * fx [ ccy ] . rate ; var monthly:==:price . monthly . value * fx [ ccy ] . rate ;
var max = o . max ; var min:==:o . min ;
var separator = options . hasOwnProperty ( ' separator ' ) ? options . separator : ' , ' ; var amount:==:options . amount  |  |  6 ;
var nodebackForPromise = promiseResolver . _ nodebackForPromise ; var errorObj:==:util . errorObj ;
var rowStartIndex = _ ref . rowStartIndex ; var rowStopIndex:==:_ ref . rowStopIndex ;
var d3 = _ addDiv ( ' d3 ' ) , d4 = _ addDiv ( ' d4 ' ) ; var c:==:_ jsPlumb . connect ( source : d3 , target : d4 , anchors : [ ' autoDefault ' , ' autoDefault ' ] ) ;
var defaultValue = options . defaultValue ; var exclusionGroup:==:options . exclusionGroup ;
var predefinedName = traceur . syntax . predefinedName ; var block:==:traceur . syntax . trees . block ;
var dow = moment . localeData ( locale ) . _ week . dow ; var weekdays:==:moment . weekdaysShort ( ) ;
var unicodeBidiService = require ( ' unicodeBidiService ' ) ; var nullthrows:==:require ( ' nullthrows ' ) ;
var opt = item . option ; var keyInfo:==:item . keyInfo ;
var second = parseInt ( kernings [ i ] . getAttribute ( ' second ' ) , 10 ) ; var amount:==:parseInt ( kernings [ i ] . getAttribute ( ' amount ' ) , 10 ) ;
var csrftoken = getCookie ( ' csrftoken ' ) ; var sessionid:==:getCookie ( ' sessionid ' ) ;
var after = parseInt ( afterEl . attr ( ' data - index ' ) , 10 )  |  |  0 ; var tid:==:ajaxify . data . tid ;
var _ bitshift64Shl = module [ ' _ bitshift64Shl ' ] = asm [ ' _ bitshift64Shl ' ] ; var _ i64Subtract:==:module [ ' _ i64Subtract ' ]    asm [ ' _ i64Subtract ' ] ;
var width = graphicsDevice . width ; var height:==:graphicsDevice . height ;
var moduleSpecifier = traceur . syntax . trees . moduleSpecifier ; var nameStatement:==:traceur . syntax . trees . nameStatement ;
var origin = new URL ( url ) . origin ; var scopes:==:this . _ scopes [ origin ] ;
var add = new operatorNode ( ' + ' , ' add ' , [ a , a ] ) ; var sub:==:new operatorNode ( ' - ' , ' subtract ' , [ a , a ] ) ;
var isArray = nv . utils . isArray ( dst [ key ] ) ; var isObject:==:nv . utils . isObject ( dst [ key ] ) ;
var tipLabel = options . tipLabel ! = = undefined ? options . tipLabel : ' overview map ' ; var collapseLabel:==:options . collapseLabel !    undefined ? options . collapseLabel : ' \u00ab ' ;
var a = new global . int8Array ( buffer ) ; var b:==:new global . int16Array ( buffer ) ;
var touch = touches [ i ] ; var i d:==:touch . identifier ;
var Contacts = Windows . applicationModel . contacts ; var contactManager:==:contacts . contactManager ;
var size = utils . getInputIntValue ( ' # input - import - image - size ' , undefined , 0 )  |  |  0 ; var title:==:utils . getInputTextValue ( ' # input - import - image - title ' ) ;
var vel1 = resolveSingleBilateral_vel1 ; var vel2:==:resolveSingleBilateral_vel2 ;
var sinon = require ( ' sinon ' ) ; var connect:==:require ( ' connect ' ) ;
var dx2 = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx2 ' , this . dx2 ) ) ) ) ; var notch:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' notch ' , this . notch ) ) ) ) ;
var repeat = require ( ' repeat - string ' ) ; var trim:==:require ( ' trim ' ) ;
var params = options . params  |  |  [ ] ; var headers:==:options . headers  |  |  [ ] ;
var width = $ ( ' # view - canvas - map ' ) . prop ( ' width ' ) ; var height:==:$ ( ' # view - canvas - map ' ) . prop ( ' height ' ) ;
var translate = interp ( fromM . translate , toM . translate , f ) ; var scale:==:interp ( fromM . scale , toM . scale , f ) ;
var direction = ray . direction ; var center:==:sphere . center ;
var ifd0LengthDataSection = ifDlengths . ifd0LengthDataSection ; var exififdLength:==:ifDlengths . exififdLength ;
var util = imports . util ; var metrics:==:imports . metrics ;
var object = require ( ' object - component ' ) ; var debug:==:require ( ' debug ' ) ( ' socket . io - client : manager ' ) ;
var source = this . source ( ) ; var start:==:r . start ;
var stack = parser . stack _ ; var result:==:parser . result _ ;
var destroyTables = window . destroyTables ; var iNumberOfCols:==:window . iNumberOfCols ;
var diff = utils . diff ; var deepEqual:==:utils . deepEqual ;
var after = require ( ' after ' ) ; var assert:==:require ( ' assert ' ) ;
var Compiler = Handlebars . Compiler = function ( ) ; var javaScriptCompiler:==:handlebars . javaScriptCompiler    function ( ) ;
var emptyFunction = require ( ' emptyFunction ' ) ; var joinClasses:==:require ( ' joinClasses ' ) ;
var loopback = require ( ' loopback ' ) ; var express:==:require ( ' express ' ) ;
var debug = require ( ' debug ' ) ( ' pm2 : cli : startup ' ) ; var chalk:==:require ( ' chalk ' ) ;
var born = this . _ options . born ; var survive:==:this . _ options . survive ;
var version = plugin . version ; var important:==:notification . important ;
var min1 = e1 . min1 . value ; var max1:==:e1 . max1 . value ;
var Transaction = require ( ' Transaction ' ) ; var reactUpdateQueue:==:require ( ' reactUpdateQueue ' ) ;
var sourcemaps = require ( ' gulp - sourcemaps ' ) ; var webserver:==:require ( ' gulp - webserver ' ) ;
var selected = $ ( obj . el ) . data ( ' selected ' ) ; var focus:==:$ ( obj . helpers . focus ) . find ( ' input ' ) ;
var locations = _ . isString ( opts . locations ) ? [ opts . locations ] : opts . locations ; var runtimePath:==:opts . runtimePath ;
var min = Math . min ( selectionMgr . selectionStart , selectionMgr . selectionEnd ) ; var max:==:math . max ( selectionMgr . selectionStart , selectionMgr . selectionEnd ) ;
var cache = this . cache ; var engines:==:this . engines ;
var values = this . values ; var spaces:==:this . spaces ;
var Date = global . Date ; var setTimeout:==:global . setTimeout ;
var reactNativeComponentEnvironment = require ( ' reactNativeComponentEnvironment ' ) ; var reactNativeTextComponent:==:require ( ' reactNativeTextComponent ' ) ;
var stackPartitions = property . getValueOrUndefined ( ellipsoid . stackPartitions , time ) ; var slicePartitions:==:property . getValueOrUndefined ( ellipsoid . slicePartitions , time ) ;
var req = resp . request ; var logger:==:req . service . config . logger ;
var path = require ( ' path ' ) ; var sha1:==:require ( ' sha1 ' ) ;
var userId = this . context . userId ; var pwd:==:options . pwd  |  |  '' ;
var width = this . _ model . get ( ' width ' ) ; var height:==:this . _ model . get ( ' height ' ) ;
var main = document . getElementById ( ' main ' ) ; var footer:==:document . getElementById ( ' footer ' ) ;
var type = entity . type ; var info:==:entity . info ;
var c = createContext ( ) ; var destroyableObject:==:jasmine . createSpyObj ( ' destroyableObject ' , [ ' destroy ' ] ) ;
var Terminal = imports . Terminal ; var async:==:require ( ' async ' ) ;
var denodeify = require ( ' denodeify ' ) ; var fs:==:require ( ' fs ' ) ;
var bluebird = require ( ' bluebird ' ) ; var path:==:require ( ' path ' ) ;
var config = store . storeModel . config ; var state:==:store . state ;
var scheduler = instance . get ( ' scheduler ' ) ; var filterFn:==:instance . get ( ' filterFn ' ) ;
var positions = params . positions ; var ellipsoid:==:params . ellipsoid ;
var examplePages = constants . examplePages ; var otherPages:==:constants . otherPages ;
var debug = _ dereq _ ( ' debug ' ) ( ' engine . io - client : socket ' ) ; var index:==:_ dereq _ ( ' indexof ' ) ;
var test = new Test ( ' a test ' , noop ) ; var err:==:new Error ( ' an error message ' ) ;
var symbolicName = r . symbolicName ; var keyId:==:r . keyIdentifier ;
var key = KEY_MODS [ hashId ] + keyString ; var command:==:this . commandKeyBinding [ key ] ;
var newHeight = pair . value . newHeight ; var oldHeight:==:pair . value . oldHeight ;
var g = this . grid ; var cols:==:g . cols . groups ;
var widget = this . options . widgetId ; var div:==:document . createElement ( ' div ' ) ;
var commandProcessError = errors . commandProcessError ; var commandResult:==:errors . commandResult ;
var register = load ( _ _ webpack_require _ _ ( 7 ) ) . register ; var compile:==:load ( _ _ webpack_require _ _ ( 7 ) ) . compile ;
var type = event . data [ ' type ' ] ; var payload:==:event . data [ ' payload ' ] ;
var previoushmdPosition = this . previoushmdPosition ; var sceneEl:==:this . el . sceneEl ;
var key = keyvalue [ 0 ] . trim ( ) ; var value:==:keyvalue . slice ( 1 ) . join ( ' : ' ) . trim ( ) ;
var tangents   = opts & & opts . tangents ! = = undefined ? opts . tangents : null ; var colors:==:opts & & opts . colors !    undefined ? opts . colors : null ;
var max = cfg . max  |  |  100 ; var count:==:cfg . count  |  |  8 ;
var concat = require ( ' concat - stream ' ) ; var vm:==:require ( ' vm ' ) ;
var css = ref . css ; var type:==:ref . type ;
var ellipsoid = this . _ ellipsoid ; var origin:==:this . _ origin ;
var xml = document . getElementById ( ' xml ' ) ; var xslt:==:document . getElementById ( ' xslt ' ) ;
var stage = this . stage ; var style:==:canvas . style ;
var x = Math . cos ( radian ) * radius + this . cx ; var y:==:-Math . sin ( radian ) * radius + this . cy ;
var assert = test . assert ; var expect:==:test . expect ;
var text = this . property . text ; var index:==:text . indexOf ( ' : ' ) ;
var COMPREHENSION_IF = ' COMPREHENSION_IF ' ; var COMPUTED_PROPERTY_NAME:==:' COMPUTED_PROPERTY_NAME ' ;
var   STORED = 14 ; var   COPY _:==:15 ;
var http = require ( ' http ' ) ; var util:==:require ( ' util ' ) ;
var path = require ( ' path ' ) ; var concat:==:require ( ' concat - stream ' ) ;
var x = _ vector3 . x * _ svgWidthHalf ; var y:==:- _ vector3 . y * _ svgHeightHalf ;
var multiparty = require ( ' multiparty ' ) ; var format:==:require ( ' util ' ) . format ;
var entryPoint = options . entryPoint ; var preferredSize:==:options . preferredSize ;
var vim = cm . state . vim ; var inReplay:==:vimGlobalState . macroModeState . inReplay ;
var exportSymbol = traceur . semantics . symbols . exportSymbol ; var identifier_expression:==:traceur . syntax . trees . parseTreeType . identifier_expression ;
var HORIZONTAL_ORIGIN_INDEX = Billboard . HORIZONTAL_ORIGIN_INDEX ; var VERTICAL_ORIGIN_INDEX:==:Billboard . VERTICAL_ORIGIN_INDEX ;
var trim = ! helper . isFalse ( element . data ( ' trim ' ) ) ; var split:==:element . data ( ' split ' ) ;
var eventTime = $ ( ' # eventTimeValue ' ) ; var eventDate:==:$ ( ' # eventDateValue ' ) ;
var value = result . value ; var done:==:result . done ;
var i d = opts . process_id ; var signal:==:opts . signal ;
var Log = exports . Log = _ _ webpack_require _ _ ( 300 ) ; var oidcClient:==:exports . oidcClient    _ _ webpack_require _ _ ( 301 ) ;
var IDENTIFIER_EXPRESSION = ' IDENTIFIER_EXPRESSION ' ; var IF_STATEMENT:==:' IF_STATEMENT ' ;
var commands = imports . commands ; var menus:==:imports . menus ;
var optionRenderer = _ ref . optionRenderer ; var options:==:_ ref . options ;
var createBlock = parseTreeFactory . createBlock ; var createCallStatement:==:parseTreeFactory . createCallStatement ;
var a = m . observable ( 1 ) ; var b:==:m . observable ( 2 ) ;
var React = require ( ' React ' ) ; var Image:==:require ( ' Image ' ) ;
var minCropBoxWidth = number ( options . minCropBoxWidth )  |  |  0 ; var minCropBoxHeight:==:number ( options . minCropBoxHeight )  |  |  0 ;
var notification = element . hasClass ( ' togetherjs - notification ' ) ; var modal:==:element . hasClass ( ' togetherjs - modal ' ) ;
var Fragment = cst . Fragment ; var scopesApi:==:cst . api . scopesApi ;
var doBrowserify = buildUtils . doBrowserify ; var writeFile:==:buildUtils . writeFile ;
var inlineChanges = chunk . inlineChanges ; var row:==:range . start . row ;
var edgeTypeOffset = snapshot . _ edgeTypeOffset ; var edgeNameOffset:==:snapshot . _ edgeNameOffset ;
var forwardWS = updateFriction_forwardWS ; var axle:==:updateFriction_axle ;
var FONTS = this . FONTDATA . FONTS ; var fonts:==:( variant . fonts  |  |  this . FONTDATA . VARIANT . normal . fonts ) ;
var crypto = Npm . require ( ' crypto ' ) ; var fs:==:Npm . require ( ' fs ' ) ;
var a = rejectBuiltInSoon ( ' rejected - a ' , 40 ) ; var b:==:rejectBuiltInSoon ( ' rejected - b ' , 30 ) ;
var path = require ( ' path ' ) ; var nock:==:require ( ' nock ' ) ;
var label = document . getElementById ( ' label ' ) ; var start:==:document . getElementById ( ' start ' ) ;
var l0 = intersectHeightfield_l0 ; var l1:==:intersectHeightfield_l1 ;
var linkedMesh = this . linkedMeshes [ i ] ; var skin:==:linkedMesh . skin     null ? skeletonData . defaultSkin : skeletonData . findSkin ( linkedMesh . skin ) ;
var doc = opt_doc  |  |  goog . dom . getOwnerDocument ( bot . getWindow ( ) ) ; var dom:==:goog . dom . getDomHelper ( doc ) ;
var eventType = subscription . eventType ; var key:==:subscription . key ;
var address = opts . address  |  |  0x23 ; var mode:==:opts . mode  |  |  0x10 ;
var mimetype = mimetypeNode . value ; var filePath:==:( filePathNode & & filePathNode . value ) ;
var dates = this . _ dates ; var lastIndex:==:this . _ lastIndex ;
var con = modal . find ( ' . accounts - con ' ) ; var inputer:==:modal . find ( ' . accounts - inputer ' ) ;
var dimensions = this . dimensions = [ ] ; var parallelAxisIndex:==:this . parallelAxisIndex    [ ] ;
var helpers = Chart . helpers ; var plugins:==:Chart . plugins ;
var resolve = require ( ' path ' ) . resolve ; var join:==:require ( ' path ' ) . join ;
var Parent = require ( ' vfs - child ' ) . Parent ; var fs:==:require ( ' fs ' ) ;
var top = pos . top ; var scrollTop:==:this . $ scrollAnimation ? this . session . getScrollTop ( ) : this . scrollTop ;
var west = Math . max ( rectangle1 . west , rectangle2 . west ) ; var south:==:Math . max ( rectangle1 . south , rectangle2 . south ) ;
var dir = _ _ dirname ; var fs:==:require ( ' fs ' ) ;
var summary = $ ( ' # grid_'+ this . name + ' _ summary ' ) ; var fsummary:==:$ ( ' # grid_'+ this . name + ' _ fsummary ' ) ;
var options = this . options ; var session:==:$ . gestures . session ;
var iterators = this . iterators ; var len:==:iterators . length ;
var center = [ centerX , centerY ] ; var callback:==:options . callback ? options . callback : ol . nullFunction ;
var name = api_result . name . trim ( ) . toLowerCase ( ) ; var created_at:==:new date ( api_result . created_at ) ;
var input = utils . elt ( ' input ' , null , ' class ' : ' firepad - dialog - input ' , ' i d ' : i d , ' type ' : ' text ' , ' placeholder ' : placeholder , ' autofocus ' : ' autofocus ' ) ; var submit:==:utils . elt ( ' a ' , ' Submit ' , ' class ' : ' firepad - btn ' , ' i d ' : ' submitbtn ' ) ;
var registerTransientObservers = scope . registerTransientObservers ; var registerWrapper:==:scope . registerWrapper ;
var ui = imports . ui ; var settings:==:imports . settings ;
var options = that . options ; var getter:==:kendo . getter ;
var format = require ( ' util ' ) . format ; var hbs:==:require ( ' hbs ' ) ;
var g = Math . abs ( color1 . rgb [ 1 ] - color2 . rgb [ 1 ] ) ; var b:==:Math . abs ( color1 . rgb [ 2 ] - color2 . rgb [ 2 ] ) ;
var ring = this . ring ; var childNodes:==:ring . childNodes ;
var keyExpression = options . keyExpression ; var renderBuffer:==:options . renderBuffer ;
var points = this [ ' points ' ] ; var edges:==:this [ ' edges ' ] ;
var createArrayLiteralExpression = parseTreeFactory . createArrayLiteralExpression ; var createAssignStateStatement:==:parseTreeFactory . createAssignStateStatement ;
var isInteger = math . isInteger ; var bignumber:==:math . bignumber ;
var l = hints . length - 1 ; var n:==:Math . round ( Math . random ( ) * l ) ;
var browser = require ( ' browser - sync ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var nodeNameOffset = this . _ nodeNameOffset ; var nodeIdOffset:==:this . _ nodeIdOffset ;
var caretA = data . caretA ; var caretB:==:data . caretB ;
var nodeTypeOffset = this . _ nodeTypeOffset ; var nodeNativeType:==:this . _ nodeNativeType ;
var cropBox = self . cropBox ; var aspectRatio:==:self . options . aspectRatio ;
var paddingBottom = this . parseStyle ( elemStyle . paddingBottom ) ; var scrollParent:==:this . scrollParent ( elem , false , true ) ;
var morgan = require ( ' morgan ' ) ; var optimist:==:require ( ' optimist ' ) ;
var TRAVIS = process . env . TRAVIS ; var lie:==:require ( ' lie ' ) ;
var url = require ( ' url ' ) ; var dive:==:require ( ' diveSync ' ) ;
var address = evt . address ; var i d:==:' div [ data - id ' ' + address + ' ' ] ' ;
var operand = this . transformAny ( tree . operand ) ; var elements:==:this . transformList ( tree . elements ) ;
var req = axon . socket ( ' req ' ) ; var rpc_sock:==:this . rpc_sock    req . connect ( rpc_port ) ;
var fmt = require ( ' fmt ' ) ; var foldl:==:require ( ' foldl ' ) ;
var profile = sbx . data . profile ; var iob:==:results . iob    sbx . properties . iob . iob  |  |  0 ;
var cancelable = defaultValue ( options . cancelable , true ) ; var alpha:==:defaultValue ( options . alpha , 0 . 0 ) ;
var start = span . start ; var end:==:span . end ;
var reactdomFeatureFlags = require ( ' reactdomFeatureFlags ' ) ; var useFiber:==:reactdomFeatureFlags . useFiber ;
var propertyReplacer = goog . require ( ' goog . testing . propertyReplacer ' ) ; var tagName:==:goog . require ( ' goog . dom . tagName ' ) ;
var Plugin = imports . Plugin ; var util:==:imports [ ' collab . util ' ] ;
var less = require ( ' less ' ) ; var postcss:==:require ( ' postcss ' ) ;
var datasets = chart . data . datasets ; var element:==:this . element ;
var rowsMax = _ props . rowsMax ; var shadowStyle:==:_ props . shadowStyle ;
var assert = require ( ' assert ' ) ; var engine:==:require ( ' engine . io ' ) ;
var w = window . innerWidth ; var h:==:window . innerHeight ;
var T_NL = Sk . Tokenizer . T_NL ; var T_OP:==:Sk . Tokenizer . T_OP ;
var Person = db . model ( ' gh4284 ' , personSchema ) ; var blogPost:==:db . model ( ' gh4284_0 ' , blogPostSchema ) ;
var author = this . state . author . trim ( ) ; var text:==:this . state . text . trim ( ) ;
var Menu = imports . Menu ; var Plugin:==:imports . Plugin ;
var ui = imports . ui ; var commands:==:imports . commands ;
var unaryExpression = traceur . syntax . trees . unaryExpression ; var variableDeclaration:==:traceur . syntax . trees . variableDeclaration ;
var m = math . sparse ( [ [ 1,2,3 ] , [ 4,5,6 ] ] ) ; var t:==:transpose ( m ) ;
var w = $ cont . css ( ' overflow','hidden ' ) . width ( ) ; var h:==:$ cont . height ( ) ;
var v = ! opt  |  |  ! opt . hv  |  |  opt . hv [ 1 ] ; var boundingMode:==:opt & & opt . boundingMode  |  |  ' all ' ;
var cache = instance . get ( ' cache ' ) ; var method:==:instance . get ( ' method ' ) ;
var customSite = jQuery . cookie ( ' customSite ' ) ; var showContent:==:conf . customSite . showContent ;
var getInvalidValueWarnings = powerbi . visuals . getInvalidValueWarnings ; var dataLabelUtils:==:powerbi . visuals . dataLabelUtils ;
var a = new Date ; var c:==:clone ( a ) ;
var path = req . params . path ; var user:==:req . user ;
var transformB = input . transformB ; var simplex:==:b2Distance . s_simplex ;
var indexOf = zrUtil . indexOf ; var curry:==:zrUtil . curry ;
var send = $ scope . send ; var recipient:==:send . recipient_address ;
var Date = window . Date ; var setTimeout:==:window . setTimeout ;
var name = method . name ; var args:==:method . args ;
var title = $ ( this ) . attr ( ' gs_title ' ) ? $ ( this ) . attr ( ' gs_title ' ) : '' ; var width:==:$ ( this ) . attr ( ' gs_width ' ) ;
var underlineShow = _ props2 . underlineShow ; var underlineStyle:==:_ props2 . underlineStyle ;
var name = dependant . name ; var dissected:==:this . _ dissected [ name ]  |  |  ( this . _ resolved [ name ] ? this . _ resolved [ name ] [ 0 ] : dependant ) ;
var publish = docSet . getByLongname ( ' observable#publish ' ) [ 0 ] ; var cache:==:docSet . getByLongname ( ' observable . cache ' ) [ 0 ] ;
var lexState = this . lexState ; var interveningWhitespace:==:this . interveningWhitespace ;
var file = r . file ; var err:==:r . error ;
var x = parseFloat ( text . attr ( ' x ' )  |  |  0 ) ; var y:==:parseFloat ( text . attr ( ' y ' )  |  |  0 ) ;
var Strict = db . model ( ' embeddedStrict ' , new schema ( dox : [ strict ] , strict : false ) , ' embdoc ' + random ( ) ) ; var l:==:new lax ( dox : [ content : ' sample ' , rouge : ' data ' ] ) ;
var src = scripts [ i ] . src ; var len:==:src . length ;
var lockType = passedArguments [ 0 ] . lockType ; var enabled:==:passedArguments [ 0 ] . enabled ;
var onError = options . onError  |  |  function ( ) ; var onSuccess:==:options . onSuccess  |  |  function ( ) ;
var path = _ dereq _ ( ' path ' ) ; var constantinople:==:_ dereq _ ( ' constantinople ' ) ;
var l = event . outputBuffer . getChannelData ( 0 ) ; var r:==:event . outputBuffer . getChannelData ( 1 ) ;
var width = options . width ; var ellipsoid:==:options . ellipsoid ;
var bottoms = this . bottoms ; var len:==:tops . length ;
var path = require ( ' path ' ) ; var fs:==:require ( ' graceful - fs ' ) ;
var Complex = math . type . Complex ; var Fraction:==:math . type . Fraction ;
var dataLabelManager = powerbi . dataLabelManager ; var shapes:==:powerbi . visuals . shapes ;
var onRowMouseOut = _ ref . onRowMouseOut ; var rowData:==:_ ref . rowData ;
var stackPartitions = math . round ( defaultValue ( options . stackPartitions , 64 ) ) ; var slicePartitions:==:math . round ( defaultValue ( options . slicePartitions , 64 ) ) ;
var to = this . to ; var from:==:this . from ;
var transactionMode = goog . db . transaction . transactionMode ; var eventTypes:==:goog . db . transaction . eventTypes ;
var tx = ( transform . tx * renderSession . resolution ) + renderSession . shakex ; var ty:==:( transform . ty * renderSession . resolution ) + renderSession . shakey ;
var arrayMap = traceur . util . arrayMap ; var resolveUrl:==:traceur . util . resolveUrl ;
var getDayId = calc . getDayId ; var spanOfMonth:==:calc . spanOfMonth ;
var w = texture . crop . width ; var h:==:texture . crop . height ;
var v3 = triangleNode . getAttribute ( ' v3 ' ) ; var p1:==:triangleNode . getAttribute ( ' p1 ' ) ;
var legendIcon = powerbi . visuals . legendIcon ; var legendPosition:==:powerbi . visuals . legendPosition ;
var promise = Promise . reject ( new Error ( ' think . error promise ' ) ) ; var reject:==:think . reject ;
var createDocumentFragment = document . createDocumentFragment ; var importNode:==:originalDocument . importNode ;
var bind = require ( ' bind ' ) ; var each:==:require ( ' each ' ) ;
var geometry = this . point . geometry ; var features:==:this . control . layer . features ;
var DOCUMENT_NODE     = nodeType . document_node     = 9 ; var document_type_node:==:nodeType . document_type_node      10 ;
var a = fulfillSoon ( ' a ' , 40 ) ; var b:==:fulfillSoon ( ' b ' , 30 ) ;
var source = channelManager . currentTuners . tuner1 . sources . source1 ; var channel:==:source . channels [ 0 ] ;
var balloon1 = BABYLON . Mesh . createSphere ( ' balloon1 ' , 10 , 2 . 0 , scene ) ; var balloon2:==:babylon . mesh . createSphere ( ' balloon2 ' , 10 , 2 . 0 , scene ) ;
var userAgent = require ( ' userAgent ' ) ; var getEntityKeyForSelection:==:require ( ' getEntityKeyForSelection ' ) ;
var   COPY _ = 15 ; var   COPY:==:16 ;
var clientId = userIds . clientId ; var userId:==:userIds . userId ;
var eventName = this . eventName ; var selector:==:this . selector ;
var x = extractNumber ( props . x , 0 ) ; var y:==:extractNumber ( props . y , 0 ) ;
var selectionId = powerbi . visuals . selectionId ; var gradientUtils:==:powerbi . visuals . gradientUtils ;
var isScrolling = _ ref2 . isScrolling ; var rowIndex:==:_ ref2 . rowIndex ;
var fs    = require ( ' fs ' ) ; var p:==:path ;
var Stream = require ( ' stream ' ) . Stream ; var util:==:require ( ' util ' ) ;
var tabManager = imports . tabManager ; var path:==:require ( ' path ' ) ;
var fork = require ( ' child_process ' ) . fork ; var async:==:require ( ' async ' ) ;
var modules = backend . modules ; var nodeOps:==:backend . nodeOps ;
var Emitter = events . eventEmitter ; var document:==:document . document ;
var inherit = AWS . util . inherit ; var domain:==:AWS . util . domain ;
var incoming = this . incomingEdgeStencils ( args ) ; var outgoing:==:this . outgoingEdgeStencils ( args ) ;
var Class = kendo . Class ; var support:==:kendo . support ;
var p = this . model . get ( ' poster ' )  |  |  noimg ; var b:==:this . model . get ( ' backdrop ' )  |  |  this . model . get ( ' poster ' )  |  |  nobg ;
var defaultLabelPrecision = visuals . dataLabelUtils . defaultLabelPrecision ; var defaultLabelColor:==:visuals . dataLabelUtils . defaultLabelColor ;
var fs = require ( ' fs ' ) ; var fixtures:==:path . join ( _ _ dirname , ' fixtures ' ) ;
var noSortAlphabetically = configuration . noSortAlphabetically  |  |  false ; var reservedFirst:==:configuration . reservedFirst  |  |  false ;
var touchableOpacity = require ( ' touchableOpacity ' ) ; var touchableWithoutFeedback:==:require ( ' touchableWithoutFeedback ' ) ;
var el = this . el ; var data:==:this . data ;
var copyWithin = ' local copyWithin ' ; var entries:==:' local entries ' ;
var expected = options . expected ; var indentChar:==:options . indentChar ;
var me = document . querySelector ( ' script [ src$='require - config . js ' ] ' ) ; var console:==:window . console  |  |  log : function ( ) ;
var audio2 = document . querySelector ( ' audio#audio2 ' ) ; var callButton:==:document . querySelector ( ' button#callButton ' ) ;
var htmlElement = scope . wrappers . htmlElement ; var registerObject:==:scope . registerObject ;
var marked    = editormd . $ marked ; var markdownToc:==:this . markdownToc    [ ] ;
var x2 = layer . x2  |  |  layer . frame . x ; var y2:==:layer . y2  |  |  layer . frame . y + layer . frame . height ;
var width = $ ( div_old ) . width ( ) ; var height:==:$ ( div_old ) . height ( ) ;
var extrude = queryBooleanValue ( geometryNode , ' extrude ' , namespaces . kml ) ; var tessellate:==:queryBooleanValue ( geometryNode , ' tessellate ' , namespaces . kml ) ;
var start = this . multiselection . start ; var end:==:this . multiselection . end  |  |  this . multiselection . start ;
var objectLoader = coreObj . objectLoader ; var operatorList:==:coreEvaluator . operatorList ;
var tryCatchApply = util . tryCatchApply ; var rangeError:==:errors . rangeError ;
var context = this . context ; var scripts:==:this . scripts ;
var tryCatch3 = util . tryCatch3 ; var errorObj:==:util . errorObj ;
var noop = angular . noop ; var mockLocationPaths:==:options . mockLocationPaths     null ? true : ! ! options . mockLocationPaths ;
var integration = require ( ' analytics . js - integration ' ) ; var clone:==:require ( ' clone ' ) ;
var reflowItemRecord = reflowItemRecords [ i ] ; var xOffset:==:reflowItemRecord . xOffset ;
var DISTANCE_DISPLAY_CONDITION = Polyline . DISTANCE_DISPLAY_CONDITION ; var NUMBER_OF_PROPERTIES:==:Polyline . NUMBER_OF_PROPERTIES ;
var parsejson = require ( ' parsejson ' ) ; var parseqs:==:require ( ' parseqs ' ) ;
var start = new Date ( value . start ) ; var end:==:new Date ( value . end ) ;
var lhost = hash . substring ( hash . indexOf ( ' lhost= ' ) + 6 , hash . indexOf ( ' & ' ) ) ; var lport:==:hash . substring ( hash . indexOf ( ' lport ' ) + 6 , hash . length ) ;
var mapId = this . outgoingMaps _ [ i ] . mapId ; var map:==:this . outgoingMaps _ [ i ] . map ;
var path = uiSourceCode . project ( ) . i d ( ) + ' : ' + uiSourceCode . path ( ) ; var networkurl:==:webInspector . networkMapping . networkurl ( uiSourceCode ) ;
var bufLen = alias ( ' bufLen ' , u32 ) ; var bufPtr:==:alias ( ' bufPtr ' , voidPtr ) ;
var title = options . title  |  |  gettext ( ' Progress ' ) ; var message:==:options . message  |  |  ' ' ;
var Animated = require ( ' Animated ' ) ; var Dimensions:==:require ( ' Dimensions ' ) ;
var props = inst . _ currentElement . props ; var checked:==:props . checked ;
var field = this . fields [ name ] ; var value:==:field . value ;
var useWebvr = scene . _ useWebvr & & scene . mode ! = = sceneMode . scene2d ; var passes:==:scene . _ frameState . passes ;
var self = compressor . self ( ) ; var multiple_if_returns:==:has_multiple_if_returns ( statements ) ;
var codec = protobuf . codec ; var util:==:protobuf . util ;
var jsEntry = params . jsEntry ; var expectedUrl:==:params . expectedUrl ;
var link = getStyleProperty ( item , styleContextStack , ' link ' , null ) ; var linkToPage:==:getStyleProperty ( item , styleContextStack , ' linkToPage ' , null ) ;
var Nothing = Maybe . Nothing ; var Just:==:Maybe . Just ;
var a0 = expected [ i ] . locals . a0 ; var b0:==:expected [ i ] . locals . b0 ;
var w = this . words [ this . length - 1 ] ; var hi:==:this . _ countBits ( w ) ;
var pane1Style = this . props . prefixer . prefix ( _ extends ( , this . props . paneStyle  |  |  , this . props . pane1Style  |  |  ) ) ; var pane2Style:==:this . props . prefixer . prefix ( _ extends ( , this . props . paneStyle  |  |  , this . props . pane2Style  |  |  ) ) ;
var x = min ( max ( bb . l , v . x ) , bb . r ) ; var y:==:min ( max ( bb . b , v . y ) , bb . t ) ;
var stopwatch = priv . get ( this ) . stopwatch ; var e:==:stopwatch . getElapsedTime ( ) ;
var material = first_material  |  |  new THREE . meshLambertMaterial ( color : 0xdddddd , side : geometry . doubleSided ? three . doubleSide : three . frontSide ) ; var geom:==:geometry . mesh . geometry3js ;
var ncp = require ( ' ncp ' ) . ncp ; var chalk:==:require ( ' chalk ' ) ;
var displayName = powerbi . dataViewObject . getValue ( trendProperties , trendLinePropertyNames . displayName ) ; var lineColor:==:powerbi . dataViewObject . getValue ( trendProperties , trendLinePropertyNames . lineColor ) ;
var red300 = exports . red300 = ' # e57373 ' ; var red400:==:exports . red400    ' # ef5350 ' ;
var preloads = $ . data . preloads ; var index:==:preloads . indexOf ( i d ) ;
var zlib = require ( ' zlib ' ) ; var crypto:==:require ( ' crypto ' ) ;
var tagName = match . tagName ; var unarySlash:==:match . unarySlash ;
var expandable = _ props . expandable ; var mediaStyle:==:_ props . mediaStyle ;
var svg = angular . element ( node . querySelector ( ' svg ' ) ) ; var path:==:angular . element ( node . querySelector ( ' path ' ) ) ;
var hours = now . getHours ( ) + hours_offset ; var minutes:==:now . getMinutes ( ) + minutes_offset ;
var stdout = ( err  |  |  e ) . stdout ; var stderr:==:( err  |  |  e ) . stderr ;
var Token = cst . Token ; var Program:==:cst . types . Program ;
var h = canvas . clientHeight ; var bounds:==:this . bounds ;
var pixelRatio = require ( ' pixelRatio ' ) ; var reactNativePropRegistry:==:require ( ' reactNativePropRegistry ' ) ;
var content = this . content [ 0 ] ; var scrollTop:==:content . scrollTop ;
var entityKey = result . entityKey ; var fromCache:==:result . fromCache ;
var Variable = scopeAnalyzer . variable ; var proper:==:scopeAnalyzer . proper ;
var dy = Math . max ( 0 , Math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' dy ' , this . dy ) ) ) ) ; var arrowHead:==:math . max ( 0 , math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' arrowHead ' , this . arrowHead ) ) ) ) ;
var template = require ( ' gulp - template ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var massageSort = localUtils . massageSort ; var getValue:==:localUtils . getValue ;
var items = dragDropIns . items ; var buckets:==:dragDropIns . buckets ;
var b = div . appendChild ( document . createElement ( ' b ' ) ) ; var c:==:div . appendChild ( document . createElement ( ' c ' ) ) ;
var buffered = _ videotag . buffered ; var duration:==:_ videotag . duration ;
var layouts   = require ( ' metalsmith - layouts ' ) ; var permalinks:==:require ( ' metalsmith - permalinks ' ) ;
var len = models . length ; var children:==:$ . _ _ views . todoTable . children ;
var vDiff = this . vDiff ; var impulse1:==:this . impulse1 ;
var trace = gd . _ fullData [ traceIdx ] ; var module:==:trace . _ module ;
var isScrolling = _ ref3 . isScrolling ; var width:==:_ ref3 . width ;
var start = moment . isMoment ( e . start ) ? e . start . unix ( ) : ( e . start ? moment ( e . start ) . unix ( ) : '' ) ; var end:==:moment . isMoment ( e . end ) ? e . end . unix ( ) : ( e . end ? moment ( e . end ) . unix ( ) : '' ) ;
var assert = require ( ' assert ' ) ; var walk:==:require ( ' pug - walk ' ) ;
var bindToAny = document . getElementById ( ' bindToAny ' ) . checked ; var bindToAddress:==:document . getElementById ( ' bindToAddress ' ) . checked ;
var wrapper = that . wrapper ; var disable:==:options . disable ;
var anchor = anchors [ i ] ; var span:==:anchor . querySelector ( ' span ' ) ;
var i = this . i ; var j:==:this . j ;
var currentIndex = previousState . currentIndex + offset ; var n:==:previousState . items . length ;
var map = fileCoverage [ keys . mapKey ] [ key ] ; var hits:==:fileCoverage [ keys . hitsKey ] ;
var y = shape . y ; var width:==:shape . width ;
var i d = condition . i d ; var name:==:condition . name ;
var x = -dimensions . bounds . minx ; var width:==:Math . ceil ( dimensions . width ) + x + doublePadding ;
var debug = require ( ' gulp - debug ' ) ; var notify:==:require ( ' gulp - notify ' ) ;
var events = params . events ; var properties:==:params . properties ;
var bundle = fs . readFileSync ( path . join ( _ _ dirname , ' bundle0 . js ' ) , ' utf-8 ' ) ; var style:==:fs . readFileSync ( path . join ( _ _ dirname , ' style . css ' ) , ' utf-8 ' ) ;
var radii = ellipsoid . radii ; var show:==:ellipsoid . show ;
var yellow50 = exports . yellow50 = ' # fffde7 ' ; var yellow100:==:exports . yellow100    ' # fff9c4 ' ;
var tooltipContent = this . _ tooltipContent ; var formatter:==:tooltipModel . get ( ' formatter ' ) ;
var d = new assignmentNode ( a , x ) ; var e:==:new constantNode ( 3 ) ;
var x = this . orientation . x ; var y:==:this . orientation . y ;
var flash = require ( ' connect - flash ' ) ; var config:==:require ( ' config - lite ' ) ( _ _ dirname ) ;
var expect = chai . expect ; var assert:==:require ( ' assert ' ) ;
var an = new Animator ( this . options . animatorOptions ) ; var from:==:this . options . from + ( this . options . shift * i ) ;
var url = apiCredentials . user_info . url ; var field:==:apiCredentials . user_info . field ;
var path = getRealPath ( iter . path ) ; var dirname:==:utils . dirname ( path ) ;
var containmentEdges = this . containmentEdges ; var firstEdgeIndexes:==:this . _ firstEdgeIndexes ;
var createClassAndSelector = jsCommon . cssConstants . createClassAndSelector ; var textMeasurementService:==:powerbi . textMeasurementService ;
var k = keys [ i ] ; var initials:==:scores [ k ] . initials ;
var debug = bs . debug ; var proxy:==:bs . options . get ( ' proxy ' ) ;
var popupWindowTarget = _ ref . popupWindowTarget ; var silent_redirect_uri:==:_ ref . silent_redirect_uri ;
var reactPortal = require ( ' reactPortal ' ) ; var reactVersion:==:require ( ' reactVersion ' ) ;
var reactdomInjection = require ( ' reactdomInjection ' ) ; var reactGenericBatching:==:require ( ' reactGenericBatching ' ) ;
var brown100 = exports . brown100 = ' # d7ccc8 ' ; var brown200:==:exports . brown200    ' # bcaaa4 ' ;
var blue300 = exports . blue300 = ' # 64b5f6 ' ; var blue400:==:exports . blue400    ' # 42a5f5 ' ;
var left = parseInt ( $ ( this ) . css ( ' left ' ) ) ; var right:==:parseInt ( $ ( this ) . css ( ' right ' ) ) ;
var fraction = math . fraction ; var complex:==:math . complex ;
var touchRippleColor = _ props2 . touchRippleColor ; var touchRippleOpacity:==:_ props2 . touchRippleOpacity ;
var zindex = options . zindex  |  |  50 ; var opacity:==:options . opacity  |  |  70 ;
var stageWidth = slider . _ stageWidth ; var items:==:slider . _ items ;
var t = time : 0 ; var tween:==:game . add . tween ( t ) . to ( time : 1 , 3000 , Phaser . Easing . Linear . None , true ) ;
var xRefParseException = sharedUtil . xRefParseException ; var createPromiseCapability:==:sharedUtil . createPromiseCapability ;
var viewState = frameState . viewState ; var layerState:==:this . layerState _ ;
var store = this . context [ storeKey ] ; var props:==:store & & options . props ( store , this . props ) ;
var levelController = this . levelController = new _ levelController2 . default ( this ) ; var streamController:==:this . streamController    new _ streamController2 . default ( this ) ;
var current = this . current ; var d:==:current . path . getAttributens ( null , 'd ' ) ;
var Rect = graphic . Rect ; var each:==:zrUtil . each ;
var util = imports . util ; var run:==:imports . run ;
var subtreeOffset = config . subtreeOffset ; var align:==:config . align ;
var head = document . getElementsByTagName ( ' head ' ) [ 0 ] ; var script:==:document . createElement ( ' script ' ) ;
var shaderParam = shaderParams [ pname ] ; var semantic:==:shaderParam . semantic ;
var filter = require ( ' gulp - filter ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var L10n = navigator . mozL10n . _ getInternalapi ( ) ; var context:==:l10n . context ;
var i d = _ props2 . i d ; var inputStyle:==:_ props2 . inputStyle ;
var h = highlight [ 0 ] . getBoundingClientRect ( ) . height ; var pos:==:highlight . position ( ) ;
var registry = properties . cidSystemInfo . registry ; var ordering:==:properties . cidSystemInfo . ordering ;
var samplingRatio = setting & & ( 0 , _ object . hasOwnProperty ) ( setting , ' samplingRatio ' ) ? this . hot . getSettings ( ) . autoColumnSize . samplingRatio : void 0 ; var allowSampleDuplicates:==:setting & & ( 0 , _ object . hasOwnProperty ) ( setting , ' allowSampleDuplicates ' ) ? this . hot . getSettings ( ) . autoColumnSize . allowSampleDuplicates : void 0 ;
var content = tree . content = d . firstChild ; var sr2:==:tree . sr2    d . createShadowRoot ( ) ;
var el = this . $ element ; var body:==:el . querySelector ( ' gui - icon - view - body ' ) ;
var schemaError = helpers . schemaError ; var schemaContext:==:helpers . schemaContext ;
var parenthesis = ( options & & options . parenthesis ) ? options . parenthesis : ' keep ' ; var expr:==:this . expr . toString ( options ) ;
var now = Date . now ( ) ; var lineHeight:==:editor . renderer . layerConfig . lineHeight ;
var fullPath = route . redirectedFrom  |  |  route . fullPath ; var base:==:this . history . base ;
var rctDeviceEventEmitter = require ( ' rctDeviceEventEmitter ' ) ; var accessibilityManager:==:nativeModules . accessibilityManager ;
var deltaX = this . _ deltaX + normalizedEvent . pixelx ; var deltay:==:this . _ deltay + normalizedEvent . pixely ;
var names = util . getArg ( sourceMap , ' names ' ) ; var sourceRoot:==:util . getArg ( sourceMap , ' sourceRoot ' , null ) ;
var row = rowCache [ i ] ; var screenRow:==:this . $ screenRowCache [ i ] ;
var width = rect . width + leftMargin + rightMargin ; var height:==:rect . height + topMargin + bottomMargin ;
var HAS_WEBKIT_NATIVE_FULLSCREEN = exports . HAS_WEBKIT_NATIVE_FULLSCREEN = hasWebkitNativeFullScreen ; var has_moz_native_fullscreen:==:exports . has_moz_native_fullscreen    hasMozNativeFullScreen ;
var s = env . _ stdin  |  0 ; var t:==:env . _ stdout  |  0 ;
var curry = zrUtil . curry ; var each:==:zrUtil . each ;
var dx = document . getElementById ( ' dx ' ) ; var dy:==:document . getElementById ( ' dy ' ) ;
var createArgumentList = traceur . codegeneration . parseTreeFactory . createArgumentList ; var createArrayLiteralExpression:==:traceur . codegeneration . parseTreeFactory . createArrayLiteralExpression ;
var i d = detail . i d ; var manifest:==:app . manifest ? app . manifest : app . updateManifest ;
var settings = bin . settings  |  |  ; var desc:==:settings . desc  |  |  settings . title ;
var s = this . actualSize ; var a:==:this . actualScale ;
var group = this . group ; var data:==:this . _ data ;
var Identify = require ( ' facade ' ) . Identify ; var extend:==:require ( ' extend ' ) ;
var photo = vcard . c ( ' photo ' ) ; var avatar:==:core . avatars . get ( user . i d ) ;
var pickOffset = pickOffsets [ pickIndex++ ] ; var offset:==:pickOffset . offset ;
var dynCall_iiiiiiiiiii = Module [ ' dynCall_iiiiiiiiiii ' ] = asm [ ' dynCall_iiiiiiiiiii ' ] ; var dynCall_viiiiiii:==:Module [ ' dynCall_viiiiiii ' ]    asm [ ' dynCall_viiiiiii ' ] ;
var DELETE_PROPERTY = traceur . syntax . predefinedName . delete_property ; var get_property:==:traceur . syntax . predefinedName . get_property ;
var canEvaluate = util . canEvaluate ; var tryCatch:==:util . tryCatch ;
var center = opt_center  |  |  new goog . math . Coordinate ( 0 , 0 ) ; var x:==:this . x ;
var viewRefreshMode = queryStringValue ( link , ' viewRefreshMode ' , namespaces . kml ) ; var viewBoundScale:==:defaultValue ( queryStringValue ( link , ' viewBoundScale ' , namespaces . kml ) , 1 . 0 ) ;
var body = resp . httpResponse . body ; var operation:==:req . service . api . operations [ req . operation ] ;
var classNames = cssSelector . classNames ; var attrs:==:cssSelector . attrs ;
var a = fulfillSoon ( ' a ' , 40 ) ; var b:==:goog . promise . resolve ( ' b ' ) ;
var name = arg . node . name ; var exports:==:this . exports [ name ] ;
var deltaY = event . wheelDeltay  |  |  event . deltay ; var deltax:==:event . wheelDeltax  |  |  event . deltax ;
var framebufferyOffset = defaultValue ( options . framebufferyOffset , 0 ) ; var width:==:defaultValue ( options . width , gl . drawingBufferWidth ) ;
var everymodule = everyauth . everymodule ; var pause:==:_ _ pause ( req ) ;
var allVoices = windows . media . speechSynthesis . speechSynthesizer . allVoices ; var defaultVoice:==:windows . media . speechSynthesis . speechSynthesizer . defaultVoice ;
var option = this . option ; var componentsMap:==:this . _ componentsMap ;
var ry = this . attribute ( ' ry ' ) . toPixels ( ' y ' ) ; var cx:==:this . attribute ( ' cx ' ) . toPixels ( ' x ' ) ;
var PI = Math . PI ; var c:==:Math . ceil ( PI ) ;
var NAME_SPACE_EXPORT = ' NAME_SPACE_EXPORT ' ; var NAME_SPACE_IMPORT:==:' NAME_SPACE_IMPORT ' ;
var User = db . model ( ' gh4073_0 ' , userSchema ) ; var comment:==:db . model ( ' gh4073_1 ' , commentSchema ) ;
var assets = this . system . app . assets ; var i d:==:isNan ( asset ) ? asset . i d : asset ;
var url = URL . parse ( req . url ) . pathname ; var dirname:==:path . dirname ( url ) ;
var v = literalToken . value ; var location:==:literalToken . location ;
var parentNodeInterface = scope . parentNodeInterface ; var selection:==:scope . wrappers . selection ;
var ellipsoid = globe . ellipsoid ; var modelMatrix:==:model . modelMatrix ;
var Scale = Tone_signal_Scale ; var timelineSignal:==:tone_signal_timelinesignal ;
var eventTime = $ ( ' # bc_eventtimevalue ' ) ; var eventDate:==:$ ( ' # bc_eventdatevalue ' ) ;
var data = config . data ; var headers:==:config . headers ;
var c = ast . condition . visit ( this ) ; var t:==:ast . trueExp . visit ( this ) ;
var arraySet = _ _ webpack_require _ _ ( 5 ) . arraySet ; var mappingList:==:_ _ webpack_require _ _ ( 6 ) . mappingList ;
var undoManager = firepad . undoManager ; var wrappedOperation:==:firepad . wrappedOperation ;
var billboardsToUpdate = billboardCollection . _ billboardsToUpdate ; var modelMatrix:==:billboardCollection . _ modelMatrix ;
var Dimensions = require ( ' Dimensions ' ) ; var frameRateLogger:==:require ( ' frameRateLogger ' ) ;
var Change = loopback . Change ; var persistedModel:==:loopback . persistedModel ;
var right = options . right ; var bottom:==:options . bottom ;
var reactNative = require ( ' reactNative ' ) ; var subscribable:==:require ( ' subscribable ' ) ;
var values = categorical & & categorical . values ; var grouped:==:values & & values . grouped ( ) ;
var literalExpression = traceur . syntax . trees . literalExpression ; var literalToken:==:traceur . syntax . literalToken ;
var scene = options . scene ; var dataSourceCollection:==:options . dataSourceCollection ;
var mapId = messageQueue [ i ] . mapId ; var map:==:messageQueue [ i ] . map ;
var width = areaPixelSize . width ; var height:==:areaPixelSize . height ;
var createMemberLookupExpression = parseTreeFactory . createMemberLookupExpression ; var createOperatorToken:==:parseTreeFactory . createOperatorToken ;
var src = this . src ; var cache:==:this . cache ;
var pitchObject = this . pitchObject ; var yawObject:==:this . yawObject ;
var jsmin = require ( ' jsmin ' ) ; var preprocessor:==:require ( ' preprocessor ' ) ;
var dns = require ( ' dns ' ) ; var extend:==:require ( ' extend ' ) ;
var run = test . runId ( ) ; var coll:==:new mongo . collection ( ' livedata_invalidation_collection_'+run , collectionOptions ) ;
var predefinedName = traceur . syntax . predefinedName ; var token:==:traceur . syntax . token ;
var lat = parseFloat ( current_center . lat ( ) . toFixed ( 4 ) ) ; var lng:==:parseFloat ( current_center . lng ( ) . toFixed ( 4 ) ) ;
var baseline = dom . baseline . value ; var size:==:dom . size . value ;
var semver = require ( ' semver ' ) ; var exec:==:require ( ' shelljs ' ) . exec ;
var api = obj . apis [ i ] ; var path:==:api . path ;
var groupItems = this . _ groupItems ; var groupItem:==:groupItems [ groupKey ] ;
var options = $ modal . $ options = angular . extend ( , defaults , config ) ; var promise:==:$ modal . $ promise    $ bsCompiler . compile ( options ) ;
var notebook = Notebook . cache [ notebookId ] ; var len:==:cacheNotes ? cacheNotes . length : 0 ;
var width = shape . width ; var x:==:shape . x ;
var options = that . options ; var dataSource:==:that . dataSource ;
var target = this . target ; var scroll:==:this . scroll ;
var    LIT = 26 ; var CHECK:==:27 ;
var current = diff . current ; var stackedOnCurrent:==:diff . stackedOnCurrent ;
var timeout = Date . now ( ) + ( options . timeout  |  |  DEFAULT_WAIT_FOR_TIMEOUT ) ; var interval:==:options . interval  |  |  DEFAULT_WAIT_FOR_INTERVAL ;
var Controller = _ fxosMvcDistMvc . controller ; var mainView:==:_ appJsViewsMainView [ ' default ' ] ;
var RUNTIME = traceur . syntax . predefinedName . runtime ; var set_property:==:traceur . syntax . predefinedName . set_property ;
var $ element = this . $ element ; var $ popover:==:this . $ popover ;
var hoursFormat = $ dateFormatter . hoursFormat ( format ) ; var timeSeparator:==:$ dateFormatter . timeSeparator ( format ) ;
var console = window . console  |  |  log : function ( ) ; var URL:==:window . URL  |  |  window . webkitURL ;
var assign = require ( ' object - assign ' ) ; var fork:==:require ( ' child_process ' ) . fork ;
var dots = this . dots = options . dots ; var dotLabels:==:options . dotLabels ;
var willLabelsFit = powerbi . visuals . axisHelper . labelLayoutStrategy . willLabelsFit ; var willLabelsWordBreak:==:powerbi . visuals . axisHelper . labelLayoutStrategy . willLabelsWordBreak ;
var os = require ( ' os ' ) ; var child_process:==:require ( ' child_process ' ) ;
var scenario = scenarios . shift ( ) ; var data:==:scenario . data ;
var sortBy = _ props2 . sortBy ; var sortDirection:==:_ props2 . sortDirection ;
var disabled = _ props2 . disabled ; var disableFocusRipple:==:_ props2 . disableFocusRipple ;
var mm = require ( ' mm ' ) ; var nock:==:require ( ' nock ' ) ;
var i d = $ ( this ) . data ( ' i d ' ) ; var box:==:$ ( this ) . parents ( ' . box ' ) ;
var textColor = defaultValue ( parseColorString ( queryStringValue ( node , ' textColor ' , namespaces . kml ) ) , color . black ) ; var text:==:queryStringValue ( node , ' text ' , namespaces . kml ) ;
var min = Math . min ( v0 , v1 ) ; var max:==:Math . max ( v0 , v1 ) ;
var coordinates = rectangle . coordinates ; var show:==:rectangle . show ;
var fs = require ( ' fs ' ) ; var findit:==:require ( ' findit ' ) ;
var htmlCollection = scope . wrappers . htmlCollection ; var nodeList:==:scope . wrappers . nodeList ;
var objectLiteralTransformer = traceur . codegeneration . objectLiteralTransformer ; var objectMap:==:traceur . util . objectMap ;
var prefilteredCubeMap64 = this . prefilteredCubeMap64  |  |  globalSky64 ; var prefilteredCubeMap32:==:this . prefilteredCubeMap32  |  |  globalSky32 ;
var y0 = Math . max ( ymin , Math . floor ( e1 . y0 ) ) ; var y1:==:Math . min ( ymax , Math . ceil ( e1 . y1 ) ) ;
var join = require ( ' path ' ) . join ; var readdirSync:==:require ( ' fs ' ) . readdirSync ;
var attribute = batchTable . attributes [ attributeIndex ] ; var componentsPerAttribute:==:attribute . componentsPerAttribute ;
var period   = options . period ; var minLength:==:options . minLength ;
var query = data . query  |  |  '' ; var searchBy:==:data . searchBy  |  |  ' username ' ;
var format = _ _ webpack_require _ _ ( 11 ) . format ; var clone:==:_ _ webpack_require _ _ ( 5 ) . clone ;
var name = $ ( ' # new - alarm - name ' ) . val ( ) ; var hour:==:parseInt ( $ ( ' # new - alarm - hour ' ) . val ( ) ) ;
var upsert = PouchDB . utils . upsert ; var utils:==:PouchDB . utils . mapReduceUtils ;
var sticky = setSticky ( userOpts . sticky ) ; var duration:==:setDuration ( userOpts . duration ) ;
var routes = exports . routes = internalPropTypes . routes ; var router:==:exports . router    routerShape ;
var fs = require ( ' graceful - fs ' ) ; var path:==:require ( ' path ' ) ;
var t1 = game . add . text ( 100 , 210 , text1 , style ) ; var t2:==:game . add . text ( 100 , 410 , text2 , style ) ;
var minute = parseInt ( $ ( ' # timer - minute ' ) . val ( ) ) % 60 ; var second:==:parseInt ( $ ( ' # timer - second ' ) . val ( ) ) % 60 ;
var windowTimeSpan = state . windowTimeSpan ; var subscriber:==:state . subscriber ;
var clientHeight = this . _ scrollContainer . clientHeight ; var scrollTop:==:this . _ scrollContainer . scrollTop ;
var Calendar = Globalization . Calendar ; var calendarIdentifiers:==:globalization . calendarIdentifiers ;
var b = $ ( ' body ' ) ; var t:==:$ ( ' # privacycontrols . toggle ' ) ;
var nodes = this . nodes ; var nodeCount:==:this . nodeCount ;
var node = nodesToInsert [ i d ] . node ; var parentId:==:nodesToInsert [ i d ] . parentId ;
var end = segment . end ; var delta:==:segment . delta ;
var blue200 = exports . blue200 = ' # 90caf9 ' ; var blue300:==:exports . blue300    ' # 64b5f6 ' ;
var type = ( spec . type = = undefined ) ? ' menu ' : spec . type ; var waitFor:==:( spec . waitFor     undefined ) ? true : spec . waitFor ;
var domMouseMoveTracker = require ( ' domMouseMoveTracker ' ) ; var keys:==:require ( ' keys ' ) ;
var userFields = userFieldsRes . fields ; var sortOrder:==:userFieldsRes . sortOrder ;
var setDogName = docSet . getByLongname ( ' setDogName ' ) [ 0 ] ; var setFirstName:==:docSet . getByLongname ( ' setFirstName ' ) [ 0 ] ;
var clusterNode = this . body . nodes [ clusterNodeId ] ; var containedNodes:==:clusterNode . containedNodes ;
var operationId = anchor [ this . _ operationIdSymbol ] ; var operation:==:operationId & & asyncOperations . get ( operationId ) ;
var api = scope . api . instance . events ; var DELEGATES:==:api . DELEGATES ;
var root = this . _ shadowRoot . createChild ( ' div ' , ' root ' ) ; var svg:==:this . _ createsvgChild ( root , ' svg ' ) ;
var sourceEl = this . sourceEl ; var sceneEl:==:sourceEl . sceneEl ;
var show = _ props . show ; var touch:==:_ props . touch ;
var isOpened = _ props . isOpened ; var keepCollapsedContent:==:_ props . keepCollapsedContent ;
var wd = require ( srcFolder + ' wd ' ) ; var async:==:require ( srcFolder + ' async ' ) ;
var path = require ( ' path ' ) ; var protobuf:==:require ( ' pomelo - protobuf ' ) ;
var a = a : b : ' B1 ' , c : ' C ' , y : ' Y ' ; var b:==:a : b : ' B2 ' , d : ' D ' , z : ' Z ' ;
var source = require ( ' vinyl - source - stream ' ) ; var stream:==:require ( ' event - stream ' ) ;
var r = start . r + ( ( end . r - start . r ) * amount ) ; var g:==:start . g + ( ( end . g - start . g ) * amount ) ;
var async = require ( ' async ' ) ; var extend:==:require ( ' util ' ) . _ extend ;
var path = require ( ' path ' ) ; var phantomjs:==:require ( ' grunt - lib - phantomjs ' ) . init ( grunt ) ;
var i m = this . i m ; var re:==:this . re ;
var debug = require ( ' debug ' ) ( ' socket . io : socket ' ) ; var assign:==:require ( ' object - assign ' ) ;
var options = this . _ options ; var shadows:==:this . _ geometryUpdater . shadowsProperty . getValue ( time ) ;
var rotate = $ scope . rotate*6 ; var trans:==:g . attr ( ' transform ' ) ;
var utils   = require ( ' utils ' ) ; var f:==:utils . format ;
var searchBy = data . searchBy  |  |  ' username ' ; var page:==:data . page  |  |  1 ;
var icon = self . settings . icon , image = '' , shortcut = settings . shortcut ; var url:==:self . encode ( settings . url ) , iconHtml    '' ;
var host = ! socket ? ( options . redis . host  |  |  ' 127 . 0 . 0 . 1 ' ) : null ; var db:==:! socket ? ( options . redis . db  |  |  0 ) : null ;
var x = px * sx + py * shx + tx ; var y:==:px * shy + py * sy + ty ;
var otDocument = imports . otDocument ; var members:==:imports . members ;
var report_plugins = Nightscout . report_plugins ; var scaledTreatmentbg:==:report_plugins . utils . scaledTreatmentbg ;
var createGeometryResults = parameters . createGeometryResults ; var length:==:createGeometryResults . length ;
var suites = benchmarkSuite . suites ; var length:==:suites . length ;
var graph = document . getElementById ( ' graph_div ' ) ; var width:==:parseInt ( graph . style . width , 10 ) ;
var norm = numeric . norminf , any = numeric . any , min = Math . min ; var all:==:numeric . all , gt    numeric . gt ;
var snapX   = opts . snapX ; var snapY:==:opts . snapY ;
var parent = node . parentElement ; var shorthand:==:node . shorthand ;
var gulp = require ( ' gulp ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var selector = target . dataset . selector ; var container:==:configs [ type ] . container ;
var start = stream . start ; var len:==:string . length ;
var seq = item . seq ; var metadata:==:JSON . parse ( item . metadata ) ;
var url = require ( ' url ' ) ; var Gaze:==:require ( ' gaze ' ) . Gaze ;
var dom = ' dom ' ; var any:==:' any ' ;
var doc = ' contentDocument ' in this ? this . contentDocument : this . contentWindow . document ; var a:==:doc . domain ;
var STRING6 = C . STRING6 = 0x66 ; var VALUE:==:C . VALUE    0x71 ;
var distance = parseFloat ( e . distance ) ; var i d:==:e . i d ;
var left = options . left ; var top:==:options . top ;
var options = this . options ; var image:==:this . image ;
var startButton = document . querySelector ( ' button#startButton ' ) ; var callButton:==:document . querySelector ( ' button#callButton ' ) ;
var app = applications . getByManifesturl ( manifesturl ) ; var icons:==:app . manifest . icons ;
var active = skeletons [ activeSkeleton ] ; var skeleton:==:active . skeleton ;
var tree = seriesModel . getData ( ) . tree ; var root:==:tree . root ;
var col = db . collection ( ' update_many_with_generators ' ) ; var r:==:yield col . insertMany ( [ a : 1 , a : 1 ] ) ;
var optionals = lang_1 . isPresent ( extra ) ? collection_1 . stringMapWrapper . get ( extra , ' optionals ' ) : null ; var validator:==:lang_1 . isPresent ( extra ) ? collection_1 . stringMapWrapper . get ( extra , ' validator ' ) : null ;
var attributes = this . _ attributes ; var gl:==:this . _ gl ;
var pageX = touches ? touches [ 0 ] . pageX : e . pageX ; var pageY:==:touches ? touches [ 0 ] . pageY : e . pageY ;
var clone = node . cloneNode ( ) ; var childNodes:==:node . childNodes ;
var value = input . value ; var type:==:e . type ;
var level4 = db . model ( ' level_4 ' , level4Schema ) ; var level3:==:db . model ( ' level_3 ' , level3Schema ) ;
var httpMediaTypeHeaderValue = windows . web . http . headers . httpMediaTypeHeaderValue ; var uri:==:windows . foundation . uri ;
var scaleLabelFont = helpers . fontString ( scaleLabelFontSize , scaleLabelFontStyle , scaleLabelFontFamily ) ; var tickMarkLength:==:opts . gridLines . tickMarkLength ;
var topo = this . topos [ wrapper ] ; var g:==:document . createElementns ( this . ns , ' g ' ) ;
var round = numberUtil . round ; var pi:==:math . pi ;
var scrollTop = _ ref . scrollTop ; var verticalOffsetAdjustment:==:_ ref . verticalOffsetAdjustment ;
var Legend = powerbi . visuals . Legend ; var objectEnumerationBuilder:==:powerbi . visuals . objectEnumerationBuilder ;
var normals = file . body . normals  |  |  [ ] ; var uv:==:file . body . uvMaps ? file . body . uvMaps [ 0 ] . uv : [ ] ;
var e = tree . e = sr2 . firstChild ; var content2:==:tree . content2    e . firstChild ;
var currentConfig = diff . localDiff . currentConfig ; var localDiff:==:diff . localDiff ;
var ace = imports . ace ; var Menu:==:imports . Menu ;
var wrap = options . wrap ; var range:==:options . range ;
var y = 0 . 5 * ( ( ( ( 2 . 0 * value2 . y ) + ( ( -value1 . y + value3 . y ) * amount ) ) + ( ( ( ( ( 2 . 0 * value1 . y ) - ( 5 . 0 * value2 . y ) ) + ( 4 . 0 * value3 . y ) ) - value4 . y ) * squared ) ) + ( ( ( ( -value1 . y + ( 3 . 0 * value2 . y ) ) - ( 3 . 0 * value3 . y ) ) + value4 . y ) * cubed ) ) ; var z:==:0 . 5 * ( ( ( ( 2 . 0 * value2 . z ) + ( ( -value1 . z + value3 . z ) * amount ) ) + ( ( ( ( ( 2 . 0 * value1 . z ) - ( 5 . 0 * value2 . z ) ) + ( 4 . 0 * value3 . z ) ) - value4 . z ) * squared ) ) + ( ( ( ( -value1 . z + ( 3 . 0 * value2 . z ) ) - ( 3 . 0 * value3 . z ) ) + value4 . z ) * cubed ) ) ;
var dt = settings . dt ; var t:==:dt . table ( ) ;
var dynCall_vii = Module [ ' dynCall_vii ' ] = asm [ ' dynCall_vii ' ] ; var dynCall_viiiiiiiii:==:Module [ ' dynCall_viiiiiiiii ' ]    asm [ ' dynCall_viiiiiiiii ' ] ;
var cacheFunctions = options [ ' cacheFunctions ' ] = = null ? false : options [ ' cacheFunctions ' ] ; var cacheFunctionsCrc32:==:options [ ' cacheFunctionsCrc32 ' ]     null ? false : options [ ' cacheFunctionsCrc32 ' ] ;
var req = resp . request ; var httpResponse:==:resp . httpResponse ;
var documentElement = cloneNode ( ownerDocument . documentElement , options . javascriptEnabled ) ; var container:==:containerDocument . createElement ( ' iframe ' ) ;
var v = this . values ; var m:==:matrix . values ;
var U64 = new primitiveType ( ' u64 ' , 8 , ' i ' ) ; var f32:==:new primitiveType ( ' f32 ' , 4 , ' f ' ) ;
var group = groups [ y ] ; var col:==:filterCols ( cols , group ) [ 0 ] ;
var typescript = this . env . options . typescript ; var bower:==:require ( path . join ( process . cwd ( ) , ' bower . json ' ) ) ;
var contract = descriptor . contract ; var client:==:data . client ;
var parseMonth = settings . parseMonth  |  |  this . local . parseMonth ; var monthNumbers:==:settings . monthNumbers  |  |  this . local . monthNumbers ;
var vertices = model . vertices ; var skins:==:model . skins ;
var a = this . _ attribute_table [ name ] ; var stride:==:this . stride , offset    a . offset + this . ent_offset * stride , w    a . width ;
var timeago = require ( ' timeago ' ) ; var staticPrefix:==:options . staticPrefix ;
var . . . x = z ; var . . . a:==:a : 1 ;
var http = this . options . httpCdnUrl ; var https:==:this . options . httpsCdnUrl ;
var key = event . detail . key ; var value:==:event . detail . value ;
var x = this . a . x + ( ua * this . v . x ) ; var y:==:this . a . y + ( ua * this . v . y ) ;
var isBeta = ! ! challengeSpec . isBeta ; var isComingSoon:==:! ! challengeSpec . isComingSoon ;
var typescript = require ( ' gulp - typescript ' ) ; var htmlmin:==:require ( ' gulp - htmlmin ' ) ;
var crypto = Npm . require ( ' crypto ' ) ; var querystring:==:Npm . require ( ' querystring ' ) ;
var POSITION_SIZE_INDEX = Polyline . POSITION_SIZE_INDEX = 4 ; var DISTANCE_DISPLAY_CONDITION:==:Polyline . DISTANCE_DISPLAY_CONDITION    5 ;
var should = require ( ' should ' ) ; var assert:==:require ( ' assert ' ) ;
var Plugin = imports . Plugin ; var upload:==:imports . upload ;
var util = require ( ' util ' ) ; var lodash:==:require ( ' lodash ' ) ;
var words = this . words ; var h:==:this . _ headerWords ;
var components = this . components ; var defaultComponents:==:this . defaultComponents ;
var lazypipe = require ( ' lazypipe ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var request = result . request ; var recursive:==:result . recursive ;
var assert = require ( ' chai ' ) . assert ; var client:==:require ( ' socket . io - client ' ) ;
var isDict = corePrimitives . isDict ; var isStream:==:corePrimitives . isStream ;
var start = mynode . start ; var end:==:mynode . end ;
var Team = app . registry . createModel ( ' team ' , name : ' string ' ) ; var reader:==:app . registry . createModel ( ' reader ' , name : ' string ' ) ;
var createNullLiteral = parseTreeFactory . createNullLiteral ; var createObjectLiteralExpression:==:parseTreeFactory . createObjectLiteralExpression ;
var options = this . get ( ' options ' ) ; var selected:==:this . selected ( ) ;
var db = core . db ; var store:==:core . storeFactory . get ( storeName ) ;
var HAS_BOOLEAN_VALUE = domProperty . injection . has_boolean_value ; var has_numeric_value:==:domProperty . injection . has_numeric_value ;
var refSetCache = corePrimitives . refSetCache ; var isName:==:corePrimitives . isName ;
var quasiSubstitution = traceur . syntax . trees . quasiSubstitution ; var returnStatement:==:traceur . syntax . trees . returnStatement ;
var db = new PouchDB ( dbs . name ) ; var changes:==:db . changes ( live : true ) ;
var debug = imports [ ' plugin . debug ' ] ; var browser:==:imports [ ' preview . browser ' ] ;
var iter = goog . iter . slice ( ' ABCDEFG ' . split ( '' ) , 10 ) ; var ex:==:assertThrows ( function ( ) iter . next ( ) ) ;
var keyCode = e . keyCode ; var volume:==:media . volume ;
var dx1 = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx1 ' , this . dx1 ) ) ) ) ; var dx2:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx2 ' , this . dx2 ) ) ) ) ;
var i d = b . getAttribute ( ' data - id ' ) ; var button:==:buttons [ i d ] ;
var direction = ( params . direction  |  |  1 ) < 0 ? -1 : 1 ; var paintStyle:==:params . paintStyle  |  |  lineWidth : 1 ;
var dates = dom . querySelector ( ' # contacts - form - dates ' ) ; var notes:==:dom . querySelector ( ' # contacts - form - notes ' ) ;
var minWidth = this . _ minWidth ; var entryTotalTimes:==:timelineData . entryTotalTimes ;
var node = unwrap ( nodeWrapper ) ; var parentNode:==:node . parentNode ;
var assert = require ( ' assert ' ) ; var redis:==:config . redis ;
var key = keys [ i ] ; var param:==:params [ key ] ;
var assign = require ( ' object - assign ' ) ; var actionTypes:==:appConstants . actionTypes ;
var firstRow = config . firstRow ; var lastRow:==:config . lastRow ;
var deleteListener = reactBrowserEventEmitter . deleteListener ; var listenTo:==:reactBrowserEventEmitter . listenTo ;
var decodeStream = coreStream . decodeStream ; var stream:==:coreStream . stream ;
var concat = arrayProto . concat ; var toString:==:objProto . toString ;
var direction = Cartesian3 . clone ( orientation . direction , scratchTohprDirection ) ; var up:==:cartesian3 . clone ( orientation . up , scratchTohprUp ) ;
var utils = elliptic . utils ; var assert:==:utils . assert ;
var fullscreenButton = viewer . _ fullscreenButton ; var infoBox:==:viewer . _ infoBox ;
var route = exports . route = oneOfType ( [ object , element ] ) ; var routes:==:exports . routes    oneOfType ( [ route , arrayOf ( route ) ] ) ;
var resolution = viewState . resolution ; var center:==:viewState . center ;
var DOCUMENT_FRAGMENT_NODE   = nodeType . document_fragment_node   = 11 ; var notation_node:==:nodeType . notation_node       12 ;
var button = defaultValue ( options . button , 0 ) ; var relatedTarget:==:defaultValue ( options . relatedTarget , null ) ;
var linkto = helper . linkto ; var resolveAuthorLinks:==:helper . resolveAuthorLinks ;
var left = Math . max ( rect . left * zoomFactor + this . _ margins . left , bodyRect . left * zoomFactor ) ; var top:==:math . max ( rect . top * zoomFactor + this . _ margins . top , bodyRect . top * zoomFactor ) ;
var COMPILER_REVISION = _ _ dependency1 _ _ . COMPILER_REVISION ; var REVISION_CHANGES:==:_ _ dependency1 _ _ . REVISION_CHANGES ;
var run = Ember . run ; var attr:==:DS . attr ;
var params = utils . params ( ) ; var cid:==:params . cid ;
var registerObject = scope . registerObject ; var documentFragment:==:registerObject ( document . createDocumentFragment ( ) ) ;
var stylish = require ( ' jshint - stylish ' ) ; var tar:==:require ( ' gulp - tar ' ) ;
var dom = ' dom ' ; var moment:==:' moment ' ;
var e = readmpInt ( der , ' public exponent ' ) ; var d:==:readmpInt ( der , ' private exponent ' ) ;
var View = require ( ' View ' ) ; var statusBar:==:require ( ' statusBar ' ) ;
var Observable = Rx . Observable ; var Challenge:==:app . models . Challenge ;
var socketMessageType = windows . networking . sockets . socketMessageType ; var unicodeEncoding:==:windows . storage . streams . unicodeEncoding ;
var invsBox = this . invsBox ; var subMix:==:this . subMix ;
var coordinator = scope . _ coordinator ; var store:==:scope . _ store ;
var minHeight = options . minHeight ; var resizeMessage:==:options . resizeMessage ;
var w = parseInt ( svgRoot . getAttribute ( ' width ' ) ) ; var h:==:parseInt ( svgRoot . getAttribute ( ' height ' ) ) ;
var deepOrange100 = exports . deepOrange100 = ' # ffccbc ' ; var deepOrange200:==:exports . deepOrange200    ' # ffab91 ' ;
var map = _ _ webpack_require _ _ ( 3 ) . map ; var join:==:_ _ webpack_require _ _ ( 3 ) . join ;
var toRadians = cesiumMath . toRadians ; var heightmap:==:options . heightmap ;
var axon   = require ( ' pm2-axon ' ) ; var os:==:require ( ' os ' ) ;
var ellipsisIndex = options . ellipsisIndex  |  |  3 ; var ellipsisCharacter:==:options . ellipsisCharacter  |  |  ' . . . ' ;
var ui = app . ns ( ' ui ' ) ; var ux:==:app . ns ( ' ux ' ) ;
var db = mandreel_indexedDB . db ; var trans:==:db . transaction ( [ ' cache ' ] ) ;
var meshes = this . _ meshes ; var index:==:meshes . indexOf ( mesh ) ;
var links = cluster . links ( nodes ) ; var diagonal:==:diagonalCluster ;
var success = options . success ; var error:==:options . error ;
var isArray = mathJax . object . isArray ; var ispc:==:hub . browser . ispc , ismsie    hub . browser . ismsie , isie9    ( ( document . documentMode |  | 0 ) > 8 ) ;
var bulkInPipes = usbInterface . bulkInPipes ; var bulkOutPipes:==:usbInterface . bulkOutPipes ;
var json = JSON . parse ( fs . readFileSync ( ' package . json ' , ' utf8 ' ) ) ; var version:==:json . version ;
var Node = scope . wrappers . Node ; var parentNodeInterface:==:scope . parentNodeInterface ;
var doc = this . document ; var script:==:doc . createElement ( ' script ' ) ;
var low = _ ref5 . low ; var offset:==:_ ref5 . offset ;
var eye = SIMD . float32x4 ( eyeVec . x , eyeVec . y , eyeVec . z , 0 . 0 ) ; var up:==:simd . float32x4 ( upVec . x , upVec . y , upVec . z , 0 . 0 ) ;
var caseClause = traceur . syntax . trees . caseClause ; var defaultClause:==:traceur . syntax . trees . defaultClause ;
var assert = scope . assert ; var defineWrapGetter:==:scope . defineWrapGetter ;
var dom = goog . dom . getDomHelper ( ) ; var a:==:dom . createDom ( goog . dom . tagName . a ) ;
var pixelDimIndex = layoutInfo . pixelDimIndex ; var axisExpandWindow:==:layoutInfo . axisExpandWindow . slice ( ) ;
var fov = camera . frustum . fov ; var viewport:==:this . _ viewport ;
var argv = require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ; var fs:==:Promise . promisifyAll ( require ( ' fs ' ) ) ;
var dataViewTransform = powerbi . data . dataViewTransform ; var sqExprBuilder:==:powerbi . data . sqExprBuilder ;
var pseudoElements = exports . pseudoElements = ' ( \\ : + ) \\b ( after | before | first - letter | first - line | moz - selection | selection ) \\b ' ; var pseudoClasses:==:exports . pseudoClasses    ' ( : ) \\b ( active | checked | disabled | empty | enabled | first - child | first - of - type | focus | hover | indeterminate | invalid | last - child | last - of - type | link | not | nth - child | nth - last - child | nth - last - of - type | nth - of - type | only - child | only - of - type | required | root | target | valid | visited ) \\b ' ;
var i d = codeDiv . closest ( ' div . slide ' ) . attr ( ' i d ' ) ; var index:==:$ ( ' div . slide#'+id+ ' code . execute ' ) . index ( codeDiv ) ;
var propertyNameAssignment = traceur . syntax . trees . propertyNameAssignment ; var parseTreeTransformer:==:traceur . codegeneration . parseTreeTransformer ;
var pitch = document . getElementById ( ' pitch ' ) ; var rate:==:document . getElementById ( ' rate ' ) ;
var log = stdlib . Math . log ; var sqrt:==:stdlib . Math . sqrt ;
var temperature = params . temperature ; var shadowsHue:==:params . shadowsHue ;
var visible = options . visible = = null  |  |  options . visible ; var index:==:options . index  |  |  100 ;
var geometryUpdater = this . _ geometryUpdater ; var entity:==:geometryUpdater . _ entity ;
var polygonHierarchy = options . polygonHierarchy ; var vertexFormat:==:defaultValue ( options . vertexFormat , vertexFormat . default ) ;
var content2 = tree . content2 = b . firstChild ; var sr3:==:tree . sr3    b . createShadowRoot ( ) ;
var joinClasses = require ( ' joinClasses ' ) ; var dir_sign:==:fixedDataTableHelper . dir_sign ;
var verticies = this . verticies ; var uvs:==:this . uvs ;
var e = new Event ( ' x ' , bubbles : true ) ; var doc:==:wrap ( document ) ;
var ddoc = indexDef . ddoc ; var type:==:indexDef . type  |  |  ' json ' ;
var w = viewportSize . width * 2 ; var h:==:viewportSize . height * 2 ;
var sentences = queueData . sentences ; var sentence:==:sentences [ sentences . length - 1 ] ;
var warn = sharedUtil . warn ; var name:==:corePrimitives . name ;
var children = that . element [ 0 ] . children ; var selectable:==:that . options . selectable ;
var w = Math . round ( img . width * s ) ; var h:==:Math . round ( img . height * s ) ;
var path = require ( ' path ' ) ; var moment:==:require ( ' moment ' ) ;
var img = document . createElement ( ' img ' ) ; var div:==:document . createElement ( ' div ' ) ;
var expect = chai . expect ; var assert:==:chai . assert ;
var onFocus = _ props2 . onFocus ; var style:==:_ props2 . style ;
var brushCanvas = this . _ brushCanvas  |  |  ( this . _ brushCanvas = zrUtil . createCanvas ( ) ) ; var r:==:this . pointSize + this . blurSize ;
var replacer = app . get ( ' json replacer ' ) ; var spaces:==:app . get ( ' json spaces ' ) ;
var formats = this . _ formats ; var RULES:==:this . RULES ;
var store = new datastore ( tests . data . readOnlyItemFileTestTemplates . getTestData ( ' countries_withoutid ' ) ) ; var d:==:new doh . deferred ( ) ;
var algorithmName = args . detail . continuationData [ ' algorithmName ' ] ; var file:==:args . detail . files [ 0 ] ;
var indigo50 = exports . indigo50 = ' # e8eaf6 ' ; var indigo100:==:exports . indigo100    ' # c5cae9 ' ;
var connect = imports . connect ; var render:==:imports [ ' connect . render ' ] ;
var STOP = C . STOP = 0x12 ; var TRUE1:==:C . TRUE1    0x21 ;
var getElementsByInterface = scope . getElementsByInterface ; var nonElementParentNodeInterface:==:scope . nonElementParentNodeInterface ;
var React = require ( ' React ' ) ; var Recording:==:require ( ' nativeModules ' ) . recording ;
var range = options & & options . range  |  |  RANGE ; var cur:==:editor . getCursor ( ) , curLine    editor . getLine ( cur . line ) ;
var masksets = $ input . data ( ' _ inputmask ' ) [ ' masksets ' ] ; var activeMasksetIndex:==:$ input . data ( ' _ inputmask ' ) [ ' activeMasksetIndex ' ] ;
var marker = this . markers [ key ] ; var range:==:marker . range . clipRows ( config . firstRow , config . lastRow ) ;
var hat = require ( ' hat ' ) ; var assert:==:require ( ' assert ' ) ;
var level = Math . round ( battery . level * 100 ) ; var levels:==:this . levels ;
var o = open [ k ] = ' \u001b [ ' + colorNums [ k ] + ' m ' ; var c:==:close [ k ]    ' \u001b [ 39 m ' ;
var isString = sharedUtil . isString ; var shadow:==:sharedUtil . shadow ;
var array = _ react$PropTypes . array ; var func:==:_ react$PropTypes . func ;
var $ attrs = this . $ attrs ; var $ element:==:this . $ element ;
var json = alias . json ( ) ; var user:==:this . analytics . user ( ) ;
var privateKey = fs . readFileSync ( path . resolve ( config . secure . privateKey ) , ' utf8 ' ) ; var certificate:==:fs . readFileSync ( path . resolve ( config . secure . certificate ) , ' utf8 ' ) ;
var exceptConditionals = this . _ exceptConditionals ; var exceptFunctions:==:this . _ exceptFunctions ;
var b = rejectSoon ( ' rejected - b ' , 30 ) ; var c:==:' c ' ;
var path    = require ( ' path ' ) ; var fs:==:require ( ' fs ' ) ;
var xScale = axisOptions . xScale ; var yScale:==:axisOptions . yScale ;
var base    = desc . stat_desc . extra_base ; var max_length:==:desc . stat_desc . max_length ;
var yScale0 = chart . scales . yScale0 ; var yScale1:==:chart . scales . yScale1 ;
var currentReel = this . _ currentReel ; var frame:==:currentReel . frames [ currentReel . currentFrame ] ;
var merge    = cli . merge ; var assert:==:require ( ' chai ' ) . assert ;
var srcVideo = document . getElementById ( ' srcVideo ' ) ; var motionVideo:==:document . getElementById ( ' motionVideo ' ) ;
var assert = require ( ' assert ' ) ; var Parser:==:require ( ' cst ' ) . Parser ;
var models = _ _ alloyId64 . models ; var len:==:models . length ;
var name = child . getChildNode ( ' name ' ) ; var age:==:child . getChildNode ( ' age ' ) ;
var _ im_enable_ym_as_szm = Module [ ' _ im_enable_ym_as_szm ' ] = asm [ ' _ im_enable_ym_as_szm ' ] ; var _ strlen:==:Module [ ' _ strlen ' ]    asm [ ' _ strlen ' ] ;
var rect = type : ' rect ' , x : 10 , y : 10 ; var ellipse:==:type : ' ellipse ' , x : 10 , y : 10 ;
var head = document . head  |  |  document . getElementsByTagName ( ' head ' ) [ 0 ]  |  |  document . documentElement ; var script:==:document . createElement ( ' script ' ) ;
var el = this . el ; var geometry:==:this . geometry ;
var express = require ( ' express ' ) ; var config:==:require ( ' config ' ) ;
var normal = attributes [ ' normal ' ] ; var uv:==:attributes [ ' uv ' ] ;
var from = navigationTransition . states . from ; var to:==:navigationTransition . states . to ;
var req = this . req ; var next:==:req . next ;
var api = hello . api ; var utils:==:hello . utils ;
var canvas = document . querySelector ( ' . canvas ' ) ; var script:==:document . querySelector ( ' . script ' ) ;
var proto = Object . create ( htmlElement . prototype ) ; var innerhtml:==:object . getOwnPropertyDescriptor ( element . prototype , ' innerhtml ' ) ;
var height = rect . height ; var min:==:Math . min ( width , height ) ;
var createRestParameter = parseTreeFactory . createRestParameter ; var createSpreadExpression:==:parseTreeFactory . createSpreadExpression ;
var selected = el . getAttribute ( ' data - selected ' ) ; var select:==:document . createElement ( ' select ' ) ;
var fs = imports . fs ; var navigate:==:imports . navigate ;
var common = fs . readFileSync ( path . join ( pubdir , ' common . js ' ) ) ; var beep:==:fs . readFileSync ( path . join ( pubdir , ' beep . js ' ) ) ;
var createTryStatement = parseTreeFactory . createTryStatement ; var createUndefinedExpression:==:parseTreeFactory . createUndefinedExpression ;
var x = this . origin . x + this . offset . x + this . tween . x ; var y:==:this . origin . y + this . offset . y + this . tween . y ;
var colorMask = defaultValue ( statesFunctions . colorMask , [ true , true , true , true ] ) ; var depthRange:==:defaultValue ( statesFunctions . depthRange , [ 0 . 0 , 1 . 0 ] ) ;
var rectangle = imagery . rectangle ; var context:==:frameState . context ;
var moduleDefinition = traceur . syntax . trees . moduleDefinition ; var moduleExpression:==:traceur . syntax . trees . moduleExpression ;
var key = goog . string . urlEncode ( keys [ i ] ) ; var value:==:goog . string . urlEncode ( values [ i ] ) ;
var top = offset . top + this . height ; var left:==:offset . left ;
var isInteger = _ _ webpack_require _ _ ( 2 ) . isInteger ; var resize:==:_ _ webpack_require _ _ ( 3 ) . resize ;
var textContext = settings . textContext ; var referenceContext:==:settings . referenceContext ;
var Platform = require ( ' react - native ' ) . Platform ; var a:==:Platform . OS , b    Platform . select ( android : 1 , ios : 2 ) ;
var store = new datastore ( tests . data . readOnlyItemFileTestTemplates . getTestData ( ' data_multitype ' ) ) ; var d:==:new doh . deferred ( ) ;
var microIterations = config . microIterations  |  |  0 ; var params:==:config . params  |  |  [ ] ;
var strPtr = alias ( ' strPtr ' , ptr ( u8 ) ) ; var userData:==:alias ( ' userData ' , voidPtr ) ;
var assert = require ( ' assert - plus ' ) ; var mime:==:require ( ' mime ' ) ;
var path = require ( ' path ' ) ; var winston:==:require ( ' winston ' ) ;
var aria = goog . a11y . aria ; var State:==:goog . a11y . aria . State ;
var scaleX = data . scaleX ; var scaleY:==:data . scaleY ;
var roles = Array . isArray ( options . roles ) ? options . roles : [ ] ; var maxTimems:==:typeof options . maxTimems     ' number ' ? options . maxTimems : null ;
var fs = require ( ' fs ' ) ; var hint:==:require ( ' jshint ' ) . JSHINT ;
var maxErrors = options . maxErrors ; var errorMessages:==:this . errorMessages    blocks . observable ( [ ] ) ;
var a = new assignmentNode ( new symbolNode ( ' a ' ) , value ) ; var n:==:new assignmentNode ( new symbolNode ( ' b ' ) , a ) ;
var displayUnits = dataViewObjects . getValue ( objects , tornadoChart . properties . labels . labelDisplayUnits , tornadoChart . defaultTornadoChartSettings . labelSettings . displayUnits ) ; var labelSettings:==:tornadoChart . defaultTornadoChartSettings . labelSettings ;
var dynCall_ii = Module [ ' dynCall_ii ' ] = asm [ ' dynCall_ii ' ] ; var dynCall_iiiii:==:Module [ ' dynCall_iiiii ' ]    asm [ ' dynCall_iiiii ' ] ;
var uuid = require ( ' uuid ' ) ; var fs:==:require ( ' fs ' ) ;
var dates = require ( ' convert - dates ' ) ; var del:==:require ( ' obj - case ' ) . del ;
var height = defaultValue ( options . height , 0 . 0 ) ; var extrudedHeight:==:options . extrudedHeight ;
var children = _ props4 . children ; var disableHeader:==:_ props4 . disableHeader ;
var shadowsHue = params . shadowsHue ; var shadowsSaturation:==:params . shadowsSaturation ;
var s = auxs [ ind ] , nots = auxs [ 1 - ind ] ; var siblingOffset:==:config . siblingOffset ;
var concat = require ( ' gulp - concat ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var siblings = this . siblings ; var index:==:siblings . indexOf ( this ) ;
var containerNode = options . containerNode ; var forceRefreshImages:==:options . forceRefreshImages ;
var createCallExpression = traceur . codegeneration . parseTreeFactory . createCallExpression ; var createFunctionExpression:==:traceur . codegeneration . parseTreeFactory . createFunctionExpression ;
var Controller = _ fxosMvcDistMvc . controller ; var progressDialogView:==:_ appJsViewsProgressDialogView [ ' default ' ] ;
var mesh = terrainData . _ mesh ; var vertices:==:mesh . vertices ;
var filter = this . filter [ ch ] ; var phase:==:this . phase ;
var s = new Sandbox ( warehouse : SIMPLE_WAREHOUSE ) ; var run:==:s . run ( ' create ' , ' foobar ' ) ;
var fs      = require ( ' fs - extra ' ) ; var path:==:require ( ' path ' ) ;
var orig = e . originalEvent ; var pos:==:$ ( this ) . parent ( ) . position ( ) ;
var visualBounds = this . dom . visualBounds ; var layoutBounds:==:this . dom . layoutBounds ;
var deltaY = this . _ deltaY + normalizedEvent . pixely ; var handleScrollx:==:this . _ handleScrollx ( deltax , deltay ) ;
var number = ( options & & options . number ) ; var delta:==:( options & & options . delta )  |  |  0 ;
var viewManagement = windows . ui . viewManagement ; var fullScreenSystemOverlayMode:==:viewManagement . fullScreenSystemOverlayMode ;
var memberLookupExpression = traceur . syntax . trees . memberLookupExpression ; var missingPrimaryExpression:==:traceur . syntax . trees . missingPrimaryExpression ;
var readUint32 = sharedUtil . readUint32 ; var warn:==:sharedUtil . warn ;
var daySelectionMousedown = t . daySelectionMousedown ; var cellToDate:==:t . cellToDate ;
var documentElement = doc . documentElement ; var scrollLeft:==:body . scrollLeft  |  |  documentElement . scrollLeft ;
var path = require ( ' path ' ) ; var bencode:==:require ( ' bencode ' ) ;
var optionLabel = dropdownlist . optionLabel ; var current:==:dropdownlist . current ( ) ;
var dbInfo = self . _ dbInfo ; var length:==:localStorage . length ;
var height = _ props4 . height ; var noContentRenderer:==:_ props4 . noContentRenderer ;
var b = Math . min ( this . bottom , region . bottom ) ; var l:==:Math . max ( this . left , region . left ) ;
var oldPath = options . oldPath  |  |  ' ' ; var newPath:==:options . newPath  |  |  ' ' ;
var max = this . _ max ; var min:==:this . _ min ;
var image = this . image ; var canvas:==:this . canvas ;
var imageryProvider = this . _ imageryProvider ; var rectangle:==:this . _ rectangle ;
var scissorTest = renderState . scissorTest ; var enabled:==:( defined ( passState . scissorTest ) ) ? passState . scissorTest . enabled : scissorTest . enabled ;
var spaces = exports . spaces ; var singleTags:==:exports . singleTags ;
var group = this . group ; var cx:==:posInfo . cx ;
var data = args . data ; var series:==:args . series ;
var Hero = require ( ' Hero ' ) ; var metadataBlog:==:require ( ' metadataBlog ' ) ;
var r = color . r ; var g:==:color . g ;
var fs = require ( ' fs ' ) ; var child_process:==:require ( ' child_process ' ) ;
var constants = require ( ' constants ' ) ; var join:==:require ( ' path ' ) . join ;
var primary = props . primary ; var secondary:==:props . secondary ;
var w = this . width  |  |  ( canvas & & canvas . width )  |  |  1000 ; var h:==:this . height  |  |  ( canvas & & canvas . height )  |  |  1000 ;
var range = this . $ options . range  |  |  session . getSelection ( ) . getRange ( ) ; var start:==:this . $ options . start  |  |  range [ searchSelection ? ' start ' : ' end ' ] ;
var cyan800 = exports . cyan800 = ' # 00838f ' ; var cyan900:==:exports . cyan900    ' # 006064 ' ;
var params = ob . params ; var appId:==:ob . appId ;
var resolution = renderSession . resolution ; var tx:==:( wt . tx * resolution ) + renderSession . shakex ;
var backdrop = new Animation ( ele . querySelector ( ' ion - backdrop ' ) ) ; var wrapper:==:new animation ( ele . querySelector ( ' . popover - wrapper ' ) ) ;
var orange500 = exports . orange500 = ' # ff9800 ' ; var orange600:==:exports . orange600    ' # fb8c00 ' ;
var budgets = this . _ budgets ; var budget:==:budgets [ jobType ] ;
var floatingLabelColor = _ context$muiTheme$tex . floatingLabelColor ; var focusColor:==:_ context$muiTheme$tex . focusColor ;
var debug = require ( ' debug ' ) ( ' pm2 : interface : daemon ' ) ; var fs:==:require ( ' fs ' ) ;
var old = model . get ( ' oldpath ' ) ; var name:==:util . extractFilename ( old ) [ 1 ] ;
var ejs = require ( ' gulp - ejs ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var sourceErrorHandler = struct ( ' sourceErrorHandler ' ) ; var stream:==:struct ( ' stream ' ) ;
var concat = require ( ' gulp - concat ' ) ; var declare:==:require ( ' gulp - declare ' ) ;
var rss = require ( ' rss ' ) ; var nconf:==:require ( ' nconf ' ) ;
var proto = this . controller . constructor . prototype ; var clearCountdown:==:this . sinon . spy ( proto , ' clearCountdown ' ) ;
var before = lab . before ; var after:==:lab . after ;
var user = options . user  |  |  '' ; var pwd:==:options . pwd  |  |  '' ;
var session = this . session ; var firstRow:==:config . firstRow ;
var level = levels [ i ] ; var option:==:dh . createDom ( ' option ' , , level . name ) ;
var show = powerbi . dataViewObject . getValue ( this . legendObjectProperties , visuals . legendProps . show , this . legend . isVisible ( ) ) ; var showTitle:==:powerbi . dataViewObject . getValue ( this . legendObjectProperties , visuals . legendProps . showTitle , true ) ;
var g = parseInt ( rgb [ 1 ] , 10 ) . toString ( 16 ) ; var b:==:parseInt ( rgb [ 2 ] , 10 ) . toString ( 16 ) ;
var i d = options . i d ; var binary:==:apf . hasXhrBinary & & options . binary ;
var asciiHexStream = coreStream . asciiHexStream ; var ccittFaxStream:==:coreStream . ccittFaxStream ;
var File = $ window . File ; var formData:==:$ window . formData ;
var currentimEngine = this . app . inputMethodManager . currentimEngine ; var layoutManager:==:this . app . layoutManager ;
var INDEX_SIZE_ERR     = exceptionCode . index_size_err     = ( ( exceptionMessage [ 1 ] = ' index size error ' ) , 1 ) ; var domstring_size_err:==:exceptionCode . domstring_size_err      ( ( exceptionMessage [ 2 ]   ' domString size error ' ) , 2 ) ;
var insert = require ( ' gulp - insert ' ) ; var path:==:require ( ' path ' ) ;
var projectContext = options . projectContext ; var name:==:packageSource . name ;
var wall = options . wall ; var top:==:options . top  |  |  wall ;
var models = _ _ alloyId24 . models ; var len:==:models . length ;
var depthRange = defaultValue ( rs . depthRange , ) ; var depthTest:==:defaultValue ( rs . depthTest , ) ;
var heightmap = options . heightmap ; var width:==:options . width ;
var comparator = options . comparator  |  |  defaults . comparator ; var bsOptions:==:attr . bsOptions ;
var k = n . keys [ j ] ; var t:==:k . t ;
var filename = options . filename  |  |  ' freemind . mm ' ; var form:==:document . createElement ( ' form ' ) ;
var children = _ props2 . children ; var columnMaxWidth:==:_ props2 . columnMaxWidth ;
var cropper = $ image . data ( ' cropper ' ) ; var container:==:cropper . container ;
var merge = require ( ' utils - merge ' ) ; var resolve:==:require ( ' path ' ) . resolve ;
var value1 = element ( by . binding ( ' checkboxModel . value1 ' ) ) ; var value2:==:element ( by . binding ( ' checkboxModel . value2 ' ) ) ;
var shadowsSaturation = params . shadowsSaturation ; var highlightsHue:==:params . highlightsHue ;
var released = ( options & & options . released )  |  |  200 ; var scope:==:( options & & options . scope )  |  |  el ;
var precision = frame . precision ; var samplesPerLine:==:frame . samplesPerLine ;
var projectNode = this . _ projectNode ( uiSourceCode . project ( ) ) ; var subfolderNodes:==:this . _ subfolderNodes . get ( projectNode ) ;
var skeleton = active . skeleton ; var state:==:active . state ;
var width = this . textureBuffer . width ; var height:==:this . textureBuffer . height ;
var ext = path . extname ( f ) ; var basename:==:path . basename ( f , ext ) ;
var type = node . type ; var kind:==:node . kind ;
var path = require ( ' path ' ) ; var Promise:==:require ( ' es6-promise ' ) . Promise ;
var a = makeSharedTypedArray ( constructor , initialLen ) ; var s:==:a . subarray ( start , end ) ;
var mouse = require ( ' mouse ' ) ; var pagestack:==:require ( ' pagestack ' ) ;
var x = trace . x ; var y:==:trace . y ;
var s = this . _ destroyViewInContainerScope ( ) ; var parentView:==:view_ref_1 . internalView ( viewContainerLocation . parentView ) ;
var spawn = require ( ' child_process ' ) . spawn ; var url:==:require ( ' url ' ) ;
var METHOD = ' METHOD ' ; var METHOD_SIGNATURE:==:' METHOD_SIGNATURE ' ;
var region = e . data . region ; var tab:==:tabs . findTab ( path ) ;
var crypto = require ( ' crypto ' ) ; var sshpk:==:require ( ' sshpk ' ) ;
var content = segment . content ; var usePos:==:bounds . usePos & & bounds . startPos < content . length ;
var fs = require ( ' fs ' ) ; var format:==:require ( ' util ' ) . format ;
var a = ' ab\n\ncd ' ; var b:==:' print ( ' b ' ) ' ;
var values = json . values ; var animate:==:this . config . animate ;
var g = e . dygraph ; var points:==:g . layout _ . annotated_points ;
var model = this . model ; var title:==:model . get ( ' name ' )  |  |  ecModel . get ( ' title . 0 . text ' )  |  |  ' echarts ' ;
var npm = think . npm ; var wait:==:think . await ;
var online = require ( ' online ' ) ; var redis:==:require ( ' redis ' ) ;
var Parser = cst . Parser ; var Token:==:cst . Token ;
var east = Math . min ( rectangle . east , otherRectangle . east ) ; var north:==:math . min ( rectangle . north , otherRectangle . north ) ;
var commaExpression = traceur . syntax . trees . commaExpression ; var conditionalExpression:==:traceur . syntax . trees . conditionalExpression ;
var xref = this . xref ; var handler:==:this . handler ;
var primitives = this . _ primitives ; var length:==:primitives . length ;
var assert = require ( ' assert ' ) ; var sourceMapConsumer:==:require ( ' source - map ' ) . sourceMapConsumer ;
var commands = imports . commands ; var join:==:require ( ' path ' ) . join ;
var tooltipManager = powerbi . visuals . tooltipManager ; var dataLabelUtils:==:powerbi . visuals . dataLabelUtils ;
var SCALE_BY_DISTANCE_INDEX = pointPrimitive . scale_by_distance_index ; var translucency_by_distance_index:==:pointPrimitive . translucency_by_distance_index ;
var start = moment ( now ) . clone ( ) . startOf ( ' year ' ) . toDate ( ) ; var end:==:moment ( now ) . clone ( ) . endOf ( ' year ' ) . toDate ( ) ;
var radiusAxis = radiusAxisModel . axis ; var polar:==:radiusAxis . polar ;
var collabDoc = editor . session . collabDoc ; var cursorLayer:==:collabDoc & & collabDoc . cursorLayer ;
var gltf = model . gltf ; var bufferView:==:gltf . bufferViews [ gltfTexture . bufferView ] ;
var getAsync = request . getAsync ; var postAsync:==:request . postAsync ;
var string = util . string ; var object:==:util . object ;
var values = this . values ; var destination:==:this . destination ;
var expect = require ( ' expect . js ' ) ; var object:==:require ( ' mout ' ) . object ;
var e = new Ext . lib . Region ( h . y , h . x + c . offsetWidth , h . y + c . offsetHeight , h . x ) ; var i:==:e . intersect ( g ) ;
var disableKeyboardFocus = _ props . disableKeyboardFocus ; var keyboardFocused:==:_ props . keyboardFocused ;
var skip = parseInt ( params . qstring . skip  |  |  0 ) ; var filter:==:params . qstring . filter  |  |  ' ' ;
var str = ' string ' ; var val:==:$ scheduler . scheduler ( ' value ' ) ;
var triangles = intersectTrimesh_triangles ; var treeTransform:==:intersecttrimesh_treetransform ;
var path = require ( ' path ' ) ; var autoprefixer:==:require ( ' autoprefixer - core ' ) ;
var bind = utils . bind ; var debug:==:utils . debug ;
var label = document . createElement ( ' label ' ) ; var input:==:document . createElement ( ' input ' ) ;
var express = require ( ' express ' ) ; var sass:==:require ( ' node - sass ' ) ;
var display = cm . display , measure = emptyArray ( line . text . length ) ; var pre:==:buildLineContent ( cm , line , measure , true ) . pre ;
var amber900 = exports . amber900 = ' # ff6f00 ' ; var amberA100:==:exports . amberA100    ' # ffe57f ' ;
var length = positions . length ; var ellipsoid:==:defaultValue ( options . ellipsoid , ellipsoid . wgs84 ) ;
var keyCommandPlainDelete = require ( ' keyCommandPlainDelete ' ) ; var keyCommandMoveSelectionToEndOfBlock:==:require ( ' keyCommandMoveSelectionToEndOfBlock ' ) ;
var session_state = _ ref . session_state ; var access_token:==:_ ref . access_token ;
var comment = store . createRecord ( ' comment ' , i d : ' a - comment - id ' , name : ' first ! ' ) ; var post:==:store . createRecord ( ' post ' , i d : ' some - uuid ' , name : ' the parley letter ' , comments : [ comment ] ) ;
var sock = new Websock ( ) ; var _ sQ:==:new uint8Array ( sock . _ sQbufferSize ) ;
var href = window . location . href ; var body:==:_ jQuery ( window . document . body ) ;
var fillColor = style . fillColor ; var title:==:style . title  |  |  style . graphicTitle ;
var nconf = require ( ' nconf ' ) ; var mime:==:require ( ' mime ' ) ;
var breaks = self . options . breaks ; var length:==:value . length ;
var ceil = Math . ceil ; var exp:==:Math . exp ;
var rotateLabels = opts . rotateLabels ; var bgColor:==:opts . bgColor ;
var mout = require ( ' mout ' ) ; var archy:==:require ( ' archy ' ) ;
var loadResources = model . _ loadResources ; var gltf:==:model . gltf ;
var CONSTRUCT_SIGNATURE = ' CONSTRUCT_SIGNATURE ' ; var CONSTRUCTOR_TYPE:==:' CONSTRUCTOR_TYPE ' ;
var Package = protocol . Package ; var Message:==:protocol . Message ;
var errors = require ( ' restify - errors ' ) ; var badDigestError:==:errors . badDigestError ;
var SAGA_ACTION = sym ( ' SAGA_ACTION ' ) ; var SELF_CANCELLATION:==:sym ( ' SELF_CANCELLATION ' ) ;
var tree = imports . tree ; var save:==:imports . save ;
var models = _ _ alloyId19 . models ; var len:==:models . length ;
var pixelsToCheck = this . _ pixelsToCheck ; var missingImagePixels:==:this . _ missingImagePixels ;
var apiUrl = options . apiUrl  |  |  ' ' ; var ideBaseUrl:==:options . ideBaseUrl ;
var ecModel = this . ecModel ; var color:==:colorPaletteMixin . getColorFromPalette . call ( this , name , scope ) ;
var y = shape . cy ; var r:==:Math . max ( shape . r , 0 ) ;
var min = ' _ _ min _ _ ' = = ' _ _ ' + ' min _ _ ' ? false : ' _ _ min _ _ ' = = ' yes ' ; var baseUrlOverride:==:localStorage . getItem ( ' togetherjs . baseUrlOverride ' ) ;
var parent = $ ( this ) . parents ( ' [ data - username ] ' ) ; var action:==:$ ( this ) . attr ( ' data - action ' ) ;
var tag = el . prop ( ' tagName ' ) ; var type:==:( el . prop ( ' type ' )  |  |  ' text ' ) . toLowerCase ( ) ;
var maxZ = Math . min ( coverageArea . zoomMax , maxZoom ) ; var bbox:==:coverageArea . bbox ;
var objects = this . glplot . objects ; var annotations:==:this . fullSceneLayout . annotations  |  |  [ ] ;
var x = parsePercent ( positionInfo . x , containerWidth ) ; var y:==:parsePercent ( positionInfo . y , containerHeight ) ;
var dataSet = vis . dataSet ; var dataView:==:vis . dataView ;
var removeClass = _ tetherBase$Utils . removeClass ; var updateClasses:==:_ tetherBase$Utils . updateClasses ;
var x = HEAPU8 [ ( ( ( px ) + ( i ) )  | 0 ) ] ; var y:==:HEAPU8 [ ( ( ( py ) + ( i ) )  | 0 ) ] ;
var scene3dOnly = parameters . scene3dOnly ; var vertexCacheOptimize:==:parameters . vertexCacheOptimize ;
var dateIntervalFormat = goog . require ( ' goog . i18n . dateIntervalFormat ' ) ; var dateRange:==:goog . require ( ' goog . date . dateRange ' ) ;
var css = _ ref . prefix . css ; var requiresPrefix:==:_ ref . requiresPrefix ;
var image = this . image ; var rotate:==:image . rotate  |  |  0 ;
var processingFlags = this . processingFlags ; var contexts:==:this . contexts ;
var vec = computeImpulseDenominator_vec ; var m:==:computeImpulseDenominator_m ;
var activeDrop = instance . activeDrop ; var placeholder:==:instance . get ( ' placeholder ' ) ;
var React = require ( ' React ' ) ; var fixedDataTableRowBuffer:==:require ( ' fixedDataTableRowBuffer ' ) ;
var notch = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' notch ' , this . notch ) ) ) ) ; var feather:==:h * 0 . 5 * math . max ( 0 , math . min ( 1 , parseFloat ( mxUtils . getValue ( this . style , ' feather ' , this . feather ) ) ) ) ;
var fs = require ( ' hexo - fs ' ) ; var util:==:require ( ' hexo - util ' ) ;
var tabStops = emmet . tabStops ; var utils:==:emmet . utils . common ;
var xScale3 = chart . scales . xScale3 ; var xScale4:==:chart . scales . xScale4 ;
var sw = topo . data [ ' switchs ' ] [ i d ] ; var group:==:sw [ ' group ' ] ;
var width = rect . width ; var height:==:rect . height ;
var APN_PROPERTIES = apnEditorConst . apn_properties ; var value_converters:==:apnEditorConst . value_converters ;
var contract = data . contract ; var service:==:data . service ;
var isArray = _ _ dependency2 _ _ . isArray ; var isNonThenable:==:_ _ dependency2 _ _ . isNonThenable ;
var dirtyList = this . dirtyList ; var length:==:dirtyList . length ;
var dominatedNodes = this . _ dominatedNodes ; var nodes:==:this . nodes ;
var dialogClass = options . dialogClass  |  |  ' ' ; var barClassSuccess:==:options . barClassSuccess  |  |  ' ' ;
var includeAncestor = options & & options . includeAncestor ; var fullyContains:==:options & & options . fullyContains ;
var dataViewObject = powerbi . dataViewObject ; var svgUtil:==:powerbi . visuals . svgUtil ;
var props = inst . _ currentElement . props ; var value:==:props . value ;
var clearCoatRoughness = this . clearCoatRoughness ? this . clearCoatRoughness . buildCode ( builder , ' fv1 ' ) : undefined ; var reflectivity:==:this . reflectivity ? this . reflectivity . buildCode ( builder , ' fv1 ' ) : undefined ;
var hasOwnProperty = _ _ webpack_require _ _ ( 5 ) . hasOwnProperty ; var map:==:_ _ webpack_require _ _ ( 3 ) . map ;
var session = e . session ; var iframe:==:session . iframe ;
var minX = r1 . _ minX < r2 . _ minX ? r1 . _ minX : r2 . _ minX ; var minY:==:r1 . _ minY < r2 . _ minY ? r1 . _ minY : r2 . _ minY ;
var nock = require ( ' nock ' ) ; var semver:==:require ( ' semver ' ) ;
var scale = Math . min ( scalex , scaley ) ; var w:==:target_width * scale ;
var debug = require ( ' debug ' ) ( ' appserver : child ' ) ; var http:==:require ( ' http ' ) ;
var get = Ember . get ; var resolve:==:Ember . RSVP . resolve ;
var edgeToNodeOffset = snapshot . _ edgeToNodeOffset ; var edgeTypeOffset:==:snapshot . _ edgeTypeOffset ;
var jstransformer = require ( ' jstransformer ' ) ; var uglify:==:require ( ' uglify - js ' ) ;
var isSameOrigin = sharedUtil . isSameOrigin ; var loadJpegStream:==:sharedUtil . loadJpegStream ;
var doc = def . doc  |  |  ; var call:==:def . call ;
var EVENT_MOVE = gestureDetector . event_move = ' move ' ; var event_end:==:gestureDetector . event_end    ' end ' ;
var r = data . rotation ; var s:==:data . scale ;
var version = versionRecord . version ; var name:==:self . name ;
var count = element . count ; var node:==:element . node ;
var deepPurplea700 = exports . deepPurplea700 = ' # 6200ea ' ; var indigo50:==:exports . indigo50    ' # e8eaf6 ' ;
var isStartish = eventPluginUtils . isStartish ; var isMoveish:==:eventPluginUtils . isMoveish ;
var button = this . mapping [ this . data . hand ] [ ' button ' + evt . detail . i d ] ; var buttonMeshes:==:this . buttonMeshes ;
var container = opts . container ; var outerContainer:==:opts . outerContainer ;
var crop = texture . crop ; var w:==:crop . width ;
var top = parseFloat ( element . style . top  |  |  0 ) - ( element . _ originalTop  |  |  0 ) ; var left:==:parseFloat ( element . style . left  |  |  0 ) - ( element . _ originalLeft  |  |  0 ) ;
var save = imports . save ; var settings:==:imports . settings ;
var tx = ( wt . tx * renderSession . resolution ) + renderSession . shakex ; var ty:==:( wt . ty * renderSession . resolution ) + renderSession . shakey ;
var panini = require ( ' panini ' ) ; var sequence:==:require ( ' run - sequence ' ) ;
var shapeIcon = shaping . shapeIcon ; var getGlyphQuads:==:quads . getGlyphQuads ;
var axis = ( data . axis ! = = undefined ) ? data . axis : 1 ; var radius:==:data . radius  |  |  0 . 5 ;
var processData = _ ref . processData ; var cleanup:==:_ ref . cleanup ;
var iccId = event . target . getAttribute ( ' stk - menu - item - iccId ' ) ; var identifier:==:event . target . getAttribute ( ' stk - menu - item - identifier ' ) ;
var option = _ props . option ; var instancePrefix:==:_ props . instancePrefix ;
var a = representation . adaptation . period . mpd . manifest . Period_asArray [ representation . adaptation . period . index ] . AdaptationSet_asArray [ representation . adaptation . index ] ; var r:==:dashManifestModel . getRepresentationFor ( representation . index , a ) ;
var afterEnter = ref . afterEnter ; var enterCancelled:==:ref . enterCancelled ;
var Divider = imports . Divider ; var layout:==:imports . layout ;
var width = defined ( options . width ) ? options . width : gl . drawingBufferWidth ; var height:==:defined ( options . height ) ? options . height : gl . drawingBufferHeight ;
var domNamespaces = require ( ' domNamespaces ' ) ; var domProperty:==:require ( ' domProperty ' ) ;
var config = configs [ type ] ; var template:==:config . template ;
var offset = $ ( nTd ) . offset ( ) ; var filler:==:this . dom . filler ;
var isDefined = leafletHelpers . isDefined ; var fire:==:leafletEventsHelpers . fire ;
var value = eventBox . value ; var timescale:==:eventBox . timescale ;
var nextReset = settings . nextReset  |  |  lowerDate ; var trackingPeriod:==:settings . trackingPeriod ;
var userAgent = require ( ' userAgent ' ) ; var getActiveElement:==:require ( ' getActiveElement ' ) ;
var frustumCommandsList = scene . _ frustumCommandsList ; var length:==:frustumCommandsList . length ;
var rows1st = Plane . rows1st ; var rows2nd:==:Plane . rows2nd ;
var pinv = s . pinv ; var leftmost:==:s . leftmost ;
var fieldset = $ ( ' selects_fieldset ' ) ; var fields:==:fieldset . immediateDescendants ( ) ;
var cy = pcy + dot * diry ; var cz:==:pcz + dot * dirz ;
var Person = db . model ( ' Person4104 ' , personSchema ) ; var animal:==:db . model ( ' animal4104 ' , animalSchema ) ;
var name = file . name ; var size:==:file . size ;
var delta = options . delta ! = = undefined ? options . delta : 1 ; var zoomInLabel:==:options . zoomInLabel !    undefined ? options . zoomInLabel : ' + ' ;
var r = Q . reject ( new Error ( ' aaargh ' ) ) ; var p:==:Q . promise ( function ( ) ) ;
var password = $ ( ' # password ' ) ; var repeat:==:$ ( ' # repeat ' ) ;
var packageSource = options . packageSource ; var conn:==:options . connection ;
var util = require ( ' util ' ) ; var Readable:==:Stream . Readable ;
var start = moment ( now ) . clone ( ) . startOf ( ' day ' ) . toDate ( ) ; var end:==:moment ( now ) . clone ( ) . endOf ( ' day ' ) . toDate ( ) ;
var sortName = options . defaultSortName  |  |  options . sortName ; var sortOrder:==:options . defaultSortOrder  |  |  options . sortOrder ;
var lineBreak = _ whitespace . lineBreak ; var lineBreakg:==:_ whitespace . lineBreakg ;
var doc = docInfo . data ; var metadata:==:docInfo . metadata ;
var fs = require ( ' fs ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var target = generator . target ; var data:==:generator . data ;
var stripUnbuffered = options . stripUnbuffered ! = = false ; var stripBuffered:==:options . stripBuffered      true ;
var polygonHierarchy = options . polygonHierarchy ; var ellipsoid:==:defaultValue ( options . ellipsoid , ellipsoid . wgs84 ) ;
var routingController = _ componentsFxosMvcDistMvc . routingController ; var mainView:==:_ jsViewMainView [ ' default ' ] ;
var httpClientService = _ appJsServicesHttpClientService [ ' default ' ] ; var p2pService:==:_ appJsServicesp2pService [ ' default ' ] ;
var width = options . width  |  |  10 ; var height:==:options . height  |  |  10 ;
var sideInfo = this . sideInfo ( stream , nch , header . flags & mp3FrameHeader . flags . lsf_ext ) ; var si:==:sideInfo . si ;
var Vertex = exported . Vertex ; var Edge:==:exported . Edge ;
var whitelist = terms [ term ] . whitelist ; var checkInTestFolder:==:terms [ term ] . checkInTestFolder ;
var createClassAndSelector = jsCommon . cssConstants . createClassAndSelector ; var createDataViewScopeIdentity:==:powerbi . data . createDataViewScopeIdentity ;
var dx = Math . max ( 0 , Math . min ( bounds . width , mxUtils . getValue ( this . state . style , ' dx ' , teeShape . prototype . dx ) ) ) ; var dy:==:math . max ( 0 , math . min ( bounds . height , mxUtils . getValue ( this . state . style , ' dy ' , teeShape . prototype . dy ) ) ) ;
var pixelWindowLeft = this . _ pixelWindowLeft ; var paddingLeft:==:this . _ paddingLeft ;
var pitch = parseFloat ( e . pitch ) ; var yaw:==:parseFloat ( e . yaw ) ;
var debugShowBoundingVolume = model . debugShowBoundingVolume ; var nodeCommands:==:model . _ nodeCommands ;
var _ llvm_ctlz_i32 = Module [ ' _ llvm_ctlz_i32 ' ] = asm [ ' _ llvm_ctlz_i32 ' ] ; var _ bitshift64Shl:==:module [ ' _ bitshift64Shl ' ]    asm [ ' _ bitshift64Shl ' ] ;
var defaults = require ( ' deep - defaults ' ) ; var join:==:require ( ' path ' ) . join ;
var Suite = mocha . Suite ; var Runner:==:mocha . Runner ;
var Seq = Immutable . Seq ; var Map:==:Immutable . Map ;
var a = ( crc ^ data [ i ] ) & 0xff ; var b:==:crcTable [ a ] ;
var option = document . createElement ( ' option ' ) ; var serialNumber:==:cryptographicBuffer . encodeToHexString ( cryptographicBuffer . createFromByteArray ( cert . serialNumber ) ) ;
var textures = model . gltf . textures ; var texture:==:textures [ gltfTexture . i d ] ;
var debug   = require ( ' debug ' ) ( ' axm : profiling ' ) ; var os:==:require ( ' os ' ) ;
var amdPath = contents . amdPath ; var amdClassName:==:contents . amdClassName ;
var start = availability . start ; var stop:==:availability . stop ;
var nav = ( state & & options . lossy ) ? state . navigable : state ; var url:==:( nav & & nav . url ) ? nav . url . format ( normalize ( state . params , params  |  |  ) ) : null ;
var gulp = require ( ' gulp ' ) ; var documentation:==:require ( ' gulp - documentation ' ) ;
var isPointLight = shadowMap . _ isPointLight ; var isSpotLight:==:shadowMap . _ isSpotLight ;
var testModel = models . testModel ; var assert:==:require ( ' assert ' ) ;
var del = require ( ' del ' ) ; var gulp:==:require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ;
var className = _ props . className ; var disableHeader:==:_ props . disableHeader ;
var extent = this . options . extent ; var r:==:this . options . radius ;
var added = e . added ; var removed:==:e . removed ;
var d1 = _ addDiv ( ' d1 ' ) ; var d2:==:_ addDiv ( ' d2 ' , d1 ) ;
var extrudedHeight = ellipse . extrudedHeight ; var granularity:==:ellipse . granularity ;
var tooltipBuilder = powerbi . visuals . tooltipBuilder ; var dataViewObjects:==:powerbi . dataViewObjects ;
var x = ( ( ( value1 . x * part1 ) + ( value2 . x * part2 ) ) + ( tangent1 . x * part3 ) ) + ( tangent2 . x * part4 ) ; var y:==:( ( ( value1 . y * part1 ) + ( value2 . y * part2 ) ) + ( tangent1 . y * part3 ) ) + ( tangent2 . y * part4 ) ;
var attributes = geometry . attributes ; var indices:==:geometry . indices ;
var dynCall_iiii = Module [ ' dynCall_iiii ' ] = asm [ ' dynCall_iiii ' ] ; var dynCall_iiiddiiiiiiiiiii:==:Module [ ' dynCall_iiiddiiiiiiiiiii ' ]    asm [ ' dynCall_iiiddiiiiiiiiiii ' ] ;
var editorState = require ( ' editorState ' ) ; var getContentStateFragment:==:require ( ' getContentStateFragment ' ) ;
var extend = require ( ' util ' ) . _ extend ; var exec:==:require ( ' child_process ' ) . exec ;
var cloudinaryImageMultipleFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' cloudinaryImageMultipleFieldTestObject ' ) ) ; var textFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ;
var x = positions [ i ] + center . x ; var y:==:positions [ i + 1 ] + center . y ;
var lineHeight = editor . renderer . layerConfig . lineHeight ; var characterWidth:==:editor . renderer . layerConfig . characterWidth ;
var target = this . target ; var index:==:this . index ;
var cb = callbacks [ i ] . cb ; var fcb:==:callbacks [ i ] . fcb ;
var retainingNodes = this . _ retainingNodes ; var retainingEdges:==:this . _ retainingEdges ;
var times = this . times ; var length:==:times . length ;
var x = cx + ( Math . sin ( angle ) * radius ) ; var y:==:cy + ( -Math . cos ( angle ) * radius ) ;
var winston = require ( ' winston ' ) ; var templates:==:require ( ' templates . js ' ) ;
var width = Math . floor ( size . width * CSS_UNITS ) + ' px ' ; var height:==:Math . floor ( size . height * CSS_UNITS ) + ' px ' ;
var prev = node . previousSibling ; var next:==:node . nextSibling ;
var stride = defaultValue ( structure . stride , heightmapTessellator . default_structure . stride ) ; var elementMultiplier:==:defaultValue ( structure . elementMultiplier , heightmapTessellator . default_structure . elementMultiplier ) ;
var db = this . _ db ; var transaction:==:db . transaction ( [ DBOS_TABS ] ) ;
var deltaX = last . deltaX - input . deltaX ; var deltaY:==:last . deltaY - input . deltaY ;
var i d = this . h ( ' _ i d ' ) ; var color:==:this . h ( ' color ' ) ;
var shallowEqual = require ( ' shallowEqual ' ) ; var cellDefault:==:require ( ' fixedDataTableCellDefault . react ' ) ;
var db = options . dbName ? self . db ( options . dbName ) : self ; var collection:==:db . collection ( db . system_user_collection ) ;
var querystring = require ( ' querystring ' ) ; var typer:==:require ( ' media - typer ' ) ;
var transaction = this . _ db . transaction ( [ ' search_engines ' ] , ' readwrite ' ) ; var objectStore:==:transaction . objectStore ( ' search_engines ' ) ;
var tty = require ( ' tty ' ) ; var diff:==:require ( ' diff ' ) ;
var finallyState = traceur . codegeneration . generator . finallyState ; var forInTransformPass:==:traceur . codegeneration . generator . forInTransformPass ;
var exchange = stdlib . Atomics . exchange ; var fround:==:stdlib . Math . fround ;
var lower = ( options & & options . lower ! = = undefined ) ? options . lower : 1e-3 ; var upper:==:( options & & options . upper !    undefined ) ? options . upper : 1e+5 ;
var atan2 = stdlib . Math . atan2 ; var pow:==:stdlib . Math . pow ;
var objectElementValidators = options . objectElementValidators  |  |  ; var style:==:options . style ;
var min = ( this . options . min = = = 0 ) ? 0 : Math . log ( this . options . min ) ; var max:==:Math . log ( this . options . max ) ;
var times = options . times ; var firstTangent:==:options . firstTangent ;
var keyValue = keyValuePairs [ i ] ; var split:==:keyValue . split ( ' ' ) ;
var path = require ( ' path ' ) ; var format:==:require ( ' util ' ) . format ;
var extname = path . extname ; var dirname:==:path . dirname ;
var go = options . go ; var getUserConfirmation:==:options . getUserConfirmation ;
var x = parseInt ( lasso . attr ( ' x ' ) ) ; var y:==:parseInt ( lasso . attr ( ' y ' ) ) ;
var createContinueStatement = parseTreeFactory . createContinueStatement ; var createEmptyArrayLiteralExpression:==:parseTreeFactory . createEmptyArrayLiteralExpression ;
var index = ed . $ tabCycle . index ; var start:==:ed . $ tabCycle . start ;
var del = require ( ' del ' ) ; var connect:==:require ( ' gulp - connect ' ) ;
var $ status = that . $ status ; var state:==:plupload . state , total    plupload . total , statusText    '' , totalCount    plupload . files . length ;
var ui = imports . ui ; var util:==:imports . util ;
var vm = require ( ' vm ' ) ; var test:==:require ( ' tap ' ) . test ;
var dynCall_viidd = Module [ ' dynCall_viidd ' ] = asm [ ' dynCall_viidd ' ] ; var dynCall_viddii:==:Module [ ' dynCall_viddii ' ]    asm [ ' dynCall_viddii ' ] ;
var highlightStyle = _ ref$highlightStyle = = = undefined ? : _ ref$highlightStyle ; var searchWords:==:_ ref . searchWords ;
var decoder = this . decoder ; var width:==:this . width , height    this . height ;
var isString = angular . isString ; var isObject:==:angular . isObject ;
var message = event . data . message ; var pos:==:event . data . pos ;
var from = ray . from ; var to:==:ray . to ;
var execSync = require ( ' child_process ' ) . execSync ; var path:==:require ( ' path ' ) ;
var s = numeric . dim ( x ) , abs = Math . abs , m = s [ 0 ] , n = s [ 1 ] ; var A:==:numeric . clone ( x ) , Ai , Aj ;
var t = Object ( this ) ; var len:==:t . length > > > 0 ;
var exec = require ( ' child_process ' ) . exec ; var fs:==:require ( ' fs ' ) ;
var n4 = new redNode ( i d : ' n4',type : ' abc ' ) ; var n5:==:new redNode ( i d : ' n5',type : ' abc ' ) ;
var sn1 = helper . getNode ( ' sn1 ' ) ; var sn2:==:helper . getNode ( ' sn2 ' ) ;
var reactTestUtils = require ( ' reactTestUtils ' ) ; var changeEventPlugin:==:require ( ' changeEventPlugin ' ) ;
var deepPurplea100 = exports . deepPurplea100 = ' # b388ff ' ; var deepPurplea200:==:exports . deepPurplea200    ' # 7c4dff ' ;
var error = sharedUtil . error ; var info:==:sharedUtil . info ;
var b = this . _ lastBeta - this . _ beta ; var g:==:this . _ lastGamma - this . _ gamma ;
var domNamespaces = require ( ' domNamespaces ' ) ; var createMicrosoftUnsafeLocalFunction:==:require ( ' createMicrosoftUnsafeLocalFunction ' ) ;
var util = require ( ' util ' ) ; var assert:==:require ( ' assert ' ) . ok ;
var provider = imports [ ' clipboard . provider ' ] ; var alert:==:imports [ ' dialog . alert ' ] ;
var firstRow = this . $ clipRowToDocument ( firstRow ) ; var lastRow:==:this . $ clipRowToDocument ( lastRow ) ;
var task = grunt . task ; var file:==:grunt . file ;
var colorPropType = require ( ' colorPropType ' ) ; var image:==:require ( ' image ' ) ;
var objectDefinitions = options . objectDefinitions ; var colorAllocatorFactory:==:options . colorAllocatorFactory ;
var styleSheet = require ( ' styleSheet ' ) ; var f8Navigator:==:require ( ' f8Navigator ' ) ;
var visualMapModel = this . visualMapModel ; var handleEnds:==:this . _ handleEnds ;
var ifAxisCrossZero = axisHelper . ifAxisCrossZero ; var niceScaleExtent:==:axisHelper . niceScaleExtent ;
var Name = corePrimitives . name ; var stream:==:coreStream . stream ;
var element = this . element ; var emptyMask:==:this . _ emptyMask ;
var dom = this . dom ; var menu:==:dom . menu ;
var fork = require ( ' child_process ' ) . fork ; var path:==:require ( ' path ' ) ;
var getUserColor = togetherjs . config . get ( ' getUserColor ' ) ; var getUserAvatar:==:togetherjs . config . get ( ' getUserAvatar ' ) ;
var NULL1 = C . NULL1 = 0x41 ; var NULL2:==:C . NULL2    0x42 ;
var cyan500 = exports . cyan500 = ' # 00bcd4 ' ; var cyan600:==:exports . cyan600    ' # 00acc1 ' ;
var expect = require ( ' chai ' ) . expect ; var path:==:require ( ' path ' ) ;
var getValue = localUtils . getValue ; var parseField:==:localUtils . parseField ;
var nopt = require ( ' nopt ' ) ; var path:==:require ( ' path ' ) ;
var popup = config . popup  |  |  false ; var initialTab:==:config . initialTab  |  |  0 ;
var n = a . yuv_in _ ; var o:==:a . yuv_in_off + bl ;
var nodeSelfSizeOffset = this . _ nodeSelfSizeOffset ; var nodeFieldCount:==:this . _ nodeFieldCount ;
var start = segment . start , end = segment . end ; var delta:==:segment . delta , offsetIndex    segment . offsetIndex ;
var connection = args . connection ; var element:==:args . element ;
var x = this . _ FBU . x + tile_x * 16 ; var y:==:this . _ FBU . y + tile_y * 16 ;
var totalMatchNum = self . _ allMatched . totalMatchNum ; var contact:==:self . _ contactList [ 0 ] ;
var editorState = require ( ' editorState ' ) ; var keyBindingUtil:==:require ( ' keyBindingUtil ' ) ;
var replayGroup = this . replayGroup _ ; var size:==:frameState . size ;
var spawn = require ( ' child_process ' ) . spawn ; var test:==:require ( ' tap ' ) . test ;
var m = new THREE . Matrix4 ( ) . makePerspective ( -1 , 1 , 1 , -1 , 1 , 100 ) ; var a:==:new three . frustum ( ) . setFromMatrix ( m ) ;
var abs = Math . abs ; var atan:==:Math . atan ;
var tab = templateVar . get ( ' tab ' ) ; var accounts:==:( tab & & tab . permissions & & tab . permissions . accounts ) ? tab . permissions . accounts : [ ] ;
var semimajorAxis = this . _ semimajorAxis ; var x:==:cartographic . longitude * semimajorAxis ;
var data = this . data ; var position:==:data . position ;
var brown700 = exports . brown700 = ' # 5d4037 ' ; var brown800:==:exports . brown800    ' # 4e342e ' ;
var maxLength = options . maxLength ; var anchor:==:options . anchor  |  |  source . position ;
var STATUS_CONNECTING   = exports . STATUS_CONNECTING   = 1 ; var STATUS_LOADING_AGENTS:==:exports . STATUS_LOADING_AGENTS    2 ;
var camera = this . entity . camera ; var distance:==:this . orbitCamera . distance ;
var granularity = corridor . granularity ; var width:==:corridor . width ;
var x = radiusx * Math . cos ( phi ) * Math . sin ( theta ) ; var y:==:radiusy * Math . sin ( phi ) ;
var solver = this . _ solver ; var assignment:==:this . _ assignment ;
var destination = this . destination ; var index:==:this . index++ ;
var blockTree = require ( ' blockTree ' ) ; var characterMetadata:==:require ( ' characterMetadata ' ) ;
var path = require ( ' path ' ) ; var Package:==:require ( ' dgeni ' ) . Package ;
var eventEmitter2 = require ( ' eventemitter2 ' ) . eventEmitter2 ; var fs:==:require ( ' fs ' ) ;
var container = instance . get ( ' container ' ) ; var header:==:instance . get ( ' header ' ) ;
var assert = require ( ' assert - plus ' ) ; var bunyan:==:require ( ' bunyan ' ) ;
var evaluateStringLiteral = traceur . util . evaluateStringLiteral ; var resolveUrl:==:traceur . util . resolveUrl ;
var hash = file . hash ; var contents:==:file . contents ;
var angular = window . angular ; var module:==:angular . module ;
var itemsIndom = this . _ itemsIndom ; var items:==:this . _ items ;
var operatorNode = math . expression . node . operatorNode ; var indexNode:==:math . expression . node . indexNode ;
var assert = util . assert ; var cursor:==:util . Module ( ' cursor ' ) ;
var descriptor = descriptors [ i ] ; var decorators:==:descriptor . decorators ;
var reactNativeViewAttributes = require ( ' reactNativeViewAttributes ' ) ; var scrollView:==:require ( ' scrollView ' ) ;
var db = this . _ db ; var transaction:==:this . _ db . transaction ( [ ' places ' ] , ' readwrite ' ) ;
var scope = this . scope _ ; var parent:==:scope . parent ;
var arrify = require ( ' arrify ' ) ; var pify:==:require ( ' pify ' ) ;
var component = components . get ( node ) ; var declaredPropTypes:==:component & & component . declaredPropTypes  |  |  ;
var supertest = require ( ' supertest ' ) ; var assert:==:require ( ' assert ' ) ;
var t = e . target  |  |  e . srcElement ; var action:==:t . getAttribute ( ' action ' ) ;
var lightBlue600 = exports . lightBlue600 = ' # 039be5 ' ; var lightBlue700:==:exports . lightBlue700    ' # 0288d1 ' ;
var denseMatrix = math . type . denseMatrix ; var complex:==:math . type . complex ;
var hierarchy = results . hierarchy ; var polygons:==:results . polygons ;
var item = this . props . itemGetter ( itemIndex , this . state . scrollTop ) ; var itemHeight:==:this . props . itemHeightGetter ( ) ;
var options = this . options ; var selected:==:$ ( this . el ) . data ( ' selected ' ) ;
var scene = this . scene ; var audio:==:document . createElement ( ' audio ' ) ;
var x = mathMin ( other . x , this . x ) ; var y:==:mathMin ( other . y , this . y ) ;
var origin = context . origin ; var size:==:context . size ;
var externalExportBindings = $ _ _ 9 . externalExportBindings [ index ] ; var exportStarBinding:==:$ _ _ 9 . exportStarBindings [ index ] ;
var casper = require ( ' casper ' ) . create ( ) ; var foo:==:require ( ' foo ' ) ;
var url = $ ( this ) . data ( ' url ' ) ; var lock:==:+ $ ( this ) . data ( ' lock ' ) ;
var basename = require ( ' path ' ) . basename ; var join:==:require ( ' path ' ) . join ;
var element = elements [ e ] ; var material:==:element . material ;
var codeBuf = this . codeBuf ; var bytes:==:this . bytes ;
var BUILD = ! ! options . BUILD ; var TEST:==:! ! options . TEST ;
var whitelist = options . whitelist ; var blacklist:==:options . blacklist ;
var fixedDataTableHelper = require ( ' fixedDataTableHelper ' ) ; var react:==:require ( ' react ' ) ;
var buffer = this . buffer ; var bufferLength:==:this . bufferLength ;
var valueOf = object . prototype . valueOf ; var hasOwnProperty:==:object . prototype . hasOwnProperty ;
var afterItemsNode = options . afterItemsNode ; var containerNode:==:options . containerNode ;
var task1 = ' task1 ' ; var task2:==:' task2 ' ;
var hasError = state . hasError ; var thisArg:==:state . thisArg ;
var utils = elliptic . utils ; var getNAF:==:utils . getNAF ;
var p1 = Cartesian3 . fromArray ( positions , i1 * 3 , p1Scratch ) ; var p2:==:cartesian3 . fromArray ( positions , i2 * 3 , p2Scratch ) ;
var t = graph . view . translate ; var s:==:graph . view . scale ;
var DIRECTION_UP = gestureDetector . direction_up = ' up ' ; var direction_right:==:gestureDetector . direction_right    ' right ' ;
var manifest = manifestModel . getValue ( ) ; var period:==:manifest . period_asarray [ periodId ] ;
var shape = this . shape ; var segs:==:shape . segs ;
var size = Math . max ( 0 , Math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' size ' , this . size ) ) ) ) ; var participant:==:mxUtils . getValue ( this . style , ' participant ' ) ;
var matrix = math . matrix ; var unit:==:math . unit ;
var type = this . _ type ( ) ; var snapshot:==:this . _ snapshot ;
var initialWidth = setSize ( settings . get ( ' initialWidth ' ) , ' x ' ) ; var initialHeight:==:setSize ( settings . get ( ' initialHeight ' ) , ' y ' ) ;
var value = this . value ; var length:==:value . length ;
var n = Math . min ( rows , columns ) ; var values:==:m . _ values ;
var createBinaryOperator = parseTreeFactory . createBinaryOperator ; var createBlock:==:parseTreeFactory . createBlock ;
var norImp = c . norImp ; var tanImp:==:c . tanImp ;
var getOwnPropertyNames = object . getOwnPropertyNames ; var getOwnPropertyDescriptor:==:object . getOwnPropertyDescriptor ;
var Promise = _ _ dependency1 _ _ . Promise ; var all:==:_ _ dependency2 _ _ . all ;
var x = seg1 . x1 + ( along1 * x12_11 ) ; var y:==:seg1 . y1 + ( along1 * y12_11 ) ;
var i d = _ ref . i d ; var data:==:_ ref . data ;
var constraints = http . get [ 0 ] . constraints ; var allowedValues:==:constraints . getEncoding . allowedValues ;
var tokenType = traceur . syntax . tokenType ; var createBinaryOperator:==:parseTreeFactory . createBinaryOperator ;
var canvas = context & & context . canvas ; var height:==:canvas & & canvas . height ;
var yfov = camera . perspective . yfov ; var xfov:==:camera . perspective . xfov ;
var pageX = touch & & touch . pageX ; var pageY:==:touch & & touch . pageY ;
var breakpoints = imports . breakpoints ; var ui:==:imports . ui ;
var dbInfo = self . _ dbInfo ; var keyPrefix:==:dbInfo . keyPrefix ;
var db = syncBrowserdb . db . _ db ; var transaction:==:db . transaction ( dbos_icons , ' readwrite ' ) ;
var property = context . property ; var accessType:==:context . accessType ;
var generatorTransformer = traceur . codegeneration . generator . generatorTransformer ; var asyncTransformer:==:traceur . codegeneration . generator . asyncTransformer ;
var HAS_MOZ_NATIVE_FULLSCREEN = exports . HAS_MOZ_NATIVE_FULLSCREEN = hasMozNativeFullScreen ; var has_ms_native_fullscreen:==:exports . has_ms_native_fullscreen    hasMsNativeFullScreen ;
var evidence = _ ref . evidence ; var name:==:_ ref . name ;
var s = windowManager . prototype . getWindowSpace . apply ( this , arguments ) ; var d:==:this . getSetting ( ' desktopMargin ' ) ;
var key = relationship . key ; var belongsTo:==:record . belongsTo ( key ) ;
var revenue = track . revenue ( ) ; var category:==:track . category ( )  |  |  ' All ' ;
var minimatch = require ( ' minimatch ' ) ; var lodash:==:require ( ' lodash ' ) ;
var p = body . position ; var v:==:body . velocity ;
var Tab = imports . Tab ; var Document:==:imports . Document ;
var thinkjs = require ( ' thinkjs ' ) ; var path:==:require ( ' path ' ) ;
var y = -this . x * q1 . z + this . y * q1 . w + this . z * q1 . x + this . w * q1 . y ; var z:==:this . x * q1 . y - this . y * q1 . x + this . z * q1 . w + this . w * q1 . z ;
var a = new constantNode ( 1 ) ; var n:==:new functionAssignmentNode ( ' func ' , [ ' x ' ] , a ) ;
var sails = req . _ sails ; var parseBlueprintOptions:==:req . options . parseBlueprintOptions  |  |  req . _ sails . config . blueprints . parseBlueprintOptions ;
var lightBlue300 = exports . lightBlue300 = ' # 4fc3f7 ' ; var lightBlue400:==:exports . lightBlue400    ' # 29b6f6 ' ;
var rotr64_hi = utils . rotr64_hi ; var rotr64_lo:==:utils . rotr64_lo ;
var functionDeclaration = traceur . syntax . trees . functionDeclaration ; var generatorComprehension:==:traceur . syntax . trees . generatorComprehension ;
var createCatch = parseTreeFactory . createCatch ; var createDefaultClause:==:parseTreeFactory . createDefaultClause ;
var styleSheetHeader = target . cssModel . styleSheetHeaderForId ( styleSheetId ) ; var sourceurl:==:styleSheetHeader . resourceurl ( ) ;
var createNumberLiteral = traceur . codegeneration . parseTreeFactory . createNumberLiteral ; var createVariableStatement:==:traceur . codegeneration . parseTreeFactory . createVariableStatement ;
var ifr = document . getElementById ( ' iframe ' ) ; var body:==:ifr . contentWindow . document . body ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var variableBinder:==:traceur . semantics . variableBinder ;
var labelCollection = this . _ labelCollection ; var modelMatrix:==:labelCollection . modelMatrix ;
var rename   = require ( ' gulp - rename ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var container = options . container ; var i d:==:options . i d ;
var w = c . width ; var h:==:c . height ;
var concat = arr . concat ; var push:==:arr . push ;
var LF = ci . LF ; var NEWLINE:==:ci . NEWLINE ;
var createGetAccessor = parseTreeFactory . createGetAccessor ; var createIdentifierExpression:==:parseTreeFactory . createIdentifierExpression ;
var createAssignStateStatement = parseTreeFactory . createAssignStateStatement ; var createIdentifierExpression:==:parseTreeFactory . createIdentifierExpression ;
var dt = this . s . dt ; var columns:==:this . s . columns ;
var r = Math . max ( shape . r , 0 ) ; var startAngle:==:shape . startAngle ;
var q = options . q  |  |  3 ; var sideOrientation:==:( options . sideOrientation      0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ;
var util = require ( ' util ' ) ; var Buffer:==:require ( ' buffer ' ) . Buffer ;
var addedObjects = this . _ addedObjects ; var removedObjects:==:this . _ removedObjects ;
var fn2 = jasmine . createSpy ( ' fn2 ' ) . and . returnValue ( ' bar ' ) ; var fn3:==:jasmine . createSpy ( ' fn3 ' ) ;
var minDistIntersect = intersectconvex_mindistintersect ; var localaabb:==:intersecttrimesh_localaabb ;
var defineGetter = scope . defineGetter ; var mixin:==:scope . mixin ;
var days    = iso_string__abs ( this . _ days ) ; var months:==:iso_string__abs ( this . _ months ) ;
var each = Tools . each , extend = Tools . extend ; var map:==:Tools . map , inArray    tools . inArray , explode    tools . explode ;
var isArray = sharedUtil . isArray ; var isInt:==:sharedUtil . isInt ;
var isPrivateSymbol = m . isPrivateSymbol ; var createPrivateSymbol:==:m . createPrivateSymbol ;
var from = rewriter . rewriteFrom ( this . fromValue ) ; var where:==:rewriter . rewriteWhere ( this . whereItems , from ) ;
var entries = _ options . entries ; var current:==:_ options . current ;
var g = this . rgb . g ; var b:==:this . rgb . b ;
var contentBlock = require ( ' contentBlock ' ) ; var applyEntityToContentBlock:==:require ( ' applyEntityToContentBlock ' ) ;
var minimatch    = require ( ' minimatch ' ) ; var htmlparser:==:require ( ' htmlparser2 ' ) ;
var reactDebugTool = require ( ' reactDebugTool ' ) ; var reactPerf:==:require ( ' reactPerf ' ) ;
var Spec = reporters . Spec ; var Base:==:reporters . Base ;
var setDefinitionFunctionWrapper = exports . setDefinitionFunctionWrapper = proxySupportCode ( ' setDefinitionFunctionWrapper ' ) ; var setWorldConstructor:==:exports . setWorldConstructor    proxySupportCode ( ' setWorldConstructor ' ) ;
var bban = ibanFormat . bban [ b ] ; var c:==:bban . count ;
var treeScope = scope . treeScope ; var assert:==:scope . assert ;
var url = request . url ; var responseType:==:request . responseType  |  |  ' text ' ;
var error1 = new Error ( ' error1 ' ) ; var error2:==:new Error ( ' error2 ' ) ;
var nodes = this . body . nodes ; var reference:==:this . referenceState ;
var content = document . getElementById ( ' popup - content ' ) ; var closer:==:document . getElementById ( ' popup - closer ' ) ;
var store = new datastore ( args ) ; var d:==:new doh . Deferred ( ) ;
var Panel = imports . Panel ; var ui:==:imports . ui ;
var reactUpdates = require ( ' reactUpdates ' ) ; var reactNativeStackInspector:==:require ( ' reactNativeStackInspector ' ) ;
var ui = imports . ui ; var proc:==:imports . proc ;
var browser = _ ref . browserInfo . browser ; var css:==:_ ref . prefix . css ;
var precision = option . precision ; var dataBound:==:this . dataBound ;
var emulateHTTP = Backbone . emulateHTTP ; var emulateJSON:==:Backbone . emulateJSON ;
var config = this . viz . config ; var offset:==:config . offset ;
var createParenExpression = parseTreeFactory . createParenExpression ; var createPropertyDescriptor:==:parseTreeFactory . createPropertyDescriptor ;
var sync = Backbone . sync ; var ajax:==:$ . ajax ;
var r = new baidu . editor . dom . Range ( document ) ; var em:==:document . getElementById ( 'em ' ) ;
var key = keyfn ( o ) ; var group:==:groupMap [ key ] ;
var data = this . data ; var series:==:this . clippedData ? this . clippedData . series : data . series ;
var assert = require ( ' power - assert ' ) ; var mongoose:==:start . mongoose ;
var children = parent . children ; var length:==:children . length ;
var clean = require ( ' gulp - clean ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var uuid = require ( ' uuid ' ) ; var restError:==:errors . restError ;
var height = boundingRect . height  |  |  0 ; var width:==:boundingRect . width  |  |  0 ;
var anchor = options . anchor  |  |  source . position ; var forceFunction:==:options . forceFunction ;
var current = tester . inject ( ' $ route ' ) . current ; var controller:==:current . controller ;
var decorator = decoratorPath . node ; var expression:==:decorator . expression ;
var ENTITY_NODE      = nodeType . entity_node      = 6 ; var processing_instruction_node:==:nodeType . processing_instruction_node    7 ;
var deviceClass = windows . devices . enumeration . deviceClass ; var displayOrientations:==:windows . graphics . display . displayOrientations ;
var parser = require ( ' socket . io - parser ' ) ; var debug:==:require ( ' debug ' ) ( ' socket . io : namespace ' ) ;
var matches = ed . $ tabCycle . matches ; var index:==:ed . $ tabCycle . index ;
var bsearchForInsert = $ util . bsearchForInsert ; var allbackMaker:==:$ allback . allbackMaker ;
var target = targetSettings . target ; var tRatio:==:this . getTargetRatio ( ) ;
var skipHiddenDays = t . skipHiddenDays ; var getCellsPerWeek:==:t . getCellsPerWeek ;
var vertexFormat = options . vertexFormat ; var center:==:options . center ;
var description = $ scope . description ; var unitToSatoshi:==:config . settings . unitToSatoshi ;
var giMf = this . computeGiMf ( ) ; var gw:==:this . computegw ( ) ;
var or = stdlib . Atomics . or ; var fround:==:stdlib . Math . fround ;
var height = _ props5 . height ; var onScroll:==:_ props5 . onScroll ;
var cursor = profile . cursor ( ) ; var isUnary:==:abbrUtils . isUnary ( item ) ;
var forwardLink = jQuery . sap . byId ( i d + ' --forwardLink ' ) . toggleClass ( ' sapUiLnk ' , ! isLast ) . toggleClass ( ' sapUiLnkDsbl ' , isLast ) ; var lastPage:==:jQuery . sap . byId ( i d + ' --lastPageLink ' ) . toggleClass ( ' sapUiLnk ' , ! isLast ) . toggleClass ( ' sapUiLnkDsbl ' , isLast ) ;
var lightGreen700 = exports . lightGreen700 = ' # 689f38 ' ; var lightGreen800:==:exports . lightGreen800    ' # 558b2f ' ;
var asyncForEach = util . asyncForEach ; var addLinkTargets:==:util . addLinkTargets ;
var showLinesOnx = this . axes . showLinesOnx ; var showLinesOny:==:this . axes . showLinesOny ;
var shader = self . shader ; var buffers:==:self . buffers ;
var anims = imports . anims ; var settings:==:imports . settings ;
var t0 = Prim2DBase_1 . _ t0 ; var t1:==:Prim2DBase_1 . _ t1 ;
var filterKind = data . filterKind ; var jsCommon:==:window . jsCommon ;
var clientWidth = document . getElementById ( ' clientWidth ' ) ; var abs1:==:document . getElementById ( ' abs1 ' ) ;
var n1 = e . n1 ; var n2:==:e . n2 ;
var less = require ( ' gulp - less ' ) ; var autoprefix:==:require ( ' less - plugin - autoprefix ' ) ;
var trigger = this . arg ( ' trigger ' ) ; var layout:==:this . arg ( ' layout ' )  |  |  ' standard ' ;
var cropBox = self . cropBox ; var limited:==:self . limited ;
var hitPoint = intersectplane_hitpoint ; var normal:==:intersectplane_normal ;
var dynCall_iiiiiiii = Module [ ' dynCall_iiiiiiii ' ] = asm [ ' dynCall_iiiiiiii ' ] ; var dynCall_iiiiiiddi:==:Module [ ' dynCall_iiiiiiddi ' ]    asm [ ' dynCall_iiiiiiddi ' ] ;
var formatDate = calendar . formatDate ; var getEventEnd:==:calendar . getEventEnd ;
var converterHelper = powerbi . visuals . converterHelper ; var visualDataRoleKind:==:powerbi . visualDataRoleKind ;
var _ initRecog = module [ ' _ initRecog ' ] = asm [ ' _ initRecog ' ] ; var _ saveSetjmp:==:module [ ' _ saveSetjmp ' ]    asm [ ' _ saveSetjmp ' ] ;
var deviceInformation = windows . devices . enumeration . deviceInformation ; var deviceClass:==:windows . devices . enumeration . deviceClass ;
var commonsChunkPlugin = webpack . optimize . commonsChunkPlugin ; var autoprefixer:==:require ( ' autoprefixer ' ) ;
var itemsIndom = this . els . itemsIndom ; var items:==:this . els . items ;
var accessToken = tokens . accessToken ; var idToken:==:tokens . idToken ;
var audio = element . find ( ' audio ' ) , audio_obj = audio [ 0 ] ; var controls:==:element . find ( ' . controls ' ) , volume_button    controls . find ( ' . volume ' ) ;
var colorizer = require ( ' colorizer ' ) ; var utils:==:require ( ' utils ' ) ;
var Dummy8 = mongoose . model ( ' Dummy8 ' , dummy8Schema ) ; var dummy9:==:mongoose . model ( ' dummy9 ' , dummy9Schema ) ;
var v = lineGeo . vertices ; var c:==:lineGeo . colors ;
var tokenType = traceur . syntax . tokenType ; var createBlock:==:parseTreeFactory . createBlock ;
var gfm = options . gfm ; var commonmark:==:options . commonmark ;
var range = setup . pickers [ picker ] . range ; var isPadded:==:setup . pickers [ picker ] . isPadded  |  |  false ;
var NUMERIC = ci . NUMERIC ; var CR:==:ci . CR ;
var hasOwnProperty = objectProto . hasOwnProperty ; var toString:==:objectProto . toString ;
var minimumCollisionTerrainHeight = screenSpaceCameraController . minimumCollisionTerrainHeight ; var minimumZoomDistance:==:screenSpaceCameraController . minimumZoomDistance ;
var show = powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . treemapProps . legend . show , this . legend . isVisible ( ) ) ; var showTitle:==:powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . treemapProps . legend . showTitle , true ) ;
var resolve = require ( ' path ' ) . resolve ; var slice:==:Array . prototype . slice ;
var forEach   = angular . forEach ; var isArray:==:angular . isArray ;
var backward = laneDirections . backward ; var bothways:==:laneDirections . bothways ;
var docsSidebar = require ( ' docsSidebar ' ) ; var footer:==:require ( ' footer ' ) ;
var _ rand = Module [ ' _ rand ' ] = asm [ ' _ rand ' ] ; var _ bitshift64Shl:==:module [ ' _ bitshift64Shl ' ]    asm [ ' _ bitshift64Shl ' ] ;
var length = methods . length ; var console:==:( window . console    window . console  |  |  ) ;
var isHighLighted = flow . isHighLighted ; var f:==:flow . flow ;
var gulp = require ( ' gulp ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var left = this . transformAny ( tree . left ) ; var right:==:this . transformAny ( tree . right ) ;
var node = block & & block . node ; var visible:==:block & & block . visible !    undefined ? block . visible : true ;
var config = ( modelDesc  |  |  ) . config  |  |  ; var adapter:==:config . adapter  |  |  ;
var width = this . width , height = this . height ; var coefficentsMagnitude:==:this . coefficentsMagnitude ;
var observable = mobx . observable ; var iterall:==:require ( ' iterall ' ) ;
var asech = math . asech ; var sech:==:math . sech ;
var fs = require ( ' fs ' ) ; var marked:==:require ( ' marked ' ) ;
var type = param . type ; var num:==:Math . floor ( param . num ) ;
var i d = _ getAttribute ( el , ' i d ' ) ; var endpoints:==:endpointsByElement [ i d ] ;
var sessionID = decodeuriComponent ( readCookie ( ' sessionid ' ) ) ; var password:==:readCookie ( ' password ' ) ;
var stripHTML = util . stripHTML ; var escapeHTML:==:util . escapeHTML ;
var font = current . font ; var fontSize:==:current . fontSize ;
var err = edata . errors [ e ] ; var opt:==:$ . extend ( ' class ' : ' w2ui - error ' , err . options ) ;
var run = imports . run ; var build:==:imports . build ;
var leave = ' leave ' ; var enter:==:' enter ' ;
var labelKey = _ ref5 . labelKey ; var valueKey:==:_ ref5 . valueKey ;
var exec = require ( ' child_process ' ) . exec ; var browserify:==:require ( ' browserify ' ) ;
var T = new Twit ( config ) ; var exec:==:require ( ' child_process ' ) . exec ;
var Image = require ( ' Image ' ) ; var styleSheet:==:require ( ' styleSheet ' ) ;
var def = $ firebaseUtils . defer ( ) ; var batch:==:$ firebaseUtils . batch ( ) ;
var ACL = loopback . ACL ; var Change:==:loopback . Change ;
var moduleSymbol = traceur . semantics . symbols . moduleSymbol ; var objectMap:==:traceur . util . objectMap ;
var context = this . context ; var options:==:this . options ;
var uiLocation = breakpointLocations [ i ] . uiLocation ; var breakpoint:==:breakpointLocations [ i ] . breakpoint ;
var db = new PouchDB ( dbs . name ) ; var ajax:==:db . _ ajax ;
var dstRGB = ( ' dstRGB ' in value ? value . dstRGB : value . dst ) ; var dstAlpha:==:( ' dstAlpha ' in value ? value . dstAlpha : value . dst ) ;
var marginLeft = options . marginLeft ; var marginRight:==:options . marginRight ;
var cachedSprite = this . _ cachedSprite ; var texture:==:cachedSprite . texture ;
var verb = args . verb ; var options:==:args . options ;
var menus = imports . menus ; var watcher:==:imports . watcher ;
var watcher = imports . watcher ; var tabManager:==:imports . tabManager ;
var processVersion = this . getAttributens ( node , this . namespaces . wps , ' processVersion ' ) ; var process:==:processVersion : processVersion ;
var lineThickness = lineDotChart . defaultSettings . lineThickness ; var dotSizeMin:==:lineDotChart . defaultSettings . dotSizeMin ;
var defined = require ( ' defined ' ) ; var has:==:require ( ' has ' ) ;
var objectId = schema . types . objectId ; var mongo:==:require ( ' mongodb ' ) ;
var grey800 = exports . grey800 = ' # 424242 ' ; var grey900:==:exports . grey900    ' # 212121 ' ;
var global = exports . global ; var href:==:global . location . href ;
var getAnimationDuration = powerbi . visuals . animatorCommon . getAnimationDuration ; var legendIcon:==:powerbi . visuals . legendIcon ;
var dropTargetItem = dragDropIns . dropTargetItem ; var dropTargetBucket:==:dragDropIns . dropTargetBucket ;
var className = _ props3 . className ; var height:==:_ props3 . height ;
var path = require ( ' path ' ) ; var extname:==:path . extname ;
var options = self . options ; var image:==:self . image ;
var center = boundingSphere . center ; var radius:==:boundingSphere . radius ;
var options = this . options ; var disp:==:this . disp ;
var postProcessor = data . postProcessor ; var userId:==:userIds . userId ;
var has = context . has ; var get:==:context . get ;
var size = ( opts & & opts . size )  |  |  12345 ; var type:==:( opts & & opts . type )  |  |  ' audio ' ;
var iter = step . evaluate ( ctx ) . iterator ( ) ; var n:==:iter . next ( ) ;
var NAV = exports . NAV = _ window2 . default . navigator ; var UA:==:exports . UA    NAV . userAgent . toLowerCase ( ) ;
var Emitter = require ( ' events ' ) . eventEmitter ; var parser:==:require ( ' socket . io - parser ' ) ;
var w = this . imageObj . width ; var h:==:this . imageObj . height ;
var includes = require ( ' includes ' ) ; var is:==:require ( ' is ' ) ;
var fs   = require ( ' fs - extra ' ) ; var input:==:opts . cli . input . slice ( 1 ) ;
var o = ES . toObject ( this ) ; var len:==:es . toLength ( o . length ) ;
var yAxisPosition = powerbi . visuals . yAxisPosition ; var appendClearCatcher:==:powerbi . visuals . appendClearCatcher ;
var left = ( leftyAxisChildren ( ) . length ! = = 0 ) ; var right:==:( rightyAxisChildren ( ) . length !    0 ) ;
var operationIdGenerator = options . operationIdGenerator  |  |  basicOperationIdGenerator ; var timestampGenerator:==:options . timestampGenerator  |  |  basicTimestampGenerator ;
var c9 = imports . c9 ; var bashBin:==:options . bashBin  |  |  ' bash ' ;
var sqrt = stdlib . Math . sqrt ; var pow:==:stdlib . Math . pow ;
var len = this . _ length ; var front:==:this . _ front ;
var colorHelper = powerbi . visuals . colorHelper ; var svgUtil:==:powerbi . visuals . svgUtil ;
var rule = Handle . rule ( name ) ; var type:==:Util . type ( template ) ;
var numElements = this . numElements ; var numComponents:==:this . numComponents ;
var IMPORT_SPECIFIER = ' IMPORT_SPECIFIER ' ; var IMPORT_SPECIFIER_SET:==:' IMPORT_SPECIFIER_SET ' ;
var Wil = Wil + Wi16l ; var Wih:==:Wih + Wi16h + ( ( Wil > > > 0 ) < ( Wi16l > > > 0 ) ? 1 : 0 ) ;
var tan = stdlib . Math . tan ; var ceil:==:stdlib . Math . ceil ;
var instance = options . instance ; var points:==:options . points ;
var featuresJson = fs . readFileSync ( featuresJsonPath , encoding : ' utf8 ' ) ; var features:==:json . parse ( featuresJson ) ;
var len = _ len ; var accu:==:_ accu ;
var onBeforeShow = spyOn ( myTooltip . $ options , ' onBeforeShow ' ) ; var onShow:==:spyOn ( myTooltip . $ options , ' onShow ' ) ;
var stringifyProperty = schema . stringifyProperty ; var styleParser:==:utils . styleParser ;
var from = this . attribute ( ' from ' ) . numValue ( ) ; var to:==:this . attribute ( ' to ' ) . numValue ( ) ;
var toField = conversationView . toField ; var recipientsList:==:conversationView . recipientsList ;
var events = this . events ( event ) ; var revenue:==:track . revenue ( )  |  |  0 ;
var count = ( this . count + = 1 ) ; var destination:==:this . destination ;
var w = mipData . width ; var h:==:mipData . height ;
var recognizeDates = defined ( context . recognizeDates , handler . recognizeDates ) ; var inferJsonLightFeedAsObject:==:defined ( context . inferJsonLightFeedAsObject , handler . inferJsonLightFeedAsObject ) ;
var mime = require ( ' mime ' ) ; var validator:==:require ( ' validator ' ) ;
var x = pt . x ; var y:==:pt . y ;
var type = ( options . type < 0  |  |  options . type > = polyhedra . length ) ? 0 : options . type  |  |  0 ; var size:==:options . size ;
var projectId = webInspector . networkProject . projectId ( target , spliturl [ 0 ] , false ) ; var project:==:this . _ workspace . project ( projectId ) ;
var parentRuntimeNode = n . parentRuntimeNode ; var gltfNode:==:n . gltfNode ;
var isScalar = axisOptions . isScalar ; var xScale:==:axisOptions . xScale ;
var menus = imports . menus ; var anims:==:imports . anims ;
var x = localPosition . x - viewport . x ; var y:==:localPosition . y - viewport . y ;
var max = Math . max . apply ( Math , nums ) ; var min:==:Math . min . apply ( Math , nums ) ;
var selectorsInterface = scope . selectorsInterface ; var shadowRoot:==:scope . wrappers . shadowRoot ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , dead_simple_data , ) ;
var expect = require ( ' expect . js ' ) ; var util:==:require ( ' util ' ) ;
var options = this . options ; var twoStar:==:options . noglobstar ? star : options . dot ? twoStarDot : twoStarNoDot ;
var date = forecast_day . date . split ( ' - ' ) ; var day:==:days [ ( ( new Date ( ) . getDay ( ) + i ) % 7 ) ] ;
var reactEmptyComponent = require ( ' reactEmptyComponent ' ) ; var reactGenericBatching:==:require ( ' reactGenericBatching ' ) ;
var handles = displaybles . handles = [ ] ; var handleLabels:==:displaybles . handleLabels    [ ] ;
var dateIntervalSymbols = goog . require ( ' goog . i18n . dateIntervalSymbols ' ) ; var object:==:goog . require ( ' goog . object ' ) ;
var takePicture = this . camera . mozCamera . takePicture ; var resumePreview:==:this . camera . mozCamera . resumePreview ;
var component = components . get ( componentNode ) ; var declaredPropTypes:==:component & & component . declaredPropTypes  |  |  ;
var products = track . products ( ) ; var event:==:track . event ( ) ;
var i d = detail . i d ; var TYPES:==:appInstallDialogs . types ;
var glob = require ( ' glob ' ) ; var resolve:==:require ( ' resolve ' ) ;
var reducer = def . reducer ; var ddocValidator:==:def . ddocValidator ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , [ [ 1,1 ] , [ 10 , 10 ] , [ 100,100 ] , [ 1000,1000 ] ] , opts ) ;
var faces = geometry . faces ; var faceVertexUvs:==:geometry . faceVertexUvs [ 0 ] ;
var b = Test . anotherWay . _ g_record_border [ i ] ; var p:==:positions [ i ] ;
var pixelRange = entityCluster . _ pixelRange ; var minimumClusterSize:==:entityCluster . _ minimumClusterSize ;
var defaultColor = this . view . defaultColor ; var defaultBackground:==:this . view . defaultBackground ;
var brightnessAutoCheckbox = this . elements . brightnessAutoCheckbox ; var brightnessManual:==:this . elements . brightnessManual ;
var from = new Date ( queryString . from ) ; var until:==:new date ( queryString . until ) ;
var dy5 = mxUtils . getValue ( this . style , ' dy5 ' , ' 0 ' ) ; var dy6:==:mxUtils . getValue ( this . style , ' dy6 ' , ' 0 ' ) ;
var to = changes . to ; var from:==:changes . from ;
var cellLayoutManager = _ props7 . cellLayoutManager ; var height:==:_ props7 . height ;
var scene = this . scene ; var img:==:document . createElement ( ' img ' ) ;
var withAppended = util . withAppended ; var maybeWrapAsError:==:util . maybeWrapAsError ;
var indigo500 = exports . indigo500 = ' # 3f51b5 ' ; var indigo600:==:exports . indigo600    ' # 3949ab ' ;
var watcher = imports . watcher ; var reportError:==:imports . error_handler . reportError ;
var size = frameState . size ; var viewState:==:frameState . viewState ;
var parameterList = this . transformAny ( tree . parameterList ) ; var typeAnnotation:==:this . transformAny ( tree . typeAnnotation ) ;
var transaction = db . transaction ( placesHelper . sites_store , ' readwrite ' ) ; var objectStore:==:transaction . objectStore ( placesHelper . sites_store ) ;
var nodeCommand = nodeCommands [ i ] ; var command:==:nodeCommand . command ;
var extent = frameState . extent ; var center:==:viewState . center ;
var a = fulfillThenableSoon ( ' a ' , 40 ) ; var b:==:rejectThenableSoon ( ' rejected - b ' , 30 ) ;
var lineBreakAfterOpeningBrace = this . _ lineBreakAfterOpeningBrace ; var lineBreakBeforeClosingBrace:==:this . _ lineBreakBeforeClosingBrace ;
var dist = this . centerPos . distanceTo ( this . mouse ) ; var angle:==:this . centerPos . angleTo ( this . mouse ) ;
var offsetWidth = precomputedFeatures ? precomputedFeatures . offsetWidth : naturalWidth ; var offsetHeight:==:precomputedFeatures ? precomputedFeatures . offsetHeight : naturalHeight ;
var createIdentifierExpression = parseTreeFactory . createIdentifierExpression ; var predefinedName:==:traceur . syntax . predefinedName ;
var clearOverlays = t . clearOverlays ; var clearSelection:==:t . clearSelection ;
var svgUtil = powerbi . visuals . svgUtil ; var getLabelFormattedText:==:powerbi . visuals . dataLabelUtils . getLabelFormattedText ;
var ams = ' ams ' ; var accent:==:' accent ' ;
var mfenced = cTop . createElement ( ' mfenced ' ) ; var mtable:==:cTop . createElement ( ' mtable ' ) ;
var minDistNormal = intersectconvex_mindistnormal ; var vector:==:intersectconvex_vector ;
var camera = scene . camera ; var zoomPromise:==:viewer . _ zoomPromise ;
var fullSceneLayout = scene . fullSceneLayout ; var domain:==:fullSceneLayout . domain ;
var fullscreenButton = this . _ fullscreenButton ; var vrButton:==:this . _ vrButton ;
var seleniumPort = grunt . option ( ' seleniumPort ' ) ; var useSeleniumJar:==:grunt . option ( ' useSeleniumJar ' ) ;
var foo = t : ' idOrVar ' , v : ' foo ' ; var bar:==:t : ' idOrVar ' , v : ' bar ' ;
var orientation = this . options . orientation . item ; var box:==:this . dom . box ;
var gl = this . gl ; var shaderProgram:==:this . shaderProgram ;
var path = require ( ' path ' ) ; var timekeeper:==:require ( ' timekeeper ' ) ;
var wallet = profileService . getWallet ( $ stateParams . walletId ) ; var walletId:==:wallet . credentials . walletId ;
var outlineColor = pointPrimitive . outlineColor ; var red:==:color . floatToByte ( color . red ) ;
var stRotation = options . stRotation ; var wall:==:options . wall ;
var renderView = renderViewWithFragments . viewRef ; var elementCount:==:mergedParentViewProto . mergeInfo . elementCount ;
var type = listener . type ; var proxy:==:listener . proxy ;
var hasOwn = class2type . hasOwnProperty ; var trim:==:' ' . trim ;
var style = _ props3 . style ; var children:==:_ props3 . children ;
var data = app . ns ( ' data ' ) ; var ut:==:app . ns ( ' ut ' ) ;
var script = ' hexo . _ script_test = true ' ; var path:==:pathFn . join ( hexo . script_dir , ' test . js ' ) ;
var calendar = this . view . calendar ; var start:==:event . start . clone ( ) . stripZone ( ) ;
var keys = evt . getProperty ( ' keys ' ) ; var values:==:evt . getProperty ( ' values ' ) ;
var scene = entityCluster . _ scene ; var labelCollection:==:entityCluster . _ labelCollection ;
var functionNode = math . expression . node . functionNode ; var constantNode:==:math . expression . node . constantNode ;
var sinon = require ( ' sinon ' ) ; var fs:==:require ( ' fs ' ) ;
var col = this . colCoordCache . getHorizontalIndex ( leftOffset ) ; var row:==:this . rowCoordCache . getVerticalIndex ( topOffset ) ;
var fs = require ( ' fs ' ) ; var testSuiteResult:==:require ( ' tester ' ) . testSuiteResult ;
var parent = this . parent ; var config:==:this . config ;
var ut = app . ns ( ' ut ' ) ; var services:==:app . ns ( ' services ' ) ;
var green700 = exports . green700 = ' # 388e3c ' ; var green800:==:exports . green800    ' # 2e7d32 ' ;
var stackPartitions = ellipsoid . stackPartitions ; var slicePartitions:==:ellipsoid . slicePartitions ;
var scrollHeight = this . container . scrollHeight ; var clientHeight:==:this . container . clientHeight ;
var step = goog . isDef ( opt_step ) ? opt_step : 1 ; var iter:==:new goog . iter . iterator ( ) ;
var silent = options & & options . silent ; var unset:==:options & & options . unset ;
var forward = command . searchArgs . forward ; var wholeWordOnly:==:command . searchArgs . wholeWordOnly ;
var element = $ element [ 0 ] ; var options:==:this . options ;
var boundingSphere = boundingSphere . fromVertices ( cartesianVertices , cartesian3 . zero , 3 , boundingSphereScratch ) ; var orientedBoundingBox:==:orientedBoundingBox . fromRectangle ( rectangle , minimumHeight , maximumHeight , ellipsoid , orientedBoundingBoxScratch ) ;
var remRadian = numberUtil . remRadian ; var isRadianAroundZero:==:numberUtil . isRadianAroundZero ;
var latlng = list [ idFolders ] [ ' bkmrk ' ] [ idBkmrks ] . latlng . split ( ' , ' ) ; var guid:==:list [ idFolders ] [ ' bkmrk ' ] [ idBkmrks ] . guid ;
var throwStatement = traceur . syntax . trees . throwStatement ; var tryStatement:==:traceur . syntax . trees . tryStatement ;
var zmin = options . zmin  |  |  -1 . 0 ; var xmax:==:options . xmax  |  |  1 . 0 ;
var menus = imports . menus ; var join:==:require ( ' path ' ) . join ;
var getHoverListener = t . getHoverListener ; var getMaxMinute:==:t . getMaxMinute ;
var collection = db . collection ( ' fs . chunks ' ) ; var count:==:yield collection . count ( ) ;
var url = require ( ' url ' ) ; var util:==:require ( ' hexo - util ' ) ;
var l1_decay_mul = typeof pg . l1_decay_mul ! = = ' undefined ' ? pg . l1_decay_mul : 1 . 0 ; var l2_decay:==:this . l2_decay * l2_decay_mul ;
var session = require ( ' express - session ' ) ; var useragent:==:require ( ' express - useragent ' ) ;
var isFunction = _ _ dependency4 _ _ . isFunction ; var now:==:_ _ dependency4 _ _ . now ;
var rawEditor = this . codeMirrorInstances . rawEditor ; var subviews:==:this . subviews ;
var canvas = $ ( ' canvas ' ) ; var debug:==:$ ( ' # debug ' ) ;
var maxSize = math . max ( minSize , math . min ( 9999 , powerbi . dataViewObjects . getValue ( objects , properties [ ' maxSize ' ] , defaultSettings . maxSize ) ) ) ; var size:==:math . max ( minSize , math . min ( maxSize , powerbi . dataViewObjects . getValue ( objects , properties [ ' size ' ] , defaultSettings . size ) ) ) ;
var logos = frameState . logos ; var logoElements:==:this . logoElements _ ;
var outlineWidth = rectangle . outlineWidth ; var closeBottom:==:rectangle . closeBottom ;
var domProperty = require ( ' domProperty ' ) ; var reactdomComponentTree:==:require ( ' reactdomComponentTree ' ) ;
var r = rotation*Matrix2d . deg_to_rad ; var cos:==:math . cos ( r ) ;
var babelify = require ( ' babelify ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var form = field . closest ( ' form , . validationEngineContainer ' ) ; var name:==:field . attr ( ' name ' ) ;
var fileExtension = defaultValue ( options . fileExtension , format . getAttribute ( ' extension ' ) ) ; var tileWidth:==:defaultValue ( options . tileWidth , parseInt ( format . getAttribute ( ' width ' ) , 10 ) ) ;
var ARROW_FUNCTION = ' ARROW_FUNCTION ' ; var ASSIGNMENT_ELEMENT:==:' ASSIGNMENT_ELEMENT ' ;
var p = dimension . parent ; var extent:==:dimension . brush . extent ( ) ;
var S = db . model ( ' updateStrictSchema ' ) ; var s:==:new s ( name : ' orange crush ' ) ;
var innerHTML = Object . getOwnPropertyDescriptor ( element . prototype , ' innerhtml ' ) ; var removeAttribute:==:element . prototype . removeAttribute ;
var x = view . _ devicePixelRatio * ( uiPoint . x - box . left ) ; var y:==:view . _ devicePixelRatio * ( box . top + box . height - uiPoint . y ) ;
var metadata = JSON . parse ( buffer ) . metadata ; var license:==:metadata . license ;
var dataLabelUtils = powerbi . visuals . dataLabelUtils ; var visualDataRoleKind:==:powerbi . visualDataRoleKind ;
var falsy = exports . falsy = internalPropTypes . falsy ; var history:==:exports . history    internalPropTypes . history ;
var path = require ( ' path ' ) ; var browserify:==:require ( ' browserify ' ) ;
var each = require ( ' each ' ) ; var events:==:require ( ' analytics - events ' ) ;
var expandClosestSibling = ! ! ( options & & options . expandClosestSibling ) ; var onlyPartialContains:==:! ! ( options & & options . onlyPartialContains ) ;
var caption = $ img . attr ( ' data - caption ' ) ; var align:==:$ img . attr ( ' data - align ' ) ;
var doc = wrap ( document ) ; var a:==:document . createElement ( ' a ' ) ;
var s = this . canvas . getSize ( ) ; var w:==:s . width , h    s . height ;
var loadOptions = this . props . loadOptions ; var cache:==:this . _ cache ;
var sass = require ( ' gulp - sass ' ) ; var autoprefixer:==:require ( ' gulp - autoprefixer ' ) ;
var elementCount = mergedParentViewProto . mergeInfo . elementCount ; var viewCount:==:mergedParentViewProto . mergeInfo . viewCount ;
var range = clockRange [ clockPacket . clock . range ] ; var step:==:clockStep [ clockPacket . clock . step ] ;
var x = this . x + 1 ; var y:==:this . ydisp + this . y ;
var r = Math . round ( this . hueTorgb ( p , q , tr ) * 255 ) ; var g:==:math . round ( this . hueTorgb ( p , q , tg ) * 255 ) ;
var isDeleteKey = utilities . isDeleteKey ; var isTabKey:==:utilities . isTabKey ;
var Observable = utils . Observable ; var passport:==:require ( ' passport ' ) ;
var shr64_hi = utils . shr64_hi ; var shr64_lo:==:utils . shr64_lo ;
var legendItem = legenditems_1 [ _ i ] ; var dataPoint:==:legendItem . dataPoint ;
var each = require ( ' each ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var x = Math . pow ( 1 - t , 2 ) * this . fromPoint . x + 2 * t * ( 1 - t ) * viaNode . x + math . pow ( t , 2 ) * this . toPoint . x ; var y:==:math . pow ( 1 - t , 2 ) * this . fromPoint . y + 2 * t * ( 1 - t ) * viaNode . y + math . pow ( t , 2 ) * this . toPoint . y ;
var allocationNode = this . _ allocationNode ; var target:==:this . _ dataGrid . target ( ) ;
var lineStyle = lineStyleModel . getLineStyle ( ) ; var areaStyle:==:areaStyleModel . getAreaStyle ( ) ;
var getTestDocument = require ( ' getTestDocument ' ) ; var getNodeForCharacterOffset:==:require ( ' getNodeForCharacterOffset ' ) ;
var deepOrange50 = exports . deepOrange50 = ' # fbe9e7 ' ; var deepOrange100:==:exports . deepOrange100    ' # ffccbc ' ;
var text = options . hasOwnProperty ( ' text ' ) ? options . text : ' search ' ; var button:==:options . button ;
var hz = Piezo . Parsers . hzFromInput ( note ) ; var beat:==:piezo . parsers . beatFromNote ( note ) ;
var scope = window [ scopeName ] ; var entryPointName:==:scope . entryPointName ;
var should = chai . should ; var sinon:==:require ( ' sinon ' ) ;
var api = imports . api ; var panels:==:imports . panels ;
var eip = this . eip ; var gmdl:==:this . gmdl ;
var subtitleColor = _ props . subtitleColor ; var subtitleStyle:==:_ props . subtitleStyle ;
var getKey = localUtils . getKey ; var getValue:==:localUtils . getValue ;
var classes = taffy ( members . classes ) ; var modules:==:taffy ( members . modules ) ;
var circle = s . circle ( 10 , 20 , 30 ) ; var r:==:circle . attr ( ' r ' ) ;
var expires_at = _ ref . expires_at ; var state:==:_ ref . state ;
var searchResult = this . _ searchResult ; var uiSourceCode:==:searchResult . uiSourceCode ;
var context = scene . _ context ; var viewport:==:passState . viewport ;
var w = this . _ width-2 ; var h:==:this . _ height-2 ;
var x = ( a * rawX ) + ( c * rawY ) + tx ; var y:==:( d * rawY ) + ( b * rawX ) + ty ;
var from = codeMirror . posFromIndex ( _ editedNode . location + change . from ) ; var to:==:codeMirror . posFromIndex ( _ editedNode . location + change . to ) ;
var font = this . font _ ; var actors:==:diagram . actors ;
var firstEdgeIndexes = this . _ firstEdgeIndexes ; var nodeCount:==:this . nodeCount ;
var undefsafe = require ( ' undefsafe ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var UserAgent_DEPRECATED = require ( ' UserAgent_DEPRECATED ' ) ; var isEventSupported:==:require ( ' isEventSupported ' ) ;
var file = require ( ' gulp - file ' ) ; var gulp:==:require ( ' gulp ' ) ;
var awaitGlobalException = testUtils . awaitGlobalException ; var sinon:==:require ( ' sinon ' ) ;
var indigo600 = exports . indigo600 = ' # 3949ab ' ; var indigo700:==:exports . indigo700    ' # 303f9f ' ;
var order = $ scope . order [ type ] ; var second_currency:==:$ scope . order . second_currency  |  |  Currency . from_json ( ' XRP ' ) ;
var parse = math . expression . parse ; var conditionalNode:==:math . expression . node . conditionalNode ;
var WireV8 = goog . labs . net . webChannel . wirev8 ; var wire:==:goog . labs . net . webChannel . wire ;
var fs = require ( ' fs ' ) ; var path:==:require ( ' path ' ) ;
var minute = parseInt ( this . container . find ( ' . right . minuteselect ' ) . val ( ) , 10 ) ; var second:==:this . timePickerSeconds ? parseInt ( this . container . find ( ' . right . secondselect ' ) . val ( ) , 10 ) : 0 ;
var CONNECTION_STRING = DEFAULT_CONNECTION_STRING ; var rules:==:default_rules ;
var isPropType = isPropTypesDeclaration ( node ) ; var isDefaultProp:==:isDefaultPropsDeclaration ( node ) ;
var scrollToColumn = _ state . scrollToColumn ; var scrollToRow:==:_ state . scrollToRow ;
var y = y _  |  0 ; var level:==:level _  |  0 ;
var velocity = -event . velocity ; var speedLimit:==:this . options . speedLimit ;
var data = img . data [ 3 ] ; var max:==:this . _ max ;
var a = load ( require , name ) ; var r:==:require ;
var is = require ( ' is ' ) ; var iso:==:require ( ' to - iso - string ' ) ;
var members = type . members ; var ambientMembers:==:type . ambientMembers ;
var high = _ ref5 . high ; var low:==:_ ref5 . low ;
var update_title = options . update_title  |  |  typeof options . update_title = = = ' undefined ' ; var update_active:==:options . update_active  |  |  typeof options . update_active      ' undefined ' ;
var owner = doc . ownerDocument ? doc . ownerDocument ( ) : doc ; var pop:==:owner . populated ( path , true ) ;
var content = options . content ; var delay:==:options . delay ;
var elementSelector = this . elementSelector ; var durationSelector:==:this . durationSelector ;
var className = options . className ! = = undefined ? options . className : ' ol - attribution ' ; var tipLabel:==:options . tipLabel !    undefined ? options . tipLabel : ' attributions ' ;
var routes = this . routes ; var keys:==:Object . keys ( routes ) ;
var reactFiberBeginWork = require ( ' reactFiberBeginWork ' ) ; var reactFiberCompleteWork:==:require ( ' reactFiberCompleteWork ' ) ;
var translateX = this . _ reduceTranslateValues ( ' translatex ' , this . _ translatex ) ; var translatey:==:this . _ reduceTranslateValues ( ' translatey ' , this . _ translatey ) ;
var heightOffset = defaultValue ( structure . heightOffset , heightmapTessellator . default_structure . heightOffset ) ; var elementsPerHeight:==:defaultValue ( structure . elementsPerHeight , heightmapTessellator . default_structure . elementsPerHeight ) ;
var cosh = math . cosh ; var complex:==:math . complex ;
var pink600 = exports . pink600 = ' # d81b60 ' ; var pink700:==:exports . pink700    ' # c2185b ' ;
var find = imports . find ; var finder:==:imports . finder ;
var user = ob . user ; var isNewUser:==:ob . isNewUser ;
var editor = this . editor ; var debug:==:editor . config . debug ;
var barGroup = this . _ displayables . barGroup ; var size:==:this . _ size ;
var param = _ param ; var i:==:_ i ;
var session = renderer . session ; var diffStates:==:session . bgTokenizer . diffStates ;
var staticError = errors . staticError ; var staticWarning:==:errors . staticWarning ;
var signature = req . query . msg_signature ; var timestamp:==:req . query . timestamp ;
var dynCall_fiii = Module [ ' dynCall_fiii ' ] = asm [ ' dynCall_fiii ' ] ; var dynCall_viiidi:==:Module [ ' dynCall_viiidi ' ]    asm [ ' dynCall_viiidi ' ] ;
var path = e . path ; var tab:==:tabManager . findTab ( path ) ;
var type = fiber . type ; var key:==:fiber . key ;
var dy2 = Math . max ( 0 , Math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' dy2 ' , this . dy2 ) ) ) ) ; var dx2:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx2 ' , this . dx2 ) ) ) ) ;
var newItem = event . detail . newItem ; var filter:==:this . _ filter ;
var element = _ react . propTypes . element ; var shape:==:_ react . propTypes . shape ;
var fs = require ( ' fs ' ) ; var http:==:require ( ' http ' ) ;
var Dict = corePrimitives . dict ; var jbig2Image:==:coreJbig2 . jbig2Image ;
var alias = require ( ' alias ' ) ; var dates:==:require ( ' convert - dates ' ) ;
var filters = this . target . filters ; var w:==:this . _ drawWidth ;
var dynCall_vii = Module [ ' dynCall_vii ' ] = asm [ ' dynCall_vii ' ] ; var dynCall_iii:==:Module [ ' dynCall_iii ' ]    asm [ ' dynCall_iii ' ] ;
var Person = db . model ( ' gh4264 ' , personSchema ) ; var blogPost:==:db . model ( ' gh4264_0 ' , blogPostSchema ) ;
var popup_redirect_uri = _ ref . popup_redirect_uri ; var popupWindowFeatures:==:_ ref . popupWindowFeatures ;
var retainingEdges = this . _ retainingEdges ; var edgeFieldsCount:==:this . _ edgeFieldsCount ;
var options = this . options ; var actions:==:options . actions ;
var test = require ( ' tap ' ) . test ; var path:==:require ( ' path ' ) ;
var p = el . parent ; var index:==:p . children . indexOf ( el ) ;
var should = require ( ' should ' ) ; var when:==:require ( ' when ' ) ;
var focusManager = imports . focusManager ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var height = _ props2 . height ; var scrollToCell:==:_ props2 . scrollToCell ;
var dx = Math . max ( 0 , Math . min ( bounds . width , mxUtils . getValue ( this . state . style , ' dx ' , cornerShape . prototype . dx ) ) ) ; var dy:==:math . max ( 0 , math . min ( bounds . height , mxUtils . getValue ( this . state . style , ' dy ' , cornerShape . prototype . dy ) ) ) ;
var engine = instanceInfo . owner . owner . engine ; var effect:==:context . useInstancing ? this . effectInstanced : this . effect ;
var async = require ( ' async ' ) ; var log:==:require ( dirs . core + ' log ' ) ;
var timestamps = this . _ profileSamples . timestamps ; var totalTime:==:this . _ profileSamples . totalTime ;
var groupKeys = this . _ groupKeys ; var groupItem:==:groupItems [ groupKey ] ;
var createPrivateSymbol = m . createPrivateSymbol ; var hasPrivate:==:m . hasPrivate ;
var canvas = this . game . canvas ; var margin:==:this . margin ;
var inheritSingle = powerbi . prototype . inheritSingle ; var valueFormatter:==:powerbi . visuals . valueFormatter ;
var bits = this . bits = params . get ( ' bitsPerComponent ' )  |  |  8 ; var columns:==:this . columns    params . get ( ' columns ' )  |  |  1 ;
var hash = location . hash ; var shareId:==:session . shareId ;
var agent = options . agent ; var defaultAgent:==:options . _ defaultAgent  |  |  agent . globalAgent ;
var pagesPromise = pdfViewer . pagesPromise ; var onePageRendered:==:pdfViewer . onePageRendered ;
var rotation = frameState . viewState . rotation ; var skippedFeatureUids:==:frameState . skippedFeatureUids ;
var height = rrectData . height ; var radius:==:rrectData . radius ;
var name = get_name ( target ) ; var rules:==:get_rules ( target , name ) ;
var tealA400 = exports . tealA400 = ' # 1de9b6 ' ; var tealA700:==:exports . tealA700    ' # 00bfa5 ' ;
var right = ~dir . indexOf ( ' right ' ) & & ' right ' ; var top:==:~dir . indexOf ( ' top ' )   & & ' top ' ;
var liveCount = node . liveCount ; var liveSize:==:node . liveSize ;
var wheel = wheelInfos [ i ] ; var suspensionForce:==:wheel . suspensionForce ;
var r = shape . r ; var s0:==:shape . s0 ;
var lineDisplayTextAttribute = windows . devices . pointOfService . lineDisplayTextAttribute ; var lineDisplayTextAttributeGranularity:==:windows . devices . pointOfService . lineDisplayTextAttributeGranularity ;
var _ strlen = Module [ ' _ strlen ' ] = asm [ ' _ strlen ' ] ; var _ realloc:==:Module [ ' _ realloc ' ]    asm [ ' _ realloc ' ] ;
var plan = BABYLON . Mesh . createPlane ( ' plane ' , 10 . 0 , scene ) ; var cylinder:==:babylon . mesh . createCylinder ( ' cylinder ' , 3 , 3 , 3 , 6 , 1 , scene , false ) ;
var a = params . anchors ? params . anchors [ index ] : _ makeAnchor ( _ currentInstance . defaults . anchors [ index ] )  |  |  _ makeAnchor ( jsPlumb . defaults . anchors [ index ] )  |  |  _ makeAnchor ( _ currentInstance . defaults . anchor )  |  |  _ makeAnchor ( jsPlumb . defaults . anchor ) ; var u:==:params . uuids ? params . uuids [ index ] : null ;
var x = elementPosition . x - videoPosition . x ; var y:==:elementPosition . y - videoPosition . y ;
var FALSE4 = C . FALSE4 = 0x34 ; var NULL1:==:C . NULL1    0x41 ;
var reactdomComponentTree = require ( ' reactdomComponentTree ' ) ; var reactdomInput:==:require ( ' reactdomInput ' ) ;
var normalize = require ( ' path ' ) . normalize ; var join:==:require ( ' path ' ) . join ;
var readdir = promisify ( fs . readdir ) ; var readFile:==:promisify ( fs . readFile ) ;
var right = camera . right ; var frustum:==:camera . frustum ;
var colspan = widget . colspan ; var rowspan:==:widget . rowspan ;
var data = JSON . parse ( request . data ) ; var name:==:data . name ;
var sinon = require ( ' sinon ' ) ; var vfs:==:require ( ' vfs - local ' ) ;
var node = nodes [ i ] ; var sourceIndex:==:node . sourceIndex ;
var debug = require ( ' debug ' ) ( ' analytics . js : normalize ' ) ; var defaults:==:require ( ' defaults ' ) ;
var prev = record . _ prevDup ; var next:==:record . _ nextDup ;
var filter = this . _ filter ; var filteredKeys:==:this . _ filteredKeys ;
var dayNamesShort = ( settings ? settings . dayNamesShort : null )  |  |  this . _ defaults . dayNamesShort ; var dayNames:==:( settings ? settings . dayNames : null )  |  |  this . _ defaults . dayNames ;
var style = this . style ; var shape:==:this . shape ;
var ignore = this . ignore ; var context:==:this . context ;
var file = path . join ( testPackage , ' new - file ' ) ; var dir:==:path . join ( testPackage , ' new - dir ' ) ;
var callback = $ . data ( this , ' numeric . callback ' ) ; var negative:==:$ . data ( this , ' numeric . negative ' ) ;
var max = this . _ max = data . max ; var data:==:data . data  |  |  [ ] ;
var times = this . times ; var inTangents:==:this . inTangents ;
var scrollTop = scroller . scrollTop ( ) ; var scrollHeight:==:scroller . scrollHeight ( ) ;
var eye = SIMD . float32x4 ( eyeRef . x , eyeRef . y , eyeRef . z , 0 ) ; var up:==:simd . float32x4 ( upRef . x , upRef . y , upRef . z , 0 ) ;
var container = caretPosition . container ( ) ; var offset:==:caretPosition . offset ( ) ;
var credentialToken = config . credentialToken ; var credentialSecret:==:config . credentialSecret ;
var path = require ( ' path ' ) ; var temp:==:require ( ' temp ' ) . track ( ) ;
var args = operation . args ; var fn:==:operation . fn ;
var singleChar = node . getAttribute ( ' singleChar ' ) ; var esc:==:node . getAttribute ( ' escapeChar ' ) ;
var inject = require ( ' gulp - inject ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var tabManager = imports . tabManager ; var question:==:imports [ ' dialog . question ' ] . show ;
var axis = joint . axis ; var transforms:==:jointData . transforms ;
var createParameterList = parseTreeFactory . createParameterList ; var createParenExpression:==:parseTreeFactory . createParenExpression ;
var min = calendarCtrl . minDate ? dateUtil . getFirstDateOfMonth ( calendarCtrl . minDate ) : null ; var max:==:calendarCtrl . maxDate ? dateUtil . getFirstDateOfMonth ( calendarCtrl . maxDate ) : null ;
var providers = opts . providers  |  |  ; var context:==:opts . context  |  |  ;
var switchs = topo . data [ ' switchs ' ] ; var anchors:==:topo . data [ ' anchors ' ] ;
var settings = imports . settings ; var findreplace:==:imports . findreplace ;
var createIdentifierExpression = parseTreeFactory . createIdentifierExpression ; var createMemberExpression:==:parseTreeFactory . createMemberExpression ;
var DIFF_INSERT = DMP . DIFF_INSERT ; var DIFF_DELETE:==:DMP . DIFF_DELETE ;
var exceptSnakeCase = this . _ exceptSnakeCase ; var exceptKeywords:==:this . _ exceptKeywords ;
var pageIndex = data . pageIndex ; var normalizeWhitespace:==:data . normalizeWhitespace ;
var chalk   = require ( ' chalk ' ) ; var path:==:require ( ' path ' ) ;
var VALUE = C . VALUE = 0x71 ; var KEY:==:C . KEY     0x72 ;
var op = ' op ' ; var open:==:' open ' ;
var location = response . location ; var script:==:this . scriptForId ( location . scriptId ) ;
var availableField = event . currentTarget . getData ( ' availableField ' ) ; var connector:==:instance . connector ;
var exec = require ( ' child_process ' ) . exec ; var gulp:==:require ( ' gulp ' ) ;
var x = bounds . x ; var y:==:bounds . y ;
var DOCUMENT_POSITION_DISCONNECTED = Node . DOCUMENT_POSITION_DISCONNECTED ; var DOCUMENT_POSITION_PRECEDING:==:Node . DOCUMENT_POSITION_PRECEDING ;
var glob = require ( ' glob ' ) . sync ; var spawn:==:require ( ' child_process ' ) . spawn ;
var array = attribute . array ; var updateRange:==:attribute . updateRange ;
var children = _ props2 . children ; var disabled:==:_ props2 . disabled ;
var overlayTitle = app . overlayTitle ; var overlayText:==:app . overlayText ;
var w = Math . min ( rect . width , tintedImgCache [ 0 ] . width ) ; var h:==:math . min ( rect . height , tintedImgCache [ 0 ] . height ) ;
var ensureComponentIsNative = require ( ' ensureComponentIsNative ' ) ; var ensurePositiveDelayProps:==:require ( ' ensurePositiveDelayProps ' ) ;
var fs = require ( ' fs ' ) ; var test:==:require ( ' tap ' ) . test ;
var ellipsoid = rectangleGeometry . _ ellipsoid ; var minHeight:==:minHeightFunc ( granularity , ellipsoid ) ;
var operatorNode = math . expression . node . operatorNode ; var blockNode:==:math . expression . node . blockNode ;
var body = registeredMesh . body ; var center:==:mesh . getBoundingInfo ( ) . boundingBox . center . clone ( ) ;
var defaultStyles = _ props . defaultStyles ; var styles:==:_ props . styles ;
var x = tag . getAttribute ( ' x ' ) ; var y:==:tag . getAttribute ( ' y ' ) ;
var height = requiredHeight  |  |  ( navigator . isCocoonjs ? window . innerHeight : this . _ renderingCanvas . height ) ; var x:==:viewport . x  |  |  0 ;
var ed2 = join ( ' ed2 ' ) ; var ed3:==:join ( ' ed3 ' ) ;
var alert = imports [ ' dialog . alert ' ] . show ; var apf:==:imports . apf ;
var Unit = math . type . Unit ; var mean:==:math . mean ;
var size = m . _ size ; var data:==:m . _ data ;
var activities = processDefinitionDiagramLayout . activities ; var sequenceFlows:==:processDefinitionDiagramLayout . sequenceFlows ;
var options    = bs . options ; var server:==:options . get ( ' server ' ) ;
var recorder = util . Module ( ' recorder ' ) ; var assert:==:util . assert ;
var i = this . index_or_selected ( index ) ; var cell:==:this . get_cell ( i ) ;
var _ realloc = Module [ ' _ realloc ' ] = asm [ ' _ realloc ' ] ; var _ strncasecmp:==:Module [ ' _ strncasecmp ' ]    asm [ ' _ strncasecmp ' ] ;
var Globalization = Windows . Globalization ; var Calendar:==:Globalization . Calendar ;
var bot = rect . bottom + 10 + window . pageyOffset ; var left:==:rect . left + window . pagexOffset ;
var notebookId = $ ( this ) . attr ( ' notebookId ' ) ; var notebook:==:notebook . cache [ notebookId ] ;
var path   = require ( ' path ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var stRotation = polygon . stRotation ; var outlineWidth:==:polygon . outlineWidth ;
var job = e . job ; var dir:==:path . dirname ( job . fullPath ) ;
var multilineTagIndentFactor = parserConfig . multilineTagIndentFactor  |  |  1 ; var multilineTagIndentPastTag:==:parserConfig . multilineTagIndentPastTag  |  |  true ;
var path = require ( ' path ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var importSpecifier = traceur . syntax . trees . importSpecifier ; var importSpecifierSet:==:traceur . syntax . trees . importSpecifierSet ;
var Range = math . type . Range ; var Unit:==:math . type . Unit ;
var http = imports . http ; var fs:==:require ( ' fs ' ) ;
var debug = imports . debugger ; var tabManager:==:imports . tabManager ;
var ui = imports . ui ; var confirm:==:imports [ ' dialog . confirm ' ] . show ;
var Menu = imports . Menu ; var Divider:==:imports . Divider ;
var gl = this . gl ; var buffer:==:new uint8Array ( array . buffer ) ;
var decay = data . decay ; var distance:==:data . distance ;
var attrib = $ this . data ( ' attrib ' ) ; var device_id:==:$ this . data ( ' device_id ' ) ;
var COOKIES_ENABLED = process . env . COOKIES_ENABLED  |  |  false ; var PAGE_DONE_CHECK_TIMEOUT:==:process . env . PAGE_DONE_CHECK_TIMEOUT  |  |  300 ;
var casper = require ( ' casper ' ) . create ( ) ; var baz:==:require ( ' baz ' ) ;
var textureUnitIndex = gl . texture0 + this . textureUnitIndex ; var value:==:this . value ;
var backgroundColor = _ props . backgroundColor ; var icon:==:_ props . icon ;
var os    = require ( ' os ' ) ; var gulp:==:require ( ' gulp ' ) ;
var rotr64_lo = utils . rotr64_lo ; var shr64_hi:==:utils . shr64_hi ;
var unicode = glyph [ i ] . getAttribute ( ' unicode ' ) ; var name:==:glyph [ i ] . getAttribute ( ' glyph - name ' ) ;
var dateTimeSymbols = goog . require ( ' goog . i18n . dateTimeSymbols ' ) ; var dateTimeSymbolsType:==:goog . require ( ' goog . i18n . dateTimeSymbolsType ' ) ;
var x = this . body . position . x ; var y:==:this . body . position . y ;
var relatedTarget = defaultValue ( options . relatedTarget , null ) ; var ctrlKey:==:defaultValue ( options . ctrlKey , false ) ;
var assetRegistry = require ( ' assetRegistry ' ) ; var platform:==:require ( ' platform ' ) ;
var doc = e . doc ; var session:==:e . session ;
var events   = cfg . events  |  |  [ ] ; var callbacks:==:cfg . callbacks  |  |  ;
var utils = require ( ' index ' ) . utils ; var diff:==:utils . diff ;
var mixins = taffy ( members . mixins ) ; var externals:==:taffy ( members . externals ) ;
var through2 = require ( ' through2 ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var send = $ scope . send ; var currency:==:$ scope . send . currency . slice ( 0 , 3 ) . toUpperCase ( ) ;
var surface = surfaces [ s ] ; var corners:==:surface . corners ;
var util = require ( ' util ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var pruned = Object . keys ( debugInfo . pruned ) ; var flattened:==:object . keys ( debugInfo . flattened ) ;
var series = require ( ' stream - series ' ) ; var lazypipe:==:require ( ' lazypipe ' ) ;
var encodeHTML = formatUtil . encodehtml ; var bind:==:zrUtil . bind ;
var camera = this . camera ; var app:==:this . app ;
var anims = imports . anims ; var ui:==:imports . ui ;
var controller = options . controller ; var controllerAs:==:options . controllerAs ;
var LRE = goog . i18n . bidi . Format . LRE ; var RLE:==:goog . i18n . bidi . Format . RLE ;
var changeMonth = this . _ get ( inst , ' changeMonth ' ) ; var changeYear:==:this . _ get ( inst , ' changeYear ' ) ;
var isArray = sharedUtil . isArray ; var warn:==:sharedUtil . warn ;
var Plugin = imports . Plugin ; var Document:==:imports . Document ;
var util = require ( ' util ' ) ; var assert:==:require ( ' assert ' ) ;
var days    = abs$1 ( this . _ days ) ; var months:==:abs$1 ( this . _ months ) ;
var value = this . value ( ) ; var type:==:this . type ( ) ;
var _ getPrediction = module [ ' _ getPrediction ' ] = asm [ ' _ getPrediction ' ] ; var _ memcpy:==:module [ ' _ memcpy ' ]    asm [ ' _ memcpy ' ] ;
var tokenize = tk . tokenize ; var toStr:==:tk . toStr ;
var min = x : contains180 ? -1 : Math . min ( start . x * ( start . x < 0 ? 1 : cutout ) , end . x * ( end . x < 0 ? 1 : cutout ) ) , y : contains270 ? -1 : Math . min ( start . y * ( start . y < 0 ? 1 : cutout ) , end . y * ( end . y < 0 ? 1 : cutout ) ) ; var max:==:x : contains0 ? 1 : Math . max ( start . x * ( start . x > 0 ? 1 : cutout ) , end . x * ( end . x > 0 ? 1 : cutout ) ) , y : contains90 ? 1 : Math . max ( start . y * ( start . y > 0 ? 1 : cutout ) , end . y * ( end . y > 0 ? 1 : cutout ) ) ;
var handler2 = jasmine . createSpy ( ' handler2 ' ) ; var handler3:==:jasmine . createSpy ( ' handler3 ' ) ;
var faceUV = options . faceUV  |  |  new Array ( 3 ) ; var faceColors:==:options . faceColors ;
var legendPosition = powerbi . visuals . legendPosition ; var legend:==:powerbi . visuals . legend ;
var nodes = this . nodes ; var nodeNameOffset:==:this . _ nodeNameOffset ;
var name = packageSource . name ; var version:==:packageSource . version ;
var createCallExpression = parseTreeFactory . createCallExpression ; var createCommaExpression:==:parseTreeFactory . createCommaExpression ;
var doc = this . doc ; var path:==:this . $ path ;
var encodeHTML = formatUtil . encodehtml ; var addCommas:==:formatUtil . addCommas ;
var space = _ space ; var plus:==:_ plus ;
var resolveUrl = traceur . util . resolveUrl ; var objectMap:==:traceur . util . objectMap ;
var l = parseFloat ( s . left ) ; var t:==:parseFloat ( s . top ) ;
var content = document . querySelector ( ' # content ' ) ; var p:==:document . querySelector ( ' # page ' ) ;
var error = imports [ ' dialog . error ' ] ; var nw:==:nativeRequire ( ' nw . gui ' ) ;
var footer = $ ( ' # grid_'+ this . name + ' _ footer ' ) ; var body:==:$ ( ' # grid_'+ this . name + ' _ body ' ) ;
var lockType = options . lockType ; var retryCount:==:error . retryCount ;
var a = names [ i ] ; var name:==:a . asname      null ? a . name . v : a . asname . v ;
var validator = vdom . validator ; var dom:==:vdom . dom ;
var a = ' aaaaaaaaaaaaaaaaaaaaaaaabbaacabbabaaaaabbaaaabbac ' . slice ( 24,-1 ) ; var b:==:' bbaacabbabaaaaabbaaaabba ' + a ;
var textMeasurementService = powerbi . textMeasurementService ; var valueFormatter:==:powerbi . visuals . valueFormatter ;
var elementRef = this . elementRefs [ boundElementIndex ] ; var view:==:view_ref_1 . internalView ( elementRef . parentView ) ;
var uniformMaps = model . _ uniformMaps ; var gltf:==:model . gltf ;
var mout = require ( ' mout ' ) ; var path:==:require ( ' path ' ) ;
var ellipsoid = rectangleGeometry . _ ellipsoid ; var surfaceHeight:==:rectangleGeometry . _ surfaceHeight ;
var x = startPoint . x - endPoint . x ; var y:==:endPoint . y - startPoint . y ;
var continueStatement = traceur . syntax . trees . continueStatement ; var defaultClause:==:traceur . syntax . trees . defaultClause ;
var radiusX = options . radiusX  |  |  radius ; var radiusY:==:options . radiusY  |  |  radius ;
var packaging = options . packaging ; var staticPrefix:==:options . staticPrefix ;
var cancellationError = subError ( ' cancellationError ' , ' cancellation error ' ) ; var timeoutError:==:subError ( ' timeoutError ' , ' timeout error ' ) ;
var d = new Deferred ( ) ; var t:==:new Date ( ) . getTime ( ) ;
var expression = this . visit ( node . expression ) ; var args:==:this . visitMany ( node . args ) ;
var dynCall_viddii = Module [ ' dynCall_viddii ' ] = asm [ ' dynCall_viddii ' ] ; var dynCall_viiddddddiiii:==:Module [ ' dynCall_viiddddddiiii ' ]    asm [ ' dynCall_viiddddddiiii ' ] ;
var lastRenderedStopIndex = _ ref2 . lastRenderedStopIndex ; var startIndex:==:_ ref2 . startIndex ;
var min = this . element . getAttribute ( ' min ' ) ; var max:==:this . element . getAttribute ( ' max ' ) ;
var sl = n . pos ? n . pos . sl : 0 ; var el:==:n . pos ? n . pos . el : 0 ;
var scheduler = instance . get ( ' scheduler ' ) ; var firstDayOfWeek:==:scheduler . get ( ' firstDayOfWeek ' ) ;
var steps = stepsDefaults ( sliderIn , sliderOut ) ; var visible:==:coerce ( ' visible ' , steps . length > 0 ) ;
var egg = data . params . egg ; var hatchingPotion:==:data . params . hatchingPotion ;
var path = this . path ; var router:==:this . router ;
var currentOffset = _ ref3 . currentOffset ; var targetIndex:==:_ ref3 . targetIndex ;
var allClasses = init . allClasses ; var hasOwnProperty:==:object . prototype . hasOwnProperty ;
var os = require ( ' os ' ) ; var vm:==:require ( ' vm ' ) ;
var createCallExpression = traceur . codegeneration . parseTreeFactory . createCallExpression ; var createFunctionDeclaration:==:traceur . codegeneration . parseTreeFactory . createFunctionDeclaration ;
var row = this . _ grid . getOrCreateRow ( rowIndex ) ; var column:==:this . _ grid . getOrCreateColumn ( columnIndex + this . _ columnLayoutManager . _ gridOffset ) ;
var name = options . name  |  |  '' ; var groups:==:options . groups  |  |  '' ;
var question = imports [ ' dialog . question ' ] ; var preinstalled:==:options . preinstalled ;
var tx = worldTransform . tx ; var ty:==:worldTransform . ty ;
var result = processor . result ( ) ; var distortion:==:parseInt ( result . distortion ) ;
var y = itemLayout . y ; var width:==:itemLayout . width ;
var fs = imports . fs ; var Plugin:==:imports . Plugin ;
var name = ref . name ; var value:==:ref . value ;
var noteId = $ ( this ) . attr ( ' noteId ' ) ; var note:==:note . cache [ noteId ] ;
var current = formatTime ( e . currentTime ) ; var duration:==:formatTime ( e . duration ) ;
var passport = require ( ' passport ' ) ; var clone:==:require ( ' clone ' ) ;
var mode = o . mode ; var buffer:==:o . buffer ;
var h = hsl [ 0 ] ; var s:==:hsl [ 1 ] ;
var categoryPercentage = yScale . options . categoryPercentage ; var barPercentage:==:yScale . options . barPercentage ;
var reactEventEmitterMixin = require ( ' reactEventEmitterMixin ' ) ; var reactNativeComponentTree:==:require ( ' reactNativeComponentTree ' ) ;
var height = polygon . height ; var extrudedHeight:==:polygon . extrudedHeight ;
var panelWithSidebar = declareInterfaceClass ( panelWithSidebarImpl ) ; var request:==:declareInterfaceClass ( requestImpl ) ;
var controller = directive . controller ; var controllerAs:==:directive . controllerAs ;
var dimensions = model . dimensions ; var canvasPixelRatio:==:model . canvasPixelRatio ;
var el = helpers . entityFactory ( ) ; var sceneEl:==:this . sceneEl    el . parentNode ;
var normals = this [ ' normals ' ] ; var len:==:points . length ;
var borderBox = require ( ' borderBox ' ) ; var resolveBoxStyle:==:require ( ' resolveBoxStyle ' ) ;
var treeSnapshot = flush . treeSnapshot ; var operations:==:flush . operations ;
var sourceLayer = blocking . sourceLayerIndex ; var featureIndex:==:blocking . featureIndex ;
var cos = stdlib . Math . cos ; var sin:==:stdlib . Math . sin ;
var assert = require ( ' power - assert ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var nconf = require ( ' nconf ' ) ; var winston:==:require ( ' winston ' ) ;
var srcPath = module . srcPath ; var destPath:==:module . destPath ;
var optimizer = options . optimizer ; var outputDirectory:==:options . outputDirectory ;
var x = ( p0 + xOffset )  |  0 ; var y:==:( p1 + yOffset )  |  0 ;
var t = parseFloat ( s . top ) ; var w:==:parseFloat ( s . width ) ;
var visualMax = nodeModel . get ( ' visualMax ' ) ; var dataExtent:==:nodeLayout . dataExtent . slice ( ) ;
var clamp = require ( ' clamp ' ) ; var invariant:==:require ( ' invariant ' ) ;
var sinon = require ( ' sinon ' ) ; var stripColor:==:require ( ' chalk ' ) . stripColor ;
var isScrollingChange = _ props7 . isScrollingChange ; var width:==:_ props7 . width ;
var editor = e . editor ; var command:==:e . command ;
var left = ~dir . indexOf ( ' left ' ) & & ' left ' ; var right:==:~dir . indexOf ( ' right ' ) & & ' right ' ;
var n = new accessorNode ( a , new indexNode ( [ b , c ] ) ) ; var e:==:new symbolNode ( ' c ' ) ;
var debug = require ( ' debug ' ) ( ' nodemon ' ) ; var path:==:require ( ' path ' ) ;
var Model = Backbone . Model . extend ( ) ; var c:==:new Backbone . Collection ( [ i d : 1 ] , model : Model ) ;
var metadataStore = em . metadataStore ; var helper:==:em . helper ;
var Promise = require ( ' Promise ' ) ; var rctDeviceEventEmitter:==:require ( ' rctDeviceEventEmitter ' ) ;
var eventPluginUtils = require ( ' eventPluginUtils ' ) ; var reactErrorUtils:==:require ( ' reactErrorUtils ' ) ;
var n = readmpInt ( der , ' modulus ' ) ; var e:==:readmpInt ( der , ' public exponent ' ) ;
var vertices = data . vertices ; var normals:==:data . normals ;
var forces = this . physicsBody . forces ; var velocities:==:this . physicsBody . velocities ;
var row = range . start . row ; var session:==:this . session ;
var holderSettings = renderSettings . holderSettings ; var engineSettings:==:renderSettings . engineSettings ;
var width = parseInt ( graph . style . width , 10 ) ; var x1:==:parseFloat ( document . getElementById ( ' x1 ' ) . value ) ;
var tempVarTransformer = traceur . codegeneration . tempVarTransformer ; var tokenType:==:traceur . syntax . tokenType ;
var highlights = result . highlights ; var totalValue:==:result . totalValue ;
var margin = parseInt ( titleBar . css ( ' margin - top ' ) , 10 ) ; var padding:==:parseInt ( dialog . wrapper . css ( ' padding - top ' ) , 10 ) ;
var column = this . _ columnsArray [ i ] ; var weight:==:weights [ column . identifier ] ;
var channel = this . _ channel = Radio . channel ( channelName ) ; var radioEvents:==:_ . result ( this , ' radioEvents ' ) ;
var ends = this . ends _ ; var layout:==:this . layout ;
var fullname = userIds . fullname ; var email:==:userIds . email ;
var sum64_lo = utils . sum64_lo ; var sum64_4_hi:==:utils . sum64_4_hi ;
var combineSeries = powerbi . dataViewObject . getValue ( trendProperties , trendLinePropertyNames . combineSeries , trendLineHelper . defaults . combineSeries ) ; var useHighlightValues:==:powerbi . dataViewObject . getValue ( trendProperties , trendLinePropertyNames . useHighlightValues , trendLineHelper . defaults . useHighlightValues ) ;
var speed = this . speed ; var o:==:this . options ;
var top = region . top ; var right:==:region . right ;
var flaverr = require ( ' flaverr ' ) ; var rttc:==:require ( ' rttc ' ) ;
var left = region . left + dest . x ; var top:==:region . top + dest . y ;
var r = p . querySelectorAll ( selector ) ; var n:==:r . length ;
var Catch = traceur . syntax . trees . Catch ; var functionDeclaration:==:traceur . syntax . trees . functionDeclaration ;
var column = this . _ grid . getOrCreateColumn ( columnIndex ) ; var isLeaf:==:hierarchyNav . isLeaf ( item ) ;
var stylenodes = DOM . getNodeArray ( options . stylenodes ) ; var objects:==:dom . getNodeArray ( options . objects ) ;
var src = ' src= ' ' + escapeHtml ( tokens [ idx ] . src ) + ' ' ' ; var title:==:tokens [ idx ] . title ? ( ' title ' ' + escapeHtml ( replaceEntities ( tokens [ idx ] . title ) ) + ' ' ' ) : '' ;
var type = group . type ; var emergency:==:group . emergency ;
var swig = require ( ' swig ' ) ; var extras:==:require ( ' swig - extras ' ) ;
var validator = lang_1 . isPresent ( extra ) ? collection_1 . stringMapWrapper . get ( extra , ' validator ' ) : null ; var asyncValidator:==:lang_1 . isPresent ( extra ) ? collection_1 . stringMapWrapper . get ( extra , ' asyncValidator ' ) : null ;
var dirname = path . dirname ; var basename:==:path . basename ;
var r = this . r . toString ( 16 ) ; var g:==:this . g . toString ( 16 ) ;
var caption = table . children ( ' caption ' ) ; var captionSide:==:caption . length ? caption [ 0 ] . _ captionSide : null ;
var kind = textTrackQueue [ i ] . kind ; var label:==:textTrackQueue [ i ] . label !    undefined ? textTrackQueue [ i ] . label : textTrackQueue [ i ] . lang ;
var errorhandler = require ( ' errorhandler ' ) ; var cors:==:require ( ' cors ' ) ;
var debug = require ( ' debug ' ) ( ' connector ' ) ; var util:==:require ( ' util ' ) ;
var specialMatch = stringMatch . _ specialMatch ; var normalMatch:==:stringMatch . _ normalMatch ;
var load = loader . getModuleLoad ( ' package . json!npm ' ) ; var source:==:load . source ;
var colContentRight = t . colContentRight ; var cellToDate:==:t . cellToDate ;
var p = URI . prototype ; var hasOwn:==:object . prototype . hasOwnProperty ;
var plumber   = require ( ' gulp - plumber ' ) ; var prefixer:==:require ( ' gulp - autoprefixer ' ) ;
var ANON_BLOCK = ' ANON_BLOCK ' ; var ARGUMENT_LIST:==:' ARGUMENT_LIST ' ;
var clipboard = imports . clipboard ; var tree:==:imports . tree ;
var y = data . y = = = 0 ? zeroScale : data . y ; var z:==:data . z      0 ? zeroScale : data . z ;
var subTableDiv = $ ( ' div . subTableDiv ' ) ; var toggleCheck:==:$ ( ' input . toggleCheck ' ) ;
var optimist = require ( ' optimist ' ) ; var async:==:require ( ' async ' ) ;
var MEMBER_LOOKUP_EXPRESSION = ' MEMBER_LOOKUP_EXPRESSION ' ; var METHOD_SIGNATURE:==:' METHOD_SIGNATURE ' ;
var instances = this . instances ; var len:==:instances . length ;
var group = _ ref2 . group ; var force:==:_ ref2 . force ;
var projectId = self . configuration _ [ ' projectId ' ] ; var version:==:self . configuration _ [ ' version ' ] ;
var cap = options . cap  |  |  BABYLON . Mesh . NO_CAP ; var invertUV:==:options . invertUV  |  |  false ;
var tilingScheme = defined ( options . tilingScheme ) ? options . tilingScheme : new webMercatorTilingScheme ( ellipsoid : options . ellipsoid ) ; var rectangle:==:defaultValue ( options . rectangle , tilingScheme . rectangle ) ;
var body = this . bodyElement ; var node:==:this . node ( ) ;
var folder = opts . folder ; var exceptions:==:opts . exceptions  |  |  [ ] ;
var chunkSize = this . options . chunkSize ; var dictionary:==:this . options . dictionary ;
var el = options . el ; var props:==:options . props ;
var scrollLeft = _ props2 . scrollLeft ; var scrollToColumn:==:_ props2 . scrollToColumn ;
var assert = require ( ' assert ' ) ; var client:==:marionette . client ( ) ;
var invalidAlgorithmError = utils . invalidAlgorithmError ; var validateAlgorithm:==:utils . validateAlgorithm ;
var lastRow = config . lastRow ; var session:==:this . session ;
var upperThreshold = volume . upperThreshold ; var lowerThreshold:==:volume . lowerThreshold ;
var info = this . props . info ; var module:==:this . props . module ;
var minimumRed = defaultValue ( options . minimumRed , 0 ) ; var maximumRed:==:defaultValue ( options . maximumRed , 1 . 0 ) ;
var start = range . start . valueOf ( ) ; var end:==:range . end . valueOf ( ) ;
var limeA400 = exports . limeA400 = ' # c6ff00 ' ; var limeA700:==:exports . limeA700    ' # aeea00 ' ;
var isAllDay = calc . isAllDay ; var spanOfMonth:==:calc . spanOfMonth ;
var lineNode = lineEntry . lineNode ; var n:==:lineNode ;
var path = require ( ' path ' ) ; var child_process:==:require ( ' child_process ' ) ;
var store = cursorTx . objectStore ( ' store ' ) ; var index:==:store . getIndex ( ' index ' ) ;
var title = options . title ; var heading:==:options . heading ;
var port     = zombie_array [ index ] [ ' port ' ] ; var has_flash:==:zombie_array [ index ] [ ' has_flash ' ] ;
var nodes = this . body . nodes ; var velocities:==:this . physicsBody . velocities ;
var path = require ( ' path ' ) ; var firebase:==:require ( ' firebase ' ) ;
var mode = this . _ mode ; var globe:==:scene . globe ;
var interoperabilityifdLength = ifDlengths . interoperabilityifdLength ; var interoperabilityLengthDataSection:==:ifDlengths . interoperabilityLengthDataSection ;
var y = posInfo . cy + parsePercent ( offsetCenter [ 1 ] , posInfo . r ) ; var width:==:parsePercent ( detailModel . get ( ' width ' ) , posInfo . r ) ;
var line = this . childOfName ( ' line ' ) ; var lineStyle:==:seriesScope & & seriesScope . lineStyle ;
var nodesToIgnore = opts [ ' nodesToIgnore ' ]  |  |  [ ] ; var parseHiddenNodes:==:opts [ ' parseHiddenNodes ' ]  |  |  ' false ' ;
var parse = require ( ' pug - parser ' ) ; var load:==:require ( ' pug - load ' ) ;
var caption = options . caption ; var onclick:==:options . onclick ;
var proceedClass = options . proceedClass  |  |  ' danger ' ; var onproceed:==:options . onproceed  |  |  undefined ;
var sinon   = require ( ' sinon ' ) ; var dns:==:require ( ' dns ' ) ;
var all = Promise . all . bind ( Promise ) ; var argsarray:==:require ( ' argsarray ' ) ;
var left = this . createChar ( scale , ( delim . left |  | delim . rep ) , font ) ; var right:==:this . createChar ( scale , ( delim . right |  | delim . rep ) , font ) ;
var ambient = m . parameters . ambient ; var shininess:==:m . parameters . shininess ;
var config = ctx . config ; var timezone:==:config . timezone ;
var item = items [ i ] ; var itemsToRemove:==:item . itemsToRemove ;
var height = parseInt ( frag . getAttribute ( ' data - height ' ) , 10 )  |  |  0 ; var allow_maximize:==:frag . getAttribute ( ' data - allow_maximize ' ) ;
var express = require ( ' express ' ) ; var fs:==:require ( ' fs ' ) ;
var params = ob . params ; var user:==:ob . user ;
var groups = data . groups ; var users:==:data . users ;
var reactInstrumentation = require ( ' reactInstrumentation ' ) ; var reactdomUnknownPropertyHook:==:require ( ' reactdomUnknownPropertyHook ' ) ;
var g = generator ; var len:==:g ( ) . toString ( ) . length ;
var _ i64Add = module [ ' _ i64Add ' ] = asm [ ' _ i64Add ' ] ; var _ tolower:==:module [ ' _ tolower ' ]    asm [ ' _ tolower ' ] ;
var warn = sharedUtil . warn ; var isName:==:corePrimitives . isName ;
var getSelectionOffsetKeyForNode = require ( ' getSelectionOffsetKeyForNode ' ) ; var getUpdatedSelectionState:==:require ( ' getUpdatedSelectionState ' ) ;
var wq = World_step_step_wq ; var stepnumber:==:this . stepnumber ;
var events = this . options . events ; var event:==:track . event ( ) ;
var noteId = $ ( this ) . attr ( ' noteId ' ) ; var note:==:note . getNote ( noteId ) ;
var c = a . enc _ ; var d:==:c . dqm _ [ a . mb _ [ a . mb_off ] . segment _ ] ;
var ops = require ( ' ndarray - ops ' ) ; var tinycolor:==:require ( ' tinycolor2 ' ) ;
var rpc    = require ( ' pm2-axon - rpc ' ) ; var async:==:require ( ' async ' ) ;
var KIND_HIDDEN = module . exports . KIND_HIDDEN = ' hidden ' ; var KIND_DEFAULT:==:module . exports . KIND_DEFAULT    undefined ;
var page    = require ( ' page ' ) ; var Route:==:page . Route ;
var done = state . done ; var value:==:state . value ;
var d = new assignmentNode ( object , index , value ) ; var e:==:new constantNode ( 3 ) ;
var delay = device . delay ; var data:==:device . data . bind ( this ) ;
var mkpath = require ( ' mkpath ' ) ; var resolve:==:require ( ' path ' ) . resolve ;
var project = this . loader . project ; var tree:==:this . tree ;
var layoutBase = layoutInfo . layoutBase ; var pixelDimIndex:==:layoutInfo . pixelDimIndex ;
var process = self . processes [ app_name ] ; var routes:==:process . routes ;
var commander = cli . commander = require ( ' commander ' ) ; var cmd:==:fis . require ( ' command ' , cmdName ) ;
var width = this . text . getbBox ( ) . width + 4 * this . textMargin ; var height:==:this . text . getbBox ( ) . height + 2 * this . textMargin ;
var x = layout . x ; var y0:==:layout . y0 ;
var curveSegments = options . curveSegments ! = = undefined ? options . curveSegments : 12 ; var steps:==:options . steps !    undefined ? options . steps : 1 ;
var observable = ko . observable ( ' a ' ) . extend ( rateLimit : 500 ) ; var notifySpy:==:jasmine . createSpy ( ' notifySpy ' ) ;
var key = keyValue . key ; var value:==:keyValue . value ;
var express = require ( ' express ' ) ; var http:==:require ( ' http ' ) ;
var fs = require ( ' fs ' ) ; var events:==:require ( ' events ' ) ;
var initialValue = inst . _ wrapperState . initialChecked  |  |  inst . _ wrapperState . initialValue ; var defaultValue:==:props . defaultChecked  |  |  props . defaultValue ;
var inherits = require ( ' util ' ) . inherits ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var x = queryNumericValue ( iconNode , ' x ' , namespaces . gx ) ; var y:==:queryNumericValue ( iconNode , ' y ' , namespaces . gx ) ;
var legendPosition = powerbi . visuals . legendPosition ; var legendProps:==:powerbi . visuals . legendProps ;
var head = html . appendChild ( doc . createElementns ( ns , ' head ' ) ) ; var title:==:doc . createElementns ( ns , ' title ' ) ;
var connectSeparated = this . dygraph _ . getOption ( ' connectSeparatedPoints ' , setName ) ; var axis:==:this . dygraph _ . axisPropertiesForSeries ( setName ) ;
var onRowDoubleClick = _ props3 . onRowDoubleClick ; var onRowMouseOver:==:_ props3 . onRowMouseOver ;
var c9 = imports . c9 ; var ext:==:imports . ext ;
var i d = material . i d ; var shader:==:shaders [ i d ] ;
var categorical = dataView & & dataView . categorical ; var categories:==:categorical & & categorical . categories  |  |  [ ] ;
var extendFlat = extendModule . extendFlat ; var extendDeep:==:extendModule . extendDeep ;
var top = box . top + scrollTop - clientTop ; var left:==:box . left + scrollLeft - clientLeft ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var dateFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' dateFieldTestObject ' ) ) ;
var body = document . body ; var clientTop:==:el . clientTop  |  |  body . clientTop  |  |  0 ;
var keyCommandBackspaceWord = require ( ' keyCommandBackspaceWord ' ) ; var keyCommandDeleteWord:==:require ( ' keyCommandDeleteWord ' ) ;
var n = len32 ( s ) ; var t:==:value_type ( s ) ;
var v = el . dom . value ; var d:==:document . createElement ( ' div ' ) ;
var isArray = leafletHelpers . isArray ; var isDefined:==:leafletHelpers . isDefined ;
var resx = args [ ' resx ' ] ; var resy:==:args [ ' resy ' ] ;
var FUNCTION_TYPE = ' FUNCTION_TYPE ' ; var GENERATOR_COMPREHENSION:==:' GENERATOR_COMPREHENSION ' ;
var height = ( data . height ) ? data . height : 2 ; var border:==:( data . border ) ? data . border : 0 ;
var r = shape . r0 ; var d:==:shape . d ;
var attributes = params . attributes ; var events:==:params . events ;
var buffers = this . buffers ; var len:==:buffers . length ;
var parent = $ ( ' parentNode ' ) ; var def:==:$ ( ' def ' ) ;
var Promise = goog . require ( ' goog . Promise ' ) ; var tagName:==:goog . require ( ' goog . dom . tagName ' ) ;
var outline = options . outline ; var outlineView:==:options . outlineView ;
var indices = _ ref . indices ; var keys:==:Object . keys ( indices ) ;
var notebookId = $ ( ' # curNotebookForNewSharedNote ' ) . attr ( ' notebookId ' ) ; var userId:==:$ ( ' # curNotebookForNewSharedNote ' ) . attr ( ' userId ' ) ;
var n = number , c = isNan ( decimals = math . abs ( decimals ) ) ? 2 : decimals ; var d:==:dec_point      undefined ? ' , ' : dec_point ;
var EXPRESSION_STATEMENT = ' EXPRESSION_STATEMENT ' ; var FINALLY:==:' FINALLY ' ;
var Package = Protocol . Package = ; var Message:==:Protocol . Message    ;
var action = _ ref$action = = = undefined ? ' setItem ' : _ ref$action ; var key:==:_ ref . key ;
var recordsTotal = compat ( ' iTotalRecords ' ,   ' recordsTotal ' ) ; var recordsFiltered:==:compat ( ' iTotalDisplayRecords ' , ' recordsFiltered ' ) ;
var activeDrag = ddm . activeDrag ; var activeDrop:==:instance . activeDrop ;
var fs = require ( ' fs - extra ' ) ; var gulp:==:require ( ' gulp ' ) ;
var blockTree = require ( ' blockTree ' ) ; var contentState:==:require ( ' contentState ' ) ;
var projection = viewState . projection ; var rotation:==:viewState . rotation ;
var tween = tweens [ i ] ; var tweenjs:==:tween . tweenjs ;
var entityType = entityTypeName & & mappingContext . entityManager . metadataStore . _ getEntityType ( entityTypeName , true ) ; var propertyName:==:nodeContext . propertyName ;
var script = scripts [ scripts . length - 1 ] ; var src:==:script . src ;
var baseTheme = _ context$muiTheme . baseTheme ; var zIndex:==:_ context$muiTheme . zIndex ;
var service = req . service ; var operation:==:req . operation ;
var timeout = isUndefined ( v [ ' timeout ' ] ) ? 250 : v [ ' timeout ' ] ; var maxh:==:isUndefined ( v [ ' maxh ' ] ) ? 600 : v [ ' maxh ' ] ;
var items = this . items ; var pagesCount:==:this . pagesCount ;
var meshes = model . meshes ; var meshInstances:==:model . meshInstances ;
var el = this . el ; var geometry:==:el . getObject3d ( ' mesh ' ) . geometry ;
var width = this . width = context . canvas . width ; var height:==:this . height    context . canvas . height ;
var Plugin = imports . Plugin ; var terminal:==:imports . terminal ;
var options = this . options ( ) ; var settings:==:this . data & & this . data . settings ;
var outlineWidth = cylinder . outlineWidth ; var numberOfVerticalLines:==:cylinder . numberOfVerticalLines ;
var totalRows = this . _ totalRows ; var rowHeight:==:options . rowHeight  |  |  listView . defaultRowHeight ;
var preserveBuffer = options . preserveBuffer ; var autoPurge:==:options . autoPurge ;
var kl = this . kl ; var kr:==:this . kr ;
var c9 = imports . c9 ; var util:==:imports . util ;
var domain = require ( ' domain ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var net = require ( ' net ' ) ; var assert:==:require ( ' assert ' ) ;
var memberLookupExpression = traceur . syntax . trees . memberLookupExpression ; var newExpression:==:traceur . syntax . trees . newExpression ;
var inJs = window . inJs ; var debug:==:window . debug ;
var TYPE_REFERENCE = ' TYPE_REFERENCE ' ; var UNARY_EXPRESSION:==:' UNARY_EXPRESSION ' ;
var Program = traceur . syntax . trees . Program ; var propertyNameAssignment:==:traceur . syntax . trees . propertyNameAssignment ;
var colspan = Utils . colspan ( cell ) ; var rowspan:==:Utils . rowspan ( cell ) ;
var emitter = scene . getLastEntryByid ( parsedLensFlareSystem . emitterId ) ; var lensFlareSystem:==:new lensFlareSystem ( ' lensFlareSystem # ' + parsedLensFlareSystem . emitterId , emitter , scene ) ;
var a = require ( ' comp_a ' ) ; var b:==:require ( ' comp_b ' ) ;
var _ strncpy = Module [ ' _ strncpy ' ] = asm [ ' _ strncpy ' ] ; var _ bitshift64Lshr:==:module [ ' _ bitshift64Lshr ' ]    asm [ ' _ bitshift64Lshr ' ] ;
var height = _ props . height ; var width:==:_ props . width ;
var caret = kendo . caret ; var ui:==:kendo . ui ;
var valueMin = $ ( element ) . data ( ) . valueMin ; var valueMax:==:$ ( element ) . data ( ) . valueMax ;
var reactErrorUtils = require ( ' reactErrorUtils ' ) ; var reactFeatureFlags:==:require ( ' reactFeatureFlags ' ) ;
var light = this . light ? this . light . buildCode ( builder , ' v3 ' , cache : ' light ' ) : undefined ; var ao:==:this . ao ? this . ao . buildCode ( builder , ' fv1 ' ) : undefined ;
var zoomFactor = this . _ constraintsInDip ? 1 : webInspector . zoomManager . zoomFactor ( ) ; var constraints:==:this . _ sidebarView ? this . _ sidebarView . constraints ( ) : new constraints ( ) ;
var uniforms = template . uniforms ; var materials:==:template . materials ;
var type = result . type ; var subtype:==:result . subtype ;
var primitiveType = powerbi . primitiveType ; var axisHelper:==:powerbi . visuals . axisHelper ;
var doc = result . doc ; var metadata:==:result . metadata ;
var cos = Math . cos ( rotation ) ; var sin:==:Math . sin ( rotation ) ;
var doc = this . doc ; var start:==:doc . positionToIndex ( range . start ) ;
var namespace = organized . namespace ; var facts:==:organized . facts ;
var labels = this . _ labels ( ' event ' , name , customLabels ) ; var category:==:track . category ( ) ;
var height = canvas & & canvas . height ; var width:==:canvas & & canvas . width ;
var key = keys [ i ] ; var colInfo:==:_ this7 . colInfos [ key ] ;
var surface = globe . _ surface ; var mode:==:scene . frameState . mode ;
var MODULE_DEFINITION = parseTreeType . module_definition ; var module_require:==:parseTreeType . module_require ;
var reactCompositeComponent = require ( ' reactCompositeComponent ' ) ; var reactEmptyComponent:==:require ( ' reactEmptyComponent ' ) ;
var count = cfg . count  |  |  12 ; var section:==:cfg . section ;
var jshint = require ( ' gulp - jshint ' ) ; var nodemon:==:require ( ' gulp - nodemon ' ) ;
var event = window . event ; var type:==:nMML . msiEevents [ event . type ] ;
var rows = g . rows . groups ; var sortedCols:==:g . sortedCols ( ) ;
var doc = shadowdomPolyfill . wrap ( document ) ; var head:==:doc . querySelector ( ' head ' ) ;
var size = settings . size ; var font:==:' bold ' + ( settings . mSize * size ) + ' px ' + settings . fontname ;
var shadows = this . _ geometryUpdater . shadowsProperty . getValue ( time ) ; var distanceDisplayCondition:==:this . _ geometryUpdater . distanceDisplayConditionProperty . getValue ( time ) ;
var secondaryClipboard = require ( ' secondaryClipboard ' ) ; var userAgent:==:require ( ' userAgent ' ) ;
var forkContext = this . forkContext ; var brokenForkContext:==:this . popBreakContext ( ) . brokenForkContext ;
var mRender = oCol . mRender ? _ fnGetObjectDataFn ( oCol . mRender ) : null ; var mData:==:_ fnGetObjectDataFn ( oCol . mData ) ;
var Card = Parse . Object . extend ( ' Card ' ) ; var House:==:Parse . Object . extend ( ' House ' ) ;
var stateMachine = traceur . syntax . trees . stateMachine ; var variableBinder:==:traceur . semantics . variableBinder ;
var update = jasmine . createSpy ( ' update ' ) ; var complete:==:jasmine . createSpy ( ' complete ' ) ;
var fs = require ( ' fs ' ) ; var spawn:==:require ( ' child_process ' ) . spawn ;
var isHold = e . isHold ; var kind:==:e . kind ;
var encoding = name_to_encoding [ name ] ; var index:==:indexes [ name ] ;
var glob = require ( ' glob ' ) ; var Readable:==:require ( ' readable - stream ' ) . Readable ;
var program = obj . program  |  |  '' ; var satellite:==:obj . satellite ;
var React = require ( ' React ' ) ; var styleSheet:==:require ( ' f8StyleSheet ' ) ;
var ends = endss [ i ] . slice ( ) ; var end:==:ends [ ends . length - 1 ] ;
var shape = shapeAsJson . getShape ( ) ; var parent:==:this . facade . getCanvas ( ) . getChildShapeByResourceId ( shapeAsJson . parent . resourceId )  |  |  this . facade . getCanvas ( ) ;
var blueGrey100 = exports . blueGrey100 = ' # cfd8dc ' ; var blueGrey200:==:exports . blueGrey200    ' # b0bec5 ' ;
var testelm = document . getElementById ( ' testelm ' ) ; var h:==:gridUtil . elementHeight ( testelm ) ;
var c = typeof mc ; var d:==:typeof md ;
var createAssignmentStatement = parseTreeFactory . createAssignmentStatement ; var createIdentifierExpression:==:parseTreeFactory . createIdentifierExpression ;
var contents = tmpl . contents  |  |  ' ' ; var fsHash:==:tmpl . fsHash  |  |  hashString ( contents ) ;
var path = require ( ' path ' ) ; var net:==:require ( ' net ' ) ;
var menus = imports . menus ; var clipboard:==:imports . clipboard ;
var item = callbackData . item ; var index:==:callbackData . index ;
var lunr = require ( ' lunr ' ) ; var Entities:==:require ( ' html - entities ' ) . allHtmlEntities ;
var commands = imports . commands ; var tooltip:==:imports . tooltip ;
var Cursor = firepad . Cursor ; var h:==:helpers ;
var hoverLabelModel = seriesScope & & seriesScope . hoverLabelModel ; var hoverAnimation:==:seriesScope & & seriesScope . hoverAnimation ;
var minimumGreen = defaultValue ( options . minimumGreen , 0 ) ; var maximumGreen:==:defaultValue ( options . maximumGreen , 1 . 0 ) ;
var key = this . keyFromSecret ( secret ) ; var r:==:this . hashInt ( key . messagePrefix ( ) , message ) ;
var element = self . element = scrollViewOptions . el ; var $ element:==:self . $ element    jqLite ( element ) ;
var rc = require ( ' rc ' ) ; var rttc:==:require ( ' rttc ' ) ;
var safeApply = leafletHelpers . safeApply ; var eventsHelper:==:leafletEventsHelpersFactory ;
var info = imports . info ; var basename:==:require ( ' path ' ) . basename ;
var projectId = webInspector . fileSystemWorkspaceBinding . projectId ( file . fileSystemPath ) ; var project:==:this . _ workspace . project ( projectId ) ;
var rec   = records [ index ] ; var col:==:this . columns [ column ] ;
var d3 = _ addDiv ( ' d3 ' ) , d4 = _ addDiv ( ' d4 ' ) ; var c:==:_ jsPlumb . connect ( source : d3 , target : d4 , anchors : [ ' continuous ' , ' continuous ' ] ) ;
var detail = options . detail  |  |  null ; var cancelable:==:! ! options . cancelable ;
var n = new functionAssignmentNode ( ' f ' , [ ' x ' ] , c ) ; var e:==:new constantNode ( 3 ) ;
var path = require ( ' path ' ) ; var request:==:require ( ' request ' ) ;
var util = require ( ' util ' ) ; var ease:==:require ( ' ease - component ' ) ;
var missingDataException = sharedUtil . missingDataException ; var xRefParseException:==:sharedUtil . xRefParseException ;
var wait = this . wait ; var hold:==:this . hold ;
var generateECDSA = dhe . generateECDSA ; var generateED25519:==:dhe . generateED25519 ;
var error = _ this . error ; var doc:==:document ;
var watcher = imports . watcher ; var Editor:==:imports . Editor ;
var x = xy . x  |  0 ; var y:==:xy . y  |  0 ;
var username = new Element ( ' input ' , type : ' text ' , name : ' username ' , value : ' username ' ) ; var password:==:new Element ( ' input ' , type : ' password ' , name : ' password ' , value : ' password ' ) ;
var history = _ props . history ; var location:==:_ props . location ;
var local = instance . options . getIn ( [ ' urls ' , ' local ' ] ) ; var args:==:stub . getCall ( 0 ) . args ;
var asc = $ . inArray ( ' asc ' , column . asSorting ) ! = = -1 ; var desc:==:$ . inArray ( ' desc ' , column . asSorting ) !    -1 ;
var createClassAndSelector = jsCommon . cssConstants . createClassAndSelector ; var pixelConverter:==:jsCommon . pixelConverter ;
var zip = require ( ' gulp - zip ' ) ; var tar:==:require ( ' gulp - tar ' ) ;
var zoomPromise = viewer . _ zoomPromise ; var zoomOptions:==:defaultValue ( viewer . _ zoomOptions , ) ;
var total = that . dataSource . total ( ) ; var tagList:==:that . tagList ;
var width = parseInt ( $ ( this . box ) . width ( ) ) ; var height:==:parseInt ( $ ( this . box ) . height ( ) ) ;
var r = parseInt ( hex . substring ( 0,2 ) , 16 ) ; var g:==:parseInt ( hex . substring ( 2,4 ) , 16 ) ;
var start = ' startkey ' in opts ? opts . startkey : false ; var end:==:' endkey ' in opts ? opts . endkey : false ;
var resolveToObject = o . resolveToObject ; var promise:==:promiseProvider . get ( ) ;
var visualDataRoleKind = powerbi . visualDataRoleKind ; var createInteractivityService:==:powerbi . visuals . createInteractivityService ;
var initializeModules = scope . initializeModules ; var isie:==:scope . isie ;
var I8 = new primitiveType ( ' i8 ' , 1 , ' i ' , -128 , 127 ) ; var i16:==:new primitiveType ( ' i16 ' , 2 , ' i ' , -32768 , 32767 ) ;
var Form = imports . Form ; var Menu:==:imports . Menu ;
var a = this . _ lastAlpha - this . _ alpha ; var b:==:this . _ lastBeta - this . _ beta ;
var confirmDownloadView = _ appJsViewsConfirmDownloadView [ ' default ' ] ; var deviceNameView:==:_ appJsViewsDeviceNameView [ ' default ' ] ;
var createPath = leafletPathsHelpers . createPath ; var bindPathEvents:==:leafletPathEvents . bindPathEvents ;
var ONEAVGMONTH = constants . ONEAVGMONTH ; var ONEDAY:==:constants . ONEDAY ;
var loadStrings = p5 . prototype . loadStrings ; var loadxml:==:p5 . prototype . loadxml ;
var content = tree . content = a . firstChild ; var sr2:==:tree . sr2    div . createShadowRoot ( ) ;
var index = this . index++ ; var ish:==:this . ish ;
var registerWrapper = scope . registerWrapper ; var wraphtmlCollection:==:scope . wraphtmlCollection ;
var request = require ( ' request ' ) ; var request:==:RSVP . denodeify ( request ) ;
var command = e . command ; var editor:==:e . editor ;
var changelog = require ( ' conventional - changelog ' ) ; var fs:==:require ( ' fs ' ) ;
var exp = expectation [ key ] ; var act:==:actual [ key ] ;
var Agent = smith . Agent ; var Stream:==:require ( ' stream ' ) . Stream ;
var timescale = sidx . timescale ; var time:==:sidx . earliest_presentation_time ;
var animation = viewer . _ animation ; var timeline:==:viewer . _ timeline ;
var maxResults = opts . maxResults  |  |  100 ; var query:==:opts . query  |  |  '' ;
var width = model . width ; var height:==:model . height ;
var width = a . hasOwnProperty ( ' width ' ) ? a . width : 16 ; var height:==:a . hasOwnProperty ( ' height ' ) ? a . height : 16 ;
var pointPrimitive = pointPrimitives [ i ] ; var position:==:pointPrimitive . position ;
var filename = suspension . filename ; var lineno:==:suspension . lineno ;
var email   = validator . trim ( req . body . email ) . toLowerCase ( ) ; var pass:==:validator . trim ( req . body . pass ) ;
var charSpacing = current . charSpacing ; var wordSpacing:==:current . wordSpacing ;
var t = title . cloneNode ( ) ; var f:==:field . cloneNode ( ) ;
var item = this . items [ index ] ; var filepath:==:item . filepath ;
var listView = _ jsViewListView [ ' default ' ] ; var webServer:==:_ jsLibWebServer [ ' default ' ] ;
var x = Symbol ( ' x ' ) ; var y:==:Symbol ( ' y ' ) ;
var fs    = require ( ' fs ' ) ; var stylus:==:require ( ' gulp - stylus ' ) ;
var Person = db . model ( ' gh4284_b ' , personSchema ) ; var band:==:db . model ( ' gh4284_b0 ' , bandSchema ) ;
var IMPORT_LINK_TYPE = scope . IMPORT_LINK_TYPE ; var IMPORT_SELECTOR:==:scope . IMPORT_SELECTOR ;
var defaultViewport = options . defaultViewport ; var renderingQueue:==:options . renderingQueue ;
var reactNative = require ( ' reactNative ' ) ; var view:==:require ( ' view ' ) ;
var localVideo = document . querySelector ( ' video#localVideo ' ) ; var callButton:==:document . querySelector ( ' button#callButton ' ) ;
var buffer = this . _ buffer ; var method:==:this . method ;
var max = waveSurfer . util . max ( peaks ) ; var min:==:waveSurfer . util . min ( peaks ) ;
var description = scenarioTest . description ; var name:==:scenarioTest . operation . name ;
var images = loader . parseImages ( json . images ) ; var textures:==:loader . parseTextures ( json . textures , images ) ;
var beforeStar = this . _ beforeStar ; var afterStar:==:this . _ afterStar ;
var parse = require ( ' remark - parse ' ) ; var stringify:==:require ( ' remark - stringify ' ) ;
var architect = require ( ' architect ' ) ; var os:==:require ( ' os ' ) ;
var r = hue2rgb ( p , q , tr ) ; var g:==:hue2rgb ( p , q , tg ) ;
var reactInvalidSetStateWarningHook = require ( ' reactInvalidSetStateWarningHook ' ) ; var reactHostOperationHistoryHook:==:require ( ' reactHostOperationHistoryHook ' ) ;
var closeBottom = rectangle . closeBottom ; var closeTop:==:rectangle . closeTop ;
var spawnSync = require ( ' child_process ' ) . spawnSync ; var tslint:==:require ( ' gulp - tslint ' ) ;
var warn = sharedUtil . warn ; var isValidUrl:==:sharedUtil . isValidUrl ;
var getGlyphQuads = quads . getGlyphQuads ; var getIconQuads:==:quads . getIconQuads ;
var reactdomContainerInfo = require ( ' reactdomContainerInfo ' ) ; var reactdomFeatureFlags:==:require ( ' reactdomFeatureFlags ' ) ;
var appear = ref . appear ; var afterAppear:==:ref . afterAppear ;
var pink700 = exports . pink700 = ' # c2185b ' ; var pink800:==:exports . pink800    ' # ad1457 ' ;
var inverseProjectionView = this . inverseProjectionView ; var zoom:==:this . zoom , viewportWidth    this . viewportWidth , viewportHeight    this . viewportHeight ;
var loose = self . options . looseTable ; var spaced:==:self . options . spacedTable ;
var should = chai . should ; var assert:==:chai . assert ;
var command = commands [ i ] ; var boundingVolume:==:command . boundingVolume ;
var expression = this . transformAny ( tree . expression ) ; var caseClauses:==:this . transformList ( tree . caseClauses ) ;
var MODULE = ' MODULE ' ; var MODULE_SPECIFIER:==:' MODULE_SPECIFIER ' ;
var profile = profiles [ key ] ; var video:==:profile . video ;
var entryTotalTimes = timelineData . entryTotalTimes ; var entryLevels:==:timelineData . entryLevels ;
var freeVariableChecker = traceur . semantics . freeVariableChecker ; var generatorComprehensionTransformer:==:traceur . codegeneration . generatorComprehensionTransformer ;
var path = require ( ' path ' ) ; var connect:==:require ( ' connect ' ) ;
var logPrefix = bs . options . get ( ' logPrefix ' ) ; var logLevel:==:bs . options . get ( ' logLevel ' ) ;
var primitives = this . primitives ; var primitive:==:this . primitive ;
var a12 = this . a12 ; var a13:==:this . a13 ;
var s = TO_STRING ( this ) ; var n:==:TO_INTEGER ( count ) ;
var viewState = frameState . viewState ; var layerStates:==:frameState . layerStatesArray ;
var r = goog . color . hexToRgb ( testColors [ i ] [ 0 ] ) ; var t:==:testColors [ i ] [ 1 ] ;
var editor   = this . editor ; var preview:==:this . preview ;
var sources = util . getArg ( sourceMap , ' sources ' ) ; var names:==:util . getArg ( sourceMap , ' names ' ) ;
var rangeList = selection . rangeList ; var ranges:==:( keepOrder ? selection : rangeList ) . ranges ;
var DEBUG = DEBUG  |  |  false ; var GLOBAL:==:GLOBAL  |  |  this ;
var yaml = require ( ' js - yaml ' ) ; var fs:==:require ( ' fs ' ) ;
var ecModel = this . _ ecModel ; var api:==:this . _ api ;
var dtlsTransport = transceiver . dtlsTransport ; var localCapabilities:==:transceiver . localCapabilities ;
var objnames = this . _ index . objnames ; var titles:==:this . _ index . titles ;
var handlebars = require ( ' gulp - handlebars ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var Plugin = imports . Plugin ; var net:==:imports . net ;
var left = shadowFrustum . left ; var right:==:shadowFrustum . right ;
var parenthesis = ( options & & options . parenthesis ) ? options . parenthesis : ' keep ' ; var implicit:==:( options & & options . implicit ) ? options . implicit : ' hide ' ;
var path = makeg ( clip , ' path ' , ' carpetboundary ' ) ; var segments:==:t . clipsegments ;
var workspaceDir = options . workspaceDir ; var debug:==:options . debug !    undefined ? options . debug : false ;
var oCol = oSettings . aoColumns [ iCol ] ; var oData:==:oSettings . aoData [ iRow ] . _ aData ;
var b = this . el . child ( ' em . x - btn - split ' ) ; var a:==:b . getRegion ( ) . right - b . getPadding ( ' r ' ) ;
var yYexit = caml_exceptions . create ( ' parsing . yYexit ' ) ; var parse_error:==:caml_exceptions . create ( ' parsing . parse_error ' ) ;
var trueHeading = e . heading . trueHeading ; var timestamp:==:e . heading . timestamp ;
var diffView = this . diffView ; var chunks:==:diffView . chunks ;
var cos = Math . cos ( this . aRotation ) ; var sin:==:math . sin ( this . aRotation ) ;
var isBlock = isBlockElement ( node ) ; var isEmpty:==:_ isEmpty ( node , state ) ;
var api = this . client . api ; var page:==:api . page . simplePageObj ( ) ;
var trace = d . trace ; var contours:==:trace . contours ;
var model = el . _ model  |  |  ; var fill:==:model . fill ;
var decoration = getStyleProperty ( item , styleContextStack , ' decoration ' , null ) ; var decorationColor:==:getStyleProperty ( item , styleContextStack , ' decorationColor ' , null ) ;
var value = _ ref . value ; var styles:==:_ ref . styles ;
var method = this . method ; var s:==:this . res . statusCode ;
var file = args [ ' file ' ] ; var resx:==:args [ ' resx ' ] ;
var x = pointer . x = point . pageX ; var y:==:pointer . y    point . pageY ;
var path = require ( ' path ' ) ; var expect:==:require ( ' expect . js ' ) ;
var warn = sharedUtil . warn ; var isStream:==:corePrimitives . isStream ;
var projection = this . _ projection ; var southwest:==:projection . project ( Rectangle . southwest ( rectangle ) ) ;
var HCRC = 9 ; var DICTID:==:10 ;
var apiUrl = options . apiUrl  |  |  loginUrl ; var userId:==:this . context . userId ;
var receiver = ast . receiver . visit ( this ) ; var args:==:this . _ visitAll ( ast . args ) ;
var createReactNativeComponentClass = require ( ' createReactNativeComponentClass ' ) ; var merge:==:require ( ' merge ' ) ;
var isEventDraggable = t . isEventDraggable ; var isEventResizable:==:t . isEventResizable ;
var ctx = currentLayer . ctx ; var m:==:el . transform ;
var c = vertices [ indexC ] ; var d:==:vertices [ indexD ] ;
var offsetTop = section . element . offsetTop ; var offsetLeft:==:section . element . offsetLeft ;
var reactFeatureFlags = require ( ' reactFeatureFlags ' ) ; var reactReconciler:==:require ( ' reactReconciler ' ) ;
var error = details . error ; var advertisements:==:details . advertisements ;
var valueLineWidth = symbolMeta . valueLineWidth ; var pathPosition:==:symbolMeta . pathPosition ;
var graph = this . editor . graph ; var paste:==:this . actions . get ( ' paste ' ) ;
var missingPrimaryExpression = traceur . syntax . trees . missingPrimaryExpression ; var moduleDeclaration:==:traceur . syntax . trees . moduleDeclaration ;
var transformTemplate = options . transformTemplate  |  |  angular . identity ; var bindToController:==:options . bindToController ;
var createStringLiteral = parseTreeFactory . createStringLiteral ; var createVariableDeclaration:==:parseTreeFactory . createVariableDeclaration ;
var d = document ; var col:==:d . createElement ( ' col ' ) ;
var field = instance . getField ( fieldName ) ; var required:==:instance . normalizeRuleValue ( rule . required , field ) ;
var i2 = _ i2 ; var s1:==:_ s1 ;
var minBG = opts . minBG  |  |  40 ; var minFreq:==:opts . minFreq  |  |  55 ;
var tmp = require ( ' tmp ' ) ; var request:==:require ( ' request ' ) ;
var panels = imports . panels ; var tree:==:imports . tree ;
var progress = follower . _ progressHandlerAt ( index ) ; var promise:==:follower . _ promiseAt ( index ) ;
var watchFile = require ( ' fs ' ) . watchFile ; var lstatSync:==:require ( ' fs ' ) . lstatSync ;
var g = m . g ; var h:==:m . h ;
var cm = this . cm , display = cm . display , sel = cm . doc . sel . primary ( ) ; var from:==:sel . from ( ) , to    sel . to ( ) ;
var elements = tree . elements ; var getTemplateObject:==:this . getRuntimeExpression ( ' getTemplateObject ' ) ;
var line = pos . line + code . length - ( to . line - from . line ) - 1 ; \n\var ch:==:pos . ch ; \n\
var proc = imports . proc ; var Plugin:==:imports . Plugin ;
var stroke = this . stroke ? series . color : ' none ' ; var strokeWidth:==:series . strokeWidth ? series . strokeWidth : this . strokeWidth ;
var type = this . property . value . type ; var subtype:==:this . property . value . subtype ;
var topo = this . topos [ wrapper ] ; var text:==:document . createElementns ( this . ns,'text ' ) ;
var custom = arc . custom  |  |  ; var getValueAtIndexOrDefault:==:helpers . getValueAtIndexOrDefault ;
var opts = _ _ alloyId30 . opts  |  |  ; var models:==:_ _ alloyId29 . models ;
var lineDisplay = windows . devices . pointOfService . lineDisplay ; var claimedLineDisplay:==:windows . devices . pointOfService . claimedLineDisplay ;
var View = require ( ' View ' ) ; var webView:==:require ( ' webView ' ) ;
var lime50 = exports . lime50 = ' # f9fbe7 ' ; var lime100:==:exports . lime100    ' # f0f4c3 ' ;
var contentState = require ( ' contentState ' ) ; var blockTree:==:require ( ' blockTree ' ) ;
var finallyFallThroughState = traceur . codegeneration . generator . finallyFallThroughState ; var finallyState:==:traceur . codegeneration . generator . finallyState ;
var obfuscate = options . obfuscate  |  |  false ; var keepLess:==:options . keepLess  |  |  false ;
var GET_PROPERTY = traceur . syntax . predefinedName . get_property ; var runtime:==:traceur . syntax . predefinedName . runtime ;
var bones = this . bones ; var spaces:==:spine . Utils . setArraySize ( this . spaces , spacesCount ) , lengths    null ;
var d1 = _ addDiv ( ' d1 ' , null , ' aTest ' ) ; var d2:==:_ addDiv ( ' d2 ' , null , ' aTest ' ) ;
var closingSelector = this . closingSelector ; var contexts:==:this . contexts ;
var b = Ext . eventObject . setEvent ( c ) ; var a:==:this . fly ( b . getTarget ( ) ) ;
var selection = instance . selection ; var selectedHeader:==:selection . selectedHeader ;
var i = _ i ; var previous:==:_ previous ;
var r_vec =   SPHSystem_update_r_vec ; var u:==:SPHSystem_update_u ;
var x = Math . max ( rect . x , 0 ) ; var y:==:Math . max ( rect . y , 0 ) ;
var west = rectangleScratch . west ; var north:==:rectangleScratch . north ;
var postTag = ctx . model ( ' postTag ' ) ; var tag:==:ctx . model ( ' tag ' ) ;
var should = require ( ' should ' ) ; var join:==:require ( ' path ' ) . join ;
var options = this . _ options ; var positions:==:Property . getValueOrUndefined ( corridor . positions , time , options . positions ) ;
var noop = $ . noop ; var proxy:==:$ . proxy ;
var map = zrUtil . map ; var isArray:==:zrUtil . isArray ;
var set = overlay . data ( ' set ' ) ; var contextObject:==:overlay . data ( ' contextObject ' ) ;
var rows = session . term . rows ; var cols:==:session . term . cols ;
var transformation = crs . transformation ; var scale:==:crs . scale ( path . _ map . getZoom ( ) ) ;
var clone = Base . clone . call ( this ) ; var words:==:clone . words    this . words . slice ( 0 ) ;
var upgradeDocumentTree = scope . upgradeDocumentTree ; var upgradeAll:==:scope . upgradeAll ;
var initData = this . initData ; var startdts:==:mp4Demuxer . startdts ( initData , data ) ;
var createVariableStatement = parseTreeFactory . createVariableStatement ; var createVoid0:==:parseTreeFactory . createVoid0 ;
var defineWrapGetter = scope . defineWrapGetter ; var elementFromPoint:==:scope . elementFromPoint ;
var charset = charsetDetect . detect ( line ) ; var encoding:==:charset . encoding ;
var linear = document . getElementById ( ' linear ' ) ; var log:==:document . getElementById ( ' log ' ) ;
var home = this . peekState ( ) . home ; var superSet:==:this . getRuntimeExpression ( ' superSet ' ) ;
var s = ref . s ; var l:==:ref . l ;
var hasPrivate = m . hasPrivate ; var deletePrivate:==:m . deletePrivate ;
var prefixIntervalTree = require ( ' prefixIntervalTree ' ) ; var clamp:==:require ( ' clamp ' ) ;
var ui = imports . ui ; var c9:==:imports . c9 ;
var SHOW_INDEX = Billboard . SHOW_INDEX ; var POSITION_INDEX:==:Billboard . POSITION_INDEX ;
var nativeMethodsMixin = require ( ' nativeMethodsMixin ' ) ; var reactNativeViewAttributes:==:require ( ' reactNativeViewAttributes ' ) ;
var minimumLevel = defaultValue ( options . minimumLevel , parseInt ( tilesetsList [ 0 ] . getAttribute ( ' order ' ) , 10 ) ) ; var maximumLevel:==:defaultValue ( options . maximumLevel , parseInt ( tilesetsList [ tilesetsList . length - 1 ] . getAttribute ( ' order ' ) , 10 ) ) ;
var x0 = vertices [ index0 ] ; var x1:==:vertices [ index1 ] ;
var startLine = this . startLine ; var ch:==:this . ch ;
var flush = _ tetherBase$Utils . flush ; var getScrollBarSize:==:_ tetherBase$Utils . getScrollBarSize ;
var fs = require ( ' fs ' ) ; var shell:==:require ( ' shelljs ' ) ;
var aposAd = document . getElementById ( ' aposAd ' ) ; var w:==:document . write ;
var build = imports [ ' cdn . build ' ] ; var fs:==:require ( ' fs ' ) ;
var integration = require ( ' analytics . js - integration ' ) ; var omit:==:require ( ' omit ' ) ;
var radius = polygon . m_radius + circle . m_radius ; var vertexCount:==:parseInt ( polygon . m_vertexcount ) ;
var short = ppo . short . result ; var long:==:ppo . long . result ;
var has_webrtc    = zombie_array [ index ] [ ' has_webrtc ' ] ; var has_activex:==:zombie_array [ index ] [ ' has_activex ' ] ;
var editor = tabs . focussedTab . editor ; var changes:==:editor . ace . renderer . $ loop . changes ;
var testCase = goog . require ( ' goog . testing . testCase ' ) ; var dom:==:goog . require ( ' goog . dom ' ) ;
var isArray = array . isArray ; var once:==:require ( ' once ' ) ;
var category = spec . category ; var timeout:==:( spec . timeout     undefined ) ? TIMEOUT : spec . timeout ;
var banner = container . querySelector ( ' . jasmine - banner ' ) ; var title:==:banner . querySelector ( ' a . jasmine - title ' ) ;
var includeWebMercatort = defaultValue ( options . includeWebMercatort , false ) ; var structure:==:defaultValue ( options . structure , heightmapTessellator . default_structure ) ;
var height = this . _ $ element . data ( ' height ' )  |  |  560 ; var disableExternalCheck:==:this . _ $ element . data ( ' disableExternalCheck ' )  |  |  false ;
var translucent = defaultValue ( options . translucent , true ) ; var closed:==:defaultValue ( options . closed , false ) ;
var choiceno = this . get_choiceno_for_node ( input ) ; var coords:==:this . get_coords ( input ) ;
var proto = Events . prototype ; var slice:==:[ ] . slice ;
var getNAF = utils . getNAF ; var getJSF:==:utils . getJSF ;
var keys = Object . keys ( ctx ) ; var length:==:keys . length ;
var classDeclaration = traceur . syntax . trees . classDeclaration ; var commaExpression:==:traceur . syntax . trees . commaExpression ;
var path = require ( ' path ' ) ; var Date:==:global . Date ;
var form = document . querySelector ( ' form ' ) ; var embedAppId:==:document . querySelector ( ' # embedAppId ' ) ;
var translateY = options . translateY ; var rotate:==:options . rotate ;
var RIGHT_BRACE = C . RIGHT_BRACE = 0x2 ; var LEFT_BRACKET:==:C . LEFT_BRACKET    0x3 ;
var left = ( cell_pos . left + cm_pos . left + edge_left ) + ' px ' ; var top:==:( cell_pos . top + cm_pos . top + head . bottom + 10 ) + ' px ' ;
var silent_redirect_uri = _ ref . silent_redirect_uri ; var silentRequestTimeout:==:_ ref . silentRequestTimeout ;
var style = powerbi . dataViewObject . getValue ( trendProperties , trendLinePropertyNames . style , trendLineHelper . defaults . lineStyle ) ; var combineSeries:==:powerbi . dataViewObject . getValue ( trendProperties , trendLinePropertyNames . combineSeries , trendLineHelper . defaults . combineSeries ) ;
var settings = this . settings ; var cm:==:this . cm ;
var variableDeclaration = traceur . syntax . trees . variableDeclaration ; var variableStatement:==:traceur . syntax . trees . variableStatement ;
var dimensions = p . dimensions ; var f:==:dimensions [ dimension . xIndex ] . filter ;
var canvas = properties . canvas ; var container:==:properties . container ;
var gulp = require ( ' gulp ' ) ; var del:==:require ( ' del ' ) ;
var implementation = document . implementation ; var createNodeIterator:==:document . createNodeIterator ;
var flags = scope . flags ; var IMPORT_LINK_TYPE:==:scope . IMPORT_LINK_TYPE ;
var width = canvas . width ; var height:==:canvas . height ;
var arrayPattern = traceur . syntax . trees . arrayPattern ; var binaryOperator:==:traceur . syntax . trees . binaryOperator ;
var axisList = this . axisList ; var axisIndex:==:this . axisIndex ;
var geometry = object . geometry ; var matrixWorld:==:object . matrixWorld ;
var Alias = Facade . Alias ; var Group:==:Facade . Group ;
var min = this . options . min ; var max:==:this . options . max  |  |  72 ;
var brightnessAuto = this . elements . brightnessAuto ; var brightnessAutoCheckbox:==:this . elements . brightnessAutoCheckbox ;
var height = options . height  |  |  options . size  |  |  1 ; var depth:==:options . depth  |  |  options . size  |  |  1 ;
var master = store . master [ type ] ; var delegates:==:store . delegates [ type ]    ( store . delegates [ type ]  |  |  ) ;
var ascii85Stream = coreStream . ascii85Stream ; var asciiHexStream:==:coreStream . asciiHexStream ;
var image = options . image ; var imageId:==:options . imageId ;
var _ require = _ _ webpack_require _ _ ( 1 ) ; var propTypes:==:_ require . propTypes ;
var logList = cc . _ logList ; var doc:==:document ;
var min = options . min_font  |  |  10 ; var max:==:options . max_font  |  |  20 ;
var trailing = node . trailingComments ; var leading:==:node . leadingComments ;
var increment = this . transformAny ( tree . increment ) ; var body:==:this . transformAny ( tree . body ) ;
var extrudedHeight = rectangle . extrudedHeight ; var granularity:==:rectangle . granularity ;
var metaKey = defaultValue ( options . metaKey , false ) ; var wheelDelta:==:defaultValue ( options . wheelDelta , 0 ) ;
var util = require ( ' hexo - util ' ) ; var Pattern:==:util . Pattern ;
var ARRAY_LITERAL = ' ARRAY_LITERAL ' ; var ARRAY_PATTERN:==:' ARRAY_PATTERN ' ;
var displayName = _ treeSnapshot$instanc2 . displayName ; var ownerid:==:_ treeSnapshot$instanc2 . ownerid ;
var cropBox = this . cropBox ; var aspectRatio:==:this . options . aspectRatio ;
var hasStoreStateChanged = this . hasStoreStateChanged ; var haveStatePropsBeenPrecalculated:==:this . haveStatePropsBeenPrecalculated ;
var referenceContext = settings . referenceContext ; var warningContext:==:settings . warningContext ;
var cfgFields = goog . net . xpc . cfgFields ; var crossPageChannelRole:==:goog . net . xpc . crossPageChannelRole ;
var source = options . source  |  |  null ; var filter:==:options . filter ;
var ctorRegistry = this . metadataStore . _ ctorRegistry ; var r:==:ctorRegistry [ this . name ]  |  |  ctorRegistry [ this . shortName ]  |  |  ;
var crypto = require ( ' crypto ' ) ; var assert:==:require ( ' assert ' ) ;
var is = require ( ' is ' ) ; var keys:==:require ( ' object ' ) . keys ;
var p = this . pos ; var o:==:this . oldpos ;
var naturalWidth = precomputedFeatures ? precomputedFeatures . naturalWidth : imageElement . naturalWidth ; var naturalHeight:==:precomputedFeatures ? precomputedFeatures . naturalHeight : imageElement . naturalHeight ;
var _ updateWifi = this . _ updateWifi . bind ( this ) ; var _ updateNetworkStatus:==:this . _ updateNetworkStatus . bind ( this ) ;
var Plugin = imports . Plugin ; var watcher:==:imports . watcher ;
var top = $ this . offset ( ) . top ; var scrollTop:==:$ ( window ) . scrollTop ( ) ;
var prefix = req . query . prefix  |  |  '' ; var next:==:req . query . next  |  |  null ;
var limit = flags . limit  |  |  undefined ; var exclude:==:flags . exclude  |  |  undefined ;
var ifClause = this . transformAny ( tree . ifClause ) ; var elseClause:==:this . transformAny ( tree . elseClause ) ;
var edgeFieldsCount = this . _ edgeFieldsCount ; var edgeTypeOffset:==:this . _ edgeTypeOffset ;
var angle = angleAxis . dataToAngle ( data [ 1 ] ) ; var coord:==:coordSys . coordToPoint ( [ radius , angle ] ) ;
var uglify = require ( ' gulp - uglify ' ) ; var fs:==:require ( ' fs ' ) ;
var debug_tab = document . getElementById ( ' debug_tab ' ) ; var results_tab:==:document . getElementById ( ' results_tab ' ) ;
var labelledStatement = traceur . syntax . trees . labelledStatement ; var memberExpression:==:traceur . syntax . trees . memberExpression ;
var indices = this . indices = ; var types:==:this . types    ;
var x = xOff ; var y:==:yOff + p . map ( v , 0 , vAligns . length - 1 , 10 , p . height - 10 ) ;
var rotation = geometry . _ rotation ; var stRotation:==:geometry . _ stRotation ;
var parseTreeType = traceur . syntax . trees . parseTreeType ; var parseTreeTransformer:==:traceur . codegeneration . parseTreeTransformer ;
var formalParameterList = this . transformAny ( tree . formalParameterList ) ; var functionBody:==:this . transformSuperInBlock _ ( tree , tree . functionBody ) ;
var prefix = $ l . prefixAgo ; var suffix:==:$ l . suffixAgo ;
var vm = require ( ' vm ' ) ; var concat:==:require ( ' concat - stream ' ) ;
var strength = this . options . strength ; var field:==:this . options . field ;
var min = idx . min ( ) ; var max:==:idx . max ( ) ;
var minimatch = require ( ' minimatch ' ) ; var minimist:==:require ( ' minimist ' ) ;
var write = this . writeFile . bind ( this ) ; var concurrency:==:this . concurrency ( ) ;
var width = $ ( ' . fc - view - container ' ) . width ( ) ; var height:==:$ ( ' . fc - view - container ' ) . height ( ) ;
var assert = require ( ' power - assert ' ) ; var bluebird:==:require ( ' bluebird ' ) ;
var source = sources [ index ] ; var fill:==:source . fill ;
var width = points . width + lineWidth ; var height:==:points . height + lineWidth ;
var options = options  |  |  ; var zindex:==:options . zindex  |  |  50 ;
var a = new constantNode ( 1 ) ; var n:==:new parenthesisNode ( a ) ;
var denseMatrix = math . type . denseMatrix ; var mad:==:math . mad ;
var Schema = mongoose . Schema ; var objectId:==:schema . types . objectId ;
var hasOwn = object . prototype . hasOwnProperty ; var toStr:==:object . prototype . toString ;
var opts = _ _ alloyId12 . opts  |  |  ; var models:==:_ _ alloyId11 . models ;
var crit = tmp . crit ; var drop:==:tmp . drop ;
var event = new webInspector . event ( this , eventType , eventData ) ; var listeners:==:this . _ listeners . get ( eventType ) . slice ( 0 ) ;
var open = ' open ' ; var punct:==:' punct ' ;
var bunyan = require ( ' bunyan ' ) ; var lodash:==:require ( ' lodash ' ) ;
var t = g . nodeMap [ e . target ] ; var s:==:g . nodeMap [ e . source ] ;
var setInnerhtml = scope . setInnerhtml ; var wrap:==:scope . wrap ;
var mom = $ . fullCalendar . moment . parseZone ( ' 2014 - 06 - 08t10 : 00 : 00 ' ) ; var clone:==:mom . clone ( ) ;
var debug = require ( ' debug ' ) ( ' connect : dispatcher ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var cff = this . cff ; var properties:==:this . properties ;
var handler = ctx . handler ; var promise:==:ctx . promise ;
var $ container = self . $ container ; var $ cropper:==:self . $ cropper ;
var x = this . xData = this . pickxData = options . x ; var y:==:this . yData    this . pickyData    options . y ;
var hash = $ liHeadsa . get ( key ) . hash . slice ( 1 ) ; var i d:==:_ _ webpack_imported_module_0_jquery___default ( ) ( value ) . attr ( ' i d ' )  |  |  _ _ webpack_require _ _ . i ( _ _ webpack_imported_module_2__foundation_util_core _ _ [ ' getYoDigits ' ] ) ( 6 , ' accordion ' ) ;
var createCallExpression = traceur . codegeneration . parseTreeFactory . createCallExpression ; var createMemberExpression:==:traceur . codegeneration . parseTreeFactory . createMemberExpression ;
var FOR_STATEMENT = ' FOR_STATEMENT ' ; var FORMAL_PARAMETER:==:' FORMAL_PARAMETER ' ;
var request = bbPromise . promisify ( require ( ' request ' ) ) ; var github_access_token:==:process . env . github_access_token ;
var response = e . data . response ; var type:==:response . type ;
var cx = radar . cx ; var cy:==:radar . cy ;
var a = Object . create ( Object . prototype ) ; var b:==:Object . create ( Object . prototype ) ;
var osx = processRules ( path . join ( _ _ dirname , ' doc . keybindings . osx . json ' ) ) ; var linux:==:processRules ( path . join ( _ _ dirname , ' doc . keybindings . linux . json ' ) ) ;
var gltf = model . gltf ; var accessors:==:gltf . accessors ;
var initialTab = config . initialTab  |  |  0 ; var parentElement:==:config . parentElement  |  |  null ;
var operation = this . sidebarPanes . asyncOperationBreakpoints . operationById ( details . target ( ) , operationId ) ; var description:==:( operation & & operation . description )  |  |  webInspector . uiString ( ' < unknown > ' ) ;
var val = $ ( this . element ) . val ( ) ; var split:==:val . split ( this . separator ) ;
var path = require ( ' path ' ) ; var send:==:require ( ' send ' ) ;
var normalizeWheel = require ( ' normalizeWheel ' ) ; var requestAnimationFramePolyfill:==:require ( ' requestAnimationFramePolyfill ' ) ;
var customFilter = $ animateProvider . customFilter ( ) ; var classNameFilter:==:$ animateProvider . classNameFilter ( ) ;
var dataSource = that . dataSource ; var dataItem:==:that . dataItem ( item ) ;
var config = _ _ dependency8 _ _ . config ; var resolve:==:_ _ dependency9 _ _ . resolve ;
var namespace = params . namespace ; var translations:==:params . translations ;
var copy = _ angular . copy ; var isElement:==:_ angular . isElement ;
var hash = location . hash ; var state:==:location . state ;
var image = this . image _ ; var texture:==:this . texture ;
var util = require ( ' util ' ) ; var passport:==:require ( ' passport ' ) ;
var c9 = imports . c9 ; var proc:==:imports . proc ;
var readyState = this . win . document & & this . win . document . readyState ; var location:==:this . win . document . location ;
var z = axisPointerModel . get ( ' z ' ) ; var zlevel:==:axisPointerModel . get ( ' zlevel ' ) ;
var pairs = this . broadPhase . pairs ; var i:==:this . broadPhase . numPairs ;
var docs = path . join ( _ _ dirname , ' docs ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var raw = callsite . raw ; var len:==:raw . length > > > 0 ;
var onAfterChange = jasmine . createSpy ( ' onAfterChange ' ) ; var syncSources:==:jasmine . createSpy ( ' asyncSources ' ) ;
var propertyNameShorthandTransformer = traceur . codegeneration . propertyNameShorthandTransformer ; var quasiLiteralTransformer:==:traceur . codegeneration . quasiLiteralTransformer ;
var styleSheet = require ( ' styleSheet ' ) ; var touchableOpacity:==:require ( ' touchableOpacity ' ) ;
var path = require ( ' path ' ) ; var webdriver:==:require ( ' selenium - webdriver ' ) ;
var events = require ( ' events ' ) ; var http:==:require ( ' http ' ) ;
var unicodeUtils = require ( ' unicodeUtils ' ) ; var moveSelectionBackward:==:require ( ' moveSelectionBackward ' ) ;
var d16 = _ addDiv ( ' d16 ' ) , d17 = _ addDiv ( ' d17 ' ) ; var conn:==:_ jsPlumb . connect ( source : d16 , target : d17 , connector : [ ' bezier ' , curviness : 200 ] ) ;
var ish = this . ish ; var destination:==:this . destination ;
var readdirSync = require ( ' fs ' ) . readdirSync ; var statSync:==:require ( ' fs ' ) . statSync ;
var listView = this . listView ; var optionLabel:==:this . optionLabel ;
var achievementsService = _ fxosAchievementsServiceDistAchievementsService [ ' default ' ] ; var broadcastService:==:_ appJsServicesBroadcastService [ ' default ' ] ;
var months   = w2utils . settings . fullmonths ; var days:==:w2utils . settings . fulldays ;
var listeners = this . _ listeners ; var scopes:==:this . _ scopes ;
var dirname = path . dirname ( fileObj . path ) ; var extname:==:path . extname ( fileObj . path ) ;
var reactDebugCurrentFiber = require ( ' reactDebugCurrentFiber ' ) ; var getComponentName:==:require ( ' getComponentName ' ) ;
var Danger = require ( ' Danger ' ) ; var reactdomComponentTree:==:require ( ' reactdomComponentTree ' ) ;
var less = require ( ' gulp - less ' ) ; var markdown:==:require ( ' gulp - markdown ' ) ;
var currentVelocities = _ state . currentVelocities ; var lastIdealStyles:==:_ state . lastIdealStyles ;
var scheduler = this . scheduler ; var subject:==:this . subject ;
var style = _ props . style ; var containerStyle:==:_ props . containerStyle ;
var x = this . cx + r * Math . cos ( angle ) ; var y:==:this . cy - r * Math . sin ( angle ) ;
var contentDocument = attachmentContainer . contentDocument ; var documentElement:==:contentDocument . documentElement ;
var formalParameterList = traceur . syntax . trees . formalParameterList ; var functionDeclaration:==:traceur . syntax . trees . functionDeclaration ;
var last = _ . last ( momentBatch ) ; var first:==:_ . first ( momentBatch ) ;
var _ memcpy = Module [ ' _ memcpy ' ] = asm [ ' _ memcpy ' ] ; var _ main:==:Module [ ' _ main ' ]    asm [ ' _ main ' ] ;
var pos = this . pos ; var inp:==:this . inp ;
var extrudedHeight = polygon . extrudedHeight ; var granularity:==:polygon . granularity ;
var timelineObject = timelineObjectList [ i ] ; var timeline:==:data3Parser . parseTransformTimeline ( timelineObject , animationData . duration , frameRate ) ;
var y = hh + dy ; var wrapDateLine:==:this . baseLayer . wrapDateLine ;
var group = _ ref7 . group ; var force:==:_ ref7 . force ;
var originalTag = originalTags [ originalIndex ] ; var highlightTag:==:highlightTags [ highlightIndex ] ;
var skins = gltf . skins ; var nodes:==:gltf . nodes ;
var e = event  |  |  window . event ; var keyCode:==:e . keyCode  |  |  e . which ;
var container = this . container . el . getBoundingClientRect ( ) ; var handle:==:this . handle . el . getBoundingClientRect ( ) ;
var alphaRenamer = traceur . codegeneration . alphaRenamer ; var parseTreeTransformer:==:traceur . codegeneration . parseTreeTransformer ;
var View = require ( ' View ' ) ; var Animated:==:require ( ' Animated ' ) ;
var adapter = config [ config . adapter ] ; var daterange:==:config . importer . daterange ;
var wtTable = this . hot . view . wt . wtTable ; var td:==:priv . target . td ;
var assert = require ( ' assert - plus ' ) ; var asn1:==:require ( ' asn1 ' ) ;
var Capture = Windows . Media . Capture ; var storageLibrary:==:windows . storage . storageLibrary ;
var vc = sphereTrimesh_vc ; var normal:==:sphereTrimesh_normal ;
var auth = test . auth ; var description:==:test . description ;
var isDownArrow = utilities . isDownArrow ; var cleanInput:==:utilities . cleanInput ;
var reactdomComponentTree = require ( ' reactdomComponentTree ' ) ; var reactdomSelect:==:require ( ' reactdomSelect ' ) ;
var eventPropagators = require ( ' eventPropagators ' ) ; var syntheticEvent:==:require ( ' syntheticEvent ' ) ;
var right = parsePercent ( positionInfo . right , containerWidth ) ; var bottom:==:parsePercent ( positionInfo . bottom , containerHeight ) ;
var fixedLen = returnValue . fixedLen ; var splStart:==:returnValue . splStart ;
var clone = utils . clone ; var type:==:utils . type ;
var rimraf = require ( ' rimraf ' ) ; var argv:==:require ( ' yargs ' ) . argv ;
var parseTreeTransformer = traceur . codegeneration . parseTreeTransformer ; var predefinedName:==:traceur . syntax . predefinedName ;
var x = this . x , y = this . y ; var sq:==:pos . squaredNorm ( ) ;
var a = this . sandbox . spy ( Board , ' mount ' ) ; var b:==:this . sandbox . spy ( Board . Pins , ' normalize ' ) ;
var calendar = that . calendar ; var options:==:that . options ;
var b = rejectThenableSoon ( ' rejected - b ' , 30 ) ; var c:==:rejectThenableSoon ( ' rejected - c ' , 10 ) ;
var endsWith = _ _ webpack_require _ _ ( 11 ) . endsWith ; var clone:==:_ _ webpack_require _ _ ( 5 ) . clone ;
var computeDateTop = t . computeDateTop ; var getIsCellAllDay:==:t . getIsCellAllDay ;
var COMMENT = 8 ; var HCRC:==:9 ;
var key = keys [ i ] ; var r:==:result [ key ] ;
var Block = traceur . syntax . trees . Block ; var callExpression:==:traceur . syntax . trees . callExpression ;
var fragment = options . fragment ; var reload:==:options . reload ;
var first = parseInt ( kernings [ i ] . getAttribute ( ' first ' ) , 10 ) ; var second:==:parseInt ( kernings [ i ] . getAttribute ( ' second ' ) , 10 ) ;
var colorHelper = powerbi . visuals . colorHelper ; var selectionId:==:powerbi . visuals . selectionId ;
var method = options . method ; var samples:==:options . samples ;
var Text = require ( ' Text ' ) ; var styleSheet:==:require ( ' styleSheet ' ) ;
var transparent = exports . transparent = ' rgba ( 0 , 0 , 0 , 0 ) ' ; var fullBlack:==:exports . fullBlack    ' rgba ( 0 , 0 , 0 , 1 ) ' ;
var source = require ( ' vinyl - source - stream ' ) ; var babel:==:require ( ' gulp - babel ' ) ;
var crypto = require ( ' crypto ' ) ; var fs:==:require ( ' hexo - fs ' ) ;
var viewModel = options . viewModel ; var previousViewModel:==:this . previousViewModel ;
var input = element . find ( ' input ' ) [ 0 ] ; var attributes:==:field . attributes ( ) ;
var tag = selector . match ( Selectors . regExps . tag ) ; var i d:==:selector . match ( selectors . regExps . i d ) ;
var isArray = array . isArray ; var defined:==:require ( ' defined ' ) ;
var frame = this . props . frame ; var style:==:this . props . style ;
var textMeasurementService = powerbi . textMeasurementService ; var dataViewObjects:==:powerbi . dataViewObjects ;
var width = mockModel . get ( ' width ' ) ; var height:==:mockModel . get ( ' height ' ) ;
var href = _ ieUriMonitor . iframe . location . href ; var index:==:href . indexOf ( ' ? ' ) ;
var sourceCubemap = options . sourceCubemap ; var method:==:options . method ;
var Common = window . parent . Common ; var networkUsageAlarm:==:window . parent . networkUsageAlarm ;
var debugButton = document . getElementById ( ' debugButton1600 ' ) ; var scene:==:engine . scenes [ 0 ] ;
var coords = mesh . coords ; var colors:==:mesh . colors ;
var polylines = collection . _ polylines ; var length:==:polylines . length ;
var normal = options . normal  |  |  BABYLON . Vector3 . Up ( ) ; var size:==:options . size  |  |  new BABYLON . Vector3 ( 1 , 1 , 1 ) ;
var iframe = document . createElement ( ' iframe ' ) ; var attrs:==:$ ( this ) . data ( ' cbox - iframe - attrs ' ) ;
var convert = defaultValue ( options . convert , true ) ; var destination:==:defaultValue ( options . destination , cartesian3 . clone ( this . positionwc , scratchSetViewCartesian ) ) ;
var STATUS_LOADING_AGENTS = exports . STATUS_LOADING_AGENTS = 2 ; var STATUS_ACTIVE:==:exports . STATUS_ACTIVE    3 ;
var dim = _ dim  |  |  false ; var timeout:==:_ timeout  |  |  50000 ;
var source = parsed . source ; var i d:==:parsed . i d ;
var Deferred = goog . async . Deferred ; var eventHandler:==:goog . events . eventHandler ;
var context = frameState . context ; var pass:==:frameState . passes ;
var objectDescriptors = options . objectDescriptors ; var objectDefinitions:==:options . objectDefinitions ;
var left = ref . style . left ; var right:==:ref . style . right ;
var withStatement = traceur . syntax . trees . withStatement ; var yieldStatement:==:traceur . syntax . trees . yieldStatement ;
var models = _ _ alloyId17 . models ; var len:==:models . length ;
var group = this . _ $ mdPanel . _ groups [ groupName ] ; var index:==:group . panels . indexOf ( this ) ;
var scrollWidth = iframeBody . scrollWidth ; var scrollHeight:==:iframeBody . scrollHeight ;
var extend = require ( ' util ' ) . _ extend ; var fs:==:require ( ' fs - extra ' ) ;
var createForOfStatement = parseTreeFactory . createForOfStatement ; var createIdentifierExpression:==:parseTreeFactory . createIdentifierExpression ;
var cache = App . Providers . _ cache = ; var registry:==:App . Providers . _ registry    ;
var timePosition = t . timePosition ; var getIsCellAllDay:==:t . getIsCellAllDay ;
var fontColor = fontColorHelper . getColorForMeasure ( objects , ' ' ) ; var show:==:powerbi . dataViewObjects . getValue ( objects , properties [ ' show ' ] , defaultSettings . show ) ;
var src = listener . src ; var type:==:listener . type ;
var skinnedNodes = model . _ runtime . skinnedNodes ; var length:==:skinnedNodes . length ;
var Plugin = imports . Plugin ; var editors:==:imports . editors ;
var mkdirp = require ( ' mkdirp ' ) ; var webpack:==:require ( ' webpack ' ) ;
var settings = this . settings ; var codeMirror:==:this . codeMirror ;
var data = n . data , config = this . config ; var siblingOffset:==:config . siblingOffset ;
var title = container . querySelector ( ' . banner - title ' ) ; var desc:==:container . querySelector ( ' . banner - description ' ) ;
var hasOwnProperty = object . prototype . hasOwnProperty ; var iteratedString:==:symbol ( ' iteratedString ' ) ;
var bitField = follower . _ bitField ; var fulfill:==:follower . _ fulfillmentHandler0 ;
var xa = Axes . getFromId ( gd , trace . xaxis  |  |  ' x ' ) ; var ya:==:axes . getFromId ( gd , trace . yaxis  |  |  ' y ' ) ;
var skirtHeight = this . _ skirtHeight ; var exaggeration:==:this . _ mesh . exaggeration ;
var reactNativeStackInspector = require ( ' reactNativeStackInspector ' ) ; var findNumericNodeHandle:==:require ( ' findNumericNodeHandleStack ' ) ;
var dictionaryValues = lzwState . dictionaryValues ; var dictionaryLengths:==:lzwState . dictionaryLengths ;
var messageObject = e . messageObject  |  |  ; var body:==:messageObject . body ;
var powerbitests = window . powerbitests ; var inJs:==:window . inJs ;
var ace = tab . editor . ace ; var evaluator:==:ace . getSession ( ) . repl . evaluator ;
var positiveValues = valuesPerStack [ key ] . positiveValues ; var negativeValues:==:valuesPerStack [ key ] . negativeValues ;
var err = errsCopy . pop ( ) ; var path:==:pathsCopy . pop ( ) ;
var DIRECTION_LEFT = gestureDetector . direction_left = ' left ' ; var direction_up:==:gestureDetector . direction_up    ' up ' ;
var max = data . max ; var min:==:data . min ;
var property = propertyPathSelect . value ; var additionalProperty:==:additionalPropertyPathSelect . value ;
var type = color . type ; var values:==:color . values ;
var FONT_IDENTITY_MATRIX = sharedUtil . font_identity_matrix ; var identity_matrix:==:sharedUtil . identity_matrix ;
var saturation = params . saturation ; var contrast:==:params . contrast ;
var DEBUGGER_STATEMENT = ' DEBUGGER_STATEMENT ' ; var DEFAULT_CLAUSE:==:' DEFAULT_CLAUSE ' ;
var data_path = obj [ ' data_path ' ] ; var items:==:obj [ ' items ' ] ;
var htmlAudio = hilo . htmlAudio ; var webAudio:==:hilo . webAudio ;
var text = element ( by . binding ( ' email . text ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var languages = ref . languages ; var namespaces:==:ref . namespaces ;
var Data = docSet . getByLongname ( ' mathlib . data ' ) [ 0 ] ; var point:==:docSet . getByLongname ( ' mathlib . data#point ' ) [ 0 ] ;
var isNumber = number . isNumber ; var isInteger:==:number . isInteger ;
var elm = vnode . elm ; var staticStyle:==:vnode . data . staticStyle ;
var startDate = this . arg ( ' startDate ' ) ; var endDate:==:this . arg ( ' endDate ' ) ;
var worldAlpha = graphics . worldAlpha ; var len:==:graphics . graphicsData . length ;
var Writable = stream . Writable ; var assert:==:require ( ' assert ' ) ;
var dateIntervalPatterns = goog . require ( ' goog . i18n . dateIntervalPatterns ' ) ; var dateIntervalSymbols:==:goog . require ( ' goog . i18n . dateIntervalSymbols ' ) ;
var inherits = _ interopDefault ( require ( ' inherits ' ) ) ; var immediate:==:_ interopDefault ( require ( ' immediate ' ) ) ;
var optimist = require ( ' optimist ' ) ; var osenv:==:require ( ' osenv ' ) ;
var rule = this . rule ( ) ; var range:==:webInspector . textRange . createFromLocation ( rule . style . range . endLine , rule . style . range . endColumn + 1 ) ;
var username = identify . username ( ) ; var email:==:identify . email ( ) ;
var panels = imports . panels ; var layout:==:imports . layout ;
var Node = scope . wrappers . Node ; var shadowRoot:==:scope . wrappers . shadowRoot ;
var traits = identify . traits ( traitAliases ) ; var i d:==:identify . userId ( ) ;
var placeholder = element [ 0 ] . placeholder , noevent = ; var type:==:lowercase ( element [ 0 ] . type ) ;
var alert = imports [ ' dialog . alert ' ] . show ; var basename:==:require ( ' path ' ) . basename ;
var transition = this . stylesheet . transition  |  |  ; var layers:==:this . _ updates . allPaintProps ? this . _ layers : this . _ updates . paintProps ;
var retained = this . _ retained ; var retainedKeys:==:this . _ retainedKeys ;
var scale = ruler . scale ; var isCombo:==:me . chart . isCombo ;
var m = math . matrix ( [ [ 1 , 2 ] , [ 3 , 4 ] ] , ' sparse ' ) ; var r:==:multiply ( m , math . matrix ( [ [ 5 , 6 ] , [ 7 , 8 ] ] , ' sparse ' ) ) ;
var chat = $ ( ' # chatconversation ' ) ; var smileys:==:$ ( ' # smileysarea ' ) ;
var alert = imports [ ' dialog . alert ' ] . show ; var question:==:imports [ ' dialog . question ' ] ;
var edgeVectorUnit = spheretrimesh_edgevectorunit ; var localSpherePos:==:spheretrimesh_localspherepos ;
var m = this . transform ; var dpr:==:ctx . dpr  |  |  1 ;
var Stream = stream . Stream ; var eventEmitter:==:events . eventEmitter ;
var short = ppo . short . result ; var macd:==:ppo . macd ;
var s = new symbolNode ( ' sqrt ' ) ; var a:==:new constantNode ( 2 ) ;
var positions = corridorGeometry . _ positions ; var height:==:corridorGeometry . _ height ;
var a = Object . getOwnPropertyDescriptor ( o , ' a ' ) . get ; var b:==:object . getOwnPropertyDescriptor ( o , ' b ' ) . set ;
var highlightSlices = this . highlightSlices = options . highlightSlices ; var clearCatcher:==:options . clearCatcher ;
var pop = this . $ _ _ . populate  |  |  ( this . $ _ _ . populate = ) ; var args:==:utils . args ( arguments ) ;
var mergeHelpers = require ( ' mergeHelpers ' ) ; var checkMergeObjectArg:==:mergeHelpers . checkMergeObjectArg ;
var scrollTop = _ ref5 . scrollTop ; var onScroll:==:this . props . onScroll ;
var fixtureA = contact . m_fixtureA ; var fixtureB:==:contact . m_fixtureB ;
var ctx = scale . ctx ; var getValueOrDefault:==:helpers . getValueOrDefault ;
var JS_TIMEOUT = process . env . JS_TIMEOUT  |  |  10 * 1000 ; var NO_JS_EXECUTION_TIMEOUT:==:process . env . NO_JS_EXECUTION_TIMEOUT  |  |  3000 ;
var harness = new pdf_test_harness ( ) ; var body:==:document . getElementsByTagName ( ' body ' ) [ 0 ] ;
var ChildA = db . model ( ' ChildA ' , childSchema , ' children _ ' + random ( ) ) ; var parenta:==:db . model ( ' parenta ' , parentSchema , ' parents _ ' + random ( ) ) ;
var maxFileSize = data . maxFileSizeBytes ; var maxPixelSize:==:data . maxPixelSize ;
var value = attr . value ; var ngValue:==:attr . ngValue ;
var test = this . vexpr ( s . test ) ; var end:==:this . newBlock ( ' end ' ) ;
var dynCall_v = Module [ ' dynCall_v ' ] = asm [ ' dynCall_v ' ] ; var dynCall_iiiiiiiii:==:Module [ ' dynCall_iiiiiiiii ' ]    asm [ ' dynCall_iiiiiiiii ' ] ;
var parseTreeType = traceur . syntax . trees . parseTreeType ; var parseTreeVisitor:==:traceur . syntax . parseTreeVisitor ;
var readFile = denodeify ( fs . readFile ) ; var writeFile:==:denodeify ( fs . writeFile ) ;
var errors = require ( ' restify - errors ' ) ; var filed:==:require ( ' filed ' ) ;
var winston = require ( ' winston ' ) ; var express:==:require ( ' express ' ) ;
var reactTestUtils = require ( ' reactTestUtils ' ) ; var renderSubtreeIntoContainer:==:require ( ' renderSubtreeIntoContainer ' ) ;
var Category = hexo . model ( ' Category ' ) ; var postTag:==:hexo . model ( ' postTag ' ) ;
var textGap = visualMapModel . get ( ' textGap ' ) ; var textStyleModel:==:visualMapModel . textStyleModel ;
var applyEntityToContentBlock = require ( ' applyEntityToContentBlock ' ) ; var getSampleStateForTesting:==:require ( ' getSampleStateForTesting ' ) ;
var seconds   = makeGetter ( ' seconds ' ) ; var minutes:==:makeGetter ( ' minutes ' ) ;
var codeMirror = options . codeMirror ; var navItem:==:options . navItem ;
var progressive = frame . progressive ; var maxH:==:frame . maxH , maxV    frame . maxV ;
var lang = this . page . lang  |  |  this . page . language  |  |  config . language ; var format:==:options . format ;
var pack = _ _ webpack_require _ _ ( 13 ) . pack ; var offsetVector:==:_ _ webpack_require _ _ ( 13 ) . offsetVector ;
var trackingPeriod = settings . trackingPeriod ; var nextReset:==:settings . nextReset ;
var mkdirp = denodeify ( require ( ' mkdirp ' ) ) ; var all:==:Promise . all . bind ( Promise ) ;
var adjustRelatedTarget = shadowdomPolyfill . adjustRelatedTarget ; var unwrap:==:shadowdomPolyfill . unwrap ;
var dragNode = ddm . activeDrag . get ( ' dragNode ' ) ; var proxyNode:==:instance . get ( ' proxyNode ' ) ;
var bellmanFord = exported . bellmanFord ; var vertex:==:exported . vertex ;
var url = Npm . require ( ' url ' ) . parse ( request . url ) ; var pathname:==:url . pathname ;
var quoteMark = this . _ quoteMark ; var allowEscape:==:this . _ allowEscape ;
var camera = options . camera ; var canvas:==:options . canvas ;
var maxWidth = settings . get ( ' maxWidth ' ) ; var maxHeight:==:settings . get ( ' maxHeight ' ) ;
var _ im_open_decoder = Module [ ' _ im_open_decoder ' ] = asm [ ' _ im_open_decoder ' ] ; var _ memmove:==:Module [ ' _ memmove ' ]    asm [ ' _ memmove ' ] ;
var cellSize = _ ref . cellSize ; var computeMetadataCallback:==:_ ref . computeMetadataCallback ;
var t = frustum . top ; var b:==:frustum . bottom ;
var VALUE0 = ' VALUE0 ' ; var LABEL1:==:' LABEL1 ' ;
var applicableDataViewMappings = options . applicableDataViewMappings ; var roleKindByQueryRef:==:options . roleKindByQueryRef ;
var path = require ( ' path ' ) ; var gulp:==:require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ;
var pify = require ( ' pify ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var through = require ( ' through2 ' ) ; var pluginError:==:require ( ' gulp - util ' ) . pluginError ;
var translate = client . translate ; var profile:==:client . sbx . data . profile ;
var title = options . title  |  |  document . title ; var state:==:options . state  |  |  null ;
var overlay = _ props . overlay ; var overlayContainerStyle:==:_ props . overlayContainerStyle ;
var options = this . options ; var rowHeight:==:options . rowHeight ;
var mounts = _ getFormattedItemReference ( ' items . mounts ' , _ . keys ( content . mountInfo ) , ' boolean ' ) ; var food:==:_ getFormattedItemReference ( ' items . food ' , _ . keys ( content . food ) , ' numeric quantity ' ) ;
var mkdirp = require ( ' mkdirp ' ) ; var cssmin:==:require ( ' cssmin ' ) ;
var isDict = corePrimitives . isDict ; var isRef:==:corePrimitives . isRef ;
var reactNative = require ( ' reactNative ' ) ; var set:==:require ( ' set ' ) ;
var negative = intersectCache . negative ; var positive:==:intersectCache . positive ;
var browser = Aloha . browser ; var version:==:browser . version ;
var segment = segments [ i ] ; var event:==:segment . event ;
var redirect_uri = _ ref . redirect_uri ; var post_logout_redirect_uri:==:_ ref . post_logout_redirect_uri ;
var camera = scene . _ camera ; var frameState:==:scene . _ frameState ;
var preMultiplyAlpha = options . preMultiplyAlpha  |  |  ( ( pixelFormat = = = pixelFormat . rgb )  |  |  ( pixelFormat = = = pixelFormat . luminance ) ) ; var flipy:==:defaultValue ( options . flipy , true ) ;
var async = require ( ' async ' ) ; var gulp:==:require ( ' gulp ' ) ;
var thead = goog . bind ( this . dom _ . createDom , this . dom _ , ' thead ' ) ; var tr:==:goog . bind ( this . dom _ . createDom , this . dom _ , ' tr ' ) ;
var exec   = require ( ' child_process ' ) . exec ; var os:==:require ( ' os ' ) ;
var previousNode = nodeWithId ( res . previousNodeId ) ; var node:==:new domNode ( exports , res . node ) ;
var second_currency = $ scope . order . second_currency ; var second_issuer:==:$ scope . order . second_issuer ;
var jshint = require ( ' gulp - jshint ' ) ; var requirejs:==:require ( ' gulp - requirejs ' ) ;
var parenExpression = traceur . syntax . trees . parenExpression ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var indexedDB = window . mozIndexeddb  |  |  window . webkitIndexeddb  |  |  window . msIndexeddb  |  |  window . indexeddb ; var idbKeyRange:==:window . idbKeyRange  |  |  window . webkitidbKeyRange ;
var _ realloc = Module [ ' _ realloc ' ] = asm [ ' _ realloc ' ] ; var _ i64Add:==:module [ ' _ i64Add ' ]    asm [ ' _ i64Add ' ] ;
var module = require ( moduleName ) ; var deprecationMsg:==:symbolPath in deprecationMap ? ' access made to deprecated symbol : ' + symbolPath + ' . ' + deprecationMsg : null ;
var npmIgnore = config & & config . npmIgnore ; var npmDependencies:==:config & & config . npmDependencies ;
var semanticFilter = powerbi . data . semanticFilter ; var appendClearCatcher:==:powerbi . visuals . appendClearCatcher ;
var widget = $ ( ' # widget ' ) . classesWidget ( ) ; var instance:==:widget . classesWidget ( ' instance ' ) ;
var overflowX = el . style . overflowX ; var overflowY:==:el . style . overflowY ;
var autoprefixer = require ( ' gulp - autoprefixer ' ) ; var Buffer:==:require ( ' buffer ' ) . Buffer ;
var Wheel = Parse . Object . extend ( ' Wheel ' ) ; var Car:==:Parse . Object . extend ( ' Car ' ) ;
var type = data . type ; var target:==:data . target ;
var scrollHeight = this . scrollContainer . scrollHeight ; var scrollTop:==:this . scrollContainer . scrollTop ;
var y = ( vector . x * transformation . m [ 1 ] ) + ( vector . y * transformation . m [ 5 ] ) + ( vector . z * transformation . m [ 9 ] ) + transformation . m [ 13 ] ; var z:==:( vector . x * transformation . m [ 2 ] ) + ( vector . y * transformation . m [ 6 ] ) + ( vector . z * transformation . m [ 10 ] ) + transformation . m [ 14 ] ;
var evalExpr = ' evalExpr ( ' + args . path + ' . condition , model : model , ' + ' ' arrayIndex ' : $ index , ' + ' ' arrayIndices ' : arrayIndices , ' + ' ' path ' : path , ' + ' ' $ i ' : $ i , ' + ' ' $ index ' : $ index , ' + ' ' modelValue ' : ' + strModel + ' ) ' ; var children:==:args . fieldFrag . children  |  |  args . fieldFrag . childNodes ;
var path = require ( ' path ' ) ; var selectFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' selectFieldTestObject ' ) ) ;
var prevState = logEntry . prevState ; var error:==:logEntry . error ;
var util = require ( ' gulp - util ' ) ; var webserver:==:require ( ' gulp - webserver ' ) ;
var HIDE_SPINNER = exports . HIDE_SPINNER = ' HIDE_SPINNER ' ; var GET_GITHUB_INITIATE:==:exports . GET_GITHUB_INITIATE    ' GET_GITHUB_INITIATE ' ;
var phone = identify . phone ( ) ; var name:==:identify . name ( )  |  |  identify . firstName ( ) ;
var    LEN _ = 20 ; var    LEN:==:21 ;
var propertyNames = context [ ' propertyNames ' ] ; var srsName:==:context [ ' srsName ' ] ;
var div = document . createElement ( ' div ' ) ; var graph:==:editorUi . editor . graph ;
var options = bs . options ; var emitter:==:bs . emitter ;
var Parent = Parse . Object . extend ( ' parentObject ' ) ; var child:==:parse . object . extend ( ' childObject ' ) ;
var assign = require ( ' object - assign ' ) ; var parse5:==:require ( ' parse5 ' ) ;
var d = new functionNode ( s , [ b , c ] ) ; var e:==:d . clone ( ) ;
var hasRipples = _ state . hasRipples ; var ripples:==:_ state . ripples ;
var url = ( typeof this . url ! = ' object ' ? this . url : this . url . get ) ; var records:==:$ ( ' # grid_'+ this . name + ' _ records ' ) ;
var Schema = require ( ' warehouse ' ) . Schema ; var moment:==:require ( ' moment ' ) ;
var scrollView = require ( ' scrollView ' ) ; var refreshControl:==:require ( ' refreshControl ' ) ;
var globe = scene . globe ; var ellipsoid:==:globe . ellipsoid ;
var create = this . nodes . create ; var picker:==:this . picker ;
var assert = require ( ' assert ' ) ; var events:==:require ( ' events ' ) ;
var params = req . params ; var component:==:params . component ;
var mainData = opt . mainData ; var datas:==:opt . datas ;
var castError = mongooseError . castError ; var validatorError:==:mongooseError . validatorError ;
var log = closure . log ; var name:==:path . basename ( _ _ filename , ' . js ' ) ;
var west = cesiumMath . toDegrees ( rectangle . west ) ; var south:==:cesiumMath . toDegrees ( rectangle . south ) ;
var Server = require ( ' karma ' ) . Server ; var path:==:require ( ' path ' ) ;
var variableDeclaration = traceur . syntax . trees . variableDeclaration ; var variableDeclarationList:==:traceur . syntax . trees . variableDeclarationList ;
var H = bb . H , D = bb . D , W = bb . W ; var svg:==:this . chtmLsvg ( child , bb , t ) ;
var left = webview . _ _ mui_left ; var right:==:webview . _ _ mui_right ;
var util = require ( ' util ' ) ; var events:==:require ( ' events ' ) ;
var group = this . _ group ; var handle:==:this . _ handle ;
var config = this . config ; var multitree:==:config . multitree ;
var points = e . points ; var setName:==:e . setName ;
var name = options . name ; var cssRules:==:options . cssRules ;
var buffer = _ dereq _ ( ' buffer ' ) ; var Buffer:==:buffer . Buffer ;
var inherits = require ( ' util ' ) . inherits ; var semver:==:require ( ' semver ' ) ;
var _ tolower = Module [ ' _ tolower ' ] = asm [ ' _ tolower ' ] ; var _ saveSetjmp:==:module [ ' _ saveSetjmp ' ]    asm [ ' _ saveSetjmp ' ] ;
var APN_SETTINGS_KEY = apnConst . apn_settings_key ; var default_apn_settings_key:==:apnConst . default_apn_settings_key ;
var createIdentifierExpression = parseTreeFactory . createIdentifierExpression ; var createIfStatement:==:parseTreeFactory . createIfStatement ;
var x = ' g . x ' ; var y:==:' g . y ' ;
var l = pixel [ 2 ] ; var a:==:Math . cos ( h ) * c ;
var s = [ ] , ss ; var sst:==:data . match ( sstr0 ) ;
var comprehensionFor = traceur . syntax . trees . comprehensionFor ; var conditionalExpression:==:traceur . syntax . trees . conditionalExpression ;
var tabbehavior = imports . tabbehavior ; var util:==:imports . util ;
var label = bkmrk [ ' label ' ] ; var latlng:==:bkmrk [ ' latlng ' ] ;
var context = renderSession . context ; var texture:==:this . texture ;
var contentTypeInfo = $ tw . config . contentTypeInfo [ tiddlerType ]  |  |  ; var extension:==:contentTypeInfo . extension  |  |  ' . tid ' ;
var y = point . y ; var z:==:point . z ;
var template = options . template ; var errorArea:==:options . errorArea ;
var mongo = require ( ' mongoskin ' ) ; var csv:==:require ( ' csv ' ) ;
var availableWidth = nv . utils . availableWidth ( width , container , margin ) ; var availableHeight:==:nv . utils . availableHeight ( height , container , margin ) ;
var textPosition = style . textPosition ; var textOffset:==:style . textOffset ;
var oneOverRadiiSquared = defined ( ellipsoid ) ? ellipsoid . oneOverRadiiSquared : wgs84OneOverRadiiSquared ; var centerToleranceSquared:==:defined ( ellipsoid ) ? ellipsoid . _ centerToleranceSquared : wgs84CenterToleranceSquared ;
var symbolNode = math . expression . node . symbolNode ; var operatorNode:==:math . expression . node . operatorNode ;
var mkdirp = require ( ' mkdirp ' ) ; var events:==:require ( ' events ' ) ;
var params = req . params ; var payload:==:input . payload ;
var labelledStatement = traceur . syntax . trees . labelledStatement ; var literalExpression:==:traceur . syntax . trees . literalExpression ;
var instanceCameras = data . instanceCameras ; var instanceLights:==:data . instanceLights ;
var defaultsqExprVisitor = powerbi . data . defaultsqExprVisitor ; var semanticFilter:==:powerbi . data . semanticFilter ;
var scheduler = instance . get ( ' scheduler ' ) ; var locale:==:scheduler . get ( ' locale ' ) ;
var metadata = JSON . parse ( item . metadata ) ; var data:==:JSON . parse ( item . data ) ;
var implementPrototype = scope . implementPrototype ; var useNative:==:scope . useNative ;
var splitURL = webInspector . parsedurl . spliturlIntoPathComponents ( url ) ; var projectId:==:webInspector . networkProject . projectId ( target , spliturl [ 0 ] , true ) ;
var hash = _ props . hash ; var state:==:_ props . state ;
var service = req . service ; var endpoint:==:httpRequest . endpoint ;
var monthNumbers = settings . monthNumbers  |  |  this . local . monthNumbers ; var monthNamesShort:==:settings . monthNamesShort  |  |  this . local . monthNamesShort ;
var onRowClick = _ props3 . onRowClick ; var onRowDoubleClick:==:_ props3 . onRowDoubleClick ;
var d2 = _ addDiv ( ' d2 ' , d1 , null , 200 , 200 , 50 , 50 ) ; var d3:==:_ addDiv ( ' d3 ' , null , null , 700 , 700 , 500 , 500 ) ;
var MAX_SAFE_INTEGER = Number . MAX_SAFE_INTEGER  |  |  9007199254740991 ; var re:==:exports . re    [ ] ;
var steps = options . steps ! = = undefined ? options . steps : 1 ; var bendPath:==:options . bendPath ;
var headers = _ ref . headers ; var status:==:_ ref . status ;
var minValue = e . data . minValue ; var maxValue:==:e . data . maxValue ;
var chunks = diffView . chunks ; var i:==:findChunkIndex ( chunks , row , region . side     -1 ) ;
var mediaType = getValue ( options . mediaType , camera . mediaType . picture ) ; var allowEdit:==:! ! options . allowEdit ;
var prevDelta = session . prevDelta  |  |  ; var prevTouch:==:session . prevTouch  |  |  ;
var c = domListFactory ( selector , context ) ; var n:==:c . nodes . length ;
var dueTime = this . dueTime ; var scheduler:==:this . scheduler ;
var dx = event . detail . relative . dx ; var dy:==:event . detail . relative . dy ;
var async = require ( ' async ' ) ; var table:==:require ( ' text - table ' ) ;
var identity = elements . identity . value ; var eap:==:elements . eap . value ;
var firstBatch = new buffer ( ' firstBatch ' , ' utf8 ' ) ; var nextBatch:==:new buffer ( ' nextBatch ' , ' utf8 ' ) ;
var target = this . target ; var bones:==:this . bones ;
var width = options . width ! = null ? options . width : window . innerWidth ; var height:==:options . height !   null ? options . height : window . innerHeight ;
var retrieve = zrUtil . retrieve ; var pi:==:math . pi ;
var maxh = isUndefined ( v [ ' maxh ' ] ) ? 600 : v [ ' maxh ' ] ; var cache:==:isUndefined ( v [ ' cache ' ] ) ? 1 : v [ ' cache ' ] ;
var t = new Object ( this ) ; var len:==:t . length > > > 0 ;
var keys = Object . keys ( router ) ; var index:==:keys . indexOf ( path ) ;
var body = m . body ; var post:==:m . post ;
var specular = this . specular . buildCode ( builder , ' c ' ) ; var shininess:==:this . shininess . buildCode ( builder , ' fv1 ' ) ;
var arrayOf = _ react . propTypes . arrayOf ; var oneOfType:==:_ react . propTypes . oneOfType ;
var View = require ( ' View ' ) ; var Recording:==:require ( ' nativeModules ' ) . recording ;
var container = instance . get ( ' container ' ) ; var contentBox:==:instance . get ( ' contentBox ' ) ;
var className = options . className ! = = undefined ? options . className : ' ol - rotate ' ; var label:==:options . label !    undefined ? options . label : ' \u21e7 ' ;
var options = self . options ; var viewMode:==:options . viewMode ;
var a = this . a . getType ( builder ) ; var b:==:this . b . getType ( builder ) ;
var graph = this . graph ; var canvas:==:this . canvas ;
var source = data . source ; var disableRange:==:data . disableRange ;
var http   = require ( ' http ' ) ; var path:==:require ( ' path ' ) ;
var babel   = require ( ' gulp - babel ' ) ; var bump:==:require ( ' gulp - bump ' ) ;
var btn5 = plugin . getElement ( ' btn5 ' ) ; var btn6:==:plugin . getElement ( ' btn6 ' ) ;
var requestAnimationFrame = $ window . requestAnimationFrame  |  |  $ window . webkitRequestAnimationFrame  |  |  $ window . mozRequestAnimationFrame ; var cancelAnimationFrame:==:$ window . cancelAnimationFrame  |  |  $ window . webkitCancelAnimationFrame  |  |  $ window . mozCancelAnimationFrame  |  |  $ window . webkitCancelRequestAnimationFrame ;
var debug = require ( ' debug ' ) ( ' loopback : test : relations . integration ' ) ; var async:==:require ( ' async ' ) ;
var system = require ( ' system ' ) ; var fs:==:require ( ' fs ' ) ;
var symbolSize = symbolMeta . symbolSize ; var valueLineWidth:==:symbolMeta . valueLineWidth ;
var top = frustum . top ; var bottom:==:frustum . bottom ;
var preload = options . preload  |  |  noop ; var authorized:==:options . authorized  |  |  noop ;
var columns = $ ( ' # grid_'+ this . name + ' _ columns ' ) ; var records:==:$ ( ' # grid_'+ this . name + ' _ records ' ) ;
var emitter = scene . getLastEntryByid ( parsedLensFlareSystem . emitterId ) ; var name:==:parsedLensFlareSystem . name  |  |  ' lensFlareSystem # ' + parsedLensFlareSystem . emitterId ;
var rotation = metadata . rotation  |  |  0 ; var mirrored:==:metadata . mirrored  |  |  false ;
var errorSource = telemetry . errorSource ; var jsCommon:==:window . jsCommon ;
var samples = jsProfileModel . samples ; var timestamps:==:jsProfileModel . timestamps ;
var x = d3 . event . x ; var y:==:d3 . event . y ;
var abbrs = pomelo . data . abbrs ; var route:==:msg . route ;
var getShadingPatternFromir = displayPatternHelper . getShadingPatternFromir ; var webglUtils:==:displayWebgl . webglUtils ;
var tempKeys = saveContext . tempKeys ; var contentKeys:==:saveContext . contentKeys ;
var children = vnode . children ; var tag:==:vnode . tag ;
var startValue = options . startValue ; var stopValue:==:options . stopValue ;
var legendData = powerbi . visuals . legendData ; var objectEnumerationBuilder:==:powerbi . visuals . objectEnumerationBuilder ;
var type = input . type ; var pkg:==:input . pkg ;
var a = diff_linesToChars _ ( val1 , val2 ) ; var diff:==:dmp . diff_main ( a . chars1 , a . chars2 , false ) ;
var extent = extents [ i ] ; var value:==:values [ i ] ;
var createForInStatement = parseTreeFactory . createForInStatement ; var createForStatement:==:parseTreeFactory . createForStatement ;
var socket = options . redis . socket ; var port:==:! socket ? ( options . redis . port  |  |  6379 ) : null ;
var minCanvasWidth = number ( options . minCanvasWidth )  |  |  0 ; var minCanvasHeight:==:number ( options . minCanvasHeight )  |  |  0 ;
var layout = imports . layout ; var tabManager:==:imports . tabManager ;
var transformToRoot = n . _ transformToRoot ; var meshes:==:n . meshes ;
var isFactory = _ _ webpack_require _ _ ( 5 ) . isFactory ; var traverse:==:_ _ webpack_require _ _ ( 5 ) . traverse ;
var parent = $ ( el ) . parent ( ) , o = this . options ; var toggle:==:o . toggleElement ? $ ( o . toggleElement ) : parent . children ( ' . dropdown - toggle ' ) . length > 0 ? parent . children ( ' . dropdown - toggle ' ) : parent . children ( ' a : nth - child ( 1 ) ' ) ;
var b = this . b ; var n:==:this . n ;
var auditResult = declareInterfaceClass ( auditResultImpl ) ; var button:==:declareInterfaceClass ( buttonImpl ) ;
var sum64_5_hi = utils . sum64_5_hi ; var sum64_5_lo:==:utils . sum64_5_lo ;
var bodyA = j . m_bodyA ; var bodyB:==:j . m_bodyB ;
var crypto = Npm . require ( ' crypto ' ) ; var connect:==:Npm . require ( ' connect ' ) ;
var keepCollapsedContent = _ props4 . keepCollapsedContent ; var onRest:==:_ props4 . onRest ;
var rightMarker = document . createTextNode ( rightMarkerChar ) ; var start:==:dom . cursorFromBoundaryPoint ( range . startContainer , range . startOffset ) ;
var n = con . n ; var r1:==:con . r1 ;
var min = Math . min ( value [ 0 ] , value [ 1 ] ) ; var max:==:Math . max ( value [ 0 ] , value [ 1 ] ) ;
var debug = require ( ' debug ' ) ( ' view : setting - options ' ) ; var attach:==:require ( ' attach ' ) ;
var timeWindowRight = this . _ timeWindowRight ; var timeWindowLeft:==:this . _ timeWindowLeft ;
var mwpid = data . mwpid ; var checked:==:! ! this . checkedWaypoints [ mwpid ] ;
var reactNodeTypes = require ( ' reactNodeTypes ' ) ; var reactReconciler:==:require ( ' reactReconciler ' ) ;
var d = new operatorNode ( ' * ' , ' add ' , [ new symbolNode ( ' x ' ) , new constantNode ( 3 ) ] ) ; var e:==:new operatorNode ( ' * ' , ' add ' , [ new symbolNode ( ' x ' ) , new constantNode ( 2 ) , new constantNode ( 4 ) ] ) ;
var missingpdfException = sharedUtil . missingpdfException ; var unexpectedResponseException:==:sharedUtil . unexpectedResponseException ;
var y = o . y ; var r:==:o . r  |  |  2 ;
var clone = require ( ' clone ' ) ; var jsonata:==:require ( ' jsonata ' ) ;
var commander = require ( ' commander ' ) ; var debug:==:require ( ' debug ' ) ( ' pm2 : cli ' ) ;
var strokeWidth = defaultValue ( options . strokeWidth , 1 ) ; var backgroundColor:==:defaultValue ( options . backgroundColor , color . transparent ) ;
var n = s . targets . length ; var val:==:this . vexpr ( s . value ) ;
var fs = require ( ' co - fs - extra ' ) ; var is:==:require ( ' is ' ) ;
var literalExpression = traceur . syntax . trees . literalExpression ; var objectPattern:==:traceur . syntax . trees . objectPattern ;
var webserver = require ( ' gulp - webserver ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var metadataUrl = _ ref . metadataUrl ; var metadata:==:_ ref . metadata ;
var overrideFn = priv . overrideFn ; var scrollOffset:==:priv . scrollOffset ;
var app = this . _ apps [ i d ] ; var inScope:==:( scope & & app . inScope ( scope ) ) ;
var scale = this . _ transformController . scale ( ) ; var rotatex:==:this . _ transformController . rotatex ( ) ;
var COMMENT_NODE     = nodeType . comment_node     = 8 ; var document_node:==:nodeType . document_node       9 ;
var con = contacts [ i ] ; var jnAcc:==:con . jnAcc ;
var models = _ _ alloyId26 . models ; var len:==:models . length ;
var arrowHead = math . max ( 0 , math . min ( bounds . height , parseFloat ( mxUtils . getValue ( this . state . style , ' arrowHead ' , this . arrowHead ) ) ) ) ; var dy:==:math . max ( 0 , math . min ( arrowHead , parseFloat ( mxUtils . getValue ( this . state . style , ' dy ' , this . dy ) ) ) ) ;
var shaders = coreShader . shaders ; var warn:==:utils . debug ( ' components : text : warn ' ) ;
var isSelectAll = this . isSelectAll ( ) ; var expandColumnOptions:==:this . props . expandColumnOptions ;
var lineHeight = config . lineHeight ; var blameData:==:this . blameColumn . blameData ;
var Readable = require ( ' stream ' ) . Readable ; var replace:==:require ( ' gulp - replace ' ) ;
var parentNode = shape . node . parentNode ; var nextSibling:==:shape . node . nextSibling ;
var Tag = ctx . model ( ' Tag ' ) ; var i d:==:this . _ i d ;
var id_token = _ ref . id_token ; var session_state:==:_ ref . session_state ;
var unitToSatoshi = config . settings . unitToSatoshi ; var unitDecimals:==:config . settings . unitDecimals ;
var noLineNumbers = options . noLineNumbers ; var preserveLineNumbers:==:options . preserveLineNumbers ;
var error = resp . error ; var request:==:resp . request ;
var moment = require ( ' moment ' ) ; var util:==:require ( ' util ' ) ;
var domMarkersPlugin = leafletHelpers . domMarkersPlugin ; var safeApply:==:leafletHelpers . safeApply ;
var files = e . target . files ; var f:==:files [ 0 ] ;
var rowheight = options . rowheight  |  |  40 ; var width:==:options . colwidth  |  |  300 ;
var r = Math . abs ( color1 . rgb [ 0 ] - color2 . rgb [ 0 ] ) ; var g:==:Math . abs ( color1 . rgb [ 1 ] - color2 . rgb [ 1 ] ) ;
var disabled = parseInt ( results . disabled , 10 ) = = = 1 ; var locked:==:parseInt ( topic . locked , 10 )      1 ;
var TRANSLUCENCY_BY_DISTANCE_INDEX = pointPrimitive . translucency_by_distance_index = 7 ; var distance_display_condition_index:==:pointPrimitive . distance_display_condition_index    8 ;
var events = expandoStore . events ; var handle:==:expandoStore . handle ;
var pathname = entry . pathname ; var search:==:entry . search ;
var x = data [ i ] . x ; var y:==:data [ i ] . y ;
var d3 = require ( ' d3 ' ) ; var tinycolor:==:require ( ' tinycolor2 ' ) ;
var createTrueLiteral = parseTreeFactory . createTrueLiteral ; var createUseStrictDirective:==:parseTreeFactory . createUseStrictDirective ;
var parseurl = require ( ' parseurl ' ) ; var resolve:==:require ( ' path ' ) . resolve ;
var blueGrey900 = exports . blueGrey900 = ' # 263238 ' ; var grey50:==:exports . grey50    ' # fafafa ' ;
var attributes = this . _ attributes ; var state:==:this . _ state ;
var input = self . input ; var members:==:input . members ;
var lightBlue900 = exports . lightBlue900 = ' # 01579b ' ; var lightBluea100:==:exports . lightBluea100    ' # 80d8ff ' ;
var settings = imports . settings ; var metadata:==:imports . metadata ;
var x = csul . x - unul . x ; var y:==:csul . y - unul . y ;
var application = event . application ; var manifest:==:application . updateManifest  |  |  application . manifest ;
var svg = opts . svg ; var format:==:opts . format  |  |  ' png ' ;
var argsArray = operatorList . argsArray ; var fnArray:==:operatorList . fnArray ;
var calendarPane = this . calendarPane ; var body:==:document . body ;
var log = console . log ; var err:==:console . error ;
var _ im_get_predicts_utf8 = Module [ ' _ im_get_predicts_utf8 ' ] = asm [ ' _ im_get_predicts_utf8 ' ] ; var _ im_delsearch:==:Module [ ' _ im_delsearch ' ]    asm [ ' _ im_delsearch ' ] ;
var scope = widget . element . scope ( ) ; var footer:==:qUnit . fixture . find ( ' select ' ) . getKendoDropDownList ( ) . footer ;
var n1 = new redNode ( i d : ' n1',type : ' abc',wires : [ [ [ ' n2 ' ] , [ ' n3 ' ] ] ] ) ; var n2:==:new redNode ( i d : ' n2',type : ' abc ' ) ;
var timeout = _ timeout  |  |  50000 ; var label:==:_ label  |  |  ' Loading . . . ' ;
var debug   = require ( ' debug ' ) ( ' pm2 : monit ' ) ; var sprintf:==:require ( ' sprintf - js ' ) . sprintf ;
var from = docSet . getByLongname ( ' < anonymous>~headers . from ' ) ; var cache:==:docSet . getByLongname ( ' < anonymous>~headers . cache ' ) ;
var remoteDiff = object . remoteDiff ; var tab:==:object . tab . n ;
var Stream = util . stream . Stream ; var fs:==:require ( ' fs ' ) ;
var errorArea = options . errorArea ; var relocator:==:options . relocator ;
var constraints = this . constraints ; var arbiters:==:this . arbiters ;
var test1 = docSet . getByLongname ( ' test1 ' ) [ 0 ] ; var test2:==:docSet . getByLongname ( ' test2 ' ) [ 0 ] ;
var req = resp . request ; var body:==:resp . httpResponse . body ;
var valueFormatter = powerbi . visuals . valueFormatter ; var selectionId:==:powerbi . visuals . selectionId ;
var minChar = comments [ i ] . minChar ; var limChar:==:comments [ i ] . limChar ;
var c = charCodes [ i ] ; var glyphIndex:==:glyphIndexMap [ c ] ;
var columnCount = props . columnCount ; var scrollToAlignment:==:props . scrollToAlignment ;
var rctEventEmitter = require ( ' rctEventEmitter ' ) ; var reactNativeBridgeEventPlugin:==:require ( ' reactNativeBridgeEventPlugin ' ) ;
var immediate = imports . immediate ; var callstack:==:imports . callstack ;
var primitives = mesh . primitives ; var length:==:primitives . length ;
var i d = $ ( this ) . parent ( ' . button - container ' ) . find ( ' . _ i d ' ) . val ( ) ; var overlay:==:$ ( ' # overlay ' ) . clone ( ) ;
var express = require ( ' express ' ) ; var when:==:require ( ' when ' ) ;
var itemMoveRecords = this . _ itemMoveRecords ; var moveRecords:==:this . _ moveRecords ;
var scrollToIndex = _ props . scrollToIndex ; var style:==:_ props . style ;
var loadResources = model . _ loadResources ; var techniques:==:model . gltf . techniques ;
var x = p . x ; var y:==:p . y ;
var mid = element . dataset [ ' mission_mid ' ] ; var checked:==:! ! this . checkedMissions [ mid ] ;
var x = Math . max ( 0 , pos . x ) ; var y:==:Math . max ( 0 , pos . y ) ;
var ReactDOM = require ( ' ReactDOM ' ) ; var getDraftEditorSelection:==:require ( ' getDraftEditorSelection ' ) ;
var ownerID = _ treeSnapshot$instanc . ownerid ; var owner:==:treeSnapshot [ ownerid ] ;
var centerRipple = _ props2 . centerRipple ; var children:==:_ props2 . children ;
var subdivisions = Property . getValueOrUndefined ( ellipsoid . subdivisions , time ) ; var outlineWidth:==:property . getValueOrDefault ( ellipsoid . outlineWidth , time , 1 . 0 ) ;
var createClassAndSelector = jsCommon . cssConstants . createClassAndSelector ; var dataRoleHelper:==:powerbi . data . dataRoleHelper ;
var group = $ root . data ( ' group ' ) ; var name:==:$ root . data ( ' name ' ) ;
var width = viewModel . viewport . width ; var height:==:viewModel . viewport . height ;
var controllers = this . system . controllers ; var data:==:this . data ;
var center = box . center ; var halfAxes:==:box . halfAxes ;
var ignoreAccents = _ props . ignoreAccents ; var ignoreCase:==:_ props . ignoreCase ;
var metaDataColumn = this . metaDataColumn ; var labelSettings:==:this . cardFormatSetting . labelSettings ;
var isValidNewOption = _ props . isValidNewOption ; var newOptionCreator:==:_ props . newOptionCreator ;
var propertyName = propertyNames [ 0 ] ; var prop:==:_ _ arrayFirst ( this . getProperties ( ) , _ _ propEq ( ' name ' , propertyName ) ) ;
var blue400 = exports . blue400 = ' # 42a5f5 ' ; var blue500:==:exports . blue500    ' # 2196f3 ' ;
var dx2 = Math . max ( 0 , Math . min ( parseFloat ( mxUtils . getValue ( this . state . style , ' dx3 ' , 0 ) ) , parseFloat ( mxUtils . getValue ( this . state . style , ' dx2 ' , 0 ) ) ) ) ; var dy2:==:math . max ( 0 , math . min ( 100 , parseFloat ( mxUtils . getValue ( this . state . style , ' dy2 ' , 0 ) ) ) ) ;
var entity = this . entity ; var ellipsoid:==:this . ellipsoid ;
var index = sel . indexes [ s ] ; var rec:==:this . records [ index ] ;
var xor = stdlib . Atomics . xor ; var fround:==:stdlib . Math . fround ;
var getLabelFormattedText = powerbi . visuals . dataLabelUtils . getLabelFormattedText ; var fontSize:==:labelPoint . fontSize ;
var x = ofsX + pointerAbs . x - jsc . _ pointerOrigin . x - thisObj . padding - thisObj . insetWidth ; var y:==:ofsy + pointerAbs . y - jsc . _ pointerOrigin . y - thisObj . padding - thisObj . insetWidth ;
var fixedRowsTop = wot . getSetting ( ' fixedRowsTop ' ) ; var fixedRowsBottom:==:wot . getSetting ( ' fixedRowsBottom ' ) ;
var response = result . response ; var body:==:result . body ;
var type = node . leadingComments [ i ] . type ; var value:==:node . leadingComments [ i ] . value ;
var helpers = Chart . helpers ; var layout:==:Chart . layoutService ;
var content = tree . content = a . firstChild ; var sr2:==:tree . sr2    a . createShadowRoot ( ) ;
var innerWidth = win [ ' innerWidth ' ] ; var innerHeight:==:win [ ' innerHeight ' ] ;
var moment = require ( ' moment ' ) ; var file:==:path . join ( process . cwd ( ) , moment ( ) . format ( ' dd - HH : mm : ss ' ) + ' . cpuprofile ' ) ;
var insert = inserts [ i ] ; var entry:==:insert . entry ;
var tag = require ( ' gulp - tag - version ' ) ; var release:==:require ( ' gulp - github - release ' ) ;
var x = cx + dir [ 0 ] ; var y:==:cy + dir [ 1 ] ;
var isInteger = _ _ webpack_require _ _ ( 2 ) . isInteger ; var isNumber:==:_ _ webpack_require _ _ ( 2 ) . isNumber ;
var hoverColor = _ props . hoverColor ; var onMouseLeave:==:_ props . onMouseLeave ;
var title = $ . trim ( $ ( ' . title ' ) . text ( ) ) ; var desc:==:$ . trim ( $ ( ' # desc ' ) . text ( ) ) ;
var email = document . getElementById ( ' create - user - email ' ) . value ; var password:==:document . getElementById ( ' create - user - password ' ) . value ;
var createCallStatement = parseTreeFactory . createCallStatement ; var createContinueStatement:==:parseTreeFactory . createContinueStatement ;
var behaviors = this . behaviors ; var index:==:behaviors . indexOf ( behavior ) ;
var TOTAL_STACK = Module [ ' TOTAL_STACK ' ]  |  |  5242880 ; var TOTAL_MEMORY:==:Module [ ' TOTAL_MEMORY ' ]  |  |  134217728 ;
var start = grid . getNodeAt ( startx , starty ) ; var end:==:grid . getNodeAt ( endx , endy ) ;
var glyphs = label . _ glyphs ; var length:==:glyphs . length ;
var active = me . _ active ; var data:==:me . _ data ;
var column = args . column ; var menu:==:column . header & & column . header . menu ;
var textOp = firepad . textOp ; var utils:==:firepad . utils ;
var minify = require ( ' gulp - minify - css ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var updatable = options . updatable ; var sideOrientation:==:meshBuilder . updateSideOrientation ( options . sideOrientation , scene ) ;
var TRANSLUCENCY_BY_DISTANCE_INDEX = Billboard . TRANSLUCENCY_BY_DISTANCE_INDEX ; var PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX:==:Billboard . PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX ;
var left = event . center . x - rect . left ; var top:==:event . center . y - rect . top ;
var o = this . options ; var c:==:o . content ;
var t = source . getItem ( node . i d ) ; var n:==:node . cloneNode ( true ) ;
var height = imgData . height ; var ctx:==:this . ctx ;
var project = options . project ; var clientId:==:opts . clientId ;
var vfs = imports . vfs ; var fs:==:imports . fs ;
var doc = ed . session . doc ; var l:==:doc . getValue ( ) . length ;
var stats = this . stats ; var stat:==:fragment ( statsTemplate ) ;
var event = events [ i ] ; var time:==:new Date ( event . time ) ;
var concat = require ( ' gulp - concat ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var surfaceHeight = options . surfaceHeight ; var extrudedHeight:==:options . extrudedHeight ;
var x = gridline . x ; var y:==:gridline . y ;
var gl = painter . gl ; var transform:==:painter . transform ;
var w = flags . width ; var h:==:flags . height ;
var messageWebSocket = windows . networking . sockets . messageWebSocket ; var socketMessageType:==:windows . networking . sockets . socketMessageType ;
var extra = that . stat_desc . extra_bits ; var base:==:that . stat_desc . extra_base ;
var tileheight = json [ ' tileheight ' ] ; var tilewidth:==:json [ ' tilewidth ' ] ;
var closed = defaultValue ( options . closed , false ) ; var flat:==:defaultValue ( options . flat , false ) ;
var d = dec_point = = = undefined ? ' , ' : dec_point ; var t:==:thousands_sep      undefined ? ' . ' : thousands_sep , s    n < 0 ? ' - ' : ' ' ;
var requiresPrefix = _ ref . requiresPrefix ; var keepUnprefixed:==:_ ref . keepUnprefixed ;
var billboardCollection = entityCluster . _ billboardCollection ; var pointCollection:==:entityCluster . _ pointCollection ;
var url = helpers . urlForBin ( bin ) ; var user:==:req . session . user  |  |  ;
var textInputState = require ( ' textInputState ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var replace = require ( ' gulp - replace ' ) ; var transform:==:require ( ' gulp - transform ' ) ;
var timestamp = data . timestamp  |  |  Date . now ( ) ; var disableJoinRequests:==:parseInt ( data . disableJoinRequests , 10 )      1 ? 1 : 0 ;
var events = require ( ' events - mixin ' ) ; var matches:==:require ( ' matches - selector ' ) ;
var xOffset = reflowItemRecord . xOffset ; var yOffset:==:reflowItemRecord . yOffset ;
var utils = require ( ' utils ' ) ; var prefs:==:require ( ' prefs ' ) ;
var session = e . session ; var editor:==:e . editor ;
var gridVertexShader = loadShader ( gl , gridVertexShaderProg , gl . vertex_shader ) ; var gridFragmentShader:==:loadShader ( gl , gridFragmentShaderProg , gl . fragment_shader ) ;
var frustum = camera . frustum ; var frustumSplits:==:frameState . frustumSplits ;
var directory = document . getElementById ( ' directory ' ) ; var tcpServer:==:chrome . sockets . tcpServer ;
var i d = w2utils . escapeId ( recid ) ; var expanded:==:$ ( ' # grid_'+this . name + ' _ rec_'+ i d ) . attr ( ' expanded ' ) ;
var origin = addVector ( scale ( rays [ 0 ] . origin , xp ) , scale ( rays [ 1 ] . origin , 1 - xp ) ) ; var dir:==:normaliseVector ( addVector ( scale ( rays [ 0 ] . dir , xp ) , scale ( rays [ 1 ] . dir , 1 - xp ) ) ) ;
var when = require ( ' when ' ) ; var crypto:==:require ( ' crypto ' ) ;
var topLevelTypes = eventConstants . topLevelTypes ; var getFirstReactdom:==:reactMount . getFirstReactdom ;
var div = document . createElement ( ' div ' ) ; var iframe:==:document . createElement ( ' iframe ' ) ;
var position = entity . position ; var show:==:box . show ;
var Pins = Board . Pins ; var toFixed:==:fn . toFixed ;
var setting = event . detail . setting ; var value:==:event . detail . value ;
var cellLayoutManager = _ props6 . cellLayoutManager ; var height:==:_ props6 . height ;
var precision = type . bigNumber . precision ; var big:==:type . bigNumber . clone ( precision : precision + 2 ) ;
var util    = require ( ' util ' ) ; var axon:==:require ( ' pm2-axon ' ) ;
var isArray = _ _ dependency1 _ _ . isArray ; var isNonThenable:==:_ _ dependency1 _ _ . isNonThenable ;
var kpiArcPaths = this . kpiArcPaths = [ ] ; var mainGraphicsContext:==:this . mainGraphicsContext ;
var _ testSetjmp = module [ ' _ testSetjmp ' ] = asm [ ' _ testSetjmp ' ] ; var runPostSets:==:module [ ' runPostSets ' ]    asm [ ' runPostSets ' ] ;
var typeSupported = this . typeSupported ; var config:==:this . config ;
var valueDim = opt . valueDim ; var repeatTimes:==:symbolMeta . repeatTimes  |  |  0 ;
var w = ( proxyInjectionMode ? selenium . browserbot . getCurrentWindow ( ) : window ) . top ; var s:==:' & seleniumWindowName ' ;
var flipX = options [ ' flipX ' ] ; var flipY:==:options [ ' flipY ' ] ;
var o = this . options ; var helper:==:$ . isFunction ( o . helper ) ? $ ( o . helper . apply ( this . element [ 0 ] , [ event ] ) ) : ( o . helper     ' clone ' ? this . element . clone ( ) . removeAttr ( ' i d ' ) : this . element ) ;
var first = parseInt ( kernings [ i ] . attributes . getNamedItem ( ' first ' ) . nodeValue , 10 ) ; var second:==:parseInt ( kernings [ i ] . attributes . getNamedItem ( ' second ' ) . nodeValue , 10 ) ;
var el = this . el . empty ( ) ; var w:==:el . width ( ) , h    el . height ( ) ;
var hint = require ( ' jshint ' ) . JSHINT ; var uglify:==:require ( ' uglify - js ' ) ;
var width = + root . attr ( ' width ' ) ; var height:==:+ root . attr ( ' height ' ) ;
var init = program . init ; var update:==:program . update ;
var events = require ( ' events ' ) ; var inherits:==:require ( ' util ' ) . inherits ;
var project = state . project ; var iterator:==:state . iterator ;
var min = Math . floor ( minFloat ) ; var sec:==:math . round ( secFloat * 100 ) ;
var cbr = this . _ cbr ; var cx:==:cbr . cx , cy    cbr . cy , r    cbr . r ;
var IF_STATEMENT = ' IF_STATEMENT ' ; var IMPORT_DECLARATION:==:' IMPORT_DECLARATION ' ;
var dataZoomModel = this . dataZoomModel ; var handleEnds:==:this . _ handleEnds ;
var through2 = require ( ' through2 ' ) ; var request:==:bbPromise . promisify ( require ( ' request ' ) ) ;
var range = new CKEDITOR . dom . range ( editor . document ) ; var cursors:==:this . _ . cursors ;
var vfs = imports . vfs ; var save:==:imports . save ;
var p = this . pathname  |  |  '' ; var s:==:this . search  |  |  '' ;
var depthTest = defaultValue ( rs . depthTest , ) ; var colorMask:==:defaultValue ( rs . colorMask , ) ;
var pi = math . pi ; var acosh:==:math . acosh ;
var fs = imports . fs ; var menus:==:imports . menus ;
var context = contextGetter ? contextGetter ( scope , locals ) : scope ; var fn:==:fnGetter ( scope , locals , context )  |  |  noop ;
var queryOptions = queryOptions . resolve ( [ query . queryOptions , this . queryOptions , queryOptions . defaultInstance ] ) ; var dataService:==:dataService . resolve ( [ query . dataService , this . dataService ] ) ;
var assert = require ( ' assert ' ) ; var tmp:==:require ( ' tmp ' ) ;
var moduleExpression = this . transformAny ( tree . moduleExpression ) ; var importSpecifierSet:==:this . transformList ( tree . importSpecifierSet ) ;
var View = reactNative ; var testModule:==:reactNative . nativeModules ;
var constant = Parsers . constant ; var mapResult:==:parsers . mapResult ;
var fs   = require ( ' fs ' ) ; var readFile:==:bluebird . promisify ( fs . readFile ) ;
var attributes = attr . attributes ; var indices:==:attr . indices ;
var createParenExpression = parseTreeFactory . createParenExpression ; var createPostfixExpression:==:parseTreeFactory . createPostfixExpression ;
var restore = tab . restore ; var path:==:tab . path  |  |  tab . editorType ;
var options = _ props$options = = = undefined ? [ ] : _ props$options ; var shouldKeyDownEventCreateNewOption:==:_ props . shouldKeyDownEventCreateNewOption ;
var _ testSetjmp = module [ ' _ testSetjmp ' ] = asm [ ' _ testSetjmp ' ] ; var _ strncpy:==:module [ ' _ strncpy ' ]    asm [ ' _ strncpy ' ] ;
var randf = global . randf ; var randi:==:global . randi ;
var GENERATOR_COMPREHENSION = ' GENERATOR_COMPREHENSION ' ; var GET_ACCESSOR:==:' GET_ACCESSOR ' ;
var dataViewConcatenateCategoricalColumns = powerbi . data . dataViewConcatenateCategoricalColumns ; var dataViewMatrixUtils:==:powerbi . data . dataViewMatrixUtils ;
var right = camera . right ; var up:==:camera . up ;
var username = element ( by . model ( ' username ' ) ) ; var name:==:element ( by . binding ( ' username ' ) ) ;
var file = files [ i ] ; var stat:==:fs . statSync ( file ) ;
var content = new Animation ( ele . querySelector ( ' . popover - content ' ) ) ; var viewport:==:new animation ( ele . querySelector ( ' . popover - viewport ' ) ) ;
var originalLight = light . userData . originalLight ; var uniforms:==:light . material . uniforms ;
var nav = context . navigator  |  |  ; var userAgent:==:nav . userAgent  |  |  '' ;
var enumExtensions = jsCommon . enumExtensions ; var pixelConverter:==:jsCommon . pixelConverter ;
var sin = stdlib . Math . sin ; var tan:==:stdlib . Math . tan ;
var source = originalPosition . source ; var line:==:originalPosition . line ;
var textureHeight = options . textureHeight ! = = undefined ? options . textureHeight : 512 ; var clipBias:==:options . clipBias !    undefined ? options . clipBias : 0 . 0 ;
var primitive = groundPrimitive . _ primitive ; var pickOffsets:==:primitive . _ pickOffsets ;
var longitude = borderCartographic . longitude ; var latitude:==:borderCartographic . latitude ;
var g = this . dygraph _ ; var logscale:==:this . getOption _ ( ' logscale ' ) ;
var audioSendCodec = options . audioSendCodec  |  |  '' ; var audioRecvCodec:==:options . audioRecvCodec  |  |  '' ;
var moment = require ( ' moment ' ) ; var connect:==:require ( ' react - redux ' ) ;
var pi = math . pi ; var asech:==:math . asech ;
var radiiSquared = options . ellipsoid . radiiSquared ; var nwCorner:==:options . nwCorner ;
var run = test . runId ( ) ; var coll:==:new mongo . collection ( ' observeLimit-'+run , collectionOptions ) ;
var complex = math . complex ; var fraction:==:math . fraction ;
var $ headSpans = that . $ headSpans = $ datatable . children ( ' . datatable - head ' ) . children ( ' . datatable - head - span ' ) ; var $ cells:==:that . $ cells    $ dataSpans . find ( ' td , th ' ) ;
var geom = feature . geometry ; var center:==:this . center ;
var session = this . session ; var actionId:==:el . getAttribute ( ' actionId ' ) ;
var width = Service . query ( ' layoutManager . width ' ) ; var height:==:service . query ( ' layoutManager . height ' ) ;
var maxZoomLevel = props . maxZoomLevel ; var numZoomLevels:==:props . numZoomLevels ;
var bind = require ( ' bind ' ) ; var callback:==:require ( ' callback ' ) ;
var el = this . $ el ; var body:==:document . body ;
var selector = request . selector ; var sort:==:request . sort ;
var x = geometries [ j ] [ k ] . x ; var y:==:geometries [ j ] [ k ] . y ;
var topOverlay = wot . wtOverlays . topOverlay ; var leftOverlay:==:wot . wtOverlays . leftOverlay ;
var get = Ember . get ; var set:==:Ember . set ;
var temporal = require ( ' temporal ' ) ; var minimist:==:require ( ' minimist ' ) ;
var eachline = require ( ' eachline ' ) ; var chalk:==:require ( ' chalk ' ) ;
var showsUpdated = this . showsUpdated . values ; var length:==:showsUpdated . length ;
var xmin = options . xmin  |  |  -1 . 0 ; var zmin:==:options . zmin  |  |  -1 . 0 ;
var t = new nodeList ( ) ; var e:==:dnd . _ empty ;
var req = resp . request ; var operation:==:req . operation ;
var resources = $ ( ' div#resources ' ) ; var special:==:$ ( ' div#special ' ) ;
var i = this . currentBatchSize * 4 * this . vertSize ; var resolution:==:texture . baseTexture . resolution ;
var chalk   = require ( ' chalk ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var tablixType = controls . tablixType ; var jsCommon:==:window . jsCommon ;
var head = this . head ; var buffer:==:this . buffer ;
var _ _ GLOBAL__I_a = Module [ ' _ _ GLOBAL__I_a ' ] = asm [ ' _ _ GLOBAL__I_a ' ] ; var runPostSets:==:module [ ' runPostSets ' ]    asm [ ' runPostSets ' ] ;
var metadata = target . _ _ metadata = target . _ _ metadata  |  |  ; var properties:==:metadata . properties    metadata . properties  |  |  ;
var open = docSet . getByLongname ( ' module : network . socket#open ' ) [ 0 ] ; var uid:==:docSet . getByLongname ( ' module : network . socket . uid ' ) [ 0 ] ;
var m = domGeom . getMarginBox ( this . node ) ; var b:==:win . doc . body ;
var asc = numberUtil . asc ; var linearMap:==:numberUtil . linearMap ;
var list = view . owner . list ; var length:==:list . length ;
var isCordova = platformInfo . isCordova ; var isChromeApp:==:platformInfo . isChromeApp ;
var Q = new errorCorrectionLevel ( 2 , 0x03 , ' q ' ) ; var h:==:new errorCorrectionLevel ( 3 , 0x02 , ' h ' ) ;
var options = opt_options ? opt_options : ; var className:==:options . className !    undefined ? options . className : ' ol - zoom ' ;
var dataBoundWidget = kendo . ui . dataBoundWidget ; var class:==:kendo . class ;
var reactTestRenderer = require ( ' reactTestRenderer ' ) ; var reactdomFeatureFlags:==:require ( ' reactdomFeatureFlags ' ) ;
var sourcemaps = require ( ' gulp - sourcemaps ' ) ; var insert:==:require ( ' gulp - insert ' ) ;
var attributes = element . data ( ' attributes ' ) ; var key:==:element . data ( ' key ' )  |  |  element . data ( ' parent ' ) ;
var handler = _ bindings$event$i . handler ; var ctx:==:_ bindings$event$i . ctx ;
var util = require ( ' gulp - util ' ) ; var watch:==:require ( ' gulp - watch ' ) ;
var p = new Date ( self . options . position . start ) ; var child:==:$ ( ' . cal - cell1 : first - child . cal - month - day ' , this ) ;
var session = args . session ; var stream:==:args . stream ;
var width = options . width  |  |  1 ; var height:==:options . height  |  |  1 ;
var baseTheme = _ context$muiTheme . baseTheme ; var button:==:_ context$muiTheme . button ;
var proc = require ( ' child_process ' ) ; var path:==:require ( ' path ' ) ;
var green100 = exports . green100 = ' # c8e6c9 ' ; var green200:==:exports . green200    ' # a5d6a7 ' ;
var reference = Cartesian3 . mostOrthogonalAxis ( f , referenceScratch ) ; var secondAxis:==:cartesian3 . normalize ( cartesian3 . cross ( reference , firstAxis , secondAxisScratch ) , secondAxisScratch ) ;
var gltf = model . gltf ; var bufferViews:==:gltf . bufferViews ;
var restitution = this . options . restitution ; var impulse:==:this . impulse ;
var camera = scene . camera ; var center:==:Matrix4 . multiplyByPoint ( model . modelMatrix , model . boundingSphere . center , new cartesian3 ( ) ) ;
var teal600 = exports . teal600 = ' # 00897b ' ; var teal700:==:exports . teal700    ' # 00796b ' ;
var isstopped = lineDotChart . defaultSettings . isstopped ; var duration:==:lineDotChart . defaultSettings . duration ;
var session = require ( ' express - session ' ) ; var passport:==:require ( ' passport ' ) ;
var STATUS_INACTIVE   = exports . STATUS_INACTIVE   = 0 ; var STATUS_CONNECTING:==:exports . STATUS_CONNECTING     1 ;
var nodeCount = this . nodeCount ; var nodes:==:this . nodes ;
var tab   = validator . trim ( req . body . tab  |  |  '' ) ; var content:==:validator . trim ( req . body . content  |  |  '' ) ;
var archiver = require ( ' archiver ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var EOL = require ( ' os ' ) . EOL ; var Protocol:==:require ( ' _ debugger ' ) . Protocol ;
var Post = ctx . model ( ' Post ' ) ; var path:==:file . params . path ;
var count = this . count + = 1 ; var destination:==:this . destination ;
var patch = patches [ i ] ; var index:==:patch . index ;
var c = ' c ' ; var d:==:fulfillSoon ( ' d ' , 20 ) ;
var colorPropType = require ( ' colorPropType ' ) ; var react:==:require ( ' react ' ) ;
var dict = params . dict ; var data:==:this . data    ;
var lang = document . getElementById ( ' lang ' ) ; var pitch:==:document . getElementById ( ' pitch ' ) ;
var fround = stdlib . Math . fround ; var acos:==:stdlib . Math . acos ;
var util = require ( ' util ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var uid = data . uid ; var tid:==:data . tid ;
var filesize = require ( ' filesize ' ) ; var recursive:==:require ( ' recursive - readdir ' ) ;
var stringifyProperties = schema . stringifyProperties ; var stringifyProperty:==:schema . stringifyProperty ;
var width = _ undef ( styles . width , '' ) ; var height:==:_ undef ( styles . height , '' ) ;
var minimum = args . form . minimum  |  |  false ; var exclusiveMinimum:==:args . form . exclusiveMinimum  |  |  false ;
var positionWC = Cartesian3 . clone ( camera . positionWC ) ; var position:==:Cartesian3 . clone ( camera . position ) ;
var TRANSLUCENCY_BY_DISTANCE_INDEX = Billboard . TRANSLUCENCY_BY_DISTANCE_INDEX = 12 ; var PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX:==:Billboard . PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX    13 ;
var createPromiseCapability = sharedUtil . createPromiseCapability ; var error:==:sharedUtil . error ;
var codingLine = this . codingLine ; var codingPos:==:this . codingPos ;
var lazypipe = require ( ' lazypipe ' ) ; var foreach:==:require ( ' gulp - foreach ' ) ;
var settings = $ ( this ) . data ( ' settings ' ) ; var selected:==:$ ( this ) . data ( ' selected ' ) ;
var async = require ( ' async ' ) ; var engine:==:require ( ' engine . io ' ) ;
var assert = referee . assert ; var refute:==:referee . refute ;
var paletteMap = this . paletteMap _ ; var palette:==:paletteMap [ type ] ;
var scriptVisualAuthoringEnabled = featureSwitches ? featureSwitches . scriptVisualAuthoringEnabled : false ; var isLabelInteractivityEnabled:==:featureSwitches ? featureSwitches . isLabelInteractivityEnabled : false ;
var header = require ( ' gulp - header ' ) ; var istanbul:==:require ( ' gulp - istanbul ' ) ;
var u2Over4 = constants . u2Over4 ; var u6Over64:==:constants . u6Over64 ;
var cx = require ( ' cx ' ) ; var joinClasses:==:require ( ' joinClasses ' ) ;
var isFlat = this . context . isFlatFileStructure ; var fileUrl:==:this . pkg . fileUrl ;
var value = spec . value ; var timeout:==:( spec . timeout     undefined ) ? TIMEOUT_SEARCH : spec . timeout ;
var localAABB = intersectTrimesh_localAABB ; var localDirection:==:intersecttrimesh_localdirection ;
var STRING5 = C . STRING5 = 0x65 ; var STRING6:==:C . STRING6    0x66 ;
var height = this . height ( ) ; var width:==:this . width ( ) ;
var rimraf = require ( ' gulp - rimraf ' ) ; var stylish:==:require ( ' jshint - stylish ' ) ;
var zlib = require ( ' zlib ' ) ; var assert:==:require ( ' assert - plus ' ) ;
var span = document . createElement ( ' span ' ) ; var title:==:menu [ simNumber ] . entries . title ;
var fs = require ( ' fs ' ) ; var whitelist:==:options . whitelist ;
var formatter = monthLabel . get ( ' formatter ' ) ; var name:==:nameMap [ + firstDay . m - 1 ] ;
var creator = opts . creator  |  |  ' initiator ' ; var role:==:opts . role  |  |  ' initiator ' ;
var s = this ; var plt:==:s . _ plt ;
var width = layoutManager . width ; var height:==:layoutManager . height ;
var southwest = projection . project ( Rectangle . southwest ( tile . rectangle ) , southwestScratch ) ; var northeast:==:projection . project ( rectangle . northeast ( tile . rectangle ) , northeastScratch ) ;
var camelize = require ( ' camelize ' ) ; var invariant:==:require ( ' invariant ' ) ;
var ssl = keystone . get ( ' ssl ' ) ; var host:==:keystone . get ( ' ssl host ' )  |  |  keystone . get ( ' host ' ) ;
var exec = require ( ' child_process ' ) . execSync ; var plumber:==:require ( ' gulp - plumber ' ) ;
var Component = _ require . Component ; var createElement:==:_ require . createElement ;
var changedObjects = this . _ changedObjects ; var entity:==:updater . entity ;
var yMax = this . yMax  |  |  0 ; var advanceWidth:==:this . advanceWidth  |  |  0 ;
var shortYearCutoff = ( settings ? settings . shortYearCutoff : null )  |  |  this . _ defaults . shortYearCutoff ; var dayNamesShort:==:( settings ? settings . dayNamesShort : null )  |  |  this . _ defaults . dayNamesShort ;
var onLoad = options . onLoad ; var preload:==:options . preload  |  |  noop ;
var displayOrientations = windows . graphics . display . displayOrientations ; var imaging:==:windows . graphics . imaging ;
var textCredits = this . _ defaultTextCredits . concat ( this . _ currentFrameCredits . textCredits ) ; var imageCredits:==:this . _ defaultImageCredits . concat ( this . _ currentFrameCredits . imageCredits ) ;
var _ memcmp = Module [ ' _ memcmp ' ] = asm [ ' _ memcmp ' ] ; var _ strncasecmp:==:Module [ ' _ strncasecmp ' ]    asm [ ' _ strncasecmp ' ] ;
var onFocus = _ props3 . onFocus ; var onKeyUp:==:_ props3 . onKeyUp ;
var incomingForm = common . require ( ' incoming_form ' ) . incomingForm ; var path:==:require ( ' path ' ) ;
var STATUS_OUT_OF_SYNC = exports . STATUS_OUT_OF_SYNC = 4 ; var STATUS_SYNC_ERROR:==:exports . STATUS_SYNC_ERROR     5 ;
var fs = require ( ' fs ' ) ; var through:==:require ( ' through ' ) ;
var mongoose = start . mongoose ; var Schema:==:mongoose . Schema ;
var forceFunction = this . options . forceFunction ; var force:==:this . force ;
var date = data . date ; var type:==:data . type ;
var def = goog . dom . getElement ( ' def-5 ' ) ; var jkl:==:goog . dom . getElement ( ' jkl-5 ' ) ;
var div = document . createElement ( ' div ' ) ; var p:==:document . createElement ( ' p ' ) ;
var gaze = require ( ' gaze ' ) ; var ecstatic:==:require ( ' ecstatic ' ) ;
var xs = _ xs ; var n:==:_ n ;
var plan = this . index . plan ( this . root , sink , options ) ; var future:==:afuture ( ) ;
var dynCall_iiii = Module [ ' dynCall_iiii ' ] = asm [ ' dynCall_iiii ' ] ; var dynCall_viii:==:Module [ ' dynCall_viii ' ]    asm [ ' dynCall_viii ' ] ;
var buffer = require ( ' buffer ' ) ; var Buffer:==:buffer . Buffer ;
var text = Array ( actionArgs . repeat + 1 ) . join ( text ) ; var linewise:==:register . linewise ;
var after = require ( ' after ' ) ; var utf8:==:require ( ' utf8 ' ) ;
var accuracy = o . accuracy ; var max:==:o . max ;
var a = tree . a = div . firstChild ; var b:==:tree . b    a . firstChild ;
var boneName = skin . boneNames [ j ] ; var bone:==:cloneGraph . findByName ( boneName ) ;
var merge    = options . merge ; var assert:==:require ( ' chai ' ) . assert ;
var createThisExpression = parseTreeFactory . createThisExpression ; var createThrowStatement:==:parseTreeFactory . createThrowStatement ;
var async = require ( ' async ' ) ; var json2csv:==:require ( ' json-2-csv ' ) . json2csv ;
var last_exception = graphiteStats . last_exception  |  |  0 ; var flush_time:==:graphiteStats . flush_time  |  |  0 ;
var a = new angular . scenario . Describe ( ) ; var b:==:new angular . scenario . Describe ( ) ;
var yellow600 = exports . yellow600 = ' # fdd835 ' ; var yellow700:==:exports . yellow700    ' # fbc02d ' ;
var grid = uiGridCtrl . grid ; var rowContainer:==:containerCtrl . rowContainer ;
var viewManagement = windows . ui . viewManagement ; var uiViewSettings:==:viewManagement . uiViewSettings ;
var layout = imports . layout ; var settings:==:imports . settings ;
var options = this . options ; var rule:==:repeat ( options . rule , options . ruleRepetition ) ;
var search = location . search ; var hash:==:location . hash ;
var axisScale = powerbi . visuals . axisScale ; var valueFormatter:==:powerbi . visuals . valueFormatter ;
var b = [ this . b0 , this . b1 , this . b2 ] ; var a:==:[ this . a0 , this . a1 , this . a2 ] ;
var leftOverlay = this . leftOverlay . clone . wtTable . holder ; var topLeftCornerOverlay:==:this . topLeftCornerOverlay & & this . topLeftCornerOverlay . clone ? this . topLeftCornerOverlay . clone . wtTable . holder : null ;
var addClass = _ tetherBase$Utils . addClass ; var removeClass:==:_ tetherBase$Utils . removeClass ;
var skin = skins [ ( Math . random ( ) * skins . length - 1 )  |  0 ] ; var attachments:==:skin . attachments [ slot ] ;
var back = document . getElementById ( ' back ' ) ; var activationScreen:==:uiManager & & uiManager . activationScreen ;
var draftOrder = dataservice . draftOrder ; var lookups:==:dataservice . lookups ;
var sourceLocation = _ . sourceLocation ; var getLineInfo:==:_ . getLineInfo ;
var min = targetAabb . min ; var max:==:targetAabb . max ;
var indigo100 = exports . indigo100 = ' # c5cae9 ' ; var indigo200:==:exports . indigo200    ' # 9fa8da ' ;
var options = this . options ; var strict:==:options . strict ;
var Page = hexo . model ( ' Page ' ) ; var Data:==:hexo . model ( ' Data ' ) ;
var d = goog . dom . getOwnerDocument ( this . getElement ( ) ) ; var w:==:goog . dom . getWindow ( d ) ;
var keys = Object . keys ( fromObj ) ; var len:==:keys . length ;
var nameify = utils . nameify ; var Observable:==:Rx . Observable ;
var c = cs [ i ] ; var target:==:c . target ;
var row = kvDocsRes . rows [ i ] ; var doc:==:row . doc ;
var languages = require ( ' prism - languages ' ) ; var highlight:==:Prism . highlight ;
var hub = this . hub ; var server:==:this . options . signalr . server ;
var locks = mockRequestWakeLock . locks ; var lock:==:locks [ 0 ] ;
var x = vehicles [ i ] . position . x ; var y:==:vehicles [ i ] . position . y ;
var gulp = require ( ' gulp ' ) ; var browser:==:require ( ' browser - sync ' ) ;
var axon    = require ( ' pm2-axon ' ) ; var domain:==:require ( ' domain ' ) ;
var b2 = $ ( ' b2 ' ) ; var p2:==:$ ( ' p2 ' ) ;
var height = options . viewport . height ; var width:==:options . viewport . width ;
var IMPORT_TYPE_CLAUSE = ' IMPORT_TYPE_CLAUSE ' ; var IMPORTED_BINDING:==:' IMPORTED_BINDING ' ;
var callbackName = data . callbackName  |  |  ' callback ' ; var callback:==:data . callback  |  |  ' jsonp ' + ( + + scriptLoader . _ count ) ;
var moment = require ( ' moment ' ) ; var semver:==:require ( ' semver ' ) ;
var createNodeIterator = document . createNodeIterator ; var getElementsByTagName:==:document . getElementsByTagName ;
var prev = jQuery ( ' # firstp ' ) [ 0 ] . previousSibling ; var p:==:jQuery ( ' # first ' ) [ 0 ] . parentNode ;
var swipePanel = $ . smConfig . swipePanel ; var swipePanelOnlyClose:==:$ . smConfig . swipePanelOnlyClose ;
var canonicalizeUrl = traceur . util . canonicalizeUrl ; var resolveUrl:==:traceur . util . resolveUrl ;
var hitPointWorld = intersectheightfield_hitpointworld ; var worldNormal:==:intersectheightfield_worldnormal ;
var slice = array . slice ; var toString:==:( ) . toString ;
var whileStatement = traceur . syntax . trees . whileStatement ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var iframe = plugin . activeSession . iframe ; var tab:==:plugin . activeDocument . tab ;
var inputs = THREE . joinNode . inputs ; var i:==:inputs . length ;
var app = evt & & evt . application ; var type:==:evt . type ;
var sensorReadingType = hasOrientationWithOptimizationGoal & & windows . devices . sensors . sensorReadingType ; var sensorOptimizationGoal:==:hasOrientationWithOptimizationGoal & & windows . devices . sensors . sensorOptimizationGoal ;
var stack = Array . isArray ( e . stack ) ? e . stack : stacktraceParser . parse ( e . stack ) ; var framesToPop:==:typeof e . framesToPop      ' number ' ? e . framesToPop : 0 ;
var intensity = data . intensity ; var type:==:data . type ;
var span = body . html ( ' ' ) . append ( ' span ' ) ; var div:==:body . insert ( ' div ' , ' span ' ) ;
var c = pp . current ; var p:==:pp . getAsCurrentPoint ( ) ;
var settings = this . settings ; var infoDialog:==:this . infoDialog    editor . children ( ' . ' + this . classPrefix + ' dialog - info ' ) ;
var crypto = _ dereq _ ( ' crypto ' ) ; var md5:==:_ dereq _ ( ' md5-jkmyers ' ) ;
var After = exports . After = proxySupportCode ( ' after ' ) ; var before:==:exports . before    proxySupportCode ( ' before ' ) ;
var rotation = options . rotation  |  |  0 ; var cap:==:( options . cap      0 ) ? 0 : options . cap  |  |  BABYLON . Mesh . NO_CAP ;
var len = iterators . length ; var destination:==:this . destination ;
var offset = $ element . offset ( ) ; var left:==:offset . left ;
var eventEmitter = events . eventEmitter ; var agent:==:smith . agent ;
var test1 = angular . module ( ' test1 ' , [ ' test2 ' ] ) . info ( version : ' 1 . 1 ' ) ; var test2:==:angular . module ( ' test2 ' , [ ] ) . info ( version : ' 1 . 2 ' ) ;
var fmt = _ fmt ; var acc:==:_ acc ;
var wordBreaker = jsCommon . wordBreaker ; var createClassAndSelector:==:jsCommon . cssConstants . createClassAndSelector ;
var bufferLen = config . bufferLen  |  |  4096 ; var numChannels:==:config . numChannels  |  |  2 ;
var slop = -options . slop ; var restitution:==:options . restitution ;
var rotation = parseFloat ( dom . rotation . value ) ; var font:==:weight + ' ' + size + ' ' + dom . font . value ;
var matrix = data . matrix ; var nodes:==:data . nodes ;
var posts = json . posts ; var pages:==:json . pages ;
var createMicrosoftUnsafeLocalFunction = require ( ' createMicrosoftUnsafeLocalFunction ' ) ; var setInnerhtml:==:require ( ' setInnerhtml ' ) ;
var deltaZ = defaultValue ( options . deltaz , 0 ) ; var deltaMode:==:defaultValue ( options . deltaMode , 0 ) ;
var southwest = projection . project ( Rectangle . southwest ( rectangle ) ) ; var northeast:==:projection . project ( Rectangle . northeast ( rectangle ) ) ;
var renderBuffer = options . renderBuffer ; var scope:==:options . scope ;
var width = options . width  |  |  512 ; var height:==:options . height ;
var saveToPhotoAlbum = ! ! options . saveToPhotoAlbum ; var popoverOptions:==:getValue ( options . popoverOptions , null ) ;
var metadata = dataset . metadata  |  |  ; var delimiter:==:metadata . delimiter  |  |  ' , ' ;
var rimraf = require ( ' rimraf ' ) ; var stream:==:require ( ' stream ' ) ;
var dispatcher = scope . dispatcher ; var findTarget:==:scope . findTarget ;
var bgColor = defaultValue ( parseColorString ( queryStringValue ( node , ' bgColor ' , namespaces . kml ) ) , color . white ) ; var textColor:==:defaultValue ( parseColorString ( queryStringValue ( node , ' textColor ' , namespaces . kml ) ) , color . black ) ;
var greenA100 = exports . greenA100 = ' # b9f6ca ' ; var greenA200:==:exports . greenA200    ' # 69f0ae ' ;
var primitives = scene . primitives ; var groundPrimitives:==:scene . groundPrimitives ;
var maximumLevel = options . maximumLevel ; var rectangle:==:defaultValue ( options . rectangle , tilingScheme . rectangle ) ;
var event = seg . event ; var url:==:event . url ;
var client = Nightscout . client ; var report_plugins:==:Nightscout . report_plugins ;
var getDomain = promise . _ getDomain ; var async:==:promise . _ async ;
var state = notification . payload . $ state  |  |  false ; var stateParams:==:notification . payload . $ stateParams  |  |  ;
var w = canvas . bounds . width ( ) ; var h:==:canvas . bounds . height ( ) ;
var cardState = simCard & & simCard . cardState ; var iccid:==:simCard & & simCard . iccInfo & & simCard . iccInfo . iccid ;
var lime700 = exports . lime700 = ' # afb42b ' ; var lime800:==:exports . lime800    ' # 9e9d24 ' ;
var level3 = db . model ( ' gh3974 ' , level3Schema ) ; var level2:==:db . model ( ' gh3974_0 ' , level2Schema ) ;
var Opa5 = sap . ui . test . Opa5 ; var Opa:==:sap . ui . test . Opa ;
var width   = ctx . canvas . width ; var height:==:ctx . canvas . height ;
var cmp = semver . cmp ; var gte:==:semver . gte ;
var iTimeout = this . _ iTimeout ; var oApp:==:this . _ oApp ;
var rec   = ( isSummary ? this . summary [ index ] : this . records [ index ] ) ; var col:==:this . columns [ col_ind ] ;
var height = _ props6 . height ; var scrollToAlignment:==:_ props6 . scrollToAlignment ;
var monthNamesShort = ( settings ? settings . monthNamesShort : null )  |  |  this . _ defaults . monthNamesShort ; var monthNames:==:( settings ? settings . monthNames : null )  |  |  this . _ defaults . monthNames ;
var state = this . state ; var props:==:this . props ;
var callExpression = _ optionsParser . _ callExpression ; var identifierExpression:==:_ optionsParser . _ identifierExpression ;
var mDependencies = mChangesMap . mDependencies ; var mDependentChangesOnMe:==:mChangesMap . mDependentChangesOnMe ;
var BUILDER_KEYS = exports . BUILDER_KEYS = ; var DEPRECATED_KEYS:==:exports . DEPRECATED_KEYS    ;
var d = m . d ; var tx:==:m . tx ;
var calendarCtrl = this . calendarCtrl ; var displayDate:==:calendarCtrl . displayDate ;
var kernel = iPython . notebook . kernel ; var msg_id:==:cell . last_msg_id ;
var a = SIMD . Float32x4 ( 16 . 0 , 9 . 0 , 4 . 0 , 1 . 0 ) ; var c:==:SIMD . Float32x4 . replaceLane ( a , [ ' 2 ' ] , 20 . 0 ) ;
var xRefParseException = sharedUtil . xRefParseException ; var assert:==:sharedUtil . assert ;
var hour = parseInt ( this . alarm . hour , 10 ) ; var minute:==:parseInt ( this . alarm . minute , 10 ) ;
var subdivisions = options . subdivisions  |  |  1  |  0 ; var minHeight:==:options . minHeight  |  |  0 . 0 ;
var gitCmd = gruntUtils . gitCmd ; var gitCmdAsync:==:gruntUtils . gitCmdAsync ;
var display = this . removed ? ' none ' : style . display ; var order:==:style . order ;
var layer = this . layers [ i ] ; var b:==:layer . glyph . bbox ;
var items = this . _ items ; var cluster:==:this . _ cluster ;
var c9 = imports . c9 ; var fs:==:imports . fs ;
var maxMessages = opts . maxMessages  |  |  infinity ; var checkpoint:==:opts . checkpoint ;
var Connection   = loadClass ( ' connection ' ) ; var connectionConfig:==:loadClass ( ' connectionConfig ' ) ;
var root = previousSizeMap . root ; var sizes:==:previousSizeMap . sizes ;
var attributes = batchTable . _ attributes ; var attribute:==:attributes [ attributeIndex ] ;
var error = require ( ' http - error ' ) ; var frontdoor:==:require ( ' frontdoor ' ) ;
var Output = _ _ webpack_require _ _ ( 4 ) . Output ; var Tokenizer:==:_ _ webpack_require _ _ ( 7 ) . Tokenizer ;
var categories = categorical . categories  |  |  [ ] ; var values:==:categorical . values ;
var i = ' start i ' ; var j:==:' start j ' ;
var clock = spherical . clock ; var cone:==:spherical . cone ;
var appearCancelled = data . appearCancelled ; var duration:==:data . duration ;
var object3D = this . el . object3D ; var clone:==:object3D . clone ( ) ;
var theme = this . context . theme ; var data:==:this . props . data ;
var l = $ ( target ) . offset ( ) . left+10 ; var t:==:$ ( target ) . offset ( ) . top + $ ( target ) . offset ( ) . height-10 ;
var lineCap = state . lineCap ; var lineDash:==:state . lineDash ;
var previousSibling = changedNode . previousSibling ; var nextSibling:==:changedNode . nextSibling ;
var x = this . attribute ( ' x ' ) . Length . toPixels ( ' x ' ) ; var y:==:this . attribute ( ' y ' ) . length . toPixels ( ' y ' ) ;
var muk = require ( ' muk ' ) ; var path:==:require ( ' path ' ) ;
var modifier = this . _ modifiers [ index ] ; var state:==:this . _ states [ index ] ;
var s = hsla [ 1 ] ; var l:==:hsla [ 2 ] ;
var fs = require ( ' fs ' ) ; var path:==:paths [ 0 ] ;
var axis = trace [ axisLetter + ' axis ' ] ; var gridlines:==:axis . _ gridlines    [ ] ;
var colors = options . colors ; var colorsPerVertex:==:defaultValue ( options . colorsPerVertex , false ) ;
var m = SIMD . Uint16x8 . fromInt32x4Bits ( simd . int32x4 ( 0x3f800000 , 0x40000000 , 0x40400000 , 0x40800000 ) ) ; var n:==:simd . int32x4 . fromUint16x8Bits ( m ) ;
var createScratchCanvas = displayCanvas . createScratchCanvas ; var metadata:==:displayMetadata . metadata ;
var defineGetter = scope . defineGetter ; var defineWrapGetter:==:scope . defineWrapGetter ;
var originalLight = light . userData . originalLight ; var distance:==:originalLight . distance ;
var graph = this . graph ; var root:==:graph . getNode ( this . root ) ;
var from = docSet . getByLongname ( ' message~headers . from ' ) ; var response:==:docSet . getByLongname ( ' message~response . code ' ) ;
var masterha = args . masterha  |  |  ' false ' ; var type:==:args . type  |  |  Constants . RESERVED . ALL ;
var url = urlTemplates [ ( x + tmsy + level ) % urlTemplates . length ] . replace ( ' z ' , level ) . replace ( ' x ' , x ) . replace ( ' y ' , tmsy ) ; var proxy:==:this . _ proxy ;
var sparseMatrix = math . type . sparseMatrix ; var denseMatrix:==:math . type . denseMatrix ;
var echarts = require ( ' echarts ' ) ; var fs:==:require ( ' fs ' ) ;
var c = Math . cos ( angle ) ; var s:==:-Math . sin ( angle ) ;
var a = cd [ 0 ] . a ; var b:==:cd [ 0 ] . b ;
var fs = require ( ' fs - extra ' ) ; var moment:==:require ( ' moment ' ) ;
var state = this . state _ ; var fill:==:state . fillStyle !    undefined ;
var n = this [ ' n ' ] ; var d:==:this [ ' d ' ] ;
var path = require ( ' path ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var bufferView = gltfRuntime . bufferViews [ sourceExt . bufferView ] ; var buffer:==:gltf1 . gltfUtils . getBufferFromBufferView ( gltfRuntime , bufferView , 0 , bufferView . byteLength , gltf1 . eComponentType . unsigned_byte ) ;
var titleText = powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . donutChartProps . legend . titleText , this . data . legendData . title ) ; var labelColor:==:powerbi . dataViewObject . getValue ( legendObjectProperties , visuals . legendProps . labelColor , this . data . legendData . labelColor ) ;
var tmxFile = options [ ' tmxFile ' ] ; var tmxString:==:options [ ' tmxString ' ] ;
var getCustomerByUser = denodeify ( customer . getCustomerByUser ) . bind ( customer ) ; var setCustomer:==:denodeify ( customer . setCustomer ) . bind ( customer ) ;
var o = this . options ; var accuracy:==:o . accuracy ;
var createParameterList = traceur . codegeneration . parseTreeFactory . createParameterList ; var createParameterReference:==:traceur . codegeneration . parseTreeFactory . createParameterReference ;
var Recording = require ( ' nativeModules ' ) . recording ; var react:==:require ( ' react ' ) ;
var commands = imports . commands ; var navigate:==:imports . navigate ;
var properties = params . properties ; var objects:==:params . objects ;
var V = SAT . Vector ; var C:==:SAT . Circle ;
var netmask = wanlink_netmask ( ) ; var gateway:==:wanlink_gateway ( ) ;
var hintColor = props . muiTheme . textField . hintColor ; var show:==:props . show ;
var msg = payload : ' foo ' , _ msgid : ' 987654321 ' ; var m:==:n . metric ( undefined , msg,'15 mb ' ) ;
var slice = Array . prototype . slice ; var toString:==:object . prototype . toString ;
var maximumHeights = wallGeometry . _ maximumHeights ; var vertexFormat:==:wallGeometry . _ vertexFormat ;
var collapsed = options . collapsed ; var predicate:==:options . predicate ;
var reactDefaultBatchingStrategy = require ( ' reactDefaultBatchingStrategy ' ) ; var reactEmptyComponent:==:require ( ' reactEmptyComponent ' ) ;
var seq = sea . sequence [ i ] ; var start:==:seq . start ;
var demo = demos [ i ] ; var canvas:==:demo . canvas ;
var App = _ appJsModelsApp [ ' default ' ] ; var appsService:==:_ appJsServicesAppsService [ ' default ' ] ;
var sopMarkerUsed = context . cod . sopMarkerUsed ; var ephMarkerUsed:==:context . cod . ephMarkerUsed ;
var audioRecvBitrate = options . audioRecvBitrate ; var videoRecvBitrate:==:options . videoRecvBitrate ;
var after = opts . after  |  |  $ . noop ; var before:==:opts . before  |  |  $ . noop ;
var sessionid = params . sessionid ; var autoCloseEntireSession:==:params . autoCloseEntireSession ;
var maximumHeight = result . maximumHeight ; var boundingSphere:==:defaultValue ( result . boundingSphere , that . _ boundingSphere ) ;
var instanceID = measurement . instanceID ; var timerType:==:measurement . timerType ;
var trace = cd [ 0 ] . trace ; var carpet:==:trace . carpetTrace    lookupCarpet ( gd , trace ) ;
var huffmanCode = _ _ webpack_require _ _ ( 281 ) . huffmanCode ; var brotliBuildHuffmanTable:==:_ _ webpack_require _ _ ( 281 ) . brotliBuildHuffmanTable ;
var handler1 = sinon . spy ( function handler1 ( ) ) ; var handler2:==:sinon . spy ( function handler2 ( ) ) ;
var units = product . units , size = units . length ; var index:==:+ ( d3 . select ( i d ) . attr ( ' data - index ' )  |  |  0 ) % size ;
var _ memset = Module [ ' _ memset ' ] = asm [ ' _ memset ' ] ; var runPostSets:==:module [ ' runPostSets ' ]    asm [ ' runPostSets ' ] ;
var aFields = window . aFields ; var createTables:==:window . createTables ;
var jn1 = helper . getNode ( ' jn1 ' ) ; var jn2:==:helper . getNode ( ' jn2 ' ) ;
var abs = Math . abs ; var atan2:==:Math . atan2 ;
var babel = require ( ' gulp - babel ' ) ; var del:==:require ( ' del ' ) ;
var brushType = this . _ brushType ; var brushMode:==:this . _ brushMode ;
var node = point . node ; var index:==:point . index ;
var x = cx + 2*delta [ 0 ] ; var y:==:cy + 2*delta [ 1 ] ;
var viewStyle = [ styles . view , this . state . viewStyle ] ; var textLayout:==:this . state . textLayout  |  |  width : ' ? ' , height : ' ? ' ;
var amberA400 = exports . amberA400 = ' # ffc400 ' ; var amberA700:==:exports . amberA700    ' # ffab00 ' ;
var startContainer = this . startContainer ; var startOffset:==:this . startOffset ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var predefinedName:==:traceur . syntax . predefinedName ;
var view = this . viewMatrix ; var projection:==:this . frustum . projectionMatrix ;
var hsl = ntc . hsl ( color ) ; var h:==:hsl [ 0 ] , s    hsl [ 1 ] , l    hsl [ 2 ] ;
var new_source = new_source . replace ( ' Help ' , ' Hello ' ) ; var new_source:==:new_source . replace ( ' 17 ' , ' 18 ' ) ;
var data = kendo . data ; var keys:==:kendo . keys ;
var ui = imports . ui ; var api:==:imports . api ;
var placeholder = el . getAttribute ( ' data - placeholder ' ) ; var disabled:==:string ( el . getAttribute ( ' data - disabled ' ) )      ' true ' ;
var g = e . dygraph ; var div:==:e . chart_div ;
var Util = sharedUtil . util ; var stream:==:coreStream . stream ;
var cache = flatCache . load ( cacheId , _ path ) ; var assign:==:require ( ' object - assign ' ) ;
var basename = require ( ' path ' ) . basename ; var etag:==:require ( ' etag ' ) ;
var error = think . error ; var wait:==:think . await ;
var blackPoint = params . blackPoint ; var fill:==:params . fill ;
var mappings = util . getArg ( sourceMap , ' mappings ' ) ; var file:==:util . getArg ( sourceMap , ' file ' ) ;
var attr = props . attr ; var one:==:props . one ;
var clearSelection = t . clearSelection ; var getHoverListener:==:t . getHoverListener ;
var retrieve = _ _ webpack_require _ _ ( 4 ) . retrieve ; var parsePercent:==:_ _ webpack_require _ _ ( 7 ) . parsePercent ;
var LRM = goog . i18n . bidi . Format . LRM ; var RLM:==:goog . i18n . bidi . Format . RLM ;
var r = ( command . debugOverlappingFrustums & ( 1 < < 0 ) ) ? ' 1 . 0 ' : ' 0 . 0 ' ; var g:==:( command . debugOverlappingFrustums & ( 1 < < 1 ) ) ? ' 1 . 0 ' : ' 0 . 0 ' ;
var parseTreeType = traceur . syntax . trees . parseTreeType ; var postfixExpression:==:traceur . syntax . trees . postfixExpression ;
var end = onEvt ( el , ' touchend ' , onReleasedItem , this ) ; var cancel:==:onEvt ( el , ' touchcancel ' , onReleasedItem , this ) ;
var short = info . xhr . responseJSON . short_message  |  |  ' Kernel error ' ; var traceback:==:info . xhr . responseJSON . traceback ;
var macroModeState = vimGlobalState . macroModeState ; var isPlaying:==:macroModeState . isPlaying ;
var config = options . config . email ; var mailer:==:nodemailer . createTransport ( config . method , config . transport ) ;
var List   = Immutable . List ; var qs:==:require ( ' qs ' ) ;
var mime = require ( ' mime - types ' ) ; var asynckit:==:require ( ' asynckit ' ) ;
var style = o . style ; var props:==:this . getConcatenatedDisplayProps ( this . _ props ) , mtx    props . matrix ;
var def = $ ( ' def-1 ' ) ; var jkl:==:$ ( ' jkl-1 ' ) ;
var frame = systemDoc . querySelector ( ' iframe [ src= ' ' + url + ' ' ' ) ; var video:==:frame . contentWindow . document . querySelector ( ' video ' ) ;
var e = evt . originalEvent ; var file:==:e . dataTransfer . files [ 0 ] ;
var event = options . event ; var underlyingNodes:==:options . underlyingNodes ;
var token = opts . token ; var islet:==:opts . islet ;
var button = buttons [ i ] ; var title:==:button . title ;
var borderSize = current . theme . borderSize ; var topMargin:==:current . theme . topMargin ;
var callstack = imports . callstack ; var ui:==:imports . ui ;
var bridge = imports . bridge ; var client:==:imports [ ' bridge . client ' ] ;
var isStopIncluded = defaultValue ( options . isStopIncluded , true ) ; var data:==:options . data ;
var context = args . context ; var frame:==:args . frame ;
var computedJointMatrices = node . computedJointMatrices ; var joints:==:node . joints ;
var when = require ( ' when ' ) ; var util:==:require ( ' util ' ) ;
var normals = attr . normals ; var tangents:==:attr . tangents ;
var organizationId = $ ( ' # organizationId ' ) . val ( ) ; var jobId:==:$ ( ' # jobId ' ) . val ( ) ;
var template = document . getElementsByTagName ( ' template ' ) [ 0 ] . innerhtml ; var section:==:document . createElement ( ' section ' ) ;
var sections = this . sections [ pseudoId ] ; var index:==:sections . indexOf ( section ) ;
var setEndOfMicrotask = scope . setEndOfMicrotask ; var wrapIfNeeded:==:scope . wrapIfNeeded ;
var div = document . createElement ( ' div ' ) ; var labelStyle:==:labelStyles [ prec_axis     ' y2 ' ? ' y2 ' : axis ] ;
var element = this . element = scrollViewOptions . el ; var $ element:==:this . $ element    jqLite ( element ) ;
var x = pos . x ; var y:==:pos . y ;
var consequent = node . consequent ; var alternate:==:node . alternate ;
var arrowFunctionExpression = traceur . syntax . trees . arrowFunctionExpression ; var atNameExpression:==:traceur . syntax . trees . atNameExpression ;
var beforeShowDay = this . _ get ( inst , ' beforeShowDay ' ) ; var showOtherMonths:==:this . _ get ( inst , ' showOtherMonths ' ) ;
var sideOrientation = options . sideOrientation ; var instance:==:options . instance ;
var crypto = require ( ' crypto ' ) ; var zlib:==:require ( ' zlib ' ) ;
var sources = fs . sources . slice ( 0 ) ; var length:==:sources . length ;
var mode = settings . mode ; var config:==:settings . config ;
var len = rules . length ; var pos:==:state . pos ;
var htmlElement = scope . wrappers . htmlElement ; var registerWrapper:==:scope . registerWrapper ;
var browserify = require ( ' browserify ' ) ; var b:==:browserify ( ) ;
var actual = err . actual ; var expected:==:err . expected ;
var EVALUATE_JAVASCRIPT_CHECK_TIMEOUT = process . env . EVALUATE_JAVASCRIPT_CHECK_TIMEOUT  |  |  300 ; var NUM_ITERATIONS:==:process . env . NUM_ITERATIONS  |  |  40 ;
var reactdomComponentTree = require ( ' reactdomComponentTree ' ) ; var reactdomEmptyComponent:==:require ( ' reactdomEmptyComponent ' ) ;
var path = this . path . eval ( env ) ; var rootpath:==:this . currentFileInfo & & this . currentFileInfo . rootpath ;
var res = ctx . res ; var req:==:ctx . req ;
var rowHeight = tree . provider . rowHeight ; var renderer:==:tree . renderer ;
var imageryProviderViewModels = defaultValue ( options . imageryProviderViewModels , createDefaultImageryProviderViewModels ( ) ) ; var terrainProviderViewModels:==:defaultValue ( options . terrainProviderViewModels , createDefaultTerrainProviderViewModels ( ) ) ;
var next = tangentPlane . projectPointOntoPlane ( cartesian3 . add ( position , forward , nextScratch ) , nextScratch ) ; var prev:==:tangentPlane . projectPointOntoPlane ( cartesian3 . add ( position , backward , prevScratch ) , prevScratch ) ;
var selectEventPlugin = require ( ' selectEventPlugin ' ) ; var simpleEventPlugin:==:require ( ' simpleEventPlugin ' ) ;
var path = require ( ' path ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var assert = require ( ' assert - plus ' ) ; var restify:==:require ( ' restify ' ) ;
var inp = + ( input  |  |  0 ) ; var prev:==:+ ( previousOutput  |  |  0 ) ;
var strength = options . strength ; var anchor:==:options . anchor  |  |  source . position ;
var vfs = imports . vfs ; var Plugin:==:imports . Plugin ;
var a = board . millis ( ) ; var b:==:board . millis ( ) ;
var toggle = document . getElementById ( ' toggle ' ) ; var progress2:==:document . getElementById ( ' progress2 ' ) ;
var $ wrap = self . $ wrap ; var logoNotice:==:self . logoNotice ;
var text = $ ( hs [ i ] ) . text ( ) ; var tagName:==:hs [ i ] . tagName . toLowerCase ( ) ;
var value = event . detail . value ; var filter:==:this . _ filter ;
var debug = imports . debugger ; var immediate:==:imports . immediate ;
var commands = imports . commands ; var tabManager:==:imports . tabManager ;
var TOTAL_STACK = Module [ ' TOTAL_STACK ' ]  |  |  5242880 ; var TOTAL_MEMORY:==:Module [ ' TOTAL_MEMORY ' ]  |  |  16777216 ;
var scrollTop = _ state . scrollTop ; var scrollWidth:==:_ state . scrollWidth ;
var maxIterations = retrieve ( options . maxIterations , 2 ) ; var minChar:==:retrieve ( options . minChar , 0 ) ;
var radii = defaultValue ( options . radii , defaultRadii ) ; var stackPartitions:==:math . round ( defaultValue ( options . stackPartitions , 64 ) ) ;
var uniformMap = options . uniformMap ; var modelMatrix:==:options . modelMatrix ;
var attr = DS . attr ; var hasMany:==:ds . hasMany ;
var cyan600 = exports . cyan600 = ' # 00acc1 ' ; var cyan700:==:exports . cyan700    ' # 0097a7 ' ;
var contained1_2 = document . getElementById ( ' contained1_2 ' ) ; var contained1_2_1:==:document . getElementById ( ' contained1_2_1 ' ) ;
var Cursor = firepad . Cursor ; var undoManager:==:firepad . undoManager ;
var condition = this . transformAny ( tree . condition ) ; var ifClause:==:this . transformToBlockOrStatement ( tree . ifClause ) ;
var alive = child . getChildNode ( ' alive ' ) ; var aliases:==:child . getChildNode ( ' aliases ' ) ;
var shareSettingsView = _ appJsViewsShareSettingsView [ ' default ' ] ; var listView:==:_ appJsViewsListView [ ' default ' ] ;
var d1 = _ addDiv ( ' d1 ' ) , d2 = _ addDiv ( ' d2 ' ) ; var returnedParams:==:null , returnedParams2    null ;
var max = parseInt ( $ range . attr ( ' max ' ) , 10 ) ; var min:==:parseInt ( $ range . attr ( ' min ' ) , 10 ) ;
var Lexer = coreParser . lexer ; var parser:==:coreParser . parser ;
var models = _ _ alloyId45 . models ; var len:==:models . length ;
var List = reporters . List ; var Base:==:reporters . Base ;
var uiSourceCode = this . _ uiSourceCodeForScriptId . get ( script . scriptId ) ; var lineNumber:==:debuggerModelLocation . lineNumber - ( script . isInlineScriptWithSourceurl ( ) ? script . lineOffset : 0 ) ;
var search = searchInput . value . toLowerCase ( ) ; var re:==:( regexInput . checked ) ? new regExp ( search ) : null ;
var methods = params . methods ; var attributes:==:params . attributes ;
var ext = imports . ext ; var util:==:imports . util ;
var dimensions = document . querySelector ( ' # dimensions ' ) ; var video:==:document . querySelector ( ' video ' ) ;
var oldValue = context . oldValue ; var newValue:==:context . newValue ;
var pid = result . rows [ 0 ] . pg_backend_pid ; var psql:==:' psql ' ;
var spawn = require ( ' child_process ' ) . spawn ; var concat:==:require ( ' concat - stream ' ) ;
var innerWidth = options [ ' innerWidth ' ] ! = null ? options [ ' innerWidth ' ] : 200 ; var innerHeight:==:options [ ' innerHeight ' ] !   null ? options [ ' innerHeight ' ] : 200 ;
var glyphs = label . _ glyphs ; var text:==:label . _ text ;
var dimension = opt_dimension ! = = undefined ? opt_dimension : 2 ; var output:==:opt_output !    undefined ? opt_output : new Array ( length ) ;
var registerWrapper = scope . registerWrapper ; var defineWrapGetter:==:scope . defineWrapGetter ;
var getBounds = _ tetherBase$Utils . getBounds ; var getOffsetParent:==:_ tetherBase$Utils . getOffsetParent ;
var ext = imports . ext ; var vfs:==:imports . vfs ;
var defer = $ q . defer ( ) ; var i d:==:pfxId ( data . i d ) ;
var remainedWidth = columnsOnAxis . remainedWidth ; var autoWidthCount:==:columnsOnAxis . autoWidthCount ;
var cluster = d3 . selectAll ( ' . cluster ' ) ; var te:==:cluster . append ( ' text ' ) ;
var p   = this . _ props ; var Shape:==:shapesMap . getShape ( this . _ props . shape ) ;
var touch = require ( ' touch ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var createBooleanLiteral = parseTreeFactory . createBooleanLiteral ; var createCallExpression:==:parseTreeFactory . createCallExpression ;
var s = this . _ createHostViewInContainerScope ( ) ; var protoView:==:view_ref_1 . internalProtoView ( protoViewRef ) ;
var dispatchListener = event . _ dispatchListeners ; var dispatchInstance:==:event . _ dispatchInstances ;
var styleSheet = require ( ' styleSheet ' ) ; var renderApplication:==:require ( ' renderApplication ' ) ;
var transceiver = self . transceivers [ sdpmLineIndex ] ; var iceGatherer:==:transceiver . iceGatherer ;
var observableObject = kendo . data . observableObject ; var model:==:kendo . data . model . define ( i d : ' foo ' ) ;
var winston = require ( ' winston ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var noteOrNotebookId = $ ( this ) . attr ( ' noteOrNotebookId ' ) ; var toUserId:==:$ ( this ) . attr ( ' toUserId ' ) ;
var startContainer = rng . startContainer , endContainer = rng . endContainer ; var startOffset:==:rng . startOffset , endOffset    rng . endOffset , root    self . dom . getRoot ( ) ;
var open = options . interpolation . open ; var close:==:options . interpolation . close ;
var dataLabelColor = powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . dataLabelColor , solid : color : defaultColor ) ; var dataLabelText:==:powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . dataLabelText , visuals . labelText . value ) ;
var f8InfoView = require ( ' f8InfoView ' ) ; var f8MapView:==:require ( ' f8MapView ' ) ;
var def = goog . dom . getElement ( ' def-2 ' ) ; var jkl:==:goog . dom . getElement ( ' jkl-2 ' ) ;
var purple700 = exports . purple700 = ' # 7b1fa2 ' ; var purple800:==:exports . purple800    ' # 6a1b9a ' ;
var axis = d3 . svg . axis ( ) ; var scale:==:d3 . scale . linear ( ) ;
var nativeMethodsMixin = require ( ' nativeMethodsMixin ' ) ; var react:==:require ( ' react ' ) ;
var loc = window . top . location ; var origin:==:loc . origin ;
var scm = imports . scm ; var layout:==:imports . layout ;
var value = event . detail . value ; var groupedItems:==:this . _ groupedItems ;
var newLen = unpacked . newLen ; var ops:==:unpacked . ops ;
var t = cd [ 0 ] . t ; var xa:==:pointData . xa ;
var webChannel = goog . net . webChannel ; var baseTestChannel:==:goog . labs . net . webChannel . baseTestChannel ;
var pageState = $ ( opts . pageStateCell , slider ) ; var playState:==:$ ( opts . playStateCell , slider ) ;
var s = arguments [ 0 ] ; var a:==:arguments ;
var visual = thisOption . visual ; var categoryMap:==:thisOption . categoryMap    ;
var topo = this . topos [ wrapper ] ; var d:==:topo . data [ ' conn ' ] [ i d ] ;
var b = tree . b = a . firstChild ; var c:==:tree . c    b . firstChild ;
var shadowVolume = options . shadowVolume ; var vertexFormat:==:options . vertexFormat ;
var cpsTransformer = traceur . codegeneration . generator . cpsTransformer ; var endState:==:traceur . codegeneration . generator . endState ;
var createNumberLiteral = parseTreeFactory . createNumberLiteral ; var createParameterList:==:parseTreeFactory . createParameterList ;
var c = -a . enc _ . dqm _ [ s ] . quant _ ; var e:==:a . enc _ . dqm _ [ s ] . quant _ ;
var createProgram = parseTreeFactory . createProgram ; var createPropertyNameAssignment:==:parseTreeFactory . createPropertyNameAssignment ;
var h = $ cont . css ( ' overflow','hidden ' ) . height ( ) ; var w:==:$ cont . width ( ) ;
var dataViewMatrixUtils = powerbi . data . dataViewMatrixUtils ; var sqExprBuilder:==:powerbi . data . sqExprBuilder ;
var renderDayEvents = t . renderDayEvents ; var getMinTime:==:t . getMinTime ;
var LENGTH = 28 ; var DONE:==:29 ;
var children = this . _ children ; var length:==:children . length ;
var left = elemOffset . left ; var top:==:elemOffset . top ;
var sx = step . sx ; var sy:==:step . sy ;
var endDate = instance . get ( ' endDate ' ) ; var startDate:==:instance . get ( ' startDate ' ) ;
var richTextToolbar = firepad . richTextToolbar ; var aceAdapter:==:firepad . aceAdapter ;
var x = Math . pow ( 1 - t , 2 ) * this . fromPoint . x + ( 2 * t * ( 1 - t ) ) * viaNode . x + math . pow ( t , 2 ) * this . toPoint . x ; var y:==:math . pow ( 1 - t , 2 ) * this . fromPoint . y + ( 2 * t * ( 1 - t ) ) * viaNode . y + math . pow ( t , 2 ) * this . toPoint . y ;
var firstTangent = options . firstTangent ; var lastTangent:==:options . lastTangent ;
var filename = getFileName ( item . filename ) ; var div:==:document . createElement ( ' div ' ) ;
var index = this . index ? this . index . toString ( options ) : '' ; var value:==:this . value . toString ( options ) ;
var y = this . normal . y ; var z:==:this . normal . z ;
var breakpoints = this . _ breakpointsForPrimaryuiSourceCode . get ( uiSourceCode )  |  |  [ ] ; var sourceFileId:==:this . _ sourceFileId ( uiSourceCode ) ;
var zDepth = _ props . zDepth ; var children:==:_ props . children ;
var injector = self . element . injector ( ) ; var compile:==:injector ? injector . get ( ' $ compile ' ) : $ defaultCompile ;
var gulp = require ( ' gulp ' ) ; var jsdoc:==:require ( ' gulp - jsdoc3 ' ) ;
var imageStylePropTypes = require ( ' imageStylePropTypes ' ) ; var nativeMethodsMixin:==:require ( ' nativeMethodsMixin ' ) ;
var isHostMethod = util . isHostMethod ; var domRange:==:api . domRange ;
var getDocument = dom . getDocument ; var comparePoints:==:dom . comparePoints ;
var closure = require ( ' closure - util ' ) ; var nomnom:==:require ( ' nomnom ' ) ;
var width = areaCameraUnits . width ; var height:==:areaCameraUnits . height ;
var apf = imports . apf ; var Menu:==:imports . Menu ;
var attributes = geometry . attributes ; var index:==:attributes [ ' index ' ] ;
var y = this . orientation . y ; var z:==:this . orientation . z ;
var from = changes . from ; var text:==:changes . text ;
var xml2js = require ( ' xml2js ' ) ; var rewire:==:require ( ' rewire ' ) ;
var outer = document . getElementById ( setup . outer ) ; var template:==:setup . template ;
var title = template . find ( ' . title ' ) . value ; var description:==:template . find ( ' . description ' ) . value ;
var green300 = exports . green300 = ' # 81c784 ' ; var green400:==:exports . green400    ' # 66bb6a ' ;
var offsetNF = this . morph . _ offsetNF ; var offsetTF:==:this . morph . _ offsetTF ;
var nodesChanged = _ determineIfDifferent2 . nodesChanged ; var edgesChanged:==:_ determineIfDifferent2 . edgesChanged ;
var supportConstantFonts = exports . supportConstantFonts = ' arial | century | comic | courier | garamond | georgia | helvetica | impact | lucida | symbol | system | tahoma | times | trebuchet | utopia | verdana | webdings | sans - serif | serif | monospace ' ; var numRe:==:exports . numRe    ' \\- ? ( ? : ( ? : [ 0 - 9 ] + )  |  ( ? : [ 0 - 9 ] * \\ . [ 0 - 9 ] + ) ) ' ;
var signx = t . signx ; var signy:==:t . signy ;
var foreach = require ( ' gulp - foreach ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var debug = require ( ' debug ' ) ( ' gaia - profile - builder ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var node = event . tree . node ; var ownerTree:==:instance . get ( ' ownerTree ' ) ;
var h2 = listItem . querySelector ( ' h2 ' ) ; var a:==:listItem . querySelector ( ' a ' ) ;
var scrollTop = element . scrollTop ; var scrollLeft:==:element . scrollLeft ;
var Plugin = imports . Plugin ; var Tab:==:imports . Tab ;
var size_y = widget_grid_data . size_y ; var r:==:min_row - 1 ;
var srcAlpha = ( ' srcAlpha ' in value ? value . srcAlpha : value . src ) ; var dstrgb:==:( ' dstrgb ' in value ? value . dstrgb : value . dst ) ;
var i d = opts . i d ; var env:==:opts . env  |  |  ;
var options = that . options ; var optionLabel:==:options . optionLabel ;
var gl = context . _ gl ; var attributes:==:options . attributes ;
var styleSheet = require ( ' styleSheet ' ) ; var connect:==:require ( ' react - redux ' ) ;
var util = require ( ' hexo - util ' ) ; var slugize:==:util . slugize ;
var pos = this . position ; var bounds:==:this . game . physics . arcade . bounds ;
var store = instance . stores [ storeName ] ; var config:==:store . storeModel . config ;
var lines = c . lines ; var end:==:c . end ;
var nameGap = this . get ( ' nameGap ' ) ; var triggerEvent:==:this . get ( ' triggerEvent ' ) ;
var ADD_TODO_OK = exports . ADD_TODO_OK = ' ADD_TODO_OK ' ; var REMOVE_TODO_OK:==:exports . REMOVE_TODO_OK    ' REMOVE_TODO_OK ' ;
var legendProps = powerbi . visuals . legendProps ; var legendPosition:==:powerbi . visuals . legendPosition ;
var end = new Date ( this . $ endDate . datepicker ( ' getDate ' ) ) ; var start:==:new date ( this . $ startDate . datepicker ( ' getDate ' ) ) ;
var min = d3 . min ( data . map ( function ( d ) return d [ 0 ] . x ) ) ; var max:==:d3 . max ( data . map ( function ( d ) return d [ d . length - 1 ] . x ) ) ;
var allowMime = getMimeRegex ( this . settings . allowMime ) ; var denyMime:==:getMimeRegex ( this . settings . denyMime ) ;
var ready = require ( ' ready ' ) ; var eventproxy:==:require ( ' eventproxy ' ) ;
var nconf = require ( ' nconf ' ) ; var express:==:require ( ' express ' ) ;
var isInteger = number . isInteger ; var isString:==:string . isString ;
var background = app . element . style . backgroundImage ; var backgroundSize:==:app . element . style . backgroundSize ;
var v = p . value ; var own:==:p . isOwn ? ' own ' : ' inherited ' ;
var listeningTo = this . _ listeningTo  |  |  ( this . _ listeningTo = ) ; var listening:==:_ listening    listeningTo [ i d ] ;
var events   = require ( ' events ' ) ; var passThrough:==:require ( ' stream ' ) . passThrough ;
var arrowFunctionTransformer = traceur . codegeneration . arrowFunctionTransformer ; var atNameMemberTransformer:==:traceur . codegeneration . atNameMemberTransformer ;
var onBeforeHide = spyOn ( myTooltip . $ options , ' onBeforeHide ' ) ; var onHide:==:spyOn ( myTooltip . $ options , ' onHide ' ) ;
var d1 = _ addDraggableDiv ( _ jsPlumb , ' d1 ' , null , null,50 , 50 , 100 , 100 ) ; var d2:==:_ addDraggableDiv ( _ jsPlumb , ' d2 ' , null , null,250 , 250 , 100 , 100 ) ;
var year = getOption ( options , ' year ' , ' string ' , [ ' 2-digit ' , ' numeric ' ] , undefined ) ; var month:==:getOption ( options , ' month ' , ' string ' , [ ' 2-digit ' , ' numeric ' , ' narrow ' , ' short ' , ' long ' ] , undefined ) ;
var newParent = this . getNodeData ( change . newParent ) ; var parent:==:this . getNodeData ( node . parent ) ;
var bacon = new Food ( name : ' bacon ' ) ; var eggs:==:new Food ( name : ' eggs ' ) ;
var Program = traceur . syntax . trees . Program ; var parseTree:==:traceur . syntax . trees . parseTree ;
var legendMap = options . legendMap ; var stage:==:this . stage ;
var styleLayer = styleLayers [ i d ] ; var paint:==:styleLayer . paint ;
var join = require ( ' path ' ) . join ; var dirname:==:require ( ' path ' ) . dirname ;
var log = Math . log ; var LN10:==:Math . LN10 ;
var min = Math . min ( minSize , 0 ) ; var max:==:math . max ( maxSize , 0 ) ;
var parallelClosureTestSuite = goog . require ( ' goog . testing . parallelClosureTestSuite ' ) ; var testSuite:==:goog . require ( ' goog . testing . testSuite ' ) ;
var oLang = oSettings . oLanguage ; var iInitDisplayStart:==:oSettings . iInitDisplayStart ;
var SETS = unicodeData . sets ; var other:==:unicodeData . characterIndices . other ;
var r = parseInt ( hex . substring ( 1 , 3 ) , 16 ) ; var g:==:parseInt ( hex . substring ( 3 , 5 ) , 16 ) ;
var top = parsePercent ( positionInfo . top , containerHeight ) ; var right:==:parsePercent ( positionInfo . right , containerWidth ) ;
var option = target . dataset . option ; var keyRange:==:target . dataset . keyRange ;
var Text = registerObject ( document . createTextNode ( '' ) ) ; var comment:==:registerObject ( document . createComment ( '' ) ) ;
var fixedDataTableCellGroup = require ( ' fixedDataTableCellGroup . react ' ) ; var cx:==:require ( ' cx ' ) ;
var rowStopIndex = _ ref8 . rowStopIndex ; var onRowsRendered:==:this . props . onRowsRendered ;
var createArgumentList = parseTreeFactory . createArgumentList ; var createAssignmentExpression:==:parseTreeFactory . createAssignmentExpression ;
var createReturnStatement = parseTreeFactory . createReturnStatement ; var createStatementList:==:parseTreeFactory . createStatementList ;
var config = _ _ dependency1 _ _ . config ; var now:==:_ _ dependency2 _ _ . now ;
var app = this . apps [ manifestURL ] ; var manifest:==:app . manifest  |  |  app . updateManifest ;
var RESOURCE_DOWNLOAD_TIMEOUT = process . env . RESOURCE_DOWNLOAD_TIMEOUT  |  |  10 * 1000 ; var WAIT_AFTER_LAST_REQUEST:==:process . env . WAIT_AFTER_LAST_REQUEST  |  |  500 ;
var nodeNativeType = this . _ nodeNativeType ; var dominatedNodes:==:this . _ dominatedNodes ;
var gapSize = options . gapSize ; var dashNb:==:options . dashNb ;
var getSnapHeight = t . getSnapHeight ; var getSnapMinutes:==:t . getSnapMinutes ;
var currentState = this . _ currentState ; var targetState:==:this . _ targetState ;
var backdrop = new Animation ( ele . querySelector ( ' backdrop ' ) ) ; var wrapper:==:new animation ( ele . querySelector ( ' action - sheet - wrapper ' ) ) ;
var host = a . host ; var protocol:==:a . protocol ;
var w = this . _ width-1 ; var h:==:this . _ height-1 ;
var highlighter = config . highlighter  |  |  codeMirrorHighlighter ; var showdown:==:config . showdown  |  |  new showdown . converter ( ) ;
var xmax = options . xmax  |  |  1 . 0 ; var zmax:==:options . zmax  |  |  1 . 0 ;
var Transaction = require ( ' Transaction ' ) ; var reactInstrumentation:==:require ( ' reactInstrumentation ' ) ;
var path    = require ( ' path ' ) ; var browserify:==:require ( ' browserify ' ) ;
var yaml = require ( ' js - yaml ' ) ; var marked:==:require ( ' marked ' ) ;
var containerId = renderContainerCtrl . containerId ; var grid:==:uiGridCtrl . grid ;
var origin = fileSystem . origin ; var type:==:fileSystem . type ;
var y = bn . fromBits ( h . toBits ( vectors [ i ] . qy ) ) ; var k:==:bn . fromBits ( h . toBits ( vectors [ i ] . k ) ) ;
var rotation = node . rotation  |  |  [ 0 , 0 , 0 , 1 ] ; var scale:==:node . scale  |  |  [ 1 , 1 , 1 ] ;
var u = ( ( Math . abs ( uv . x ) * heightMapWidth ) % heightMapWidth )  |  0 ; var v:==:( ( math . abs ( uv . y ) * heightMapHeight ) % heightMapHeight )  |  0 ;
var start = tmp . start ; var end:==:tmp . end ;
var shadowMapCamera = shadowMap . _ shadowMapCamera ; var sceneCamera:==:shadowMap . _ sceneCamera ;
var title = ' sdcard - detected - title ' ; var body:==:' sdcard - unknown - size - then - tap - to - format - body ' ;
var shareController = _ appJsControllersShareController [ ' default ' ] ; var appView:==:_ appJsViewsAppView [ ' default ' ] ;
var JSX_ELEMENT_NAME = ' JSX_ELEMENT_NAME ' ; var JSX_PLACEHOLDER:==:' JSX_PLACEHOLDER ' ;
var clone   = _ _ webpack_require _ _ ( 5 ) . clone ; var isInteger:==:_ _ webpack_require _ _ ( 2 ) . isInteger ;
var property = util . property ; var memoizedProperty:==:util . memoizedProperty ;
var height = jQuery ( this . splitterBar ) . height ( ) ; var width:==:jQuery ( this . splitterBar ) . width ( ) ;
var inner = ' EvalDerivedClass_inner ' ; var outer:==:' EvalDerivedClass_outer ' ;
var yellowA200 = exports . yellowA200 = ' # ffff00 ' ; var yellowA400:==:exports . yellowA400    ' # ffea00 ' ;
var coth = math . coth ; var complex:==:math . complex ;
var name = fileInfo . name ; var version:==:fileInfo . version ;
var useNative = scope . useNative ; var initializeModules:==:scope . initializeModules ;
var forceRefreshImages = options . forceRefreshImages ; var heightData:==:options . heightData ;
var gulp = require ( ' gulp ' ) ; var bundler:==:require ( ' aurelia - bundler ' ) ;
var moveSelectionForward = require ( ' moveSelectionForward ' ) ; var removeTextWithStrategy:==:require ( ' removeTextWithStrategy ' ) ;
var Selection = scope . wrappers . Selection ; var selectorsInterface:==:scope . selectorsInterface ;
var httpSignatureError = utils . httpSignatureError ; var validateAlgorithm:==:utils . validateAlgorithm ;
var call = t . callExpression ( ref , args ) ; var ret:==:this . scope . generateUidIdentifier ( ' ret ' ) ;
var axe1 = obj . axe1  |  |  [ 1 , 0 , 0 ] ; var axe2:==:obj . axe2  |  |  [ 1 , 0 , 0 ] ;
var navOptions = options . navOptions [ courseIdForOptions ] ; var admOptions:==:options . admOptions [ courseIdForOptions ] ;
var samplingMode = samplingModes [ i ]  |  |  defaultSamplingMode ; var type:==:types [ i ]  |  |  defaultType ;
var scrollTop = window . pageyOffset  |  |  viewportElement . scrollTop ; var scrollLeft:==:window . pagexOffset  |  |  viewportElement . scrollLeft ;
var models = _ _ alloyId12 . models ; var len:==:models . length ;
var mini = docSet . getByLongname ( ' matryoshka . mini ' ) [ 0 ] ; var mega:==:docSet . getByLongname ( ' matryoshka . mega ' ) [ 0 ] ;
var actions = options . actions ; var pinned:==:options . pinned ;
var vertices = this . vertices , worldVertices = this . worldVertices ; var bones:==:this . bones ;
var frameState = scene . frameState ; var actualPosition:==:sceneTransforms . computeActualWgs84Position ( frameState , position , actualPositionScratch ) ;
var r = rgb [ 0 ] , g = rgb [ 1 ] , b = rgb [ 2 ] ; var hsl:==:ntc . hsl ( color ) ;
var cameraRotationHelper = sdkSample . cameraRotationHelper ; var capture:==:windows . media . capture ;
var decodeInlineStyleRanges = require ( ' decodeInlineStyleRanges ' ) ; var generateRandomKey:==:require ( ' generateRandomKey ' ) ;
var i = _ i ; var acc:==:_ acc ;
var tileProvider = primitive . _ tileProvider ; var tilesToRender:==:primitive . _ tilesToRender ;
var d16 = _ addDiv ( ' d16 ' ) , d17 = _ addDiv ( ' d17 ' ) ; var conn:==:_ jsPlumb . connect ( source : d16 , target : d17 , endpoint : ' rectangle ' ) ;
var options = test . options ; var uri:==:test . uri ;
var scrollTop = this . scrollTopStart - yDiff ; var scrollLeft:==:this . scrollLeftStart - xDiff ;
var TRUE3 = C . TRUE3 = 0x23 ; var FALSE1:==:C . FALSE1    0x31 ;
var childNodeInterface = scope . childNodeInterface ; var node:==:scope . wrappers . node ;
var type = event . type ; var fn:==:event . fn  |  |  emptyFn ;
var width = dimensions . width * ratio , height = dimensions . height * ratio ; var font:==:template . font ? template . font : ' sans - serif ' ;
var coefficentsSign = this . coefficentsSign ; var neighborsSignificance:==:this . neighborsSignificance ;
var currentConfig = settings . build . currentConfig ; var buildConfiguration:==:settings . buildConfigurations [ currentConfig ] ;
var entities = dataSource . entities . values ; var polygon:==:entities [ 0 ] . polygon ;
var properties = action . properties ; var propertiesResults:==:action . propertiesResults ;
var isString = leafletHelpers . isString ; var addMarkerWatcher:==:leafletMarkersHelpers . addMarkerWatcher ;
var list = new fastList ( listContainer , source , scheduler ) ; var dialog:==:document . querySelector ( ' gaia - dialog - alert ' ) ;
var w = win . _ $ element . offsetWidth ; var h:==:win . _ $ element . offsetHeight ;
var eggs = _ getFormattedItemReference ( ' items . eggs ' , _ . keys ( content . eggs ) , ' numeric quantity ' ) ; var hatchingPotions:==:_ getFormattedItemReference ( ' items . hatchingPotions ' , _ . keys ( content . hatchingPotions ) , ' numeric quantity ' ) ;
var casper = require ( ' casper ' ) . create ( ) ; var utils:==:require ( ' utils ' ) ;
var Buffer = require ( ' buffer ' ) . Buffer ; var os:==:require ( ' os ' ) ;
var showPrevBtn = showControl & & controlModel . get ( ' showPrevBtn ' , true ) ; var showNextBtn:==:showControl & & controlModel . get ( ' showNextBtn ' , true ) ;
var current = data . current ; var total:==:data . total ;
var x = xy [ 0 ] ; var y:==:xy [ 1 ] ;
var y = this . attribute ( ' y ' ) . toPixels ( ' y ' ) ; var fontSize:==:this . parent . style ( ' font - size ' ) . numValueOrDefault ( svg . font . parse ( svg . ctx . font ) . fontSize ) ;
var chalk = require ( ' chalk ' ) ; var webpack:==:require ( ' webpack ' ) ;
var favicon = require ( ' serve - favicon ' ) ; var path:==:require ( ' path ' ) ;
var st = this . styles , allText = this . text , marked = this . markedSpans ; \n\var len:==:allText . length ; \n\
var domain = require ( ' domain ' ) ; var d:==:domain . create ( ) ;
var margin = options . margin ; var width:==:options . viewport . width - ( margin . left + margin . right ) ;
var properties = metadata . properties = metadata . properties  |  |  ; var property:==:properties [ propertyName ]    properties [ propertyName ]  |  |  ;
var componentType = accessor . componentType ; var type:==:accessor . type ;
var center = options . center ; var ellipsoid:==:defaultValue ( options . ellipsoid , ellipsoid . wgs84 ) ;
var simManager = window . parent . simManager ; var common:==:window . parent . common ;
var jsonminify = require ( ' jsonminify ' ) ; var log4js:==:require ( ' log4js ' ) ;
var valueDim = opt . valueDim ; var symbolBoundingData:==:itemModel . get ( ' symbolBoundingData ' ) ;
var scrollTop = this . scrollTop ; var scrollHeight:==:this . scrollHeight ;
var max = cfg . max  |  |  1 ; var from:==:cfg . from  |  |  [ ] ;
var DOM = domUtils . dom ; var explode:==:tools . explode , each    tools . each , extend    tools . extend ;
var silhouettePrograms = model . _ rendererResources . silhouettePrograms ; var scene3dOnly:==:frameState . scene3dOnly ;
var auth = imports . auth ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var toneMapping = renderer . toneMapping ; var toneMappingExposure:==:renderer . toneMappingExposure ;
var disableHeight = _ props . disableHeight ; var disableWidth:==:_ props . disableWidth ;
var strokeColor = c . state . strokeColor ; var fillColor:==:c . state . fillColor ;
var tinycolor = require ( ' tinycolor2 ' ) ; var triangulate:==:require ( ' delaunay - triangulate ' ) ;
var r = Math . round ; var abs:==:Math . abs ;
var Set = require ( ' Set ' ) ; var springConfig:==:require ( ' springConfig ' ) ;
var left = this . transformAny ( item . left ) ; var iterator:==:this . transformAny ( item . iterator ) ;
var http = require ( ' http ' ) ; var assert:==:require ( ' assert ' ) ;
var costControl = window . parent . costControl ; var simManager:==:window . parent . simManager ;
var fs = require ( ' graceful - fs ' ) ; var del:==:require ( ' del ' ) . sync ;
var caption = options . caption ; var index:==:options . index  |  |  100 ;
var y = Math . max ( readState . y  |  |  0 , 0 ) ; var width:==:readState . width  |  |  gl . drawingBufferWidth ;
var path = d3 . geo . path ( ) . projection ( this . projection ) ; var defs:==:mapSvg . append ( ' defs ' ) ;
var body = ( mathJax . message . quirks ? document . body : document . documentElement ) ; var frame:==:mathJax . message . frame ;
var removed = removedObjects . values ; var changedObjects:==:this . _ changedObjects ;
var n = new parenthesisNode ( a ) ; var clone:==:n . clone ( ) ;
var compression = require ( ' compression ' ) ; var url:==:require ( ' url ' ) ;
var drawPoints = g . getBooleanOption ( ' drawPoints ' , setName ) ; var pointSize:==:g . getNumericOption ( ' pointSize ' , setName ) ;
var docId = data . docId ; var postProcessor:==:data . postProcessor ;
var storage = this . storage ; var expendedEncodedSounds:==:queryData . expendedEncodedSounds ;
var extrude = queryBooleanValue ( trackNode , ' extrude ' , namespaces . kml ) ; var length:==:math . min ( coordNodes . length , timeNodes . length ) ;
var createStringLiteral = parseTreeFactory . createStringLiteral ; var createSwitchStatement:==:parseTreeFactory . createSwitchStatement ;
var dataViewAnalysis = powerbi . dataViewAnalysis ; var textMeasurementService:==:powerbi . textMeasurementService ;
var glob = require ( ' glob ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var columnWidth = config . columnWidth ; var data:==:this . data ;
var canBubble = defaultValue ( options . canBubble , true ) ; var cancelable:==:defaultValue ( options . cancelable , true ) ;
var fail = value . fail  |  |  ' keep ' ; var zfail:==:value . zfail  |  |  ' keep ' ;
var filter = zrUtil . filter ; var map:==:zrUtil . map ;
var transaction = database . transaction ( [ objStoreName ] , ' readwrite ' ) ; var objectStore:==:transaction . objectStore ( objStoreName ) ;
var bottomRadius = cylinder . bottomRadius ; var show:==:cylinder . show ;
var shell = require ( ' gulp - shell ' ) ; var path:==:require ( ' path ' ) ;
var iframeLoadMonitor = goog . require ( ' goog . net . iframeLoadMonitor ' ) ; var promise:==:goog . require ( ' goog . promise ' ) ;
var module = fileInfo . module ; var name:==:fileInfo . name ;
var touchStartEventName = visuals . touchUtils . touchStartEventName ( ) ; var touchEndEventName:==:visuals . touchUtils . touchEndEventName ( ) ;
var PUBLISHED = api . PUBLISHED ; var INSTANCE_ATTRIBUTES:==:api . INSTANCE_ATTRIBUTES ;
var webpack = require ( ' webpack ' ) ; var cwd:==:process . cwd ( ) ;
var sIcon = sap . ui . core . theming . parameters . _ getThemeImage ( ' _ sap_ui_ux3_feed_toolsiconurl ' ) ; var sIconHover:==:sap . ui . core . theming . parameters . _ getThemeImage ( ' _ sap_ui_ux3_feed_toolsiconhoverurl ' ) ;
var pinchMidPoint = orbitCameraInputTouch . pinchMidPoint ; var touches:==:event . touches ;
var listContainer = require ( ' listContainer ' ) ; var navigator:==:require ( ' navigator ' ) ;
var title = options . title ; var body:==:options . body ;
var imul = stdlib . Math . imul ; var fround:==:stdlib . Math . fround ;
var orange200 = exports . orange200 = ' # ffcc80 ' ; var orange300:==:exports . orange300    ' # ffb74d ' ;
var def = this . _ definition [ attr ] ; var type:==:def . type ;
var typedef = typedefs [ typedefs . length - 1 ] ; var type:==:typedef . types [ 0 ] ;
var debugPanel = imports . debugPanel ; var settings:==:imports . settings ;
var rotation = options . rotation ; var center:==:options . center ;
var denyExt = getExtRegex ( this . settings . denyExt ) ; var allowMime:==:getMimeRegex ( this . settings . allowMime ) ;
var value = ' value ' ; var value2:==:' value2 ' ;
var removeDotSegments = $ traceurRuntime . removeDotSegments ; var resolveUrl:==:$ traceurRuntime . resolveUrl ;
var tab = e . tab ; var undoManager:==:tab . document . undoManager ;
var iq = $ iq ( type : ' set ' ) . c ( ' query ' , xmlns : ' jabber : iq : roster ' ) . c ( ' item ' , jid : jid , subscription : ' remove ' ) ; var suc:==:options . success  |  |  emptyFn ;
var syntheticWheelEvent = require ( ' syntheticWheelEvent ' ) ; var getEventCharCode:==:require ( ' getEventCharCode ' ) ;
var requireNativeComponent = require ( ' requireNativeComponent ' ) ; var resolveAssetSource:==:require ( ' resolveAssetSource ' ) ;
var word = definitions [ 0 ] . word ; var q:==:DDG . get_query ( ) ;
var prevTok = this . prevTok ; var lexState:==:this . lexState ;
var topLeftCornerOverlay = this . topLeftCornerOverlay & & this . topLeftCornerOverlay . clone ? this . topLeftCornerOverlay . clone . wtTable . holder : null ; var bottomLeftCornerOverlay:==:this . bottomLeftCornerOverlay & & this . bottomLeftCornerOverlay . clone ? this . bottomLeftCornerOverlay . clone . wtTable . holder : null ;
var bindingIdentifier = traceur . syntax . trees . bindingIdentifier ; var catch:==:traceur . syntax . trees . catch ;
var getMetrics = coreMetrics . getMetrics ; var bidi:==:coreBidi . bidi ;
var pickerAndroid = require ( ' pickerAndroid ' ) ; var platform:==:require ( ' platform ' ) ;
var util = require ( ' util ' ) ; var toFixed:==:fn . toFixed ;
var x = x1 ; var y:==:y1 ;
var current = self . current ; var index:==:current . index ;
var w = win . width ( ) - widthOffset ; var h:==:win . height ( ) - heightOffset ;
var begin = match . begin ; var end:==:match . end ;
var margin = this . margin ; var width:==:viewport . width - margin . right - margin . left ;
var transitionEasing = getOption ( ' transitionEasing ' ) ; var transitionDuration:==:getOption ( ' transitionDuration ' ) ;
var m = o . getElementById ( ' state ' ) ; var l:==:m ? m . innerText : null ;
var c = processDiagramCanvas . g . path ( ' m'+targetx+','+targety+'l'+ax+','+ay ) . attr ( stroke : color . get ( 255 , 153 , 51 ) , ' stroke - dasharray ' : ' - ' ) ; var c:==:processDiagramCanvas . g . path ( ' m'+nextSrcx+','+nextSrcy+'l'+bx+','+by ) . attr ( stroke : color . get ( 255 , 153 , 51 ) , ' stroke - dasharray ' : ' - ' ) ;
var xa = plotinfo . xaxis ; var ya:==:plotinfo . yaxis ;
var n = null ; var a:==:foo : ' bar ' ;
var token = tokens [ idx ] ; var language:==:token . info & & ( ' language- ' + token . info )  |  |  '' ;
var opening = wordRegexp ( openingKeywords ) ; var middle:==:wordRegexp ( middleKeywords ) ;
var sass = require ( ' gulp - sass ' ) ; var through2:==:require ( ' through2 ' ) ;
var gulp = $ $ . help ( require ( ' gulp ' ) ) ; var lazypipe:==:require ( ' lazypipe ' ) ;
var state    = this . state ; var settings:==:this . settings ;
var nodesWereRemoved = scope . nodesWereRemoved ; var registerWrapper:==:scope . registerWrapper ;
var HASH_ALGOS = utils . HASH_ALGOS ; var PK_ALGOS:==:utils . PK_ALGOS ;
var test = refs . add ( getTypeTest ( allTypes [ i ] ) , ' test ' ) ; var convert:==:refs . add ( conversion_i . convert , ' convert ' ) ;
var createElement = _ props4 . createElement ; var render:==:_ props4 . render ;
var apply = Function . prototype . apply ; var slice:==:Array . prototype . slice ;
var newExpression = traceur . syntax . trees . newExpression ; var parseTreeType:==:traceur . syntax . trees . parseTreeType ;
var MAX_REVISION_NUM = options . MAX_REVISION_NUM ; var COMPRESSED_REV_NUM:==:options . COMPRESSED_REV_NUM ;
var manager = options . manager ; var skipStart:==:typeof options . skipStart     ' boolean ' ? options . skipStart : false ;
var t = text ; var text:==:paper . text ( 300 , 100 , t ) . attr ( font ) . attr ( ' text - anchor ' , ' start ' ) ;
var blueA700 = exports . blueA700 = ' # 2962ff ' ; var lightBlue50:==:exports . lightBlue50    ' # e1f5fe ' ;
var enclose = options . enclose ; var arc:==:( options . arc <   0  |  |  options . arc > 1 ) ? 1 . 0 : options . arc  |  |  1 . 0 ;
var tiltX = defaultValue ( options . tiltx , 0 ) ; var tilty:==:defaultValue ( options . tilty , 0 ) ;
var artist = ( metadata . artist  |  |  '' ) . substr ( 0 , 64 ) ; var album:==:( metadata . album  |  |  '' ) . substr ( 0 , 64 ) ;
var axon    = require ( ' pm2-axon ' ) ; var sock:==:axon . socket ( ' sub ' ) ;
var offset = this . getAttribute ( ' data - offset ' ) ; var duration:==:this . getAttribute ( ' data - duration ' ) ;
var autoprefix = require ( ' less - plugin - autoprefix ' ) ; var logger:==:require ( ' gulp - logger ' ) ;
var _ im_get_predict_at = Module [ ' _ im_get_predict_at ' ] = asm [ ' _ im_get_predict_at ' ] ; var _ im_get_candidate:==:Module [ ' _ im_get_candidate ' ]    asm [ ' _ im_get_candidate ' ] ;
var rows = _ props2 . rows ; var rowsMax:==:_ props2 . rowsMax ;
var afterNoCompleteOpen = helpers . afterNoCompleteOpen ; var afterCompleteDocOpen:==:helpers . afterCompleteDocOpen ;
var alert = imports [ ' dialog . alert ' ] . show ; var question:==:imports [ ' dialog . question ' ] . show ;
var npm = think . npm ; var reject:==:think . reject ;
var mout = require ( ' mout ' ) ; var nopt:==:require ( ' nopt ' ) ;
var staticRenderFns = ref . staticRenderFns ; var _ parentVnode:==:ref . _ parentVnode ;
var net = require ( ' net ' ) ; var join:==:require ( ' path ' ) . join ;
var iterations = options . iterations  |  |  20000 ; var errorThresh:==:options . errorThresh  |  |  0 . 005 ;
var dataLabelHorizontalPosition = powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . dataLabelHorizontalPosition , visuals . referenceLineDataLabelHorizontalPosition . left ) ; var dataLabelVerticalPosition:==:powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . dataLabelVerticalPosition , visuals . referenceLineDataLabelVerticalPosition . above ) ;
var Promise = testUtils . promise ; var allDocs:==:remote . allDocs ;
var hour = calendar . month . hour ( ) ; var minute:==:calendar . month . minute ( ) ;
var _ testSetjmp = module [ ' _ testSetjmp ' ] = asm [ ' _ testSetjmp ' ] ; var _ i64Subtract:==:module [ ' _ i64Subtract ' ]    asm [ ' _ i64Subtract ' ] ;
var proto = protos [ protoIdx ] ; var bindingRecord:==:proto . bindingRecord ;
var mongoose = keystone . mongoose ; var path:==:require ( ' path ' ) ;
var scrollLeft = math . max ( 0 , math . min ( totalWidth - width + scrollbarSize , event . target . scrollLeft ) ) ; var scrollTop:==:math . max ( 0 , math . min ( totalHeight - height + scrollbarSize , event . target . scrollTop ) ) ;
var position = mesh1 . geometry . getAttribute ( ' position ' ) ; var array:==:position . array ;
var test = imports . test ; var commands:==:imports . commands ;
var dataset = event . target . dataset ; var action:==:dataset . action ;
var backwards = options . backwards = = = true ; var skipCurrent:==:options . skipCurrent !    false ;
var internalformat = info . internalformat ; var format:==:info . format ;
var light = _ lightShadows [ i ] ; var shadow:==:light . shadow ;
var del = require ( ' del ' ) ; var bistre:==:require ( ' bistre ' ) ;
var should = require ( ' should ' ) ; var domain:==:require ( ' domain ' ) ;
var muk = require ( ' muk ' ) ; var multiparty:==:require ( ' multiparty ' ) ;
var ref = value . ref  |  |  0 ; var mask:==:' mask ' in value ? value . mask : -1 ;
var gmdl = this . gmdl ; var office:==:this . office ;
var b = wt . b ; var c:==:wt . c ;
var L = new errorCorrectionLevel ( 0 , 0x01 , ' l ' ) ; var m:==:new errorCorrectionLevel ( 1 , 0x00 , ' m ' ) ;
var paired = device . paired ; var button:==:document . createElement ( ' smart - button ' ) ;
var axe2 = obj . axe2  |  |  [ 1,0,0 ] ; var pos1:==:obj . pos1  |  |  [ 0,0,0 ] ;
var controls = this . app . controllers . controls ; var camera:==:this . app . controllers . camera ;
var d = new functionNode ( s , [ b , c ] ) ; var e:==:new constantNode ( 5 ) ;
var tabs = element . children ( ' . tabs ' ) . find ( ' li ' ) . children ( ' a ' ) ; var frames:==:element . children ( ' . frames ' ) . children ( ' div ' ) ;
var original = util . getArg ( aArgs , ' original ' , null ) ; var source:==:util . getArg ( aArgs , ' source ' , null ) ;
var localPdfManager = corePdfManager . localPdfManager ; var networkPdfManager:==:corePdfManager . networkPdfManager ;
var stdout = FS . createDevice ( devFolder , ' stdout ' , null , output ) ; var stderr:==:fs . createDevice ( devFolder , ' stderr ' , null , error ) ;
var createReturnStatement = parseTreeFactory . createReturnStatement ; var createTrueLiteral:==:parseTreeFactory . createTrueLiteral ;
var value = group [ 1 ]  |  |  ' $ value ' ; var index:==:group [ 2 ]  |  |  ' $ index ' ;
var listenMarkerEvents = leafletMarkersHelpers . listenMarkerEvents ; var addMarkerToGroup:==:leafletMarkersHelpers . addMarkerToGroup ;
var clientLeft = b . clientLeft ; var offsetWidth:==:b . offsetWidth ;
var utils = des . utils ; var Cipher:==:des . Cipher ;
var plato = require ( ' plato ' ) ; var plug:==:require ( ' gulp - load - plugins ' ) ( ) ;
var broadcastService = _ appJsServicesBroadcastService [ ' default ' ] ; var httpClientService:==:_ appJsServicesHttpClientService [ ' default ' ] ;
var graph = new Dygraph ( graphDiv , data , opts ) ; var legend:==:document . getElementsByClassName ( ' dygraph - legend ' ) ;
var _ _ GLOBAL__I_a = Module [ ' _ _ GLOBAL__I_a ' ] = asm [ ' _ _ GLOBAL__I_a ' ] ; var _ memset:==:Module [ ' _ memset ' ]    asm [ ' _ memset ' ] ;
var monthNamesShort = this . _ get ( inst , ' monthNamesShort ' ) ; var beforeShowDay:==:this . _ get ( inst , ' beforeShowDay ' ) ;
var isFunction = util . isFunction ; var isObject:==:util . isObject ;
var key = arr . $ keyAt ( 1 ) ; var ref:==:arr . $ ref ( ) . child ( key ) ;
var reactdomContainerInfo = require ( ' reactdomContainerInfo ' ) ; var reactInstrumentation:==:require ( ' reactInstrumentation ' ) ;
var note = ' cite - note- ' + uid ; var ref:==:' cite - ref- ' + uid ;
var mcc = iccHelper . iccInfo . mcc ; var mnc:==:iccHelper . iccInfo . mnc ;
var slice = Array . prototype . slice ; var splice:==:Array . prototype . splice ;
var circle = s . circle ( 10 , 20 , 30 ) ; var use:==:circle . use ( ) ;
var authData = user . get ( ' authData ' ) ; var token:==:authData . facebook . access_token ;
var updateOwnershipData = denodeify ( session . models . user . updateOwnershipData ) . bind ( session . models . user ) ; var updateKey:==:denodeify ( session . models . user . updateKey ) . bind ( session . models . user ) ;
var passwordResponses = sharedUtil . passwordResponses ; var passwordException:==:sharedUtil . passwordException ;
var multiArgs = ! ! options . multiArgs ; var suffix:==:options . suffix ;
var red400 = exports . red400 = ' # ef5350 ' ; var red500:==:exports . red500    ' # f44336 ' ;
var BUILD_MODE = constants . BUILD_MODE ; var IS_DEV:==:constants . IS_DEV ;
var p2 = triangleNode . getAttribute ( ' p2 ' ) ; var p3:==:triangleNode . getAttribute ( ' p3 ' ) ;
var path = this . path  |  |  pathProxyForDraw ; var hasStroke:==:style . hasStroke ( ) ;
var tooltipManager = powerbi . visuals . tooltipManager ; var hasRole:==:powerbi . data . dataRoleHelper . hasRole ;
var rot = array [ j ] . rotation ; var interpolation:==:array [ j ] . interpolation ;
var keyCommandInsertNewline = require ( ' keyCommandInsertNewline ' ) ; var keyCommandPlainBackspace:==:require ( ' keyCommandPlainBackspace ' ) ;
var top = a . top ; var height:==:a . height ;
var apf = imports . apf ; var workspace:==:imports [ ' collab . workspace ' ] ;
var d = this . d ; var tx:==:this . tx ;
var after = new Blockly . fieldLabel ( ' after ' ) ; var prefix:==:new blockly . fieldLabel ( ' prefix ' ) ;
var path = require ( ' path ' ) ; var panino:==:require ( ' panino ' ) ;
var layout = data . layout ; var slug:==:data . slug ;
var node = model . nodes [ data . node ] ; var mesh:==:model . meshes [ data . mesh ] ;
var path = file . params . path ; var extname:==:pathFn . extname ( path ) ;
var error = require ( ' http - error ' ) ; var http:==:require ( ' http ' ) ;
var rttc = require ( ' rttc ' ) ; var anchor:==:require ( ' anchor ' ) ;
var React = require ( ' React ' ) ; var f8Button:==:require ( ' f8Button ' ) ;
var x = this . x , y = this . y , z = this . z ; var e:==:m . elements ;
var requirejs = require ( ' requirejs ' ) ; var expect:==:require ( ' expect . js ' ) ;
var selectedEntity = this . selectedEntity ; var position:==:selectedEntity . position ;
var unselectable = this . props . selectRow . unselectable  |  |  [ ] ; var isSelectRowDefined:==:this . _ isSelectRowDefined ( ) ;
var rowContainer = $ scope . rowContainer = grid . renderContainers [ $ scope . rowContainerName ] ; var colContainer:==:$ scope . colContainer    grid . renderContainers [ $ scope . colContainerName ] ;
var q = World_step_step_q ; var w:==:World_step_step_w ;
var React = require ( ' React ' ) ; var blogPostDate:==:require ( ' blogPostDate ' ) ;
var mode = options . mode ? MODES [ options . mode . toLowerCase ( ) ] : -1 ; var mask:==:' mask ' in options ? options . mask : -1 ;
var isCombinationalField = localUtils . isCombinationalField ; var getKey:==:localUtils . getKey ;
var clips = this . _ clips ; var len:==:clips . length ;
var multer = require ( ' multer ' ) ; var path:==:require ( ' path ' ) ;
var globalScope = sharedGlobal . globalScope ; var isWorker:==:sharedGlobal . isWorker ;
var reactFiberTreeReflection = require ( ' reactFiberTreeReflection ' ) ; var reactInstanceMap:==:require ( ' reactInstanceMap ' ) ;
var port = record . get ( ' port ' ) ; var proto:==:record . get ( ' proto ' ) ;
var definition = descriptor . definition ; var config:==:descriptor . config ;
var options = args . options ; var type:==:args . type ;
var axisModel = this . axisModel ; var axis:==:axisModel . axis ;
var rect = this . _ rect ; var axis:==:this . _ axis ;
var perPositionHeight = defaultValue ( options . perPositionHeight , false ) ; var extrudedHeight:==:options . extrudedHeight ;
var nullStream = coreStream . nullStream ; var predictorStream:==:coreStream . predictorStream ;
var getDraftEditorSelectionWithNodes = require ( ' getDraftEditorSelectionWithNodes ' ) ; var moveSelectionBackward:==:require ( ' moveSelectionBackward ' ) ;
var columnStopIndex = _ ref . columnStopIndex ; var rowStartIndex:==:_ ref . rowStartIndex ;
var v = e . val ; var o:==:new customType ( v ) ;
var properties = definition . properties ; var additionalProperties:==:definition . additionalProperties ;
var fullWidth = _ props . fullWidth ; var icon:==:_ props . icon ;
var service = msg . service ; var payload:==:msg . payload ;
var input = this . _ input ; var whitespace:==:matchAt ( whitespaceRegex , input , pos ) [ 0 ] ;
var values = this . _ values ; var length:==:this . length ( ) ;
var childNode = point . node . childNodes [ point . offset ] ; var clone:==:insertAfter ( point . node . cloneNode ( false ) , point . node ) ;
var log = require ( util . dirs ( ) . core + ' log ' ) ; var exchangeChecker:==:require ( util . dirs ( ) . core + ' exchangeChecker ' ) ;
var width = elevationImage . width ; var height:==:elevationImage . height ;
var o = opts ! = null ? opts : ; var raw:==:o . raw ;
var x = vm . x ; var y:==:vm . y ;
var pixelRatio = frameState . pixelRatio ; var extent:==:frameState . extent ;
var y = bounds . y * _ height * _ pixelRatio ; var width:==:bounds . z * _ width * _ pixelRatio ;
var rect = opts . rect ; var width:==:rect . width ;
var ax = this . ax + this . system . gx ; var ay:==:this . ay + this . system . gy ;
var view = this . _ delegate . viewForFile ( uiSourceCode ) ; var title:==:this . _ titleForFile ( uiSourceCode ) ;
var PNG = require ( ' pngjs ' ) . PNG ; var should:==:chai . should ( ) ;
var edge = ! ( options & & options . edge = = = false ) ; var details:==:edge & & options & & options . details ;
var cropper = $ image . data ( ' cropper ' ) ; var image:==:cropper . image ;
var focusedOption = _ ref . focusedOption ; var focusOption:==:_ ref . focusOption ;
var Change = Model . getChangeModel ( ) ; var rev:==:current ? change . revisionForInst ( current ) : null ;
var rowHeightFn = priv . rowHeightFn ; var scrollOffset:==:priv . scrollOffset ;
var style = el . style ; var image:==:style . image ;
var listModel = _ jsModelListModel [ ' default ' ] ; var tabsView:==:_ jsViewTabsView [ ' default ' ] ;
var dynCall_ddd = Module [ ' dynCall_ddd ' ] = asm [ ' dynCall_ddd ' ] ; var dynCall_fiii:==:Module [ ' dynCall_fiii ' ]    asm [ ' dynCall_fiii ' ] ;
var from = cn [ ' from ' ] ; var to:==:cn [ ' to ' ] ;
var p = k . pos ; var r:==:k . rot ;
var lat = this . getElementsByTagNamens ( item , this . geons , ' lat ' ) ; var lon:==:this . getElementsByTagNamens ( item , this . geons , ' long ' ) ;
var KATAKANA = ci . KATAKANA ; var EXTENDNUMLET:==:ci . EXTENDNUMLET ;
var postcss = require ( ' postcss ' ) ; var autoprefixer:==:require ( ' autoprefixer ' ) ;
var ellipsoid = polygonGeometry . _ ellipsoid ; var minHeight:==:minHeightFunc ( granularity , ellipsoid ) ;
var valueDim = opt . valueDim ; var pxSign:==:output . pxSign ;
var o = TO_OBJECT ( locales ) ; var len:==:TO_LENGTH ( o . length ) ;
var PROCESSING_INSTRUCTION_NODE = nodeType . processing_instruction_node = 7 ; var comment_node:==:nodeType . comment_node       8 ;
var c = clearCommand . color ; var d:==:clearCommand . depth ;
var directives = context . directives ; var modules:==:context . modules ;
var File = this . File ; var base:==:this . base ;
var description = options . description  |  |  page . description  |  |  page . excerpt  |  |  content  |  |  config . description ; var keywords:==:page . keywords  |  |  ( page . tags & & page . tags . length ? page . tags : undefined )  |  |  config . keywords ;
var timers = require ( ' timers ' ) ; var util:==:require ( ' util ' ) ;
var stack = require ( ' stack ' ) ; var http:==:require ( ' http ' ) ;
var a = new functionNode ( new symbolNode ( ' add ' ) , [ new constantNode ( 2 ) , new constantNode ( 3 ) ] ) ; var b:==:new functionNode ( new symbolNode ( ' add ' ) , [ new constantNode ( 2 ) , new constantNode ( 3 ) ] ) ;
var gzip = Promise . promisify ( zlib . gzip ) ; var getCredentials:==:promise . promisify ( aws . config . getCredentials , context : aws . config ) ;
var filter = require ( ' filter - files ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var n = Math . min ( rows , columns ) ; var data:==:object . clone ( m . _ data ) ;
var arrayComprehension = traceur . syntax . trees . arrayComprehension ; var arrayLiteralExpression:==:traceur . syntax . trees . arrayLiteralExpression ;
var displayName = _ treeSnapshot$instanc3 . displayName ; var ownerid:==:_ treeSnapshot$instanc3 . ownerid ;
var assert = require ( ' assert ' ) ; var pathval:==:require ( ' pathval ' ) ;
var gridClassName = _ props . gridClassName ; var gridStyle:==:_ props . gridStyle ;
var allowClose = options . allowClose ; var elements:==:options . elements  |  |  [ ] ;
var href = window . location . href ; var index:==:href . indexOf ( ' # ' ) ;
var neighborsSignificance = this . neighborsSignificance ; var contexts:==:this . contexts ;
var steps = options . steps ! = = undefined ? options . steps : 1 ; var extrudePath:==:options . extrudePath ;
var options = $ tooltip . $ options = angular . extend ( , defaults , config ) ; var promise:==:$ tooltip . $ promise    $ bsCompiler . compile ( options ) ;
var selectionColumns = this . $ selectionColumnsForRow ( row ) ; var tabs:==:[ -1 ] . concat ( this . $ tabsForRow ( row ) ) ;
var log2 = sharedUtil . log2 ; var readInt8:==:sharedUtil . readInt8 ;
var nextChildid = nextChildiDs [ i ] ; var nextChild:==:getItem ( nextChildid ) ;
var fullLayout = gd . _ fullLayout ; var i d:==:' contour ' + uid ;
var height = image . height ; var data:==:image . data ;
var p = this . _ props ; var Shape:==:shapesMap . getShape ( this . _ props . shape ) ;
var editor = new Editor ( fs , ' editor ' ) ; var filer:==:new Filer ( fs , ' filer ' , editor , isSyncable ) ;
var angle = this . angle ; var viewport:==:this . viewport ;
var keys = Object . keys ( err . errors  |  |  ) ; var len:==:keys . length ;
var prefix = typeof o . prefix = = ' undefined ' & & ' assert '  |  |  o . prefix ; var includeFail:==:typeof o . includeFail     ' undefined '  |  |  ! ! o . includeFail ;
var Connection   = common . Connection ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var y = shape . cy ; var r:==:shape . r ;
var flipY = defaultValue ( options . flipy , true ) ; var gl:==:context . _ gl ;
var jsdom = require ( ' mocha - jsdom ' ) ; var moment:==:vis . moment ;
var candidate = candidates . pop ( ) ; var lhs:==:get_lhs ( candidate ) ;
var ignoreCase = configuration . ignoreCase  |  |  false ; var callbacksLast:==:configuration . callbacksLast  |  |  false ;
var itemHeight = self . itemHeight ; var scrollHeight:==:e . target . scrollHeight ;
var options = opt_options  |  |  ; var doc:==:options . document  |  |  document ;
var output = options . output  |  |  false ; var dialogClass:==:options . dialogClass  |  |  ' ' ;
var event = args . event ; var ui:==:args . ui ;
var $ element = this . $ element ; var $ mdUtil:==:this . $ mdUtil ;
var moreExpected = result . moreExpected ; var messageNamer:==:result . messageNamer ;
var loader = linkSet . loader ; var loads:==:linkSet . loads . concat ( [ ] ) ;
var longitude = document . getElementById ( ' longitude ' ) ; var latitude:==:document . getElementById ( ' latitude ' ) ;
var lat = content . getAttribute ( ' data - latitude ' )  |  |  defaultLat ; var setZoom:==:content . getAttribute ( ' data - setZoom ' )  |  |  17 ;
var yellow800 = exports . yellow800 = ' # f9a825 ' ; var yellow900:==:exports . yellow900    ' # f57f17 ' ;
var classPrefix = this . classPrefix ; var toolbar:==:this . toolbar    editor . children ( ' . ' + classPrefix + ' toolbar ' ) ;
var invariant = require ( ' invariant ' ) ; var modifyBlockForContentState:==:require ( ' modifyBlockForContentState ' ) ;
var len = models . length ; var children:==:$ . _ _ views . content . children ;
var logPeriod = options . logPeriod  |  |  10 ; var learningRate:==:options . learningRate  |  |  this . learningRate  |  |  0 . 3 ;
var ann = anns [ i ] ; var top:==:nextTop  |  |  cm . charCoords ( ann . from , ' local ' ) . top * hScale ;
var Properties = domPropertyConfig . properties  |  |  ; var domAttributeNames:==:domPropertyConfig . domAttributeNames  |  |  ;
var parentSuite = ( typeof child . parentSuite = = ' undefined ' ) ? ' suite ' : ' parentSuite ' ; var parent:==:child [ parentSuite ] ;
var appearCancelled = ref . appearCancelled ; var duration:==:ref . duration ;
var namespaceURI = parentNode . namespaceuri ; var properties:==:context [ ' properties ' ] ;
var promise = this . _ promiseAt ( i ) ; var receiver:==:this . _ receiverAt ( i ) ;
var createParenExpression = parseTreeFactory . createParenExpression ; var createVariableDeclaration:==:parseTreeFactory . createVariableDeclaration ;
var canvas = document . createElement ( ' canvas ' ) ; var w:==:parseInt ( svgRoot . getAttribute ( ' width ' ) ) ;
var relPath = sourceItem . relPath ; var fileOptions:==:_ . clone ( sourceItem . fileOptions )  |  |  ;
var y = radiusy * Math . sin ( phi ) ; var z:==:radiusz * Math . cos ( phi ) * Math . cos ( theta ) ;
var iterator = getIterator ( object ( this . iterator ) ) ; var scheduler:==:this . scheduler ;
var endTag = formatter . endTag ( ' b ' ) ; var startTag:==:formatter . startTag ( ' b ' ) ;
var logItemElt = logItemElts [ i ] ; var timestamp:==:logItemElt . getAttribute ( ' data - timestamp ' ) ;
var wrap = scope . wrap ; var wrapIfNeeded:==:scope . wrapIfNeeded ;
var COMPREHENSION_FOR = ' COMPREHENSION_FOR ' ; var COMPREHENSION_IF:==:' COMPREHENSION_IF ' ;
var count = accessor . count ; var buffer:==:loadResources . getBuffer ( bufferView ) ;
var View = require ( ' View ' ) ; var Platform:==:require ( ' Platform ' ) ;
var backgroundBillboard = label . _ backgroundBillboard ; var width:==:backgroundBillboard . width * scale ;
var isNum = sharedUtil . isNum ; var isArray:==:sharedUtil . isArray ;
var insertIntoList = require ( ' insertIntoList ' ) ; var invariant:==:require ( ' invariant ' ) ;
var revert = params . revert ! = = false ; var orphan:==:params . orphan      true ;
var setFirstName = docSet . getByLongname ( ' setFirstName ' ) [ 0 ] ; var setLastName:==:docSet . getByLongname ( ' setLastName ' ) [ 0 ] ;
var lastPhraseLength = queueData . lastPhraseLength ; var sentences:==:queueData . sentences ;
var run = helpers . runMocha ; var fs:==:require ( ' fs ' ) ;
var streamqueue = require ( ' streamqueue ' ) ; var karma:==:require ( ' karma ' ) . server ;
var clone = require ( ' lodash . clone ' ) ; var defaults:==:require ( ' lodash . defaultsdeep ' ) ;
var diffV = this . diffV ; var impulse:==:this . impulse ;
var mult = new operatorNode ( ' * ' , ' multiply ' , [ a , b , c ] ) ; var add:==:new operatorNode ( ' + ' , ' add ' , [ a , b , c ] ) ;
var electron = require ( ' electron ' ) ; var remote:==:electron . remote ;
var Dispatcher = require ( ' Dispatcher ' ) ; var fluxStore:==:require ( ' fluxStore ' ) ;
var cancel = panel . nodes . cancel ; var timer:==:panel . timer ;
var c = classes [ i ] ; var a:==:className2Author ( c ) ;
var w = this . size . w + ' px ' ; var h:==:this . size . h + ' px ' ;
var l = width - pright . sizeCalculated ; var t:==:0 + ( stop ? ptop . sizeCalculated + this . padding : 0 ) ;
var path = require ( ' path ' ) ; var spawn:==:require ( ' spawn - local - bin ' ) ;
var scrollHeight = _ ref5 . scrollHeight ; var scrollTop:==:_ ref5 . scrollTop ;
var getInnerhtml = scope . getInnerhtml ; var mixin:==:scope . mixin ;
var vertexShaderSource = options . vertexShaderSource ; var fragmentShaderSource:==:options . fragmentShaderSource ;
var photoOrientation = windows . storage . fileProperties . photoOrientation ; var sensors:==:windows . devices . sensors ;
var asc = numberUtil . asc ; var bind:==:zrUtil . bind ;
var PORT = common . PORT ; var cluster:==:require ( ' cluster ' ) ;
var enterCancelled = ref . enterCancelled ; var beforeAppear:==:ref . beforeAppear ;
var c = ( influencesPerVertex > 2 ) ? json . skinIndices [ i + 2 ] : 0 ; var d:==:( influencesPerVertex > 3 ) ? json . skinIndices [ i + 3 ] : 0 ;
var write = context . write ; var next:==:context . next ;
var y = p . y ; var z:==:p . z ;
var cellGroupRenderer = _ props2 . cellGroupRenderer ; var cellRenderer:==:_ props2 . cellRenderer ;
var ext = imports . ext ; var proc:==:imports . proc ;
var endAngle = shape . endAngle ; var clockwise:==:shape . clockwise ;
var getCellsPerWeek = t . getCellsPerWeek ; var formatDates:==:calendar . formatDates ;
var denyMime = getMimeRegex ( this . settings . denyMime ) ; var maxSize:==:this . settings . maxSize  |  |  false ;
var api = this . api ; var brushType:==:this . _ brushType ;
var argv = require ( ' optimist ' ) . argv ; var q:==:require ( ' q ' ) ;
var uint8Array = window . uint8Array ; var dataView:==:window . dataView ;
var sources = item . sources ; var androidhls:==:model . get ( ' androidhls ' ) ;
var stacks = columnsOnAxis . stacks ; var bandWidth:==:columnsOnAxis . bandWidth ;
var index = replica . index ; var shard:==:replica . shard ;
var rightBuffers = config . rightBuffers . slice ( 0 ) ; var sampleRate:==:config . sampleRate ;
var dataIndex = payload . dataIndex ; var coordSysAxesInfo:==:ecModel . getComponent ( ' axisPointer ' ) . coordSysAxesInfo ;
var exec = require ( ' child_process ' ) . exec ; var fs:==:require ( ' fs - extra ' ) ;
var ejs = require ( ' ejs ' ) ; var path:==:require ( ' path ' ) ;
var designWidth = parseFloat ( params . designWidth ) ; var designUnit:==:parseFloat ( params . designUnit ) ;
var crypto = require ( ' crypto ' ) ; var moment:==:require ( ' moment ' ) ;
var icon = el . getAttribute ( ' data - icon ' ) ; var disabled:==:el . getAttribute ( ' data - disabled ' ) !    null ;
var radius = sphere . radius ; var center:==:sphere . center ;
var element = elements [ i ] ; var template:==:element . querySelector ( ' template ' ) ;
var val = this . expect ( ' case ' ) . val ; var node:==:new nodes . Case ( val ) ;
var key = webInspector . remoteObject . fromLocalObject ( json . parse ( dataEntries [ i ] . key ) ) ; var primaryKey:==:webInspector . remoteObject . fromLocalObject ( json . parse ( dataEntries [ i ] . primaryKey ) ) ;
var keys = keysFunc ( source ) ; var l:==:keys . length ;
var source = document . _ _ source ; var _ _ getUserInput:==:document . _ _ getUserInput  |  |  ( x   > x ) ;
var proc = imports . proc ; var ui:==:imports . ui ;
var mrow = cTop . createElement ( ' mrow ' ) ; var mi:==:cTop . createElement ( ' mi ' ) ;
var rows = parseInt ( this . find ( ' [ data - rows ] ' ) . val ( ) ) ; var cols:==:parseInt ( this . find ( ' [ data - cols ] ' ) . val ( ) ) ;
var getInvalidValueWarnings = powerbi . visuals . getInvalidValueWarnings ; var legendProps:==:powerbi . visuals . legendProps ;
var Key = _ elementUtilities . key ; var createEvent:==:_ events . _ createEventProperty ;
var key = ' a - cache - key ' ; var gltfCache:==:model . _ gltfCache ;
var del = require ( ' del ' ) ; var derequire:==:require ( ' gulp - derequire ' ) ;
var run = imports . run ; var output:==:imports . output ;
var hour = this . h ( ' hour ' ) ; var format:==:this . h ( ' format ' ) ;
var def = object . def ; var conflicts:==:currentDiff . conflicts ;
var propertyMethodAssignment = traceur . syntax . trees . propertyMethodAssignment ; var propertyNameAssignment:==:traceur . syntax . trees . propertyNameAssignment ;
var a = [ Symbol . toPrimitive ] : function ( ) return ' bla ' ; var b:==:[ symbol . toPrimitive ] : function ( ) throw ' gaga ' ;
var textureLoader = new three . textureLoader ( ) ; var warn:==:debug ( ' components : texture : warn ' ) ;
var ppo = this . indicators . ppo ; var long:==:ppo . long . result ;
var text   = _ text  |  |  ' Warning ' ; var position:==:_ position  |  |  ' center ' ;
var users = _ . zipObject ( uids , results . users ) ; var categories:==:_ . zipObject ( cids , results . categories ) ;
var name = path . substring ( 0 , path . length - extname . length ) ; var views:==:this . views [ name ] ;
var legendPosition = powerbi . visuals . legendPosition ; var dataLabelUtils:==:powerbi . visuals . dataLabelUtils ;
var columns   = method . columns ; var columnGroups:==:method . columnGroups ;
var sentinel2 = sentinel2 : ' sentinel2 ' ; var sentinel3:==:sentinel3 : ' sentinel3 ' ;
var lines = delta . lines ; var l:==:lines . length ;
var View = _ componentsFxosMvcDistMvc . view ; var iconHelper:==:_ jsLibHelpers . iconHelper ;
var way = way_list [ i ] ; var i d:==:way . getAttribute ( ' i d ' ) ;
var clamp = require ( ' clamp ' ) ; var cx:==:require ( ' cx ' ) ;
var scrollTop = math . max ( math . min ( self . _ _ scrollTop , self . _ _ maxScrollTop ) , 0 ) ; var clientWidth:==:self . _ _ clientWidth ;
var WHILE_STATEMENT = ' WHILE_STATEMENT ' ; var WITH_STATEMENT:==:' WITH_STATEMENT ' ;
var viewport = this . _ layerTree . viewportSize ( ) ; var root:==:this . _ layerTree . contentRoot ( )  |  |  this . _ layerTree . root ( ) ;
var Plugin = imports . Plugin ; var http:==:imports . http ;
var oldStyle = oldStaticStyle  |  |  oldStyleBinding ; var style:==:normalizeStyleBinding ( vnode . data . style )  |  |  ;
var tree = this . tree ; var url:==:this . url ;
var g = Object . getOwnPropertyDescriptor ( o , ' m ' ) . get ; var s:==:object . getOwnPropertyDescriptor ( o , ' m ' ) . set ;
var uiSourceCode = breakpoint . uiSourceCode ( ) ; var breakpoints:==:uiSourceCode ? this . _ breakpointsForPrimaryuiSourceCode . get ( uiSourceCode )  |  |  [ ] : [ ] ;
var blueA100 = exports . blueA100 = ' # 82b1ff ' ; var blueA200:==:exports . blueA200    ' # 448aff ' ;
var width = value . bounds . width ( ) ; var height:==:value . bounds . height ( ) ;
var hotspot = this . hotspots [ i d ] ; var angle:==:hotspot . position . angleTo ( lookAt ) ;
var STRING2 = C . STRING2 = 0x62 ; var STRING3:==:C . STRING3    0x63 ;
var n = computeNormals_n ; var normals:==:this . normals ;
var derivedDataProperty = ' derivedDataProperty ' ; var f:==:' f ' ;
var paths   = leafletScope . paths ; var createPath:==:leafletPathsHelpers . createPath ;
var dateTimeFormat = goog . require ( ' goog . i18n . dateTimeFormat ' ) ; var datetimesymbols_ar:==:goog . require ( ' goog . i18n . datetimesymbols_ar ' ) ;
var localVideo = document . getElementById ( ' localVideo ' ) ; var remoteVideo:==:document . getElementById ( ' remoteVideo ' ) ;
var options = _ state . options ; var value:==:_ state . value ;
var buf = this . buf _ ; var inbuf:==:this . inbuf _ ;
var container = me . container . parentNode ; var textarea:==:me . textarea ;
var port = options . port  |  |  process . env . PORT  |  |  3000 ; var hostname:==:options . hostname  |  |  process . env . NODE_HOSTNAME  |  |  undefined ;
var isDefault = flow . isDefault ; var isConditional:==:flow . isConditional ;
var data = $ tr . data ( ) ; var url:==:jsbin . root + data . url ;
var f8SpeakerProfile = require ( ' f8SpeakerProfile ' ) ; var image:==:require ( ' image ' ) ;
var clearInterval = global . clearInterval ; var isatty:==:tty . isatty ( 1 ) & & tty . isatty ( 2 ) ;
var teal500 = exports . teal500 = ' # 009688 ' ; var teal600:==:exports . teal600    ' # 00897b ' ;
var keyPrefix = bookKeeping . keyPrefix ; var func:==:bookKeeping . func ;
var exp = stdlib . Math . exp ; var log:==:stdlib . Math . log ;
var style = this . style ; var path:==:this . path  |  |  pathProxyForDraw ;
var x = defaultValue ( viewport . x , 0 . 0 ) ; var y:==:defaultValue ( viewport . y , 0 . 0 ) ;
var alphabetical = require ( ' is - alphabetical ' ) ; var decimal:==:require ( ' is - decimal ' ) ;
var tooltip = imports [ ' language . tooltip ' ] ; var settings:==:imports . settings ;
var containmentEdges = this . containmentEdges ; var retainingEdges:==:this . _ retainingEdges ;
var techniques = gltf . techniques ; var materials:==:gltf . materials ;
var scheme = uriInfo . scheme ; var authority:==:uriInfo . authority ;
var stage = new Hilo . Stage ( i d : ' stage ' ) ; var container:==:new Hilo . Container ( i d : ' container ' ) ;
var lineColor = powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . lineColor , solid : color : defaultColor ) ; var transparency:==:powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . transparency , 50 ) ;
var cob = client . plugins ( ' cob ' ) ; var eventTime:==:$ ( ' # bc_eventtimevalue ' ) ;
var context = passState . context ; var viewport:==:passState . viewport ;
var touches = event . touches & & event . touches . length ? event . touches : [ event ] ; var e:==:touches [ 0 ] . originalEvent  |  |  touches [ 0 ] ;
var hideIfNoPrevNext = this . _ get ( inst , ' hideIfNoPrevNext ' ) ; var navigationAsDateFormat:==:this . _ get ( inst , ' navigationAsDateFormat ' ) ;
var reactTreeTraversal = require ( ' reactTreeTraversal ' ) ; var responderSyntheticEvent:==:require ( ' responderSyntheticEvent ' ) ;
var p0 = segment . p0 ; var p1:==:segment . p1 ;
var icalComponent = eventDetails . icalComponent ; var event:==:eventDetails . event ;
var Navigator = require ( ' Navigator ' ) ; var React:==:require ( ' React ' ) ;
var depth = segmentData . depth ; var geometry:==:segmentData . geometry ;
var selector = btn . parents ( ' . color - selector ' ) ; var container:==:selector . parents ( ' [ data - container - html ] ' ) ;
var name = data . name ; var parent:==:data . parent ;
var redirect_uri = _ ref . redirect_uri ; var response_type:==:_ ref . response_type ;
var spreadPatternElement = traceur . syntax . trees . spreadPatternElement ; var switchStatement:==:traceur . syntax . trees . switchStatement ;
var frameState = scene . _ frameState ; var environmentState:==:scene . _ environmentState ;
var value = that . value ( ) ; var options:==:selector . options ;
var merge = require ( ' gulp - merge ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var position = attributes [ ' position ' ] ; var normal:==:attributes [ ' normal ' ] ;
var span = button . findElement ( ' span ' ) ; var className:==:span . getAttribute ( ' className ' ) ;
var div = myIframeDoc . createElement ( ' div ' ) ; var b:==:myIframeDoc . createElement ( ' b ' ) ;
var has = require ( ' has ' ) ; var util:==:require ( ' util ' ) ;
var defines = material . defines ; var vertexShader:==:material . _ _ webglShader . vertexShader ;
var moe = name : ' moe ' , lucky : [ 13 , 27 , 34 ] ; var clone:==:_ . clone ( moe ) ;
var uglify = require ( ' gulp - uglify ' ) ; var filter:==:require ( ' gulp - filter ' ) ;
var bottom = shadowFrustum . bottom ; var top:==:shadowFrustum . top ;
var k = keys [ i ] ; var t:==:env . tokenStack [ k ] ;
var classExpression = traceur . syntax . trees . classExpression ; var commaExpression:==:traceur . syntax . trees . commaExpression ;
var keys = kendo . keys ; var ui:==:kendo . ui ;
var port = options . port  |  |  27017 ; var db:==:options . db  |  |  ' integration_tests ' ;
var x = ( frame ) ? frame . x : 0 ; var y:==:( frame ) ? frame . y : 0 ;
var srcRGB = ( ' srcRGB ' in value ? value . srcRGB : value . src ) ; var srcAlpha:==:( ' srcAlpha ' in value ? value . srcAlpha : value . src ) ;
var italic = fontObj . italic ? ' italic ' : ' normal ' ; var serif:==:fontObj . isSerifFont ? ' serif ' : ' sans - serif ' ;
var lightGreen300 = exports . lightGreen300 = ' # aed581 ' ; var lightGreen400:==:exports . lightGreen400    ' # 9ccc65 ' ;
var min = item . min . codePoint ; var max:==:item . max . codePoint ;
var parent = ref . parent ; var data:==:ref . data ;
var comprehensionForList = this . transformList ( tree . comprehensionForList ) ; var ifExpression:==:this . transformAny ( tree . ifExpression ) ;
var dynCall_viii = Module [ ' dynCall_viii ' ] = asm [ ' dynCall_viii ' ] ; var dynCall_v:==:Module [ ' dynCall_v ' ]    asm [ ' dynCall_v ' ] ;
var path = require ( ' path ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var suc = options . success  |  |  emptyFn ; var error:==:options . error  |  |  emptyFn ;
var FUNCTION_BODY = ' FUNCTION_BODY ' ; var FUNCTION_DECLARATION:==:' FUNCTION_DECLARATION ' ;
var funnelAlign = seriesModel . get ( ' funnelAlign ' ) ; var gap:==:seriesModel . get ( ' gap ' ) ;
var pubsub = imports . pubsub ; var info:==:imports [ ' info ' ] ;
var Panel = imports . Panel ; var settings:==:imports . settings ;
var Navigator = require ( ' Navigator ' ) ; var Switch:==:require ( ' Switch ' ) ;
var searchData = method . searchData ; var sortData:==:method . sortData ;
var o = 0o765 ; var o1:==:0o102 ;
var header = require ( ' gulp - header ' ) ; var eslint:==:require ( ' gulp - eslint ' ) ;
var actions = scrollpane . find ( ' > . test - actions ' ) ; var name:==:context . find ( ' > . test - info . test - name ' ) ;
var fail = grunt . fail ; var verbose:==:grunt . verbose ;
var fulfilled = adapter . fulfilled ; var rejected:==:adapter . rejected ;
var height = this . attribute ( ' height ' ) . Length . toPixels ( ' y ' ) ; var mask:==:element . attribute ( ' mask ' ) . value ;
var linewise = register . linewise ; var blockwise:==:register . blockwise ;
var children = this . _ children ; var storage:==:this . _ _ storage ;
var width = outputTexture . width ; var height:==:outputTexture . height ;
var left = parseInt ( element . style . left )  |  0 ; var top:==:parseInt ( element . style . top )  |  0 ;
var a = ' var a ' ; var b:==:' var b ' ;
var measureNode = this . $ measureNode = dom . createElement ( ' div ' ) ; var style:==:measureNode . style ;
var width = options [ ' width ' ] ; var height:==:options [ ' height ' ] ;
var x = this . textBounds . x ; var y:==:this . textBounds . y ;
var vertices = this . vertices ; var bones:==:this . bones ;
var e = this . element ; var value:==:e . value ;
var d = tree . d = div . lastChild ; var sr:==:tree . sr    div . createShadowRoot ( ) ;
var gl = this . _ gl ; var program:==:this . _ program ;
var isDef = angular . isDefined ; var style:==:( document . body  |  |  document . documentElement ) . style ;
var method = event . data . method ; var args:==:event . data . args ;
var IMPORT_SELECTOR = scope . IMPORT_SELECTOR ; var rootDocument:==:scope . rootDocument ;
var head = document . getElementsByTagName ( ' head ' ) [ 0 ]  |  |  document . documentElement ; var script:==:document . createElement ( ' script ' ) ;
var grunt = require ( ' grunt ' ) ; var semver:==:require ( ' semver ' ) ;
var peerConnection = w . mozrtcPeerConnection  |  |  w . webkitrtcPeerConnection ; var sessionDescription:==:w . mozrtcSessionDescription  |  |  w . rtcSessionDescription ;
var each = Tools . each , trim = Tools . trim ; var DOM:==:domUtils . dom ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var socket:==:require ( ' net ' ) . socket ;
var min = me . min ; var max:==:me . max ;
var utils = require ( ' utils ' ) ; var fs:==:require ( ' fs ' ) ;
var defer = _ tetherBase$Utils . defer ; var flush:==:_ tetherBase$Utils . flush ;
var version = util . getArg ( sourceMap , ' version ' ) ; var sources:==:util . getArg ( sourceMap , ' sources ' ) ;
var scmp = require ( ' scmp ' ) ; var utils:==:require ( ' keystone - utils ' ) ;
var Pool   = loadClass ( ' pool ' ) ; var poolConfig:==:loadClass ( ' poolConfig ' ) ;
var settings = imports . settings ; var util:==:imports . util ;
var params = this . _ params ; var len:==:params . length ;
var editor = this . editor ; var img:==:document . createElement ( ' img ' ) ;
var field = scope . field ( ) ; var attributes:==:field . attributes ( ) ;
var b = fulfillBuiltInSoon ( ' b ' , 30 ) ; var c:==:fulfillSoon ( ' c ' , 10 ) ;
var data = opt_data  |  |  null ; var headers:==:opt_headers  |  |  ;
var cloud2 = cloudLayer . create ( 900 , 170 , ' cloud2 ' ) ; var ground:==:groundLayer . create ( 0 , 360 , ' ground ' ) ;
var util = api . util ; var isHostMethod:==:util . isHostMethod ;
var start = parseISO8601 ( startStr , true ) ; var end:==:parseiso8601 ( entry [ ' gd$when ' ] [ 0 ] [ ' endTime ' ] , true ) ;
var object = that . _ object ( dom ) ; var options:==:object & & object . options ;
var url = this . _ networkMapping . urlForPath ( this . _ fileSystem . path ( ) , filePath ) ; var extension:==:this . _ extensionForPath ( name ) ;
var Dot = reporters . Dot ; var Base:==:reporters . Base ;
var direction = camera . direction ; var normal:==:camera . worldToCameraCoordinatesVector ( cartesian3 . unit_x , normalScratch ) ;
var ADD_TODO_ERROR = exports . ADD_TODO_ERROR = ' ADD_TODO_ERROR ' ; var ADD_TODO_OK:==:exports . ADD_TODO_OK    ' ADD_TODO_OK ' ;
var http = require ( ' http ' ) ; var argv:==:require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ;
var i d = sub1 . i d ; var a:==:new mongooseDocumentArray ( [ sub1 ] ) ;
var destination = this . destination ; var bufferSize:==:this . bufferSize ;
var header = require ( ' gulp - header ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var lastX = instance . lastX ; var lastY:==:instance . lastY ;
var overflowX = _ style . overflowX ; var overflowY:==:_ style . overflowY ;
var assert = require ( ' assert ' ) ; var glob:==:require ( ' glob ' ) ;
var reactNativeInjection = require ( ' reactNativeInjection ' ) ; var reactNativeMount:==:require ( ' reactNativeMount ' ) ;
var value = _ ref2 . value ; var group:==:_ ref2 . group ;
var techniques = model . gltf . techniques ; var technique:==:techniques [ i d ] ;
var del = require ( ' del ' ) ; var eslint:==:require ( ' gulp - eslint ' ) ;
var operation = req . service . api . operations [ req . operation ] ; var output:==:operation . output ;
var args = item . args ; var handler:==:item . handler ;
var s = wb . sheetNames [ idx ] , ws = wb . sheets [ s ]  |  |  ; var r:==:safe_decode_range ( ws [ ' ! ref ' ]  |  |  ' a1 ' ) ;
var lazyLoader = window . wrappedjsObject . lazyLoader ; var data:==:window . wrappedjsObject . data ;
var h = Math . max ( h , controlBarHeight ) ; var w:==:math . max ( 225 , w ) ;
var nodeConsStringType = this . _ nodeConsStringType ; var nodeSlicedStringType:==:this . _ nodeSlicedStringType ;
var clockwise = seriesModel . get ( ' clockwise ' ) ; var roseType:==:seriesModel . get ( ' roseType ' ) ;
var ui = imports . ui ; var collab:==:imports . collab ;
var CLASS_DECLARATION = parseTreeType . class_declaration ; var export_declaration:==:parseTreeType . export_declaration ;
var secondary = props . secondary ; var style:==:props . style ;
var width = this . getPixels ( options . width ) ; var height:==:this . getPixels ( options . height ) ;
var createFunctionDeclaration = parseTreeFactory . createFunctionDeclaration ; var createIdentifierExpression:==:parseTreeFactory . createIdentifierExpression ;
var fs = require ( ' fs ' ) ; var extname:==:path . extname ;
var remote = electron . remote ; var dialog:==:remote . dialog ;
var isObject = leafletHelpers . isObject ; var isArray:==:leafletHelpers . isArray ;
var semiMinorAxis = options . semiMinorAxis ; var ellipsoid:==:options . ellipsoid ;
var Contact = Contacts . Contact ; var contactAddress:==:contacts . contactAddress ;
var myPos = myPosition  |  |  sap . ui . core . popup . dock . beginBottom ; var atPos:==:atPosition  |  |  sap . ui . core . popup . dock . beginTop ;
var info = this . columns [ col_ind ] . info ; var rec:==:this . records [ ind ] ;
var edgeWeakType = this . _ edgeWeakType ; var firstEdgeIndexes:==:this . _ firstEdgeIndexes ;
var windowStartTime = this . _ windowStartTime  |  |  this . _ model . minimumRecordTime ( ) ; var windowEndTime:==:this . _ windowEndTime  |  |  this . _ model . maximumRecordTime ( ) ;
var left = e . clientX - pos . left ; var top:==:e . clientY - pos . top ;
var message = obj . message  |  |  '' ; var program:==:obj . program  |  |  '' ;
var vmValidator = vdom . vmValidator ; var validator:==:vdom . validator ;
var offset = opt_offset  |  |  0 ; var length:==:opt_length  |  |  bytes . length ;
var Output = makePropDecorator ( ' output ' , [ [ ' bindingPropertyName ' , undefined ] ] ) ; var hostBinding:==:makePropDecorator ( ' hostBinding ' , [ [ ' hostPropertyName ' , undefined ] ] ) ;
var port = opts . port ; var label:==:opts . label ? ' ( ' + opts . label+ ' ) ' : '' ;
var loaded = bind ( this , this . loaded ) ; var ready:==:this . ready ;
var Agent = smith . Agent ; var browserTransport:==:smith . browserTransport ;
var caption = options . caption ; var width:==:options . width ;
var path = require ( ' path ' ) ; var debug:==:require ( ' debug ' ) ( ' pm2 : serve ' ) ;
var cellMetadatum = _ ref4 . cellMetadatum ; var index:==:_ ref4 . index ;
var duration = this . getAttribute ( ' data - duration ' ) ; var scrollby:==:this . getAttribute ( ' data - scrollby ' ) ;
var row = tr . createChild ( ' td ' ) . createChild ( ' div ' , ' network - timing - row ' ) ; var bar:==:row . createChild ( ' span ' , ' network - timing - bar ' + className ) ;
var pageX = this . currentTouch . pagex - ( this . initialPagex - this . icon . x ) ; var pagey:==:this . currentTouch . pagey - ( this . initialPagey - this . icon . y ) ;
var installer = imports . installer ; var ui:==:imports . ui ;
var proto = Object . create ( htmlElement . prototype ) ; var indexOf:==:[ ] . indexOf ;
var semiMinorAxis = ellipse . semiMinorAxis ; var show:==:ellipse . show ;
var styleSheet = require ( ' styleSheet ' ) ; var react:==:require ( ' react ' ) ;
var O_RDWR = constants . O_RDWR  |  |  0 ; var O_SYMLINK:==:constants . O_SYMLINK  |  |  0 ;
var argumentIndex = parsedPattern . argumentIndex ; var argumentOffset:==:parsedPattern . argumentOffset ;
var hasOwnProp = docSet . getByLongname ( ' hasOwnProperty ' ) [ 0 ] ; var proto:==:docSet . getByLongname ( ' prototype ' ) [ 0 ] ;
var min = this . _ min = data . min ; var max:==:this . _ max    data . max ;
var options = that . options ; var template:==:options . template ;
var commands = rconf . commands ; var deploy:==:commands & & commands . deploy ;
var scene = document . createElement ( ' a - scene ' ) ; var entity:==:document . createElement ( ' a - entity ' ) ;
var DateTimeSymbols_hi = goog . require ( ' goog . i18n . DateTimeSymbols_hi ' ) ; var DateTimeSymbols_zh:==:goog . require ( ' goog . i18n . DateTimeSymbols_zh ' ) ;
var wallet = tx . wallet ? tx . wallet : profileService . getWallet ( tx . walletId ) ; var config:==:configService . getSync ( ) . wallet ;
var loading_icon = options . loading_icon  |  |  ' fa - spinner fa-2x orange ' ; var loading_text:==:options . loading_text  |  |  '' ;
var visualDataRoleKind = powerbi . visualDataRoleKind ; var dataViewObjects:==:powerbi . dataViewObjects ;
var version = parserConf . version  |  |  2 ; var baseMode:==:codeMirror . getMode ( config , parserConf . baseMode  |  |  ' null ' ) ;
var angleAxis = angleAxisModel . axis ; var polar:==:angleAxis . polar ;
var thead = dom . createElement ( ' thead ' ) ; var tbody:==:dom . createElement ( ' tbody ' ) ;
var config = _ _ dependency10 _ _ . config ; var configure:==:_ _ dependency10 _ _ . configure ;
var node = this . _ nodes [ index ] ; var modifier:==:this . _ modifiers [ index ] ;
var srcPath = ref . srcPath ; var filename:==:ref . filename ;
var dialog = $ ( templates . dialog ) ; var body:==:dialog . find ( ' . modal - body ' ) ;
var offsetWidth = b . offsetWidth ; var offsetHeight:==:b . offsetHeight ;
var backdropDiv = customDialog . backdropDiv _ ; var dialogDiv:==:customDialog . dialogDiv _ ;
var svgEllipsis = powerbi . textMeasurementService . svgEllipsis ; var addTooltip:==:powerbi . visuals . tooltipManager . addTooltip ;
var bufferView = runtime . gltf . bufferViews [ accessor . bufferView ] ; var byteOffset:==:accessor . byteOffset  |  |  0 ;
var width = node . getAttribute ( ' width ' )  |  |  formObject . width ; var height:==:node . getAttribute ( ' height ' )  |  |  formObject . height ;
var EVENT_PREFIX = api . EVENT_PREFIX ; var log:==:window . logFlags  |  |  ;
var win = $ ( window ) ; var w:==:win . width ( ) - widthOffset ;
var panels = imports . panels ; var breakpoints:==:imports . breakpoints ;
var expect = require ( ' expect . js ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var e = new Vector ( ) . copy ( p2 ) . sub ( p1 ) ; var n:==:new Vector ( ) . copy ( e ) . perp ( ) . normalize ( ) ;
var styleSheet = require ( ' styleSheet ' ) ; var testModule:==:require ( ' nativeModules ' ) ;
var previous = child . previousSibling ; var next:==:child . nextSibling ;
var isUpArrow = utilities . isUpArrow ; var isDownArrow:==:utilities . isDownArrow ;
var x = v1 . x + v2 . x ; var y:==:v1 . y + v2 . y ;
var flowStartTimes = timelineData . flowStartTimes ; var flowEndTimes:==:timelineData . flowEndTimes ;
var naturalWidth = image . naturalWidth ; var naturalHeight:==:image . naturalHeight ;
var path = array . path + ' . ' ; var keys:==:Object . keys ( fields ) ;
var expect = chai . expect ; var file:==:chai . file ;
var props = this . props ; var w:==:extractNumber ( props . width , 0 ) ;
var layout = imports . layout ; var panels:==:imports . panels ;
var browserify = require ( ' browserify ' ) ; var transform:==:require ( ' vinyl - transform ' ) ;
var async = require ( ' async ' ) ; var querystring:==:require ( ' querystring ' ) ;
var foo = this [ ' foobar ' ] ; var foo:==:' foo ' ;
var breakpoints = imports . breakpoints ; var debug:==:imports . debugger ;
var r = this . $ composeBuffer ( data , hashId , key , e ) ; var buffer:==:r . bufferToUse ;
var POSITION_INDEX = pointPrimitive . position_index = 1 ; var color_index:==:pointPrimitive . color_index    2 ;
var data = dataString ; var graph:==:document . getElementById ( ' graph ' ) ;
var task = gRequire ( ' task ' ) ; var help:==:gRequire ( ' help ' ) ;
var api = this . api ( true ) . columns . adjust ( ) ; var settings:==:api . settings ( ) [ 0 ] ;
var phase = this . phase ; var pcm:==:this . pcm . samples [ ch ] ;
var CALL = traceur . syntax . predefinedName . call ; var runtime:==:traceur . syntax . predefinedName . runtime ;
var doneList = this . _ doneList ; var len:==:doneList . length ;
var gulp = require ( ' gulp ' ) ; var istanbul:==:require ( ' istanbul ' ) ;
var entity = updater . entity ; var i d:==:entity . i d ;
var yRange = this . yRange ; var zRange:==:this . zRange ;
var async = require ( ' async ' ) ; var chalk:==:require ( ' chalk ' ) ;
var blueGrey800 = exports . blueGrey800 = ' # 37474f ' ; var blueGrey900:==:exports . blueGrey900    ' # 263238 ' ;
var nodeIdOffset = this . _ nodeIdOffset ; var nodeFieldCount:==:this . _ nodeFieldCount ;
var rotate = data . rotate ; var scaleX:==:data . scaleX ;
var Runner = mocha . Runner ; var Test:==:mocha . Test ;
var pg = require ( paths . pg ) ; var query_native:==:require ( paths . query_native ) ;
var should     = require ( ' should ' ) ; var fs:==:require ( ' fs ' ) ;
var context = scene . context ; var framebuffer:==:passState . framebuffer ;
var shadowOffsety = style . shadowOffsety ; var lineWidth:==:style . hasStroke ( ) ? style . lineWidth : 0 ;
var apply = spyOn ( $ rootScope , ' $ apply ' ) . and . callThrough ( ) ; var cancel:==:spyOn ( $ browser . defer , ' cancel ' ) . and . callThrough ( ) ;
var spriteMaterial = game . physics . p2 . createMaterial ( ' spriteMaterial ' , sprite . body ) ; var worldMaterial:==:game . physics . p2 . createMaterial ( ' worldMaterial ' ) ;
var timeSeparator = $ dateFormatter . timeSeparator ( format ) ; var minutesFormat:==:$ dateFormatter . minutesFormat ( format ) ;
var fragmentLoader = new _ fragmentLoader2 . default ( this ) ; var keyLoader:==:new _ keyLoader2 . default ( this ) ;
var identifierGenerator = this . identifierGenerator _ ; var reporter:==:this . reporter _ ;
var c2 = _ addDiv ( ' c2 ' , document . body ) ; var c:==:document . getElementById ( ' container ' ) ;
var high = writePositionScratch . high ; var low:==:writePositionScratch . low ;
var ctx = chart . ctx ; var width:==:chart . canvas . width ;
var karma = require ( ' karma ' ) . Server ; var yargs:==:require ( ' yargs ' ) ;
var options = that . options ; var chunkCount:==:options . chunkCount ;
var configure = imports . configure ; var settings:==:imports . settings ;
var textFill = style . textFill ; var textStroke:==:style . textStroke ;
var mediaStyle = _ props . mediaStyle ; var overlay:==:_ props . overlay ;
var height = parseInt ( obj . style . height ) ; var width:==:parseInt ( obj . style . width ) ;
var type = e . type ; var listeners:==:target . _ c1_listeners    target . _ c1_listeners  |  |  ;
var backdrop = new Animation ( ele . querySelector ( ' . backdrop ' ) ) ; var wrapper:==:new animation ( ele . querySelector ( ' . action - sheet - wrapper ' ) ) ;
var faceUV = options . faceUV  |  |  new Array ( nbfaces ) ; var faceColors:==:options . faceColors ;
var namespace = stencilSet . namespace ( ) ; var stencils:==:stencilSet . stencils ( ) ;
var v1Comp = v1CompParser . exec ( v1Sub )  |  |  [ '' , '' , '' ] ; var v2Comp:==:v2CompParser . exec ( v2Sub )  |  |  [ '' , '' , '' ] ;
var FALSE    = C . FALSE    = 0x8 ; var NULL:==:C . NULL      0x9 ;
var width = _ props6 . width ; var scrollbarSize:==:this . _ scrollbarSize ;
var geometry = options . geometry ; var shadowVolume:==:options . shadowVolume ;
var boundingRectangle = options . boundingRectangle ; var tangentPlane:==:options . tangentPlane ;
var scrollLeft = container . scrollLeft ; var scrollTop:==:container . scrollTop ;
var rule = ' \n ' + selector + ' \n\n ' + ruleBody + ' \n\n ' ; var className:==:classNamePrefix + ( pseudoType  |  |  ' ' ) + classNameSuffix ;
var index = require ( ' indexof ' ) ; var parser:==:require ( ' engine . io - parser ' ) ;
var context = this . _ context ; var canvas:==:context . canvas ;
var top = Math . max ( pxBounds . top , 0 ) ; var left:==:math . max ( pxBounds . left , 0 ) ;
var tok = decodeCss ( tokens [ i ] ) ; var len:==:tok . length ;
var rightBoundary = this . _ rightBoundary ; var topBoundary:==:this . _ topBoundary ;
var material = object . material ; var face:==:intersection . face ;
var anchor = goog . dom . getElement ( ' offscreen - anchor ' ) ; var popup:==:goog . dom . getElement ( ' popup3 ' ) ;
var gt = semver . gt ; var lt:==:semver . lt ;
var cap = ( options . cap = = = 0 ) ? 0 : options . cap  |  |  BABYLON . Mesh . NO_CAP ; var updatable:==:options . updatable ;
var token_type = _ ref . token_type ; var scope:==:_ ref . scope ;
var cellSizeAndPositionGetter = _ ref . cellSizeAndPositionGetter ; var sectionSize:==:_ ref . sectionSize ;
var timestamp = + record . timestamp ; var i d:==:record . i d ;
var column = this . column ( ) ; var line:==:this . line ( ) ;
var menus = imports . menus ; var util:==:imports . util ;
var toString = object . prototype . toString ; var hasOwn:==:object . prototype . hasOwnProperty ;
var s = d3 . select ( this ) ; var trace:==:calcTrace [ 0 ] . trace ;
var ws = require ( ' ws ' ) ; var fs:==:require ( ' fs ' ) ;
var from = this . from < pos  |  |  this . from = = null ? null : this . from - pos + lenBefore ; var to:==:this . to     null ? null : this . to - pos + lenBefore ;
var cache = context . cache ; var registerComponent:==:registerComponentForCache ( ctor . options , write ) ;
var canvas = document . createElement ( ' canvas ' ) ; var render:==:ol . render . toContext ( canvas . getContext ( ' 2d ' ) ) ;
var vel2 = calcRollingFriction_vel2 ; var vel:==:calcRollingFriction_vel ;
var granularity = wallGeometry . _ granularity ; var ellipsoid:==:wallGeometry . _ ellipsoid ;
var g = a . max_length ; var i:==:a . static_tree ;
var index = math . index ; var Matrix:==:math . type . Matrix ;
var highlight = $ ( ' . codeMirror - gutter - text . ' + highlightClass , wrapper ) ; var svg:==:document . createElementns ( svg_ns , ' svg ' ) ;
var topOverlay = this . topOverlay . clone . wtTable . holder ; var bottomOverlay:==:this . bottomOverlay . clone ? this . bottomOverlay . clone . wtTable . holder : null ;
var addMarkerToGroup = leafletMarkersHelpers . addMarkerToGroup ; var createMarker:==:leafletMarkersHelpers . createMarker ;
var validateFindRequest = localUtils . validateFindRequest ; var validateSort:==:localUtils . validateSort ;
var show = _ props . show ; var style:==:_ props . style ;
var template = options . template  |  |  '' ; var controller:==:options . controller ;
var color = symbolMeta . color ; var dataIndex:==:symbolMeta . dataIndex ;
var c9 = imports . c9 ; var layout:==:imports . layout ;
var extensions = this . extensions ; var options:==:this . options ;
var jumpList = vimGlobalState . jumpList ; var cachedCursor:==:jumpList . cachedCursor ;
var transition = operation . transition ; var wait:==:operation . wait ;
var geometryUpdater = this . _ geometryUpdater ; var onTerrain:==:geometryUpdater . _ onTerrain ;
var _ memcpy = Module [ ' _ memcpy ' ] = asm [ ' _ memcpy ' ] ; var _ strncpy:==:Module [ ' _ strncpy ' ]    asm [ ' _ strncpy ' ] ;
var x1 = Math . max ( a . x1 , b . x1 ) ; var y1:==:Math . max ( a . y1 , b . y1 ) ;
var client = gameServer . clients [ i ] . playerTracker ; var len:==:client . cells . length ;
var author = ( msg . author  |  |  '' ) ; var apool:==:msg . apool ;
var each = zrUtil . each ; var toCamelCase:==:formatUtil . toCamelCase ;
var bind = require ( ' bind ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var height = controller . _ ellipsoid . cartesianToCartographic ( camera . positionwc , scratchCartographic ) . height ; var globe:==:controller . _ globe ;
var k = kf ( key ) ; var bucket:==:self . buckets [ k . v ] ;
var linesAbove = opts . linesAbove  |  |  2 ; var linesBelow:==:opts . linesBelow  |  |  3 ;
var currentFrameIndex = playData . currentFrameIndex ; var height:==:viewport . height ;
var frep = require ( ' gulp - frep ' ) ; var fs:==:require ( ' fs ' ) ;
var tube = options . tube  |  |  0 . 5 ; var radialSegments:==:options . radialSegments  |  |  32 ;
var Promise = utils . Promise ; var eventEmitter:==:_ dereq _ ( ' events ' ) . eventEmitter ;
var host = curl . hostname ; var port:==:parseInt ( curl . port , 10 ) ;
var round = data . round ; var i d:==:data . i d ;
var texture = node . _ texture , rect = this . _ textureCoord ; var dColor:==:this . _ displayedColor ;
var pluginError = require ( ' gulp - util ' ) . pluginError ; var path:==:require ( ' path ' ) ;
var routes = _ state . routes ; var params:==:_ state . params ;
var panels = imports . panels ; var find:==:imports . find ;
var config = options . config  |  |  ' ide ' ; var settings:==:options . settings  |  |  ' devel ' ;
var title = document . getElementById ( ' title - pin ' ) ; var screen:==:document . getElementById ( ' cp - pin - screen ' ) ;
var extend = require ( ' util ' ) . _ extend ; var format:==:require ( ' util ' ) . format ;
var provider = this . provider ; var graph:==:this . graph ;
var l = 0 + ( sleft ? pleft . sizeCalculated + this . padding : 0 ) ; var t:==:height - ( sbottom ? pbottom . sizeCalculated + this . padding : 0 ) - pprev . sizeCalculated ;
var w = parseInt ( $ ( ' # resizeWindowWidth ' ) . value ) ; var h:==:parseInt ( $ ( ' # resizeWindowHeight ' ) . value ) ;
var ITEMS = exports . ITEMS = [ _ rowAbove . key , _ rowBelow . key , _ columnLeft . key , _ columnRight . key , _ clearColumn . key , _ removeRow . key , _ removeColumn . key , _ undo . key , _ redo . key , _ readOnly . key , _ alignment . key , _ separator . key ] ; var _ predefinedItems:==:( _ predefinedItems2    , _ defineProperty ( _ predefinedItems2 , _ separator . key , _ separator2 . default ) , _ defineProperty ( _ predefinedItems2 , _ rowAbove . key , _ rowAbove2 . default ) , _ defineProperty ( _ predefinedItems2 , _ rowBelow . key , _ rowBelow2 . default ) , _ defineProperty ( _ predefinedItems2 , _ columnLeft . key , _ columnLeft2 . default ) , _ defineProperty ( _ predefinedItems2 , _ columnRight . key , _ columnRight2 . default ) , _ defineProperty ( _ predefinedItems2 , _ clearColumn . key , _ clearColumn2 . default ) , _ defineProperty ( _ predefinedItems2 , _ removeRow . key , _ removeRow2 . default ) , _ defineProperty ( _ predefinedItems2 , _ removeColumn . key , _ removeColumn2 . default ) , _ defineProperty ( _ predefinedItems2 , _ undo . key , _ undo2 . default ) , _ defineProperty ( _ predefinedItems2 , _ redo . key , _ redo2 . default ) , _ defineProperty ( _ predefinedItems2 , _ readOnly . key , _ readOnly2 . default ) , _ defineProperty ( _ predefinedItems2 , _ alignment . key , _ alignment2 . default ) , _ predefinedItems2 ) ;
var index = tile . index ; var set:==:tilesets [ index ] ;
var astLexer = struct ( ' astLexer ' ) ; var binaryErrorHandler:==:struct ( ' binaryErrorHandler ' ) ;
var uglify   = require ( ' gulp - uglifyjs ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var hand = game . player . hand ; var steps:==:game . player . steps ;
var showNotInRange = options . showNotInRange  |  |  false ; var onClick:==:options . onClick  |  |  function ( ) ;
var dim = options . dim  |  |  ; var h:==:dim . h  |  |  0 ;
var getEntityKeyForSelection = require ( ' getEntityKeyForSelection ' ) ; var getSampleStateForTesting:==:require ( ' getSampleStateForTesting ' ) ;
var clientLeft = element . clientLeft  |  |  document . body . clientLeft  |  |  0 ; var scrollTop:==:window . pageyOffset  |  |  element . scrollTop  |  |  document . body . scrollTop ;
var rimraf = require ( ' rimraf ' ) ; var tsb:==:require ( ' gulp - tsb ' ) ;
var connector = this . app . components . _ _ connector _ _ ; var sessionService:==:this . app . get ( ' sessionService ' ) ;
var isObject = angular . isObject ; var isString:==:angular . isString ;
var nodeFieldCount = this . _ nodeFieldCount ; var nodes:==:this . nodes ;
var withCredentials = _ fallbackIfUndefined ( item . withCredentials , model . get ( ' withCredentials ' ) ) ; var hlsjsdefault:==:model . get ( ' hlsjsdefault ' ) ;
var s = prev . segmentEnd ; var e:==:typeScript . max ( s + 512 , end ) ;
var shell   = require ( ' gulp - shell ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var defaultViewport = options . defaultViewport ; var linkService:==:options . linkService ;
var Rx = document . Rx ; var helpers:==:Rx . helpers ;
var data = JSON . parse ( $ ( this ) . attr ( ' data ' ) ) ; var day:==:$ ( this ) . attr ( ' day ' ) ;
var extendDirectory = path . normalize ( options . extendDirectory  |  |  ' ' ) ; var extendOptions:==:options . extendOptions  |  |  ;
var http = require ( ' http ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var Person = db . model ( ' gh4928 ' , personSchema ) ; var collection:==:db . model ( ' gh4928_0 ' , collectionSchema ) ;
var uuid    = require ( ' node - uuid ' ) ; var validator:==:require ( ' validator ' ) ;
var util   = require ( ' util ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var cpy1 = shape . cpy1 ; var cpx2:==:shape . cpx2 ;
var redA200 = exports . redA200 = ' # ff5252 ' ; var redA400:==:exports . redA400    ' # ff1744 ' ;
var orphan = params . orphan = = = true ; var prune:==:params . prune      true ;
var appsService = _ appJsServicesAppsService [ ' default ' ] ; var broadcastService:==:_ appJsServicesBroadcastService [ ' default ' ] ;
var text = ' text ' ; var main:==:' main ' ;
var lexer = this . lexer ; var stream:==:lexer . stream ;
var domain = y [ p . key ] . domain ( ) ; var range:==:y [ p . key ] . range ( ) ;
var SOCKET = docSet . getByLongname ( ' socket ' ) [ 0 ] ; var rocket:==:docSet . getByLongname ( ' rocket ' ) [ 0 ] ;
var f8Colors = require ( ' f8Colors ' ) ; var f8InfoView:==:require ( ' f8InfoView ' ) ;
var path = require ( ' path ' ) ; var bunyan:==:require ( ' bunyan ' ) ;
var through = require ( ' through2 ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var zindex = options . zindex  |  |  beef . dom . getHighestZindex ( ) + 1 ; var opacity:==:options . opacity  |  |  70 ;
var width = this . viewport . width ; var height:==:this . viewport . height ;
var state = codeMirror . copyState ( outer , cm . getTokenAt ( from ) . state ) ; var tabSize:==:cm . getOption ( ' tabSize ' ) ;
var deps = mod . deps ; var callback:==:mod . callback ;
var el = opt_el  |  |  adData . context ; var winPos:==:opt_winpos  |  |  left : 0 , top : 0 ;
var left = ! isNan ( rect . left ) ? rect . left : null ; var width:==:! isNan ( rect . width ) ? rect . width : 0 ;
var colorAllocatorFactory = options . colorAllocatorFactory ; var transformSelects:==:options . transformSelects ;
var worldNormal = intersectheightfield_worldnormal ; var l0:==:intersectheightfield_l0 ;
var sceneEl = this . sceneEl ; var data:==:this . data ;
var r = this . createContactEquation ( planeBody , convexBody , planeShape , convexShape ) ; var projected:==:planeconvex_projected ;
var a = new THREE . Ray ( one3 . clone ( ) , new THREE . Vector3 ( 0 , 0 , 1 ) ) ; var b:==:new THREE . Plane ( ) . setFromNormalAndCoplanarPoint ( new three . vector3 ( 0 , 0 , 1 ) , one3 . clone ( ) . sub ( new three . vector3 ( 0 , 0 , -1 ) ) ) ;
var assert = require ( ' assert ' ) ; var sqlString:==:common . sqlString ;
var traits = identify . traits ( i d : ' userid ' ) ; var email:==:identify . email ( ) ;
var capture = _ props . capture ; var target:==:_ props . target ;
var sqrt = stdlib . Math . sqrt ; var abs:==:stdlib . Math . abs ;
var style = _ props4 . style ; var children:==:_ props4 . children ;
var push = [ ] . push ; var hasOwnProperty:==:object . prototype . hasOwnProperty ;
var results = suite . results ( ) ; var specs:==:suite . specs ( ) ;
var option = this . getAttribute ( ' data - option ' ) ; var method:==:this . getAttribute ( ' data - method ' ) ;
var start = getTextNodeAndOffsetOf ( $ startLine , startOffset ) ; var end:==:getTextNodeAndOffsetOf ( $ endLine , endOffset ) ;
var registerListener = exports . registerListener = proxySupportCode ( ' registerListener ' ) ; var setDefaultTimeout:==:exports . setDefaultTimeout    proxySupportCode ( ' setDefaultTimeout ' ) ;
var eslint = require ( ' gulp - eslint ' ) ; var gulp:==:require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ;
var start = offsets . start ; var end:==:offsets . end ;
var legend = chart . legend ; var title:==:chart . titleBlock ;
var cd = gd . calcdata ; var ternary:==:gd . _ fullLayout . ternary . _ subplot ;
var singleUse = geofenceValues . singleUse ; var dwellTimeSpan:==:geofenceValues . dwellTimeSpan ;
var Timer = goog . require ( ' goog . Timer ' ) ; var jsunit:==:goog . require ( ' goog . testing . jsunit ' ) ;
var pointers = self . pointers ; var pointer:==:pointers [ objectKeys ( pointers ) [ 0 ] ] ;
var disableTouchRipple = _ props2 . disableTouchRipple ; var focusRippleColor:==:_ props2 . focusRippleColor ;
var net = require ( ' net ' ) ; var tls:==:require ( ' tls ' ) ;
var toolbar = $ ( ' # grid_'+ this . name + ' _ toolbar ' ) ; var summary:==:$ ( ' # grid_'+ this . name + ' _ summary ' ) ;
var DEBUGGING = window . parent . DEBUGGING ; var debug:==:window . parent . debug ;
var offset = data . getLayout ( ' offset ' ) ; var size:==:data . getLayout ( ' size ' ) ;
var planePointToFrom = intersectplane_planepointtofrom ; var dir_scaled_with_t:==:intersectplane_dir_scaled_with_t ;
var base_url = this . notebook . base_url ; var path:==:this . notebook . notebook_path ;
var index = env . notebook . get_selected_index ( ) ; var cell:==:env . notebook . get_cell ( index ) ;
var stepPlot = g . getBooleanOption ( ' stepPlot ' , setName ) ; var color:==:colors [ setIdx ] ;
var type = this . type ; var op:==:opData . op ;
var dataLabelsSettings = this . data . dataLabelsSettings ; var categoryLabelsSettings:==:this . data . categoryLabelsSettings ;
var q = node . getAttribute ( ' quantity ' ) ; var o:==:node . getAttribute ( ' opacity ' ) ;
var p = data . position ; var r:==:data . rotation ;
var div = document . body . appendChild ( document . createElement ( ' div ' ) ) ; var button:==:new te . obj [ 0 ] . button ( title : ' testButton ' , label : ' test',editor : te . obj [ 0 ] . editor ( ) ) ;
var log = require ( dirs . core + ' log ' ) ; var cp:==:require ( dirs . core + ' cp ' ) ;
var canvas = this . canvas ; var x:==:this . x ;
var rootDocument = scope . rootDocument ; var loader:==:scope . loader ;
var days    = makeGetter ( ' days ' ) ; var months:==:makeGetter ( ' months ' ) ;
var isContinuous = legendConfig . isContinuous = = null ? typeof data [ 0 ] = = = ' number ' : legendConfig . isContinuous ; var height:==:isContinuous ? legendConfig . height : lineHeight * data . length ;
var uid = require ( ' uid2 ' ) ; var crypto:==:require ( ' crypto ' ) ;
var dataViewObjects = powerbi . dataViewObjects ; var axisType:==:powerbi . visuals . axisType ;
var radii = defaultValue ( options . radii , defaultRadii ) ; var stackPartitions:==:math . round ( defaultValue ( options . stackPartitions , 10 ) ) ;
var groupByEveryn = require ( ' groupByEveryn ' ) ; var logError:==:require ( ' logError ' ) ;
var modalTerminal = views . modalTerminal ; var modalAlert:==:views . modalAlert ;
var panels = imports . panels ; var scm:==:imports . scm ;
var session = $ . gestures . session ; var options:==:this . options ;
var inherit = _ dereq _ ( ' component - inherit ' ) ; var debug:==:_ dereq _ ( ' debug ' ) ( ' engine . io - client : websocket ' ) ;
var deepPurple300 = exports . deepPurple300 = ' # 9575cd ' ; var deepPurple400:==:exports . deepPurple400    ' # 7e57c2 ' ;
var types = _ . isString ( opts . types ) ? [ opts . types ] : opts . types ; var locations:==:_ . isString ( opts . locations ) ? [ opts . locations ] : opts . locations ;
var set = Ember . set ; var attr:==:DS . attr ;
var util = require ( ' util ' ) ; var conf:==:env . conf . eventDumper  |  |  ;
var w = extractNumber ( props . width , 0 ) ; var h:==:extractNumber ( props . height , 0 ) ;
var array = attribute . array ; var itemSize:==:attribute . itemSize ;
var left = cropBox . left ; var top:==:cropBox . top ;
var color = options . color ; var transform:==:options . transform ;
var columnData = _ column$props . columnData ; var dataKey:==:_ column$props . dataKey ;
var path = require ( ' path ' ) ; var hbs:==:require ( ' express - hbs ' ) ;
var width = view . _ originalDesignResolutionSize . width ; var height:==:view . _ originalDesignResolutionSize . height ;
var graph = this . editorUi . editor . graph ; var view:==:graph . view ;
var req = require ( ' request ' ) ; var debug:==:require ( ' debug ' ) ( ' node - soap ' ) ;
var b2 = $ ( ' b2 ' ) ; var p1:==:$ ( ' p1 ' ) ;
var t = self . time ( ) ; var l:==:( gp ) ? t+gp : self . lasttime ;
var chain = fx . chain ( anims ) ; var length:==:anims . length ;
var sourcesContent = util . getArg ( sourceMap , ' sourcesContent ' , null ) ; var mappings:==:util . getArg ( sourceMap , ' mappings ' ) ;
var floor = Math . floor ; var fromCharCode:==:string . fromCharCode ;
var homography = require ( ' ndarray - homography ' ) ; var fill:==:require ( ' ndarray - fill ' ) ;
var crunch = extras . compressedImage3dTiles . crunch ; var s3tc:==:extras . compressedImage3dTiles . s3tc ;
var registerWrapper = scope . registerWrapper ; var setWrapper:==:scope . setWrapper ;
var data = evt . data ; var listener:==:listeners [ data . type ] ;
var disabledStyle = props . disabledStyle ; var error:==:props . error ;
var width = pageSize . width ; var height:==:pageSize . height ;
var util = require ( ' util ' ) ; var http:==:require ( ' http ' ) ;
var node = this . _ node ; var texture:==:node . _ texture , rect    this . _ textureCoord ;
var join = require ( ' path ' ) . join ; var proc:==:require ( ' child_process ' ) ;
var s = start . clone ( ) . clearTime ( ) ; var e:==:end . clone ( ) . clearTime ( ) ;
var SPREAD_NEW = traceur . syntax . predefinedName . spread_new ; var traceur:==:traceur . syntax . predefinedName . traceur ;
var models = _ _ alloyId28 . models ; var len:==:models . length ;
var BOOLEAN_NUMBER_BINARY_OPERATORS = exports . BOOLEAN_NUMBER_BINARY_OPERATORS = [ ' > ' , ' < ' , ' > = ' , ' < = ' ] ; var EQUALITY_BINARY_OPERATORS:==:exports . EQUALITY_BINARY_OPERATORS    [ '   ' , '    ' , ' ! ' , ' !   ' ] ;
var distanceDisplayConditionProperty = this . _ geometryUpdater . distanceDisplayConditionProperty ; var distanceDisplayCondition:==:distanceDisplayConditionProperty . getValue ( time ) ;
var tooltip = this . $ ( ' . ui - tooltip - top ' ) ; var val:==:this . input . val ( ) ;
var bodyA = def . bodyA ; var bodyB:==:def . bodyB ;
var slice = Array . prototype . slice ; var filter:==:Array . prototype . filter ;
var initializer = this . transformAny ( tree . initializer ) ; var condition:==:this . transformAny ( tree . condition ) ;
var stat = files . statOrNull ( absPath ) ; var mustNotExist:==:self . _ mustNotExist ( absPath ) ;
var array = sfBuilderProvider . builders . array ; var numeric:==:sfBuilderProvider . builders . numeric ;
var type = buffer . getOctetArray ( typeLen ) ; var i d:==:buffer . getOctetArray ( idLen ) ;
var r0 = computeImpulseDenominator_r0 ; var c0:==:computeImpulseDenominator_c0 ;
var extend = require ( ' util ' ) . _ extend ; var assert:==:require ( ' assert ' ) ;
var b = tree . b = sr2 . firstChild ; var shadow:==:tree . shadow    b . firstChild ;
var numIcons = home . numIcons ; var numDividers:==:home . numDividers ;
var layout = imports . layout ; var Divider:==:imports . Divider ;
var block = this . blocks [ i ] ; var l:==:positionBlock . anchor . left ;
var createBinaryOperator = parseTreeFactory . createBinaryOperator ; var createBindingIdentifier:==:parseTreeFactory . createBindingIdentifier ;
var viewMode = options . viewMode ; var container:==:self . container ;
var left = startPoint . left + dx * progress ; var top:==:startPoint . top + dy * progress ;
var home = this . stateStack _ [ this . stateStack _ . length - 2 ] . home ; var superConstructor:==:this . getRuntimeExpression ( ' superConstructor ' ) ;
var browser = ua . browser  |  |  ; var engine:==:ua . engine  |  |  ;
var history = cliCmd . history  |  |  this . history ; var index:==:history . index ;
var prev = record . _ prev ; var next:==:record . _ next ;
var createBlock = parseTreeFactory . createBlock ; var createCallCall:==:parseTreeFactory . createCallCall ;
var cos = Math . cos ; var sqrt:==:Math . sqrt ;
var basedir = defined ( opts . basedir , self . _ options . basedir , process . cwd ( ) ) ; var expose:==:opts . expose ;
var atNameMemberTransformer = traceur . codegeneration . atNameMemberTransformer ; var blockBindingTransformer:==:traceur . codegeneration . blockBindingTransformer ;
var promise = this . _ promise ; var callback:==:this . _ callback ;
var height = options . height  |  |  10 . 0 ; var subdivisions:==:options . subdivisions  |  |  1  |  0 ;
var size = options . size  |  |  new BABYLON . Vector3 ( 1 , 1 , 1 ) ; var angle:==:options . angle  |  |  0 ;
var takeDoc = type . _ takeDoc ; var append:==:type . _ append ;
var dynCall_ii = Module [ ' dynCall_ii ' ] = asm [ ' dynCall_ii ' ] ; var dynCall_iiii:==:Module [ ' dynCall_iiii ' ]    asm [ ' dynCall_iiii ' ] ;
var state = this . state ; var eventType:==:input . eventType ;
var style = this . style ; var vmlEl:==:this . _ vmlEl ;
var editor = this . editor ; var settings:==:this . settings  |  |  dialogShowMask : true ;
var Container = getComponent ( ' container ' ) ; var editorContainer:==:getComponent ( ' editorContainer ' , true ) ;
var htmlDocument = imports . htmlDocument ; var jsDocument:==:imports . jsDocument ;
var clone = _ _ webpack_require _ _ ( 5 ) . clone ; var format:==:_ _ webpack_require _ _ ( 11 ) . format ;
var dirname = path . dirname ( mainAppScript ) ; var basename:==:path . basename ( mainAppScript ) ;
var React = require ( ' React ' ) ; var reactComponentWithPureRenderMixin:==:require ( ' reactComponentWithPureRenderMixin ' ) ;
var yScale1 = chart . scales . yScale1 ; var yScale2:==:chart . scales . yScale2 ;
var c = rejectSoon ( ' rejected - c ' , 10 ) ; var d:==:'d ' ;
var dynCall_viid = Module [ ' dynCall_viid ' ] = asm [ ' dynCall_viid ' ] ; var dynCall_viiiiii:==:Module [ ' dynCall_viiiiii ' ]    asm [ ' dynCall_viiiiii ' ] ;
var addAsset = options . addAsset ; var relPath:==:sourceItem . relPath ;
var ya = Axes . getFromId ( gd , trace . yaxis  |  |  ' y ' ) ; var aax:==:trace . aaxis ;
var nameStatement = traceur . syntax . trees . nameStatement ; var newExpression:==:traceur . syntax . trees . newExpression ;
var client = Nightwatch . client ( ) ; var api:==:Nightwatch . api ( ) ;
var self = this . self ; var options:==:self . options ;
var removeRangeFromContentState = require ( ' removeRangeFromContentState ' ) ; var splitBlockInContentState:==:require ( ' splitBlockInContentState ' ) ;
var fontSizeUnit = fontSizeUnit  |  |  ' 10px ' ; var fontType:==:fontType  |  |  ' helvetica ' ;
var scrollParent = this . scrollParent ( elem , false , true ) ; var scrollbarWidth:==:this . scrollbarWidth ( body_regex . test ( scrollParent . tagName ) ) ;
var   END_TO_END       = 2 ; var   END_TO_START:==:3 ;
var t = this . _ globalTransform . getTranslation ( ) ; var s:==:this . actualSize . clone ( ) ;
var defaultColor = parameters . defaultColor ! = = undefined ? parameters . defaultColor : new three . color ( 0x000000 ) ; var defaultAlpha:==:parameters . defaultAlpha !    undefined ? parameters . defaultAlpha : 1 . 0 ;
var path = require ( ' path ' ) ; var os:==:require ( ' os ' ) ;
var signature = query . signature ; var timestamp:==:query . timestamp ;
var test = require ( ' utest ' ) ; var assert:==:require ( ' assert ' ) ;
var height = image . height ; var left:==:cropBox . left - canvas . left - image . left ;
var coord = coords [ i ] ; var i d:==:this . _ tileClippingMaskiDs [ coord . i d ]    ( idNext++ ) < < 3 ;
var width = option . width ; var height:==:option . height ;
var tmpVec3 = canvas2d_1 . _ tmpVec3 ; var tmpMtx:==:canvas2d_1 . _ tmpMtx ;
var settings = $ ( this ) . data ( ' settings ' ) ; var items:==:settings . items ;
var author = utils . getInputTextValue ( context . $ authorInputElt ) ; var content:==:utils . getInputTextValue ( context . $ contentInputElt , evt ) ;
var summary = createDom ( ' div ' , className : ' summary ' ) ; var results:==:find ( ' . results ' ) ;
var template = props . template  |  |  baseProto . templateString ; var extensible:==:props . extensible    props . hasOwnProperty ( ' extensible ' ) ? props . extensible : true ;
var ocean = param : ' ocean ' , surface : ' surface ' , level : ' currents ' , overlayType : ' default ' ; var attr:==:_ . clone ( configuration . attributes ) ;
var env = opts . env  |  |  process . env ; var platform:==:opts . platform  |  |  process . platform ;
var display_name = DDG . getProperty ( item , ' stream . channel . display_name ' ) ; var status:==:ddg . getProperty ( item,'stream . channel . status ' ) ;
var noContentRenderer = _ props3 . noContentRenderer ; var style:==:_ props3 . style ;
var name = this . name ; var descriptor:==:this . descriptor ;
var fs = require ( ' fs ' ) ; var git:==:require ( ' gulp - git ' ) ;
var el = this . el ; var animationFrameid:==:el . animationFrameid ;
var rangeNode = math . expression . node . rangeNode ; var indexNode:==:math . expression . node . indexNode ;
var chunkLengths = this . chunkLengths ; var i d:==:elementsData . i d ( wrapper ) ;
var form = event . data . formElem ; var noAnimation:==:event . data . noAnimation ;
var iterator = state . iterator ; var subscriber:==:state . subscriber ;
var Grouping = sap . ui . table . tableUtils . grouping ; var tableUtils:==:sap . ui . table . tableUtils ;
var basename = require ( ' path ' ) . basename ; var Stream:==:require ( ' stream ' ) . Stream ;
var select = editor . find ( ' select ' ) ; var selectMouseDownListener:==:jasmine . createSpy ( ' selectMouseDownListener ' ) ;
var ambient = this . ambient ? this . ambient . buildCode ( builder , ' c ' ) : undefined ; var shadow:==:this . shadow ? this . shadow . buildCode ( builder , ' c ' ) : undefined ;
var debug = utils . debug ; var isValidDefaultValue:==:propertyTypes . isValidDefaultValue ;
var createObjectLiteralExpression = parseTreeFactory . createObjectLiteralExpression ; var createOperatorToken:==:parseTreeFactory . createOperatorToken ;
var del = require ( ' del ' ) ; var filter:==:require ( ' gulp - filter ' ) ;
var moment = require ( ' moment ' ) ; var utils:==:require ( ' keystone - utils ' ) ;
var b = arr . $ indexFor ( ' b ' ) ; var c:==:arr . $ indexFor ( ' c ' ) ;
var React = require ( ' React ' ) ; var unindent:==:require ( ' unindent ' ) ;
var opts = _ _ alloyId29 . opts  |  |  ; var models:==:_ _ alloyId28 . models ;
var findTarget = scope . findTarget ; var allShadows:==:scope . targetFinding . allShadows . bind ( scope . targetFinding ) ;
var el = prepSettings . el ; var flags:==:prepSettings . flags ;
var uglify = require ( ' gulp - uglify ' ) ; var util:==:require ( ' gulp - util ' ) ;
var minimatch = require ( ' minimatch ' ) ; var path:==:require ( ' path ' ) ;
var autorun = mobx . autorun ; var iterall:==:require ( ' iterall ' ) ;
var tileHeight = defaultValue ( options . tileHeight , parseInt ( format . getAttribute ( ' height ' ) , 10 ) ) ; var minimumLevel:==:defaultValue ( options . minimumLevel , parseInt ( tilesetsList [ 0 ] . getAttribute ( ' order ' ) , 10 ) ) ;
var metadata = safeJsonParse ( item . metadata ) ; var i d:==:metadata . i d ;
var Node = scope . wrappers . Node ; var mixin:==:scope . mixin ;
var node = this . _ node , cmd ; var parentCmd:==:this . _ parentCmd  |  |  this ;
var home = this . _ home ; var card:==:home . cardManager . findCardFromCardList ( data ) ;
var ref = new Ref ( data . ref . num , data . ref . gen ) ; var catalog:==:pdfManager . pdfDocument . catalog ;
var path = require ( ' path ' ) ; var specReporter:==:require ( ' jasmine - spec - reporter ' ) . specReporter ;
var core = require ( ' core ' ) ; var dateFromId:==:calc . dateFromId ;
var ctrl = e . ctrlKey |  | false ; var shift:==:e . shiftKey  |  |  false ;
var checkMergeObjectArg = mergeHelpers . checkMergeObjectArg ; var checkMergeIntoObjectArg:==:mergeHelpers . checkMergeIntoObjectArg ;
var uglify   = require ( ' gulp - uglify ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var high = encodedCenter . high ; var low:==:cartesian4 . fromElements ( encodedCenter . low . x , encodedCenter . low . y , encodedCenter . low . z , boundingSphere . radius , scratchUpdatePolylineCartesian4 ) ;
var say = docSet . getByLongname ( ' person#say ' ) [ 0 ] ; var sayCallback:==:docSet . getByLongname ( ' person~sayCallback ' ) [ 0 ] ;
var Injectable = makeDecorator ( ' injectable ' , [ ] ) ; var self:==:makeParamDecorator ( ' self ' , [ ] ) ;
var results = e . data . results ; var editor:==:tab . editor ;
var framebuffer = passState . framebuffer ; var length:==:commands . length ;
var b = s . bottom ; var p:==:this . properties ;
var generateMipMaps = options . generateMipMaps ? options . generateMipMaps : false ; var generateDepthTexture:==:options . generateDepthTexture ? options . generateDepthTexture : false ;
var promiseAnimation = animationModule . promiseAnimation ; var animation:==:animationModule . animation ;
var path = require ( ' path ' ) ; var shell:==:require ( ' shelljs ' ) ;
var el = this . el ; var uuid:==:el . getObject3d ( ' mesh ' ) . material . uuid ;
var os = require ( ' os ' ) ; var request:==:require ( ' request ' ) ;
var beta = grunt . option ( ' beta ' )  |  |  false ; var alpha:==:grunt . option ( ' alpha ' )  |  |  false ;
var trailTime = property . getValueOrUndefined ( pathGraphics . _ trailTime , time ) ; var availability:==:entity . _ availability ;
var positions = new Array ( positionsLength ) ; var holes:==:holesLength > 0 ? new array ( holesLength ) : undefined ;
var scroll = this . scroll ; var bounds:==:this . bounds ;
var ystep = this . ystep ; var paintType:==:this . paintType ;
var circle = s . circle ( 10 , 20 , 30 ) ; var rect:==:s . rect ( 10 , 20 , 30 , 40 ) ;
var time = sidx . earliest_presentation_time ; var start:==:info . range . start + sidx . offset + sidx . first_offset + sidx . size ;
var binaryErrorHandler = struct ( ' binaryErrorHandler ' ) ; var location:==:struct ( ' location ' ) ;
var isEmpty = require ( ' isEmpty ' ) ; var merge:==:require ( ' merge ' ) ;
var currency = getOption ( options , ' currency ' , ' string ' , undefined , undefined ) ; var currencyDisplay:==:getOption ( options , ' currencyDisplay ' , ' string ' , [ ' code ' , ' symbol ' , ' name ' ] , ' symbol ' ) ;
var createLegend = powerbi . visuals . createLegend ; var minervaAnimationDuration:==:powerbi . visuals . animatorCommon . minervaAnimationDuration ;
var gapSize = options . gapSize  |  |  1 ; var dashNb:==:options . dashNb  |  |  200 ;
var os = require ( ' os ' ) ; var util:==:require ( ' util ' ) ;
var doc = wrap ( document ) ; var win:==:wrap ( window ) ;
var path   = require ( ' path ' ) ; var connect:==:require ( ' connect ' ) ;
var view = µ . view ( ) ; var log:==:µ . log ( ) ;
var path = require ( ' path ' ) ; var glob:==:require ( ' glob ' ) ;
var tilelon = tileLayout . tilelon ; var tilelat:==:tileLayout . tilelat ;
var layer = selection . selectAll ( ' . layer - hit ' ) ; var mode:==:context . mode ( ) ;
var zip = require ( ' gulp - zip ' ) ; var clean:==:require ( ' gulp - clean ' ) ;
var currentScale = this . _ currentScale ; var currentScaleValue:==:this . _ currentScaleValue ;
var anchor = vim . sel . anchor ; var head:==:vim . sel . head ;
var Review = db . model ( ' dynrefReview ' , reviewSchema , ' gh3108_0 ' ) ; var item1:==:db . model ( ' dynrefItem1 ' , item1Schema , ' gh3108_1 ' ) ;
var num_htrees = out . num_htrees = decodeVarLenUint8 ( br ) + 1 ; var context_map:==:out . context_map    new uint8Array ( context_map_size ) ;
var URI = channel . URI ; var channelData:==:this . channelDataFromChannel ( channel ) ;
var i d = w2utils . escapeId ( recid ) ; var children:==:rec . w2ui . children ;
var JSX_PLACEHOLDER = ' JSX_PLACEHOLDER ' ; var JSX_SPREAD_ATTRIBUTE:==:' JSX_SPREAD_ATTRIBUTE ' ;
var capabilities = this . api . capabilities  |  |  ; var browserName:==:( capabilities . browserName & & capabilities . browserName . toUpperCase ( ) )  |  |  '' ;
var s = _ getElementObject ( source ) , sId = _ getId ( s ) ; var t:==:_ getElementObject ( target ) , tId    _ getId ( t ) ;
var minHeight = minHeightFunc ( granularity , ellipsoid ) ; var maxHeight:==:maxHeightFunc ( granularity , ellipsoid ) ;
var r = Math . floor ( color . r * 255 ) ; var g:==:Math . floor ( color . g * 255 ) ;
var results = data . results = ; var raw:==:data . raw ;
var margin = yearLabel . get ( ' margin ' ) ; var pos:==:yearLabel . get ( ' position ' ) ;
var dataType = window . opener . sap . ui . base . dataType ; var managedObject:==:window . opener . sap . ui . base . managedObject ;
var accessToken = data . accessToken ; var accountId:==:data . accountId ;
var pixelConverter = jsCommon . pixelConverter ; var selectionId:==:powerbi . visuals . selectionId ;
var boundary = this . boundary ; var stream:==:this . stream ;
var beforeEach = hooks . beforeEach ; var afterEach:==:hooks . afterEach ;
var ports = response . options . ports ; var baudrates:==:response . options . baudrates ;
var displayNameKeys = powerbi . visuals . slicerUtil . displayNameKeys ; var selectMenu:==:powerbi . visual . controls . selectMenu ;
var keyEscapeUtils = require ( ' keyEscapeUtils ' ) ; var traverseStackChildren:==:require ( ' traverseStackChildren ' ) ;
var vb = sphereTrimesh_vb ; var vc:==:sphereTrimesh_vc ;
var filePath = event . data . filePath ; var handlerPath:==:event . data . handlerPath ;
var last_logic = this . last_logic ; var last_field:==:this . last_field ;
var pixelConverter = jsCommon . pixelConverter ; var dataRoleHelper:==:powerbi . data . dataRoleHelper ;
var protocol = window . location . protocol ; var host:==:window . location . host ;
var Text = require ( ' f8Text ' ) ; var touchableHighlight:==:require ( ' touchableHighlight ' ) ;
var firebaseAdapter = firepad . firebaseAdapter ; var entityManager:==:firepad . entityManager ;
var rowSpan = cell . rowSpan  |  |  1 ; var colSpan:==:cell . colSpan  |  |  1 ;
var preview = imports . preview ; var postMessage:==:imports [ ' remote . postMessage ' ] ;
var reactDebugTool = require ( ' reactDebugTool ' ) ; var lowPriorityWarning:==:require ( ' lowPriorityWarning ' ) ;
var take = grunt . option ( ' take ' ) ; var compare:==:grunt . option ( ' compare ' ) ;
var bottomRadius = cylinderGeometry . _ bottomRadius ; var slices:==:cylinderGeometry . _ slices ;
var reactdomInjection = require ( ' reactdomInjection ' ) ; var reactdomStackInjection:==:require ( ' reactdomStackInjection ' ) ;
var initializer = this . transformLoopIninitaliser _ ( tree . initializer ) ; var collection:==:this . transformAny ( tree . collection ) ;
var oApp = this . _ oApp ; var oPage:==:this . _ oPage ;
var resolve = deferred . resolve ; var reject:==:deferred . reject ;
var x = ' x ' ; var newProperty:==:' newProperty ' ;
var ONESEC = constants . ONESEC ; var EPOCHJD:==:constants . EPOCHJD ;
var maybeWrapAsError = util . maybeWrapAsError ; var canEvaluate:==:util . canEvaluate ;
var d = new mathArray . expression . node . constantNode ( 4 ) ; var n:==:new mathArray . expression . node . arrayNode ( [ a , b , c , d ] ) ;
var showMinorLabels = this . options . showMinorLabels & & this . options . orientation . axis ! = = ' none ' ; var showMajorLabels:==:this . options . showMajorLabels & & this . options . orientation . axis !    ' none ' ;
var columnCount = _ props . columnCount ; var width:==:_ props . width ;
var apiInformation = windows . foundation . metadata . apiInformation ; var orientationSensor:==:windows . devices . sensors . orientationSensor ;
var selectable = this . viewOptions . thumbnail_selectable ; var selected:==:' selected ' ;
var commonjs = require ( ' rollup - plugin - commonjs ' ) ; var json:==:require ( ' rollup - plugin - json ' ) ;
var client = helper . client ( ) ; var query:==:client . query ( ' select name from person order by name ' ) ;
var a = [ ' foo ' , ' bar ' , boo ( ) , ' baz ' , ' x ' , ' y ' ] . join ( ' ' ) ; var b:==:[ ' foo ' , ' bar ' , boo ( ) , ' baz ' , ' x ' , ' y ' ] . join ( ' - ' ) ;
var a = value : ' a ' ; var b:==:value : ' b ' ;
var ui = app . ns ( ' ui ' ) ; var services:==:app . ns ( ' services ' ) ;
var events = require ( ' events ' ) ; var debug:==:require ( ' debug ' ) ( ' nodemon ' ) ;
var c = tree . c = div . firstChild ; var d:==:tree . d    div . lastChild ;
var head = cm . getCursor ( ' head ' ) ; var inVisualBlock:==:vimGlobalState . macroModeState . lastInsertModeChanges . inVisualBlock ;
var clockIdentifiers = globalization . clockIdentifiers ; var dateTimeFormatter:==:globalization . dateTimeFormatting . dateTimeFormatter ;
var concat   = require ( ' broccoli - concat ' ) ; var uglify:==:require ( ' broccoli - uglify - sourcemap ' ) ;
var cellRenderer = props . cellRenderer ; var cellRangeRenderer:==:props . cellRangeRenderer ;
var a = JSON . parse ( ' ' b ' : 1,'c ' : 2,'d ' : 3,'e ' : 4 ' ) ; var b:==:JSON . parse ( ' ' 12040200 ' : 1 , ' a ' : 2 , ' b ' : 2 ' ) ;
var each = zrUtil . each ; var asc:==:numberUtil . asc ;
var tokenType = traceur . syntax . tokenType ; var argumentList:==:traceur . syntax . trees . argumentList ;
var streamInfo = track . streamInfo ; var i d:==:streamInfo . i d ;
var gl = context . _ gl ; var maximumRenderbufferSize:==:contextLimits . maximumRenderbufferSize ;
var tx = ( childTransform . tx * renderSession . resolution ) + renderSession . shakex ; var ty:==:( childTransform . ty * renderSession . resolution ) + renderSession . shakey ;
var cordova = require ( ' cordova ' ) ; var action:==:msg . action ;
var left = this . container . find ( ' . calendar . left ' ) ; var right:==:this . container . find ( ' . calendar . right ' ) ;
var granularity = defaultValue ( options . granularity , cesiumMath . radians_per_degree ) ; var ellipsoid:==:defaultValue ( options . ellipsoid , ellipsoid . wgs84 ) ;
var esprima = require ( ' esprima ' ) ; var escodegen:==:require ( ' escodegen ' ) ;
var instances = parameters . instances ; var projection:==:parameters . projection ;
var m = JSON . parse ( JSON . stringify ( minify_options ) ) ; var o:==:JSON . parse ( JSON . stringify ( options ) ) ;
var shadowRoot = scope . wrappers . shadowRoot ; var treeScope:==:scope . treeScope ;
var dynCall_iii = Module [ ' dynCall_iii ' ] = asm [ ' dynCall_iii ' ] ; var dynCall_diii:==:Module [ ' dynCall_diii ' ]    asm [ ' dynCall_diii ' ] ;
var Divider = imports . Divider ; var save:==:imports . save ;
var promise = this . promise ; var handler:==:this . handler ;
var group = cfg . group = = = undefined?0 : cfg . group ; var layers:==:cfg . layers      undefined?~0 : cfg . layers ;
var height = svg . getAttribute ( ' height ' ) ; var width:==:svg . getAttribute ( ' width ' ) ;
var createAssignmentExpression = parseTreeFactory . createAssignmentExpression ; var createCallCall:==:parseTreeFactory . createCallCall ;
var V = parseInt ( dt . formats . v ( d ) , 10 ) ; var w:==:parseInt ( dt . formats . w ( d ) , 10 ) ;
var legend = legendAndSeriesInfo . legend . dataPoints ; var seriesSources:==:legendAndSeriesInfo . seriesSources ;
var filter = req . query . filter  |  |  '' ; var page:==:Math . max ( 1 , req . query . page  |  |  1 ) ;
var channelEvaluators = runtimeAnimation . channelEvaluators ; var length:==:channelEvaluators . length ;
var textAlign = textAlign  |  |  ' center ' ; var container:==:container  |  |  ' # specLabels ' ;
var request = require ( ' request ' ) ; var vm:==:require ( ' vm ' ) ;
var width = parseInt ( localStorage . width ? localStorage . width : settings . defaultWidth ) ; var height:==:parseInt ( localStorage . height ? localStorage . height : settings . defaultHeight ) ;
var leftOverlay = wot . wtOverlays . leftOverlay ; var wtTable:==:wot . wtTable ;
var encode = require ( ' base64-encode ' ) ; var cors:==:require ( ' has - cors ' ) ;
var cipherTransformFactory = coreCrypto . cipherTransformFactory ; var lexer:==:coreParser . lexer ;
var debug = imports . debugger ; var settings:==:imports . settings ;
var condition = renameAll ( renames , tree . condition ) ; var increment:==:renameAll ( renames , tree . increment ) ;
var fs = require ( ' hexo - fs ' ) ; var highlight:==:require ( ' hexo - util ' ) . highlight ;
var glob = require ( ' glob ' ) ; var yaml:==:require ( ' js - yaml ' ) ;
var newChild = unwrap ( newChildWrapper ) ; var refChild:==:refChildWrapper ? unwrap ( refChildWrapper ) : null ;
var literalToken = tree . value . literalToken ; var v:==:literalToken . value ;
var type = message . type ; var delivery:==:message . delivery ;
var participants = document . getElementById ( ' participants ' )  |  |  document . body ; var call:==:document . getElementById ( ' start - calling ' ) ;
var should = require ( ' should ' ) ; var moment:==:require ( ' moment ' ) ;
var exaggeration = defaultValue ( options . exaggeration , 1 . 0 ) ; var includeWebMercatort:==:defaultValue ( options . includeWebMercatort , false ) ;
var nodes = cluster . nodes ( data ) ; var links:==:cluster . links ( nodes ) ;
var languages = handler . languages ; var extensions:==:handler . extensions ;
var view = this . view ; var event:==:seg . event ;
var row = state . jump . row ; var column:==:state . jump . column ;
var list = Parsers . list ; var seq:==:Parsers . seq ;
var properties = item . properties  |  |  ; var keys:==:Object . keys ( properties ) ;
var paper = this . _ paper ; var font:==:this . _ font ;
var setInnerhtml = require ( ' setInnerhtml ' ) ; var setTextContent:==:require ( ' setTextContent ' ) ;
var columnNumber = this . _ breakpoint . _ columnNumber ; var condition:==:this . _ breakpoint . condition ( ) ;
var settings = imports . settings ; var experimental:==:imports [ ' preferences . experimental ' ] ;
var path = require ( ' path ' ) ; var intercept:==:require ( ' intercept - stdout ' ) ;
var projection = renderSession . projection ; var offset:==:renderSession . offset ;
var join = _ _ webpack_require _ _ ( 3 ) . join ; var stringify:==:_ _ webpack_require _ _ ( 11 ) . stringify ;
var y = ' y ' ; var z:==:' z ' ;
var authorPool = ws . authorPoolParsed ; var colorPool:==:ws . colorPoolParsed ;
var Compiler = _ _ dependency4 _ _ . Compiler ; var compile:==:_ _ dependency4 _ _ . compile ;
var timeToPixel = this . _ timeToPixel ; var pixelWindowLeft:==:this . _ pixelWindowLeft ;
var timeout = ref . timeout ; var propCount:==:ref . propCount ;
var context = scene . _ context ; var environmentState:==:scene . _ environmentState ;
var coef = this . _ coef ; var xTable:==:this . _ xTable ;
var isArray = array . isArray ; var isString:==:string . isString ;
var remote = data . basic [ 0 ] . event . remote ; var title:==:busy . querySelector ( ' # ' + makeFirstEventid ( ' title ' ) ) ;
var a = new constantNode ( 2 ) ; var n:==:new functionNode ( s , [ a ] ) ;
var parseTree = traceur . syntax . trees . parseTree ; var parseTreeType:==:traceur . syntax . trees . parseTreeType ;
var high = result . high ; var low:==:result . low ;
var render = preact . render ; var createClass:==:preactCompat . createClass ;
var boundingSphere = primitive . getGeometryInstanceAttributes ( ' rect ' ) . boundingSphere ; var center:==:boundingSphere . center ;
var Book = db . model ( ' bookHarmony ' , bookSchema , getCollectionName ( ) ) ; var author:==:db . model ( ' authorHarmony ' , authorSchema , getCollectionName ( ) ) ;
var fs    = require ( ' fs ' ) ; var debug:==:require ( ' debug ' ) ( ' pm2 : monit ' ) ;
var max = Math . log ( this . options . max ) ; var min:==:this . options . min      0 ? 0 : Math . log ( this . options . min ) ;
var separator = element . data ( ' split ' )  |  |  element . data ( ' separator ' )  |  |  ' + ' ; var short:==:! helper . isFalse ( element . data ( ' short ' ) ) ;
var DELIMITERS = SVG . FONTDATA . DELIMITERS ; var H:==:' H ' , V    ' V ' ;
var registerWrapper = scope . registerWrapper ; var snapshotNodeList:==:scope . snapshotNodeList ;
var path = require ( ' path ' ) ; var muk:==:require ( ' muk ' ) ;
var variableDeclarationList = traceur . syntax . trees . variableDeclarationList ; var variableStatement:==:traceur . syntax . trees . variableStatement ;
var port = document . getElementById ( ' port ' ) ; var directory:==:document . getElementById ( ' directory ' ) ;
var iter = goog . iter . consume ( ' ABCDEFG ' . split ( '' ) , 10 ) ; var ex:==:assertThrows ( function ( ) iter . next ( ) ) ;
var setInterval = window . setInterval ; var setTimeout:==:window . setTimeout ;
var delegateConfig = instance . get ( ' delegateConfig ' ) ; var proxy:==:instance . get ( ' proxy ' ) ;
var seriesIndex = payload . seriesIndex ; var dataIndex:==:payload . dataIndex ;
var col = columns [ i ] ; var asSorting:==:col . asSorting ;
var ReactDOM = require ( ' ReactDOM ' ) ; var userAgent:==:require ( ' userAgent ' ) ;
var analytics = imports [ ' analytics ' ] ; var Types:==:require ( ' frontdoor ' ) . Types ;
var utils = require ( ' keystone - utils ' ) ; var debug:==:require ( ' debug ' ) ( ' keystone : core : list : getSearchFilters ' ) ;
var row = rows . shift ( ) ; var rev:==:JSON . parse ( row . data ) . _ rev ;
var from = this . from ; var distance:==:distanceFromIntersection ( from , this . _ direction , position ) ;
var isBool = sharedUtil . isBool ; var isDict:==:corePrimitives . isDict ;
var promptChar = this . options . promptChar ; var numberFormat:==:kendo . getCulture ( this . options . culture ) . numberFormat ;
var itemsToDisplay = this . itemsToDisplay ; var dataStartIndex:==:this . dataStartIndex ;
var rimraf = require ( ' rimraf ' ) ; var chalk:==:require ( ' chalk ' ) ;
var tw = this . tw + this . pad ; var th:==:this . th + this . pad ;
var proc = imports . proc ; var http:==:imports . http ;
var dx5 = mxUtils . getValue ( this . style , ' dx5 ' , ' 0 ' ) ; var dy5:==:mxUtils . getValue ( this . style , ' dy5 ' , ' 0 ' ) ;
var X = opt_X  |  |  GLOBAL . X ; var model:==:X . lookup ( modelName ) ;
var animationEasing = animatableModel . getShallow ( ' animationEasing ' + postfix ) ; var animationDelay:==:animatableModel . getShallow ( ' animationDelay ' + postfix ) ;
var https = require ( ' https ' ) ; var request:==:require ( ' request ' ) ;
var u = ( a . yuv_p _ ) ; var v:==:( a . yuv_p_off + bG ) ;
var request = evt . request ; var body:==:request . body ;
var info = sharedUtil . info ; var isArray:==:sharedUtil . isArray ;
var selectOtherMonths = this . _ get ( inst , ' selectOtherMonths ' ) ; var calculateWeek:==:this . _ get ( inst , ' calculateWeek ' )  |  |  this . iso8601Week ;
var x = pointer . x ; var y:==:pointer . y ;
var network = options . network ; var showNotInRange:==:options . showNotInRange  |  |  false ;
var bunyan = require ( ' bunyan ' ) ; var restify:==:require ( ' restify ' ) ;
var getCanvasPattern = pattern . prototype . getCanvasPattern ; var abs:==:math . abs ;
var min = d3 . min ( yields ) ; var max:==:d3 . max ( yields ) ;
var selectionManager = powerbi . visuals . utility . selectionManager ; var createEnumType:==:powerbi . createEnumType ;
var jsonStream = require ( ' jsonStream ' ) ; var through:==:require ( ' through2 ' ) ;
var forwardMethodsToWrapper = scope . forwardMethodsToWrapper ; var getTreeScope:==:scope . getTreeScope ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var util:==:require ( ' util ' ) ;
var val2 = w2utils . isDate ( val2 , w2utils . settings . dateFormat , true ) ; var val3:==:w2utils . isDate ( val3 , w2utils . settings . dateFormat , true ) ;
var post = store . createRecord ( ' post ' , i d : ' a - post - id ' , name : ' the parley letter ' ) ; var comment:==:store . createRecord ( ' comment ' , i d : ' some - uuid ' , name : ' letters are fun ' , post : post ) ;
var scrollValue = this . scrollValue ( ) ; var scrollSize:==:this . scrollSize ( ) ;
var start = cursorFromBoundaryPoint ( range . startContainer , range . startOffset ) ; var end:==:cursorFromBoundaryPoint ( range . endContainer , range . endOffset ) ;
var shims = bowerDeps [ ' ember - cli - shims ' ] & & checker . for ( ' ember - cli - shims ' , ' bower ' ) ; var semver:==:require ( ' semver ' ) ;
var context = this . context _ ; var contextTextState:==:this . contextTextState _ ;
var parent = runtime . gltf . nodes [ parentID ] ; var children:==:parent . children ;
var b = [ ' bar ' ] ; var c:==:splice_function ( a , 10 , pos - 20 ) ;
var clean = require ( ' gulp - clean - css ' ) ; var notify:==:require ( ' gulp - notify ' ) ;
var name = path . substring ( 0 , path . length - extname . length ) ; var i18n:==:file . box . i18n ;
var route = ref . route ; var href:==:ref . href ;
var profile = _ ref . profile ; var expires_at:==:_ ref . expires_at ;
var points = this . points ; var times:==:this . times ;
var left = leftScratchArray ; var right:==:rightScratchArray ;
var detach = self . _ simpleBind ( self . detach , self ) ; var onCloseSuccess:==:self . config [ ' onCloseSuccess ' ]  |  |  angular . noop ;
var nodeId = nodeIds [ i ] ; var node:==:this . _ nodes [ nodeId ] ;
var menu = this . menu ; var checkboxContainer:==:this . checkboxContainer ;
var att = attachment ; var bone:==:slot . bone ;
var extend = require ( ' extend ' ) ; var autoprefixer:==:require ( ' autoprefixer ' ) ;
var replace = require ( ' gulp - replace ' ) ; var octophant:==:require ( ' octophant ' ) ;
var reactNativeViewAttributes = require ( ' reactNativeViewAttributes ' ) ; var set:==:require ( ' set ' ) ;
var tempCanvas = $ ( ' tempCanvas ' ) ; var video:==:$ ( ' video ' ) ;
var pending = this . pendingTabs _ . shift ( ) ; var index:==:this . tabBar _ . indexOfChild ( pending ) ;
var b = model . bones [ i ] ; var ik:==:b . ik ;
var fs = require ( ' fs ' ) ; var utils:==:require ( ' utils ' ) ;
var index = bsCollapseCtrl . $ targets . indexOf ( element ) ; var active:==:bsCollapseCtrl . $ activeIndexes ( ) ;
var a11 = this . a11 ; var a12:==:this . a12 ;
var currDB = currConn . getdb ( currdbName ) ; var targetdb:==:targetConn . getdb ( targetdbName ) ;
var startEmpty = options . startEmpty ; var realRoot:==:options . realRoot ;
var m = this . meta , h = this . recordType , b = h . prototype . fields , l = b . items , i = b . length , j ; var g:==:this . getRoot ( a ) , e    g . length , d    e , k    true ;
var Cursor = firepad . Cursor ; var textOperation:==:firepad . textOperation ;
var setLastName = docSet . getByLongname ( ' setLastName ' ) [ 0 ] ; var setManager:==:docSet . getByLongname ( ' setManager ' ) [ 0 ] ;
var rx = require ( ' rx - lite ' ) ; var util:==:require ( ' util ' ) ;
var createSetAccessor = parseTreeFactory . createSetAccessor ; var createThrowStatement:==:parseTreeFactory . createThrowStatement ;
var jsonResultsAdapter = breeze . jsonResultsAdapter ; var abstractDataServiceAdapter:==:breeze . abstractDataServiceAdapter ;
var isStream = corePrimitives . isStream ; var pdfFunction:==:coreFunction . pdfFunction ;
var leftCurlyCount = this . leftCurlyCount ; var rightCurlyCount:==:this . rightCurlyCount ;
var a = goog . partial ( f , ' foo ' ) ; var b:==:goog . partial ( a , ' bar ' ) ;
var getSafeProperty = _ _ webpack_require _ _ ( 17 ) . getSafeProperty ; var setSafeProperty:==:_ _ webpack_require _ _ ( 17 ) . setSafeProperty ;
var objectEnumerationBuilder = powerbi . visuals . objectEnumerationBuilder ; var dataLabelUtils:==:powerbi . visuals . dataLabelUtils ;
var i = cursor_skipWhitespace ( str , start , imax ) ; var c:==:str . charCodeAt ( i ) ;
var createHash = require ( ' crypto ' ) . createHash ; var fork:==:require ( ' child_process ' ) . fork ;
var indicConfig = plan . indicConfig ; var features:==:font . _ layoutEngine . engine . gsubProcessor . features ;
var test1 = chunks . createShaderFromCode ( device , chunks . fullscreenQuadvs , chunks . precisionTestps , ' ptest1 ' ) ; var test2:==:chunks . createShaderFromCode ( device , chunks . fullscreenQuadvs , chunks . precisionTest2ps , ' ptest2 ' ) ;
var memberName = this . props . memberName ; var memberGroups:==:this . props . memberGroups ;
var header = require ( ' gulp - header ' ) ; var footer:==:require ( ' gulp - footer ' ) ;
var SELENIUM_VERSION = process . env . SELENIUM_VERSION  |  |  ' 2 . 53 . 1 ' ; var FIREFOX_BIN:==:process . env . FIREFOX_BIN ;
var uniq = require ( ' lodash . uniq ' ) ; var flatten:==:require ( ' lodash . flatten ' ) ;
var parser = scope . parser ; var importer:==:scope . importer ;
var board = e . target . closest ( ' . board ' ) . addClass ( ' drop - in ' ) ; var shadow:==:board . find ( ' . board - item - shadow ' ) ;
var peakRadius = opts & & opts . peakRadius ! = = undefined ? opts . peakRadius : 0 . 0 ; var height:==:opts & & opts . height !    undefined ? opts . height : 1 . 0 ;
var event = day . events [ 0 ] ; var body:==:client . findElement ( ' body ' ) ;
var x = v . x , y = v . y , z = v . z ; var a:==:Math . cos ( x ) , b    Math . sin ( x ) ;
var timestamp = e . coords . timestamp ; var altitudeAccuracy:==:e . coords . altitudeAccuracy ;
var image = imageRoot . append ( ' svg : image ' ) ; var size:==:gd . _ fullLayout . _ size ;
var lazy = ref . lazy ; var trim:==:ref . trim ;
var parent = elem . parentElement ; var i:==:void 0 ;
var points = this . points [ setIdx ] ; var setName:==:this . setNames [ setIdx ] ;
var React = require ( ' React ' ) ; var blogPostHeader:==:require ( ' blogPostHeader ' ) ;
var minute = parseInt ( cal . find ( ' . minuteselect ' ) . val ( ) , 10 ) ; var second:==:this . timePickerSeconds ? parseInt ( cal . find ( ' . secondselect ' ) . val ( ) , 10 ) : 0 ;
var src = el . getAttribute ( ' data - src ' ) ; var controls:==:el . getAttribute ( ' data - controls ' ) ;
var trace = calcTrace [ 0 ] . trace ; var connectgaps:==:trace . connectgaps ;
var balloon2 = BABYLON . Mesh . createSphere ( ' balloon2 ' , 10 , 2 . 0 , scene ) ; var balloon3:==:babylon . mesh . createSphere ( ' balloon3 ' , 10 , 2 . 0 , scene ) ;
var minLines = this . _ minLines ; var includeComments:==:this . _ includeComments ;
var body = $ ( ' # grid_'+ this . name + ' _ body ' ) ; var columns:==:$ ( ' # grid_'+ this . name + ' _ columns ' ) ;
var col = this . columns [ check ] ; var span:==:( tmp & & tmp . colspan & & ! isNan ( tmp . colspan [ col . field ] ) ? parseInt ( tmp . colspan [ col . field ] ) : 1 ) ;
var https = require ( ' use - https ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var collections = this . _ collections ; var composite:==:this . _ composite ;
var xml2js = require ( ' xml2js ' ) ; var ejs:==:require ( ' ejs ' ) ;
var createEmptyArgumentList = parseTreeFactory . createEmptyArgumentList ; var createErrback:==:parseTreeFactory . createErrback ;
var HAS_TRUE_NATIVE_FULLSCREEN = exports . HAS_TRUE_NATIVE_FULLSCREEN = hasTrueNativeFullScreen ; var has_native_fullscreen_enabled:==:exports . has_native_fullscreen_enabled    nativeFullScreenEnabled ;
var pageInfo = data . pageInfo ; var page:==:new pdfPageProxy ( pageInfo , this ) ;
var aLifeCycleCalls = this . aLifeCycleCalls = [ ] ; var oLifecycleSpy:==:this . oLifecycleSpy    sinon . spy ( ) ;
var sourceLocation = _ . sourceLocation ; var lineBreak:==:_ . lineBreak ;
var layout = context [ ' layout ' ] ; var stride:==:context [ ' stride ' ] ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , zero_to_fifty , valueRange : [ 0,50 ] ) ;
var index = A . _ index ; var ptr:==:A . _ ptr ;
var normal = one3 . clone ( ) . normalize ( ) ; var a:==:new THREE . Plane ( ) . setFromNormalAndCoplanarPoint ( normal , zero3 ) ;
var color = props . color ; var size:==:props . size ;
var cx = data . getLayout ( ' cx ' ) ; var cy:==:data . getLayout ( ' cy ' ) ;
var editorState = require ( ' editorState ' ) ; var moveSelectionBackward:==:require ( ' moveSelectionBackward ' ) ;
var svg = this . svg ; var pie:==:this . pie ;
var a = e . originalEvent ; var files:==:a . target . files  |  |  a . dataTransfer & & a . dataTransfer . files ;
var counterTitle = lineDotChart . defaultSettings . counterTitle ; var isanimated:==:lineDotChart . defaultSettings . isanimated ;
var states = graph . view . states . getValues ( ) ; var token:==:tokens [ 1 ] . toLowerCase ( ) ;
var followSurface = simplePolylineGeometry . _ followSurface ; var granularity:==:simplePolylineGeometry . _ granularity ;
var node = nodeList [ numNodesProcessed++ ] ; var nodeName:==:node . nodeName ;
var orderId = track . orderId ( ) ; var products:==:track . products ( ) ;
var d = a . scaled_width ; var e:==:a . scaled_height ;
var condition = self . condition ; var consequent:==:self . consequent ;
var pedding = require ( ' pedding ' ) ; var multiline:==:require ( ' multiline ' ) ;
var sampleDraftInlineStyle = require ( ' sampleDraftInlineStyle ' ) ; var selectionState:==:require ( ' selectionState ' ) ;
var backupText = $ scope . formData . backupText ; var password:==:$ scope . formData . password ;
var Panel = imports . Panel ; var Tree:==:imports . Tree ;
var tags = extractToSet ( json , ' tags ' ) ; var categories:==:extractToSet ( json , ' categories ' ) ;
var CONDITIONAL_EXPRESSION = ' CONDITIONAL_EXPRESSION ' ; var CONSTRUCT_SIGNATURE:==:' CONSTRUCT_SIGNATURE ' ;
var eventType = pointer_input_map [ eventTypeNormalized ] ; var pointerType:==:ie10_pointer_type_enum [ ev . pointerType ]  |  |  ev . pointerType ;
var createCatchStatement = parseTreeFactory . createCatchStatement ; var createIdentifierToken:==:parseTreeFactory . createIdentifierToken ;
var defineWrapGetter = scope . defineWrapGetter ; var registerWrapper:==:scope . registerWrapper ;
var actions = scheduler . actions ; var index:==:actions . indexOf ( this ) ;
var enable = $ ! enable ; var disableLog:==:$ ! disableLog ;
var string = util . string ; var number:==:util . number ;
var validate = ob . validateUserForDataWriteapi ; var paths:==:ob . paths ;
var exceptRange = ( context . options [ 1 ] & & context . options [ 1 ] . exceptRange ) ; var onlyEquality:==:( context . options [ 1 ] & & context . options [ 1 ] . onlyEquality ) ;
var x = offsetX - xOffset ; var y:==:offsety - yOffset ;
var li = document . createElement ( ' li ' ) ; var timestamp:==:+ record . timestamp ;
var tooltipManager = powerbi . visuals . tooltipManager ; var lessWithPrecision:==:powerbi . double . lessWithPrecision ;
var ROTATION_INDEX = Billboard . ROTATION_INDEX = 9 ; var ALIGNED_AXIS_INDEX:==:Billboard . ALIGNED_AXIS_INDEX    10 ;
var localStore = require ( ' olives ' ) . localStore ; var store:==:require ( ' emily ' ) . store ;
var text = that . options . text ; var value:==:that . options . value ;
var Boolean = platform . Boolean ; var Object:==:platform . Object ;
var type = utils . type ; var toString:==:object . prototype . toString ;
var skinnedNodesIds = model . _ loadResources . skinnedNodesIds ; var nodes:==:model . gltf . nodes ;
var defaultClause = traceur . syntax . trees . defaultClause ; var doWhileStatement:==:traceur . syntax . trees . doWhileStatement ;
var View = require ( ' View ' ) ; var renderApplication:==:require ( ' renderApplication ' ) ;
var w = latestChange . boundingClientRect . width ; var h:==:latestChange . boundingClientRect . height ;
var o = geometry . vertices [ vidx ] ; var s:==:skinned [ vidx ] ;
var tessellation = options . tessellation  |  |  64 ; var arc:==:( options . arc <   0  |  |  options . arc > 1 ) ? 1 . 0 : options . arc  |  |  1 . 0 ;
var stagger = data . stagger ; var maxDuration:==:data . maxDuration ;
var tracks = item . tracks ; var len:==:tracks & & tracks . length ;
var int16 = Fn . int16 ; var uint16:==:Fn . uint16 ;
var Program = traceur . syntax . trees . Program ; var tokenType:==:traceur . syntax . tokenType ;
var is = require ( ' is ' ) ; var del:==:require ( ' obj - case ' ) . del ;
var remote = imports . remote ; var watcher:==:imports . watcher ;
var util = require ( ' util ' ) ; var net:==:require ( ' net ' ) ;
var run = Ember . run ; var all:==:Ember . RSVP . all ;
var express = require ( ' express ' ) ; var passport:==:require ( ' passport ' ) ;
var onKeyDown = _ props3 . onKeyDown ; var onKeyboardFocus:==:_ props3 . onKeyboardFocus ;
var c = new functionNode ( new symbolNode ( ' subtract ' ) , [ new constantNode ( 2 ) , new constantNode ( 3 ) ] ) ; var d:==:new functionNode ( new symbolNode ( ' add ' ) , [ new constantNode ( 4 ) , new constantNode ( 3 ) ] ) ;
var dynCall_iiiii = Module [ ' dynCall_iiiii ' ] = asm [ ' dynCall_iiiii ' ] ; var dynCall_iii:==:Module [ ' dynCall_iii ' ]    asm [ ' dynCall_iii ' ] ;
var h = this . _ indexToValueInSpace ( hash , this . _ hueSpace ) ; var s:==:this . _ indexToValueInSpace ( hash , this . _ satSpace ) ;
var disableSort = _ column$props2 . disableSort ; var headerRenderer:==:_ column$props2 . headerRenderer ;
var forward = document . getElementById ( ' forward ' ) ; var back:==:document . getElementById ( ' back ' ) ;
var from = ref . segment . from ; var to:==:ref . segment . to ;
var x = mpData . get ( coordSys . dimensions [ 0 ] , idx ) ; var y:==:mpData . get ( coordSys . dimensions [ 1 ] , idx ) ;
var checked = $ radio . prop ( ' checked ' ) ; var disabled:==:$ radio . prop ( ' disabled ' ) ;
var first_currency = $ scope . order . first_currency ; var first_issuer:==:$ scope . order . first_issuer ;
var graph = sb . graph ; var values:==:json . values ;
var site = that . _ site ; var measuringPromise:==:that . _ measuringPromise ;
var cascadeExpressionTransformer = traceur . codegeneration . cascadeExpressionTransformer ; var classTransformer:==:traceur . codegeneration . classTransformer ;
var slice = arrayProto . slice ; var concat:==:arrayProto . concat ;
var border = node . getData ( ' border ' ) ; var pos:==:node . pos . getc ( true ) ;
var input = that . input [ 0 ] ; var ignoreCase:==:that . options . ignoreCase ;
var prefilteredCubeMap128 = this . prefilteredCubeMap128  |  |  globalSky128 ; var prefilteredCubeMap64:==:this . prefilteredCubeMap64  |  |  globalSky64 ;
var ch = target . getAttribute ( ' data - ch ' ) * 1 ; var line:==:target . getAttribute ( ' data - line ' ) * 1 ;
var w = texture . baseTexture . width ; var h:==:texture . baseTexture . height ;
var has = _ util . has ; var isArray:==:_ util . isArray ;
var codeMirror = window . frameElement . codeMirror ; var e:==:codeMirror . editor    new editor ( codeMirror . options ) ;
var createFalseLiteral = parseTreeFactory . createFalseLiteral ; var createFunctionExpression:==:parseTreeFactory . createFunctionExpression ;
var el = helpers . entityFactory ( ) ; var objModelEl:==:this . objModelEl    document . createElement ( ' a - obj - model ' ) ;
var b = _ b ; var a:==:_ a ;
var Void = new primitiveType ( ' void ' , 0 , ' v ' ) ; var bool:==:new primitiveType ( ' bool ' , 1 , ' i ' ) ;
var offset = editable . obj . offset ( ) ; var top:==:offset . top ;
var util = require ( ' util ' ) ; var doctrine:==:require ( ' doctrine ' ) ;
var name = arg . name ; var constant:==:constants [ name ] ;
var gulp = require ( ' gulp ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var next = context . next ; var userContext:==:context . userContext ;
var atan = Math . atan ; var exp:==:Math . exp ;
var controller = current . controller ; var template:==:current . templateUrl ;
var config = utils . pkg . config ( packageJSON ) ; var npmIgnore:==:config & & config . npmIgnore ;
var reactInstanceMap = require ( ' reactInstanceMap ' ) ; var reactTestUtils:==:require ( ' reactTestUtils ' ) ;
var Wizard = imports . Wizard ; var wizardPage:==:imports . wizardPage ;
var y = rectData . y ; var width:==:rectData . width ;
var purpleA200 = exports . purpleA200 = ' # e040fb ' ; var purpleA400:==:exports . purpleA400    ' # d500f9 ' ;
var options = $ . merge ( this . options , viz . controller , opt ) ; var v:==:( $ . type ( vertex [ 0 ] )     ' string ' ) ? [ vertex ] : vertex ;
var min = this . options . min = = = 0 ? 0 : Math . log ( this . options . min ) ; var v:==:value      0 ? 0 : Math . log ( value ) ;
var selection = this . selection = options . selection ; var clearCatcher:==:options . clearCatcher ;
var i d = $ target . attr ( ' i d ' ) ; var val:==:$ target . val ( ) ;
var track = mline . track ; var kind:==:mline . kind ;
var execSync = require ( ' child_process ' ) . execSync ; var fs:==:require ( ' fs ' ) ;
var scrollLeft = window . pagexOffset  |  |  docElem . scrollLeft  |  |  body . scrollLeft ; var clientTop:==:docElem . clientTop  |  |  body . clientTop  |  |  0 ;
var Schema = mongoose . Schema ; var moment:==:require ( ' moment ' ) ;
var start = new Range ( 0 , 0 , range . start . row , range . start . column ) ; var end:==:new Range ( range . end . row , range . end . column , Number . MAX_VALUE , Number . MAX_VALUE ) ;
var OUTLINE_WIDTH_INDEX = pointPrimitive . outline_width_index = 4 ; var pixel_size_index:==:pointPrimitive . pixel_size_index    5 ;
var input = element . find ( ' input ' ) ; var ul:==:element . find ( ' ul ' ) ;
var wrap = element . find ( ' md - chips - wrap ' ) ; var controller:==:element . controller ( ' mdChips ' ) ;
var spawn = require ( ' child_process ' ) . spawn ; var uuid:==:require ( ' uuid ' ) ;
var loadHero = sandbox . spy ( scope , ' loadHero ' ) ; var scrollTo:==:sandbox . spy ( window , ' scrollTo ' ) ;
var name = options . entity . name ; var baseClass:==:options . baseClass  |  |  ' base ' ;
var SLICE = traceur . syntax . predefinedName . slice ; var spread:==:traceur . syntax . predefinedName . spread ;
var Color = jsCommon . color ; var createClassAndSelector:==:jsCommon . cssConstants . createClassAndSelector ;
var r = row . cloneNode ( ) ; var t:==:title . cloneNode ( ) ;
var locationX = touch & & touch . locationX ; var locationY:==:touch & & touch . locationY ;
var min = this . _ min = parseDate ( this . min ) ; var max:==:this . _ max    parseDate ( this . max ) ;
var _ require = _ _ webpack_require _ _ ( 1 ) ; var Component:==:_ require . Component ;
var x = numeric . rep ( [ n ] , 0 ) , xj = Array ( n ) ; var b:==:numeric . rep ( [ n ] , 0 ) , bj    Array ( n ) ;
var db = new PouchDB ( dbs . name ) ; var Promise:==:testUtils . promise ;
var b = numberOfVertices + ix + gridx1 * ( iy + 1 ) ; var c:==:numberOfVertices + ( ix + 1 ) + gridx1 * ( iy + 1 ) ;
var width = requiredWidth  |  |  this . _ renderingCanvas . width ; var height:==:requiredHeight  |  |  this . _ renderingCanvas . height ;
var db = this . _ db ; var transaction:==:db . transaction ( ' bookmarks ' ) ;
var v = bi . vectorsWorld ; var cam:==:this . scene . cameraToUseForPointers  |  |  this . scene . activeCamera ;
var input = element . find ( ' input ' ) ; var placeholder:==:element . find ( ' . placeholder ' ) ;
var SHOW_INDEX = pointPrimitive . show_index ; var position_index:==:pointPrimitive . position_index ;
var top = base . top ; var left:==:base . left ;
var a1 = expected [ i ] . locals . a1 ; var b1:==:expected [ i ] . locals . b1 ;
var n = this . colresize . n ; var nw:==:this . colresize . nw ;
var object = require ( ' mout ' ) . object ; var path:==:require ( ' path ' ) ;
var target = e . target ; var tagName:==:target . tagName . toLowerCase ( ) ;
var p = autoEl : i d : this . i d , cls : this . groupCls , layout : ' column ' , renderTo : j , bufferResize : false ; var a:==:xtype : ' container ' , defaultType : this . defaultType , layout : ' form ' , defaults : hideLabel : true , anchor : ' 100% ' ;
var isExcluded = snippetUtils . isExcluded ; var assert:==:require ( ' chai ' ) . assert ;
var width = polyline . width ; var followSurface:==:polyline . followSurface ;
var g = Math . round ( cpGlobal . hueTorgb ( p , q , tg ) * 255 ) ; var b:==:math . round ( cpGlobal . hueTorgb ( p , q , tb ) * 255 ) ;
var proxy   = httpProxy . createProxyServer ( opt . get ( ' proxyOptions ' ) . set ( ' target ' , opt . get ( ' target ' ) ) . tojs ( ) ) ; var target:==:opt . get ( ' target ' ) ;
var y = shape . cy ; var r0:==:Math . max ( shape . r0  |  |  0 , 0 ) ;
var options = $ datepicker . $ options ; var scope:==:$ datepicker . $ scope ;
var started = logEntry . started ; var action:==:logEntry . action ;
var mnc = this . _ iccCard . iccInfo . mnc  |  |  ' 00 ' ; var iccId:==:this . _ iccId ;
var Configuration = _ _ Configuration ( sails ) ; var initializeHooks:==:_ _ initializeHooks ( sails ) ;
var position = Cartesian3 . clone ( camera . position , scratch2dViewportSavedPosition ) ; var transform:==:matrix4 . clone ( camera . transform , scratch2dViewportCameraTransform ) ;
var quality = options . quality = = = undefined ? 3 : options . quality ; var alpha:==:options . alpha  |  |  false ;
var isCmd = corePrimitives . isCmd ; var isStream:==:corePrimitives . isStream ;
var strictNullHandling = typeof options . strictNullHandling = = = ' boolean ' ? options . strictNullHandling : defaults . strictNullHandling ; var skipNulls:==:typeof options . skipNulls      ' boolean ' ? options . skipNulls : defaults . skipNulls ;
var st = m . attributes . st . values ; var length:==:st . length ;
var reactNativeViewAttributes = require ( ' reactNativeViewAttributes ' ) ; var createReactNativeComponentClass:==:require ( ' createReactNativeComponentClass ' ) ;
var isArray = sharedUtil . isArray ; var isBool:==:sharedUtil . isBool ;
var background = getStyleProperty ( item , styleContextStack , ' background ' , null ) ; var lineHeight:==:getStyleProperty ( item , styleContextStack , ' lineHeight ' , 1 ) ;
var breakStatement = traceur . syntax . trees . breakStatement ; var continueStatement:==:traceur . syntax . trees . continueStatement ;
var read = this . readFile . bind ( this ) ; var concurrency:==:this . concurrency ( ) ;
var fs = require ( ' graceful - fs ' ) ; var write:==:require ( ' write ' ) ;
var uglify = require ( ' uglify - js ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var path = require ( ' path ' ) ; var Promise:==:require ( ' rsvp ' ) . Promise ;
var callback = req . query . callback ; var width:==:req . query . maxwidth  |  |  320 ;
var util = _ _ webpack_require _ _ ( 5 ) . util ; var typeOf:==:_ _ webpack_require _ _ ( 407 ) . typeOf ;
var Tokenizer = debugTokenizer ; var mode:==:require ( editor2 . session . $ mode . $ i d ) . mode ;
var sprite = game . add . sprite ( -400 , 0 , ' einstein ' ) ; var tween:==:game . add . tween ( sprite ) ;
var cell = Jupyter . notebook . get_cell ( 0 ) ; var img:==:$ ( ' div . text_cell_render ' ) . find ( ' img ' ) ;
var doc = goog . global . document ; var currentScript:==:doc . currentScript ;
var domPosition = dom . domPosition ; var domException:==:api . domException ;
var client_id = _ ref . client_id ; var redirect_uri:==:_ ref . redirect_uri ;
var enter = ref . enter ; var afterEnter:==:ref . afterEnter ;
var fs = require ( ' fs ' ) ; var muk:==:require ( ' muk ' ) ;
var label = chartinst . labelise ( multi ? labels [ j ] & & labels [ j ] [ i ] : labels [ i ] , multi ? values [ j ] [ i ] : values [ i ] , total ) ; var bar:==:multi ? bars [ j ] [ i ] : bars [ i ] ;
var mime = require ( ' mime ' ) ; var once:==:require ( ' once ' ) ;
var errors = require ( ' restify - errors ' ) ; var tooManyRequestsError:==:errors . tooManyRequestsError ;
var color = _ props . color ; var expandable:==:_ props . expandable ;
var parentNodeInterface = scope . parentNodeInterface ; var nonElementParentNodeInterface:==:scope . nonElementParentNodeInterface ;
var ngElement = this . _ getPreBuiltObjectByKeyId ( staticKeys . instance ( ) . ngElementId ) ; var domElement:==:ngElement . domElement ;
var zmq = require ( ' zmq ' ) ; var socket:==:zmq . socket ( ' push ' ) ;
var reporter = this . reporter _ ; var project:==:this . project _ ;
var preset = this . h ( ' preset ' ) ; var user:==:this . h ( ' user ' ) ;
var v8 = process . versions . v8 ; var node:==:process . versions . node ;
var value = options . value ; var valueSpec:==:options . valueSpec ;
var usedPropTypes = component & & component . usedPropTypes  |  |  [ ] ; var ignorePropsValidation:==:component & & component . ignorePropsValidation  |  |  false ;
var endDate = evt . get ( ' endDate ' ) ; var startDate:==:evt . get ( ' startDate ' ) ;
var leftMarker = document . createTextNode ( leftMarkerChar ) ; var rightMarker:==:document . createTextNode ( rightMarkerChar ) ;
var assert = require ( ' assert ' ) ; var Stream:==:require ( ' stream ' ) . Stream ;
var revenue = this . proxy ( ' properties . revenue ' ) ; var event:==:this . event ( ) ;
var legendObjectProperties = legend : data . legendObjectProperties ; var show:==:powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . donutChartProps . legend . show , this . legend . isVisible ( ) ) ;
var setWrapper = scope . setWrapper ; var unsafeUnwrap:==:scope . unsafeUnwrap ;
var settings = _ this . settings ; var editor:==:this . editor ;
var assert = require ( ' assert ' ) ; var debug:==:require ( ' debug ' ) ( ' loopback : model ' ) ;
var replace = require ( ' gulp - replace ' ) ; var bump:==:require ( ' gulp - bump ' ) ;
var w = this . parseProperty ( iconNode , ' * ' , ' w ' ) ; var h:==:this . parseProperty ( iconNode , ' * ' , ' h ' ) ;
var entityName = model . entityNames . session ; var logger:==:common . logger ;
var thumbnail = thumbnailList . thumbnailMap [ videodata . name ] ; var selected:==:! thumbnail . htmlNode . classList . contains ( ' selected ' ) ;
var lineColor = powerbi . dataViewObject . getValue ( trendProperties , trendLinePropertyNames . lineColor ) ; var transparency:==:powerbi . dataViewObject . getValue ( trendProperties , trendLinePropertyNames . transparency , trendLineHelper . defaults . transparency ) ;
var space = _ space ; var sharp:==:_ sharp ;
var bbox = this . chtmLbboxFor ( 0 ) , bbox = chtml . bbox . empty ( this . chtml ) ; var t:==:chtml . tex . rule_thickness , t    chtml . tex . surd_height , p    t , q , h ;
var sparseMatrix = math . type . sparseMatrix ; var complex:==:math . type . complex ;
var registerName = inputState . registerName ; var sel:==:vim . sel ;
var top = pixelPos . top ; var left:==:pixelPos . left ;
var Platform = require ( ' Platform ' ) ; var nativeModules:==:require ( ' nativeModules ' ) ;
var async = require ( ' async ' ) ; var sinon:==:require ( ' sinon ' ) ;
var decimal = $ . data ( this , ' numeric . decimal ' ) ; var negative:==:$ . data ( this , ' numeric . negative ' ) ;
var output = document . querySelector ( ' output ' ) ; var textarea:==:document . querySelector ( ' textarea ' ) ;
var amberA100 = exports . amberA100 = ' # ffe57f ' ; var amberA200:==:exports . amberA200    ' # ffd740 ' ;
var fontStyle = helpers . getValueOrDefault ( pointLabelOptions . fontStyle , globalDefaults . defaultFontStyle ) ; var fontFamily:==:helpers . getValueOrDefault ( pointLabelOptions . fontFamily , globalDefaults . defaultFontFamily ) ;
var x = Math . max ( Math . abs ( a . x ) , Math . abs ( b . x ) ) ; var y:==:Math . max ( Math . abs ( a . y ) , Math . abs ( b . y ) ) ;
var getRowAction = window . getRowAction ; var getSelectAll:==:window . getSelectAll ;
var packetWriter = common . packetWriter ; var parser:==:common . parser ;
var zoom = ' zoom ' in options ? + options . zoom : startZoom ; var bearing:==:' bearing ' in options ? this . _ normalizeBearing ( options . bearing , startBearing ) : startBearing ;
var fileName = challengeSpec . fileName ; var helpRoom:==:challengeSpec . helpRoom  |  |  ' help ' ;
var setupTestHooks   = blueprintHelpers . setupTestHooks ; var emberNew:==:blueprintHelpers . emberNew ;
var easing = EASING_FUNCTIONS [ data . easing ] ; var fill:==:data . fill ;
var cos = Math . cos ( -angle ) ; var sin:==:Math . sin ( -angle ) ;
var mom = $ . fullCalendar . moment . utc ( ' 2014 - 06 - 08t07 : 30 : 00 ' ) ; var time:==:mom . time ( ) ;
var title = ( U . XML . getNodeText ( node )  |  |  node . getAttribute ( ' title ' )  |  |  '' ) ; var image:==:node . getAttribute ( ' image ' ) ;
var tab = tabs . focussedTab ; var ace:==:tab . editor . ace ;
var progressBar = require ( ' progressBarAndroid ' ) ; var react:==:require ( ' react ' ) ;
var watcher = imports . watcher ; var panels:==:imports . panels ;
var lastIdealStyles = _ state . lastIdealStyles ; var lastIdealVelocities:==:_ state . lastIdealVelocities ;
var envMap = data . envMap ; var sphericalEnvMap:==:data . sphericalEnvMap ;
var setTimeout = global$1 . setTimeout ; var clearTimeout:==:global$1 . clearTimeout ;
var contents = revCache . contents ; var authAttribs:==:cloneObject ( revCache . authAttribs ) ;
var gml = gmlWriter ( dom , value , isGeography ) ; var crs:==:value . crs ;
var Datagrid = imports . Datagrid ; var Terminal:==:imports . Terminal ;
var EOF = coreParser . eof ; var lexer:==:coreParser . lexer ;
var options = that . options ; var tagTemplate:==:options . tagTemplate ;
var pattern = post . pattern ; var source:==:hexo . source ;
var dx = Math . max ( 0 , Math . min ( bounds . width , parseFloat ( mxUtils . getValue ( this . state . style , ' dx ' , this . dx ) ) ) ) ; var dy:==:math . max ( 0 , math . min ( bounds . height , parseFloat ( mxUtils . getValue ( this . state . style , ' dy ' , this . dy ) ) ) ) ;
var Collection = docSet . getByLongname ( ' collection ' ) [ 0 ] ; var length:==:docSet . getByLongname ( ' collection#length ' ) [ 0 ] ;
var remove = authorAttributes . remove ; var apply:==:authorAttributes . apply ;
var request = require ( ' request ' ) ; var globby:==:require ( ' globby ' ) ;
var WIDTH_INDEX = Polyline . WIDTH_INDEX = 2 ; var MATERIAL_INDEX:==:Polyline . MATERIAL_INDEX    3 ;
var beforeInputEventPlugin = require ( ' beforeInputEventPlugin ' ) ; var domProperty:==:require ( ' domProperty ' ) ;
var cone = spherical . cone ; var magnitude:==:defaultValue ( spherical . magnitude , 1 . 0 ) ;
var nonce = utils . toArray ( options . nonce , options . nonceEnc ) ; var pers:==:utils . toArray ( options . pers , options . persEnc ) ;
var file = files & & files . length ? files [ 0 ] : null ; var invalidFile:==:invalidFiles & & invalidFiles . length ? invalidFiles [ 0 ] : null ;
var path = options . path ; var radius:==:options . radius  |  |  1 . 0 ;
var idbKeyRange = goog . global . idbKeyRange  |  |  goog . global . webkitidbKeyRange ; var d:==:new goog . async . deferred ( ) ;
var module = angular . module ( ' books ' , [ ' network ' ] ) ; var Amount:==:ripple . Amount ;
var top = Math . max ( rect . top * zoomFactor + this . _ margins . top , bodyRect . top * zoomFactor ) ; var bottom:==:math . min ( rect . bottom * zoomFactor - this . _ margins . bottom , bodyRect . bottom * zoomFactor ) ;
var keyCommandPlainBackspace = require ( ' keyCommandPlainBackspace ' ) ; var keyCommandPlainDelete:==:require ( ' keyCommandPlainDelete ' ) ;
var q = a1 * a3 + a2Squared - 4 . 0 * a0 ; var r:==:a3Squared * a0 - a1 * a2 * a3 + a1Squared ;
var nconf = require ( ' nconf ' ) ; var semver:==:require ( ' semver ' ) ;
var cyan200 = exports . cyan200 = ' # 80deea ' ; var cyan300:==:exports . cyan300    ' # 4dd0e1 ' ;
var s = parseCssFloat ( hsla [ 1 ] ) ; var l:==:parseCssFloat ( hsla [ 2 ] ) ;
var del = require ( ' del ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var insert = require ( ' gulp - insert ' ) ; var clean:==:require ( ' gulp - clean - css ' ) ;
var start = this . newBlock ( type + ' comp start ' ) ; var skip:==:this . newBlock ( type + ' comp skip ' ) ;
var data = geometryAttribute . data ; var stride:==:data . stride ;
var path = doc . $ _ _ fullPath ( self . path ) ; var owner:==:doc . ownerDocument ? doc . ownerDocument ( ) : doc ;
var account = owners . account ; var providerType:==:account . providerType ;
var exclude = $ testFn ( options . exclude ) ; var include:==:$ testFn ( options . include ) ;
var Formatting = jsCommon . formatting ; var regExpExtensions:==:jsCommon . regExpExtensions ;
var    MATCH = 25 ; var    LIT:==:26 ;
var panels = imports . panels ; var menus:==:imports . menus ;
var FLATTENABLE_KEYS = exports . FLATTENABLE_KEYS = [ ' body ' , ' expressions ' ] ; var FOR_INIT_KEYS:==:exports . FOR_INIT_KEYS    [ ' left ' , ' init ' ] ;
var proc = imports . proc ; var util:==:imports . util ;
var title = _ props . title ; var titleStyle:==:_ props . titleStyle ;
var sinon = require ( ' sinon ' ) ; var Pattern:==:util . Pattern ;
var thumbnail = document . getElementById ( ' thumbnail ' ) ; var thumbnailContainer:==:document . getElementById ( ' thumbnailContainer ' ) ;
var Tokenizer = lexer . Tokenizer ; var Dict:==:definitions . Dict ;
var container = this . container ; var svg:==:this . svg ;
var prev = record . _ prevRemoved ; var next:==:record . _ nextRemoved ;
var shorthandFirst = configuration . shorthandFirst  |  |  false ; var shorthandLast:==:configuration . shorthandLast  |  |  false ;
var document = win . document ; var div:==:document . createElement ( ' div ' ) ;
var a = Fn . bitValue ( 0 ) ; var b:==:fn . bitValue ( 2 ) ;
var option = deviceSelectElement . options [ deviceSelectElement . selectedIndex ] ; var device:==:option . device ;
var x = round4 ( cx + rx * mathCos ( theta + dTheta ) ) ; var y:==:round4 ( cy + ry * mathSin ( theta + dTheta ) * sign ) ;
var id_token_hint = _ ref . id_token_hint ; var login_hint:==:_ ref . login_hint ;
var audio = element . find ( ' audio ' ) , audio_obj = audio [ 0 ] ; var slider:==:element . find ( ' . stream - slider ' ) . data ( ' slider ' ) ;
var operator = result ( ' operator ' , ' keyword ' ) ; var atom:==:result ( ' atom ' , ' atom ' ) ;
var d = desired . mag ( ) ; var speed:==:this . maxspeed ;
var min = Math . min ( red , green , blue ) ; var max:==:Math . max ( red , green , blue ) ;
var findIndex = ' local findIndex ' ; var keys:==:' local keys ' ;
var symbolNode = math . expression . node . symbolNode ; var functionNode:==:math . expression . node . functionNode ;
var path = require ( ' path ' ) ; var test:==:require ( ' tap ' ) . test ;
var s = itemData . start . valueOf ( ) ; var e:==:' end ' in itemData ? itemData . end . valueOf ( ) : itemData . start . valueOf ( ) ;
var cm   = this . cm ; var editor:==:this . editor ;
var opts = clone ( _ opts  |  |  ) ; var prefix:==:_ opts . prefix  |  |  [ ] ;
var url = require ( ' url ' ) ; var debug:==:require ( ' debug ' ) ( ' socket . io : socket ' ) ;
var velocityX = e . gesture . velocityX ; var direction:==:e . gesture . direction ;
var minute = getOption ( options , ' minute ' , ' string ' , [ ' 2-digit ' , ' numeric ' ] , undefined ) ; var second:==:getOption ( options , ' second ' , ' string ' , [ ' 2-digit ' , ' numeric ' ] , undefined ) ;
var accu = _ accu ; var m:==:_ m ;
var vis = args . vis  |  |  graph . vis ; var dotSize:==:this . dotSize ;
var deactivated = ref . deactivated ; var activated:==:ref . activated ;
var colorHelper = powerbi . visuals . colorHelper ; var valueFormatter:==:powerbi . visuals . valueFormatter ;
var vertexPositionBuffer = this . _ vertexPositionBuffer ; var uvPositionBuffer:==:this . _ uvPositionBuffer ;
var when = require ( ' when ' ) ; var fs:==:require ( ' fs ' ) ;
var dispatcher = scope . dispatcher ; var pointermap:==:dispatcher . pointermap ;
var createErrback = parseTreeFactory . createErrback ; var createFunctionExpression:==:parseTreeFactory . createFunctionExpression ;
var dir = old . dir ; var target:==:Trig . angleDeg ( old . x , old . y , old . targetx , old . targety ) ;
var cancel = options . cancel  |  |  function ( ) ; var timeout:==:options . timeout  |  |  2000 ;
var File = source . File ; var Data:==:hexo . model ( ' Data ' ) ;
var nullStream = coreStream . nullStream ; var stream:==:coreStream . stream ;
var jshint = require ( ' gulp - jshint ' ) ; var todo:==:require ( ' gulp - todo ' ) ;
var text = element ( by . binding ( ' example . text ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var hash = $ liHeadsa . get ( key ) . hash . slice ( 1 ) ; var i d:==:$ ( value ) . attr ( ' i d ' )  |  |  getYoDigits ( 6 , ' accordion ' ) ;
var target = evt . target ; var dataset:==:target . dataset  |  |  ;
var idDelta = idDeltaParser . parseShort ( ) ; var idRangeOffset:==:idRangeOffsetParser . parseuShort ( ) ;
var $ el = this . $ el ; var $ form:==:this . $ form ;
var objects = sourceDataView . metadata . objects ; var defaultColor:==:powerbi . dataViewObjects . getFillColor ( objects , objectName : ' dataPoint ' , propertyName : ' defaultColor ' ) ;
var events = this . events ( track . event ( ) ) ; var value:==:track . revenue ( )  |  |  track . value ( )  |  |  0 ;
var debug = imports . debugger ; var util:==:imports . util ;
var M = Math . max ( r , g , b ) ; var m:==:Math . min ( r , g , b ) ;
var displayName = opt_displayname  |  |  ( databaseName + ' name ' ) ; var size:==:opt_size  |  |  5 * 1024 * 1024 ;
var up = Cartesian3 . clone ( this . upWC , setTransformUp ) ; var direction:==:cartesian3 . clone ( this . directionwc , setTransformDirection ) ;
var header = require ( ' gulp - header ' ) ; var jsdoc:==:require ( ' gulp - jsdoc ' ) ;
var dateTimeFormatting = windows . globalization . dateTimeFormatting ; var dateTimeFormatter:==:dateTimeFormatting . dateTimeFormatter ;
var ifd0Length = ifDlengths . ifd0Length ; var ifd0LengthDataSection:==:ifDlengths . ifd0LengthDataSection ;
var uiSourceCode = this . _ breakpoint . uiSourceCode ( ) ; var lineNumber:==:this . _ breakpoint . _ lineNumber ;
var hour = location . astronomy . objects [ 0 ] . events [ i ] . hour ; var minute:==:( ' 0 ' + location . astronomy . objects [ 0 ] . events [ i ] . minute ) . slice ( -2 ) ;
var params = this . params ; var bodyA:==:this . bodyA ;
var contactPhoneKind = contacts . contactPhoneKind ; var contactCardOptions:==:contacts . contactCardOptions ;
var l = utils . readuInt32be ( inp , inOff ) ; var r:==:utils . readuInt32be ( inp , inOff + 4 ) ;
var extend = $ . extend ; var noop:==:$ . noop ;
var transform = element . getAttribute ( ' transform ' ) ; var r:==:transform & & transform . match ( blockly . utils . getRelativexy . xy_regex _ ) ;
var validateIndex = _ _ webpack_require _ _ ( 3 ) . validateIndex ; var getSafeProperty:==:_ _ webpack_require _ _ ( 17 ) . getSafeProperty ;
var fakexmlHttpRequest = fakeXhr . fakexmlHttpRequest ; var assert:==:referee . assert ;
var ALREADY_COMPRESSED = ' ALREADY_COMPRESSED ' ; var MAX_REVISION_NUM:==:options . MAX_REVISION_NUM ;
var children = _ props3 . children ; var fixedHeight:==:_ props3 . fixedHeight ;
var a = m . observable ( 0 ) ; var b:==:m . observable ( 0 ) ;
var abrController = this . abrController = new config . abrController ( this ) ; var bufferController:==:new config . bufferController ( this ) ;
var parseTreeTransformer = traceur . codegeneration . parseTreeTransformer ; var forOfTransformer:==:traceur . codegeneration . forOfTransformer ;
var currentLevel = this . currentLevel ; var level:==:this . levels [ currentLevel ] ;
var col = this . columns [ col_ind ] ; var span:==:( tmp & & tmp . colspan & & col !   null & & ! isNan ( tmp . colspan [ col . field ] ) ? parseInt ( tmp . colspan [ col . field ] ) : 1 ) ;
var Index = math . type . Index ; var Range:==:math . type . Range ;
var rename = require ( ' gulp - rename ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var type = target . dataset . type ; var selector:==:target . dataset . selector ;
var rec = obj . records [ index ] ; var col:==:obj . columns [ column ] ;
var t = percentage ; var x:==:Math . pow ( 1 - t , 2 ) * this . fromPoint . x + ( 2 * t * ( 1 - t ) ) * viaNode . x + math . pow ( t , 2 ) * this . toPoint . x ;
var beta = defaultValue ( options . beta , 0 . 0 ) ; var gamma:==:defaultValue ( options . gamma , 0 . 0 ) ;
var setCustomer = denodeify ( customer . setCustomer ) . bind ( customer ) ; var setProAccount:==:denodeify ( models . user . setProAccount ) . bind ( models . user ) ;
var face = intersection . face ; var vertices:==:object . geometry . vertices ;
var slide = s . slides . eq ( i ) ; var progress:==:slide [ 0 ] . progress ;
var touchmove = fakeDispatch ( ' touchmove ' , 100 , 2 ) ; var touchend:==:fakeDispatch ( ' touchend ' , 100 , 2 ) ;
var addClass = _ vue$util . addClass ; var removeClass:==:_ vue$util . removeClass ;
var oTable = this . byId ( ' oTable ' ) ; var oTableItem:==:this . byId ( ' oTableItem ' ) ;
var axisPointerModel = axisInfo . axisPointerModel ; var scale:==:axisInfo . axis . scale ;
var timestamp = parseInt ( getData ( btn , ' data - timestamp ' ) , 10 ) ; var postEditDuration:==:parseInt ( ajaxify . data . postEditDuration , 10 ) ;
var dataset = this . chart . data . datasets [ arc . _ datasetIndex ] ; var index:==:arc . _ index ;
var width = this . bounds . width ( ) ; var height:==:this . bounds . height ( ) ;
var gulp = require ( ' gulp ' ) ; var tools:==:require ( ' aurelia - tools ' ) ;
var keep_quoted = options . keep_quoted ; var debug:==:options . debug !    false ;
var italics = getStyleProperty ( , styleContextStack , ' italics ' , false ) ; var lineHeight:==:getStyleProperty ( , styleContextStack , ' lineHeight ' , 1 ) ;
var eventPluginUtils = require ( ' eventPluginUtils ' ) ; var eventPropagators:==:require ( ' eventPropagators ' ) ;
var observable = mobx . observable ; var transaction:==:mobx . transaction ;
var Site = require ( ' Site ' ) ; var Marked:==:require ( ' Marked ' ) ;
var c = containers [ i ] ; var offset:==:$ ( c ) . offset ( ) ;
var parseTreeTransformer = traceur . codegeneration . parseTreeTransformer ; var parseTreeType:==:traceur . syntax . trees . parseTreeType ;
var c = rejectThenableSoon ( ' rejected - c ' , 10 ) ; var d:==:rejectThenableSoon ( ' rejected - d ' , 20 ) ;
var length = params . length  |  |  20 ; var width:==:params . width  |  |  20 ;
var colorPropType = require ( ' colorPropType ' ) ; var nativeMethodsMixin:==:require ( ' nativeMethodsMixin ' ) ;
var textColorUnit = textColorUnit  |  |  ' # fff ' ; var textAlign:==:textAlign  |  |  ' center ' ;
var events = expandoStore & & expandoStore . events ; var handle:==:expandoStore & & expandoStore . handle ;
var kind = opts . kind  |  |  ' var ' ; var blockHoist:==:opts . _ blockHoist     null ? 2 : opts . _ blockHoist ;
var uvs = this . uvs ; var indices:==:this . indices ;
var startDateTime = geofenceValues . startDateTime ; var durationTimeSpan:==:geofenceValues . durationTimeSpan ;
var attr = element . attributes [ i ] ; var name:==:attr . name ;
var nav = window . navigator ; var userLang:==:args [ ' lang ' ]  |  |  ( nav . languages & & nav . languages [ 0 ] )  |  |  nav . language  |  |  nav . userLanguage ;
var controller = current . controller ; var scope:==:current . scope ;
var reservedWords = _ identifier . reservedWords ; var keywords:==:_ identifier . keywords ;
var getOwnPropertyNames = object . getOwnPropertyNames ; var defineProperty:==:object . defineProperty ;
var editor = this . editor ; var inSelection:==:e . inSelection ( ) ;
var b = ' b ' ; var c:==:fulfillSoon ( ' c ' , 10 ) ;
var userAgent = navigator . userAgent ; var platform:==:navigator . platform ;
var Node = mod . Node ; var binaryTree:==:mod . binaryTree ;
var raisedButton = _ context$muiTheme . raisedButton ; var disabled:==:props . disabled ;
var a = m . a ; var b:==:m . b ;
var first = Math . min ( this . firstRow , config . firstRow ) ; var last:==:math . max ( this . lastRow , config . lastRow , cells . length ) ;
var key = event . detail . key ; var index:==:event . detail . index ;
var g = e . dygraph ; var stepPlot:==:g . getBooleanOption ( ' stepPlot ' , e . setName ) ;
var appearToClass = data . appearToClass ; var appearActiveClass:==:data . appearActiveClass ;
var merge2 = require ( ' merge2 ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var maxDuration = elementData . maxDuration ; var activeClassName:==:elementData . activeClassName ;
var on = this . sandbox . spy ( this . rgb , ' on ' ) ; var off:==:this . sandbox . spy ( this . rgb , ' off ' ) ;
var sharedClass = require ( ' strong - remoting ' ) . sharedClass ; var extend:==:require ( ' util ' ) . _ extend ;
var ymid = sol . ymid ; var n:==:xs . length ;
var info = xml . getElementsByTagName ( ' info ' ) [ 0 ] ; var common:==:xml . getElementsByTagName ( ' common ' ) [ 0 ] ;
var clientWidth = _ ref . clientWidth ; var scrollHeight:==:_ ref . scrollHeight ;
var Datagrid = imports . Datagrid ; var editors:==:imports . editors ;
var comment = env . store . peekRecord ( ' comment ' , 1 ) ; var post:==:env . store . peekRecord ( ' post ' , 2 ) ;
var res = result . rows . item ( i ) ; var metadata:==:vuvuzela . parse ( res . metadata ) ;
var default_url = options . default_url  |  |  false ; var loading_icon:==:options . loading_icon  |  |  ' fa - spinner fa-2x orange ' ;
var c9 = imports . c9 ; var Editor:==:imports . Editor ;
var samples = options . samples ; var cpuSync:==:options . cpuSync ;
var scrollDirectionHorizontal = state . scrollDirectionHorizontal ; var scrollDirectionVertical:==:state . scrollDirectionVertical ;
var compressVertices = parameters . compressVertices ; var modelMatrix:==:parameters . modelMatrix ;
var type = this . type = event . type ; var target:==:event . target  |  |  event . srcElement ;
var transparency = powerbi . dataViewObject . getValue ( trendProperties , trendLinePropertyNames . transparency , trendLineHelper . defaults . transparency ) ; var style:==:powerbi . dataViewObject . getValue ( trendProperties , trendLinePropertyNames . style , trendLineHelper . defaults . lineStyle ) ;
var type = this . _ currentElement . type ; var constructor:==:this . _ instance & & this . _ instance . constructor ;
var rectangle = options . rectangle ; var granularity:==:defaultValue ( options . granularity , cesiumMath . radians_per_degree ) ;
var stats = data . stats = ; var results:==:data . results ;
var bytes = this . bytes ; var pos:==:this . pos ;
var data = _ ref2 . data ; var post_logout_redirect_uri:==:_ ref2 . post_logout_redirect_uri ;
var finishTransition = options . finishTransition ; var saveState:==:options . saveState ;
var client = ( opts & & opts . client )  |  |  mQuery . client ; var parent:==:( opts & & opts . parent )  |  |  null ;
var child_process = require ( ' child_process ' ) ; var http:==:require ( ' http ' ) ;
var options = this . options ; var hasHighlights:==:options . hasHighlights ;
var head = document . querySelector ( ' head ' ) ; var script:==:document . createElement ( ' script ' ) ;
var start = Math . min ( offsets . start , length ) ; var end:==:typeof offsets . end      ' undefined ' ? start : Math . min ( offsets . end , length ) ;
var Nightscout = window . Nightscout ; var client:==:Nightscout . client ;
var position = data . position ; var act:==:this . actions [ i ]    kind : kind ;
var Plugin = imports . Plugin ; var notification:==:imports [ ' dialog . notification ' ] ;
var EYE_OFFSET_INDEX = Billboard . EYE_OFFSET_INDEX = 3 ; var HORIZONTAL_ORIGIN_INDEX:==:Billboard . HORIZONTAL_ORIGIN_INDEX    4 ;
var day = options . day ; var hour:==:options . hour ;
var enableCollisionDetection = screenSpaceCameraController . enableCollisionDetection ; var minimumCollisionTerrainHeight:==:screenSpaceCameraController . minimumCollisionTerrainHeight ;
var context = task . context ; var i d:==:payload . i d ;
var aspectRatio = options . aspectRatio ; var autoCropArea:==:num ( options . autoCropArea )  |  |  0 . 8 ;
var name = nameList [ i ]  |  |  '' ; var i d:==:dataItem & & dataItem . i d ;
var segmentDataMatch = segmentDataMatches [ i ] ; var segment:==:segmentDataMatch . segment ;
var keyMap = this . _ keyMap ; var data:==:this . _ data ;
var fraction = math . fraction ; var matrix:==:math . matrix ;
var category = page . category ( ) ; var name:==:page . name ( ) ;
var location = this . _ location ; var orient:==:this . _ orient ;
var React = require ( ' React ' ) ; var Header:==:require ( ' Header ' ) ;
var m = Object . create ( matcher ) ; var type:==:typeOf ( expectation ) ;
var cancellationError = errors . cancellationError ; var timeoutError:==:errors . timeoutError ;
var filenames = this . _ index . filenames ; var titles:==:this . _ index . titles ;
var x = xOff + p . map ( h , 0 , hAligns . length - 1 , padding , 400 - padding ) ; var y:==:yOff + p . map ( v , 0 , vAligns . length - 1 , padding , 200 - padding ) ;
var tab = tabs . focussedTab ; var accessList:==:tab . pane . meta . accessList ;
var HAS_POSITIVE_NUMERIC_VALUE = domProperty . injection . has_positive_numeric_value ; var has_overloaded_boolean_value:==:domProperty . injection . has_overloaded_boolean_value ;
var moduleRecords = loader . _ loader . moduleRecords ; var module:==:entry . module    getOrCreateModuleRecord ( entry . name , moduleRecords ) ;
var grid = this . grid ; var isIntersecting:==:shapes . rect . isIntersecting ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var createBlock:==:parseTreeFactory . createBlock ;
var assign = require ( ' object - assign ' ) ; var babel:==:require ( ' babel - core ' ) ;
var node = getRealNode ( this . node ) ; var parentNode:==:node . parentNode ;
var Nightscout = window . Nightscout ; var report_plugins:==:Nightscout . report_plugins ;
var dataGridPage = options . dataGridPage ? options . dataGridPage : $ ( ' # dataGridPage ' ) ; var searchForm:==:options . searchForm ? options . searchForm : $ ( ' # searchForm ' ) ;
var util = imports . util ; var fs:==:imports . fs ;
var validatorError = schemaType . validatorError ; var validationError:==:mongoose . document . validationError ;
var dataProvider = this . _ dataProvider ; var timelineData:==:this . _ timelineData ( ) ;
var supportType = exports . supportType = ' align - content | align - items | align - self | all | animation | animation - delay | animation - direction | animation - duration | animation - fill - mode | animation - iteration - count | animation - name | animation - play - state | animation - timing - function | backface - visibility | background | background - attachment | background - blend - mode | background - clip | background - color | background - image | background - origin | background - position | background - repeat | background - size | border | border - bottom | border - bottom - color | border - bottom - left - radius | border - bottom - right - radius | border - bottom - style | border - bottom - width | border - collapse | border - color | border - image | border - image - outset | border - image - repeat | border - image - slice | border - image - source | border - image - width | border - left | border - left - color | border - left - style | border - left - width | border - radius | border - right | border - right - color | border - right - style | border - right - width | border - spacing | border - style | border - top | border - top - color | border - top - left - radius | border - top - right - radius | border - top - style | border - top - width | border - width | bottom | box - shadow | box - sizing | caption - side | clear | clip | color | column - count | column - fill | column - gap | column - rule | column - rule - color | column - rule - style | column - rule - width | column - span | column - width | columns | content | counter - increment | counter - reset | cursor | direction | display | empty - cells | filter | flex | flex - basis | flex - direction | flex - flow | flex - grow | flex - shrink | flex - wrap | float | font | font - family | font - size | font - size - adjust | font - stretch | font - style | font - variant | font - weight | hanging - punctuation | height | justify - content | left | letter - spacing | line - height | list - style | list - style - image | list - style - position | list - style - type | margin | margin - bottom | margin - left | margin - right | margin - top | max - height | max - width | min - height | min - width | nav - down | nav - index | nav - left | nav - right | nav - up | opacity | order | outline | outline - color | outline - offset | outline - style | outline - width | overflow | overflow - x | overflow - y | padding | padding - bottom | padding - left | padding - right | padding - top | page - break - after | page - break - before | page - break - inside | perspective | perspective - origin | position | quotes | resize | right | tab - size | table - layout | text - align | text - align - last | text - decoration | text - decoration - color | text - decoration - line | text - decoration - style | text - indent | text - justify | text - overflow | text - shadow | text - transform | top | transform | transform - origin | transform - style | transition | transition - delay | transition - duration | transition - property | transition - timing - function | unicode - bidi | vertical - align | visibility | white - space | width | word - break | word - spacing | word - wrap | z - index ' ; var supportFunction:==:exports . supportFunction    ' rgb | rgba | url | attr | counter | counters ' ;
var isArray = leafletHelpers . isArray ; var isNumber:==:leafletHelpers . isNumber ;
var node = instance . activeDrop . get ( ' node ' ) ; var placeholder:==:instance . get ( ' placeholder ' ) ;
var Text = require ( ' f8Text ' ) ; var f8Touchable:==:require ( ' f8Touchable ' ) ;
var mnuWrapPrintMargin = handle . getElement ( ' mnuWrapPrintMargin ' ) ; var wrap:==:editor . getOption ( ' wrap ' ) ;
var child = ast . children [ i ] ; var n:==:this . findNode ( child , pos ) ;
var lookup = FS . lookupPath ( path ) ; var stat:==:fs . stat ( path ) ;
var octophant = require ( ' octophant ' ) ; var sequence:==:require ( ' run - sequence ' ) ;
var page3 = element ( by . i d ( ' page3 ' ) ) ; var status:==:element ( by . i d ( ' status ' ) ) ;
var b = document . body ; var d:==:document . documentElement ;
var actionTag = options [ ' actionTag ' ] ! = null ? options [ ' actionTag ' ] : 0 ; var visible:==:options [ ' visible ' ] !   null ? options [ ' visible ' ] : true ;
var istanbul    = require ( ' istanbul ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var Matrix2D = Crafty . math . Matrix2D ; var Vector2D:==:Crafty . math . Vector2D ;
var xref = this . xref ; var content:==:this . content ;
var c = d3 . select ( this ) ; var trace:==:d . trace ;
var postcss = require ( ' postcss ' ) ; var table:==:require ( ' text - table ' ) ;
var signature = signatures [ signatures . length - 1 ] ; var len:==:signature . parameters . length ;
var log = stdlib . Math . log ; var atan2:==:stdlib . Math . atan2 ;
var CALL = ' CALL ' ; var CPS:==:' CPS ' ;
var index = b . _ index ; var ptr:==:b . _ ptr ;
var stride = this . stride , offset = a . offset + this . ent_offset * stride , w = a . width ; var l:==:( arguments . length - 1 ) ;
var winston = require ( ' winston ' ) ; var util:==:require ( ' util ' ) ;
var parent = node . parent ( ) . prev ( ) ; var checked:==:' unchecked ' ;
var addon = spec . addon ; var timeout:==:spec . timeout ;
var simpleOrientation = windows . devices . sensors . simpleOrientation ; var simpleOrientationSensor:==:windows . devices . sensors . simpleOrientationSensor ;
var quadraticAt = curveTool . quadraticAt ; var cubicAt:==:curveTool . cubicAt ;
var devtools = previewEditor . meta . $ devtools ; var iframe:==:session . iframe ;
var toastAndroid = require ( ' toastAndroid ' ) ; var platform:==:require ( ' platform ' ) ;
var skinNode = ccs . skinNode ; var blendFunc:==:cc . blendFunc ;
var center = this . boundingSphere . center ; var radius:==:this . boundingSphere . radius ;
var repeat = require ( ' repeat - string ' ) ; var extend:==:require ( ' extend ' ) ;
var debug = require ( ' debug ' ) ( ' express : view ' ) ; var path:==:require ( ' path ' ) ;
var o = new operatorNode ( ' + ' , ' add ' , [ a , x ] ) ; var n:==:new functionAssignmentNode ( ' f ' , [ ' x ' ] , o ) ;
var connection = mongojs ( config . mongodb . connectionString , collections ) ; var collection:==:connection . collection ( mongoUtil . settings . historyCollection ) ;
var x = sphere0 . centerWorld . x - sphere1 . centerWorld . x ; var y:==:sphere0 . centerWorld . y - sphere1 . centerWorld . y ;
var supportConstantColor = exports . supportConstantColor = ' aqua | black | blue | fuchsia | gray | green | lime | maroon | navy | olive | orange | purple | red | silver | teal | white | yellow ' ; var supportConstantFonts:==:exports . supportConstantFonts    ' arial | century | comic | courier | garamond | georgia | helvetica | impact | lucida | symbol | system | tahoma | times | trebuchet | utopia | verdana | webdings | sans - serif | serif | monospace ' ;
var matrix = math . matrix ; var range:==:math . range ;
var db = BrowserDB . db . _ db ; var transaction:==:db . transaction ( ' places ' , ' readwrite ' ) ;
var createScopedExpression = parseTreeFactory . createScopedExpression ; var createStringLiteral:==:parseTreeFactory . createStringLiteral ;
var ndarray = require ( ' ndarray ' ) ; var homography:==:require ( ' ndarray - homography ' ) ;
var priorities = this . priorities _ ; var element:==:elements [ 0 ] ;
var forOfStatement = exports . forOfStatement = buildForxStatement ( ' of ' ) ; var forAwaitStatement:==:exports . forAwaitStatement    buildForxStatement ( ' await ' ) ;
var el = this . el ; var sceneEl:==:el . sceneEl ;
var position = $ elem . position ( ) ; var left:==:position . left ;
var nativeMethodsMixin = require ( ' nativeMethodsMixin ' ) ; var reactNativeAttributePayload:==:require ( ' reactNativeAttributePayload ' ) ;
var blue500 = exports . blue500 = ' # 2196f3 ' ; var blue600:==:exports . blue600    ' # 1e88e5 ' ;
var isBuildInsidevs = utils . isBuildInsidevs ( ) ; var isBuildInsidevsCode:==:utils . isBuildInsidevsCode ( ) ;
var user = checkin . user ; var venue:==:checkin . venue ;
var zip = require ( ' gulp - zip ' ) ; var prompt:==:require ( ' gulp - prompt ' ) ;
var root = config . root ; var channel:==:config . channel ;
var edges = this . edges ; var len:==:edges . length ;
var spawn = require ( ' child_process ' ) . spawn ; var plat:==:require ( ' os ' ) . platform ( ) ;
var flat = ( options . flat = = = undefined ) ? true : options . flat ; var sideOrientation:==:( options . sideOrientation      0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ;
var open = options . get ( ' open ' ) ; var browser:==:options . get ( ' browser ' ) ;
var searches   = method . searches ; var searchData:==:method . searchData ;
var node = this . _ node ; var contentSize:==:node . _ contentSize , anchorPoint    node . _ anchorPoint , offsetPoint    node . _ offsetPoint ;
var settings = imports . settings ; var ui:==:imports . ui ;
var len = setters . length ; var caster:==:this . caster ;
var exceptions = opts . exceptions  |  |  [ ] ; var types:==:_ . isString ( opts . types ) ? [ opts . types ] : opts . types ;
var previousSize = _ ref . previousSize ; var scrollOffset:==:_ ref . scrollOffset ;
var a = ' ` Twas brillig , and the slithy toves\nDid gyre and gimble in the wabe : \nAll mimsy were the borogoves,\nAnd the mome raths outgrabe . \n ' ; var b:==:' i am the very model of a modern major general,\ni\'ve information vegetable , animal , and mineral,\ni know the kings of england , and i quote the fights historical,\nFrom marathon to waterloo , in order categorical . \n ' ;
var protos = ! ! pomelo . data . protos?pomelo . data . protos . server : ; var abbrs:==:pomelo . data . abbrs ;
var height = shape . bounds . height ( ) ; var width:==:shape . bounds . width ( ) ;
var overscanColumnCount = props . overscanColumnCount ; var overscanRowCount:==:props . overscanRowCount ;
var worldDiff = orbitCameraInputMouse . worldDiff ; var camera:==:this . entity . camera ;
var EXTEND = ci . EXTEND ; var FORMAT:==:ci . FORMAT ;
var async = require ( ' async ' ) ; var uglify:==:require ( ' uglify - js ' ) ;
var tabManager = imports . tabManager ; var menu:==:imports . menu ;
var receiver = ctx . receiver ; var value:==:ctx . value ;
var handlebars = require ( ' handlebars ' ) ; var reference:==:require ( ' reference ' ) ;
var y = options . y  |  |  100 ; var distance:==:options . distance  |  |  10 ;
var groups = this . style . _ groups ; var isOpaquePass:==:options . isOpaquePass ;
var primitive = groundPrimitive . _ primitive ; var length:==:primitive . _ va . length * 3 ;
var width = shape . width ; var height:==:shape . height ;
var decode = typeof e . decode = = = ' undefined ' ; var back:==:e . backButtonPressed ;
var setActive = denodeify ( customer . setActive ) . bind ( customer ) ; var setProAccount:==:denodeify ( models . user . setProAccount ) . bind ( models . user ) ;
var component = exports . component = oneOfType ( [ func , string ] ) ; var components:==:exports . components    oneOfType ( [ component , object ] ) ;
var outside = element ( by . i d ( ' outside - ng ' ) ) ; var inside:==:element ( by . i d ( ' inside - ng ' ) ) ;
var identifierToken = traceur . syntax . identifierToken ; var keywords:==:traceur . syntax . keywords ;
var db = new PouchDB ( dbs . name ) ; var btoa:==:testUtils . btoa ;
var KIND_PACKAGE = module . exports . KIND_PACKAGE = ' package ' ; var KIND_HIDDEN:==:module . exports . KIND_HIDDEN    ' hidden ' ;
var dropDown = theScope . dropDown ; var multiSelect:==:theScope . multiSelect ;
var labelColor = powerbi . dataViewObject . getValue ( this . legendObjectProperties , visuals . legendProps . labelColor , visuals . legendData . defaultLegendLabelFillColor ) ; var fontSize:==:powerbi . dataViewObject . getValue ( this . legendObjectProperties , visuals . legendProps . fontSize , this . layerLegendData & & this . layerLegendData . fontSize ? this . layerLegendData . fontSize : visuals . svgLegend . defaultFontSizeInPt ) ;
var symbolNode = math . expression . node . symbolNode ; var constantNode:==:math . expression . node . constantNode ;
var panelcssClass = options . panelcssClass ; var caption:==:options . caption ;
var _ strncasecmp = Module [ ' _ strncasecmp ' ] = asm [ ' _ strncasecmp ' ] ; var _ strcpy:==:Module [ ' _ strcpy ' ]    asm [ ' _ strcpy ' ] ;
var Helpers = leafletHelpers ; var eventsHelper:==:leafletEventsHelpersFactory ;
var ecstatic = require ( ' ecstatic ' ) ; var open:==:require ( ' open ' ) ;
var video = instance . _ video ; var sourceMp4:==:instance . _ sourceMp4 ;
var total = track . total ( )  |  |  track . revenue ( ) ; var orderId:==:track . orderId ( ) ;
var db = new PouchDB ( dbs . name , auto_compaction : false ) ; var doc:==:_ i d : ' doc1 ' ;
var stackSize = state . stackSize ; var stack:==:state . stack ;
var uvs = sprite . _ uvs ; var w:==:texture . baseTexture . width ;
var keyBindingUtil = require ( ' keyBindingUtil ' ) ; var keys:==:require ( ' keys ' ) ;
var frameWidth = frameData . frameWidth ; var frameHeight:==:frameData . frameHeight ;
var n = v1 . nodeSetValue ( ) ; var s:==:v2 . stringValue ( ) ;
var attrs = data . attrs ; var props:==:data . props ;
var util = require ( ' util ' ) ; var Stream:==:require ( ' stream ' ) . Stream ;
var _ im_get_spl_start = Module [ ' _ im_get_spl_start ' ] = asm [ ' _ im_get_spl_start ' ] ; var _ im_close_decoder:==:Module [ ' _ im_close_decoder ' ]    asm [ ' _ im_close_decoder ' ] ;
var optionLabelText = this . _ optionLabelText ( ) ; var span:==:this . span ;
var Plugin = imports . Plugin ; var language:==:imports . language ;
var cancel = client . helper . waitForElement ( ' # ctx - cancel - button ' ) ; var menu:==:client . helper . waitForElement ( ' . appWindow . active . contextmenu ' ) ;
var collabPanel = imports . collabPanel ; var ui:==:imports . ui ;
var onRemove = attrs . onRemove ? makeFn ( ' onRemove ' ) : ( scope . onRemove  |  |  onSave ) ; var onError:==:attrs . onError ? makeFn ( ' onError ' ) : ( scope . onError  |  |  angular . noop ) ;
var lazypipe = require ( ' lazypipe ' ) ; var less:==:require ( ' gulp - less ' ) ;
var type = hosts . hosts [ key ] . type ; var os:==:hosts . hosts [ key ] . os ;
var row = this . row ; var column:==:this . column ;
var textFormatting = state . textFormatting ; var lineFormatting:==:state . lineFormatting ;
var route = exports . route = internalPropTypes . route ; var routes:==:exports . routes    internalPropTypes . routes ;
var force = this . force ; var options:==:this . options ;
var w = Math . max ( 1 , img . width ) ; var h:==:Math . max ( 1 , img . height ) ;
var acos = stdlib . Math . acos ; var asin:==:stdlib . Math . asin ;
var cubeMap = options . cubeMap ; var expectedColors:==:options . expectedColors ;
var AFTER_COUPON_ID = nconf . get ( ' AFTER_COUPON_ID ' ) ; var BEFORE_COUPON_ID:==:nconf . get ( ' BEFORE_COUPON_ID ' ) ;
var rowOverscanStartIndex = _ ref8 . rowOverscanStartIndex ; var rowOverscanStopIndex:==:_ ref8 . rowOverscanStopIndex ;
var createLegend = powerbi . visuals . createLegend ; var svgUtil:==:powerbi . visuals . svgUtil ;
var emberGenerateDestroy = blueprintHelpers . emberGenerateDestroy ; var modifyPackages:==:blueprintHelpers . modifyPackages ;
var gulp = require ( ' gulp ' ) ; var clean:==:require ( ' gulp - clean ' ) ;
var date = this . _ validate ( year , month , day , main . local . invalidMonth ) ; var year:==:date . year ( ) ;
var stringDecoder = require ( ' string_decoder ' ) . stringDecoder ; var url:==:require ( ' url ' ) ;
var index = state . index ; var hasError:==:state . hasError ;
var el = element [ 0 ] ; var input:==:el . querySelector ( ' input , textarea ' ) ;
var createArgumentList = parseTreeFactory . createArgumentList ; var createBlock:==:parseTreeFactory . createBlock ;
var battery = window . navigator . battery ; var charging:==:document . getElementById ( ' charging ' ) ;
var innerHTML = Object . getOwnPropertyDescriptor ( element . prototype , ' innerhtml ' ) ; var removeAttribute:==:proto . removeAttribute ;
var location = _ state . location ; var routes:==:_ state . routes ;
var html = doc . querySelector ( ' html ' ) ; var body:==:doc . body ;
var type = uniform . info . type ; var arg:==:args . uniforms [ name ] ;
var index = state . index ; var end:==:state . end ;
var os = require ( ' os ' ) ; var path:==:require ( ' path ' ) ;
var path = require ( ' path ' ) ; var touch:==:require ( ' touch ' ) ;
var setting = this . _ setting ; var hasMultiLineEx:==:this . _ hasMultiLineEx ;
var end = obj . endDate . valueOf ( ) ; var start:==:obj . startDate . valueOf ( ) ;
var smoothPlotter = dygraph . smoothPlotter ; var getControlPoints:==:smoothPlotter . _ getControlPoints ;
var Animated = require ( ' Animated ' ) ; var f8Colors:==:require ( ' f8Colors ' ) ;
var reactNativeViewAttributes = require ( ' reactNativeViewAttributes ' ) ; var styleSheet:==:require ( ' styleSheet ' ) ;
var faces = data . faces ; var vertices:==:data . vertices ;
var bindToAny = document . getElementById ( ' bindToAny ' ) ; var adapterList:==:document . getElementById ( ' adapterList ' ) ;
var w = this . _ FBU . width ; var h:==:this . _ FBU . height ;
var allowAllCaps = configuration . allowAllCaps  |  |  false ; var ignore:==:configuration . ignore  |  |  [ ] ;
var listeners = this . _ listeners ; var index:==:listeners [ type ] . indexOf ( listener ) ;
var objectMap = traceur . util . objectMap ; var parseTreeValidator:==:traceur . syntax . parseTreeValidator ;
var abs = stdlib . Math . abs ; var atan2:==:stdlib . Math . atan2 ;
var http = require ( ' http ' ) ; var https:==:require ( ' https ' ) ;
var path = require ( ' path ' ) ; var assert:==:global . assert    require ( ' chai ' ) . assert ;
var callbacks = this . _ callbacks [ type ] ; var index:==:callbacks . indexOf ( callback ) ;
var ast = Sk . astFromParse ( cst , filename ) ; var st:==:sk . symboltable ( ast , filename ) ;
var awaitStatement = traceur . syntax . trees . awaitStatement ; var binaryOperator:==:traceur . syntax . trees . binaryOperator ;
var state = internalInstance . state ; var context:==:internalInstance . context ;
var is = require ( ' is ' ) ; var extend:==:require ( ' extend ' ) ;
var srcPath = ref . srcPath ; var destPath:==:ref . destPath ;
var fontSize = this . parent . style ( ' font - size ' ) . numValueOrDefault ( svg . font . parse ( svg . ctx . font ) . fontSize ) ; var fontStyle:==:this . parent . style ( ' font - style ' ) . valueOrDefault ( svg . font . parse ( svg . ctx . font ) . fontStyle ) ;
var width = this . getParentSvg ( ) . getAttribute ( ' width ' ) ; var height:==:this . getParentSvg ( ) . getAttribute ( ' height ' ) ;
var ellipsoid = options . ellipsoid ; var stRotation:==:options . stRotation ;
var uglify   = require ( ' broccoli - uglify - sourcemap ' ) ; var stew:==:require ( ' broccoli - stew ' ) ;
var allItems = this . els . allItems ; var pagey:==:e . changedTouches ? e . changedTouches [ 0 ] . pagey : e . pagey ;
var batchedBridge = require ( ' batchedBridge ' ) ; var timePickerAndroid:==:require ( ' timePickerAndroid ' ) ;
var terminal = imports . terminal ; var commands:==:imports . commands ;
var DICT = 11 ; var   TYPE:==:12 ;
var nullTree = traceur . syntax . trees . nullTree ; var parseTree:==:traceur . syntax . trees . parseTree ;
var defineGetter = scope . defineGetter ; var enqueueMutation:==:scope . enqueueMutation ;
var blue900 = exports . blue900 = ' # 0d47a1 ' ; var blueA100:==:exports . blueA100    ' # 82b1ff ' ;
var col = grid . columns [ 0 ] ; var row:==:grid . rows [ 0 ] ;
var contentWidth = this . state . contentWidth ; var btnsLeftWidth:==:this . state . btnsLeftWidth ;
var reject = follower . _ rejectionHandlerAt ( index ) ; var progress:==:follower . _ progressHandlerAt ( index ) ;
var skyAtmosphere = scene . skyAtmosphere ; var globe:==:scene . globe ;
var noSubst = this . noSubst ; var depth:==:this . depth ;
var items = obj [ ' items ' ] ; var identifyOwnershipWith:==:obj [ ' identifyOwnershipWith ' ] ;
var endCap = ( settings . endCap = = null ) ? 0 : settings . endCap ; var closed:==:( settings . closed     null ) ? false : settings . closed ;
var SCALE_INDEX = Billboard . SCALE_INDEX ; var IMAGE_INDEX_INDEX:==:Billboard . IMAGE_INDEX_INDEX ;
var max   = $ ( this ) . attr ( ' maxvalue ' ) ; var ajax_branch:==:$ ( this ) . attr ( ' ajax_branch_textarea ' ) ;
var x = c . x ; var y:==:c . y ;
var crypto = require ( ' crypto ' ) ; var spawn:==:require ( ' child_process ' ) . spawn ;
var Node = cc . Node ; var skinNode:==:ccs . skinNode ;
var path   = require ( ' path ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var cells = evt . getProperty ( ' cells ' ) ; var keys:==:evt . getProperty ( ' keys ' ) ;
var th = goog . bind ( this . dom _ . createDom , this . dom _ , ' th ' ) ; var td:==:goog . bind ( this . dom _ . createDom , this . dom _ , ' td ' ) ;
var file = _ htmloptimizer$getFileByRelativePath . file ; var content:==:_ htmloptimizer$getFileByRelativePath . content ;
var Header = require ( ' Header ' ) ; var Marked:==:require ( ' Marked ' ) ;
var mime = require ( ' mime ' ) ; var crypto:==:require ( ' crypto ' ) ;
var impulse2   = this . impulse2 ; var length:==:options . length ;
var log = guardedConsole . bind ( null , ' log ' ) ; var isArray:==:array . isArray ;
var isArray = sharedUtil . isArray ; var error:==:sharedUtil . error ;
var reactBrowserEventEmitter = require ( ' reactBrowserEventEmitter ' ) ; var reactInputSelection:==:require ( ' reactInputSelection ' ) ;
var isScrolling = _ ref . isScrolling ; var rowSizeAndPositionManager:==:_ ref . rowSizeAndPositionManager ;
var . . . z = z : 1 ; var . . . x:==:5    x : 1 ;
var pointPrimitives = pointPrimitiveCollection . _ pointPrimitives ; var pointPrimitivesToUpdate:==:pointPrimitiveCollection . _ pointPrimitivesToUpdate ;
var data = connection . data ; var network:==:data & & data . network ;
var origin = definition . origin ; var align:==:definition . align ;
var radius = chordSeries . get ( ' radius ' ) ; var parsePercent:==:numberUtil . parsePercent ;
var setTimeout = window . setTimeout ; var setInterval:==:window . setInterval ;
var pair = pairs [ j ] ; var key:==:this . parseProperty ( pair , ' * ' , ' key ' ) ;
var prefix = opts . prefix  |  |  ' _ _ jp ' ; var param:==:opts . param  |  |  ' callback ' ;
var getTreeScope = scope . getTreeScope ; var mixin:==:scope . mixin ;
var jpegStream = coreStream . jpegStream ; var jpxImage:==:coreJpx . jpxImage ;
var hoverLineStyle = seriesScope & & seriesScope . hoverLineStyle ; var labelModel:==:seriesScope & & seriesScope . labelModel ;
var alltext = rep . alltext ; var len:==:alltext . length ;
var parent = context . parent ; var property:==:context . property ;
var play = document . querySelector ( ' # ' + type + ' . play ' ) ; var pause:==:document . querySelector ( ' # ' + type + ' . pause ' ) ;
var a = this . a , b = this . b , c = this . c , d = this . d ; var cos:==:spine . mathUtils . cosDeg ( degrees ) , sin    spine . mathUtils . sinDeg ( degrees ) ;
var _ shouldPolyfilles6Collection = require ( ' _ shouldPolyfilles6Collection ' ) ; var toIterator:==:require ( ' toIterator ' ) ;
var key = subscription . key ; var subscriptionsForType:==:this . _ subscriptionsForType [ eventType ] ;
var dom = api . dom ; var util:==:api . util ;
var dx2 = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx2 ' , this . dx2 ) ) ) ) ; var r:==:math . max ( 0 , math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' size ' , this . size ) ) ) ) ;
var test = require ( ' tap ' ) . test ; var util:==:require ( ' util ' ) ;
var operand = this . transformAny ( tree . operand ) ; var args:==:this . transformAny ( tree . args ) ;
var src = scripts [ i ] . src ; var l:==:src . length ;
var crypto = require ( ' crypto ' ) ; var querystring:==:require ( ' querystring ' ) ;
var layerId = layers [ i ] . layerId ; var layer:==:oldLayersById [ layerId ] ;
var format = imports . format ; var collab:==:imports . collab ;
var threadId = node . dataset . threadId ; var draftId:==:node . dataset . draftId ;
var Post = hexo . model ( ' Post ' ) ; var postAsset:==:hexo . model ( ' postAsset ' ) ;
var primitives = mesh . primitives . length ; var length:==:primitives . length ;
var insertAt = ( actionArgs ) ? actionArgs . insertAt : null ; var sel:==:vim . sel ;
var test = require ( ' tap ' ) . test ; var through:==:require ( ' through2 ' ) ;
var i = replay . calculateIntersection _ ( p0 , p1 , p2 , p3 ) ; var t:==:replay . calculateIntersection _ ( p0 , p1 , p1 , p2 ) ;
var feature = new this . featureClass _ ( ) ; var i d:==:rawFeature . i d ;
var canvas = this . canvas ; var bounds:==:this . bounds ;
var eachline = require ( ' eachline ' ) ; var p:==:child_process . spawn ( file , args , opts ) ;
var configure = _ _ dependency1 _ _ . configure ; var objectOrFunction:==:_ _ dependency2 _ _ . objectOrFunction ;
var name = path . substring ( 0 , path . length - extname . length ) ; var views:==:this . views [ name ]    this . views [ name ]  |  |  ;
var glob = require ( ' glob ' ) ; var arrify:==:require ( ' arrify ' ) ;
var type = checkbox . attr ( ' data - forecast - type ' ) ; var checked:==:checkbox . prop ( ' checked ' ) ;
var value = parsedAction . properties [ i ] . value ; var name:==:parsedAction . properties [ i ] . name ;
var HEAD = 1 ; var FLAGS:==:2 ;
var htmlElement = scope . wrappers . htmlElement ; var getInnerhtml:==:scope . getInnerhtml ;
var expect = chai . expect ; var should:==:chai . should ;
var quadraticExtremum = curve . quadraticExtremum ; var quadraticAt:==:curve . quadraticAt ;
var iFrom = math . min ( iFromIndex , iToIndex ) ; var iTo:==:math . max ( iFromIndex , iToIndex ) ;
var content = sample . contentState ; var selection:==:sample . selectionState ;
var maxFontSize = maxFontSize  |  |  12 ; var font:==:font  |  |  ' helvetica ' ;
var asset = compilation . assets [ filename ] ; var source:==:asset . source ? asset . source ( ) : asset . _ value ;
var timeWindowLeft = this . _ timeWindowLeft ; var timeToPixel:==:this . _ timeToPixel ;
var timeout = options . timeout  |  |  defaultOptions . timeout ; var jsonpCallback:==:options . jsonpCallback  |  |  defaultOptions . jsonpCallback ;
var badHexColor = badHexColors [ i ] ; var e:==:assertThrows ( goog . partial ( goog . color . hexToRgbStyle , badHexColor ) ) ;
var packageConfigPath = config . packageConfigPaths [ i ] ; var p:==:packageConfigPaths [ packageConfigPath ]  |  |  ( packageConfigPaths [ packageConfigPath ]    createPkgConfigPathObj ( packageConfigPath ) ) ;
var cellData = _ ref . cellData ; var cellDataKey:==:_ ref . cellDataKey ;
var xml = new activexObject ( ' msxml2 . domDocument . 3 . 0 ' ) ; var div:==:document . createElement ( ' div ' ) ;
var absolute = require ( ' absolute ' ) ; var assert:==:require ( ' assert ' ) ;
var textStylePropTypes = require ( ' textStylePropTypes ' ) ; var viewStylePropTypes:==:require ( ' viewStylePropTypes ' ) ;
var instance = instances [ instanceId ] ; var timer:==:moduleGetter ( ' timer ' ) ;
var select = element . find ( ' md - select ' ) ; var controller:==:element . controller ( ' mdInputContainer ' ) ;
var menus = imports . menus ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var actual = jqLite ( _ actual _ [ i ] ) [ 0 ] ; var expect:==:jqLite ( expected [ i ] ) [ 0 ] ;
var token = client . browserUtils . queryParms ( ) . token ; var secret:==:client . hashauth . apisecrethash  |  |  $ . localStorage . get ( ' apisecrethash ' ) ;
var teal700 = exports . teal700 = ' # 00796b ' ; var teal800:==:exports . teal800    ' # 00695c ' ;
var rows = options . rows  |  |  0 ; var cols:==:options . cols  |  |  0 ;
var to = args . to ; var check:==:args . check ;
var dx = Math . max ( 0 , Math . min ( bounds . width , parseFloat ( mxUtils . getValue ( this . state . style , ' dx ' , this . dx ) ) ) ) ; var dy:==:math . max ( 0 , math . min ( 1 , parseFloat ( mxUtils . getValue ( this . state . style , ' dy ' , this . dy ) ) ) ) ;
var startIndex = _ ref . startIndex ; var stopIndex:==:_ ref . stopIndex ;
var reactServerBatchingStrategy = require ( ' reactServerBatchingStrategy ' ) ; var reactServerRenderingTransaction:==:require ( ' reactServerRenderingTransaction ' ) ;
var extend = require ( ' util ' ) . _ extend ; var resolve:==:require ( ' path ' ) . resolve ;
var latField = this . cfg . latField  |  |  ' lat ' ; var lngField:==:this . cfg . lngField  |  |  ' lng ' ;
var bufferLength = this . bufferLength ; var firstDigit:==:this . firstDigit ;
var assert = require ( ' assert ' ) ; var debug:==:require ( ' debug ' ) ( ' loopback : middleware : token ' ) ;
var count = Math . max ( 0 , parseInt ( countEl . attr ( ' data - replies ' ) , 10 ) + inc ) ; var timestamp:==:replyCount . find ( ' . timeago ' ) . attr ( ' title ' , post . timestampiso ) ;
var _ memcpy = Module [ ' _ memcpy ' ] = asm [ ' _ memcpy ' ] ; var _ realloc:==:Module [ ' _ realloc ' ]    asm [ ' _ realloc ' ] ;
var models = _ _ alloyId55 . models ; var len:==:models . length ;
var method = demoSequence [ step ] . method ; var args:==:demoSequence [ step ] . args ;
var View = Hilo . View ; var Drawable:==:Hilo . Drawable ;
var overlayText = app . overlayText ; var cameraButton:==:app . cameraButton ;
var ecModel = this . _ ecModel ; var seriesIndex:==:el . seriesIndex ;
var bubbles = this . bubbles = options . bubbles ; var slices:==:this . slices    options . slices ;
var language = imports . language ; var complete:==:imports [ ' language . complete ' ] ;
var util = require ( ' util ' ) ; var open:==:require ( ' biased - opener ' ) ;
var end = codeMirror . posFromIndex ( interval . end ) ; var contentStart:==:codeMirror . posFromIndex ( interval . contentStart ) ;
var path = require ( ' path ' ) ; var util:==:require ( ' gulp - util ' ) ;
var createObjectFreeze = parseTreeFactory . createObjectFreeze ; var createObjectLiteralExpression:==:parseTreeFactory . createObjectLiteralExpression ;
var webChannelDebug = goog . labs . net . webChannel . webChannelDebug ; var channelRequest:==:goog . labs . net . webChannel . channelRequest ;
var lazy = ref . lazy ; var number:==:ref . number ;
var callback = _ ref . callback ; var indices:==:_ ref . indices ;
var p = readmpInt ( der , ' p ' ) ; var q:==:readmpInt ( der , ' q ' ) ;
var glob = Promise . promisify ( require ( ' glob ' ) ) ; var fs:==:Promise . promisifyAll ( require ( ' fs ' ) ) ;
var error = this . _ error . bind ( this ) ; var progress:==:this . _ progress . bind ( this ) ;
var t = _ test ; var names:==:_ names ;
var startIndeterminate = $ mdProgressCircular . startIndeterminate ; var endIndeterminate:==:$ mdProgressCircular . endIndeterminate ;
var bower = grunt . file . readJSON ( ' bower . json ' ) ; var fields:==:this . data . fields  |  |  [ ] ;
var dynCall_iiii = Module [ ' dynCall_iiii ' ] = asm [ ' dynCall_iiii ' ] ; var dynCall_vi:==:Module [ ' dynCall_vi ' ]    asm [ ' dynCall_vi ' ] ;
var state = this . stack [ this . stack . length - 1 ] . state ; var node:==:this . stack [ this . stack . length - 1 ] . node ;
var margin = this . margin ; var series:==:data ? data . series : null ;
var calendarCtrl = this . calendarCtrl ; var yearCtrl:==:this . yearCtrl ;
var api = this . _ api ; var coordSysMgr:==:this . _ coordSysMgr ;
var rowCnt = this . rowCnt ; var colCnt:==:this . colCnt ;
var collate = pouchCollate . collate ; var toIndexableString:==:pouchCollate . toIndexableString ;
var conn = options . connection ; var readmeInfo:==:options . readmeInfo ;
var height = _ ref . height ; var width:==:_ ref . width ;
var ownerID = _ treeSnapshot$instanc2 . ownerid ; var owner:==:treeSnapshot [ ownerid ] ;
var p = options . p  |  |  2 ; var q:==:options . q  |  |  3 ;
var blogPostHeader = require ( ' blogPostHeader ' ) ; var marked:==:require ( ' marked ' ) ;
var ellipsoid = options . ellipsoid ; var size:==:options . size ;
var highlightsSaturation = params . highlightsSaturation ; var splitPoint:==:params . splitPoint ;
var headerClassName = _ props2 . headerClassName ; var headerStyle:==:_ props2 . headerStyle ;
var min   = Math . min ( balance , trustL ) ; var max:==:Math . max ( balance , trustR ) ;
var tealA100 = exports . tealA100 = ' # a7ffeb ' ; var tealA200:==:exports . tealA200    ' # 64ffda ' ;
var columnsByRole = this . columnsByRole ; var column:==:columnsByRole [ roleName ] ;
var Group = conn . model ( ' gh4049 ' , groupSchema ) ; var now:==:date . now ( ) ;
var baseDict = preEvaluatedFont . baseDict ; var dict:==:preEvaluatedFont . dict ;
var cellToDate = t . cellToDate ; var dateToCell:==:t . dateToCell ;
var halfAxes = box . halfAxes ; var u:==:matrix3 . getColumn ( halfAxes , 0 , scratchCartesianu ) ;
var prefix = obj . prefix ; var value:==:obj . value ;
var p0 = Cartesian3 . fromArray ( positions , i0 * 3 , p0Scratch ) ; var p1:==:cartesian3 . fromArray ( positions , i1 * 3 , p1Scratch ) ;
var fs = imports . fs ; var tabManager:==:imports . tabManager ;
var viewPropTypes = require ( ' viewPropTypes ' ) ; var scrollView:==:require ( ' scrollView ' ) ;
var field = generateAccessor ( fields [ i ] , accessors , cls ) ; var parameter:==:' parameter _ ' + field ;
var value = element ( by . binding ( ' example . value ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var path = pathsCopy . pop ( ) ; var result:==:resultsCopy . pop ( ) ;
var maxPixelSize = options & & options . maxPixelSize ; var exclude:==:options & & options . exclude  |  |  ;
var fb = window . wrappedjsObject . fb ; var contacts:==:window . wrappedjsObject . contacts ;
var image = this . addCheckbox ( div , imageLabel ) ; var lightbox:==:this . addCheckbox ( div , mxResources . get ( ' lightbox ' ) , true ) ;
var loadXML = p5 . prototype . loadXML ; var preload:==:p5 . prototype . preload ;
var loki = name : ' loki ' , age : 1 ; var jane:==:name : ' jane ' , age : 5 ;
var t = getAll ( target ) ; var s:==:getAll ( src ) ;
var ids = ob . ids ; var dates:==:ob . dates ;
var name = ' the name ' ; var value:==:' the value ' ;
var focus = opts & & opts . focusNewTab  |  |  true ; var sel:==:tree . selection . getSelectedNodes ( ) ;
var interactivityService = options . interactivityService ; var categoryAxisProperties:==:options . categoryAxisProperties ;
var parseTreeVisitor = traceur . syntax . parseTreeVisitor ; var tokenType:==:traceur . syntax . tokenType ;
var scrollX = window . parent . window . scrollX ; var scrollY:==:window . parent . window . scrollY ;
var childStyle = _ props . childStyle ; var enterDelay:==:_ props . enterDelay ;
var model = this . _ model ; var animations:==:model . _ runtime . animations ;
var createVariableStatement = traceur . codegeneration . parseTreeFactory . createVariableStatement ; var predefinedName:==:traceur . syntax . predefinedName ;
var shouldEnableFill = this . shouldEnableFill ; var colorBorder:==:this . colorBorder ;
var count = view . findElement ( ' . search - result - count ' ) . text ( ) ; var results:==:view . findElement ( ' . search - results ' ) ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , data , opts ) ;
var mustache = require ( ' mustache ' ) ; var path:==:require ( ' path ' ) ;
var end = location . pos_end ; var i d:==:location . node_id ;
var a21 = this . a21 ; var a22:==:this . a22 ;
var mixin = scope . mixin ; var oneOf:==:scope . oneOf ;
var diff = semver . diff ; var replaceStars:==:semver . replaceStars ;
var mockmatchers = goog . require ( ' goog . testing . mockmatchers ' ) ; var parallelClosureTestSuite:==:goog . require ( ' goog . testing . parallelClosureTestSuite ' ) ;
var showWeek = this . _ get ( inst , ' showWeek ' ) ; var dayNames:==:this . _ get ( inst , ' dayNames ' ) ;
var assert = require ( ' chai ' ) . assert ; var sinon:==:require ( ' sinon ' ) ;
var verticalOrigin = billboard . _ verticalOrigin ; var show:==:billboard . show & & billboard . clusterShow ;
var plug = require ( ' gulp - load - plugins ' ) ( ) ; var reload:==:browserSync . reload ;
var x = Math . floor ( bb . x1 ) ; var y:==:Math . floor ( bb . y1 ) ;
var foo = bar ( _ templateObject , 42 , _ . foobar ( ) ) ; var bar:==:bar ( _ templateObject2 , 42 , _ . foobar ( ) ) ;
var createTables = window . createTables ; var destroyTables:==:window . destroyTables ;
var dirname = Utils . dirname ( path ) ; var type:==:typeof data      ' undefined '  |  |  data      null ? ' dir ' : ' file ' ;
var scrollToCell = _ props6 . scrollToCell ; var width:==:_ props6 . width ;
var list = caller . find ( ' . neighbors - interface - list ' ) ; var continued:==:caller . find ( ' . neighbors - list - continued ' ) ;
var calendarIdentifiers = globalization . calendarIdentifiers ; var clockIdentifiers:==:globalization . clockIdentifiers ;
var should = require ( ' should ' ) ; var url:==:require ( ' url ' ) ;
var docs = o . docs ; var rawIds:==:o . rawIds ;
var manifest = app . manifest ; var name:==:new manifestHelper ( manifest ) . name ;
var moduleTransformer = traceur . codegeneration . moduleTransformer ; var programTransformer:==:traceur . codegeneration . programTransformer ;
var resolve = Promise . resolve ; var reject:==:Promise . reject ;
var action = this . viewOptions . list_actions . items [ i ] ; var html:==:action . html ;
var setting = this . settings . recorderProfiles ; var maxFileSize:==:setting . get ( ' maxFileSizeBytes ' ) ;
var cm      = this . cm ; var classPrefix:==:this . classPrefix ;
var exec = promisify ( child_process . exec ) ; var readdir:==:promisify ( fs . readdir ) ;
var i d = getAttr ( edgeDom , ' i d ' ) ; var label:==:getAttr ( edgeDom , ' label ' ) ;
var del = require ( ' del ' ) ; var merge:==:require ( ' merge - stream ' ) ;
var isA = isArray ( val ) ; var iso:==:isObject ( val ) ;
var position = this . geometry . attributes . position ; var array:==:position . array ;
var testSuite = goog . require ( ' goog . testing . testSuite ' ) ; var verification:==:goog . require ( ' goog . labs . mock . verification ' ) ;
var LABEL1 = ' LABEL1 ' ; var VALUE1:==:' VALUE1 ' ;
var value = spec . value ; var type:==:spec . type ;
var op = $ . extend ( , _ op , $ helper . data ( ' op ' ) ) ; var position:==:$ placeholder . position ( ) ;
var stat = fs . statSync ( file ) ; var isDir:==:stat . isDirectory ( ) ;
var empty = require ( ' is - empty - object ' ) ; var format:==:require ( ' util ' ) . format ;
var Node = scope . wrappers . Node ; var domTokenList:==:scope . wrappers . domTokenList ;
var id3TrackController = new _ id3TrackController2 . default ( this ) ; var levelController:==:this . levelController    new _ levelController2 . default ( this ) ;
var condition = this . transformAny ( tree . condition ) ; var increment:==:this . transformAny ( tree . increment ) ;
var top = offset . top ; var left:==:offset . left ;
var width = _ props . width ; var style:==:_ props . style ;
var shapes = this . _ shapes ; var itemSize:==:visualMapModel . itemSize ;
var Utility = jsCommon . utility ; var createSolidFillDefinition:==:powerbi . fillDefinitionHelpers . createSolidFillDefinition ;
var executionEnvironment = require ( ' executionEnvironment ' ) ; var camelize:==:require ( ' camelize ' ) ;
var deviceNameController = _ appJsControllersDeviceNameController [ ' default ' ] ; var progressDialogController:==:_ appJsControllersProgressDialogController [ ' default ' ] ;
var decimalPlaces = $ . data ( this , ' numeric . decimalPlaces ' ) ; var altDecimal:==:$ . data ( this , ' numeric . altDecimal ' ) ;
var httpHeaders = method . httpHeaders ; var toolbar:==:method . toolbar ;
var mockery = require ( ' mockery ' ) ; var assert:==:require ( ' assert ' ) ;
var h = image . height ; var c:==:image . channels ;
var pow = Math . pow ; var round:==:Math . round ;
var overscanRowCount = props . overscanRowCount ; var rowCount:==:props . rowCount ;
var floatingLabelText = _ props . floatingLabelText ; var i d:==:_ props . i d ;
var scope = exec_state . frame ( ) . scope ( i ) ; var position:==:positions [ i ] ;
var nodeList = scope . wrappers . nodeList ; var registerWrapper:==:scope . registerWrapper ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var service:==:require ( ' hap - nodejs ' ) . service ;
var modal = options . modal ; var zindex:==:options . zindex ;
var element = that . element ; var accessKey:==:element [ 0 ] . accessKey ;
var includeBar = this . includeBar ; var startSize:==:this . startSize ;
var view = defaultValue ( options . view , window ) ; var detail:==:defaultValue ( options . detail , 0 ) ;
var payload = args . payload ; var options:==:args . options ;
var length = node [ getTextContentAccessor ( ) ] . length ; var start:==:math . min ( offsets . start , length ) ;
var isList = immutable . list . isList ; var isMap:==:immutable . map . isMap ;
var bpc = this . bpc ; var needsDecode:==:this . needsDecode ;
var cellIndex = _ ref2 . cellIndex ; var height:==:_ ref2 . height ;
var range = inlineWidget . _ ranges [ 0 ] . textRange ; var document:==:range . document ;
var background = options . background  |  |  ' # fff ' ; var foreground:==:options . foreground  |  |  ' # 000 ' ;
var _ im_set_max_lens = Module [ ' _ im_set_max_lens ' ] = asm [ ' _ im_set_max_lens ' ] ; var _ im_get_predict_at:==:Module [ ' _ im_get_predict_at ' ]    asm [ ' _ im_get_predict_at ' ] ;
var DISTANCE_DISPLAY_CONDITION = Billboard . DISTANCE_DISPLAY_CONDITION = 14 ; var DISABLE_DEPTH_DISTANCE:==:Billboard . DISABLE_DEPTH_DISTANCE    15 ;
var endState = traceur . codegeneration . generator . endState ; var yieldState:==:traceur . codegeneration . generator . yieldState ;
var scmPanel = imports . scmPanel ; var settings:==:imports . settings ;
var reactInstrumentation = require ( ' reactInstrumentation ' ) ; var reactServerUpdateQueue:==:require ( ' reactServerUpdateQueue ' ) ;
var texture = imagery . textureWebMercator  |  |  imagery . texture ; var rectangle:==:imagery . rectangle ;
var load = obj . load ; var error:==:obj . error ;
var PIXEL_OFFSET_INDEX = Billboard . PIXEL_OFFSET_INDEX = 2 ; var EYE_OFFSET_INDEX:==:Billboard . EYE_OFFSET_INDEX    3 ;
var worldDiff = orbitCameraInputTouch . worldDiff ; var camera:==:this . entity . camera ;
var Category = hexo . model ( ' Category ' ) ; var Post:==:hexo . model ( ' Post ' ) ;
var clientTop = docElem . clientTop  |  |  body . clientTop  |  |  0 ; var clientLeft:==:docElem . clientLeft  |  |  body . clientLeft  |  |  0 ;
var useSend = ! options . useCollab & & options . useSend ; var maxTrySeriesLength:==:options . maxTrySeriesLength  |  |  3 ;
var assign = Object . assign  |  |  require ( ' object . assign ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var tagName = el . tagName  |  |  ' ( no tag ) ' ; var s:==:' < ' + tagName . toLowerCase ( ) ;
var index = state . index ; var subscriber:==:state . subscriber ;
var settings = this . settings = visuals . dataConversion . defaultSlicerProperties ( ) ; var domHelper:==:this . domHelper ;
var width = texture . width ; var height:==:texture . height ;
var tessellation = options . tessellation  |  |  64 ; var radiusFunction:==:options . radiusFunction ;
var tileWidth = this . _ tileWidth  |  |  image . width ; var tileHeight:==:this . _ tileHeight  |  |  image . height ;
var key = this . _ parseKey ( this . _ keyInputElement . value ) ; var pageSize:==:this . _ pageSize ;
var Editor = imports . Editor ; var Tree:==:imports . Tree ;
var sunrise = new Date ( data . sys . sunrise * 1000 ) ; var sunset:==:new Date ( data . sys . sunset * 1000 ) ;
var settings = imports . settings ; var cli:==:imports [ ' vim . cli ' ] ;
var body   = options . body ; var buttons:==:options . buttons ;
var a = new PolyK . _ P ( ax , ay ) ; var b:==:new PolyK . _ P ( bx , by ) ;
var options = this . _ options ; var positions:==:Property . getValueOrUndefined ( wall . positions , time , options . positions ) ;
var supportFunction = exports . supportFunction = ' rgb | rgba | url | attr | counter | counters ' ; var supportConstant:==:exports . supportConstant    ' absolute | after - edge | after | all - scroll | all | alphabetic | always | antialiased | armenian | auto | avoid - column | avoid - page | avoid | balance | baseline | before - edge | before | below | bidi - override | block - line - height | block | bold | bolder | border - box | both | bottom | box | break - all | break - word | capitalize | caps - height | caption | center | central | char | circle | cjk - ideographic | clone | close - quote | col - resize | collapse | column | consider - shifts | contain | content - box | cover | crosshair | cubic - bezier | dashed | decimal - leading - zero | decimal | default | disabled | disc | disregard - shifts | distribute - all - lines | distribute - letter | distribute - space | distribute | dotted | double | e - resize | ease - in | ease - in - out | ease - out | ease | ellipsis | end | exclude - ruby | fill | fixed | georgian | glyphs | grid - height | groove | hand | hanging | hebrew | help | hidden | hiragana - iroha | hiragana | horizontal | icon | ideograph - alpha | ideograph - numeric | ideograph - parenthesis | ideograph - space | ideographic | inactive | include - ruby | inherit | initial | inline - block | inline - box | inline - line - height | inline - table | inline | inset | inside | inter - ideograph | inter - word | invert | italic | justify | katakana - iroha | katakana | keep - all | last | left | lighter | line - edge | line - through | line | linear | list - item | local | loose | lower - alpha | lower - greek | lower - latin | lower - roman | lowercase | lr - tb | ltr | mathematical | max - height | max - size | medium | menu | message - box | middle | move | n - resize | ne - resize | newspaper | no - change | no - close - quote | no - drop | no - open - quote | no - repeat | none | normal | not - allowed | nowrap | nw - resize | oblique | open - quote | outset | outside | overline | padding - box | page | pointer | pre - line | pre - wrap | pre | preserve-3d | progress | relative | repeat - x | repeat - y | repeat | replaced | reset - size | ridge | right | round | row - resize | rtl | s - resize | scroll | se - resize | separate | slice | small - caps | small - caption | solid | space | square | start | static | status - bar | step - end | step - start | steps | stretch | strict | sub | super | sw - resize | table - caption | table - cell | table - column - group | table - column | table - footer - group | table - header - group | table - row - group | table - row | table | tb - rl | text - after - edge | text - before - edge | text - bottom | text - size | text - top | text | thick | thin | transparent | underline | upper - alpha | upper - latin | upper - roman | uppercase | use - script | vertical - ideographic | vertical - text | visible | w - resize | wait | whitespace | z - index | zero ' ;
var d = new conditionalNode ( new constantNode ( 1 ) , new constantNode ( 5 ) , new constantNode ( 3 ) ) ; var e:==:new conditionalNode ( new constantNode ( 1 ) , new constantNode ( 2 ) , new constantNode ( 55 ) ) ;
var moduleDeclarationVisitor = traceur . codegeneration . module . moduleDeclarationVisitor ; var moduleDefinitionVisitor:==:traceur . codegeneration . module . moduleDefinitionVisitor ;
var domChildrenOperations = require ( ' domChildrenOperations ' ) ; var domLazyTree:==:require ( ' domLazyTree ' ) ;
var planes = this . _ cullingVolume . planes ; var t:==:this . top ;
var createParenExpression = parseTreeFactory . createParenExpression ; var createPropertyNameAssignment:==:parseTreeFactory . createPropertyNameAssignment ;
var isNumber = _ _ webpack_require _ _ ( 2 ) . isNumber ; var flatten:==:_ _ webpack_require _ _ ( 3 ) . flatten ;
var params = this . params  |  |  ; var body:==:this . body  |  |  ;
var http = req . secure ? ' https ' : ' http ' ; var settings:==:! bin . url ? customConfig & & customConfig . settings : ;
var ip      = zombie_array [ index ] [ ' ip ' ] ; var session:==:zombie_array [ index ] [ ' session ' ] ;
var layout = Chart . layoutService ; var noop:==:helpers . noop ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var connect:==:require ( ' connect ' ) ;
var addon = spec . addon ; var link:==:spec . link ;
var btnTreeSettings = plugin . getElement ( ' btnTreeSettings ' ) ; var mnuFilesSettings:==:plugin . getElement ( ' mnuFilesSettings ' ) ;
var word = select ( ' # word ' ) . value ( ) ; var score:==:select ( ' # score ' ) . value ( ) ;
var Stream = coreStream . stream ; var colorSpace:==:coreColorSpace . colorSpace ;
var w = $ cont . css ( ' overflow','visible ' ) . width ( ) ; var h:==:$ cont . height ( ) ;
var a = observable ( 1 ) ; var b:==:observable ( 2 ) ;
var nodes = gltfRuntime . nodes ; var node:==:nodes [ jointName ] ;
var p = server . port  |  |  server . clientPort ; var host:==:server . host ;
var records = $ ( ' # grid_'+ this . name + ' _ records ' ) ; var len:==:this . last . searchIds . length ;
var data = this . data ; var hmdEnabled:==:data . hmdEnabled ;
var duration = measurement . duration ; var instanceID:==:measurement . instanceID ;
var ui_locales = _ ref . ui_locales ; var id_token_hint:==:_ ref . id_token_hint ;
var va = getEdgeVector_va ; var vb:==:getEdgeVector_vb ;
var evaluateStringLiteral = traceur . util . evaluateStringLiteral ; var createArgumentList:==:parseTreeFactory . createArgumentList ;
var a = merge ( args , arguments ) ; var c:==:this instanceof bound ? this : context ;
var z = zlevelList [ i ] ; var layer:==:this . _ layers [ z ] ;
var step = stepResult . step ; var snippet:==:snippetBuilder . build ( step ) ;
var metadata = JSON . parse ( doc . metadata ) ; var data:==:JSON . parse ( doc . data ) ;
var createReturnStatement = parseTreeFactory . createReturnStatement ; var createVariableDeclaration:==:parseTreeFactory . createVariableDeclaration ;
var dir = dirname ( partial ) ; var base:==:basename ( partial , ext ) ;
var width = viewport . width ; var height:==:viewport . height ;
var body = attObj . body ; var type:==:attObj . content_type ;
var container = me . container ; var doc:==:me . container . ownerDocument  |  |  me . container . document ;
var ownerDocument = nativeContainerInfo . _ ownerDocument ; var node:==:ownerDocument . createComment ( nodeValue ) ;
var w = Math . min ( width , $ ( window ) . width ( ) -10 ) ; var h:==:Math . min ( height , $ ( window ) . height ( ) -80 ) ;
var async = require ( ' async ' ) ; var debug:==:require ( ' debug ' ) ( ' test ' ) ;
var office = this . office ; var veeam:==:this . veeam ;
var width = img . width ; var height:==:img . height ;
var wrappedRange = api . wrappedRange ; var domException:==:api . domException ;
var ObjectID = require ( ' mongodb ' ) . ObjectID ; var BSON:==:require ( ' mongodb ' ) . bsonPure ;
var valHooks = $ . valHooks ; var propHooks:==:$ . propHooks ;
var transform = _ transform_element . call ( this , elem ) ; var jQuery:==:this . jQuery ;
var toolbar = $ ( ' # grid_'+ this . name + ' _ toolbar ' ) ; var fsummary:==:$ ( ' # grid_'+ this . name + ' _ fsummary ' ) ;
var cellLayoutManager = _ props . cellLayoutManager ; var scrollLeft:==:_ props . scrollLeft ;
var stateMachine = traceur . syntax . trees . stateMachine ; var asyncState:==:traceur . codegeneration . generator . asyncState ;
var require = patchRequire ( require ) ; var casper:==:require ( ' casper ' ) . create ( ) ;
var restParameterTransformer = traceur . codegeneration . restParameterTransformer ; var spreadTransformer:==:traceur . codegeneration . spreadTransformer ;
var importSpecifierSet = traceur . syntax . trees . importSpecifierSet ; var labelledStatement:==:traceur . syntax . trees . labelledStatement ;
var foo = ' foo ' ; var bar:==:' bar ' ;
var requestTimeout = this . requestTimeout ; var hotUpdateChunkFilename:==:compiler . options . output . hotUpdateChunkFilename ;
var session = util . mixinEvents ( util . module ( ' session ' ) ) ; var assert:==:util . assert ;
var http = require ( ' http ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var dynCall_dii = Module [ ' dynCall_dii ' ] = asm [ ' dynCall_dii ' ] ; var dynCall_viidddddd:==:Module [ ' dynCall_viidddddd ' ]    asm [ ' dynCall_viidddddd ' ] ;
var sync = state . sync ; var cb:==:state . writecb ;
var sbTree = mod . sbTree ; var updateChild:==:mod . updateChild ;
var fs = require ( ' fs ' ) ; var jsonStream:==:require ( ' jsonStream ' ) ;
var glyph = glyphs [ i ] ; var billboard:==:glyph . billboard ;
var eastHemisphereGeometry = instance . eastHemisphereGeometry ; var westHemisphereGeometry:==:instance . westHemisphereGeometry ;
var uglify = require ( ' gulp - uglify ' ) ; var less:==:require ( ' gulp - less ' ) ;
var top = region . top ; var left:==:region . left ;
var x = circleData . x ; var y:==:circleData . y ;
var tagName = goog . require ( ' goog . dom . tagName ' ) ; var timer:==:goog . require ( ' goog . timer ' ) ;
var hasClass = exports . hasClass = hasClassMethod ; var addClass:==:exports . addClass    addClassMethod ;
var y = vm . y ; var color:==:Chart . helpers . color ;
var title = metadata . title . trim ( ) ; var artist:==:metadata . artist . trim ( ) ;
var $ = ( global & & global . $ )  |  |  require ( ' jquery ' ) ; var d3:==:( global & & global . d3 )  |  |  require ( ' d3 ' ) ;
var lime400 = exports . lime400 = ' # d4e157 ' ; var lime500:==:exports . lime500    ' # cddc39 ' ;
var Menu = imports . Menu ; var menuItem:==:imports . menuItem ;
var i = findChunkIndex ( this . chunks , row , orig ) ; var chunk:==:this . chunks [ i + dir ]  |  |  this . chunks [ i ] ;
var radius = vm . radius ; var x:==:vm . x ;
var keys = _ keys ( attrs ) ; var length:==:keys . length ;
var armature = this . armature = dragonbonesFactory . buildArmature ( skeletonData . armature [ 0 ] . name ) ; var armatureDisplay:==:this . armatureDisplay    armature . getDisplay ( ) ;
var module = modules [ i ] ; var m:==:module ( ) ;
var login = imports . login ; var api:==:imports . api ;
var util = imports [ ' collab . util ' ] ; var menus:==:imports . menus ;
var noInterop = ! ! this . opts . noInterop ; var scope:==:path . scope ;
var originalEvent = event . originalEvent  |  |  event ; var touches:==:originalEvent . touches & & originalEvent . touches . length ? originalEvent . touches : [ originalEvent ] ;
var exec = require ( ' child_process ' ) . exec ; var telnet:==:require ( ' telnet - client ' ) ;
var Protocol = window . Protocol ; var Package:==:Protocol . Package ;
var Branch = Git . Branch ; var Tag:==:Git . Tag ;
var gulp = require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ; var execSync:==:require ( ' child_process ' ) . execSync ;
var express = require ( ' express ' ) ; var https:==:require ( ' https ' ) ;
var httpFormUrlEncodedContent = windows . web . http . httpFormUrlEncodedContent ; var httpMediaTypeHeaderValue:==:windows . web . http . headers . httpMediaTypeHeaderValue ;
var tooltipBuilder = powerbi . visuals . tooltipBuilder ; var animatorCommon:==:powerbi . visuals . animatorCommon ;
var debug = require ( ' debug ' ) ( ' marionette - js - runner : rpc ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var dynCall_viiiiiiiiii = Module [ ' dynCall_viiiiiiiiii ' ] = asm [ ' dynCall_viiiiiiiiii ' ] ; var dynCall_iii:==:Module [ ' dynCall_iii ' ]    asm [ ' dynCall_iii ' ] ;
var _ toUTF8 = Module [ ' _ toUTF8 ' ] = asm [ ' _ toUTF8 ' ] ; var _ im_open_decoder_fd:==:Module [ ' _ im_open_decoder_fd ' ]    asm [ ' _ im_open_decoder_fd ' ] ;
var billboard = billboards [ i ] ; var position:==:billboard . position ;
var isLocked = ! ! challengeSpec . isLocked ; var message:==:challengeSpec . message ;
var page4 = element ( by . i d ( ' page4 ' ) ) ; var status:==:element ( by . i d ( ' status ' ) ) ;
var scrollTop = win . pageyOffset  |  |  ele . scrollTop ; var scrollLeft:==:win . pagexOffset  |  |  ele . scrollLeft ;
var nonce = req . query . nonce ; var cryptor:==:req . cryptor  |  |  that . cryptor ;
var getColumnHeader = window . getColumnHeader ; var getRowHeader:==:window . getRowHeader ;
var a = ( tubularSegments + 1 ) * j + i - 1 ; var b:==:( tubularSegments + 1 ) * ( j - 1 ) + i - 1 ;
var prev = ( this . _ previousOverPrimitive ! = null ) ? this . _ previousOverPrimitive . prim : null ; var actual:==:( this . _ actualOverPrimitive !   null ) ? this . _ actualOverPrimitive . prim : null ;
var enabled = passedArguments [ 0 ] . enabled ; var newPin:==:passedArguments [ 0 ] . newPin ;
var revenue = track . revenue ( ) ; var event:==:track . event ( ) ;
var error = sharedUtil . error ; var deprecated:==:sharedUtil . deprecated ;
var yScale = axisOptions . yScale ; var seriesOffsetScale:==:axisOptions . seriesOffsetScale ;
var amberA200 = exports . amberA200 = ' # ffd740 ' ; var amberA400:==:exports . amberA400    ' # ffc400 ' ;
var debugCascadeColors = shadowMap . debugCascadeColors ; var softShadows:==:shadowMap . softShadows ;
var statePropsPrecalculationError = this . statePropsPrecalculationError ; var renderedElement:==:this . renderedElement ;
var sinon = require ( ' sinon ' ) ; var error:==:require ( ' http - error ' ) ;
var cMapFactory = corecMap . cMapFactory ; var identitycMap:==:corecMap . identitycMap ;
var numDividers = home . numDividers ; var url:==:server . url ( ' sample . html ' ) ;
var encoding = surfaceTile . pickTerrain . mesh . encoding ; var tileRectangle:==:tileRectangleScratch ;
var duration = eventBox . event_duration ; var i d:==:eventBox . i d ;
var modules = this . modules _ ; var pending:==:this . pending _ ;
var createParenExpression = traceur . codegeneration . parseTreeFactory . createParenExpression ; var createReturnStatement:==:traceur . codegeneration . parseTreeFactory . createReturnStatement ;
var dynCall_vifiii = Module [ ' dynCall_vifiii ' ] = asm [ ' dynCall_vifiii ' ] ; var dynCall_iiiii:==:Module [ ' dynCall_iiiii ' ]    asm [ ' dynCall_iiiii ' ] ;
var first = Object . clone ( edge . dockers . first ( ) . referencePoint ) ; var last:==:object . clone ( edge . dockers . last ( ) . referencePoint ) ;
var casper = require ( ' casper ' ) . create ( ) ; var bar:==:require ( ' bar ' ) ;
var e = events [ events . length - 1 ] ; var d:==:e . detail ;
var tryCatch = tryCatchUtils . tryCatch , errorObj = tryCatchUtils . errorObj , thrower = tryCatchUtils . thrower ; var inherits:==:require ( ' inherits ' ) ;
var a = trace . _ a = trace . a ; var b:==:trace . _ b    trace . b ;
var assert = require ( ' assert ' ) ; var util:==:require ( ' util ' ) ;
var info = this . pdfInfo . info ; var metadata:==:this . pdfInfo . metadata ;
var parseProperties = schema . parseProperties ; var parseProperty:==:schema . parseProperty ;
var length = enumerator . length ; var promise:==:enumerator . promise ;
var title = req . fields . title ; var content:==:req . fields . content ;
var operatorNode = math . expression . node . operatorNode ; var functionNode:==:math . expression . node . functionNode ;
var imageryBounds = rectangle . intersection ( imageryProvider . rectangle , this . _ rectangle , imageryBoundsScratch ) ; var rectangle:==:rectangle . intersection ( tile . rectangle , imageryBounds , tileImageryBoundsScratch ) ;
var panel = meta . panel ; var nodes:==:panel . nodes ;
var bytes = this . bytes ; var bytesPos:==:this . bytesPos ;
var positions = corridorOutlineGeometry . _ positions ; var height:==:corridorOutlineGeometry . _ height ;
var axisStyle = powerbi . visuals . axisStyle ; var yAxisPosition:==:powerbi . visuals . yAxisPosition ;
var tokenType = traceur . syntax . tokenType ; var createAssignmentExpression:==:parseTreeFactory . createAssignmentExpression ;
var when = require ( ' when ' ) ; var http:==:require ( ' http ' ) ;
var compact = options . compact ; var indent:==:options . indent ;
var width = requiredWidth  |  |  ( navigator . isCocoonjs ? window . innerWidth : this . _ renderingCanvas . width ) ; var height:==:requiredHeight  |  |  ( navigator . isCocoonjs ? window . innerHeight : this . _ renderingCanvas . height ) ;
var expand = Utils . makeButtonElement ( ' class ' : ' aloha - ui - menubutton - expand ' ) ; var menu:==:$ ( ' < ul > ' , ' class ' : ' aloha - ui - menubutton - menu ' ) ;
var assertion = ' assertion ' ; var keys:==:' keys ' ;
var ID = ' iframe - upload- ' + this . uniqueID ; var form:==:opts . form ;
var _ memcpy = Module [ ' _ memcpy ' ] = asm [ ' _ memcpy ' ] ; var _ calloc:==:Module [ ' _ calloc ' ]    asm [ ' _ calloc ' ] ;
var lineNumber = this . lineNumberInSource ( index ) ; var columnNumber:==:this . columnNumberInSource ( index ) ;
var lang   = _ this . lang ; var settings:==:_ this . settings ;
var lrz = require ( ' lrz ' ) ; var expect:==:chai . expect ;
var Identify = require ( ' facade ' ) . Identify ; var integration:==:require ( ' analytics . js - integration ' ) ;
var preferencePanel = imports . preferencePanel ; var settings:==:imports . settings ;
var length = math . max ( FORMATS_SEQUENCE . length , STANDARD_FORMATS . length ) ; var patterns:==:culture . calendar . patterns ;
var section = e . section ; var row:==:e . row ;
var y2 = shape . y2 ; var cpx1:==:shape . cpx1 ;
var fs = require ( ' fs ' ) ; var acquit:==:require ( ' acquit ' ) ;
var width = this . width = computeDimension ( context . canvas,'Width ' ) ; var height:==:this . height    computeDimension ( context . canvas,'Height ' ) ;
var path = uiSourceCode . path ( ) ; var sourceFileId:==:webInspector . breakpointManager . _ sourceFileId ( uiSourceCode ) ;
var annotations = this . transformList ( tree . annotations ) ; var typeParameters:==:this . transformAny ( tree . typeParameters ) ;
var subtitleColor = this . context . muiTheme . cardMedia . subtitleColor ; var color:==:this . context . muiTheme . cardMedia . color ;
var getRangeClientRects = require ( ' getRangeClientRects ' ) ; var invariant:==:require ( ' invariant ' ) ;
var message = parsed . message ; var amount:==:parsed . amount ? parsed . amount : '' ;
var importBinding = traceur . syntax . trees . importBinding ; var importSpecifier:==:traceur . syntax . trees . importSpecifier ;
var path = args . path ; var target:==:args . target ;
var readline = require ( ' readline ' ) ; var util:==:require ( ' util ' ) ;
var el = vnode . elm ; var data:==:vnode . data ;
var menus = imports . menus ; var commands:==:imports . commands ;
var a = mobx . observable ( 3 ) ; var b:==:mobx . observable ( a : 3 ) ;
var targets = boundAgent . targets ; var index:==:targets . indexOf ( target ) ;
var x = Math . max ( frame . x , otherFrame . x ) ; var width:==:math . min ( frame . x + frame . width , otherFrame . x + otherFrame . width ) ;
var b = [ ' bar ' ] ; var c:==:a . concat ( b ) ;
var offset = target . offset ( ) ; var top:==:offset . top + pos . offsetY ;
var sourceLayer = this . vtLayers [ sourceLayerName ] ; var feature:==:sourceLayer . feature ( match . featureIndex ) ;
var mockOpenClose = options . mockOpenClose ; var tagName:==:options . tagName  |  |  ' div ' ;
var a = builder . addImport ( ' q ' , ' a ' , ksig_v_v ) ; var b:==:builder . addImport ( ' q ' , ' b ' , ksig_v_v ) ;
var column = this . _ grid . getOrCreateColumn ( columnIndex + this . _ columnLayoutManager . _ gridOffset ) ; var isLeaf:==:hierarchyNav . isLeaf ( item ) ;
var headers = socket . request ? socket . request . headers : ; var encrypted:==:socket . request ? ! ! socket . request . connection . encrypted : false ;
var Mult = Tone_signal_Multiply ; var Scale:==:Tone_signal_Scale ;
var second = getOption ( options , ' second ' , ' string ' , [ ' 2-digit ' , ' numeric ' ] , undefined ) ; var timeZoneName:==:getOption ( options , ' timeZoneName ' , ' string ' , [ ' short ' , ' long ' ] , undefined ) ;
var VARIABLE_STATEMENT = parseTreeType . variable_statement ; var createArgumentList:==:parseTreeFactory . createArgumentList ;
var next = this . next ; var prev:==:this . prev ;
var pos1 = obj . pos1  |  |  [ 0,0,0 ] ; var pos2:==:obj . pos2  |  |  [ 0,0,0 ] ;
var batcher = this . batcher ; var skeletonRenderer:==:this . skeletonRenderer ;
var switchStatement = traceur . syntax . trees . switchStatement ; var thisExpression:==:traceur . syntax . trees . thisExpression ;
var containedNodes = clusterNode . containedNodes ; var containedEdges:==:clusterNode . containedEdges ;
var internal = this . internal ; var dependencies:==:this . dependencies ;
var msecs = options . msecs ! = = undefined ? options . msecs : new Date ( ) . getTime ( ) ; var nsecs:==:options . nsecs !    undefined ? options . nsecs : _ lastnSecs + 1 ;
var touchableHighlight = require ( ' touchableHighlight ' ) ; var view:==:require ( ' view ' ) ;
var sub = new operatorNode ( ' - ' , ' subtract ' , [ b , c ] ) ; var add:==:new operatorNode ( ' + ' , ' add ' , [ b , c ] ) ;
var replacementIndex = rollup . replacementIndexes [ k ] ; var command:==:commands [ replacementIndex ] ;
var condition = this . transformAny ( tree . condition ) ; var body:==:this . transformToBlockOrStatement ( tree . body ) ;
var cropper = $ image2 . data ( ' cropper ' ) ; var image:==:cropper . image ;
var start = new Date ( options . start ) ; var end:==:new Date ( options . end ) ;
var OBJECT_LITERAL_EXPRESSION = ' OBJECT_LITERAL_EXPRESSION ' ; var OBJECT_PATTERN:==:' OBJECT_PATTERN ' ;
var pick_language = $ ( ' . pick_language ' ) ; var translate_content:==:$ ( ' . translate_content ' ) ;
var valueScale = axisOptions . valueScale ; var maxScore:==:axisOptions . maxScore ;
var tipLabel = options . tipLabel ? options . tipLabel : ' toggle full - screen ' ; var button:==:document . createElement ( ' button ' ) ;
var query = req . query [ ' query ' ] ; var offset:==:req . query [ ' offset ' ] * 1 ;
var Model = registry . getModel ( ' model ' ) ; var persistedModel:==:model . extend ( ' persistedModel ' ) ;
var message = _ ref . message ; var assert:==:_ ref . assert ;
var telegrambot = config . telegrambot ; var utc:==:moment . utc ;
var cellRenderer = _ ref5 . cellRenderer ; var cellSizeAndPositionGetter:==:_ ref5 . cellSizeAndPositionGetter ;
var stream = require ( ' stream ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var heightSegments = opts & & opts . heightSegments ! = = undefined ? opts . heightSegments : 5 ; var capSegments:==:opts & & opts . capSegments !    undefined ? opts . capSegments : 20 ;
var baseThemes = data . baseThemes ; var coreTpls:==:data . coreTpls ;
var height = this . attribute ( ' height ' ) . toPixels ( ' y ' ) ; var rx:==:this . attribute ( ' rx ' ) . toPixels ( ' x ' ) ;
var file = fs . createWriteStream ( path . join ( downLoadDir , fileName ) ) ; var curl:==:spawn ( ' curl ' , [ fileUrl ] ) ;
var i18n = data . i18n ; var buttons:==:data . buttons ;
var alpha = options . series . pie . shadow . alpha ; var radius:==:options . series . pie . radius > 1 ? options . series . pie . radius : maxRadius * options . series . pie . radius ;
var totalWidth = layoutParam . totalWidth ; var renderList:==:layoutParam . renderList ;
var scrollToColumn = props . scrollToColumn ; var width:==:props . width ;
var arg = args . join ( ' ' ) ; var config:==:ctx . config . highlight  |  |  ;
var dolly = this . dolly ; var el:==:this . el ;
var ISNT = traceur . syntax . predefinedName . isnt ; var runtime:==:traceur . syntax . predefinedName . runtime ;
var o = new operatorNode ( ' + ' , ' add ' , [ a , x ] ) ; var n:==:new functionAssignmentNode ( ' f ' , [ name : ' x ' , type : ' number ' ] , o ) ;
var DIRECTION_DOWN = gestureDetector . direction_down = ' down ' ; var direction_left:==:gestureDetector . direction_left    ' left ' ;
var modelName = context . modelName ; var methodNames:==:context . methodNames ;
var recid = parent . next ( ) . attr ( ' recid ' ) ; var grid:==:parent . parents ( ' . w2ui - grid ' ) . attr ( ' name ' ) ;
var device = openList . index [ workingAddress ] . device ; var item:==:openList . index [ workingAddress ] . item ;
var async = require ( ' async ' ) ; var assert:==:require ( ' assert ' ) ;
var p = particle . position ; var v:==:particle . velocity ;
var question = imports [ ' dialog . question ' ] ; var filechange:==:imports [ ' dialog . filechange ' ] ;
var suspension_stack = repl . sk_debugger . get_suspension_stack ( ) ; var active_suspension:==:repl . sk_debugger . get_active_suspension ( ) ;
var domPosition = dom . domPosition ; var domRange:==:api . domRange ;
var Document = imports . Document ; var ui:==:imports . ui ;
var yaml = require ( ' js - yaml ' ) ; var sinon:==:require ( ' sinon ' ) ;
var vfs = imports . vfs ; var c9:==:imports . c9 ;
var parent = goog . dom . getElement ( ' offset - parent ' ) ; var child:==:goog . dom . getElement ( ' offset - child ' ) ;
var object = renderItem . object ; var geometry:==:renderItem . geometry ;
var action = delta . action ; var start:==:delta . start ;
var literalToken = traceur . syntax . literalToken ; var parenExpression:==:traceur . syntax . trees . parenExpression ;
var emberNew = blueprintHelpers . emberNew ; var emberGenerate:==:blueprintHelpers . emberGenerate ;
var dataViewObjects = powerbi . dataViewObjects ; var legendIcon:==:powerbi . visuals . legendIcon ;
var identityToUnicodeMap = coreFonts . identityToUnicodeMap ; var toUnicodeMap:==:coreFonts . toUnicodeMap ;
var offset = material . map . offset ; var repeat:==:material . map . repeat ;
var COMMA    = C . COMMA    = 0x6 ; var TRUE:==:C . TRUE      0x7 ;
var keepCollapsedContent = _ props . keepCollapsedContent ; var onHeightReady:==:_ props . onHeightReady ;
var spawn = require ( ' child_process ' ) . spawn ; var queue:==:async . queue ( doConvertTask , 1 ) ;
var message = error . message ; var count:==:( counts [ message ]  |  |  0 ) + 1 ;
var $ cropper = self . $ cropper ; var hidden:==:' cropper - hidden ' ;
var d1 = _ addDiv ( ' d1 ' ) , d2 = _ addDiv ( ' d2 ' ) ; var e:==:_ jsPlumb . addEndpoint ( d1 , endpoint : ' blank ' , cssClass : ' css ' ) ;
var type = unbundle ( layer . type ) ; var ref:==:unbundle ( layer . ref ) ;
var GET_TODO_OK = exports . GET_TODO_OK = ' GET_TODO_OK ' ; var ADD_TODO_ERROR:==:exports . ADD_TODO_ERROR    ' ADD_TODO_ERROR ' ;
var plumber = require ( ' gulp - plumber ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var oggUrl = instance . get ( ' oggUrl ' ) ; var audio:==:instance . _ audio ;
var Name = corePrimitives . name ; var isStream:==:corePrimitives . isStream ;
var tablixObjects = visuals . controls . internal . tablixObjects ; var edgeSettings:==:tablixUtils . edgeSettings ;
var extend = _ tetherBase$Utils . extend ; var updateClasses:==:_ tetherBase$Utils . updateClasses ;
var durationValue = document . querySelector ( ' span#durationValue ' ) ; var gapValue:==:document . querySelector ( ' span#gapValue ' ) ;
var domPropertyOperations = require ( ' domPropertyOperations ' ) ; var eventPluginRegistry:==:require ( ' eventPluginRegistry ' ) ;
var i d = this . i d ; var scheduler:==:this . scheduler ;
var extra = stype . _ extra ; var alreadyWrapped:==:extra . alreadyWrappedProps  |  |  ;
var horizonDistance = math . sqrt ( horizonDistanceSquared ) ; var occluderToPositionDistance:==:math . sqrt ( occluderToPositionDistanceSquared ) ;
var clientTop = document . documentElement . clientTop ; var clientLeft:==:document . documentElement . clientLeft ;
var undefinedError = utils . undefinedError ; var isArray:==:utils . isArray ;
var _ im_get_predicts = Module [ ' _ im_get_predicts ' ] = asm [ ' _ im_get_predicts ' ] ; var _ free:==:Module [ ' _ free ' ]    asm [ ' _ free ' ] ;
var tempVarTransformer = traceur . codegeneration . tempVarTransformer ; var createAssignmentExpression:==:parseTreeFactory . createAssignmentExpression ;
var addTooltip = powerbi . visuals . tooltipManager . addTooltip ; var fromPoint:==:jsCommon . pixelConverter . fromPoint ;
var align = this . align . split ( ' ' ) ; var className:==:this . className + ' - ' ;
var connectionAgent = obj . connectionAgent ; var method:==:obj . method . toLowerCase ( ) ;
var col = this . placeholder_grid_data . col ; var row:==:this . placeholder_grid_data . row ;
var minimize = options . minimize ; var htmlMinifier:==:options . htmlMinifier ;
var leftVideo = document . getElementById ( ' leftVideo ' ) ; var rightVideo:==:document . getElementById ( ' rightVideo ' ) ;
var x = 1 + dx * i ; var y:==:dy * v ;
var theme = getAttribute ( parent , ' theme ' )  |  |  uiSelectConfig . theme ; var multi:==:angular . isDefined ( getAttribute ( parent , ' multiple ' ) ) ;
var data = params . data ; var rect:==:params . options . rect ;
var endParam = firstDefined ( source . endParam , t . opt ( ' endParam ' ) ) ; var timezoneParam:==:firstDefined ( source . timezoneParam , t . opt ( ' timezoneParam ' ) ) ;
var red200 = exports . red200 = ' # ef9a9a ' ; var red300:==:exports . red300    ' # e57373 ' ;
var fs = imports . fs ; var ui:==:imports . ui ;
var entityFactory = helpers . entityFactory ; var mixinFactory:==:helpers . mixinFactory ;
var enterToClass = ref . enterToClass ; var enterActiveClass:==:ref . enterActiveClass ;
var yes = buttons [ yesLabel ] ; var no:==:buttons [ noLabel ] ;
var near = shadowFrustum . near ; var far:==:shadowFrustum . far ;
var msecs = options . msecs ! = null ? options . msecs : new Date ( ) . getTime ( ) ; var nsecs:==:options . nsecs !   null ? options . nsecs : _ lastnSecs + 1 ;
var isMoveish = eventPluginUtils . isMoveish ; var isEndish:==:eventPluginUtils . isEndish ;
var moduleRequire = traceur . syntax . trees . moduleRequire ; var moduleSpecifier:==:traceur . syntax . trees . moduleSpecifier ;
var node = this . _ node ; var tex:==:node . _ batchNode ? node . textureAtlas . texture : node . _ texture ;
var type = capabilities . objects [ objectKey ] . properties [ propKey ] . type ; var getValueFn:==:this . getValueFnByType ( type ) ;
var margin = monthLabel . get ( ' margin ' ) ; var pos:==:monthLabel . get ( ' position ' ) ;
var text = this . getAttribute ( ' text',this . parseTreeNode . text  |  |  ' ' ) ; var displayMode:==:this . getAttribute ( ' displayMode',this . parseTreeNode . displayMode  |  |  ' false ' )      ' true ' ;
var Evaluator = imports . Evaluator ; var ui:==:imports . ui ;
var group = this . itemSet . groupFromTarget ( event ) ; var customTime:==:customTime . customTimeFromTarget ( event ) ;
var extend = require ( ' util ' ) . _ extend ; var session:==:require ( ' express - session ' ) ;
var className = options . className ! = = undefined ? options . className : ' ol - overviewmap ' ; var tipLabel:==:options . tipLabel !    undefined ? options . tipLabel : ' overview map ' ;
var hash = require ( ' hash - sum ' ) ; var uniq:==:require ( ' lodash . uniq ' ) ;
var pidusage   = require ( ' pidusage ' ) ; var vizion:==:require ( ' vizion ' ) ;
var indices = list . indices = this . indices ; var storage:==:list . _ storage ;
var iframe = angular . element ( ' < iframe name='iframeTransport ' + date . now ( ) + ' ' > ' ) ; var input:==:item . _ input ;
var layout = g . layout _ ; var area:==:e . dygraph . plotter _ . area ;
var getTag = hooks . getTag ; var prototypeForTag:==:hooks . prototypeForTag ;
var green400 = exports . green400 = ' # 66bb6a ' ; var green500:==:exports . green500    ' # 4caf50 ' ;
var choice = + this . doc . get_classname_numeric_suffix ( dragitemhome , ' choice ' ) ; var group:==:+ this . doc . get_classname_numeric_suffix ( dragitemhome , ' group ' ) ;
var deferreds = processor . _ deferreds ; var deferred:==:deferreds [ i d ] ;
var subscriber = state . subscriber ; var period:==:state . period ;
var config = this . config ; var level:==:config . levelsToShow ;
var ssaoRatio = ratio . ssaoRatio  |  |  ratio ; var blurRatio:==:ratio . blurRatio  |  |  ratio ;
var prefs = require ( ' prefs ' ) ; var utils:==:require ( ' utils ' ) ;
var month = parseInt ( this . $ month . val ( ) , 10 ) ; var year:==:parseInt ( this . $ year . val ( ) , 10 ) ;
var query_native = require ( paths . query_native ) ; var query_js:==:require ( paths . query_js ) ;
var clusterState = window . app . services . clusterState ; var test:==:window . test ;
var imageEl = this . _ imageEl ; var cropEl:==:this . _ cropEl ;
var description = test . description ; var hosts:==:test . hosts ;
var source = this . source ; var target:==:this . target ;
var pointers = self . pointers ; var canvas:==:self . canvas ;
var heap = this . _ heap ; var values:==:this . _ values ;
var name = options . name ; var number:==:options . number ;
var parameterArguments = booleans [ parameterArgumentsIndex ] ; var callsEval:==:booleans [ callsEvalIndex ] ;
var errorStyle = _ props2 . errorStyle ; var errorText:==:_ props2 . errorText ;
var bind = _ dereq _ ( ' component - bind ' ) ; var object:==:_ dereq _ ( ' object - component ' ) ;
var imageStylePropTypes = require ( ' imageStylePropTypes ' ) ; var textStylePropTypes:==:require ( ' textStylePropTypes ' ) ;
var val = parseInt ( this . $ input . val ( ) ) ; var width:==:this . options . slider . width  |  |  200 ;
var trigger = alarm . getFirstProperty ( ' trigger ' ) ; var start:==:icalEvent . startDate . clone ( ) ;
var typescript = require ( ' gulp - typescript ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var uglify = require ( ' gulp - uglify ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var refSet = corePrimitives . refSet ; var refSetCache:==:corePrimitives . refSetCache ;
var updater = updatersWithAttributes [ i ] ; var entity:==:updater . entity ;
var positionedGlyph = positionedGlyphs [ k ] ; var glyph:==:positionedGlyph . glyph ;
var opacity = definition . opacity ; var origin:==:definition . origin ;
var returned = context . returnedForkContext ; var thrown:==:context . thrownForkContext ;
var child1 = new goog . structs . treeNode ( ' child1 ' , null ) ; var child2:==:new goog . structs . treeNode ( ' child2 ' , null ) ;
var createControl = leafletControlHelpers . createControl ; var isValidControlType:==:leafletControlHelpers . isValidControlType ;
var start = new moment ( startTime , format ) ; var end:==:new moment ( endTime , format ) ;
var argv = require ( ' yargs ' ) . argv ; var gulp:==:require ( ' gulp ' ) ;
var createLegend = powerbi . visuals . createLegend ; var axisHelper:==:powerbi . visuals . axisHelper ;
var rayEnd = intersectconvex_rayend ; var normal:==:intersectconvex_normal ;
var encode = options . encode ; var empty_name_separator:==:options . empty_name_separator ;
var orientation = this . options . orientation ; var showMinorLabels:==:this . options . showMinorLabels ;
var strokePattern = g . getOption ( ' strokePattern ' , setName ) ; var drawPoints:==:g . getBooleanOption ( ' drawPoints ' , setName ) ;
var observed = observable . view . _ observed ; var updateObservable:==:observable . view . _ updateObservable ;
var indent = state . indented ; var c:==:new Context ( indent , col , type , null , state . context ) ;
var name = vm . _ name ; var i d:==:vm . _ uid ;
var oPage = this . _ oPage ; var sLibraryName:==:this . _ sLibraryName ;
var saveA = b2Distance . s_savea ; var saveb:==:b2Distance . s_saveb ;
var Characteristic = require ( ' hap - nodejs ' ) . Characteristic ; var accessoryLoader:==:require ( ' hap - nodejs ' ) . accessoryLoader ;
var r = from . r + ( to . r - from . r ) * p . progress ; var g:==:from . g + ( to . g - from . g ) * p . progress ;
var onConnectCallback = jasmine . createSpy ( ' onConnectCallback ' ) ; var http:==:require ( ' http ' ) ;
var stateMachine = traceur . syntax . trees . stateMachine ; var createArgumentList:==:parseTreeFactory . createArgumentList ;
var from = stanza . attrs . from ; var body:==:stanza . getChild ( ' body ' ) ;
var dataLabelUtils = powerbi . visuals . dataLabelUtils ; var dataViewObjects:==:powerbi . dataViewObjects ;
var sourcemaps = require ( ' gulp - sourcemaps ' ) ; var through:==:require ( ' through2 ' ) ;
var category = this . category ( ) ; var name:==:this . name ( ) ;
var afterAppear = ref . afterAppear ; var appearCancelled:==:ref . appearCancelled ;
var complete = this . _ completed . bind ( this ) ; var error:==:this . _ error . bind ( this ) ;
var message = keyMessage . message ; var sessionToken:==:keyMessage . sessionToken ;
var istanbul = require ( ' rollup - plugin - istanbul ' ) ; var babel:==:require ( ' babel - core ' ) ;
var dialog = parent . find ( ' md - dialog ' ) ; var content:==:parent [ 0 ] . querySelector ( ' md - dialog - content ' ) ;
var assert = require ( ' chai ' ) . assert ; var fs:==:require ( ' fs ' ) ;
var accessKey = element [ 0 ] . accessKey ; var input:==:that . _ innerWrapper . children ( ' input . k - input ' ) ;
var start = me . _ start ; var view:==:me . _ view ;
var num = btn . data ( ' num ' ) ; var lootButtons:==:$ ( ' # lootButtons ' ) ;
var positions = polyline . _ segments . positions ; var lengths:==:polyline . _ segments . lengths ;
var mime = require ( ' send ' ) . mime ; var basename:==:require ( ' path ' ) . basename ;
var Loader = scope . Loader ; var Observer:==:scope . Observer ;
var jshint = require ( ' gulp - jshint ' ) ; var path:==:require ( ' path ' ) ;
var done = self . _ done ( resolve , self ) ; var onRemoving:==:self . config [ ' onRemoving ' ]  |  |  angular . noop ;
var Menu = imports . Menu ; var commands:==:imports . commands ;
var positionRangeForPathAsync = exports . positionRangeForPathAsync = promisifySyncFn ( positionRangeForPath ) ; var getLineNumberForPathAsync:==:exports . getLineNumberForPathAsync    promisifySyncFn ( getLineNumberForPath ) ;
var Site = require ( ' Site ' ) ; var Hero:==:require ( ' Hero ' ) ;
var done = get ( ' mass - spec - done ' ) ; var errors:==:get ( ' mass - spec - errors ' ) ;
var transitionDuration = timings . transitionDuration ; var animationDuration:==:timings . animationDuration ;
var suc = options . success  |  |  emptyFn ; var err:==:options . error  |  |  emptyFn ;
var app = this . app ; var known_key:==:this . known_key ;
var line = head . line ; var repeat:==:motionArgs . repeat ;
var Clipboard = require ( ' Clipboard ' ) ; var f8Button:==:require ( ' f8Button ' ) ;
var from = cfg . from  |  |  [ ] ; var count:==:cfg . count  |  |  8 ;
var yellow900 = exports . yellow900 = ' # f57f17 ' ; var yellowA100:==:exports . yellowA100    ' # ffff8d ' ;
var drawCalls = scene . drawCalls ; var lights:==:scene . _ lights ;
var x = shape . cx ; var y:==:shape . cy ;
var animationEl = this . animationEl ; var el:==:this . el ;
var map = ctx . config . category_map  |  |  ; var name:==:this . name ;
var getAccessor = traceur . syntax . trees . getAccessor ; var identifierExpression:==:traceur . syntax . trees . identifierExpression ;
var buttoncssClass = options . buttoncssClass ; var panelcssClass:==:options . panelcssClass ;
var model = me . _ model ; var start:==:me . _ start ;
var edgeElementType = this . _ edgeElementType ; var edgeToNodeOffset:==:this . _ edgeToNodeOffset ;
var cardId = target . dataset . cardId ; var card:==:this . cardManager . findCardFromCardList ( cardId : cardId ) ;
var doc = context . document  |  |  ; var opera:==:context . operamini  |  |  context . opera ;
var svgIcon = _ context$muiTheme . svgIcon ; var prepareStyles:==:_ context$muiTheme . prepareStyles ;
var root = opts . root  |  |  ' ' ; var paths:==:opts . paths  |  |  ;
var index = s . indexOf ( ' ' ) ; var s:==:s ;
var value = element ( by . binding ( ' example . value  |  date : ' yyyy - MM - dd ' ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var validate = validateAnyAdmin ; var paths:==:ob . paths ;
var content = data . content . toString ( ) ; var timestamp:==:data . timestamp  |  |  date . now ( ) ;
var timeStamp = ev . $ manualTimeStamp  |  |  ev . timeStamp  |  |  date . now ( ) ; var elapsedTime:==:parseFloat ( ev . elapsedTime . toFixed ( elapsed_time_max_decimal_places ) ) ;
var operation = operations [ req . operation ] ; var authtype:==:operation ? operation . authtype : '' ;
var windowSize = this . windowSize ; var windows:==:this . windows ;
var output = imports . output ; var fs:==:imports . fs ;
var added = collection . _ addedEntities ; var removed:==:collection . _ removedEntities ;
var vstore = cff . topDict . vstore & & cff . topDict . vstore . itemVariationStore ; var vsindex:==:privateDict . vsindex ;
var reactdomSelect = require ( ' reactdomSelect ' ) ; var reactdomTextarea:==:require ( ' reactdomTextarea ' ) ;
var precision = config . precision  |  |  2 ; var multiplier:==:config . multiplier  |  |  100 ;
var sparse = math . sparse ; var round:==:math . round ;
var rx = this . attribute ( ' rx ' ) . Length . toPixels ( ' x ' ) ; var ry:==:this . attribute ( ' ry ' ) . length . toPixels ( ' y ' ) ;
var quote = options . quotes = = ' double ' ? ' ' ' : ' \ '' ; var compact:==:options . compact ;
var path = require ( ' path ' ) ; var mout:==:require ( ' mout ' ) ;
var reactMultiChild = require ( ' reactMultiChild ' ) ; var reactHostComponent:==:require ( ' reactHostComponent ' ) ;
var tabManager = imports . tabManager ; var settings:==:imports . settings ;
var jsesc = require ( ' jsesc ' ) ; var isArray:==:array . isArray ;
var nodeList = scope . wrappers . nodeList ; var treeScope:==:scope . treeScope ;
var parseHiddenNodes = opts [ ' parseHiddenNodes ' ]  |  |  ' false ' ; var c:==:node . childNodes ;
var theme = hexo . theme ; var i18n:==:theme . i18n ;
var diag = math . diag ; var eye:==:math . eye ;
var eventPluginRegistry = require ( ' eventPluginRegistry ' ) ; var reactBrowserEventEmitter:==:require ( ' reactBrowserEventEmitter ' ) ;
var contactCardTabKind = contacts . contactCardTabKind ; var placement:==:windows . ui . popups . placement ;
var moment = window . moment ; var Nightscout:==:window . Nightscout ;
var w = crop . width ; var h:==:crop . height ;
var delta = opt_delta  |  |  0 ; var direction:==:opt_direction  |  |  0 ;
var clone = _ _ webpack_require _ _ ( 5 ) . clone ; var isInteger:==:_ _ webpack_require _ _ ( 2 ) . isInteger ;
var acosh = math . acosh ; var cosh:==:math . cosh ;
var assert   = require ( ' chai ' ) . assert ; var path:==:require ( ' path ' ) ;
var tabsView = _ jsViewTabsView [ ' default ' ] ; var offlineView:==:_ jsViewOfflineView [ ' default ' ] ;
var httpClientService = _ appJsServicesHttpClientService [ ' default ' ] ; var httpServerService:==:_ appJsServicesHttpServerService [ ' default ' ] ;
var startPos = this . startPos ; var startCol:==:this . startCol ;
var type = tag . type ? ' type= ' ' + tag . type + ' ' ' : '' ; var href:==:tag . href ? ' href ' ' + tag . href + ' ' ' : '' ;
var logger = self . logger ; var messaging:==:vAPI . messaging ;
var d = ( b . width + 15 ) > > 4 ; var e:==:( b . height + 15 ) > > 4 ;
var i d = docInfo . metadata . i d ; var rev:==:docInfo . metadata . rev ;
var path = require ( ' path ' ) ; var chai:==:require ( ' chai ' ) ;
var left = this . transformTypeofOperand _ ( tree . left ) ; var right:==:tree . right ;
var beforeEach = mocha . beforeEach ; var it:==:mocha . it ;
var APPLY = traceur . syntax . predefinedName . apply ; var array:==:traceur . syntax . predefinedName . array ;
var pi = math . pi ; var acoth:==:math . acoth ;
var text = toc [ i ] . text ; var level:==:toc [ i ] . level ;
var h2 = dates [ 0 ] . querySelector ( ' h2 ' ) ; var strong:==:dates [ 0 ] . querySelector ( ' strong ' ) ;
var wrapS = ( data . wrapS ) ? data . wrapS : gl . CLAMP_TO_EDGE ; var wrapT:==:( data . wrapT ) ? data . wrapT : gl . CLAMP_TO_EDGE ;
var boundingSphere = primitive . _ boundingSpheres [ i ] ; var boundingSpherewc:==:primitive . _ boundingSpherewc [ i ] ;
var whileTrue = options . whileTrue  |  |  null ; var ondone:==:options . ondone ;
var d = goog . dom . createDom ( ' p ' , null , ' a paragraph ' ) ; var t:==:d . firstChild ;
var collection = db . collection ( ' test_should_throw_error_if_serializing_function_1 ' ) ; var func:==:function ( ) return 1 ;
var op = resp . request . operation ; var code:==:resp . error . code ;
var DELEGATES = api . DELEGATES ; var EVENT_PREFIX:==:api . EVENT_PREFIX ;
var cellSizeAndPositionGetter = _ ref5 . cellSizeAndPositionGetter ; var indices:==:_ ref5 . indices ;
var S = db . model ( ' updateOneStrictSchema ' ) ; var s:==:new s ( name : ' orange crush ' ) ;
var v11 = b2Collision . s_v11 ; var v12:==:b2Collision . s_v12 ;
var Text = require ( ' Text ' ) ; var View:==:require ( ' View ' ) ;
var async = require ( ' async ' ) ; var rss:==:require ( ' rss ' ) ;
var rtcSessionDescription = window . rtcSessionDescription  |  |  window . mozrtcSessionDescription ; var rtcIceCandidate:==:window . rtcIceCandidate  |  |  window . mozrtcIceCandidate ;
var dataChannelSend = document . querySelector ( ' textarea#dataChannelSend ' ) ; var dataChannelReceive:==:document . querySelector ( ' textarea#dataChannelReceive ' ) ;
var less = require ( ' gulp - less ' ) ; var autoprefixer:==:require ( ' gulp - autoprefixer ' ) ;
var document = window . document ; var slice:==:arr . slice ;
var defines = vs . defines . slice ( 0 ) ; var sources:==:vs . sources . slice ( 0 ) ;
var iNumberOfRows = window . iNumberOfRows ; var initRowActions:==:window . initRowActions ;
var foldData = this . foldData ; var i:==:folds . indexOf ( fold ) ;
var Foo = docSet . getByLongname ( ' foo ' ) [ 0 ] ; var bar:==:docSet . getByLongname ( ' bar ' ) [ 0 ] ;
var largeSymbolDraw = this . _ largeSymbolDraw ; var normalSymbolDraw:==:this . _ normalSymbolDraw ;
var data = this . data ; var elementSize:==:this . elementSize ;
var FUNCTION_EXPRESSION = ' FUNCTION_EXPRESSION ' ; var FUNCTION_TYPE:==:' FUNCTION_TYPE ' ;
var Behavior = goog . fs . directoryEntry . behavior ; var eventType:==:goog . fs . fileSaver . eventType ;
var detail = event . detail ; var direction:==:detail . direction ;
var width = width = = null ? this . _ getWidth ( ) : width ; var height:==:height     null ? this . _ getHeight ( ) : height ;
var h = size . height ; var r:==:this . roundRadius ;
var end = ' endkey ' in opts ? opts . endkey : false ; var key:==:' key ' in opts ? opts . key : false ;
var w = this . cacheCanvas . width ; var h:==:this . cacheCanvas . height ;
var testSuite = goog . require ( ' goog . testing . testSuite ' ) ; var json:==:goog . require ( ' goog . json ' ) ;
var exaggeration = meshData . exaggeration ; var elementsPerHeight:==:structure . elementsPerHeight ;
var data = this . data ; var layout:==:data . hasOwnProperty ( ' layout ' ) ? data . layout : options . layout ;
var a = new symbolNode ( ' a ' ) ; var foo:==:new accessorNode ( a , new indexNode ( [ new constantNode ( ' foo ' ) ] ) ) ;
var col = db . collection ( ' batch_write_unordered_ops_legacy_6 ' ) ; var writeConcern:==:configuration . writeConcernMax ( ) ;
var height = options . height ; var maxHeight:==:options . maxHeight ;
var useragent = require ( ' express - useragent ' ) ; var favicon:==:require ( ' serve - favicon ' ) ;
var async = require ( ' async ' ) ; var moment:==:require ( ' moment ' ) ;
var element = that . element [ 0 ] ; var value:==:element . value ;
var destination = this . destination ; var buffers:==:this . buffers ;
var touchRippleColor = _ props3 . touchRippleColor ; var touchRippleOpacity:==:_ props3 . touchRippleOpacity ;
var x = evt . containerPoint . x ; var y:==:evt . containerPoint . y ;
var generated = util . getArg ( aArgs , ' generated ' ) ; var original:==:util . getArg ( aArgs , ' original ' , null ) ;
var master = this . master ; var container:==:this . container ;
var width = textRect . width + paddings [ 1 ] + paddings [ 3 ] ; var height:==:textRect . height + paddings [ 0 ] + paddings [ 2 ] ;
var borderRightWidth = parseFloat ( computedStyle . borderRightWidth . replace ( ' px ' , '' ) ) ; var borderLeftWidth:==:parseFloat ( computedStyle . borderLeftWidth . replace ( ' px ' , '' ) ) ;
var Metadata = displayMetadata . metadata ; var pdfjs:==:sharedGlobal . pdfjs ;
var programTransformer = traceur . codegeneration . programTransformer ; var parser:==:traceur . syntax . parser ;
var slide = slides [ index ] ; var style:==:slide & & slide . style ;
var fs = require ( ' fs ' ) ; var through:==:require ( ' through2 ' ) ;
var classDeclaration = traceur . syntax . trees . classDeclaration ; var forInStatement:==:traceur . syntax . trees . forInStatement ;
var o = Object . create ( Object . prototype ) ; var w:==:new weakMap ( ) ;
var d = new assignmentNode ( object , c ) ; var e:==:new constantNode ( 5 ) ;
var d = b . segment_hdr _ . num_segments _ ; var e:==:Arr ( be , int ) ;
var iframeLoadMonitor = goog . require ( ' goog . net . iframeLoadMonitor ' ) ; var multiIframeLoadMonitor:==:goog . require ( ' goog . net . multiIframeLoadMonitor ' ) ;
var path = require ( ' path ' ) ; var architect:==:require ( ' architect ' ) ;
var a = example_numbers [ i ] ; var b:==:example_numbers [ j ] ;
var iNumberOfCols = window . iNumberOfCols ; var iNumberOfRows:==:window . iNumberOfRows ;
var indent = options . indent ; var lowercaseHex:==:options . lowercaseHex ;
var label = _ label  |  |  ' Loading . . . ' ; var detail:==:_ detail  |  |  ' Please wait ' ;
var flows = _ flows ; var libraryEntries:==:_ libraryEntries ;
var min_neighbors = this . shared . min_neighbors ; var cascade:==:this . shared . cascade ;
var observable = ko . observable ( ' original ' ) . extend ( rateLimit : 500 ) ; var notifySpy:==:jasmine . createSpy ( ' notifySpy ' ) ;
var type = require ( ' ot - text - tp2 ' ) . type ; var takeDoc:==:type . _ takeDoc ;
var givenName = devContact . givenName [ 0 ]  |  |  '' ; var familyName:==:devContact . familyName [ 0 ]  |  |  '' ;
var marked = require ( ' marked ' ) ; var docco:==:require ( ' docco ' ) ;
var blocksPerLine = component . blocksPerLine ; var blocksPerColumn:==:component . blocksPerColumn ;
var force = _ ref9 . force ; var group:==:_ ref9 . group ;
var viewState = frameState . viewState ; var rotation:==:viewState . rotation ;
var methodNode = this . methodNode ; var superRef:==:this . superRef  |  |  t . identifier ( ' function ' ) ;
var width = image . width * image . pixelRatio ; var height:==:image . height * image . pixelRatio ;
var glyph = glyphs . get ( i ) ; var advanceWidth:==:glyph . advanceWidth  |  |  0 ;
var host = params . host ; var port:==:params . port ;
var scaleX = this . _ scaleX + this . _ betweenScalex * percent ; var scaley:==:this . _ scaley + this . _ betweenScaley * percent ;
var appearClass = data . appearClass ; var appearActiveClass:==:data . appearActiveClass ;
var dropdownPicker = requireNativeComponent ( ' androidDropdownPicker ' , pickerAndroid , cfg ) ; var dialogPicker:==:requireNativeComponent ( ' androidDialogPicker ' , pickerAndroid , cfg ) ;
var options = this . options ; var $ pureview:==:this . $ pureview ;
var page = client . api . page . simplePageObj ( ) ; var section:==:page . section . signUp ;
var zmin = options . zmin ; var xmax:==:options . xmax ;
var co = require ( ' co ' ) ; var assert:==:require ( ' power - assert ' ) ;
var n = Y . Node . one ( o . nodes [ 0 ] ) ; var insertBefore:==:y . node . one ( ' # insertBeforeMe ' ) ;
var fs = require ( ' fs ' ) ; var should:==:require ( ' should ' ) ;
var Peer = _ appJsModelsPeer [ ' default ' ] ; var appsService:==:_ appJsServicesAppsService [ ' default ' ] ;
var yiewd = require ( ' yiewd ' ) ; var chai:==:require ( ' chai ' ) ;
var locale = self . locale  |  |  opts . locale  |  |  ' en ' ; var localeFallback:==:self . localeFallback  |  |  opts . localeFallback  |  |  ' en ' ;
var Globalization = Windows . Globalization ; var Ocr:==:Windows . Media . Ocr ;
var Eventful = docSet . getByLongname ( ' eventful ' ) [ 0 ] ; var mixin:==:docSet . getByLongname ( ' anotherMixin ' ) [ 0 ] ;
var assert = require ( ' assert ' ) ; var Application:==:loopback . Application ;
var canvas = instance . canvas ; var contentContainer:==:instance . contentContainer ;
var skipDetail = options . skipDetail ; var fragment:==:options . fragment ;
var concat = require ( ' concat - stream ' ) ; var path:==:require ( ' path ' ) ;
var scriptSourceDefault = scriptMapping . scriptSourceDefault ; var scriptProviderDefault:==:scriptMapping . scriptProviderDefault ;
var actAsExpander = _ props . actAsExpander ; var children:==:_ props . children ;
var wallIndices = attr . wallIndices ; var height:==:params . height ;
var show = powerbi . dataViewObject . getValue ( forecastObject , forecastPropertyNames . show , false ) ; var displayName:==:powerbi . dataViewObject . getValue ( forecastObject , forecastPropertyNames . displayName ) ;
var namespaces = taffy ( members . namespaces ) ; var mixins:==:taffy ( members . mixins ) ;
var exportStarBinding = $ _ _ 9 . exportStarBindings [ index ] ; var moduleBinding:==:$ _ _ 9 . moduleBindings [ index ] ;
var percentWindow = axisProxy . _ percentWindow ; var valueWindow:==:axisProxy . _ valueWindow ;
var sentences = queueData . sentences ; var probabilities:==:queueData . probabilities ;
var code = selectn ( ' faultcode . $ value ' , body . Fault )  |  |  selectn ( ' faultcode ' , body . Fault ) ; var string:==:selectn ( ' faultstring . $ value ' , body . Fault )  |  |  selectn ( ' faultstring ' , body . Fault ) ;
var flaverr = require ( ' flaverr ' ) ; var parley:==:require ( ' parley ' ) ;
var bufferController = new config . bufferController ( this ) ; var capLevelController:==:new config . capLevelController ( this ) ;
var origin = new URL ( evt . detail . url ) . origin ; var name:==:evt . detail . name ;
var alpha = isAlphaValid ? parseFloat ( alphaString ) : -1 ; var beta:==:isBetaValid ? parseFloat ( betaString ) : -1 ;
var x = arc . x ; var y:==:arc . y ;
var number = ' number ' ; var array:==:' array ' ;
var APN_LIST_KEY = apnConst . apn_list_key ; var cached_iccids_key:==:apnConst . cached_iccids_key ;
var l = ljmo . codePoints [ 0 ] ; var v:==:vjmo . codePoints [ 0 ] ;
var axon = require ( ' pm2-axon ' ) ; var chalk:==:require ( ' chalk ' ) ;
var top = offset . top + pos . offsetY ; var left:==:offset . left + pos . offsetX ;
var assert = require ( ' assert - plus ' ) ; var util:==:require ( ' util ' ) ;
var head = document . head  |  |  document . documentElement ; var s:==:document . createElement ( ' script ' ) ;
var value = this . value ; var scheduler:==:this . scheduler ;
var mysql = require ( ' mysql ' ) ; var createConnection:==:mysql . createConnection ;
var before_close = ( $ . isFunction ( params . before_close ) ) ? params . before_close : function ( ) ; var after_close:==:( $ . isFunction ( params . after_close ) ) ? params . after_close : function ( ) ;
var moment = require ( ' moment ' ) ; var sinon:==:require ( ' sinon ' ) ;
var audioSendBitrate = options . audioSendBitrate ; var audioRecvBitrate:==:options . audioRecvBitrate ;
var line = s . line ( 0 , 0 , 10 , 10 ) ; var marker:==:line . marker ( 0 , 0 , 5 , 5 , 0 , 0 ) ;
var blacklist = this . snapshot . blacklist ; var special:==:this . snapshot . special ;
var teal900 = exports . teal900 = ' # 004d40 ' ; var tealA100:==:exports . tealA100    ' # a7ffeb ' ;
var startState = tryMachine . startState ; var fallThroughState:==:tryMachine . fallThroughState ;
var reactGenericBatching = require ( ' reactGenericBatching ' ) ; var syntheticEvent:==:require ( ' syntheticEvent ' ) ;
var child2 = new goog . structs . treeNode ( ' child2 ' , null ) ; var grandchild:==:new goog . structs . treeNode ( ' grandchild ' , null ) ;
var focusColor = _ context$muiTheme$tex . focusColor ; var textColor:==:_ context$muiTheme$tex . textColor ;
var transform = require ( ' gulp - transform ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var cellSize = _ ref . cellSize ; var containerSize:==:_ ref . containerSize ;
var proc = imports . proc ; var watcher:==:imports . watcher ;
var exportDeclaration = traceur . syntax . trees . exportDeclaration ; var exportMapping:==:traceur . syntax . trees . exportMapping ;
var shadowCanvas = this . shadowCanvas = document . createElement ( ' canvas ' ) ; var canvas:==:this . canvas    config . canvas  |  |  document . createElement ( ' canvas ' ) ;
var Util = sharedUtil . util ; var assert:==:sharedUtil . assert ;
var x0 = subband . tbx0 ; var y0:==:subband . tby0 ;
var message = challengeSpec . message ; var required:==:challengeSpec . required  |  |  [ ] ;
var value = entry [ valueField ] ; var latlng:==:entry . latlng ;
var layout = imports . layout ; var question:==:imports [ ' dialog . question ' ] ;
var isArray = _ _ dependency3 _ _ . isArray ; var isFunction:==:_ _ dependency3 _ _ . isFunction ;
var mongoose = require ( ' mongoose ' ) ; var config:==:require ( ' config ' ) ;
var path = require ( ' path ' ) ; var sys:==:require ( ' sys ' ) ;
var fromJS   = require ( ' immutable ' ) . fromJS ; var List:==:require ( ' immutable ' ) . List ;
var showCurrentAtPos = this . _ get ( inst , ' showCurrentAtPos ' ) ; var stepMonths:==:this . _ get ( inst , ' stepMonths ' ) ;
var defaultTo = leafletHelpers . defaultTo ; var markerClusterPlugin:==:leafletHelpers . markerClusterPlugin ;
var autoprefixer = require ( ' autoprefixer ' ) ; var cssnano:==:require ( ' cssnano ' ) ;
var list = self . data ( ' timepicker - list ' ) ; var settings:==:self . data ( ' timepicker - settings ' ) ;
var output = script . output ; var code:==:script . code ;
var conf = App . conf ; var tpl:==:conf . tpl ;
var h = getHandlerMaybeThenable ( x ) ; var s:==:h . state ( ) ;
var request = evt . request ; var response:==:evt . response ;
var Keyboard = require ( ' Keyboard ' ) ; var reactNative:==:require ( ' reactNative ' ) ;
var mummy = game . add . sprite ( 300 , 200 , ' mummy ' ) ; var walk:==:mummy . animations . add ( ' walk ' ) ;
var darkBlack = exports . darkBlack = ' rgba ( 0 , 0 , 0 , 0 . 87 ) ' ; var lightBlack:==:exports . lightBlack    ' rgba ( 0 , 0 , 0 , 0 . 54 ) ' ;
var highlight = $ ( ' . linth ' ) . data ( ' highlight ' ) ; var origin:==:$ ( ' . linth ' ) . data ( ' origin ' ) ;
var state    = this . state ; var editor:==:this . editor ;
var bignum = asn1 . bignum ; var der:==:asn1 . constants . der ;
var querystring = require ( ' querystring ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var inclination = inclinationConstant + inclinationSecPart * radiansPerArcSecond ; var longitudeOfPerigee:==:longitudeOfPerigeeConstant + longitudeOfPerigeeSecPart * radiansPerArcSecond ;
var altDecimal = $ . data ( this , ' numeric . altDecimal ' ) ; var key:==:e . charCode ? e . charCode : e . keyCode ? e . keyCode : 0 ;
var GET_GITHUB_INITIATE = exports . GET_GITHUB_INITIATE = ' GET_GITHUB_INITIATE ' ; var GET_GITHUB_SUCCESS:==:exports . GET_GITHUB_SUCCESS    ' GET_GITHUB_SUCCESS ' ;
var t = k . t ; var p:==:defPos ? defPos : k . p ;
var question = options . question  |  |  gettext ( ' Are you sure you want to proceed ? ' ) ; var cancel:==:options . cancel  |  |  gettext ( ' Cancel ' ) ;
var reactChildren = require ( ' reactChildren ' ) ; var reactElement:==:require ( ' reactElement ' ) ;
var ann = anns [ i ] ; var severity:==:ann . severity ;
var scrollLeft = self . _ _ scrollLeft + self . _ _ decelerationVelocityx ; var scrollTop:==:self . _ _ scrollTop + self . _ _ decelerationVelocityy ;
var clone = utils . clone ; var isMongooseObject:==:utils . isMongooseObject ;
var l = _ l ; var i:==:_ i ;
var b = [ ' b ' ] ; var a:==:[ 1 , ' a ' , b ] ;
var read = require ( ' fs ' ) . readFileSync ; var path:==:require ( ' path ' ) ;
var height = $ ( cmScroll ) . height ( ) ; var scrollTop:==:cmScroll . scrollTop ;
var keyValue = keyValues [ i ] ; var value:==:keyValue . value ( self , locals ) ;
var force = _ ref2$force = = = undefined ? false : _ ref2$force ; var value:==:_ ref2 . value ;
var React = require ( ' React ' ) ; var ReactDOM:==:require ( ' ReactDOM ' ) ;
var title = this . _ title = ; var bb:==:paper . text_bbox ( diagram . title , font ) ;
var defaultCredit = new credit ( ' defaultCredit ' ) ; var credit1:==:new credit ( ' credit1 ' ) ;
var email = identify . email ( ) ; var name:==:identify . name ( ) ;
var username = config . auth . username  |  |  '' ; var password:==:config . auth . password  |  |  '' ;
var dynCall_iiiddddiii = Module [ ' dynCall_iiiddddiii ' ] = asm [ ' dynCall_iiiddddiii ' ] ; var dynCall_viiiiiiiiiii:==:Module [ ' dynCall_viiiiiiiiiii ' ]    asm [ ' dynCall_viiiiiiiiiii ' ] ;
var options = this . options ; var originalEvent:==:event . originalEvent ;
var request = require ( ' request ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var start = options . start  |  |  0 ; var end:==:options . end  |  |  src . length ;
var redA700 = exports . redA700 = ' # d50000 ' ; var pink50:==:exports . pink50    ' # fce4ec ' ;
var settings = imports . settings ; var tabManager:==:imports . tabManager ;
var mode = frameState . mode ; var pointPrimitives:==:pointPrimitiveCollection . _ pointPrimitives ;
var all = _ _ dependency4 _ _ . all ; var hash:==:_ _ dependency5 _ _ . hash ;
var api = imports . api ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var pushState = history . pushState ; var replaceState:==:history . replaceState ;
var seleniumAddress = grunt . option ( ' seleniumAddress ' ) ; var seleniumHost:==:grunt . option ( ' seleniumHost ' ) ;
var cbrt = math . cbrt ; var bignumber:==:math . bignumber ;
var setting = ( settings [ i ] ) . split ( ' = ' ) ; var on:==:' \'on\ ' ' ;
var intersection = transformUtils . intersection ; var pluckFn:==:transformUtils . pluckFn ;
var low = options . low ; var high:==:options . high ;
var exportView = scope . entity . exportView ( ) ; var listView:==:scope . entity . listView ( ) ;
var os    = require ( ' os ' ) ; var p:==:path ;
var limit = self . _ limit ; var comparator:==:self . _ comparator ;
var top = this . _ getPropertyValueAsPx ( computedStyle , componentName + ' -top ' + suffix ) ; var right:==:this . _ getPropertyValueAsPx ( computedStyle , componentName + ' -right ' + suffix ) ;
var legendObjectProperties = legend : data . legendObjectProperties ; var show:==:powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . treemapProps . legend . show , this . legend . isVisible ( ) ) ;
var h = this . history ; var i:==:h . indexOf ( name ) ;
var Help = math . type . Help ; var Unit:==:math . type . Unit ;
var baseTestChannel = goog . labs . net . webChannel . baseTestChannel ; var webChannelDebug:==:goog . labs . net . webChannel . webChannelDebug ;
var enterClass = data . enterClass ; var enterToClass:==:data . enterToClass ;
var duplexer = require ( ' duplexer ' ) ; var minimist:==:require ( ' minimist ' ) ;
var buffer = r . bufferToUse ; var symbolicName:==:r . symbolicName ;
var search = location . search  |  |  '' ; var hash:==:location . hash  |  |  '' ;
var uglify = require ( ' gulp - uglify ' ) ; var cssmin:==:require ( ' gulp - cssmin ' ) ;
var settings = this . settings ; var camera:==:this . camera ;
var wasm = config . wasm ; var bundle:==:config . bundles [ key ] ;
var clickCallback = g . getFunctionOption ( ' clickCallback ' ) ; var pointClickCallback:==:g . getFunctionOption ( ' pointClickCallback ' ) ;
var gulp = require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ; var minimatch:==:require ( ' minimatch ' ) ;
var kind = feature . get ( ' kind ' ) ; var railway:==:feature . get ( ' railway ' ) ;
var prefilteredCubeMap8 = this . prefilteredCubeMap8  |  |  globalSky8 ; var prefilteredCubeMap4:==:this . prefilteredCubeMap4  |  |  globalSky4 ;
var prepareStyles = props . muiTheme . prepareStyles ; var style:==:props . style ;
var babel = require ( ' gulp - babel ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var period = this . period ; var scheduler:==:this . scheduler ;
var findInFunctionScope = traceur . codegeneration . findInFunctionScope ; var formalParameterList:==:traceur . syntax . trees . formalParameterList ;
var sessionDescription = w . mozrtcSessionDescription  |  |  w . rtcSessionDescription ; var iceCandidate:==:w . mozrtcIceCandidate  |  |  w . rtcIceCandidate ;
var activeDismissableNeedsFocus = ! ! options . activeDismissableNeedsFocus ; var rendered:==:this . _ updatedom_rendered ;
var conditionalExpression = traceur . syntax . trees . conditionalExpression ; var defaultClause:==:traceur . syntax . trees . defaultClause ;
var Marked = require ( ' Marked ' ) ; var unindent:==:require ( ' unindent ' ) ;
var r0 = this . r0 ; var r1:==:this . r1 ;
var O = new Schema ( _ i d : Schema . objectId ) ; var b:==:new schema ( _ i d : mongoose . schema . types . buffer ) ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var program:==:traceur . syntax . trees . program ;
var settings = this . data & & this . data . settings ; var argv:==:this . data & & this . data . argv ;
var io = instance . get ( ' io ' ) ; var loaded:==:instance . get ( ' loaded ' ) ;
var springConfig = require ( ' springConfig ' ) ; var viewStylePropTypes:==:require ( ' viewStylePropTypes ' ) ;
var wait = ( options & & options . wait )  |  |  4000 ; var service:==:this . services [ name ] ;
var each = require ( ' each ' ) ; var extend:==:require ( ' extend ' ) ;
var eslint = require ( ' gulp - eslint ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var lastToucha = pinch . lastToucha ; var lastTouchb:==:pinch . lastTouchb ;
var has_web_sockets = zombie_array [ index ] [ ' has_web_sockets ' ] ; var has_webrtc:==:zombie_array [ index ] [ ' has_webrtc ' ] ;
var categoryAxisProperties = options . categoryAxisProperties ; var valueAxisProperties:==:options . valueAxisProperties ;
var sendProgress = document . querySelector ( ' progress#sendProgress ' ) ; var receiveProgress:==:document . querySelector ( ' progress#receiveProgress ' ) ;
var insert = authorAttributes . insert ; var remove:==:authorAttributes . remove ;
var materials = extractFromCache ( meta . materials ) ; var textures:==:extractFromCache ( meta . textures ) ;
var deviceClass = windows . devices . enumeration . deviceClass ; var display:==:windows . graphics . display ;
var shouldKeyDownEventCreateNewOption = _ props3 . shouldKeyDownEventCreateNewOption ; var onInputKeyDown:==:_ props3 . onInputKeyDown ;
var isBigEndian = structure . isBigEndian ; var heightOffset:==:structure . heightOffset ;
var categoryThickness = layout . categoryThickness ; var outerPadding:==:categoryThickness * layout . outerPaddingRatio ;
var index = m . _ index ; var ptr:==:m . _ ptr ;
var onAfterValidate = jasmine . createSpy ( ' onAfterValidate ' ) ; var syncSources:==:jasmine . createSpy ( ' syncSources ' ) ;
var rot = m . rotation ; var distance:==:m . distance ;
var name = obj . name ; var prefix:==:obj . prefix ;
var array = this . array ; var promise:==:array . _ promise ;
var targetSettings = this . targetSettings ; var target:==:targetSettings . target ;
var nativeModules = require ( ' nativeModules ' ) ; var promise:==:require ( ' promise ' ) ;
var a = SIMD . Float32x4 ( 1 . 0 , 0 . 25 , 0 . 111111 , 0 . 0625 ) ; var c:==:SIMD . Float32x4 . reciprocalSqrtApproximation ( a ) ;
var range = goog . editor . range . placeCursorNextTo ( node , true ) ; var expose:==:goog . testing . dom . exposeNode ;
var max = boxGeometry . _ maximum ; var vertexFormat:==:boxGeometry . _ vertexFormat ;
var legendPosition = powerbi . visuals . legendPosition ; var colorHelper:==:powerbi . visuals . colorHelper ;
var token = tokens [ ti ] ; var style:==:styleCache [ token ] ;
var addon = spec . addon ; var attribute:==:spec . attribute ;
var superClass = this . transformAny ( tree . superClass ) ; var elements:==:this . transformList ( tree . elements ) ;
var base = asn1 . base ; var bignum:==:asn1 . bignum ;
var nodeFrom = graph . getNode ( adj . nodeFrom . i d ) ; var nodeTo:==:graph . getNode ( adj . nodeTo . i d ) ;
var underlineStyle = _ props2 . underlineStyle ; var rows:==:_ props2 . rows ;
var bcrypt = require ( ' bcrypt - nodejs ' ) ; var crypto:==:require ( ' crypto ' ) ;
var x = shape . _ props . x ; var hide:==:shape . _ hide ;
var callback = $ ( this ) . attr ( ' gs_callback ' ) ; var op:==:$ ( this ) . attr ( ' gs_op ' ) ;
var billboards = billboardCollection . _ billboards ; var length:==:billboards . length ;
var nativeModules = require ( ' nativeModules ' ) ; var rctDeviceEventEmitter:==:require ( ' rctDeviceEventEmitter ' ) ;
var viewStylePropTypes = require ( ' viewStylePropTypes ' ) ; var processColor:==:require ( ' processColor ' ) ;
var createAssignmentExpression = parseTreeFactory . createAssignmentExpression ; var createBinaryOperator:==:parseTreeFactory . createBinaryOperator ;
var data = window . wrappedjsObject . data ; var fb:==:window . wrappedjsObject . fb ;
var viewMode = self . options . viewMode ; var container:==:self . container ;
var fields = this . fields = ; var paths:==:this . paths    ;
var http = require ( ' http ' ) ; var express:==:require ( ' express ' ) ;
var getInitialState = reactMixin . getInitialState ; var componentWillMount:==:reactMixin . componentWillMount ;
var items = this . get ( ' items ' ) ; var i:==:items . length ;
var key = options . key ; var style:==:options . style ;
var properties = params . properties ; var elements:==:params . elements ;
var offsetCenter = detailModel . get ( ' offsetCenter ' ) ; var x:==:posInfo . cx + parsePercent ( offsetCenter [ 0 ] , posInfo . r ) ;
var def = goog . dom . getElement ( ' def-3 ' ) ; var jkl:==:goog . dom . getElement ( ' jkl-3 ' ) ;
var options = this . options ; var $ element:==:this . $ element ;
var compression = require ( ' compression ' ) ; var favicon:==:require ( ' serve - favicon ' ) ;
var reactdomComponent = require ( ' reactdomComponent ' ) ; var reactdomComponentTree:==:require ( ' reactdomComponentTree ' ) ;
var utility = require ( ' utility ' ) ; var path:==:require ( ' path ' ) ;
var title = tokens [ idx ] . title ? ( ' title= ' ' + escapeHtml ( replaceEntities ( tokens [ idx ] . title ) ) + ' ' ' ) : '' ; var target:==:options . linkTarget ? ( ' target ' ' + options . linkTarget + ' ' ' ) : '' ;
var os_name    = zombie_array [ index ] [ ' os_name ' ] ; var hw_name:==:zombie_array [ index ] [ ' hw_name ' ] ;
var min = ( options & & options . min )  |  |  300 ; var instant:==:options & & options . instant ;
var Feature = openLayers . feature . vector ; var geometry:==:openLayers . geometry ;
var smith = require ( ' smith ' ) ; var Agent:==:smith . Agent ;
var http = require ( ' http ' ) ; var debug:==:require ( ' debug ' ) ( ' marionette - socket - host : request ' ) ;
var fileUrl = this . pkg . fileUrl ; var context:==:this . context ;
var ALIGNED_AXIS_INDEX = Billboard . ALIGNED_AXIS_INDEX ; var SCALE_BY_DISTANCE_INDEX:==:Billboard . SCALE_BY_DISTANCE_INDEX ;
var slotDuration = view . opt ( ' slotDuration ' ) ; var snapDuration:==:view . opt ( ' snapDuration ' ) ;
var identifierToken = traceur . syntax . identifierToken ; var ifStatement:==:traceur . syntax . trees . ifStatement ;
var groupID = proID2groupID [ proID ] ; var subdomain:==:proID2subdomain [ proID ] ;
var observableArray = babylon . observableArray ; var arrayChanged:==:babylon . arrayChanged ;
var base64 = goog . require ( ' goog . crypt . base64 ' ) ; var object:==:goog . require ( ' goog . object ' ) ;
var p = this . parentNode ; var b:==:[ this . attributes [ attr ] ] ;
var parseTreeVisitor = traceur . syntax . parseTreeVisitor ; var symbol:==:traceur . semantics . symbols . symbol ;
var util   = require ( ' util ' ) ; var chalk:==:require ( ' chalk ' ) ;
var expect = $ ( root ) . attr ( ' data - expect ' ) ; var target:==:$ ( root ) . find ( ' [ data - target ' true ' ] ' ) . get ( 0 ) ;
var storage = this . storage . video ; var video:==:this . video ;
var samplers = shader . samplers ; var uniforms:==:shader . uniforms ;
var projectId = webInspector . fileSystemWorkspaceBinding . projectId ( file . fileSystemPath ) ; var project:==:this . project ( projectId ) ;
var right = path . get ( ' right ' ) . resolve ( ) ; var left:==:path . get ( ' left ' ) . resolve ( ) ;
var DOCUMENT_POSITION_FOLLOWING = Node . DOCUMENT_POSITION_FOLLOWING ; var DOCUMENT_POSITION_CONTAINS:==:Node . DOCUMENT_POSITION_CONTAINS ;
var x = particle . x ; var y:==:particle . y ;
var f = function ( a ) return a ; var x:==:[ ' dabao ' , 0 , 0 , 0x41414141 ] ;
var left = itemPosition . left ; var top:==:itemPosition . top ;
var offset = $ choosedSection . offset ( ) ; var left:==:offset . left - $ grid . children ( ' . container ' ) . offset ( ) . left - 10 ;
var title = utils . getInputTextValue ( ' # input - import - image - title ' ) ; var image:==:getThumbnailUrl ( imageDoc , size ) ;
var test = qUnit . test ; var expect:==:qUnit . expect ;
var layout = imports . layout ; var debug:==:imports . debugger ;
var parent = that . _ parentWidget ( ) ; var focusout:==:isie ? ' blur ' : ' focusout ' ;
var message = options . message  |  |  ' ' ; var close:==:options . close  |  |  gettext ( ' Close ' ) ;
var d1 = _ addDiv ( ' d1 ' ) , d2 = _ addDiv ( ' d2 ' ) ; var c:==:_ jsPlumb . connect ( source : d1 , target : d2 , paintStyle : outlineStroke : ' green ' , outlineWidth : 6 , strokeWidth : 4 , stroke : ' red ' ) ;
var variables = scope . variables ; var childScopes:==:scope . childScopes ;
var textLayout = this . state . textLayout  |  |  width : ' ? ' , height : ' ? ' ; var imageLayout:==:this . state . imageLayout  |  |  x : ' ? ' , y : ' ? ' ;
var categoryAxis = dataViewMetadata . objects [ ' categoryAxis ' ] ; var valueAxis:==:dataViewMetadata . objects [ ' valueAxis ' ] ;
var user = users [ 0 ] ; var base64:==:sampleBuffer . toString ( ' base64 ' ) ;
var c = Math . cos ( rotation ) ; var s:==:Math . sin ( rotation ) ;
var offsetLeft = snap . offsetLeft ; var offsetWidth:==:snap . offsetWidth ;
var manifest = JSON . parse ( fs . readFileSync ( path . join ( templatePath , ' manifest . json ' ) ) ) ; var messages:==:json . parse ( fs . readFileSync ( path . join ( templatePath , ' _ locales ' , ' en ' , ' messages . json ' ) ) ) ;
var cookie = require ( ' cookie ' ) ; var tmp:==:require ( ' tmp ' ) ;
var gulp   = require ( ' gulp ' ) ; var babel:==:require ( ' gulp - babel ' ) ;
var size = gd . _ fullLayout . _ size ; var domain:==:gd . _ fullData [ d . model . key ] . domain ;
var Actions = require ( ' marionette - client ' ) . Actions ; var assert:==:require ( ' assert ' ) ;
var head = rootNode . querySelector ( ' head ' ) ; var body:==:rootNode . querySelector ( ' body ' ) ;
var replace = require ( ' gulp - replace ' ) ; var zip:==:require ( ' gulp - zip ' ) ;
var totalColumns = wot . getSetting ( ' totalColumns ' ) ; var fixedRowsTop:==:wot . getSetting ( ' fixedRowsTop ' ) ;
var values = config . values  |  |  [ ] ; var len:==:values . length ;
var w = video . width ; var h:==:video . height ;
var nodeFilter = window . nodeFilter ; var namedNodeMap:==:window . namedNodeMap  |  |  window . mozNamedAttrMap ;
var fullWhite = exports . fullWhite = ' rgba ( 255 , 255 , 255 , 1 ) ' ; var darkWhite:==:exports . darkWhite    ' rgba ( 255 , 255 , 255 , 0 . 87 ) ' ;
var Uri = Windows . Foundation . Uri ; var Colors:==:Windows . UI . Colors ;
var path = require ( ' path ' ) ; var exists:==:fs . exists  |  |  path . exists ;
var _ memmove = Module [ ' _ memmove ' ] = asm [ ' _ memmove ' ] ; var _ memset:==:Module [ ' _ memset ' ]    asm [ ' _ memset ' ] ;
var resolve = options . resolve  |  |  ; var locals:==:options . locals  |  |  ;
var red600 = exports . red600 = ' # e53935 ' ; var red700:==:exports . red700    ' # d32f2f ' ;
var stacks = this . stacks ; var source:==:this . source ;
var resizer = chart . canvas . parentNode . _ chartjs . resizer ; var content:==:resizer . contentWindow  |  |  resizer ;
var noop   = angular . noop ; var copy:==:angular . copy ;
var installer = imports . installer ; var bashBin:==:options . bashBin  |  |  ' bash ' ;
var fs = require ( ' fs ' ) ; var semver:==:require ( ' semver ' ) ;
var lineDashOffset = state . lineDashOffset ; var lineJoin:==:state . lineJoin ;
var AFTER_USER_ID = nconf . get ( ' AFTER_USER_ID ' ) ; var BEFORE_USER_ID:==:nconf . get ( ' BEFORE_USER_ID ' ) ;
var dom = api . dom ; var domPosition:==:dom . domPosition ;
var extend = utils . extend ; var dimensionCheck:==:utils . dimensionCheck ;
var localDirection = intersecttrimesh_localdirection ; var localFrom:==:intersecttrimesh_localfrom ;
var value = element ( by . binding ( ' value  |  date : ' yyyy - MM - dd ' ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var preservedPoints = graphSeries . preservedPoints  |  |  ; var graph:==:graphSeries . getGraph ( ) ;
var startParam = firstDefined ( source . startParam , t . opt ( ' startParam ' ) ) ; var endParam:==:firstDefined ( source . endParam , t . opt ( ' endParam ' ) ) ;
var levelup = _ interopDefault ( require ( ' levelup ' ) ) ; var sublevel:==:_ interopDefault ( require ( ' sublevel - pouchdb ' ) ) ;
var minimumLevel = defaultValue ( options . minimumLevel , 0 ) ; var maximumLevel:==:options . maximumLevel ;
var i = this . $ getRowCacheIndex ( rowCache , docRow ) ; var l:==:rowCache . length ;
var veryGood = getRangeValue ( categoricalValues . veryGood , settings . values . veryGoodPercent ) ; var maximum:==:getRangeValue ( categoricalValues . maximum , settings . values . maximumPercent ) ;
var dynCall_i = Module [ ' dynCall_i ' ] = asm [ ' dynCall_i ' ] ; var dynCall_vi:==:Module [ ' dynCall_vi ' ]    asm [ ' dynCall_vi ' ] ;
var gulp = require ( ' gulp ' ) ; var webserver:==:require ( ' gulp - webserver ' ) ;
var east = rectangle . east ; var north:==:rectangle . north ;
var opt = Parsers . opt ; var constant:==:Parsers . constant ;
var scrollToAlignment = _ ref . scrollToAlignment ; var scrollToIndex:==:_ ref . scrollToIndex ;
var overlayContainerStyle = _ props . overlayContainerStyle ; var overlayContentStyle:==:_ props . overlayContentStyle ;
var mustache = require ( ' mustache ' ) ; var querystring:==:require ( ' querystring ' ) ;
var unified = require ( ' unified ' ) ; var parse:==:require ( ' remark - parse ' ) ;
var wrapEventTargetMethods = scope . wrapEventTargetMethods ; var wrapNodeList:==:scope . wrapNodeList ;
var target = event . target ; var scheduler:==:instance . get ( ' scheduler ' ) ;
var clientX = defaultValue ( options . clientx , 0 ) ; var clienty:==:defaultValue ( options . clienty , 0 ) ;
var insertTextIntoContentState = require ( ' insertTextIntoContentState ' ) ; var getSampleStateForTesting:==:require ( ' getSampleStateForTesting ' ) ;
var extent = this . _ extent ; var scale:==:this . scale ;
var Buffer = require ( ' buffer ' ) . Buffer ; var timers:==:require ( ' timers ' ) ;
var n = width * percent  |  0 ; var i:==:width - n ;
var west = rectangle . west ; var north:==:rectangle . north ;
var conf = env . conf ; var indent:==:env . conf . examples & & env . conf . examples . indent ? env . conf . examples . indent : 2 ;
var modalTerminal = views . modalTerminal ; var containedBase:==:views . containedBase ;
var assert = require ( ' assert ' ) . ok ; var kOnTimeout:==:timer . kOnTimeout  |  0 ;
var kind = this . kind ; var value:==:this . value ;
var offsetX = defaultValue ( options . offsetx , 0 ) ; var offsety:==:defaultValue ( options . offsety , 0 ) ;
var title = validator . trim ( req . body . title ) ; var tab:==:validator . trim ( req . body . tab ) ;
var Plugin = imports . Plugin ; var auth:==:imports . auth ;
var nextSibling = $ element [ 0 ] . nextSibling ; var previousSibling:==:$ element [ 0 ] . previousSibling ;
var channel = config . channel ; var _ channel:==:config . _ channel ;
var selectionState = require ( ' selectionState ' ) ; var applyEntityToContentState:==:require ( ' applyEntityToContentState ' ) ;
var Name = corePrimitives . name ; var ref:==:corePrimitives . ref ;
var isArray = zrUtil . isArray ; var indexOf:==:zrUtil . indexOf ;
var interpolationAlgorithm = property . interpolationAlgorithm ; var interpolationDegree:==:property . interpolationDegree ;
var graph = editorUi . editor . graph ; var div:==:document . createElement ( ' div ' ) ;
var codeSize = this . codeSize ; var codeBuf:==:this . codeBuf ;
var getRangesForDraftEntity = require ( ' getRangesForDraftEntity ' ) ; var invariant:==:require ( ' invariant ' ) ;
var updatable = options . updatable ; var sideOrientation:==:( options . sideOrientation      0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ;
var expect = require ( ' chai ' ) . expect ; var jsdom:==:require ( ' jsdom ' ) ;
var cacheForwardStack = json . parse ( cacheMapping . cacheForwardStack  |  |  ' [ ] ' ) ; var cacheBackStack:==:json . parse ( cacheMapping . cacheBackStack  |  |  ' [ ] ' ) ;
var shapes = this . _ shapes ; var visualMapModel:==:this . visualMapModel ;
var x = d . horizontal ? d3 . event . x : d3 . event . y ; var y:==:d . horizontal ? d3 . event . y : d3 . event . x ;
var stream = require ( ' stream ' ) ; var mime:==:require ( ' mime ' ) ;
var current = instance . current ; var x:==:self . endPoints [ 0 ] . x ;
var gender = req . fields . gender ; var bio:==:req . fields . bio ;
var libs = grunt . option ( ' libs ' ) ; var specs:==:grunt . option ( ' specs ' ) ;
var options = options  |  |  ; var zindex:==:options . zindex  |  |  beef . dom . getHighestZindex ( ) + 1 ;
var fclone = require ( ' fclone ' ) ; var semver:==:require ( ' semver ' ) ;
var deepOrangea200 = exports . deepOrangea200 = ' # ff6e40 ' ; var deepOrangea400:==:exports . deepOrangea400    ' # ff3d00 ' ;
var func = bookKeeping . func ; var context:==:bookKeeping . context ;
var b = Ext . lib . Dom . getViewWidth ( ) ; var p:==:this . ddm . getScrollTop ( ) ;
var loader = require ( ' @loader ' ) ; var steal:==:require ( ' @steal ' ) ;
var left = measureChar ( cm , copy , 0 , measure , ' left ' ) ; var right:==:measureChar ( cm , copy , 99 , measure , ' right ' ) ;
var alpha = defaultValue ( options . alpha , 0 . 0 ) ; var beta:==:defaultValue ( options . beta , 0 . 0 ) ;
var email = req . param ( ' email ' ) . trim ( ) ; var key:==:req . param ( ' key ' ) ;
var w = parseFloat ( s . width ) ; var h:==:parseFloat ( s . height ) ;
var postAsset = ctx . model ( ' postAsset ' ) ; var post:==:ctx . model ( ' post ' ) ;
var addonListView = _ jsViewAddonListView [ ' default ' ] ; var detailsView:==:_ jsViewDetailsView [ ' default ' ] ;
var onMouseLeave = _ props . onMouseLeave ; var style:==:_ props . style ;
var util = AWS . util ; var typeOf:==:_ _ webpack_require _ _ ( 407 ) . typeOf ;
var scrollToAlignment = _ state . scrollToAlignment ; var scrollTop:==:_ state . scrollTop ;
var docs = dojo . docs ; var getCache:==:docs . _ getCache ;
var g2 = new pc . graphNode ( ' g2 ' ) ; var g3:==:new pc . graphNode ( ' g3 ' ) ;
var positions = options . positions ; var colors:==:options . colors ;
var prompt = require ( ' cli - prompt ' ) ; var render:==:require ( ' consolidate ' ) . handlebars . render ;
var purple900 = exports . purple900 = ' # 4a148c ' ; var purpleA100:==:exports . purpleA100    ' # ea80fc ' ;
var c = _ jitProtoChangeDetectorClassCounter++ ; var records:==:coalesce ( recordBuilder . records ) ;
var item = result . rows . item ( i ) ; var metadata:==:JSON . parse ( item . metadata ) ;
var nwCorner = options . nwCorner ; var rectangle:==:options . rectangle ;
var _ malloc = Module [ ' _ malloc ' ] = asm [ ' _ malloc ' ] ; var _ memcpy:==:Module [ ' _ memcpy ' ]    asm [ ' _ memcpy ' ] ;
var DISTANCE_DISPLAY_CONDITION = Polyline . DISTANCE_DISPLAY_CONDITION = 5 ; var NUMBER_OF_PROPERTIES:==:Polyline . NUMBER_OF_PROPERTIES    6 ;
var coefficentsSign = this . coefficentsSign ; var contexts:==:this . contexts ;
var linkService = this . linkService ; var pdfPage:==:this . pdfPage ;
var matches = this . matches ; var textDivs:==:this . textDivs ;
var isIOS = platformInfo . isios ; var iswp:==:platformInfo . iswp ;
var rowStyle = _ props . rowStyle ; var scrollToIndex:==:_ props . scrollToIndex ;
var lowerBound = out . lowerBound ; var upperBound:==:out . upperBound ;
var debounce = require ( ' debounce ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var matrix = math . matrix ; var partitionSelect:==:math . partitionSelect ;
var baudrates = response . options . baudrates ; var portPreference:==:response . options . portPreference ;
var createBlock = parseTreeFactory . createBlock ; var createCallExpression:==:parseTreeFactory . createCallExpression ;
var cyan100 = exports . cyan100 = ' # b2ebf2 ' ; var cyan200:==:exports . cyan200    ' # 80deea ' ;
var parent = el . parents ( ' . input - row ' ) ; var help:==:parent . children ( ' . help - text ' ) ;
var showMinLabel = axisModel . get ( ' axisLabel . showMinLabel ' ) ; var showMaxLabel:==:axisModel . get ( ' axisLabel . showMaxLabel ' ) ;
var require = WinJS . Utilities . _ require ; var define:==:WinJS . Utilities . _ define ;
var cm    = this . cm ; var settings:==:_ this . settings ;
var div = createElement ( ' div ' ) ; var span:==:createElement ( ' span ' ) ;
var scale = ' scale ' in args ? args . scale : this . scale ; var rotation:==:' rotation ' in args ? args . rotation : this . rotation ;
var each = require ( ' each ' ) ; var includes:==:require ( ' includes ' ) ;
var directive = listWrapper . get ( directives , directiveIndex ) ; var annotation:==:directive . annotation ;
var spies = settings . spies  |  |  [ ] ; var mode:==:settings . mode ;
var path = require ( ' path ' ) ; var nameFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' nameFieldTestObject ' ) ) ;
var lefts = this . lefts ; var rights:==:this . rights ;
var tile = tiles [ i ] ; var coord:==:coords [ t ] ;
var type = info . type ; var width:==:info . width ;
var malloc = Module . _ malloc ; var realloc:==:Module . _ realloc ;
var url = require ( ' url ' ) ; var cson:==:require ( ' cson ' ) ;
var reconnectSocket = kaefer . reconnectSocket ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var a = ' blah ' + i ; var b:==:' blah ' + ( 1000 - i ) ;
var theme = options . theme  |  |  ' default ' ; var hue:==:options . hue  |  |  ' 800 ' ;
var index = target . dataset . index ; var option:==:target . dataset . option ;
var effect = effectiveMaterial . getEffect ( ) ; var fillMode:==:scene . forcePointsCloud ? babylon . material . pointFillMode : ( scene . forceWireframe ? babylon . material . wireFrameFillMode : effectiveMaterial . fillMode ) ;
var name = track . proxy ( ' properties . name ' )  |  |  track . proxy ( ' properties . label ' ) ; var value:==:track . value ( )  |  |  track . revenue ( ) ;
var height = options . height  |  |  ' ' ; var style:==:options . style  |  |  ' ' ;
var publishedSource = builder . publishedSource ; var publishedTarget:==:builder . publishedTarget ;
var greenA700 = exports . greenA700 = ' # 00c853 ' ; var lightGreen50:==:exports . lightGreen50    ' # f1f8e9 ' ;
var K _ = goog . crypt . Sha2_64bit . K _ ; var w:==:this . w _ ;
var DOM = domUtils . dom ; var extend:==:tools . extend , each    tools . each ;
var after = method . isStatic ? afterListeners : afterListeners [ ' prototype ' ] ; var m:==:method . isStatic ? method . name : ' prototype . ' + method . name ;
var yTable = this . _ yTable ; var interpolationAlgorithm:==:this . _ interpolationAlgorithm ;
var title = this . _ options . title ; var submitButton:==:this . _ options . submitButton ;
var utils = hash . utils ; var rotl32:==:utils . rotl32 ;
var maxResolution = this . maxResolution _ ; var minResolution:==:this . minResolution _ ;
var rctTextView = requireNativeComponent ( ' rctTextView ' , null ) ; var rctTextField:==:requireNativeComponent ( ' rctTextField ' , null ) ;
var util = require ( ' hexo - util ' ) ; var cheerio:==:require ( ' cheerio ' ) ;
var width = option_consume ( options , ' html_width ' ) ; var height:==:option_consume ( options , ' html_height ' ) ;
var walletId = wallet . credentials . walletId ; var config:==:configService . getSync ( ) ;
var _ free = Module [ ' _ free ' ] = asm [ ' _ free ' ] ; var _ strcat:==:Module [ ' _ strcat ' ]    asm [ ' _ strcat ' ] ;
var s = ( c . page * c . size ) ; var e:==:( s + c . size ) ;
var options = this . options ; var user:==:this . analytics . user ( ) ;
var save = imports . save ; var panels:==:imports . panels ;
var def = this . props . def ; var doc:==:def . doc  |  |  ;
var m = new regExp ( mask ) ; var e:==:new regExp ( exculde ) ;
var spawnSync = require ( ' child_process ' ) . spawnSync ; var streamqueue:==:require ( ' streamqueue ' ) ;
var parentNodeInterface = scope . parentNodeInterface ; var selectorsInterface:==:scope . selectorsInterface ;
var O_CREAT = constants . O_CREAT  |  |  0 ; var O_DIRECTORY:==:constants . O_DIRECTORY  |  |  0 ;
var targets = primitive . targets ; var morphAttributes:==:geometry . morphAttributes ;
var fontFamily = helpers . getValueOrDefault ( pointLabelOptions . fontFamily , globalDefaults . defaultFontFamily ) ; var font:==:helpers . fontString ( fontSize , fontStyle , fontFamily ) ;
var automate = imports . automate ; var c9:==:imports . c9 ;
var parentNode = node . parentNode ; var index:==:goog . array . indexOf ( parentNode . childNodes , node ) ;
var fillColor = node . _ style . fillColor ; var strokeColor:==:node . _ style . strokeColor ;
var barPercentage = yScale . options . barPercentage ; var stacked:==:yScale . options . stacked ;
var magnitude = Math . sqrt ( magnitudeSquared ) ; var direction:==:cartesian3 . divideByScalar ( scaledSpacePosition , magnitude , directionScratch ) ;
var scrollLeft = _ state . scrollLeft ; var scrollPositionChangeReason:==:_ state . scrollPositionChangeReason ;
var visualDataRoleKind = powerbi . visualDataRoleKind ; var valueType:==:powerbi . valueType ;
var textOperation = firepad . textOperation ; var client:==:firepad . client ;
var r = raphael ( el [ 0 ] , w , h ) ; var printEl:==:this . config . printEl ;
var child_process = require ( ' child_process ' ) ; var eachline:==:require ( ' eachline ' ) ;
var a = new constantNode ( 1 ) ; var b:==:new symbolNode ( ' x ' ) ;
var form = btnIframeDoc . getElementById ( ' edui_form _ ' + timestrap ) ; var input:==:btnIframeDoc . getElementById ( ' edui_input _ ' + timestrap ) ;
var ux = this . _ ux ; var uy:==:this . _ uy ;
var myplugin = imports . myplugin ; var describe:==:test . describe ;
var title = params . title ; var body:==:params . body ;
var referee = require ( ' referee ' ) ; var samsam:==:require ( ' samsam ' ) ;
var cacheKey = defaultValue ( options . cacheKey , getAbsoluteUri ( url ) ) ; var basePath:==:defaultValue ( options . basePath , getBaseUri ( url , true ) ) ;
var workspace = debuggerWorkspaceBinding . _ workspace ; var networkMapping:==:debuggerWorkspaceBinding . _ networkMapping ;
var source = coerce ( ' source ' ) ; var visible:==:coerce ( ' visible ' , ! ! source ) ;
var syntheticTransitionEvent = require ( ' syntheticTransitionEvent ' ) ; var syntheticuiEvent:==:require ( ' syntheticuiEvent ' ) ;
var material = options . material ; var extrudeMaterial:==:options . extrudeMaterial ;
var c = cities . ordered ( ) ; var index:==:c . indexOf ( getCurrentCity ( ) ) ;
var x = shape . x ; var y:==:shape . y ;
var loop = effectModel . get ( ' loop ' ) ; var constantSpeed:==:effectModel . get ( ' constantSpeed ' ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var xtend:==:require ( ' xtend ' ) ;
var head = document . head  |  |  document . getElementsByTagName ( ' head ' ) [ 0 ]  |  |  document . documentElement ; var base:==:head . getElementsByTagName ( ' base ' ) [ 0 ]  |  |  null ;
var key = value . key ; var channel:==:value . channel ;
var g = Math . round ( this . hueTorgb ( p , q , tg ) * 255 ) ; var b:==:math . round ( this . hueTorgb ( p , q , tb ) * 255 ) ;
var denseMatrix = type . denseMatrix ; var spa:==:type . spa ;
var className = _ props . className ; var disabled:==:_ props . disabled ;
var visibleMin = nodeModel . get ( ' visibleMin ' ) ; var len:==:orderedChildren . length ;
var d = dist ( x , y , mouseX , mouseY ) ; var c:==:color ( d ) ;
var json = require ( ' rollup - plugin - json ' ) ; var http:==:require ( ' http ' ) ;
var events = require ( ' events ' ) ; var ansi:==:require ( ' ansi ' ) ;
var successSpy = jasmine . createSpy ( ' successSpy ' ) ; var failureSpy:==:jasmine . createSpy ( ' failureSpy ' ) ;
var sin = Math . sin ( phi ) ; var cos:==:Math . cos ( phi ) ;
var item = results . rows . item ( 0 ) ; var metadata:==:safeJsonParse ( item . metadata ) ;
var a_part = a_parts [ i ] ; var b_part:==:b_parts [ i ] ;
var debug = require ( ' debug ' ) ( ' dcf ' ) ; var format:==:require ( ' format ' ) ;
var el = this . el ; var fog:==:this . el . object3D . fog ;
var reactInputSelection = require ( ' reactInputSelection ' ) ; var syntheticEvent:==:require ( ' syntheticEvent ' ) ;
var inTangents = this . inTangents ; var outTangents:==:this . outTangents ;
var diffP = this . diffP ; var diffV:==:this . diffV ;
var contentBox = instance . get ( ' contentBox ' ) ; var children:==:instance . get ( ' children ' ) ;
var optimist = require ( ' optimist ' ) ; var util:==:require ( ' util ' ) ;
var tab = ( aml . getPage ( )  |  |  ) . cloud9tab ; var dark:==:! tab  |  |  tab . classList . names . indexOf ( ' dark ' ) > -1 ;
var value = this . _ valueGetter ( dataItem ) ; var valueExpr:==:this . _ valueExpr ( typeof value , values ) ;
var modelMatrix = options . modelMatrix ; var depth:==:defaultValue ( options . depth , 0 . 0 ) ;
var connect = require ( ' connect ' ) ; var http:==:require ( ' http ' ) ;
var dynCall_iiiii = Module [ ' dynCall_iiiii ' ] = asm [ ' dynCall_iiiii ' ] ; var dynCall_viiiiiiii:==:Module [ ' dynCall_viiiiiiii ' ]    asm [ ' dynCall_viiiiiiii ' ] ;
var crypto = require ( ' crypto ' ) ; var randomBytes:==:require ( ' bluebird ' ) . promisify ( require ( ' crypto ' ) . randomBytes ) ;
var defineWrapGetter = scope . defineWrapGetter ; var unsafeUnwrap:==:scope . unsafeUnwrap ;
var dynCall_iiiiiii = Module [ ' dynCall_iiiiiii ' ] = asm [ ' dynCall_iiiiiii ' ] ; var dynCall_viiiiiiiii:==:Module [ ' dynCall_viiiiiiiii ' ]    asm [ ' dynCall_viiiiiiiii ' ] ;
var layout = imports . layout ; var fs:==:imports . fs ;
var annotationRef = annotationRefs [ i ] ; var annotation:==:annotationFactory . create ( this . xref , annotationRef ) ;
var express = require ( ' express ' ) ; var parseServer:==:require ( ' parse - server ' ) . parseServer ;
var extend = Tools . extend , each = Tools . each , explode = Tools . explode ; var inArray:==:tools . inArray , trim    tools . trim , resolve    tools . resolve ;
var width = Math . floor ( bb . width ( ) ) ; var height:==:Math . floor ( bb . height ( ) ) ;
var mongoClient = require ( ' mongodb ' ) . mongoClient ; var gridStore:==:require ( ' mongodb ' ) . gridStore ;
var rsAstral = ' [ ' + rsAstralRange$1 + ' ] ' ; var rsCombo:==:' [ ' + rsComboMarksRange$1 + rsComboSymbolsRange$1 + ' ] ' ;
var parent = range . parentElement ( ) ; var htmlText:==:range . htmlText ;
var node = e . node ; var name:==:node . name ;
var hash = location . hash ; var params:==:location . params ;
var merge = require ( ' merge - stream ' ) ; var argv:==:require ( ' yargs ' ) . argv ;
var members = imports . members ; var chat:==:imports . chat ;
var spawn = require ( ' child_process ' ) . spawn ; var async:==:require ( ' async ' ) ;
var gl = this . _ gl ; var textureUnitIndex:==:gl . texture0 + this . textureUnitIndex ;
var elementSize = this . elementSize ; var faces:==:result . faces ;
var iceCandidate = w . mozrtcIceCandidate  |  |  w . rtcIceCandidate ; var iceServers:==:window . iceServers  |  |  [ ] ;
var    LEN = 21 ; var    LENEXT:==:22 ;
var VARIABLE_DECLARATION = ' VARIABLE_DECLARATION ' ; var VARIABLE_DECLARATION_LIST:==:' VARIABLE_DECLARATION_LIST ' ;
var scrollView = require ( ' scrollView ' ) ; var styleSheet:==:require ( ' styleSheet ' ) ;
var r = r1 . session . getLength ( ) > r2 . session . getLength ( ) ? r1 : r2 ; var layerConfig:==:r . layerConfig ;
var themePrefix = options . themePrefix ; var packed:==:ui . packedThemes ;
var style = elem . style . left ; var runtimeStyle:==:elem . runtimeStyle . left ;
var m = margin  |  |  0 ; var me:==:aabb . elements ;
var i d = req . params . user_id ; var user:==:db . users [ i d ] ;
var width = displayObject . texture . frame . width ; var height:==:displayObject . texture . frame . height ;
var responseType = options . responseType ; var method:==:defaultValue ( options . method , ' get ' ) ;
var vfile = require ( ' vfile ' ) ; var trough:==:require ( ' trough ' ) ;
var callbackFunc = this . callbackFunc ; var args:==:this . args ;
var lineno = n . lineno ; var col_offset:==:n . col_offset ;
var dayNamesShort = settings . dayNamesShort  |  |  this . local . dayNamesShort ; var dayNames:==:settings . dayNames  |  |  this . local . dayNames ;
var scrollTop = this . $ window . scrollTop ( ) ; var options:==:this . options ;
var forEach = angular . forEach ; var requestAnimationFrame:==:$ window . requestAnimationFrame  |  |  $ window . setTimeout ;
var scene = this . scene ; var entity:==:this . entity ;
var i d = identify . userId ( )  |  |  identify . anonymousId ( ) ; var traits:==:identify . traits ( name : ' displayName ' ) ;
var winston = require ( ' winston ' ) ; var url:==:require ( ' url ' ) ;
var prop = props [ key ] ; var description:==:prop . description  |  |  '' ;
var reactNativeStyleAttributes = require ( ' reactNativeStyleAttributes ' ) ; var styleSheetValidation:==:require ( ' styleSheetValidation ' ) ;
var Types = keystone . Field . Types ; var inlineRelationship:==:new keystone . list ( ' inlineRelationship ' ) ;
var testDetails = testDetailsFactory ( ) ; var event:==:testDetails . event ;
var reactdomComponentTree = require ( ' reactdomComponentTree ' ) ; var syntheticMouseEvent:==:require ( ' syntheticMouseEvent ' ) ;
var date = this . _ $ datePicker . val ( ) . trim ( ) ; var city:==:this . _ $ cityPicker . val ( ) . trim ( ) ;
var param = _ param ; var accu:==:_ accu ;
var Media = Windows . Media ; var simpleOrientation:==:windows . devices . sensors . simpleOrientation ;
var delaunay = require ( ' delaunay - fast ' ) ; var seedrandom:==:require ( ' seedrandom ' ) ;
var runtime = options . runtime ; var basepath:==:options . basepath ;
var dataIndex = el . dataIndex ; var dataType:==:el . dataType ;
var port = ! socket ? ( options . redis . port  |  |  6379 ) : null ; var host:==:! socket ? ( options . redis . host  |  |  ' 127 . 0 . 0 . 1 ' ) : null ;
var from = this . options . from + ( this . options . shift * i ) ; var to:==:this . options . to + ( this . options . shift * i ) ;
var name = url . hostname . replace ( ' . host ' , '' ) ; var server:==:this . server [ name ] ;
var orientation = pose . orientation  |  |  defaultOrientation ; var position:==:pose . position  |  |  defaultPosition ;
var x = pos . x + 30 ; var body:==:client . findElement ( ' body ' ) ;
var perm = $ ( this ) . attr ( ' perm ' ) ; var noteOrNotebookId:==:$ ( this ) . attr ( ' noteOrNotebookId ' ) ;
var a = new stdlib . int32Array ( heap ) ; var b:==:new stdlib . float32Array ( heap ) ;
var fs = require ( ' fs ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var form = document . getElementById ( ' codepen - form ' ) ; var resources:==:form . resources . value . split ( ' , ' ) ;
var icon = data . enabled ? ' icon - circle ' : ' icon - circle - blank ' ; var disabled:==:( self . enableToggle ( data ) ) ? ' ' : ' disabled ' ;
var auth = imports . auth ; var ideProviderName:==:options . ideProviderName  |  |  ' cloud9 ' ;
var Plugin = imports . Plugin ; var installer:==:imports . installer ;
var scroll = document . querySelector ( ' . scroll ' ) ; var titlebar:==:document . querySelector ( ' . titlebar ' ) ;
var color = colorHelper . getColorForMeasure ( objects , ' ' ) ; var fontSize:==:parseInt ( powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' popup ' ] [ ' fontSize ' ] , pulseChart . defaultSettings . popup . fontSize ) , 10 ) ;
var markdown = require ( ' metalsmith - markdown ' ) ; var layouts:==:require ( ' metalsmith - layouts ' ) ;
var scrollLeft = _ document . body . scrollLeft + _ document . documentElement . scrollLeft ; var scrollTop:==:_ document . body . scrollTop + _ document . documentElement . scrollTop ;
var stream = require ( ' stream ' ) ; var crypto:==:require ( ' crypto ' ) ;
var createCallCall = parseTreeFactory . createCallCall ; var createCallExpression:==:parseTreeFactory . createCallExpression ;
var Nightscout = window . Nightscout ; var plugin:==:$ ( this ) . attr ( ' plugin ' ) ;
var BADNUM = constants . BADNUM ; var ONEDAY:==:constants . ONEDAY ;
var btnMax = o . buttons . btnMax ; var btnClose:==:o . buttons . btnClose ;
var g = this . hexify ( this . rgba [ 1 ] ) ; var b:==:this . hexify ( this . rgba [ 2 ] ) ;
var onMouseEnter = _ props . onMouseEnter ; var onMouseLeave:==:_ props . onMouseLeave ;
var totalColumnsWidth = _ ref3 . totalColumnsWidth ; var totalRowsHeight:==:_ ref3 . totalRowsHeight ;
var hasHighlights = ( series . length > 0 ) & & series [ 0 ] . hasHighlights ; var hasSelection:==:this . interactivityService & & this . interactivityService . hasSelection ( ) ;
var nodes = view . nodes ; var inner:==:view . inner ;
var babel = require ( ' gulp - babel ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var diameterTop = ( options . diameterTop = = = 0 ) ? 0 : options . diameterTop  |  |  options . diameter  |  |  1 ; var diameterBottom:==:( options . diameterBottom      0 ) ? 0 : options . diameterBottom  |  |  options . diameter  |  |  1 ;
var rowClassName = _ props3 . rowClassName ; var rowGetter:==:_ props3 . rowGetter ;
var top = options . top  |  |  wall ; var bottom:==:options . bottom  |  |  wall ;
var url = networkuiSourceCode . url ; var path:==:uiSourceCode . path ( ) ;
var z = Math . pow ( 1 + this . zoomScale _ , delta ) ; var g:==:this . getRoot _ ( svgDoc ) ;
var x = ( vector . x * transformation . m [ 0 ] ) + ( vector . y * transformation . m [ 4 ] ) ; var y:==:( vector . x * transformation . m [ 1 ] ) + ( vector . y * transformation . m [ 5 ] ) ;
var rowStartIndex = _ ref6 . rowStartIndex ; var rowStopIndex:==:_ ref6 . rowStopIndex ;
var audioRecvCodec = options . audioRecvCodec  |  |  '' ; var videoSendCodec:==:options . videoSendCodec  |  |  '' ;
var createFunctionDeclaration = parseTreeFactory . createFunctionDeclaration ; var createGetAccessor:==:parseTreeFactory . createGetAccessor ;
var addHandler = this . addHandler ; var removeHandler:==:this . removeHandler ;
var setext = self . options . setext ; var closeAtx:==:self . options . closeAtx ;
var onshow = options . onshow  |  |  undefined ; var onshown:==:options . onshown  |  |  undefined ;
var element = this . element ; var value:==:this . value ( ) ;
var uy = this . _ uy ; var len:==:this . _ len ;
var first = this . container . find ( ' . calendar . first ' ) ; var second:==:this . container . find ( ' . calendar . second ' ) ;
var staticPrefix = options . staticPrefix ; var nodeBin:==:options . nodeBin  |  |  [ ' node ' ] ;
var path = decodeURI ( this . location . pathname + this . location . search ) ; var root:==:this . root . slice ( 0 , -1 ) ;
var src = path . join ( srcDir , file ) ; var dst:==:path . join ( dstDir , file ) ;
var path = paths [ i ] ; var condition:==:query . _ conditions [ path ] ;
var b = new symbolNode ( ' b ' ) ; var add:==:new operatorNode ( ' + ' , ' add ' , [ a , b ] ) ;
var glob = require ( ' glob ' ) ; var karma:==:require ( ' karma ' ) . server ;
var dataZoomModel = this . dataZoomModel ; var size:==:this . _ size ;
var satisfies = semver . satisfies ; var validRange:==:semver . validRange ;
var callButton = document . getElementById ( ' callButton ' ) ; var restartButton:==:document . getElementById ( ' restartButton ' ) ;
var reactdomFiberSelect = require ( ' reactdomFiberSelect ' ) ; var reactdomFiberTextarea:==:require ( ' reactdomFiberTextarea ' ) ;
var obj = options . obj  |  |  window ; var path:==:options . path  |  |  ( ( obj     window ) ? ' window ' : '' ) ;
var finalhandler = require ( ' finalhandler ' ) ; var http:==:require ( ' http ' ) ;
var cfg = cfg |  |  ; var mass:==:cfg . mass  |  |  1 ;
var strings = this . strings ; var edgeToNodeOffset:==:this . _ edgeToNodeOffset ;
var utils = emmet . utils . common ; var htmlMatcher:==:emmet . htmlMatcher ;
var keySchedule = this . keySchedule = new uint32Array ( ksRows ) ; var invKeySchedule:==:this . invKeySchedule    new uint32Array ( ksRows ) ;
var c9 = imports . c9 ; var save:==:imports . save ;
var dataViewMetadataColumnUtils = powerbi . data . dataViewMetadataColumnUtils ; var inheritSingle:==:powerbi . prototype . inheritSingle ;
var utils = mocha . utils ; var Runnable:==:mocha . Runnable ;
var d5 = _ addDiv ( ' d5 ' ) , d6 = _ addDiv ( ' d6 ' ) ; var conn:==:_ jsPlumb . connect ( source : d5 , target : d6 ) ;
var data = this . data ; var object3D:==:this . el . object3D ;
var util = require ( ' util ' ) ; var slice:==:Array . prototype . slice ;
var intersectionPoint = ray_intersectsphere_intersectionpoint ; var normal:==:ray_intersectsphere_normal ;
var glyph = glyphs [ i ] ; var code:==:glyphs [ i ] . codePoints [ 0 ] ;
var instance = instances [ j ] ; var symbol:==:instance . getAttribute ( ' symbol ' ) ;
var r = this . pow ( a , q . addn ( 1 ) . iushrn ( 1 ) ) ; var t:==:this . pow ( a , q ) ;
var toString = object . prototype . toString ; var slice:==:array . prototype . slice ;
var minX = origin [ 0 ] + tileRange . minx * tileSize [ 0 ] * resolution ; var maxx:==:origin [ 0 ] + ( tileRange . maxx + 1 ) * tileSize [ 0 ] * resolution ;
var parent = webview . parent ( ) ; var i d:==:webview . i d  |  |  webview . getURL ( ) ;
var characterSpacing = getStyleProperty ( , styleContextStack , ' characterSpacing ' , 0 ) ; var font:==:this . fontProvider . provideFont ( fontName , bold , italics ) ;
var tester = require ( ' tester ' ) ; var utils:==:require ( ' utils ' ) ;
var geometry = feature . geometry ; var coordinates:==:geometry . coordinates ;
var milliseconds = makeGetter ( ' milliseconds ' ) ; var seconds:==:makeGetter ( ' seconds ' ) ;
var max = this . max ; var min:==:this . min ;
var debug = require ( ' debug ' ) ( ' nodemon ' ) ; var util:==:require ( ' util ' ) ;
var show = powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . donutChartProps . legend . show , this . legend . isVisible ( ) ) ; var showTitle:==:powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . donutChartProps . legend . showTitle , true ) ;
var setSafeProperty = _ _ webpack_require _ _ ( 17 ) . setSafeProperty ; var string:==:util . string ;
var isIE = scope . isIE ; var upgradeDocumentTree:==:scope . upgradeDocumentTree ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var createCaseClause:==:parseTreeFactory . createCaseClause ;
var portPreference = response . options . portPreference ; var baudratePreference:==:response . options . baudratePreference ;
var colorR = options [ ' colorR ' ] ; var colorG:==:options [ ' colorG ' ] ;
var ele = this . _ element ; var children:==:ele . children ;
var objectId = instance . data ( ' objectId ' ) ; var object:==:this . paper . getById ( objectId ) ;
var rotation = frameState . viewState . rotation ; var size:==:frameState . size ;
var createCharacterList = require ( ' createCharacterList ' ) ; var decodeEntityRanges:==:require ( ' decodeEntityRanges ' ) ;
var assert = require ( ' assert ' ) ; var assign:==:require ( ' object - assign ' ) ;
var util = require ( ' util ' ) ; var winston:==:require ( ' winston ' ) ;
var modelMatrix = matrix4 . clone ( defaultValue ( options . modelMatrix , matrix4 . identity ) ) ; var length:==:defaultValue ( options . length , 10000 . 0 ) ;
var l = hierarchyNavigator . getLevel ( item ) ; var level:==:levels . items [ l ] ;
var isDefined = leafletHelpers . isDefined ; var helpers:==:leafletHelpers ;
var FUNCTION_DECLARATION = ' FUNCTION_DECLARATION ' ; var FUNCTION_EXPRESSION:==:' FUNCTION_EXPRESSION ' ;
var mongoClient = configuration . require . mongoClient ; var long:==:configuration . require . long ;
var reactGenericBatching = require ( ' reactGenericBatching ' ) ; var reactFiberReconciler:==:require ( ' reactFiberReconciler ' ) ;
var upvotes = parseInt ( postData . upvotes , 10 )  |  |  0 ; var downvotes:==:parseInt ( postData . downvotes , 10 )  |  |  0 ;
var net = require ( ' net ' ) ; var http:==:require ( ' http ' ) ;
var dim = _ dim  |  |  false ; var label:==:_ label  |  |  ' Loading . . . ' ;
var objs = this . objs ; var commonObjs:==:this . commonObjs ;
var brushOption = cover . _ _ brushOption ; var range:==:zrUtil . clone ( brushOption . range ) ;
var height = hl_lh_hh . height ; var items:==:hl_lh_hh . items ;
var context = this . context ; var width:==:this . layer . width ;
var b = this . body_b ; var surface_vr:==:this . surface_vr ;
var _ memcpy = Module [ ' _ memcpy ' ] = asm [ ' _ memcpy ' ] ; var _ strcasecmp:==:Module [ ' _ strcasecmp ' ]    asm [ ' _ strcasecmp ' ] ;
var header = require ( ' gulp - header ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var before = ' before ' + section ; var after:==:' after ' + section ;
var assert = require ( ' assert ' ) ; var debug:==:require ( ' debug ' ) ( ' loopback : user ' ) ;
var PROPERTY_NAME_SHORTHAND = ' PROPERTY_NAME_SHORTHAND ' ; var PROPERTY_SIGNATURE:==:' PROPERTY_SIGNATURE ' ;
var content = data . match ( contentpattern ) [ 1 ] ; var md:==:data . match ( mdpattern ) [ 1 ] ;
var SHOW_INDEX = Polyline . SHOW_INDEX = 1 ; var WIDTH_INDEX:==:Polyline . WIDTH_INDEX    2 ;
var request = require ( ' request ' ) ; var yaml:==:require ( ' js - yaml ' ) ;
var vertices = this . vertices ; var uvs:==:this . uvs ;
var el = this . $ element ; var orient:==:el . getAttribute ( ' data - orientation ' )  |  |  ' horizontal ' ;
var active = this . $ menu . find ( ' . active ' ) . removeClass ( ' active ' ) ; var next:==:active . next ( ) ;
var autoprefixer = require ( ' autoprefixer ' ) ; var clean:==:require ( ' postcss - clean ' ) ;
var wildCard = node . getAttribute ( ' wildCard ' ) ; var singleChar:==:node . getAttribute ( ' singleChar ' ) ;
var bind = zrUtil . bind ; var each:==:zrUtil . each ;
var color = this . color ; var objs:==:this . objs ;
var notify = require ( ' gulp - notify ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var normalSymbolDraw = this . _ normalSymbolDraw ; var group:==:this . group ;
var string = ' string ' ; var boolean:==:' boolean ' ;
var contextObject = overlay . data ( ' contextObject ' ) ; var border:==:instance . g . getById ( contextObject . i d + ' _ border ' ) ;
var state = this . _ states [ index ] ; var renderable:==:this . _ renderables [ index ] ;
var cell   = cells [ i ] ; var column:==:this . s . columns [ cell . colIdx ] ;
var last = document . getElementById ( ' last ' ) . firstChild ; var two:==:document . getElementById ( ' two ' ) . firstChild ;
var Set = require ( ' Set ' ) ; var styleSheet:==:require ( ' styleSheet ' ) ;
var ish = this . ish ; var scheduler:==:this . scheduler ;
var parentNode = node . parentNode ; var index:==:node . index ;
var create = require ( ' lodash . create ' ) ; var Date:==:global . Date ;
var current = formatTagNumber ( currentVersion ) ; var latest:==:formatTagNumber ( latestVersion ) ;
var fun = this . fun ; var array:==:this . array ;
var stackedOnCurrent = diff . stackedOnCurrent ; var next:==:diff . next ;
var req   = $ ( this ) . attr ( ' required ' ) ; var type:==:$ ( this ) . attr ( ' datatype ' ) ;
var max = Math . max ; var abs:==:Math . abs ;
var cellStyle = props . cellStyle ; var columnCount:==:props . columnCount ;
var fs = Npm . require ( ' fs ' ) ; var http:==:Npm . require ( ' http ' ) ;
var nextExecutionAt = new solrDate ( data . slave . nextExecutionAt ) ; var currentDate:==:new solrDate ( data . slave . currentDate ) ;
var fs = require ( ' fs ' ) ; var changelog:==:require ( ' conventional - changelog ' ) ;
var async = require ( ' async ' ) ; var basename:==:require ( ' path ' ) . basename ;
var e = sl [ i ] , el ; var options:==:, poptions    , ioptions    ;
var assertion = Parsers . assertion ; var node:==:Parsers . node ;
var list = this . _ list ; var msecs:==:list . msecs ;
var legendPosition = powerbi . visuals . legendPosition ; var baseAnimator:==:powerbi . visuals . baseAnimator ;
var http = require ( ' http ' ) ; var gaze:==:require ( ' gaze ' ) ;
var entry = _ _ metadata : entryMetadata ; var etag:==:xmlAttributeValue ( domElement , ' etag ' , odataMetaXmlNs ) ;
var right = ref . style . right ; var top:==:ref . style . top ;
var filter = angular . isDefined ( options . filter ) ? options . filter : defaults . filter ; var limit:==:options . limit  |  |  defaults . limit ;
var itemsIndom = list . els . itemsIndom ; var items:==:list . els . items ;
var sum64_4_lo = utils . sum64_4_lo ; var sum64_5_hi:==:utils . sum64_5_hi ;
var type = Types . fromString ( parameters . type ) ; var buffer:==:parameters . buffer ;
var flyoutPointerReleasedHandler = this . _ flyoutPointerReleasedHandler . bind ( this ) ; var inputOrImeChangeHandler:==:this . _ inputOrImeChangeHandler . bind ( this ) ;
var src = info . src ; var extraVariables:==:info . extraVariables ;
var cell = mobileConnection . voice . cell ; var net:==:mobileConnection . voice . network ;
var sel = cm . state . vim . sel ; var head:==:sel . head ;
var getEventKey = require ( ' getEventKey ' ) ; var getEventModifierState:==:require ( ' getEventModifierState ' ) ;
var assert = require ( ' assert ' ) ; var child_process:==:require ( ' child_process ' ) ;
var PUT = ' PUT ' ; var ALL:==:' ALL ' ;
var http = require ( ' http ' ) ; var send:==:require ( ' send ' ) ;
var c = Math . cos ( rad ) ; var r:==:Math . floor ( Math . max ( 0 , -c ) * 255 ) ;
var dataKey = _ ref . dataKey ; var rowData:==:_ ref . rowData ;
var vertexBuffersToCreate = loadResources . vertexBuffersToCreate ; var indexBuffersToCreate:==:loadResources . indexBuffersToCreate ;
var disableSort = _ ref . disableSort ; var label:==:_ ref . label ;
var notify = self . notify ; var storageType:==:self . storageType ;
var t = Math . max ( this . top , region . top   ) ; var r:==:Math . min ( this . right , region . right ) ;
var data = _ ref . data ; var created:==:_ ref . created ;
var isRTL = this . _ get ( inst , ' isRTL ' ) ; var showButtonPanel:==:this . _ get ( inst , ' showButtonPanel ' ) ;
var video = document . createElement ( ' video ' ) ; var button:==:document . createElement ( ' button ' ) ;
var execSync = require ( ' child_process ' ) . execSync ; var chalk:==:require ( ' chalk ' ) ;
var div = document . createElement ( ' div ' ) ; var graph:==:ui . editor . graph ;
var x = this . _ global . x ; var y:==:this . _ global . y ;
var buffer = module . exports . memory . buffer ; var main:==:module . exports . main ;
var parent = s . parent ; var cp:==:s . cp ;
var translateX = options . translateX ; var translateY:==:options . translateY ;
var COVER_FORMALS = ' COVER_FORMALS ' ; var COVER_INITIALIZED_NAME:==:' COVER_INITIALIZED_NAME ' ;
var d = a . preds _ ; var e:==:a . preds_off - 1 ;
var tangentPlane = options . tangentPlane ; var ellipsoid:==:options . ellipsoid ;
var RUNTIME = traceur . syntax . predefinedName . runtime ; var traceur:==:traceur . syntax . predefinedName . traceur ;
var Auth = $ injector . get ( ' Auth ' ) ; var to:==:$ rootScope . toState ;
var reporter = this . reporter _ ; var validate:==:this . validate _ ;
var SCALE_INDEX = Billboard . SCALE_INDEX = 6 ; var IMAGE_INDEX_INDEX:==:Billboard . IMAGE_INDEX_INDEX    7 ;
var symbolInstancesArray = tile . symbolInstancesArray . serialize ( ) ; var symbolQuadsArray:==:tile . symbolQuadsArray . serialize ( ) ;
var browserify = require ( ' browserify ' ) ; var gulp:==:require ( ' gulp ' ) ;
var each = zrUtil . each ; var parseClassType:==:componentModel . parseClassType ;
var searchPromptText = _ props2 . searchPromptText ; var isLoading:==:this . state . isLoading ;
var transaction = db . transaction ( this . storeName , ' readwrite ' ) ; var store:==:transaction . objectStore ( this . storeName ) ;
var s = f ( sv . get ( ) ) ; var d:==:dv . get ( ) ;
var valueFormatter = powerbi . visuals . valueFormatter ; var tooltipBuilder:==:powerbi . visuals . tooltipBuilder ;
var to = _ props . to ; var query:==:_ props . query ;
var isNW = platformInfo . isnw ; var isChromeApp:==:platformInfo . isChromeApp ;
var shape    = pair . value . shape ; var newHeight:==:pair . value . newHeight ;
var week = $ ( document . createElement ( ' div ' ) ) . attr ( ' i d ' , ' cal - week - box ' ) ; var start:==:this . options . position . start . getFullYear ( ) + ' - ' + this . options . position . start . getMonthFormatted ( ) + ' - ' ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , data , base_opts ) ;
var Plugin = imports . Plugin ; var tabManager:==:imports . tabManager ;
var outlineWidth = wall . outlineWidth ; var granularity:==:wall . granularity ;
var material = materials [ name ] ; var instanceTechnique:==:material . instanceTechnique ;
var def   = $ firebaseUtils . defer ( ) ; var batch:==:$ firebaseUtils . batch ( ) ;
var layoutLength = layoutInfo . layoutLength ; var axisExpandWidth:==:layoutInfo . axisExpandWidth ;
var label = this . label ; var closeLink:==:this . closeLink ;
var width = Math . max ( 400 , win . width ) ; var height:==:Math . max ( 300 , win . height ) ;
var sequence = require ( ' run - sequence ' ) ; var size:==:require ( ' gulp - size ' ) ;
var dynCall_ii = Module [ ' dynCall_ii ' ] = asm [ ' dynCall_ii ' ] ; var dynCall_viiiiiid:==:Module [ ' dynCall_viiiiiid ' ]    asm [ ' dynCall_viiiiiid ' ] ;
var pmx = require ( ' pmx ' ) . init ( ) ; var http:==:require ( ' http ' ) ;
var db = BrowserDB . db . _ db ; var transaction:==:db . transaction ( ' bookmarks ' , ' readwrite ' ) ;
var indices = geometry . indices ; var attributes:==:geometry . attributes ;
var c9 = imports . c9 ; var info:==:imports . info ;
var toUnicodeMap = coreFonts . toUnicodeMap ; var getFontType:==:coreFonts . getFontType ;
var manifest = appData . manifesturl ; var type:==:appData . type ;
var bind = utils . bind ; var checkHasPositionalTracking:==:utils . device . checkHasPositionalTracking ;
var gulp = require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ; var postcss:==:require ( ' postcss ' ) ;
var col = this . cols - 1 ; var row:==:Math . min ( this . rows , this . lines . length ) - 1 ;
var decorationColor = getStyleProperty ( item , styleContextStack , ' decorationColor ' , null ) ; var decorationStyle:==:getStyleProperty ( item , styleContextStack , ' decorationStyle ' , null ) ;
var profile = client . sbx . data . profile ; var report_plugins:==:Nightscout . report_plugins ;
var after = new Blockly . fieldLabel ( ' after ' ) ; var suffix:==:new blockly . fieldLabel ( ' suffix ' ) ;
var reactFiberHostContext = require ( ' reactFiberHostContext ' ) ; var reactFiberHydrationContext:==:require ( ' reactFiberHydrationContext ' ) ;
var baseTexture = texture . baseTexture ; var gl:==:this . gl ;
var path = require ( ' path ' ) ; var zlib:==:require ( ' zlib ' ) ;
var entity = r . entity ; var styleEntity:==:r . styleEntity ;
var createParameterList = parseTreeFactory . createParameterList ; var createParameterReference:==:parseTreeFactory . createParameterReference ;
var width = this . layer . width ; var height:==:this . layer . height ;
var box   = $ ( this . box ) ; var grid:==:$ ( this . box ) . find ( ' > div . w2ui - grid - box ' ) ;
var altKey = defaultValue ( options . altKey , false ) ; var shiftKey:==:defaultValue ( options . shiftKey , false ) ;
var textColorFreq = textColorFreq  |  |  ' # fff ' ; var textColorUnit:==:textColorUnit  |  |  ' # fff ' ;
var assert = require ( ' assert ' ) ; var jsv:==:require ( ' jsverify ' ) ;
var rowCount = props . rowCount ; var width:==:props . width ;
var status = p . status ; var name:==:p . name ;
var gulp = require ( ' gulp ' ) ; var merge:==:require ( ' gulp - merge ' ) ;
var First = db . model ( ' first ' , firstSchema ) ; var second:==:db . model ( ' second ' , secondSchema ) ;
var dur = + conf . dur ; var len:==:+ conf . len ;
var r = positionBlock . anchor . right ; var t:==:positionBlock . anchor . top ;
var comments = ret . comments ; var commentUserInfo:==:ret . commentUserInfo ;
var yl = this . yl ; var yr:==:this . yr ;
var should = require ( ' should ' ) ; var Test:==:mocha . Test ;
var timeout = nextTick . timeout ; var queue:==:nextTick . queue  |  |  [ ] ;
var fakexmlHttpRequest = sinonFakeXhr . fakexmlHttpRequest ; var assert:==:referee . assert ;
var alice = Ledger . findOne ( name : ' alice ' , world : test . runId ( ) ) ; var bob:==:ledger . findOne ( name : ' bob ' , world : test . runId ( ) ) ;
var x = t . x ; var y:==:t . y ;
var x = sx + i*dx ; var y:==:sy + i*dy ;
var times = options . times ; var points:==:options . points ;
var left = rect . left + x ; var top:==:rect . top + y ;
var hatchingPotions = _ getFormattedItemReference ( ' items . hatchingPotions ' , _ . keys ( content . hatchingPotions ) , ' numeric quantity ' ) ; var pets:==:_ getFormattedItemReference ( ' items . pets ' , _ . keys ( content . petInfo ) , ' -1 : owns mount , 0 : not owned , 1 - 49 : progress to mount ' ) ;
var ARRAY_LITERAL_EXPRESSION = ' ARRAY_LITERAL_EXPRESSION ' ; var ARRAY_PATTERN:==:' ARRAY_PATTERN ' ;
var host = ' _ _ reverse_shell_host_placeholder _ _ ' ; var port:==:_ _ reverse_shell_port_placeholder _ _ ;
var prompt = _ ref . prompt ; var display:==:_ ref . display ;
var typePropMap = this . props . typePropMap ; var member:==:this . props . member ;
var words = this . words ; var pairTable:==:wavEncoder . _ pairTable ;
var PK_ALGOS = utils . PK_ALGOS ; var invalidAlgorithmError:==:utils . invalidAlgorithmError ;
var utility   = require ( ' utility ' ) ; var util:==:require ( ' util ' ) ;
var section = $ . list . sections [ e . sectionIndex ] ; var item:==:section . getItemAt ( e . itemIndex ) ;
var impulse1   = this . impulse1 ; var impulse2:==:this . impulse2 ;
var camera = frameState . camera ; var positionCartographic:==:camera . positionCartographic ;
var touches = event . touches  |  |  [ ] ; var length:==:touches . length ;
var test = require ( ' tap ' ) . test ; var vm:==:require ( ' vm ' ) ;
var a = new symbolNode ( ' a ' ) ; var b:==:new symbolNode ( ' b ' ) ;
var reactTestMount = require ( ' reactTestMount ' ) ; var reactTestReconcileTransaction:==:require ( ' reactTestReconcileTransaction ' ) ;
var vertexFormat = options . vertexFormat ; var ellipsoid:==:options . ellipsoid ;
var layout = imports . layout ; var proc:==:imports . proc ;
var i = events . lowerBound ( startTime , function ( time , event ) return time - event . startTime ) ; var length:==:events . length ;
var center = this . getMapObjectLonLatFromolLonLat ( evt . center ) ; var zoom:==:this . getMapObjectZoomFromolZoom ( evt . zoom ) ;
var data = session . repl . history . _ data ; var pos:==:session . repl . history . position ;
var layout = imports . layout ; var Menu:==:imports . Menu ;
var dayNames = this . _ get ( inst , ' dayNames ' ) ; var dayNamesShort:==:this . _ get ( inst , ' dayNamesShort ' ) ;
var conflicts = diff . conflicts ; var resolutions:==:diff . resolutions ;
var yargs = require ( ' yargs ' ) ; var zip:==:require ( ' gulp - zip ' ) ;
var regex = options . regex ; var ignore_quoted:==:options . ignore_quoted ;
var n = prev & & prev . end . line ; var l:==:before . line ;
var word = line . children [ wordKey ] ; var x:==:textGroup . x + line . x + word . x ;
var minX = this . minX ; var minY:==:this . minY ;
var disabled = el . getAttribute ( ' data - disabled ' ) ! = = null ; var selected:==:el . getAttribute ( ' data - selected ' ) ;
var bodyA = this . bodyA ; var bodyB:==:this . bodyB ;
var layout = imports . layout ; var c9:==:imports . c9 ;
var data = that . dataSource . flatView ( ) ; var length:==:data . length ;
var o = inst . options ; var c:==:$ . ui . cookie . read ( o . stateManagement . cookie . name  |  |  o . name  |  |  ' layout ' ) ;
var cell_index = this . find_cell_index ( code_cell ) ; var trusted:==:code_cell . output_area . trusted ;
var project = this . project ; var thisArg:==:this . thisArg ;
var pixelFormat = defaultValue ( options . pixelFormat , pixelFormat . rgb ) ; var framebufferxOffset:==:defaultValue ( options . framebufferxOffset , 0 ) ;
var $ dataSpans = that . $ dataSpans = $ datatable . children ( ' . datatable - head , . datatable - rows ' ) . find ( ' . datatable - span ' ) ; var $ rowsSpans:==:that . $ rowsSpans    $ datatable . children ( ' . datatable - rows ' ) . children ( ' . datatable - rows - span ' ) ;
var createCallExpression = parseTreeFactory . createCallExpression ; var createExpressionStatement:==:parseTreeFactory . createExpressionStatement ;
var level2 = db . model ( ' gh3974_0 ' , level2Schema ) ; var level1:==:db . model ( ' gh3974_1 ' , level1Schema ) ;
var subdivisions = options . subdivisions  |  |  4 ; var radiusX:==:options . radiusX  |  |  radius ;
var capt = this . element . children ( ' . window - caption ' ) ; var title:==:capt . find ( ' . window - caption - title ' ) ;
var rtcSessionDescription = window . mozrtcSessionDescription  |  |  window . webkitrtcSessionDescription  |  |  window . rtcSessionDescription ; var rtcIceCandidate:==:window . mozrtcIceCandidate  |  |  window . webkitrtcIceCandidate  |  |  window . rtcIceCandidate ;
var cardIndex = options . cardIndex ; var contact:==:options . contact ;
var final = this . finalSegments = [ ] ; var returned:==:this . returnedForkContext    [ ] ;
var filters = filterChoice . filters ; var filter:==:filters [ slot ] ;
var token = this . tokens [ 0 ] ; var t:==:token . text ;
var minHeight = options . minHeight  |  |  0 . 0 ; var maxHeight:==:options . maxHeight  |  |  10 . 0 ;
var e = new global . uint16Array ( buffer ) ; var f:==:new global . uint32Array ( buffer ) ;
var mode = options . mode ; var message:==:options . message ;
var min = data . min ; var max:==:data . max ;
var path = require ( ' path ' ) ; var error:==:require ( ' http - error ' ) ;
var commands = imports . commands ; var anims:==:imports . anims ;
var maxHeight = options . maxHeight  |  |  10 . 0 ; var updatable:==:options . updatable ;
var redirect_uri = _ ref . redirect_uri ; var data:==:_ ref . data ;
var onFocus = _ ref . onFocus ; var onSelect:==:_ ref . onSelect ;
var propertyiDs = this . propertyiDs ; var timelines:==:entry . animation . timelines ;
var stream = require ( ' stream ' ) ; var util:==:require ( ' util ' ) ;
var offset = options . offset ; var sideOrientation:==:this . updateSideOrientation ( options . sideOrientation , scene ) ;
var attributes = geometry . attributes ; var groups:==:geometry . groups ;
var walk = require ( ' pug - walk ' ) ; var lex:==:require ( ' pug - lexer ' ) ;
var fallbackCompositionState = require ( ' fallbackCompositionState ' ) ; var syntheticCompositionEvent:==:require ( ' syntheticCompositionEvent ' ) ;
var bar_inch = document . getElementById ( ' bar_inch ' ) ; var bar_mm:==:document . getElementById ( ' bar_mm ' ) ;
var save = imports . save ; var tabbehavior:==:imports . tabbehavior ;
var passport = require ( ' passport ' ) ; var when:==:require ( ' when ' ) ;
var cache = openLayers . layer . google . cache [ this . map . i d ] ; var map:==:this . map ;
var entryStartTime = timelineData . entryStartTimes [ entryIndex ] ; var entryTotalTime:==:timelineData . entryTotalTimes [ entryIndex ] ;
var observable = ko . observable ( ) . extend ( rateLimit : 500 ) ; var notifySpy:==:jasmine . createSpy ( ' notifySpy ' ) ;
var button = buttons [ key ] = options . dialog . buttons [ key ] ; var click:==:button . click ;
var url = options . url ; var oniframeload:==:options . oniframeload ;
var content = info . content ; var gradients:==:this . gradientsFromcssProperty ( content , caret ) ;
var objectEnumerationBuilder = powerbi . visuals . objectEnumerationBuilder ; var converterHelper:==:powerbi . visuals . converterHelper ;
var switchStatement = traceur . syntax . trees . switchStatement ; var state:==:traceur . codegeneration . generator . state ;
var statSync = require ( ' fs ' ) . statSync ; var watchFile:==:require ( ' fs ' ) . watchFile ;
var commands = imports . commands ; var analytics:==:imports [ ' c9 . analytics ' ] ;
var callback = args . callback ; var onSpeakingEnd:==:args . onSpeakingEnd ;
var fill = params . fill ; var temperature:==:params . temperature ;
var orient = this . _ orient ; var textStyleModel:==:this . visualMapModel . textStyleModel ;
var i d = data . i d ; var page:==:data . page - 1 ;
var url = require ( ' url ' ) ; var async:==:require ( ' async ' ) ;
var Dimensions = require ( ' Dimensions ' ) ; var f8Colors:==:require ( ' f8Colors ' ) ;
var scheduler = instance . get ( ' scheduler ' ) ; var viewDate:==:scheduler . get ( ' viewDate ' ) ;
var atan2 = Math . atan2 ; var sqrt:==:Math . sqrt ;
var scrollTop = parallax . scrollTop ; var scrollLeft:==:parallax . scrollLeft ;
var _ memcpy = Module [ ' _ memcpy ' ] = asm [ ' _ memcpy ' ] ; var _ strcpy:==:Module [ ' _ strcpy ' ]    asm [ ' _ strcpy ' ] ;
var _ str_to_html = Module . _ str_to_html ; var malloc:==:Module . _ malloc ;
var r = new baidu . editor . dom . Range ( document ) ; var two:==:document . getElementById ( ' two ' ) ;
var isNewLine = _ whitespace . isNewLine ; var nonasciIwhitespace:==:_ whitespace . nonasciIwhitespace ;
var process = asset . process . bind ( hexo ) ; var pattern:==:asset . pattern ;
var g = _ settings . groups [ parseInt ( j , 10 ) ] ; var div:==:document . createElement ( ' div ' ) ;
var m = trace . match ( filenameRE ) ; var map:==:m & & mapConsumers [ m [ 1 ] ] ;
var tileNotification = windows . ui . notifications . tileNotification ; var tileUpdateManager:==:windows . ui . notifications . tileUpdateManager ;
var Block = traceur . syntax . trees . Block ; var classDeclaration:==:traceur . syntax . trees . classDeclaration ;
var styleSheet = require ( ' styleSheet ' ) ; var touchableWithoutFeedback:==:require ( ' touchableWithoutFeedback ' ) ;
var iterator = this . iterator ; var start:==:this . start ;
var localDiff = diff . localDiff ; var remoteDiff:==:diff . remoteDiff ;
var label = _ ref . label ; var sortBy:==:_ ref . sortBy ;
var options = this . options ; var listView:==:this . listView ;
var email = identify . email ( ) ; var plan:==:identify . proxy ( ' traits . plan ' ) ;
var assets = document . createElement ( ' a - assets ' ) ; var entity:==:document . createElement ( ' a - entity ' ) ;
var scm = imports . scm ; var proc:==:imports . proc ;
var View = require ( ' View ' ) ; var moment:==:require ( ' moment ' ) ;
var url = this . find ( ' [ data - url ] ' ) . val ( ) ; var title:==:this . find ( ' [ data - title ] ' ) . val ( ) ;
var visibleGroupContainer = this . visibleGroupContainer ; var totalRows:==:this . _ totalRows ;
var uploadImg = editor . uploadImg ; var config:==:editor . config ;
var maxLine = options . maxLine  |  |  2 ; var node:==:options . node ;
var dfx = cx1 * 0 . 3 + tmpx + dddfx * 0 . 16666667 , dfy = cy1 * 0 . 3 + tmpy + dddfy * 0 . 16666667 ; var i:==:frameIndex * curveTimeline . bezier_size ;
var display = _ ref . display ; var max_age:==:_ ref . max_age ;
var SCALE_BY_DISTANCE_INDEX = Billboard . SCALE_BY_DISTANCE_INDEX ; var TRANSLUCENCY_BY_DISTANCE_INDEX:==:Billboard . TRANSLUCENCY_BY_DISTANCE_INDEX ;
var x = ~~particle . position . x ; var y:==:~~particle . position . y ;
var buttonText = this . _ get ( inst , ' buttonText ' ) ; var buttonImage:==:this . _ get ( inst , ' buttonImage ' ) ;
var eventMixin = hilo . eventMixin ; var imageLoader:==:hilo . imageLoader ;
var isCategoryColumnSelected = powerbi . visuals . isCategoryColumnSelected ; var converterHelper:==:powerbi . visuals . converterHelper ;
var delta = document . querySelector ( ' # delta ' ) ; var buffer:==:document . querySelector ( ' # buffer ' ) ;
var minId = event . data . minId ; var maxId:==:event . data . maxId ;
var dirs = util . dirs ( ) ; var log:==:require ( util . dirs ( ) . core + ' log ' ) ;
var path = require ( ' path ' ) ; var ipfilter:==:require ( ' express - ipfilter ' ) . ipFilter ;
var lastFrameAlpha = this . lastFrameAlpha ; var dpr:==:this . dpr ;
var noRowsRenderer = _ props . noRowsRenderer ; var scrollToIndex:==:_ props . scrollToIndex ;
var particle = this . particles [ i ] ; var size:==:particle . size ;
var dynCall_viiiiii = Module [ ' dynCall_viiiiii ' ] = asm [ ' dynCall_viiiiii ' ] ; var dynCall_viiiiiiiiiiiii:==:Module [ ' dynCall_viiiiiiiiiiiii ' ]    asm [ ' dynCall_viiiiiiiiiiiii ' ] ;
var c9 = imports . c9 ; var dirname:==:require ( ' path ' ) . dirname ;
var collection = supportedCollections [ data . collection ] ; var check:==:checkConditions ( ' dbUpdate ' , data ) ;
var iterators = this . iterators ; var index:==:this . index++ ;
var target = _ options . target ; var targetModifier:==:_ options . targetModifier ;
var Model = _ componentsFxosMvcDistMvc . model ; var appsHelper:==:_ jsLibHelpers . appsHelper ;
var rule = options . allrules [ errorSelector ] ; var extraData:==:rule . extraData ;
var pez = docSet . getByLongname ( ' pez ' ) [ 0 ] ; var cos:==:docSet . getByLongname ( ' cos ' ) [ 0 ] ;
var tableLogger = utils . tableLogger ; var argv:==:require ( ' optimist ' ) . argv ;
var program = shader . program ; var m:==:PIXI . mat3 . clone ( strip . worldTransform ) ;
var gpsifdLengthDataSection = ifDlengths . gpsifdLengthDataSection ; var interoperabilityifdLength:==:ifDlengths . interoperabilityifdLength ;
var key = options . key ; var styleSpec:==:options . styleSpec ;
var parentNode = tabThis . parentNode ; var active:==:tabThis . className . indexOf ( ' active ' ) !    -1 ;
var leftBuffers = config . leftBuffers ; var rightBuffers:==:config . rightBuffers ;
var x = dot . attr ( ' cx ' ) ; var y:==:dot . attr ( ' cy ' ) ;
var table = doc . createElement ( ' table ' ) ; var tbody:==:doc . createElement ( ' tbody ' ) ;
var S = db . model ( ' updateOneStrictThrowSchema ' ) ; var s:==:new s ( name : ' orange crush ' ) ;
var dynCall_iiiiiiii = Module [ ' dynCall_iiiiiiii ' ] = asm [ ' dynCall_iiiiiiii ' ] ; var dynCall_viiiii:==:Module [ ' dynCall_viiiii ' ]    asm [ ' dynCall_viiiii ' ] ;
var r = new baidu . editor . dom . Range ( document ) ; var first:==:document . getElementById ( ' first ' ) ;
var g = pg . grads ; var l2_decay_mul:==:typeof pg . l2_decay_mul !    ' undefined ' ? pg . l2_decay_mul : 1 . 0 ;
var preview    = this . preview ; var toolbar:==:this . toolbar ;
var yellow700 = exports . yellow700 = ' # fbc02d ' ; var yellow800:==:exports . yellow800    ' # f9a825 ' ;
var Debug = debug . Debug ; var scopeType:==:debug . scopeType ;
var col = cols [ j ] ; var Cell:==:this . newCell ( col ) ;
var div = document . createElement ( ' div ' ) ; var b:==:document . createElement ( ' b ' ) ;
var nodes = graph . nodes ; var edges:==:graph . edges ;
var path = require ( ' path ' ) ; var ejs:==:require ( ' ejs ' ) ;
var httpDo = p5 . prototype . httpDo ; var loadjson:==:p5 . prototype . loadjson ;
var pinkA100 = exports . pinkA100 = ' # ff80ab ' ; var pinkA200:==:exports . pinkA200    ' # ff4081 ' ;
var makeIframe = helpers . makeIframe ; var writeIframe:==:helpers . writeIframe ;
var k = shape . k ; var n:==:shape . n ;
var one = subject . client . findElement ( selectors . one ) ; var two:==:subject . client . findElement ( selectors . two ) ;
var username = identify . username ( ) ; var traits:==:identify . traits ( ) ;
var totalX = t . totalX ; var totalY:==:t . totalY ;
var Size = goog . math . Size ; var getMarginBox:==:goog . style . getMarginBox ;
var tablixUtils = visuals . controls . internal . tablixUtils ; var tablixObjects:==:visuals . controls . internal . tablixObjects ;
var async = require ( ' async ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var month = o . defaultViewDate . month  |  |  0 ; var day:==:o . defaultViewDate . day  |  |  1 ;
var message = self . _ escapeHTML ( e . detail . message ) ; var initialValue:==:e . detail . initialValue ;
var path   = require ( ' path ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var Linking = require ( ' Linking ' ) ; var Platform:==:require ( ' Platform ' ) ;
var i d = newBusytime . _ i d ; var trans:==:db . transaction ( ' busytimes ' ) ;
var nodeNameOffset = snapshot . _ nodeNameOffset ; var nodes:==:snapshot . nodes ;
var el = this . el ; var renderer:==:el . renderer ;
var cookie = require ( ' cookie ' ) ; var send:==:require ( ' send ' ) ;
var alphaRenamer = traceur . codegeneration . alphaRenamer ; var findInFunctionScope:==:traceur . codegeneration . findInFunctionScope ;
var block = mixin . block ; var attrs:==:mixin . attrs ;
var Lazy = jsCommon . lazy ; var measureSvgTextWidth:==:powerbi . textMeasurementService . measureSvgTextWidth ;
var initialState = ' initialState ' ; var firstState:==:' firstState ' ;