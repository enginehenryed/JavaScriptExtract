var i d = layout . i d ; var origin:==:layout . origin ;
var date_stamp    = zombie_array [ index ] [ ' date_stamp ' ] ; var hb_id:==:zombie_array [ index ] [ ' hb_id ' ] ;
var Table = fixedDataTable . table ; var columnGroup:==:fixedDataTable . columnGroup ;
var errors = require ( ' restify - errors ' ) ; var badDigestError:==:errors . badDigestError ;
var scaleX = data . scaleX ; var scaleY:==:data . scaleY ;
var dataGridPage = options . dataGridPage ? options . dataGridPage : $ ( ' # ' + dataGrid . attr ( ' i d ' ) + ' page ' ) ; var searchForm:==:options . searchForm ? options . searchForm : $ ( ' # searchForm ' ) ;
var name = fileInfo . name ; var version:==:fileInfo . version ;
var exec = require ( ' child_process ' ) . exec ; var fs:==:require ( ' fs - extra ' ) ;
var objects = this . _ index . objects ; var objnames:==:this . _ index . objnames ;
var tree = imports . tree ; var frame:==:imports [ ' window . frame ' ] ;
var encoding = name_to_encoding [ name ] ; var index:==:indexes [ name ] ;
var hintStyle = _ props2 . hintStyle ; var i d:==:_ props2 . i d ;
var autoHeight = _ props3 . autoHeight ; var cellCount:==:_ props3 . cellCount ;
var options = grunt . option ( ' grunt - chrome - build - options ' ) ; var buildDir:==:options . buildDir ;
var domChildrenOperations = require ( ' domChildrenOperations ' ) ; var reactdomidOperations:==:require ( ' reactdomidOperations ' ) ;
var alias = el . alias ; var iterator1:==:el . iterator1 ? ( ' , ' + ( el . iterator1 ) ) : '' ;
var propertyTypes = propertyTypes . propertyTypes ; var register:==:propertyTypes . registerPropertyType ;
var request = this . _ request ; var initiator:==:request . initiatorInfo ( ) ;
var metadataUrl = _ ref . metadataUrl ; var metadata:==:_ ref . metadata ;
var item = _ copy  |  |  _ item ; var clientX:==:getCoord ( ' clientx ' , e ) ;
var pos = this . pos ; var r:==:this . radius ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var breakState:==:traceur . codegeneration . generator . breakState ;
var fontStringify = _ _ webpack_require _ _ ( 13 ) . fontStringify ; var pack:==:_ _ webpack_require _ _ ( 13 ) . pack ;
var a = ( crc ^ data [ i ] ) & 0xff ; var b:==:crcTable [ a ] ;
var sl = n . pos ? n . pos . sl : 0 ; var el:==:n . pos ? n . pos . el : 0 ;
var fromWorldPoint = orbitCameraInputMouse . fromWorldPoint ; var toWorldPoint:==:orbitCameraInputMouse . toWorldPoint ;
var svg = opts . svg ; var format:==:opts . format  |  |  ' png ' ;
var padCenter = _ require . padCenter ; var padLeft:==:_ require . padLeft ;
var n = new functionAssignmentNode ( ' f ' , [ ' x ' ] , c ) ; var e:==:new constantNode ( 3 ) ;
var c0 = computeImpulseDenominator_c0 ; var vec:==:computeImpulseDenominator_vec ;
var DateTimeSymbols_gl = goog . require ( ' goog . i18n . DateTimeSymbols_gl ' ) ; var DateTimeSymbols_hi:==:goog . require ( ' goog . i18n . DateTimeSymbols_hi ' ) ;
var uuid = require ( ' uuid ' ) ; var fs:==:require ( ' fs ' ) ;
var session = doc . getSession ( ) . session ; var line:==:session . doc . $ lines [ range . end . row ] ;
var basename = require ( ' path ' ) . basename ; var dirname:==:require ( ' path ' ) . dirname ;
var data = this . data ; var mesh:==:this . el . getOrCreateObject3d ( ' mesh ' , three . mesh ) ;
var path = require ( ' path ' ) ; var denodeify:==:require ( ' denodeify ' ) ;
var focusManager = imports . focusManager ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var canvas = self . canvas ; var width:==:canvas . width ;
var containmentEdges = this . containmentEdges ; var nodes:==:this . nodes ;
var fs = require ( ' fs ' ) ; var qs:==:require ( ' qs ' ) ;
var React = require ( ' React ' ) ; var webPlayer:==:require ( ' webPlayer ' ) ;
var footer = this . $ element . find ( ' . repeater - footer ' ) ; var viewport:==:this . $ element . find ( ' . repeater - viewport ' ) ;
var sampleRate = config . sampleRate ; var internalInterleavedLength:==:config . internalInterleavedLength ;
var pitch = parseFloat ( e . pitch ) ; var yaw:==:parseFloat ( e . yaw ) ;
var type = e . type ; var target:==:e . target ;
var headerNames = parseOutput . headerNames ; var headerTypes:==:parseOutput . headerTypes ;
var chai = require ( ' chai - nightwatch ' ) ; var expect:==:chai . expect ;
var eventPropagators = require ( ' eventPropagators ' ) ; var syntheticEvent:==:require ( ' syntheticEvent ' ) ;
var reflowItemRecord = reflowItemRecords [ i ] ; var xOffset:==:reflowItemRecord . xOffset ;
var root = graph . getNode ( this . root ) ; var parent:==:this . parent ;
var fixedRowsTop = wot . getSetting ( ' fixedRowsTop ' ) ; var fixedRowsBottom:==:wot . getSetting ( ' fixedRowsBottom ' ) ;
var month = calendar . month . month ( ) ; var year:==:calendar . month . year ( ) ;
var React = require ( ' React ' ) ; var cx:==:require ( ' cx ' ) ;
var createBlock = parseTreeFactory . createBlock ; var createCallCall:==:parseTreeFactory . createCallCall ;
var chunkManager = this . _ chunkManager ; var indexes:==:this . _ indexes ;
var times = options . times ; var firstTangent:==:options . firstTangent ;
var isLtr = goog . i18n . bidi . isLtrChar ( newInput ) ; var isRtl:==:! isLtr & & goog . i18n . bidi . isRtlChar ( newInput ) ;
var positions = hierarchy . positions ; var holes:==:hierarchy . holes ;
var isIdentifierStart = _ identifier . isIdentifierStart ; var isIdentifierChar:==:_ identifier . isIdentifierChar ;
var shadowStyle = _ props . shadowStyle ; var style:==:_ props . style ;
var flatten = require ( ' array - flatten ' ) ; var mime:==:require ( ' send ' ) . mime ;
var column = args . column ; var menu:==:column . header & & column . header . menu ;
var gmdl = this . gmdl ; var office:==:this . office ;
var Agent = smith . Agent ; var browserTransport:==:smith . browserTransport ;
var x = v . x , y = v . y , z = v . z ; var e:==:m . elements ;
var ellipsoid = options . ellipsoid ; var size:==:options . size ;
var dynCall_iiiii = Module [ ' dynCall_iiiii ' ] = asm [ ' dynCall_iiiii ' ] ; var dynCall_iiiddddiii:==:Module [ ' dynCall_iiiddddiii ' ]    asm [ ' dynCall_iiiddddiii ' ] ;
var relpos = sphereTrimesh_relpos ; var triangles:==:sphereTrimesh_triangles ;
var ops = require ( ' ndarray - ops ' ) ; var tinycolor:==:require ( ' tinycolor2 ' ) ;
var eventEmitter = events . eventEmitter ; var agent:==:smith . agent ;
var gl = this . gl ; var shaderProgram:==:pixi . shaderProgram ;
var Armature = dragonBones . armature ; var hiloSlot:==:dragonBones . hiloSlot ;
var rotateX = this . _ transformController . rotatex ( ) ; var rotatey:==:this . _ transformController . rotatey ( ) ;
var context = task . context ; var i d:==:payload . i d ;
var clone = require ( ' clone ' ) ; var debug:==:require ( ' debug ' ) ;
var groups = this . groups ; var elementSelector:==:this . elementSelector ;
var Dict = corePrimitives . dict ; var name:==:corePrimitives . name ;
var hash = this . hash ( data ) ; var textureCache:==:this . textureCache ;
var shortYearCutoff = ( settings ? settings . shortYearCutoff : null )  |  |  this . _ defaults . shortYearCutoff ; var dayNamesShort:==:( settings ? settings . dayNamesShort : null )  |  |  this . _ defaults . dayNamesShort ;
var key = e . keyCode ; var ctrlKey:==:e . ctrlKey ;
var height = defaultValue ( options . height , 0 . 0 ) ; var extrudedHeight:==:options . extrudedHeight ;
var key = options . key ; var styleSpec:==:options . styleSpec ;
var overrideFn = priv . overrideFn ; var rowHeightFn:==:priv . rowHeightFn ;
var request = result . request ; var recursive:==:result . recursive ;
var rayEnd = intersectconvex_rayend ; var normal:==:intersectconvex_normal ;
var pixel = mapBrowserEvent . pixel ; var map:==:mapBrowserEvent . map ;
var container = instance . get ( ' container ' ) ; var header:==:instance . get ( ' header ' ) ;
var lightGreen900 = exports . lightGreen900 = ' # 33691e ' ; var lightGreena100:==:exports . lightGreena100    ' # ccff90 ' ;
var assert = require ( ' assert ' ) ; var socks:==:require ( ' socksv5 ' ) ;
var settingName = descriptor [ ' settingName ' ] ; var setting:==:webInspector . settings [ settingName ] ;
var src = this . src ; var cache:==:this . cache ;
var tryCatch = util . tryCatch ; var errorObj:==:util . errorObj ;
var afterEach = test . afterEach ; var assert:==:test . assert ;
var urlSpan = this . boxElement . querySelector ( ' . ' + cfg . urlSpanClass ) ; var acceptLink:==:this . boxElement . querySelector ( ' . ' + cfg . acceptLinkClass ) ;
var uid = userRow . attr ( ' data - uid ' ) ; var action:==:btnEl . attr ( ' data - action ' ) ;
var csrftoken = getCookie ( ' csrftoken ' ) ; var sessionid:==:getCookie ( ' sessionid ' ) ;
var up = Cartesian3 . clone ( this . upWC , setTransformUp ) ; var direction:==:cartesian3 . clone ( this . directionwc , setTransformDirection ) ;
var attributes = this . _ attributes ; var gl:==:this . _ gl ;
var unknownErrorException = sharedUtil . unknownErrorException ; var xRefParseException:==:sharedUtil . xRefParseException ;
var locale = locale_locales__getLocale ( ) ; var utc:==:create_utc__createUTC ( ) . set ( setter , index ) ;
var width = img . width , height = img . height ; var fillColor:==:this . current . fillColor ;
var clickmap = this . options . clickmap ; var webvisor:==:this . options . webvisor ;
var margin = this . margin ; var width:==:this . viewportIn . width ;
var dropdown = $ ( ' # acp - search . dropdown ' ) ; var menu:==:$ ( ' # acp - search . dropdown - menu ' ) ;
var gulp = require ( ' gulp ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var concat = require ( ' gulp - concat ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var createBlock = parseTreeFactory . createBlock ; var createBooleanLiteral:==:parseTreeFactory . createBooleanLiteral ;
var textOperation = firepad . textOperation ; var textOp:==:firepad . textOp ;
var wrapEventTargetMethods = scope . wrapEventTargetMethods ; var wrapNodeList:==:scope . wrapNodeList ;
var d16 = _ addDiv ( ' d16 ' ) , d17 = _ addDiv ( ' d17 ' ) , d18 = _ addDiv ( ' d18 ' ) ; var ep:==:_ jsPlumb . addEndpoint ( d18 ) , ep2    _ jsPlumb . addEndpoint ( d18 ) ;
var tilelon = tileLayout . tilelon ; var tilelat:==:tileLayout . tilelat ;
var rootNodes = model . _ runtime . rootNodes ; var length:==:rootNodes . length ;
var Ref = corePrimitives . ref ; var refSet:==:corePrimitives . refSet ;
var buildDir = options . buildDir ; var zipFile:==:options . zipFile ;
var objectEnumerationBuilder = powerbi . visuals . objectEnumerationBuilder ; var dataLabelUtils:==:powerbi . visuals . dataLabelUtils ;
var table = document . getElementById ( ' testtable ' ) ; var record_select:==:document . getElementById ( ' record_select ' ) ;
var el = this . el ; var data:==:this . data ;
var disabled = props . disabled ; var disabledBackgroundColor:==:props . disabledBackgroundColor ;
var totalColumns = priv . totalColumns ; var viewportWidth:==:priv . viewportWidth ;
var target = evt . target ; var action:==:target . action ;
var green50 = exports . green50 = ' # e8f5e9 ' ; var green100:==:exports . green100    ' # c8e6c9 ' ;
var actors = diagram . actors ; var signals:==:diagram . signals ;
var x = defaultValue ( viewport . x , 0 . 0 ) ; var y:==:defaultValue ( viewport . y , 0 . 0 ) ;
var displayName = powerbi . dataViewObject . getValue ( trendProperties , trendLinePropertyNames . displayName ) ; var lineColor:==:powerbi . dataViewObject . getValue ( trendProperties , trendLinePropertyNames . lineColor ) ;
var projectionView = this . projectionView ; var inverseProjectionView:==:this . inverseProjectionView ;
var nconf = require ( ' nconf ' ) ; var path:==:require ( ' path ' ) ;
var settings = this . data & & this . data . settings ; var argv:==:this . data & & this . data . argv ;
var phantomjs = checkTestOnlyDependency ( ' phantomjs - prebuilt ' ) ; var webdriver:==:checkTestOnlyDependency ( ' browserstack - webdriver ' ) ;
var height = node . getAttribute ( ' height ' ) ; var width:==:node . getAttribute ( ' width ' ) ;
var scene = document . createElement ( ' a - scene ' ) ; var entity:==:document . createElement ( ' a - entity ' ) ;
var colorAlpha = getValueVisualDefine ( visuals , ' colorAlpha ' ) ; var colorSaturation:==:getValueVisualDefine ( visuals , ' colorSaturation ' ) ;
var scrollLeft = _ props . scrollLeft ; var scrollToCell:==:_ props . scrollToCell ;
var log2 = sharedUtil . log2 ; var readUint16:==:sharedUtil . readUint16 ;
var inputTimeScale = track . inputTimeScale ; var initpts:==:this . _ initpts ;
var blogPostHeader = require ( ' blogPostHeader ' ) ; var blogPostFooter:==:require ( ' blogPostFooter ' ) ;
var partials = require ( ' express - partials ' ) ; var flash:==:require ( ' connect - flash ' ) ;
var a = a : [ 1 , 2 , 3 , [ 1 , 2 , 3 , a : [ 1 , 2 , 3 ] ] ] ; var b:==:Object . clone ( a ) ;
var endsText = viewData . endsText ; var showLabel:==:zrUtil . retrieve ( visualMapModel . get ( ' showLabel ' , true ) , ! endsText ) ;
var DateTimeSymbols_en = goog . require ( ' goog . i18n . DateTimeSymbols_en ' ) ; var DateTimeSymbols_fr_CA:==:goog . require ( ' goog . i18n . DateTimeSymbols_fr_CA ' ) ;
var table = require ( ' markdown - table ' ) ; var repeat:==:require ( ' repeat - string ' ) ;
var input = utils . elt ( ' input ' , null , ' class ' : ' firepad - dialog - input ' , ' i d ' : i d , ' type ' : ' text ' , ' placeholder ' : placeholder , ' autofocus ' : ' autofocus ' ) ; var submit:==:utils . elt ( ' a ' , ' Submit ' , ' class ' : ' firepad - btn ' , ' i d ' : ' submitbtn ' ) ;
var proxy = $ . proxy ; var setTimeout:==:window . setTimeout ;
var type = tok . type ; var text:==:tok . text ;
var objectEnumerationBuilder = powerbi . visuals . objectEnumerationBuilder ; var converterHelper:==:powerbi . visuals . converterHelper ;
var numThreads = options & & options . numThreads ; var batchSize:==:options & & options . batchSize ;
var southwestChild = tile . southwestChild ; var southeastChild:==:tile . southeastChild ;
var p1 = [ cp1x , cp1y ] ; var p2:==:[ cp2x , cp2y ] ;
var transitionManager = _ createRouterObjects . transitionManager ; var router:==:_ createRouterObjects . router ;
var outlineWidth = label . _ outlineWidth ; var style:==:label . _ style ;
var samples = options . samples ; var cpuSync:==:options . cpuSync ;
var Util = sharedUtil . util ; var ref:==:corePrimitives . ref ;
var Panel = imports . Panel ; var Tree:==:imports . Tree ;
var mongoose = require ( ' mongoose ' ) ; var Post:==:mongoose . model ( ' Post ' ) ;
var extendedData = kmlData . extendedData ; var description:==:queryStringValue ( node , ' description ' , namespaces . kml ) ;
var m = math . matrix ( [ [ 15 , 42 ] , [ 20 , 81 ] ] , ' dense ' ) ; var r:==:math . qr ( m ) ;
var sub = stdlib . Atomics . sub ; var fround:==:stdlib . Math . fround ;
var norm = disp . norm ( )  |  |  1 ; var p:==:u . getPos ( p ) ;
var target = grunt . option ( ' target ' )  |  |  ' development ' ; var beta:==:grunt . option ( ' beta ' )  |  |  false ;
var tmpExtent = this . tmpExtent ; var tmpTileRange:==:this . tmpTileRange _ ;
var top = region . top ; var right:==:region . right ;
var numChannels = options . numChannels  |  |  defaults . numChannels ; var sampleRateHz:==:options . sampleRateHz  |  |  defaults . sampleRateHz ;
var syntheticEvent = require ( ' syntheticEvent ' ) ; var inputValueTracking:==:require ( ' inputValueTracking ' ) ;
var name = this . transformAny ( tree . name ) ; var superClass:==:this . transformAny ( tree . superClass ) ;
var inspectable = ! data  |  |  ! data [ consts . meta ]  |  |  ! data [ consts . meta ] . uninspectable ; var open:==:inspectable & & this . state . open & & ( ! data  |  |  data [ consts . inspected ] !    false ) ;
var checkEl = instance . get ( ' checkEl ' ) ; var checkContainerEl:==:instance . get ( ' checkContainerEl ' ) ;
var fullPath = route . redirectedFrom  |  |  route . fullPath ; var base:==:this . history . base ;
var a = ' global ' ; var b:==:' global ' ;
var a22 = this . a22 ; var a23:==:this . a23 ;
var rotl32 = utils . rotl32 ; var sum32:==:utils . sum32 ;
var offsetWidth = precomputedFeatures ? precomputedFeatures . offsetWidth : naturalWidth ; var offsetHeight:==:precomputedFeatures ? precomputedFeatures . offsetHeight : naturalHeight ;
var type = evt . type = = = ' mousewheel '  |  |  evt . type = = = ' domMouseScroll ' ? pointerEventTypes . pointerwheel : pointerEventTypes . pointermove ; var pi:==:new pointerInfo ( type , evt , pickResult ) ;
var type = S . token . type ; var name:==:as_property_name ( ) ;
var loginname = validator . trim ( req . body . loginname ) . toLowerCase ( ) ; var email:==:validator . trim ( req . body . email ) . toLowerCase ( ) ;
var technique = techniques [ materials [ primitive . material ] . technique ] ; var parameters:==:technique . parameters ;
var docsPages = constants . docsPages ; var examplePages:==:constants . examplePages ;
var s = this . getStartFrame ( name ) ; var e:==:this . getEndFrame ( name ) ;
var w = width * . 9 ; var h:==:height * . 9 ;
var createIdentifierExpression = traceur . codegeneration . parseTreeFactory . createIdentifierExpression ; var tokenType:==:traceur . syntax . tokenType ;
var reactControlledComponent = require ( ' reactControlledComponent ' ) ; var reactdomComponentTree:==:require ( ' reactdomComponentTree ' ) ;
var inherit = require ( ' component - inherit ' ) ; var debug:==:require ( ' debug ' ) ( ' engine . io - client : websocket ' ) ;
var urgent = moment ( sbx . time ) . subtract ( prefs . urgentClock , ' minutes ' ) ; var warn:==:moment ( sbx . time ) . subtract ( prefs . warnClock , ' minutes ' ) ;
var keyCommandMoveSelectionToStartOfBlock = require ( ' keyCommandMoveSelectionToStartOfBlock ' ) ; var keyCommandTransposeCharacters:==:require ( ' keyCommandTransposeCharacters ' ) ;
var vim = cm . state . vim ; var macroModeState:==:vimGlobalState . macroModeState ;
var tokenType = traceur . syntax . tokenType ; var variableDeclaration:==:traceur . syntax . trees . variableDeclaration ;
var uglify   = require ( ' broccoli - uglify - sourcemap ' ) ; var stew:==:require ( ' broccoli - stew ' ) ;
var a = Object . create ( null ) ; var b:==:Object . create ( null ) ;
var show = dataViewObject . getValue ( this . legendObjectProperties , legendProps . show , this . legend . isVisible ( ) ) ; var showTitle:==:dataViewObject . getValue ( this . legendObjectProperties , legendProps . showTitle , true ) ;
var _ bitshift64Shl = module [ ' _ bitshift64Shl ' ] = asm [ ' _ bitshift64Shl ' ] ; var runPostSets:==:module [ ' runPostSets ' ]    asm [ ' runPostSets ' ] ;
var template = options . template  |  |  '' ; var resolve:==:angular . extend ( , options . resolve ) ;
var gulp = require ( ' gulp ' ) ; var istanbul:==:require ( ' istanbul ' ) ;
var test = require ( ' tap ' ) . test ; var util:==:require ( ' util ' ) ;
var extrude = queryBooleanValue ( geometryNode , ' extrude ' , namespaces . kml ) ; var tessellate:==:queryBooleanValue ( geometryNode , ' tessellate ' , namespaces . kml ) ;
var opp = ( opts . opp=='false' |  | opts . opp==false ) ? false : true ; var autoPage:==:( opts . autoPage   ' false' |  | opts . autoPage   false ) ? false : true ;
var width = image . width ; var height:==:image . height ;
var has_stree   = desc . stat_desc . has_stree ; var extra:==:desc . stat_desc . extra_bits ;
var childNodes = node . childNodes ; var length:==:childNodes . length ;
var userAgent = require ( ' userAgent ' ) ; var invariant:==:require ( ' invariant ' ) ;
var gl = ( tempcanvas . getContext ( ' webgl ' )  |  |  tempcanvas . getContext ( ' experimental - webgl ' ) ) ; var ext:==:gl . getExtension ( extension ) ;
var router = require ( ' router ' ) ; var intl:==:require ( ' intl ' ) ;
var muk = require ( ' muk ' ) ; var thinkit:==:require ( ' thinkit ' ) ;
var f = geometry . faces [ i ] ; var n:==:( f instanceof THREE . Face3 ) ? 3 : 4 ;
var m01 = this . m01 _ ; var m02:==:this . m02 _ ;
var REPORTER = utils . getEnv ( ' reporter ' ) ; var try_env:==:utils . getEnv ( ' try_env ' ) ;
var scope = $ timepicker . $ scope ; var lang:==:options . lang ;
var webglValidation = argv . webglValidation ? argv . webglValidation : false ; var webglStub:==:argv . webglStub ? argv . webglStub : false ;
var start = rng . startContainer ; var end:==:rng . endContainer ;
var collection = this . transformAny ( tree . collection ) ; var body:==:this . transformToBlockOrStatement ( tree . body ) ;
var stack = self . stackManager . _ stack ; var current:==:self . stackManager . _ current ;
var canvas = this . canvas ; var bounds:==:this . bounds ;
var props = this . props ; var delta:==:this . state . isHorizontal ? deltax : deltay ;
var events = require ( ' events ' ) ; var inherits:==:require ( ' util ' ) . inherits ;
var colors = polylineGeometry . _ colors ; var colorsPerVertex:==:polylineGeometry . _ colorsPerVertex ;
var gammaInput = renderer . gammaInput ; var gammaOutput:==:renderer . gammaOutput ;
var Name = corePrimitives . name ; var isCmd:==:corePrimitives . isCmd ;
var yl = this . yl ; var yr:==:this . yr ;
var dampingRatio = options . dampingRatio ; var period:==:options . period ;
var d1 = _ addDiv ( ' d1 ' ) , d2 = _ addDiv ( ' d2 ' ) ; var returnedParams:==:null , returnedParams2    null ;
var toolbar = method . toolbar ; var tabs:==:method . tabs ;
var Tab = imports . Tab ; var Document:==:imports . Document ;
var keys = Object . keys ( files ) ; var metadata:==:metalsmith . metadata ( ) ;
var child_process = Npm . require ( ' child_process ' ) ; var querystring:==:Npm . require ( ' querystring ' ) ;
var close = ' close ' ; var inner:==:' inner ' ;
var i d = fieldAttributes . i d  |  |  ' upload ' ; var name:==:fieldAttributes . name  |  |  ' file ' ;
var db = this . _ db ; var upgradeFrom:==:this . upgradeFrom ;
var containmentEdges = this . containmentEdges ; var edgeFieldsCount:==:this . _ edgeFieldsCount ;
var showSeconds = $ dateFormatter . showSeconds ( format ) ; var showam:==:$ dateFormatter . showam ( format ) ;
var def   = $ firebaseUtils . defer ( ) ; var batch:==:$ firebaseUtils . batch ( ) ;
var caption = blocks . isString ( options . caption ) & & new virtualElement ( ' option ' ) ; var option:==:new virtualElement ( ' option ' ) ;
var cookieAccess = require ( ' cookiejar ' ) . cookieAccessInfo ; var parse:==:require ( ' url ' ) . parse ;
var aspectRatio = canvas . aspectRatio ; var cropBox:==:self . cropBox ;
var dirname = _ path2 . default . dirname ( this . opts . filename )  |  |  process . cwd ( ) ; var parser:==:( 0 , _ resolve2 . default ) ( parserOpts . parser , dirname ) ;
var idleNode = jsProfileModel . idleNode ; var programNode:==:jsProfileModel . programNode ;
var x = ( left . x > right . x ) ? left . x : right . x ; var y:==:( left . y > right . y ) ? left . y : right . y ;
var stencilSet = stencilSets [ i ] ; var nodes:==:stencilSet . nodes ( ) ;
var type = message . type ; var delivery:==:message . delivery ;
var muiTheme = props . muiTheme ; var style:==:props . style ;
var solver = this . _ solver ; var assignment:==:this . _ assignment ;
var message = callbacks . message ; var jsep:==:callbacks . jsep ;
var externalExportBindings = $ _ _ 9 . externalExportBindings [ index ] ; var exportStarBinding:==:$ _ _ 9 . exportStarBindings [ index ] ;
var center = box . center ; var halfAxes:==:box . halfAxes ;
var util = require ( ' util ' ) ; var mkpath:==:require ( ' mkpath ' ) ;
var exportClause = this . transformAny ( tree . exportClause ) ; var moduleSpecifier:==:this . transformAny ( tree . moduleSpecifier ) ;
var _ im_open_decoder_fd = Module [ ' _ im_open_decoder_fd ' ] = asm [ ' _ im_open_decoder_fd ' ] ; var _ strncpy:==:Module [ ' _ strncpy ' ]    asm [ ' _ strncpy ' ] ;
var Types = keystone . Field . Types ; var manyRelationship:==:new keystone . list ( ' manyRelationship ' ) ;
var deviceNameService = _ appJsServicesDeviceNameService [ ' default ' ] ; var httpClientService:==:_ appJsServicesHttpClientService [ ' default ' ] ;
var manifestURL = detail . manifestURL  |  |  '' ; var behavior:==:detail . mozbehavior  |  |  ;
var badgeNotification = windows . ui . notifications . badgeNotification ; var badges:==:notificationsExtensions . badges ;
var height = rect . height ; var min:==:Math . min ( width , height ) ;
var offsetVector = _ _ webpack_require _ _ ( 13 ) . offsetVector ; var fontStringify:==:_ _ webpack_require _ _ ( 13 ) . fontStringify ;
var menu = this . menu ; var $ container:==:this . $ container ;
var r = p . querySelectorAll ( selector ) ; var n:==:r . length ;
var order = options . order  |  |  1 ; var transform:==:options . transform ;
var logos = frameState . logos ; var logoElements:==:this . logoElements _ ;
var data = _ ref2 . data ; var post_logout_redirect_uri:==:_ ref2 . post_logout_redirect_uri ;
var cx = require ( ' cx ' ) ; var translatedomPositionxy:==:require ( ' translatedomPositionxy ' ) ;
var tpl = conf . tpl ; var query:==:conf . reqParam . query ;
var messageWebSocket = windows . networking . sockets . messageWebSocket ; var socketMessageType:==:windows . networking . sockets . socketMessageType ;
var App = _ appJsModelsApp [ ' default ' ] ; var deviceNameService:==:_ appJsServicesDeviceNameService [ ' default ' ] ;
var a = o . a ; var b:==:o . b ;
var exceptConditionals = this . _ exceptConditionals ; var exceptFunctions:==:this . _ exceptFunctions ;
var docs = path . join ( _ _ dirname , ' docs ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var arch = options . arch ; var isopackCache:==:options . isopackCache ;
var lines = this . lines ; var line:==:lines [ this . y + this . ybase ] ;
var phase = this . phase ; var ratchet:==:this . ratchet ;
var Tree = imports . Tree ; var test:==:imports . test ;
var option = _ ref2 . option ; var options:==:_ ref2 . options ;
var tileInfo = that . _ tileInfo ; var q:==:quadKey ;
var clone = require ( ' clone ' ) ; var util:==:require ( ' util ' ) ;
var email = getParameterByName ( ' email ' , data ) ; var otp:==:getParameterByName ( ' otp ' , data ) ;
var eventEnd = t . eventEnd ; var reportEventElement:==:t . reportEventElement ;
var tree = imports . tree ; var vfs:==:imports . vfs ;
var extend = _ tetherBase$Utils . extend ; var addClass:==:_ tetherBase$Utils . addClass ;
var keys = Object . keys ( obj ) ; var key:==:req . accepts ( keys ) ;
var DISTANCE_DISPLAY_CONDITION_INDEX = Billboard . DISTANCE_DISPLAY_CONDITION_INDEX ; var DISABLE_DEPTH_DISTANCE:==:Billboard . DISABLE_DEPTH_DISTANCE ;
var code = selectn ( ' faultcode . $ value ' , body . Fault )  |  |  selectn ( ' faultcode ' , body . Fault ) ; var string:==:selectn ( ' faultstring . $ value ' , body . Fault )  |  |  selectn ( ' faultstring ' , body . Fault ) ;
var decodeEntityRanges = require ( ' decodeEntityRanges ' ) ; var decodeInlineStyleRanges:==:require ( ' decodeInlineStyleRanges ' ) ;
var uvs    = opts & & opts . uvs ! = = undefined ? opts . uvs : null ; var uvs1:==:opts & & opts . uvs1 !    undefined ? opts . uvs1 : null ;
var r = spColor . r ; var g:==:spColor . g ;
var cssnano = require ( ' gulp - cssnano ' ) ; var autoprefixer:==:require ( ' gulp - autoprefixer ' ) ;
var data = geometryAttribute . data ; var stride:==:data . stride ;
var DIFF_EQUAL = DMP . DIFF_EQUAL ; var DIFF_INSERT:==:DMP . DIFF_INSERT ;
var index = this . indexFromCharCode ( charCode ) ; var keys:==:this . json . keys ;
var method = event . data . method ; var args:==:event . data . args ;
var pify = require ( ' pify ' ) ; var rimraf:==:require ( ' rimraf ' ) ;
var intersection = transformUtils . intersection ; var pluckFn:==:transformUtils . pluckFn ;
var n = frustum . near ; var f:==:frustum . far ;
var w = this . view . w , h = this . view . h ; var buffer:==:this . view . buffer ;
var dateTimeSymbols = goog . require ( ' goog . i18n . dateTimeSymbols ' ) ; var dateTimeSymbolsType:==:goog . require ( ' goog . i18n . dateTimeSymbolsType ' ) ;
var createArrayLiteralExpression = parseTreeFactory . createArrayLiteralExpression ; var createAssignStateStatement:==:parseTreeFactory . createAssignStateStatement ;
var question = options . question  |  |  gettext ( ' Are you sure you want to proceed ? ' ) ; var cancel:==:options . cancel  |  |  gettext ( ' Cancel ' ) ;
var bottom = getPropertyAsFloat ( style , ' border - bottom - width ' ) ; var top:==:getPropertyAsFloat ( style , ' border - top - width ' ) ;
var mode = frameState . mode ; var pointPrimitives:==:pointPrimitiveCollection . _ pointPrimitives ;
var right = region . right ; var bottom:==:region . bottom ;
var exceptUndefined = this . _ exceptUndefined ; var exceptRequire:==:this . _ exceptRequire ;
var yosay = require ( ' yosay ' ) ; var chalk:==:require ( ' chalk ' ) ;
var metadata = JSON . parse ( item . metadata ) ; var data:==:JSON . parse ( item . data ) ;
var settings = imports . settings ; var cli:==:imports [ ' vim . cli ' ] ;
var batchedBridge = require ( ' batchedBridge ' ) ; var recording:==:require ( ' nativeModules ' ) . recording ;
var isOpened = _ props2 . isOpened ; var springConfig:==:_ props2 . springConfig ;
var after = new Blockly . fieldLabel ( ' after ' ) ; var prefix:==:new blockly . fieldLabel ( ' prefix ' ) ;
var db = new PouchDB ( dbs . name ) ; var changes:==:db . changes ( live : true ) ;
var reactTestUtils = require ( ' reactTestUtils ' ) ; var changeEventPlugin:==:require ( ' changeEventPlugin ' ) ;
var type = opts . type ; var token:==:opts . token ;
var lang = textTrackQueue [ i ] . lang ; var track:==:isChrome ? document . createElement ( ' track ' ) : video . addTextTrack ( kind , label , lang ) ;
var MIDNUMLET = ci . MIDNUMLET ; var MIDLETTER:==:ci . MIDLETTER ;
var util = imports . util ; var debug:==:imports [ ' debugger ' ] ;
var onBeforeHide = spyOn ( myTooltip . $ options , ' onBeforeHide ' ) ; var onHide:==:spyOn ( myTooltip . $ options , ' onHide ' ) ;
var preview   = this . preview ; var classPrefix:==:this . classPrefix ;
var anchor = element . data ( ' anchor ' ) ; var index:==:element . index ( ) ;
var cob = client . plugins ( ' cob ' ) ; var eventTime:==:$ ( ' # bc_eventtimevalue ' ) ;
var SETS = unicodeData . sets ; var other:==:unicodeData . characterIndices . other ;
var hLayout2 = new horizontalLayout ( ' hLayout2 ' ) ; var vLayout1:==:new verticalLayout ( ' vLayout1 ' ) ;
var tree = imports . tree ; var fs:==:imports . fs ;
var params = req . params ; var component:==:params . component ;
var nonce = utils . toArray ( options . nonce , options . nonceEnc ) ; var pers:==:utils . toArray ( options . pers , options . persEnc ) ;
var skip = options . skip ; var limit:==:options . limit ;
var skin = skins [ ( Math . random ( ) * skins . length - 1 )  |  0 ] ; var attachments:==:skin . attachments [ slot ] ;
var backdrop = new Animation ( ele . querySelector ( ' . backdrop ' ) ) ; var wrapper:==:new animation ( ele . querySelector ( ' . alert - wrapper ' ) ) ;
var neq = semver . neq ; var cmp:==:semver . cmp ;
var multiArgs = ! ! options . multiArgs ; var suffix:==:options . suffix ;
var allPages = allPages = this . addCheckbox ( div , mxResources . get ( ' allPages ' ) , hasPages , ! hasPages ) ; var layers:==:this . addCheckbox ( div , mxResources . get ( ' layers ' ) , true ) ;
var dynCall_viiiiiiiii = Module [ ' dynCall_viiiiiiiii ' ] = asm [ ' dynCall_viiiiiiiii ' ] ; var dynCall_ii:==:Module [ ' dynCall_ii ' ]    asm [ ' dynCall_ii ' ] ;
var toString = require ( ' toString ' ) ; var test:==:require ( ' test ' ) ;
var bottomRadius = cylinder . bottomRadius ; var show:==:cylinder . show ;
var blueGrey700 = exports . blueGrey700 = ' # 455a64 ' ; var blueGrey800:==:exports . blueGrey800    ' # 37474f ' ;
var util = require ( ' util ' ) ; var lolcat:==:require ( ' fis - lolcat ' ) ;
var credentials = parts [ credentialsIndex ] ; var scheme:==:parts [ schemeIndex ] ;
var items = data . classitems ; var classes:==:data . classes ;
var modify = require ( ' gulp - modify ' ) ; var moment:==:require ( ' moment ' ) ;
var categoryLabels = this . data . categoryLabels ; var margin:==:this . margin ;
var test = imports . test ; var settings:==:imports . settings ;
var tag = item . tag ; var title:==:item . title ;
var componentType = accessor . componentType ; var type:==:accessor . type ;
var actionSheetios = require ( ' actionSheetios ' ) ; var listContainer:==:require ( ' listContainer ' ) ;
var proxy = listener . proxy ; var capture:==:listener . capture ;
var disabled = ' software - button - disabled ' ; var enabled:==:' software - button - enabled ' ;
var i d = docInfo . data . _ i d ; var rev:==:docInfo . data . _ rev ;
var o = this . options ; var helper:==:$ . isFunction ( o . helper ) ? $ ( o . helper . apply ( this . element [ 0 ] , [ event , this . currentItem ] ) ) : ( o . helper     ' clone ' ? this . currentItem . clone ( ) : this . currentItem ) ;
var uiSourceCode = this . _ uiSourceCodeForScriptId . get ( script . scriptId ) ; var lineNumber:==:debuggerModelLocation . lineNumber - ( script . isInlineScriptWithSourceurl ( ) ? script . lineOffset : 0 ) ;
var reactNativeViewAttributes = require ( ' reactNativeViewAttributes ' ) ; var set:==:require ( ' set ' ) ;
var MATERIAL_INDEX = Polyline . MATERIAL_INDEX = 3 ; var POSITION_SIZE_INDEX:==:Polyline . POSITION_SIZE_INDEX    4 ;
var s = this . searchText & & this . searchText . toLowerCase ( ) ; var f:==:$ . isEmptyObject ( this . filterColumns ) ? null : this . filterColumns ;
var end = this . end ; var content:==:this . content ;
var dueTime = this . dueTime ; var scheduler:==:this . scheduler ;
var mocha = require ( ' gulp - spawn - mocha ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var options = that . options ; var getter:==:kendo . getter ;
var proximityAppsController = _ appJsControllersProximityAppsController [ ' default ' ] ; var shareController:==:_ appJsControllersShareController [ ' default ' ] ;
var _ strncasecmp = Module [ ' _ strncasecmp ' ] = asm [ ' _ strncasecmp ' ] ; var _ strcpy:==:Module [ ' _ strcpy ' ]    asm [ ' _ strcpy ' ] ;
var models = _ _ alloyId15 . models ; var len:==:models . length ;
var normalizePath = util . normalizePath ; var mkdirRecursive:==:util . mkdirRecursive ;
var granule = granules [ gr ] ; var modes:==:this . modes ;
var west = Math . max ( rectangle1 . west , rectangle2 . west ) ; var south:==:Math . max ( rectangle1 . south , rectangle2 . south ) ;
var proxyReq = getProxyReqFunctions ( opt . get ( ' proxyReq ' ) , opt , bs ) ; var proxyRes:==:getProxyResFunctions ( opt . get ( ' proxyRes ' ) , opt ) ;
var catchBody = this . transformAny ( tree . catchBody ) ; var binding:==:this . transformAny ( tree . binding ) ;
var frame = systemDoc . querySelector ( ' iframe [ src= ' ' + url + ' ' ' ) ; var video:==:frame . contentWindow . document . querySelector ( ' video ' ) ;
var primitive = primitives [ name ] ; var material:==:primitive . material !    undefined ? dependencies . materials [ primitive . material ] : createDefaultMaterial ( ) ;
var line = s . line ( 0 , 0 , 10 , 10 ) ; var marker:==:line . marker ( 0 , 0 , 5 , 5 , 0 , 0 ) ;
var seconds   = makeGetter ( ' seconds ' ) ; var minutes:==:makeGetter ( ' minutes ' ) ;
var negative = ( config . negative = = = true ) ? true : false ; var decimalPlaces:==:( typeof config . decimalPlaces     ' undefined ' ) ? -1 : config . decimalPlaces ;
var createCascadeExpression = parseTreeFactory . createCascadeExpression ; var createCommaExpression:==:parseTreeFactory . createCommaExpression ;
var x = numeric . rep ( [ n ] , 0 ) , xj = Array ( n ) ; var b:==:numeric . rep ( [ n ] , 0 ) , bj    Array ( n ) ;
var write = context . write ; var next:==:context . next ;
var parent = this . _ idTodomNode [ parentId ] ; var node:==:this . _ idTodomNode [ nodeId ] ;
var lat = basic_map . getCenter ( ) . lat ( ) ; var lng:==:basic_map . getCenter ( ) . lng ( ) ;
var yTable = this . _ yTable ; var interpolationAlgorithm:==:this . _ interpolationAlgorithm ;
var forward = laneDirections . forward ; var backward:==:laneDirections . backward ;
var autoprefixer = require ( ' gulp - autoprefixer ' ) ; var notify:==:require ( ' gulp - notify ' ) ;
var test = imports . test ; var commands:==:imports . commands ;
var exportMappingList = traceur . syntax . trees . exportMappingList ; var exportSpecifier:==:traceur . syntax . trees . exportSpecifier ;
var polygonOffsetSupported = shadowMap . _ polygonOffsetSupported ; var isPointLight:==:shadowMap . _ isPointLight ;
var programs = model . gltf . programs ; var shaders:==:model . _ loadResources . shaders ;
var Foo = db . model ( ' Foo ' , fooSchema ) ; var bar:==:db . model ( ' bar ' , barSchema ) ;
var groups = util . _ extend ( defaultConfig . groups , userConfig . groups ) ; var order:==:userConfig . order  |  |  defaultConfig . order ;
var forwardWS = updateFriction_forwardWS ; var axle:==:updateFriction_axle ;
var returned = context . returnedForkContext ; var thrown:==:context . thrownForkContext ;
var createProgram = parseTreeFactory . createProgram ; var createPropertyNameAssignment:==:parseTreeFactory . createPropertyNameAssignment ;
var multilineTagIndentFactor = parserConfig . multilineTagIndentFactor  |  |  1 ; var multilineTagIndentPastTag:==:parserConfig . multilineTagIndentPastTag ;
var os = require ( ' os ' ) ; var uuid:==:require ( ' uuid ' ) ;
var height = parseInt ( obj . style . height ) ; var width:==:parseInt ( obj . style . width ) ;
var location = response . location ; var script:==:location & & this . scriptForId ( location . scriptId ) ;
var jsdoc = require ( ' gulp - jsdoc ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var b = m . b ; var c:==:m . c ;
var listener = goog . events . listeners _ [ key ] ; var type:==:listener . type ;
var v = values [ i ] ; var f:==:this . findField ( v . i d ) ;
var DICTID = 10 ; var DICT:==:11 ;
var item = event . detail . item ; var index:==:this . _ list . indexOfKey ( key ) ;
var poweron = subject . _ poweron ; var poweroff:==:subject . _ poweroff ;
var tab = tabs . focussedTab ; var pane:==:tabs . focussedTab . pane ;
var assert = require ( ' assert ' ) ; var async:==:require ( ' async ' ) ;
var getNonStdFontMap = coreStandardFonts . getNonStdFontMap ; var getGlyphMapForStandardFonts:==:coreStandardFonts . getGlyphMapForStandardFonts ;
var clone = node . cloneNode ( ) ; var childNodes:==:node . childNodes ;
var b = newObjectIt ( bv ) ; var c:==:newObjectIt ( bu ) ;
var s = Math . sin ( -angle ) ; var c:==:Math . cos ( -angle ) ;
var reactNativeTagHandles = require ( ' reactNativeTagHandles ' ) ; var reactReconciler:==:require ( ' reactReconciler ' ) ;
var framebufferxOffset = defaultValue ( options . framebufferxOffset , 0 ) ; var framebufferyOffset:==:defaultValue ( options . framebufferyOffset , 0 ) ;
var menuItem = imports . menuItem ; var tabbehavior:==:imports . tabbehavior ;
var angle = movement . angleAndHeight . endPosition . x ; var prevAngle:==:movement . prevAngle ;
var source = require ( ' vinyl - source - stream ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var headerWithGithub = require ( ' headerWithGithub ' ) ; var marked:==:require ( ' marked ' ) ;
var anchorOffset = selection . anchorOffset ; var focusNode:==:selection . focusNode ;
var length = params . length  |  |  20 ; var width:==:params . width  |  |  20 ;
var overlayContentStyle = _ props . overlayContentStyle ; var overlayStyle:==:_ props . overlayStyle ;
var View = Hilo . View ; var cacheMixin:==:hilo . cacheMixin ;
var option = _ ref3 . option ; var options:==:_ ref3 . options ;
var coefficentsSign = this . coefficentsSign ; var contexts:==:this . contexts ;
var accFactor = this . handle . autoExpand . accFactor ; var acc:==:math . pow ( dx , accFactor ) ;
var key = this . key ; var arc:==:this . arc ;
var dx = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx ' , this . dx ) ) ) ) ; var arrowHead:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' arrowHead ' , this . arrowHead ) ) ) ) ;
var getDaySegmentContainer = t . getDaySegmentContainer ; var getSlotSegmentContainer:==:t . getSlotSegmentContainer ;
var parseTreeVisitor = traceur . syntax . parseTreeVisitor ; var functionDeclaration:==:traceur . syntax . trees . functionDeclaration ;
var hoverLabelModel = seriesScope & & seriesScope . hoverLabelModel ; var hoverAnimation:==:seriesScope & & seriesScope . hoverAnimation ;
var babel = require ( ' gulp - babel ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var TEST = ! ! options . TEST ; var E2E:==:! ! options . E2E ;
var h = this ; var u:==:r . success ;
var qs = require ( ' qs ' ) ; var querystring:==:require ( ' querystring ' ) ;
var watcher = imports . watcher ; var fs:==:imports . fs ;
var todos = this . get ( ' todos ' ) ; var newTodo:==:this . get ( ' newTodo ' ) ;
var argv = require ( ' optimist ' ) . argv ; var browser:==:( typeof argv . browser !    ' boolean ' ? false : argv . browser )  |  |  ! ! argv . features ;
var models = _ _ alloyId46 . models ; var len:==:models . length ;
var canvas = document . querySelector ( ' canvas ' ) ; var video:==:document . querySelector ( ' video ' ) ;
var inner = ' EvalDerivedClass_inner ' ; var outer:==:' EvalDerivedClass_outer ' ;
var fs = require ( ' fs ' ) ; var hyperstream:==:require ( ' hyperstream ' ) ;
var badDigestError = errors . badDigestError ; var requestEntityTooLargeError:==:errors . requestEntityTooLargeError ;
var vel2 = resolveSingleBilateral_vel2 ; var vel:==:resolveSingleBilateral_vel ;
var Block = traceur . syntax . trees . Block ; var Catch:==:traceur . syntax . trees . Catch ;
var cpus = require ( ' os ' ) . cpus ( ) . length ; var net:==:require ( ' net ' ) ;
var dim = _ dim  |  |  false ; var label:==:_ label  |  |  ' Loading . . . ' ;
var flash = require ( ' connect - flash ' ) ; var moment:==:require ( ' moment ' ) ;
var expression = this . transformAny ( tree . expression ) ; var caseClauses:==:this . transformList ( tree . caseClauses ) ;
var fs    = require ( ' fs ' ) ; var rim:==:require ( ' rimraf ' ) . sync ;
var stream = require ( ' stream ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var draftEntity = require ( ' draftEntity ' ) ; var createCharacterList:==:require ( ' createCharacterList ' ) ;
var height = backgroundBillboard . height * scale ; var x:==:backgroundBillboard . _ translate . x ;
var res = result . rows . item ( i ) ; var metadata:==:vuvuzela . parse ( res . metadata ) ;
var pdfDocument = windows . data . pdf . pdfDocument ; var pdfPage:==:windows . data . pdf . pdfPage ;
var minorgridlines = axis . _ minorgridlines = [ ] ; var boundarylines:==:axis . _ boundarylines    [ ] ;
var newer = require ( ' gulp - newer ' ) ; var panini:==:require ( ' panini ' ) ;
var resolve = resolvingFunctions . resolve ; var reject:==:resolvingFunctions . reject ;
var gulp = require ( ' gulp ' ) ; var opener:==:require ( ' opener ' ) ;
var y = value . y ; var z:==:value . z ;
var Platform = require ( ' Platform ' ) ; var React:==:require ( ' React ' ) ;
var block = this . blocks [ i ] ; var l:==:positionBlock . anchor . left ;
var executionEnvironment = require ( ' executionEnvironment ' ) ; var camelize:==:require ( ' camelize ' ) ;
var bold = fontObj . black ? ' 900 ' : ( fontObj . bold ? ' bold ' : ' normal ' ) ; var italic:==:fontObj . italic ? ' italic ' : ' normal ' ;
var Plugin = imports . Plugin ; var Tab:==:imports . Tab ;
var error = _ ref . error ; var error_description:==:_ ref . error_description ;
var apply = Function . prototype . apply ; var slice:==:Array . prototype . slice ;
var model = this . _ model ; var config:==:this . _ config ;
var tab = tabManager . findTab ( path ) ; var doc:==:documents [ path ] ;
var tkey = $ ( this ) . attr ( ' tkey ' ) ; var tname:==:$ ( this ) . attr ( ' tname ' ) ;
var dirPath = file . dirPath ; var type:==:file . type ;
var sideOrientation = options . sideOrientation  |  |  babylon . mesh . defaultside ; var radius:==:options . radius  |  |  1 ;
var body = Fe . body ( ) ; var W:==:body . documentWidth ;
var debug = require ( ' debug ' ) ( ' view : setting - options ' ) ; var attach:==:require ( ' attach ' ) ;
var distance = originalLight . distance ; var uniforms:==:material . uniforms ;
var isAvailable = entity . isAvailable ( time ) ; var show:==:new showGeometryInstanceAttribute ( isAvailable & & entity . isShowing & & this . _ showProperty . getValue ( time ) ) ;
var target = this . target ; var source:==:this . source ;
var rows = g . rows . groups ; var sortedCols:==:g . sortedCols ( ) ;
var rimraf = require ( ' rimraf ' ) ; var chalk:==:require ( ' chalk ' ) ;
var s = arguments [ 1 ] ; var a:==:Array . prototype . slice . call ( arguments , 1 ) ;
var tabs = parent . Ext . getCmp ( ' tabs ' ) ; var tab1:==:parent . ext . getCmp ( ' tab1 ' ) ;
var has = context . has ; var get:==:context . get ;
var paddingTop = options . paddingTop ; var paddingBottom:==:options . paddingBottom ;
var Catch = traceur . syntax . trees . Catch ; var forInStatement:==:traceur . syntax . trees . forInStatement ;
var reactReconciler = require ( ' reactReconciler ' ) ; var reactUpdates:==:require ( ' reactUpdates ' ) ;
var start = cursorFromBoundaryPoint ( range . startContainer , range . startOffset ) ; var end:==:cursorFromBoundaryPoint ( range . endContainer , range . endOffset ) ;
var stdout = fs . readFileSync ( stdoutFile , ' utf8 ' ) ; var stderr:==:fs . readFileSync ( stderrFile , ' utf8 ' ) ;
var characterMetadata = require ( ' characterMetadata ' ) ; var findRangesImmutable:==:require ( ' findRangesImmutable ' ) ;
var strokeStyle = params . strokeStyle  |  |  ' yellow ' ; var lineWidth:==:params . lineWidth  |  |  1 ;
var tag = options [ ' tag ' ] ! = null ? options [ ' tag ' ] : 0 ; var actionTag:==:options [ ' actionTag ' ] !   null ? options [ ' actionTag ' ] : 0 ;
var document = win . document ; var div:==:document . createElement ( ' div ' ) ;
var table = require ( ' text - table ' ) ; var through:==:require ( ' through2 ' ) ;
var str = replaceRaw ( json . stringify ( elements [ i ] . value . value ) ) ; var loc:==:elements [ i ] . location ;
var cursorLayer = collabDoc . cursorLayer ; var renderer:==:editor . renderer ;
var bufList = db . model ( ' bufList ' ) ; var t:==:new bufList ( ) ;
var tinycolor = require ( ' tinycolor2 ' ) ; var triangulate:==:require ( ' delaunay - triangulate ' ) ;
var x = this . x , y = this . y , z = this . z ; var e:==:m . elements ;
var focusColor = _ context$muiTheme$tex . focusColor ; var textColor:==:_ context$muiTheme$tex . textColor ;
var fluxStore = require ( ' fluxStore ' ) ; var fluxStoreGroup:==:require ( ' fluxStoreGroup ' ) ;
var options   = this . options ; var force:==:this . force ;
var s = ctx . strokeStyle ; var f:==:ctx . fillStyle ;
var join = require ( ' path ' ) . join ; var proc:==:require ( ' child_process ' ) ;
var index = _ ref2 . index ; var option:==:options [ index ] ;
var scene = this . scene ; var div:==:document . createElement ( ' div ' ) ;
var pixelSize = pointPrimitive . pixelSize ; var outlineWidth:==:pointPrimitive . outlineWidth ;
var toString = object . prototype . toString ; var hasOwnProperty:==:object . prototype . hasOwnProperty ;
var s = sValues [ si ] ; var r:==:rValues [ ri ] ;
var fs = require ( ' fs - extra ' ) ; var gulp:==:require ( ' gulp ' ) ;
var obj = this . obj . eval ( context ) ; var key:==:this . key . eval ( context ) ;
var _ realloc = Module [ ' _ realloc ' ] = asm [ ' _ realloc ' ] ; var _ sass_compile_emscripten:==:Module [ ' _ sass_compile_emscripten ' ]    asm [ ' _ sass_compile_emscripten ' ] ;
var steps = stepsDefaults ( sliderIn , sliderOut ) ; var visible:==:coerce ( ' visible ' , steps . length > 0 ) ;
var pattern = patterns [ i ] ; var regex:==:pattern . regex ;
var transformB = input . transformB ; var simplex:==:b2Distance . s_simplex ;
var t1h = t1h + Kih + ( ( t1l > > > 0 ) < ( Kil > > > 0 ) ? 1 : 0 ) ; var t1l:==:t1l + Wil ;
var oldValue = event . detail . oldValue ; var newValue:==:event . detail . newValue ;
var q = quadKey ; var t:==:tileInfo [ q ] ;
var width = viewport . width - ( margin . left + margin . right ) ; var height:==:viewport . height - ( margin . top + margin . bottom ) ;
var net = require ( ' net ' ) ; var ip:==:require ( ' ip ' ) ;
var fs = require ( ' fs ' ) ; var tls:==:require ( ' tls ' ) ;
var useNamedReferences = options . useNamedReferences ; var allowUnsafeSymbols:==:options . allowUnsafeSymbols ;
var xa = Axes . getFromId ( gd , trace . xaxis  |  |  ' x ' ) ; var ya:==:axes . getFromId ( gd , trace . yaxis  |  |  ' y ' ) ;
var context = this . _ context ; var canvas:==:context . canvas ;
var actions = scrollpane . find ( ' > . test - actions ' ) ; var name:==:context . find ( ' > . test - info . test - name ' ) ;
var babel = require ( ' gulp - babel ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var iconClassNameRight = _ props . iconClassNameRight ; var onLeftIconButtonTouchTap:==:_ props . onLeftIconButtonTouchTap ;
var recipient = message . recipient ; var type:==:message . type ;
var translate = language . set ( env . settings . language ) . translate ; var PORT:==:env . PORT ;
var o = this . _ options ; var w:==:Math . min ( Math . max ( obj . width , o . minWidth ) , o . maxWidth ) ;
var fs = require ( ' fs ' ) ; var assert:==:require ( ' assert ' ) ;
var vertices = this . vertices , worldVertices = this . worldVertices ; var bones:==:this . bones ;
var path = require ( ' path ' ) ; var nameFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' nameFieldTestObject ' ) ) ;
var beforeEach = mocha . beforeEach ; var it:==:mocha . it ;
var crunch = extras . compressedImage3dTiles . crunch ; var s3tc:==:extras . compressedImage3dTiles . s3tc ;
var i d = detail . i d ; var notification:==:notifications [ i d ] ;
var addHandler = this . addHandler ; var removeHandler:==:this . removeHandler ;
var layout = imports . layout ; var ui:==:imports . ui ;
var spawn = require ( ' child_process ' ) . spawn ; var exec:==:require ( ' child_process ' ) . exec ;
var width = this . props . width * this . props . scale ; var height:==:this . props . height * this . props . scale ;
var opening = wordRegexp ( openingKeywords ) ; var middle:==:wordRegexp ( middleKeywords ) ;
var babel = require ( ' babel - core ' ) ; var coffee:==:require ( ' coffee - script ' ) ;
var Keys = require ( ' Keys ' ) ; var secondaryClipboard:==:require ( ' secondaryClipboard ' ) ;
var querystring = require ( ' querystring ' ) ; var validator:==:require ( ' validator ' ) ;
var testModule = require ( ' nativeModules ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var notify = require ( ' gulp - notify ' ) ; var argv:==:require ( ' yargs ' ) . argv ;
var inherits = require ( ' util ' ) . inherits ; var smith:==:require ( ' smith ' ) ;
var techniques = gltf . techniques ; var materials:==:gltf . materials ;
var path = req . params . path ; var user:==:req . user ;
var reject = follower . _ rejectionHandlerAt ( index ) ; var progress:==:follower . _ progressHandlerAt ( index ) ;
var replace = require ( ' replace ' ) ; var exec:==:require ( ' child - process - promise ' ) . exec ;
var scrollWidth = iframeBody . scrollWidth ; var scrollHeight:==:iframeBody . scrollHeight ;
var sin = Math . sin ( v ) ; var cos:==:- Math . cos ( v ) ;
var y = -this . x * q1 . z + this . y * q1 . w + this . z * q1 . x + this . w * q1 . y ; var z:==:this . x * q1 . y - this . y * q1 . x + this . z * q1 . w + this . w * q1 . z ;
var spawn = require ( ' child_process ' ) . spawn ; var shelljs:==:require ( ' shelljs ' ) ;
var testLib    = fs . readFileSync ( testLibName , ' utf8 ' ) ; var jsdom:==:require ( ' jsdom - nogyp ' ) . jsdom ;
var scrollLeft = _ ref . scrollLeft ; var scrollTop:==:_ ref . scrollTop ;
var auth = imports . auth ; var nw:==:nativeRequire ( ' nw . gui ' ) ;
var animationEasing = animatableModel . getShallow ( ' animationEasing ' + postfix ) ; var animationDelay:==:animatableModel . getShallow ( ' animationDelay ' + postfix ) ;
var attr = props . attr ; var many:==:props . many ;
var extrude = polygonGeometry . _ extrude ; var polygonHierarchy:==:polygonGeometry . _ polygonHierarchy ;
var appearActiveClass = ref . appearActiveClass ; var beforeEnter:==:ref . beforeEnter ;
var y1 = pf ( node . getAttribute ( ' y1 ' ) )  |  |  pf ( node . getAttribute ( ' y ' ) )  |  |  ( pf ( node . getAttribute ( ' cy ' ) ) - pf ( node . getAttribute ( ' r ' ) ) )  |  |  0 ; var y2:==:pf ( node . getAttribute ( ' y2 ' ) )  |  |  ( y1 + pf ( node . getAttribute ( ' height ' ) ) )  |  |  ( pf ( node . getAttribute ( ' cy ' ) ) + pf ( node . getAttribute ( ' r ' ) ) )  |  |  0 ;
var keys = _ keys ( attrs ) ; var length:==:keys . length ;
var Q = new errorCorrectionLevel ( 2 , 0x03 , ' q ' ) ; var h:==:new errorCorrectionLevel ( 3 , 0x02 , ' h ' ) ;
var neighborsSignificance = this . neighborsSignificance ; var coefficentsMagnitude:==:this . coefficentsMagnitude ;
var layout = imports . layout ; var anims:==:imports . anims ;
var canvas = this . canvas ; var image:==:this . image ;
var eachline = require ( ' eachline ' ) ; var chalk:==:require ( ' chalk ' ) ;
var flatten = require ( ' gulp - flatten ' ) ; var gulp:==:require ( ' gulp ' ) ;
var slice = deletedIds . slice ; var concat:==:deletedIds . concat ;
var x = xy [ 0 ] ; var y:==:xy [ 1 ] ;
var borderRightWidth = parseFloat ( computedStyle . borderRightWidth . replace ( ' px ' , '' ) ) ; var borderLeftWidth:==:parseFloat ( computedStyle . borderLeftWidth . replace ( ' px ' , '' ) ) ;
var encode = require ( ' base64-encode ' ) ; var cors:==:require ( ' has - cors ' ) ;
var replace = require ( ' gulp - replace ' ) ; var webdriver:==:require ( ' gulp - webdriver ' ) ;
var b = this . b ; var n:==:this . n ;
var fnName = json . fnName ; var args:==:json . args ;
var points = spline . points ; var times:==:spline . times ;
var categoryPercentage = xScale . options . categoryPercentage ; var barPercentage:==:xScale . options . barPercentage ;
var crypto = require ( ' crypto ' ) ; var os:==:require ( ' os ' ) ;
var r = parseInt ( hex . substring ( 0,2 ) , 16 ) ; var g:==:parseInt ( hex . substring ( 2,4 ) , 16 ) ;
var subviews = this . subviews ; var defaults:==:this . model . get ( ' defaults ' )  |  |  [ ] ;
var fs    = require ( ' fs ' ) ; var stylus:==:require ( ' gulp - stylus ' ) ;
var cropBox = this . cropBox ; var aspectRatio:==:options . aspectRatio ;
var type = track . type ; var streamInfo:==:track . streamInfo ;
var label = div . appendChild ( document . createElement ( ' label ' ) ) ; var input:==:label . appendChild ( document . createElement ( ' input ' ) ) ;
var Keywords = traceur . syntax . Keywords ; var literalToken:==:traceur . syntax . literalToken ;
var top = parseFloat ( $ ( obj ) . offset ( ) . top ) + parseFloat ( obj . offsetHeight ) ; var left:==:parseFloat ( $ ( obj ) . offset ( ) . left ) ;
var isBool = sharedUtil . isBool ; var isDict:==:corePrimitives . isDict ;
var less = require ( ' less ' ) ; var async:==:require ( ' async ' ) ;
var extrude = ( defined ( extrudedHeight ) & & math . abs ( height - extrudedHeight ) > 1 . 0 ) ; var vertexFormat:==:defaultValue ( options . vertexFormat , vertexFormat . default ) ;
var dataLabelUtils = powerbi . visuals . dataLabelUtils ; var dataViewObjects:==:powerbi . dataViewObjects ;
var debug = utils . debug ; var error:==:debug ( ' A - Frame : error ' ) ;
var operand = this . transformAny ( left . operand ) ; var right:==:this . transformAny ( tree . right ) ;
var input = $ ( ' input . togetherjs - share - link ' ) ; var link:==:$ ( ' a . togetherjs - share - link ' ) ;
var left = this . createChar ( scale , ( delim . left |  | delim . rep ) , font ) ; var right:==:this . createChar ( scale , ( delim . right |  | delim . rep ) , font ) ;
var changelog = require ( ' gulp - conventional - changelog ' ) ; var tag:==:require ( ' gulp - tag - version ' ) ;
var scrollToIndex = _ props . scrollToIndex ; var style:==:_ props . style ;
var flipX = camera . flipX ? 1 : -1 ; var flipY:==:camera . flipY ? 1 : -1 ;
var CONTINUE_STATEMENT = ' CONTINUE_STATEMENT ' ; var COVER_FORMALS:==:' COVER_FORMALS ' ;
var yAxisPosition = powerbi . visuals . yAxisPosition ; var dataColorPalette:==:powerbi . visuals . dataColorPalette ;
var domEventPluginOrder = require ( ' domEventPluginOrder ' ) ; var enterLeaveEventPlugin:==:require ( ' enterLeaveEventPlugin ' ) ;
var path = require ( ' path ' ) ; var tmpdir:==:require ( ' os ' ) . tmpdir ( ) ;
var info = imports . info ; var analytics:==:imports [ ' c9 . analytics ' ] ;
var setAdmins = docSet . getByLongname ( ' setAdmins ' ) [ 0 ] ; var setWidgetAccess:==:docSet . getByLongname ( ' setWidgetAccess ' ) [ 0 ] ;
var lineWidth = params . lineWidth  |  |  1 ; var foldback:==:params . foldback  |  |  0 . 623 ;
var worldTransform = matrix  |  |  this . worldTransform ; var a:==:worldTransform . a ;
var origin = new URL ( evt . detail . url ) . origin ; var name:==:evt . detail . name ;
var semantic = child . getAttribute ( ' semantic ' ) ; var offset:==:parseInt ( child . getAttribute ( ' offset ' ) ) ;
var layout = geometry . layout ; var mesh:==:this . mesh ;
var models = _ _ alloyId28 . models ; var len:==:models . length ;
var t0 = Prim2DBase_1 . _ t0 ; var t1:==:Prim2DBase_1 . _ t1 ;
var distance = from . distanceTo ( hitPointWorld ) ; var result:==:this . result ;
var shadow = sharedUtil . shadow ; var stringTopdfString:==:sharedUtil . stringTopdfString ;
var binding = item . binding ; var command:==:item . command ;
var lineBreakAfterOpeningBrace = this . _ lineBreakAfterOpeningBrace ; var lineBreakBeforeClosingBrace:==:this . _ lineBreakBeforeClosingBrace ;
var p = body . position ; var m:==:body . mass ;
var b = this . b ; var n:==:b . length ;
var uglify = require ( ' gulp - uglify ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var index = event . detail . index ; var value:==:event . detail . value ;
var status = data . status ; var nodeStats:==:data . nodeStats ;
var richTextCodeMirror = firepad . richTextCodeMirror ; var richTextToolbar:==:firepad . richTextToolbar ;
var height = imgData . height ; var fillColor:==:current . fillColor ;
var codingStyleParameters = component . codingStyleParameters ; var quantizationParameters:==:component . quantizationParameters ;
var yearly = price . yearly . value * fx [ ccy ] . rate ; var monthly:==:price . monthly . value * fx [ ccy ] . rate ;
var backup_proxy_server_proc = unblock_youku . backup_proxy_server_proc ; var backup_proxy_server_addr:==:unblock_youku . backup_proxy_server_addr ;
var os = require ( ' os ' ) ; var winston:==:require ( ' winston ' ) ;
var prefix   = require ( ' gulp - autoprefixer ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var path = require ( ' path ' ) ; var crypto:==:require ( ' crypto ' ) ;
var LU = LUP . LU ; var n:==:LU . length ;
var util = imports [ ' collab . util ' ] ; var menus:==:imports . menus ;
var exports = file . metadata . modules . exports ; var declar:==:path . get ( ' declaration ' ) ;
var shape = area . shape . toLowerCase ( ) ; var coords:==:area . coords . split ( ' , ' ) ;
var availableWidth = nv . utils . availableWidth ( width , container , margin ) ; var availableHeight:==:nv . utils . availableHeight ( height , container , margin ) ;
var pre = pres . eq ( i ) ; var i d:==:pre . attr ( ' i d ' ) ;
var setDefaultTimeout = exports . setDefaultTimeout = proxySupportCode ( ' setDefaultTimeout ' ) ; var setDefinitionFunctionWrapper:==:exports . setDefinitionFunctionWrapper    proxySupportCode ( ' setDefinitionFunctionWrapper ' ) ;
var consequent = node . consequent ; var alternate:==:node . alternate ;
var actAsExpander = _ props . actAsExpander ; var children:==:_ props . children ;
var extrudedHeight = options . extrudedHeight ; var ellipsoid:==:options . ellipsoid ;
var fs     = require ( ' fs ' ) ; var cli:==:require ( ' cli ' ) ;
var impulse2   = this . impulse2 ; var length:==:options . length ;
var deepOrangea200 = exports . deepOrangea200 = ' # ff6e40 ' ; var deepOrangea400:==:exports . deepOrangea400    ' # ff3d00 ' ;
var defaults = wavEncoder . defaults ; var bytesPerSample:==:options . bytesPerSample  |  |  defaults . bytesPerSample ;
var option = options_1 [ _ i ] ; var displayName:==:option . displayName ( get : this . localize ) ;
var Plugin = imports . Plugin ; var net:==:imports . net ;
var body = params . body ; var parent:==:params [ ' parent ' ] ;
var dynCall_iiiddiiiiiiiiiii = Module [ ' dynCall_iiiddiiiiiiiiiii ' ] = asm [ ' dynCall_iiiddiiiiiiiiiii ' ] ; var dynCall_viiiiii:==:Module [ ' dynCall_viiiiii ' ]    asm [ ' dynCall_viiiiii ' ] ;
var checkOpen = this . _ checkOpen ; var checkClose:==:this . _ checkClose ;
var macRomanEncoding = coreEncodings . macRomanEncoding ; var symbolSetEncoding:==:coreEncodings . symbolSetEncoding ;
var key = $ target . data ( ' key ' ) ; var snippet:==:$ target . data ( ' snippet ' ) ;
var c9 = imports . c9 ; var tabManager:==:imports . tabManager ;
var stRotation = rectangle . stRotation ; var rotation:==:rectangle . rotation ;
var member = member_list [ j ] ; var type:==:member . getAttribute ( ' type ' ) ;
var minimize = options . minimize ; var htmlMinifier:==:options . htmlMinifier ;
var confirm = imports [ ' dialog . confirm ' ] . show ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var uglify = require ( ' gulp - uglify ' ) ; var chalk:==:require ( ' chalk ' ) ;
var minLines = this . _ minLines ; var exceptConditionals:==:this . _ exceptConditionals ;
var glyph = font . glyphs . get ( i ) ; var unicode:==:glyph . unicode  |  0 ;
var resolve = require ( ' path ' ) . resolve ; var send:==:require ( ' send ' ) ;
var a = new Date ( ) . getTime ( ) ; var c:==:qrcode . grayScaleToBitmap ( qrcode . grayscale ( ) ) ;
var ripples = _ state . ripples ; var prepareStyles:==:this . context . muiTheme . prepareStyles ;
var stringStream = coreStream . stringStream ; var lexer:==:coreParser . lexer ;
var ejs = require ( ' ejs ' ) ; var signedXml:==:require ( ' xml - crypto ' ) . signedXml ;
var test1 = chunks . createShaderFromCode ( device , chunks . fullscreenQuadvs , chunks . precisionTestps , ' ptest1 ' ) ; var test2:==:chunks . createShaderFromCode ( device , chunks . fullscreenQuadvs , chunks . precisionTest2ps , ' ptest2 ' ) ;
var items = this . _ items ; var itemsIndom:==:this . _ itemsIndom ;
var animation = UI . support . animation ; var transition:==:UI . support . transition ;
var valueFormatter = powerbi . visuals . valueFormatter ; var dataLabelUtils:==:powerbi . visuals . dataLabelUtils ;
var sinon   = require ( ' sinon ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var total = track . revenue ( )  |  |  track . total ( )  |  |  0 ; var orderId:==:track . orderId ( )  |  |  0 ;
var scmPanel = imports . scmPanel ; var settings:==:imports . settings ;
var cb = callbacks [ i ] . cb ; var fcb:==:callbacks [ i ] . fcb ;
var touch = require ( ' touch ' ) ; var crypto:==:require ( ' crypto ' ) ;
var a = a : b : ' B1 ' , c : ' C ' , y : ' Y ' ; var b:==:a : b : ' B2 ' , d : ' D ' , z : ' Z ' ;
var setFocusOutsideOfTable = window . setFocusOutsideOfTable ; var fakeGroupRow:==:window . fakeGroupRow ;
var orgName = options . orgName  |  |  '' ; var appName:==:options . appName  |  |  '' ;
var className = _ column$props . className ; var columnData:==:_ column$props . columnData ;
var http = require ( ' http ' ) ; var debug:==:require ( ' debug ' ) ( ' marionette - socket - host : request ' ) ;
var device = this . device ; var distortion:==:this . distortion ;
var leaveActiveClass = data . leaveActiveClass ; var beforeLeave:==:data . beforeLeave ;
var magnificationFilter = defaultValue ( options . magnificationFilter , textureMagnificationFilter . linear ) ; var maximumAnisotropy:==:( defined ( options . maximumAnisotropy ) ) ? options . maximumAnisotropy : 1 . 0 ;
var tipLabel = options . tipLabel ? options . tipLabel : ' reset rotation ' ; var button:==:document . createElement ( ' button ' ) ;
var Modifiers = goog . ui . keyboardShortcutHandler . modifiers ; var keyCodes:==:goog . events . keyCodes ;
var params = options . params  |  |  [ ] ; var headers:==:options . headers  |  |  [ ] ;
var session = require ( ' express - session ' ) ; var compression:==:require ( ' compression ' ) ;
var color = node . getAttribute ( ' color ' ) ; var size:==:fontSizeMappings [ node . getAttribute ( ' size ' ) ] ;
var cleanup = this . newBlock ( ' for cleanup ' ) ; var end:==:this . newBlock ( ' for end ' ) ;
var switchStatement = traceur . syntax . trees . switchStatement ; var throwStatement:==:traceur . syntax . trees . throwStatement ;
var debug = options . debug ! = = undefined ? options . debug : false ; var collab:==:options . collab ;
var clientLeft = b . clientLeft ; var offsetWidth:==:b . offsetWidth ;
var altDecimal = $ . data ( this , ' numeric . altDecimal ' ) ; var key:==:e . charCode ? e . charCode : e . keyCode ? e . keyCode : 0 ;
var cancel = client . helper . waitForElement ( ' # ctx - cancel - button ' ) ; var menu:==:client . helper . waitForElement ( ' . appWindow . active . contextmenu ' ) ;
var currentStyles = _ state . currentStyles ; var currentVelocities:==:_ state . currentVelocities ;
var fs = require ( ' fs ' ) ; var chai:==:require ( ' chai ' ) ;
var end = $ end . datepicker ( ' getDate ' ) ; var start:==:$ start . datepicker ( ' getDate ' ) ;
var url = Npm . require ( ' url ' ) ; var crypto:==:Npm . require ( ' crypto ' ) ;
var scrollTop = $ window . scrollTop ( ) ; var scrollLeft:==:$ window . scrollLeft ( ) ;
var caption = block . attr ( ' caption ' ) ; var align:==:block . attr ( ' align ' ) ;
var before = method . isStatic ? beforeListeners : beforeListeners [ ' prototype ' ] ; var after:==:method . isStatic ? afterListeners : afterListeners [ ' prototype ' ] ;
var u = b . y . toBigInteger ( ) . multiply ( this . z ) . subtract ( this . y . toBigInteger ( ) . multiply ( b . z ) ) . mod ( this . curve . q ) ; var v:==:b . x . toBigInteger ( ) . multiply ( this . z ) . subtract ( this . x . toBigInteger ( ) . multiply ( b . z ) ) . mod ( this . curve . q ) ;
var scheduler = instance . get ( ' scheduler ' ) ; var todayDate:==:scheduler . get ( ' todayDate ' ) ;
var visualDataView = visualdataviews_1 [ _ i ] ; var regressionDataView:==:this . linearRegressionTransform ( visualDataView , dataRoles , regressionDataViewMapping , objectDescriptors , objectDefinitions , colorAllocatorFactory ) ;
var Tree = imports . Tree ; var Menu:==:imports . Menu ;
var dynCall_viiiii = Module [ ' dynCall_viiiii ' ] = asm [ ' dynCall_viiiii ' ] ; var dynCall_vi:==:Module [ ' dynCall_vi ' ]    asm [ ' dynCall_vi ' ] ;
var documentURI = item . data . documentURI ; var uri:==:item . data . uri ;
var argv = require ( ' optimist ' ) . argv ; var q:==:require ( ' q ' ) ;
var state = _ props2 . state ; var activeClassName:==:_ props2 . activeClassName ;
var detect = kendo . support . detectOS ; var detectBrowser:==:kendo . support . detectBrowser ;
var leftCurlyCount = this . scanner . leftCurlyCount ; var rightCurlyCount:==:this . scanner . rightCurlyCount ;
var createAssignmentExpression = parseTreeFactory . createAssignmentExpression ; var createBlock:==:parseTreeFactory . createBlock ;
var wrapsPrimitiveReceiver = util . wrapsPrimitiveReceiver ; var isPrimitive:==:util . isPrimitive ;
var options = mod . options ; var isVirtual:==:mod . isVirtual ;
var PDF = goog . i18n . bidi . Format . PDF ; var LTR:==:goog . i18n . bidi . Dir . LTR ;
var viewportHeight = priv . viewportHeight ; var horizontalScrollbarHeight:==:priv . horizontalScrollbarHeight  |  |  0 ;
var fontType = fontType  |  |  ' helvetica ' ; var textColorFreq:==:textColorFreq  |  |  ' # fff ' ;
var fs = require ( ' fs ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var right = path . get ( ' right ' ) . resolve ( ) ; var left:==:path . get ( ' left ' ) . resolve ( ) ;
var b = cd [ 0 ] . b ; var contours:==:trace . contours ;
var entityManager = saveContext . entityManager ; var helper:==:entityManager . helper ;
var first = Math . min ( this . firstRow , config . firstRow ) ; var last:==:math . max ( this . lastRow , config . lastRow , lineWidgets . length ) ;
var t = new Object ( this ) ; var len:==:t . length > > > 0 ;
var predefinedName = traceur . syntax . predefinedName ; var program:==:traceur . syntax . trees . program ;
var clock = spherical . clock ; var cone:==:spherical . cone ;
var records = $ ( ' # grid_'+ this . name + ' _ records ' ) ; var len:==:this . last . searchIds . length ;
var status = $ ( ' # status ' ) . val ( ) ; var body:==:$ ( ' # body ' ) . val ( ) ;
var hasOwnProperty = _ _ webpack_require _ _ ( 5 ) . hasOwnProperty ; var map:==:_ _ webpack_require _ _ ( 3 ) . map ;
var change = ' change- ' + dirType ; var classEvent:==:vdom . classEvent ;
var granularity = defaultValue ( options . granularity , cesiumMath . radians_per_degree ) ; var stRotation:==:defaultValue ( options . stRotation , 0 . 0 ) ;
var run = test . runId ( ) ; var coll:==:new mongo . collection ( ' observeLimit-'+run , collectionOptions ) ;
var Object = platform . Object ; var regExp:==:platform . regExp ;
var canvas = createElement ( ' canvas ' ) ; var supports:==:' probablySupportsContext ' in canvas ? ' probablySupportsContext ' : ' supportsContext ' ;
var f8SessionCell = require ( ' f8SessionCell ' ) ; var react:==:require ( ' react ' ) ;
var dataBoundWidget = kendo . ui . dataBoundWidget ; var class:==:kendo . class ;
var VARIABLE_DECLARATION_LIST = ' VARIABLE_DECLARATION_LIST ' ; var VARIABLE_STATEMENT:==:' VARIABLE_STATEMENT ' ;
var dots = this . dots = options . dots ; var dotLabels:==:options . dotLabels ;
var notebookId = $ ( this ) . attr ( ' notebookId ' ) ; var notebook:==:notebook . cache [ notebookId ] ;
var position = Cartesian3 . fromArray ( positions , i ) ; var normal:==:cartesian3 . fromArray ( normals , i ) ;
var appsService = _ appJsServicesAppsService [ ' default ' ] ; var broadcastService:==:_ appJsServicesBroadcastService [ ' default ' ] ;
var animationModel = symbolMeta . animationModel ; var dataIndex:==:symbolMeta . dataIndex ;
var properties = childProps [ ' properties ' ] ; var debuggerOnlyProperties:==:childProps [ ' debuggerOnlyProperties ' ] ;
var canonicalizeUrl = traceur . util . canonicalizeUrl ; var resolveUrl:==:traceur . util . resolveUrl ;
var cache = context . cache ; var registerComponent:==:registerComponentForCache ( ctor . options , write ) ;
var NAV = exports . NAV = _ window2 . default . navigator ; var UA:==:exports . UA    NAV . userAgent . toLowerCase ( ) ;
var utc = time . utc ; var tzid:==:time . tzid ;
var context = this . context ; var width:==:this . layer . width ;
var http = require ( ' http ' ) ; var Emitter:==:require ( ' events ' ) . eventEmitter ;
var kendo = global . kendo ; var caret:==:kendo . caret ;
var rotation = metadata . rotation  |  |  0 ; var mirrored:==:metadata . mirrored  |  |  false ;
var i d = _ getAttribute ( element , ' i d ' ) ; var endpoints:==:endpointsByElement [ i d ] ;
var alert = imports [ ' dialog . alert ' ] . show ; var question:==:imports [ ' dialog . question ' ] . show ;
var hasHighlights = data . hasHighlights ; var margin:==:this . margin ;
var height = this . _ $ element . data ( ' height ' )  |  |  560 ; var disableExternalCheck:==:this . _ $ element . data ( ' disableExternalCheck ' )  |  |  false ;
var View = require ( ' View ' ) ; var touchableWithoutFeedback:==:require ( ' touchableWithoutFeedback ' ) ;
var el = this . el ; var obj:==:this . obj ;
var createStringLiteral = parseTreeFactory . createStringLiteral ; var options:==:traceur . options . transform ;
var portPreference = response . options . portPreference ; var baudratePreference:==:response . options . baudratePreference ;
var filter = zrUtil . filter ; var map:==:zrUtil . map ;
var options = fabric . util . object . extend ( ( options ? fabric . util . object . clone ( options ) : ) , parsedAttributes ) ; var text:==:new fabric . text ( element . textContent , options ) ;
var editorState = require ( ' editorState ' ) ; var userAgent:==:require ( ' userAgent ' ) ;
var hasOwnProperty = object . prototype . hasOwnProperty ; var iteratedString:==:symbol ( ' iteratedString ' ) ;
var offset = editable . obj . offset ( ) ; var top:==:offset . top ;
var template = this . options . get ( ' templateSelection ' ) ; var escapeMarkup:==:this . options . get ( ' escapeMarkup ' ) ;
var uvPositionBuffer = this . _ uvPositionBuffer ; var alphaBuffer:==:this . _ alphaBuffer ;
var rowBytes = this . rowBytes ; var pixBytes:==:this . pixBytes ;
var domProperty = require ( ' domProperty ' ) ; var changeEventPlugin:==:require ( ' changeEventPlugin ' ) ;
var width = billboard . width ; var height:==:billboard . height ;
var syntheticKeyboardEvent = require ( ' syntheticKeyboardEvent ' ) ; var syntheticMouseEvent:==:require ( ' syntheticMouseEvent ' ) ;
var top = Math . max ( rect . top * zoomFactor + this . _ margins . top , bodyRect . top * zoomFactor ) ; var bottom:==:math . min ( rect . bottom * zoomFactor - this . _ margins . bottom , bodyRect . bottom * zoomFactor ) ;
var getCharacterRemovalRange = require ( ' getCharacterRemovalRange ' ) ; var getContentStateFragment:==:require ( ' getContentStateFragment ' ) ;
var createPath = leafletPathsHelpers . createPath ; var bindPathEvents:==:leafletPathEvents . bindPathEvents ;
var url = require ( ' url ' ) ; var winston:==:require ( ' winston ' ) ;
var originalSize = spriteFrame . _ originalSize ; var rect:==:spriteFrame . _ rect ;
var workspace = debuggerWorkspaceBinding . _ workspace ; var networkMapping:==:debuggerWorkspaceBinding . _ networkMapping ;
var maxForce = typeof ( options . maxForce ) ! = = ' undefined ' ? options . maxForce : 1e6 ; var pivota:==:options . pivota ? options . pivota . clone ( ) : new vec3 ( ) ;
var timestamp = options . timestamp  |  |  Utils . nowSecs ( options . localtimeOffsetMsec ) ; var credentials:==:options . credentials ;
var store = new datastore ( tests . data . readOnlyItemFileTestTemplates . getTestData ( ' countries_withboolean ' ) ) ; var d:==:new doh . deferred ( ) ;
var width = hasWidth ? contentSize . width : 0 ; var height:==:hasHeight ? contentSize . height : 0 ;
var td = createElement ( ' td ' ) ; var label:==:createElement ( ' label ' ) ;
var projectId = self . configuration _ [ ' projectId ' ] ; var version:==:self . configuration _ [ ' version ' ] ;
var p = particle . position ; var n:==:this . options . normal ;
var video2 = document . querySelector ( ' video#video2 ' ) ; var startButton:==:document . querySelector ( ' button#startButton ' ) ;
var Cmd = corePrimitives . cmd ; var dict:==:corePrimitives . dict ;
var exactCandidates = rd . exactCandidates ; var conversionCandidates:==:rd . conversionCandidates ;
var forEach = angular . forEach ; var selectors:==:$ animateProvider . $ $ selectors ;
var indigo900 = exports . indigo900 = ' # 1a237e ' ; var indigoA100:==:exports . indigoA100    ' # 8c9eff ' ;
var ot = util . Module ( ' ot ' ) ; var assert:==:util . assert ;
var name = this . find ( ' [ data - name ] ' ) . val ( ) ; var url:==:this . find ( ' [ data - url ] ' ) . val ( ) ;
var Tag = hexo . model ( ' Tag ' ) ; var Category:==:hexo . model ( ' Category ' ) ;
var nodes = option . data  |  |  option . nodes ; var matrix:==:option . matrix ;
var instance = hello ( ' instance ' ) ; var descendent:==:instance . use ( ' descendent ' ) ;
var removeClass = _ tetherBase$Utils . removeClass ; var updateClasses:==:_ tetherBase$Utils . updateClasses ;
var decimalPlaces = $ . data ( this , ' numeric . decimalPlaces ' ) ; var key:==:e . charCode ? e . charCode : e . keyCode ? e . keyCode : 0 ;
var noteOrNotebookId = $ ( this ) . attr ( ' noteOrNotebookId ' ) ; var toUserId:==:$ ( this ) . attr ( ' toUserId ' ) ;
var setup = device . setup ; var preread:==:device . preread ;
var nconf = require ( ' nconf ' ) ; var util:==:require ( ' util ' ) ;
var gulp = require ( ' gulp ' ) ; var prompt:==:require ( ' gulp - prompt ' ) ;
var boneMatrices = this . boneMatrices ; var boneTexture:==:this . boneTexture ;
var mode = args . mode  |  |  Constants . RESERVED . CLUSTER ; var masterha:==:args . masterha  |  |  ' false ' ;
var column = _ ref4 . column ; var columnIndex:==:_ ref4 . columnIndex ;
var status = transport . status ; var response:==:transport . responseText ;
var casper = require ( ' casper ' ) . create ( viewportSize : width : 1600,height : 900 ) ; var args:==:casper . cli . args ;
var loadingImagery = this . loadingImagery ; var imageryLayer:==:loadingImagery . imageryLayer ;
var originalScale = this . _ originalScale ; var extent:==:this . _ extent ;
var trim = ! helper . isFalse ( element . data ( ' trim ' ) ) ; var split:==:element . data ( ' split ' ) ;
var memberGroups = this . props . memberGroups ; var doc:==:def . doc  |  |  ;
var startParam = firstDefined ( source . startParam , t . opt ( ' startParam ' ) ) ; var endParam:==:firstDefined ( source . endParam , t . opt ( ' endParam ' ) ) ;
var request = require ( ' request ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var contactPicker = contacts . contactPicker ; var contactFieldType:==:contacts . contactFieldType ;
var DELIMITERS = SVG . FONTDATA . DELIMITERS ; var H:==:' H ' , V    ' V ' ;
var fs   = require ( ' fs ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var output = argv . output ; var device:==:argv . device  |  |  ' iPhone6 + ' ;
var sqrt = stdlib . Math . sqrt ; var pow:==:stdlib . Math . pow ;
var mongo = require ( ' mongodb ' ) ; var objectId:==:schema . types . objectId ;
var lat = parseFloat ( readCookie ( ' ingress . intelmap . lat ' ) )  |  |  0 . 0 ; var lng:==:parseFloat ( readCookie ( ' ingress . intelmap . lng ' ) )  |  |  0 . 0 ;
var dataType = options . dataType  |  |  ' text ' ; var suc:==:options . success  |  |  emptyFn ;
var bgnodes = DOM . getNodeArray ( options . bgnodes ) ; var stylenodes:==:dom . getNodeArray ( options . stylenodes ) ;
var domMouseMoveTracker = require ( ' domMouseMoveTracker ' ) ; var keys:==:require ( ' keys ' ) ;
var iconHelper = _ jsLibHelpers . iconHelper ; var listModel:==:_ jsModelListModel [ ' default ' ] ;
var i d = PUSH . i d ; var cacheForwardStack:==:json . parse ( cacheMapping . cacheForwardStack  |  |  ' [ ] ' ) ;
var normal = options . normal  |  |  BABYLON . Vector3 . Up ( ) ; var size:==:options . size  |  |  new BABYLON . Vector3 ( 1 , 1 , 1 ) ;
var test = helper . test ; var PORT:==:process . env . UNIT_TEST_PORT  |  |  0 ;
var arrive = this . arrive ( this . target ) ; var mouse:==:createVector ( mousex , mousey ) ;
var y = Math . floor ( bb . y1 ) ; var width:==:Math . floor ( bb . width ( ) ) ;
var bar = bar`wow\nab$ 42 $ _ . foobar ( ) ` ; var bar:==:bar`wow\naB$ 42 $ _ . baz ( ) ` ;
var msg = msgDatas [ i ] ; var from:==:msg . from ;
var dirname = require ( ' path ' ) . dirname ; var async:==:require ( ' async ' ) ;
var width = chatspace . width ( ) ; var chat:==:$ ( ' # chatconversation ' ) ;
var arrayLiteralExpression = traceur . syntax . trees . arrayLiteralExpression ; var arrayPattern:==:traceur . syntax . trees . arrayPattern ;
var spawnSync = require ( ' child_process ' ) . spawnSync ; var streamqueue:==:require ( ' streamqueue ' ) ;
var headers = options . headers  |  |  ; var body:==:options . body  |  |  ' ' ;
var x = array [ startingIndex ] ; var y:==:array [ startingIndex + 1 ] ;
var cellSizeAndPositionGetter = _ props . cellSizeAndPositionGetter ; var sectionSize:==:_ props . sectionSize ;
var req = this . req ; var method:==:req . method ;
var chunks = diffView . chunks ; var i:==:findChunkIndex ( chunks , row , region . side     -1 ) ;
var doc = bot . getWindow ( ) . document ; var body:==:doc . body ;
var Event = db . model ( ' gh4073_3 ' , eventSchema ) ; var userEvent:==:event . discriminator ( ' user4073 ' , userEventSchema ) ;
var p = this . protoStrategy ; var inj:==:this . injector ;
var position = vertex . position ; var positionWorld:==:vertex . positionWorld ;
var origin = ray . origin ; var direction:==:ray . direction ;
var i d = ids [ i ] ; var edge:==:edges [ i d ] ;
var spawn = require ( ' child_process ' ) . spawn ; var chalk:==:require ( ' chalk ' ) ;
var show = powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . treemapProps . legend . show , this . legend . isVisible ( ) ) ; var showTitle:==:powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . treemapProps . legend . showTitle , true ) ;
var mediaType = getValue ( options . mediaType , camera . mediaType . picture ) ; var allowEdit:==:! ! options . allowEdit ;
var spawn = require ( ' child_process ' ) . spawn ; var rimraf:==:require ( ' rimraf ' ) ;
var concat   = require ( ' gulp - concat ' ) ; var notify:==:require ( ' gulp - notify ' ) ;
var jsep = callbacks . jsep ; var pluginHandle:==:pluginHandles [ handleId ] ;
var options = that . options ; var dataSource:==:options . dataSource  |  |  ;
var debug = require ( ' debug ' ) ( ' nodemon ' ) ; var util:==:require ( ' util ' ) ;
var scriptSourceDefault = scriptMapping . scriptSourceDefault ; var scriptProviderDefault:==:scriptMapping . scriptProviderDefault ;
var bind = _ dereq _ ( ' component - bind ' ) ; var debug:==:_ dereq _ ( ' debug ' ) ( ' socket . io - client : socket ' ) ;
var styleSheet = require ( ' styleSheet ' ) ; var tabBarItemios:==:require ( ' tabBarItemios ' ) ;
var isStartish = eventPluginUtils . isStartish ; var isEndish:==:eventPluginUtils . isEndish ;
var lookup = FS . lookupPath ( path , follow : ! dontFollow ) ; var node:==:lookup . node ;
var payloadInfo = this . _ payloadInfo ; var axisModel:==:this . _ axisModel ;
var Contact = Contacts . Contact ; var contactAddress:==:contacts . contactAddress ;
var STATUS_ERROR    = exports . STATUS_ERROR    = -1 ; var STATUS_INACTIVE:==:exports . STATUS_INACTIVE     0 ;
var matchesNames = scope . matchesNames ; var mixin:==:scope . mixin ;
var element = this . element ; var parent:==:this . element . _ parent ;
var ui = imports . ui ; var vfs:==:imports . vfs ;
var callbacksLast = configuration . callbacksLast  |  |  false ; var ignoreCase:==:configuration . ignoreCase  |  |  false ;
var opts = _ _ alloyId35 . opts  |  |  ; var models:==:_ _ alloyId34 . models ;
var normal = intersectConvex_normal ; var vertices:==:this . vertices ;
var startPoint = copyPoint ( selection . startPoint ) ; var endPoint:==:copyPoint ( selection . endPoint ) ;
var name = Ctor . options . name ; var cache:==:context . cache ;
var maxIterations = retrieve ( options . maxIterations , 2 ) ; var minChar:==:retrieve ( options . minChar , 0 ) ;
var isInteger = _ _ webpack_require _ _ ( 2 ) . isInteger ; var isNumber:==:_ _ webpack_require _ _ ( 2 ) . isNumber ;
var debug = require ( ' debug ' ) ( ' loopback : security : role ' ) ; var assert:==:require ( ' assert ' ) ;
var parseTreeTransformer = traceur . codegeneration . parseTreeTransformer ; var createArgumentList:==:traceur . codegeneration . parseTreeFactory . createArgumentList ;
var receiver = ast . receiver . visit ( this ) ; var args:==:this . _ visitAll ( ast . args ) ;
var value = entry [ valueField ] ; var latlng:==:entry . latlng ;
var isValidNewOption = _ props2 . isValidNewOption ; var options:==:_ props2 . options ;
var addEventListener = eventTool . addEventListener ; var removeEventListener:==:eventTool . removeEventListener ;
var height = props . height ; var width:==:props . width ;
var s = String . format . apply ( String , Array . prototype . slice . call ( arguments , 1 ) ) ; var m:==:Ext . domHelper . append ( msgCt , html : createBox ( title , s ) , true ) ;
var collections = this . _ collections ; var composite:==:this . _ composite ;
var index = parseInt ( $ li . attr ( ' data - interaction - index ' ) , 10 ) ; var interaction:==:that . interactions [ index ] ;
var mode = this . _ mode ; var globe:==:scene . globe ;
var lightBlue500 = exports . lightBlue500 = ' # 03a9f4 ' ; var lightBlue600:==:exports . lightBlue600    ' # 039be5 ' ;
var base = this . base ; var numComps:==:base . numComps ;
var jsep = callbacks . jsep ; var media:==:callbacks . media ;
var layout = imports . layout ; var http:==:imports . http ;
var moveFromRow = settings . moveFromRow ; var moveFromCol:==:settings . moveFromCol ;
var events = require ( ' events ' ) ; var utils:==:require ( ' utils ' ) ;
var title = ' topup - incorrectcode - title2 ' ; var message:==:' topup - incorrectcode - message3 ' ;
var regex_allowed = S . regex_allowed ; var i:==:find ( ' \n ' ) , ret ;
var mode = l . pm2_env . exec_mode ; var status:==:l . pm2_env . status ;
var dynCall_ii = Module [ ' dynCall_ii ' ] = asm [ ' dynCall_ii ' ] ; var dynCall_viidd:==:Module [ ' dynCall_viidd ' ]    asm [ ' dynCall_viidd ' ] ;
var predefinedName = traceur . syntax . predefinedName ; var token:==:traceur . syntax . token ;
var target = this . _ target ( ) ; var bitField:==:target . _ bitField ;
var reactControlledValuePropTypes = require ( ' reactControlledValuePropTypes ' ) ; var reactMarkupChecksum:==:require ( ' reactMarkupChecksum ' ) ;
var scheme = uriInfo . scheme ; var authority:==:uriInfo . authority ;
var util = require ( ' util ' ) ; var binding:==:process . binding ( ' fs ' ) ;
var positions = simplePolylineGeometry . _ positions ; var colors:==:simplePolylineGeometry . _ colors ;
var file = links [ i ] . file ; var url:==:links [ i ] . url ;
var panelWithSidebar = declareInterfaceClass ( panelWithSidebarImpl ) ; var request:==:declareInterfaceClass ( requestImpl ) ;
var first = document . getElementById ( ' first ' ) . firstChild ; var last:==:document . getElementById ( ' last ' ) . firstChild ;
var contactManager = contacts . contactManager ; var contact:==:contacts . contact ;
var createThrowStatement = parseTreeFactory . createThrowStatement ; var createTryStatement:==:parseTreeFactory . createTryStatement ;
var draw = compiled . draw ; var batch:==:compiled . batch ;
var path = require ( ' path ' ) ; var spawnSync:==:require ( ' child_process ' ) . spawnSync ;
var carbs = treatment . carbs  |  |  CR ; var insulin:==:treatment . insulin  |  |  1 ;
var head = sel . head ; var anchor:==:sel . anchor ;
var expr = this . expr ; var node:==:this . node ;
var isStartIncluded = options . isStartIncluded ; var isStopIncluded:==:options . isStopIncluded ;
var comments = ret . comments ; var commentUserInfo:==:ret . commentUserInfo ;
var error_description = _ ref . error_description ; var error_uri:==:_ ref . error_uri ;
var spawn = require ( ' child_process ' ) . spawn ; var assert:==:require ( ' assert ' ) ;
var type = conf . type ; var size:==:+ conf . size ;
var dynCall_iiii = Module [ ' dynCall_iiii ' ] = asm [ ' dynCall_iiii ' ] ; var dynCall_viiiiiiiiiiiiiii:==:Module [ ' dynCall_viiiiiiiiiiiiiii ' ]    asm [ ' dynCall_viiiiiiiiiiiiiii ' ] ;
var createFunctionDeclaration = traceur . codegeneration . parseTreeFactory . createFunctionDeclaration ; var createIdentifierExpression:==:traceur . codegeneration . parseTreeFactory . createIdentifierExpression ;
var radi = data . radi ; var data:==:data . data ;
var spy = sinon . spy ( ) ; var marker:==:L . marker ( [ 0 , 0 ] ) . addTo ( map ) ;
var t = this ; var doc:==:t . node ? t . node . ownerDocument : document ;
var customFilter = $ animateProvider . customFilter ( ) ; var classNameFilter:==:$ animateProvider . classNameFilter ( ) ;
var utils = require ( ' utils ' ) ; var system:==:require ( ' system ' ) ;
var ids = ob . ids ; var dates:==:ob . dates ;
var _ im_delsearch = Module [ ' _ im_delsearch ' ] = asm [ ' _ im_delsearch ' ] ; var _ strcpy:==:Module [ ' _ strcpy ' ]    asm [ ' _ strcpy ' ] ;
var source = require ( ' vinyl - source - stream ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var width = toolboxRect . width ; var height:==:toolboxRect . height ;
var warn = sharedUtil . warn ; var isName:==:corePrimitives . isName ;
var dynCall_viiiiii = Module [ ' dynCall_viiiiii ' ] = asm [ ' dynCall_viiiiii ' ] ; var dynCall_iii:==:Module [ ' dynCall_iii ' ]    asm [ ' dynCall_iii ' ] ;
var opts = _ _ alloyId12 . opts  |  |  ; var models:==:_ _ alloyId11 . models ;
var group = $ group : _ i d : null , maxAge : $ max : ' $ age ' ; var project:==:$ project : maxAge : 1 , _ i d : 0 ;
var email = $ ( ' # email ' ) ; var username:==:$ ( ' # username ' ) ;
var el = renderSettings . el ; var holderSettings:==:renderSettings . holderSettings ;
var dynCall_viiiiiid = Module [ ' dynCall_viiiiiid ' ] = asm [ ' dynCall_viiiiiid ' ] ; var dynCall_viiiiiiiii:==:Module [ ' dynCall_viiiiiiiii ' ]    asm [ ' dynCall_viiiiiiiii ' ] ;
var system = require ( ' system ' ) ; var page:==:require ( ' webpage ' ) . create ( ) ;
var d = data [ i ] ; var parents:==:d . parents ? d . parents . split ( ' ' ) : [ ] ;
var format = require ( ' util ' ) . format ; var assert:==:require ( ' assert - diff ' ) ;
var fov = this . fov ; var aspect:==:this . cameraP . aspect ;
var extsprintf = require ( ' extsprintf ' ) ; var fs:==:require ( ' fs ' ) ;
var onRowDoubleClick = _ ref . onRowDoubleClick ; var onRowMouseOver:==:_ ref . onRowMouseOver ;
var o = options  |  |  ; var div:==:document . createElement ( ' div ' ) ;
var validateSort = localUtils . validateSort ; var reverseOptions:==:localUtils . reverseOptions ;
var initials = scores [ k ] . initials ; var score:==:scores [ k ] . score ;
var hideBackdropAnimation = animation . hideBackdropAnimation ; var showContentAnimation:==:animation . showContentAnimation ;
var ca = ( cert . purposes . indexOf ( ' ca ' ) ! = = -1 ) ; var pathLen:==:exts [ i ] . pathLen ;
var noop = angular . noop ; var forEach:==:angular . forEach ;
var webpack = require ( ' webpack ' ) ; var path:==:require ( ' path ' ) ;
var test = require ( ' tap ' ) . test ; var shasum:==:require ( ' shasum ' ) ;
var assert = require ( ' assert - diff ' ) ; var path:==:require ( ' path ' ) ;
var hz = Piezo . Parsers . hzFromInput ( note ) ; var beat:==:piezo . parsers . beatFromNote ( note ) ;
var f = new Backbone . Model ( i d : 20 , label : ' f ' ) ; var g:==:new Backbone . Model ( i d : 21 , label : ' g ' ) ;
var west = rectangle . west ; var east:==:rectangle . east ;
var transition = currentView . transition ; var next:==:document . getElementById ( nextView . view ) ;
var prefix = kTransforms [ transform ] . prefix ; var suffix:==:kTransforms [ transform ] . suffix ;
var default_url = options . default_url  |  |  false ; var loading_icon:==:options . loading_icon  |  |  ' fa - spinner fa-2x orange ' ;
var textMeasurementService = powerbi . textMeasurementService ; var labelTextProperties:==:powerbi . visuals . dataLabelUtils . labelTextProperties ;
var children = _ props . children ; var style:==:_ props . style ;
var status = group . status  |  |  '' ; var contact:==:group . contact ;
var visitor = visitors [ i ] ; var state:==:states [ i ] ;
var x1 = line . x1 + dx + 0*c*cosAngle ; var y1:==:line . y1 + dy + 0*c*sinAngle ;
var index = this . getAttribute ( ' data - bb - index ' ) ; var select:==:this . dropdown . getElementsByTagName ( ' select ' ) [ 0 ] ;
var grey800 = exports . grey800 = ' # 424242 ' ; var grey900:==:exports . grey900    ' # 212121 ' ;
var node = exp . node  |  |  exp . attribute . node ; var watchers:==:node . template . watchers ;
var svgdomPropertyConfig = require ( ' svgdomPropertyConfig ' ) ; var selectEventPlugin:==:require ( ' selectEventPlugin ' ) ;
var sizeY = options . sizeY  |  |  size  |  |  1 ; var sizeZ:==:options . sizeZ  |  |  size  |  |  1 ;
var dict = data . sys . dict ; var protos:==:data . sys . protos ;
var readdir = fs . readdir . bind ( fs ) ; var readdirSync:==:fs . readdirSync . bind ( fs ) ;
var content = data . content . toString ( ) ; var timestamp:==:data . timestamp  |  |  date . now ( ) ;
var contactPhoneKind = contacts . contactPhoneKind ; var contactCardOptions:==:contacts . contactCardOptions ;
var list = new fastList ( listContainer , source ) ; var dialog:==:document . querySelector ( ' gaia - dialog - alert ' ) ;
var width = that . imageObj . width ( ) ; var height:==:that . imageObj . height ( ) ;
var faceUV = options . faceUV  |  |  new Array ( nbfaces ) ; var faceColors:==:options . faceColors ;
var exportView = scope . entity . exportView ( ) ; var listView:==:scope . entity . listView ( ) ;
var updatersWithAttributes = this . updatersWithAttributes . values ; var length:==:updatersWithAttributes . length ;
var belongsTo = ds . belongsTo ; var hash:==:ember . rsvp . hash ;
var floor = Math . floor ; var fromCharCode:==:string . fromCharCode ;
var selectable = that . options . selectable ; var selectedIndices:==:that . _ selectedIndices ;
var ui = imports . ui ; var test:==:imports . test ;
var objectDescriptors = options . objectDescriptors ; var objectDefinitions:==:options . objectDefinitions ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var createArgumentList:==:parseTreeFactory . createArgumentList ;
var currentFrameIndex = playData . currentFrameIndex ; var height:==:viewport . height ;
var   COPY = 16 ; var   TABLE:==:17 ;
var width = layoutInfo . width ; var height:==:layoutInfo . height ;
var y = sphere . center . y - this . origin . y ; var z:==:sphere . center . z - this . origin . z ;
var y = node . _ y ; var width:==:node . width  |  |  0 ;
var computeDateTop = t . computeDateTop ; var getIsCellAllDay:==:t . getIsCellAllDay ;
var len = list . length ; var i:==:d + _ . indexOf ( list , current ( ) ) ;
var keys = keysFunc ( source ) ; var l:==:keys . length ;
var logItemElt = logItemElts [ i ] ; var timestamp:==:logItemElt . getAttribute ( ' data - timestamp ' ) ;
var order = ( options & & options . order )  |  |  '' ; var query:==:( options & & options . query )  |  |  '' ;
var yieldState = traceur . codegeneration . generator . yieldState ; var stateMachine:==:traceur . syntax . trees . stateMachine ;
var node = options . node ; var ellipsisCharacter:==:options . ellipsisCharacter  |  |  ' . . . ' ;
var geometry = getGeometry ( data . geometry ) ; var material:==:getMaterial ( data . material ) ;
var isNW = platformInfo . isnw ; var isChromeApp:==:platformInfo . isChromeApp ;
var dy = Math . min ( h - 10 , Math . max ( 10 , h * Math . max ( 0 , Math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' dy ' , this . dy ) ) ) ) ) ) ; var fillColor:==:mxUtils . getValue ( this . style , ' fillColor ' , ' # ffffff ' ) ;
var teal500 = exports . teal500 = ' # 009688 ' ; var teal600:==:exports . teal600    ' # 00897b ' ;
var imageStylePropTypes = require ( ' imageStylePropTypes ' ) ; var textStylePropTypes:==:require ( ' textStylePropTypes ' ) ;
var app = this . _ apps [ index ] ; var manifest:==:new manifestHelper ( app . manifest  |  |  app . updateManifest ) ;
var reactTestUtils = require ( ' reactTestUtils ' ) ; var inputValueTracking:==:require ( ' inputValueTracking ' ) ;
var tilingPattern = displayPatternHelper . tilingPattern ; var getShadingPatternFromir:==:displayPatternHelper . getShadingPatternFromir ;
var installer = imports . installer ; var proc:==:imports . proc ;
var syntheticTouchEvent = require ( ' syntheticTouchEvent ' ) ; var syntheticTransitionEvent:==:require ( ' syntheticTransitionEvent ' ) ;
var getRootContainer = dom . getRootContainer ; var crashyTextNodes:==:api . features . crashyTextNodes ;
var _ memcmp = Module [ ' _ memcmp ' ] = asm [ ' _ memcmp ' ] ; var _ saveSetjmp:==:module [ ' _ saveSetjmp ' ]    asm [ ' _ saveSetjmp ' ] ;
var name = el . name ; var type:==:el . type . toLowerCase ( ) ;
var i d = w2utils . escapeId ( recid ) ; var expanded:==:$ ( ' # grid_'+this . name + ' _ rec_'+ i d ) . attr ( ' expanded ' ) ;
var redirect_uri = _ ref . redirect_uri ; var post_logout_redirect_uri:==:_ ref . post_logout_redirect_uri ;
var clockViewModel = that . _ clockViewModel ; var multiplier:==:clockViewModel . multiplier ;
var classPrefix    = this . classPrefix ; var toolbarIcons:==:this . toolbarIcons    toolbar . find ( ' . ' + classPrefix + ' menu > li > a ' ) ;
var nodes = this . nodes ; var nodeSelfSizeOffset:==:this . _ nodeSelfSizeOffset ;
var entity = geometryUpdater . _ entity ; var corridor:==:entity . corridor ;
var getSongFile = client . method ( ' getSongFile ' , filePath ) ; var getSongThumbnail:==:client . method ( ' getSongThumbnail ' , filePath ) ;
var edgeFieldsCount = this . _ edgeFieldsCount ; var edgeTypeOffset:==:this . _ edgeTypeOffset ;
var baby = require ( ' babyparse ' ) ; var keystone:==:req . keystone ;
var tryCatch2 = util . tryCatch2 ; var tryCatch1:==:util . tryCatch1 ;
var exp = stdlib . Math . exp ; var log:==:stdlib . Math . log ;
var level3 = db . model ( ' gh3974 ' , level3Schema ) ; var level2:==:db . model ( ' gh3974_0 ' , level2Schema ) ;
var height = props . height ; var rowCount:==:props . rowCount ;
var objectLiteralExpression = traceur . syntax . trees . objectLiteralExpression ; var objectPattern:==:traceur . syntax . trees . objectPattern ;
var n = conf . n  |  0 ; var len:==:conf . len  |  0 ;
var crossOrigin = getCrossOrigin ( this . crossOrigin ) ; var url:==:this . url ;
var isArray = _ _ dependency1 _ _ . isArray ; var isNonThenable:==:_ _ dependency1 _ _ . isNonThenable ;
var subtotal = get ( this . properties ( ) , ' subtotal ' ) ; var total:==:this . total ( ) ;
var index = this . index ? this . index . toString ( options ) : '' ; var value:==:this . value . toString ( options ) ;
var seq = Parsers . seq ; var opt:==:Parsers . opt ;
var PI = Math . PI ; var sin:==:Math . sin ;
var Book = db . model ( ' bookHarmony ' , bookSchema , getCollectionName ( ) ) ; var author:==:db . model ( ' authorHarmony ' , authorSchema , getCollectionName ( ) ) ;
var col = db . collection ( ' remove_one_with_generators ' ) ; var r:==:yield col . insertMany ( [ a : 1 , a : 1 ] ) ;
var assert = require ( ' assert ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var canUndo = canDo ( ' canUndo ' ) ; var canRedo:==:canDo ( ' canRedo ' ) ;
var level = threats [ i ] . level ; var count:==:threats [ i ] . count ;
var textInput = require ( ' textInput ' ) ; var view:==:require ( ' view ' ) ;
var n1 = new redNode ( i d : ' n1',type : ' abc',wires : [ [ ' n9 ' ] , [ ' n2 ' ] ] ) ; var n2:==:new redNode ( i d : ' n2',type : ' abc ' ) ;
var tx = wt . tx ; var ty:==:wt . ty ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var createCaseClause:==:parseTreeFactory . createCaseClause ;
var bitangent = bitangentScratch ; var tangent:==:tangentScratch ;
var parser = require ( ' socket . io - parser ' ) ; var debug:==:require ( ' debug ' ) ( ' socket . io : server ' ) ;
var ADD_TODO_OK = exports . ADD_TODO_OK = ' ADD_TODO_OK ' ; var REMOVE_TODO_OK:==:exports . REMOVE_TODO_OK    ' REMOVE_TODO_OK ' ;
var y = xy . y + heightOverTwo ; var radius:==:dataPoint . radius * radiusScale ;
var priv = privatePool . get ( this ) ; var target:==:priv . target . row ;
var query = location . query ; var hash:==:location . hash ;
var stride = this . stride , offset = a . offset + this . ent_offset * stride , w = a . width ; var l:==:( arguments . length - 1 ) ;
var naturalHeight = precomputedFeatures ? precomputedFeatures . naturalHeight : imageElement . naturalHeight ; var offsetWidth:==:precomputedFeatures ? precomputedFeatures . offsetWidth : naturalWidth ;
var entity = geometryUpdater . _ entity ; var polylineVolume:==:entity . polylineVolume ;
var bufferViews = gltf . bufferViews ; var bufferView:==:bufferViews [ accessor . bufferView ] ;
var ends = this . ends _ ; var stride:==:this . stride ;
var cascadeExpression = traceur . syntax . trees . cascadeExpression ; var caseClause:==:traceur . syntax . trees . caseClause ;
var r = Math . max ( shape . r , 0 ) ; var startAngle:==:shape . startAngle ;
var db = syncBrowserdb . db . _ db ; var transaction:==:db . transaction ( dbos_tabs , ' readwrite ' ) ;
var ALREADY_COMPRESSED = ' ALREADY_COMPRESSED ' ; var MAX_REVISION_NUM:==:options . MAX_REVISION_NUM ;
var select = document . createElement ( ' select ' ) ; var input:==:document . createElement ( ' input ' ) ;
var htmlsafe = helper . htmlsafe ; var linkto:==:helper . linkto ;
var anchor = iframeDoc . getElementById ( ' anchor1 ' ) ; var popup:==:document . getElementById ( ' popup7 ' ) ;
var topPositions = pos . topPositions ; var length:==:topPositions . length ;
var plotArea = axesLayout . plotArea ; var viewport:==:axesLayout . viewport ;
var columns = this . provider . columns ; var minWidth:==:this . minWidth ;
var pipeline = new _ pipeline2 . default ( ) ; var analyse:==:exports . analyse    pipeline . analyse . bind ( pipeline ) ;
var l = 0 + ( sleft ? pleft . size + ( pleft . resizable ? this . resizer : this . padding ) : 0 ) ; var t:==:height - ( sbottom ? pbottom . size + ( pbottom . resizable ? this . resizer : this . padding ) : 0 ) - pprev . size ;
var credit2 = new Credit ( ' credit2 ' ) ; var credit3:==:new Credit ( ' credit3 ' ) ;
var TASK = sym ( ' TASK ' ) ; var HELPER:==:sym ( ' HELPER ' ) ;
var field = this . fields [ name ] ; var value:==:field . value ;
var unsafeUnwrap = scope . unsafeUnwrap ; var unwrapIfNeeded:==:scope . unwrapIfNeeded ;
var cli = fis . cli ; var project:==:fis . project ;
var complex = math . complex ; var fraction:==:math . fraction ;
var jsmin = require ( ' jsmin ' ) ; var preprocessor:==:require ( ' preprocessor ' ) ;
var valueKey = this . props . valueKey ; var focusedOption:==:this . state . focusedOption  |  |  selectedOption ;
var loose = self . options . looseTable ; var spaced:==:self . options . spacedTable ;
var source = $ ( ' clone_position_source ' ) ; var target:==:$ ( ' clone_position_target ' ) ;
var domProperty = require ( ' domProperty ' ) ; var domPropertyOperations:==:require ( ' domPropertyOperations ' ) ;
var scrollTop = offsetParent . scrollTop ; var scrollLeft:==:offsetParent . scrollLeft ;
var tester = require ( ' tester ' ) ; var utils:==:require ( ' utils ' ) ;
var icalComponent = eventDetails . icalComponent ; var event:==:eventDetails . event ;
var fs    = require ( ' fs ' ) ; var p:==:path ;
var Net = global . Net ; var Trainer:==:global . Trainer ;
var countBy = createIterator ( baseIteratorOptions , countByIteratorOptions ) ; var every:==:createIterator ( baseIteratorOptions , everyIteratorOptions ) ;
var template = props . template  |  |  baseProto . templateString ; var extensible:==:props . extensible    props . hasOwnProperty ( ' extensible ' ) ? props . extensible : true ;
var deviceInfo = require ( ' deviceInfo ' ) ; var eventEmitter:==:require ( ' eventEmitter ' ) ;
var tilingScheme = imageryProvider . tilingScheme ; var ellipsoid:==:tilingScheme . ellipsoid ;
var y = selectedEntry . position ( ) . top ; var h:==:selectedEntry . height ( ) ;
var getRowHeader = window . getRowHeader ; var getSelectAll:==:window . getSelectAll ;
var innerHeight = win . innerHeight ; var scrollHeight:==:win . document . documentElement . scrollHeight ;
var embedAppId = document . querySelector ( ' # embedAppId ' ) ; var embedAppData:==:document . querySelector ( ' # embedAppData ' ) ;
var ifAxisCrossZero = axisHelper . ifAxisCrossZero ; var niceScaleExtent:==:axisHelper . niceScaleExtent ;
var body = req . body  |  |  ; var query:==:req . parsedUrl . query ;
var namespaces = taffy ( members . namespaces ) ; var mixins:==:taffy ( members . mixins ) ;
var max = Math . max ( Math . max ( red , green ) , blue ) ; var min:==:Math . min ( Math . min ( red , green ) , blue ) ;
var child_process = require ( ' child_process ' ) ; var exec:==:child_process . exec ;
var menus = imports . menus ; var tabManager:==:imports . tabManager ;
var l = unscaledAABB . lowerBound ; var u:==:unscaledaabb . upperBound ;
var endpoint = imports [ ' vfs . endpoint ' ] ; var analytics:==:imports [ ' c9 . analytics ' ] ;
var axon = require ( ' pm2-axon ' ) ; var chalk:==:require ( ' chalk ' ) ;
var badRequestError = errors . badRequestError ; var preconditionFailedError:==:errors . preconditionFailedError ;
var $ attrs = this . $ attrs ; var $ element:==:this . $ element ;
var css = [ ' gulpfile . js ' ] . concat ( paths . css , paths . vendorcss ) ; var images:==:[ ' gulpfile . js ' ] . concat ( paths . images ) ;
var height = node . height  |  |  0 ; var rotation:==:node . _ rotation  |  |  0 ;
var disableSort = _ ref . disableSort ; var label:==:_ ref . label ;
var el = this . el ; var uuid:==:el . object3D . fog . uuid ;
var b = this . buffer [ i ] ; var p:==:this . points [ i ] ;
var APN_LIST_KEY = apnConst . apn_list_key ; var cached_iccids_key:==:apnConst . cached_iccids_key ;
var history = _ createRouterObjects . history ; var transitionManager:==:_ createRouterObjects . transitionManager ;
var south = Math . max ( rectangle . south , otherRectangle . south ) ; var east:==:math . min ( rectangle . east , otherRectangle . east ) ;
var assert = scope . assert ; var mixin:==:scope . mixin ;
var fs = require ( ' fs ' ) ; var winston:==:require ( ' winston ' ) ;
var c = computed ( function ( ) return a . get ( ) * b . get ( ) ) ; var d:==:computed ( function ( ) return c . get ( ) * b . get ( ) ) ;
var decelerationRate = processDecelerationRate ( this . props . decelerationRate ) ; var source:==:this . props . source  |  |  ;
var Map = require ( ' Map ' ) ; var _ shouldPolyfilles6Collection:==:require ( ' _ shouldPolyfilles6Collection ' ) ;
var findIndex = ' local findIndex ' ; var keys:==:' local keys ' ;
var nodeFieldCount = this . _ nodeFieldCount ; var dominatorsTree:==:this . _ dominatorsTree ;
var NAME_SPACE_EXPORT = ' NAME_SPACE_EXPORT ' ; var NAME_SPACE_IMPORT:==:' NAME_SPACE_IMPORT ' ;
var options    = bs . options ; var server:==:options . get ( ' server ' ) ;
var Amount = ripple . Amount ; var Currency:==:ripple . Currency ;
var reactFiberReconciler = require ( ' reactFiberReconciler ' ) ; var reactInstanceMap:==:require ( ' reactInstanceMap ' ) ;
var menus = imports . menus ; var commands:==:imports . commands ;
var buffer = _ dereq _ ( ' buffer ' ) ; var transform:==:_ dereq _ ( ' jstransform ' ) . transform ;
var context = vnode . context ; var componentInstance:==:vnode . componentInstance ;
var singleUse = geofenceValues . singleUse ; var dwellTimeSpan:==:geofenceValues . dwellTimeSpan ;
var applicationViewWindowingMode = viewManagement . applicationViewWindowingMode ; var applicationView:==:viewManagement . applicationView ;
var handler1 = sinon . spy ( function handler1 ( ) ) ; var handler2:==:sinon . spy ( function handler2 ( ) ) ;
var up = camera . up ; var right:==:camera . right ;
var _ malloc = Module [ ' _ malloc ' ] = asm [ ' _ malloc ' ] ; var _ bitshift64Ashr:==:module [ ' _ bitshift64Ashr ' ]    asm [ ' _ bitshift64Ashr ' ] ;
var currentTime = options . currentTime ; var startTime:==:options . startTime ;
var changelog = require ( ' conventional - changelog ' ) ; var fs:==:require ( ' fs ' ) ;
var img = nd . img ; var icon:==:nd . icon ;
var url = req . url ; var settings:==:this . settings ( url ) ;
var colModel = self . jqGrid ( ' getGridParam ' , ' colModel ' ) ; var colNames:==:self . jqGrid ( ' getGridParam ' , ' colNames ' ) ;
var decoration = getStyleProperty ( item , styleContextStack , ' decoration ' , null ) ; var decorationColor:==:getStyleProperty ( item , styleContextStack , ' decorationColor ' , null ) ;
var displayName = _ treeSnapshot$instanc3 . displayName ; var ownerid:==:_ treeSnapshot$instanc3 . ownerid ;
var name = options . name  |  |  '' ; var groups:==:options . groups  |  |  '' ;
var values = dict . values [ key ] ; var types:==:dict . types [ key ] ;
var core = require ( ' core ' ) ; var dateFromId:==:calc . dateFromId ;
var div = document . createElement ( ' div ' ) ; var i d:==:div . i d    ' getsat - widget- ' + widget ;
var Restaurant = db . model ( ' gh5162 ' , restaurantSchema ) ; var r:==:new restaurant ( ) ;
var B = db . model ( ' gh4278_1 ' , bSchema ) ; var c:==:db . model ( ' gh4278_2 ' , cSchema ) ;
var options = this . options ; var hasHighlights:==:options . hasHighlights ;
var localAddress = options . localAddress ; var localPort:==:options . localPort ;
var startValue = options . startValue ; var stopValue:==:options . stopValue ;
var containerSize = _ ref4 . containerSize ; var offset:==:_ ref4 . offset ;
var width = Base . window . width * 0 . 75  |  0 ; var total:==:runner . total ;
var Plugin = imports . Plugin ; var auth:==:imports . auth ;
var view = viewContainer . views [ index ] ; var elementInjector:==:contextView . elementInjectors [ contextBoundElementIndex ] ;
var content = document . querySelector ( ' # content ' ) ; var p:==:document . querySelector ( ' # page ' ) ;
var row = range . start . row ; var session:==:this . session ;
var value = _ ref10 . value ; var group:==:_ ref10 . group ;
var groupKey = list . getItemFromKey ( key ) . groupKey ; var groupItems:==:this . _ groupItems ;
var properties = track . properties ( ) ; var revenue:==:properties . revenue ;
var columnMinWidth = _ props . columnMinWidth ; var columnCount:==:_ props . columnCount ;
var start = moment . isMoment ( e . start ) ? e . start . unix ( ) : ( e . start ? moment ( e . start ) . unix ( ) : '' ) ; var end:==:moment . isMoment ( e . end ) ? e . end . unix ( ) : ( e . end ? moment ( e . end ) . unix ( ) : '' ) ;
var week = $ ( document . createElement ( ' div ' ) ) . attr ( ' i d ' , ' cal - week - box ' ) ; var start:==:this . options . position . start . getFullYear ( ) + ' - ' + this . options . position . start . getMonthFormatted ( ) + ' - ' ;
var MOBILE = goog . userAgent . mobile ; var ie:==:goog . userAgent . ie ;
var text = options . hasOwnProperty ( ' text ' ) ? options . text : ' search ' ; var button:==:options . button ;
var once = require ( ' once ' ) ; var fs:==:require ( ' fs ' ) ;
var nameStatement = traceur . syntax . trees . nameStatement ; var newExpression:==:traceur . syntax . trees . newExpression ;
var path = db . options . path ; var log:==:ctx . log ;
var debuggerClient = this . _ debuggerClient ; var injectorClient:==:this . _ injectorClient ;
var fs = require ( ' fs ' ) ; var toml:==:require ( ' toml ' ) ;
var DIRECTION_DOWN = gestureDetector . direction_down = ' down ' ; var direction_left:==:gestureDetector . direction_left    ' left ' ;
var manifest = manifestModel . getValue ( ) ; var period:==:manifest . period_asarray [ periodId ] ;
var x = node . pos . x ; var y:==:node . pos . y ;
var trace = gd . _ fullData [ traceIdx ] ; var module:==:trace . _ module ;
var select = editor . find ( ' select ' ) ; var selectMouseDownListener:==:jasmine . createSpy ( ' selectMouseDownListener ' ) ;
var nested = toJSON : nestedTojson ; var replaced:==:a : false , replaced : true , nested ;
var s = form_obj . elements [ field_name ] ; var o:==:new Option ( name , value ) ;
var stateMachine = traceur . syntax . trees . stateMachine ; var switchState:==:traceur . codegeneration . generator . switchState ;
var symbolSize = symbolMeta . symbolSize ; var symbolOffset:==:itemModel . get ( ' symbolOffset ' ) ;
var Model = _ fxosMvcDistMvc . model ; var shareService:==:_ appJsServicesShareService [ ' default ' ] ;
var property = context . property ; var oldValue:==:context . oldValue ;
var connection = args . connection ; var element:==:args . element ;
var base62 = _ dereq _ ( ' base62 ' ) ; var Syntax:==:_ dereq _ ( ' esprima - fb ' ) . Syntax ;
var videoRecvCodec = options . videoRecvCodec  |  |  '' ; var stereo:==:options . stereo ;
var h = int ( match [ 4 ]  |  |  0 ) - tzHour ; var m:==:int ( match [ 5 ]  |  |  0 ) - tzMin ;
var extendFlat = lib . extendFlat ; var extendDeep:==:lib . extendDeep ;
var should = require ( ' should ' ) ; var moment:==:require ( ' moment - timezone ' ) ;
var delta = deltas [ i ] ; var range:==:Range . fromPoints ( delta . range . start , delta . range . end ) ;
var status = resp . httpResponse . statusCode ; var params:==:_ _ webpack_require _ _ ( 201 ) . inspect ( req . params , true , null ) ;
var color = object . color  |  |  definition . color  |  |  ' # fff ' ; var bgColor:==:object . bgColor  |  |  ' # 000 ' ;
var relatedTarget = defaultValue ( options . relatedTarget , null ) ; var offsetx:==:defaultValue ( options . offsetx , 0 ) ;
var startButton = document . querySelector ( ' button#startButton ' ) ; var sendButton:==:document . querySelector ( ' button#sendButton ' ) ;
var i d = entity . i d ; var entities:==:this . _ entities ;
var node = _ ref2 . node ; var key:==:node . key ;
var joinClasses = require ( ' joinClasses ' ) ; var dir_sign:==:fixedDataTableHelper . dir_sign ;
var inactiveColor = legendModel . get ( ' inactiveColor ' ) ; var isSelected:==:legendModel . isSelected ( name ) ;
var crossPageChannel = goog . net . xpc . crossPageChannel ; var crossPageChannelRole:==:goog . net . xpc . crossPageChannelRole ;
var getValueAtIndexOrDefault = helpers . getValueAtIndexOrDefault ; var labels:==:chart . data . labels ;
var source = this . source ; var target:==:this . target ;
var documentFragment = window . documentFragment ; var htmlTemplateElement:==:window . htmlTemplateElement ;
var cropBox = self . cropBox ; var action:==:self . action ;
var tabbehavior = imports . tabbehavior ; var util:==:imports . util ;
var min = Number ( $ field . attr ( ' min ' ) ) ; var max:==:Number ( $ field . attr ( ' max ' ) ) ;
var sqrt = Math . sqrt ; var abs:==:Math . abs ;
var a = Ext . eventManager ; var b:==:ext . lib . dom ;
var url   = require ( ' url ' ) ; var express:==:require ( ' express ' ) ;
var shelljs = require ( ' shelljs ' ) ; var chalk:==:require ( ' chalk ' ) ;
var a = this . sandbox . spy ( ) ; var b:==:this . sandbox . spy ( ) ;
var path = uiSourceCode . path ( ) ; var fileSystemPath:==:fileSystemWorkspaceBinding . fileSystemPath ( uiSourceCode . project ( ) . i d ( ) ) ;
var gl = this . gl ; var canvas:==:this . gl . canvas ;
var connection = client . connection ; var queries:==:connection . queries ;
var i d = this . token . i d ; var userId:==:this . token . userId ;
var g = e . dygraph ; var div:==:e . chart_div ;
var rename = require ( ' gulp - rename ' ) ; var tools:==:require ( ' aurelia - tools ' ) ;
var fs = require ( ' fs ' ) ; var glob:==:require ( ' glob ' ) ;
var groups = options . groups  |  |  '' ; var iq:==:$ iq ( type : ' set ' ) ;
var should = require ( ' should ' ) ; var join:==:require ( ' path ' ) . join ;
var onAfterValidate = jasmine . createSpy ( ' onAfterValidate ' ) ; var onAfterChange:==:jasmine . createSpy ( ' onAfterChange ' ) ;
var view = observable . view ; var connections:==:view . _ connections ;
var w = flags . width ; var h:==:flags . height ;
var mime = require ( ' mime ' ) ; var compressible:==:require ( ' compressible ' ) ;
var rpc = require ( ' pm2-axon - rpc ' ) ; var axon:==:require ( ' pm2-axon ' ) ;
var paddingBottom = this . parseStyle ( elemStyle . paddingBottom ) ; var scrollParent:==:this . scrollParent ( elem , false , true ) ;
var createVariableStatement = parseTreeFactory . createVariableStatement ; var createVariableDeclaration:==:parseTreeFactory . createVariableDeclaration ;
var hierarchyNav = this . owner . hierarchyNavigator ; var row:==:this . _ grid . getOrCreateRow ( rowIndex + this . _ rowLayoutManager . _ gridOffset ) ;
var run = test . runId ( ) ; var coll:==:new mongo . collection ( ' cursorDedup-'+run , collectionOptions ) ;
var tree = new goog . ui . tree . treeControl ( ' tree ' ) ; var a:==:new goog . ui . tree . treeNode ( ' a ' ) ;
var style = this . $ measureNode . style ; var computedStyle:==:dom . computedStyle ( this . element ) ;
var dir = camera . direction ; var right:==:camera . right ;
var objects = this . glplot . objects ; var annotations:==:this . fullSceneLayout . annotations  |  |  [ ] ;
var reactFiberBeginWork = require ( ' reactFiberBeginWork ' ) ; var reactFiberCompleteWork:==:require ( ' reactFiberCompleteWork ' ) ;
var api = scope . api . instance . styles ; var STYLE_SCOPE_ATTRIBUTE:==:api . STYLE_SCOPE_ATTRIBUTE ;
var subtitle = _ props . subtitle ; var subtitleStyle:==:_ props . subtitleStyle ;
var newline = config . newline ; var comments:==:config . comments ;
var baseAnimator = powerbi . visuals . baseAnimator ; var yAxisPosition:==:powerbi . visuals . yAxisPosition ;
var background = app . element . style . backgroundImage ; var backgroundSize:==:app . element . style . backgroundSize ;
var clientWidth = this . wrapper . clientWidth ; var clientHeight:==:this . wrapper . clientHeight ;
var OTHER = ci . OTHER ; var AT:==:ci . AT ;
var reactFiber = require ( ' reactFiber ' ) ; var reactTypeOfSideEffect:==:require ( ' reactTypeOfSideEffect ' ) ;
var fontDirection = current . fontDirection ; var texthScale:==:current . texthScale * fontDirection ;
var livereload = require ( ' gulp - livereload ' ) ; var coffee:==:require ( ' gulp - coffee ' ) ;
var foo = docSet . getByLongname ( ' foo ' ) [ 0 ] ; var bar:==:docSet . getByLongname ( ' bar ' ) [ 0 ] ;
var serialPort = serialport . serialPort ; var readline:==:serialport . parsers . readline ;
var ambient = this . ambient ? this . ambient . buildCode ( builder , ' c ' ) : undefined ; var shadow:==:this . shadow ? this . shadow . buildCode ( builder , ' c ' ) : undefined ;
var options = self . options ; var aspectRatio:==:options . aspectRatio ;
var encodeEverything = options . encodeEverything ; var useNamedReferences:==:options . useNamedReferences ;
var chalk = require ( ' chalk ' ) ; var prompt:==:require ( ' prompt ' ) ;
var createBindingIdentifier = parseTreeFactory . createBindingIdentifier ; var createCallExpression:==:parseTreeFactory . createCallExpression ;
var object = this . paper . getById ( objectId ) ; var contextObject:==:object . data ( ' contextObject ' ) ;
var a = new constantNode ( 2 ) ; var n:==:new operatorNode ( ' - ' , ' unaryMinus ' , [ a ] ) ;
var iconImageCache = ol . style . iconImageCache ; var iconImage:==:iconImageCache . get ( src , crossOrigin , color ) ;
var THIS_EXPRESSION = ' THIS_EXPRESSION ' ; var THROW_STATEMENT:==:' THROW_STATEMENT ' ;
var A = db . model ( ' gh4618 ' , aSchema ) ; var b:==:db . model ( ' gh4618_0 ' , bSchema ) ;
var operationalError = errors . operationalError ; var haveGetters:==:util . haveGetters ;
var extend = require ( ' extend ' ) ; var bail:==:require ( ' bail ' ) ;
var action = this . action ; var container:==:this . container ;
var project = options . project ; var installPath:==:options . installPath ;
var dynCall_iiiiiiiiiii = Module [ ' dynCall_iiiiiiiiiii ' ] = asm [ ' dynCall_iiiiiiiiiii ' ] ; var dynCall_viiiiiii:==:Module [ ' dynCall_viiiiiii ' ]    asm [ ' dynCall_viiiiiii ' ] ;
var tabBarItemios = require ( ' tabBarItemios ' ) ; var navigator:==:require ( ' navigator ' ) ;
var octaves = opts . octaves  |  |  9 ; var maxBG:==:opts . maxBG  |  |  400 ;
var collection = db . collection ( ' read_pref_1 ' , readPreference : readPreference . secondary_preferred ) ; var command:==:db . serverConfig . command ;
var badge = item . find ( ' . badge ' ) ; var step:==:item . attr ( ' data - step ' ) ;
var previous = helpers . previousItem ( this . _ children , index ) ; var next:==:helpers . nextItem ( this . _ children , index ) ;
var _ shouldPolyfilles6Collection = require ( ' _ shouldPolyfilles6Collection ' ) ; var toIterator:==:require ( ' toIterator ' ) ;
var valueType = powerbi . valueType ; var dataViewTransform:==:powerbi . data . dataViewTransform ;
var onValidate = jasmine . createSpy ( ' onValidate ' ) ; var onAfterValidate:==:jasmine . createSpy ( ' onAfterValidate ' ) ;
var reactdomContainerInfo = require ( ' reactdomContainerInfo ' ) ; var reactInstrumentation:==:require ( ' reactInstrumentation ' ) ;
var toolbar     = this . toolbar ; var cm:==:this . cm ;
var async = require ( ' async ' ) ; var walk:==:require ( ' walk ' ) . walk ;
var packedInterpolationLength = this . _ packedInterpolationLength ; var inputOrder:==:this . _ inputOrder ;
var a = rejectBuiltInSoon ( ' rejected - a ' , 40 ) ; var b:==:rejectBuiltInSoon ( ' rejected - b ' , 30 ) ;
var item = listbox2 . items ( ) . eq ( 0 ) ; var dataItem:==:listbox2 . dataItem ( item ) ;
var defer = _ _ dependency7 _ _ . defer ; var config:==:_ _ dependency8 _ _ . config ;
var naturalWidth = precomputedDimensions ? precomputedDimensions . naturalWidth : imageElement . naturalWidth ; var naturalHeight:==:precomputedDimensions ? precomputedDimensions . naturalHeight : imageElement . naturalHeight ;
var ideBaseUrl = options . ideBaseUrl ; var dashboardUrl:==:options . dashboardUrl ;
var raw = options . raw  |  |  false ; var documentsReturnedIn:==:options . documentsReturnedIn  |  |  null ;
var inherit = _ dereq _ ( ' component - inherit ' ) ; var debug:==:_ dereq _ ( ' debug ' ) ( ' engine . io - client : polling - xhr ' ) ;
var pbJsonStreamParser = goog . require ( ' goog . net . streams . pbJsonStreamParser ' ) ; var object:==:goog . require ( ' goog . object ' ) ;
var Text = window . Text ; var Comment:==:window . Comment ;
var grunt = require ( ' grunt ' ) ; var phantomjs:==:require ( ' grunt - lib - phantomjs ' ) . init ( grunt ) ;
var getNormalizedUnicodes = coreUnicode . getNormalizedUnicodes ; var reverseIfRtl:==:coreUnicode . reverseIfRtl ;
var value = ' some - value ' ; var result:==:goog . result . successfulResult ( value ) ;
var input = inputs [ i ] ; var source:==:sources [ input . source ] ;
var assert = require ( ' assert ' ) ; var equal:==:require ( ' assert - dir - equal ' ) ;
var y = shape . cy ; var r:==:Math . max ( shape . r , 0 ) ;
var b = this . _ options . border ; var canvas:==:document . createElement ( ' canvas ' ) ;
var projection = this . projection ; var view:==:this . view ;
var success = options . success ; var args:==:options . args ;
var mkdirp = require ( ' mkdirp ' ) ; var jsdom:==:require ( ' jsdom ' ) ;
var render = ref . render ; var template:==:ref . template ;
var x = ( touch . pageX - bbox . x1 ) ; var y:==:( touch . pageY - bbox . y1 ) ;
var width = viewport . width ; var height:==:viewport . height ;
var HAS_SIDE_EFFECTS = domProperty . injection . has_side_effects ; var has_numeric_value:==:domProperty . injection . has_numeric_value ;
var guardBits = quantizationParameters . guardBits ; var transformation:==:codingStyleParameters . transformation ;
var Previewer = imports . Previewer ; var tabManager:==:imports . tabManager ;
var showPrevBtn = showControl & & controlModel . get ( ' showPrevBtn ' , true ) ; var showNextBtn:==:showControl & & controlModel . get ( ' showNextBtn ' , true ) ;
var multitree = config . multitree ; var align:==:config . align ;
var items = listbox2 . items ( ) ; var dataItems:==:listbox2 . dataItems ( ) ;
var batchedBridge = require ( ' batchedBridge ' ) ; var datePickerAndroid:==:require ( ' datePickerAndroid ' ) ;
var stage = this . stage ; var style:==:canvas . style ;
var t = String ( s ) ; var l:==:this . length - t . length ;
var backgroundColor = _ props . backgroundColor ; var children:==:_ props . children ;
var client = ( opts & & opts . client )  |  |  mQuery . client ; var parent:==:( opts & & opts . parent )  |  |  null ;
var point = points [ i ] ; var xval:==:point . xval ;
var collab1 = this . collab1 ; var collab2:==:this . collab2 ;
var preMultiplyAlpha = options . preMultiplyAlpha  |  |  ( ( pixelFormat = = = pixelFormat . rgb )  |  |  ( pixelFormat = = = pixelFormat . luminance ) ) ; var flipy:==:defaultValue ( options . flipy , true ) ;
var appendClearCatcher = powerbi . visuals . appendClearCatcher ; var createLegend:==:powerbi . visuals . createLegend ;
var inherit = utils . inherit ; var clone:==:utils . clone ;
var Package = protocol . Package ; var logger:==:require ( ' pomelo - logger ' ) . getLogger ( ' pomelo ' , _ _ filename ) ;
var eventType = pointer_input_map [ eventTypeNormalized ] ; var pointerType:==:ie10_pointer_type_enum [ ev . pointerType ]  |  |  ev . pointerType ;
var onRowDoubleClick = _ props3 . onRowDoubleClick ; var onRowMouseOver:==:_ props3 . onRowMouseOver ;
var date = require ( ' load - date ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var authorized = options . authorized  |  |  noop ; var background:==:options . background  |  |  noop ;
var revenue = track . revenue ( ) ; var category:==:track . category ( )  |  |  ' All ' ;
var active = this . $ menu . find ( ' . active ' ) . removeClass ( ' active ' ) ; var next:==:active . next ( ) ;
var cellSizeGetter = _ ref . cellSizeGetter ; var estimatedCellSize:==:_ ref . estimatedCellSize ;
var choiceno = this . get_choiceno_for_node ( input ) ; var coords:==:this . get_coords ( input ) ;
var browserify = require ( ' browserify ' ) ; var watchify:==:require ( ' watchify ' ) ;
var actual = escape ? escapeInvisibles ( err . actual ) : err . actual ; var expected:==:escape ? escapeInvisibles ( err . expected ) : err . expected ;
var categoryThickness = layout . categoryThickness ; var outerPadding:==:categoryThickness * layout . outerPaddingRatio ;
var object = util . object ; var number:==:util . number ;
var atoms = json . atoms ; var bonds:==:json . bonds ;
var View = require ( ' View ' ) ; var renderApplication:==:require ( ' renderApplication ' ) ;
var parent = that . _ parentWidget ( ) ; var focusout:==:isie ? ' blur ' : ' focusout ' ;
var i d = node . i d  |  |  ' ( i d is undefined ) ' ; var label:==:node . label  |  |  ' ( label is undefined ) ' ;
var assert = require ( ' assert ' ) ; var nconf:==:require ( ' nconf ' ) ;
var getSelectAll = window . getSelectAll ; var iNumberOfRows:==:window . iNumberOfRows ;
var arcScalex = ctx . arcScalex _ ; var arcScaley:==:ctx . arcScaley _ ;
var parameterList = this . transformAny ( tree . parameterList ) ; var annotations:==:this . transformList ( tree . annotations ) ;
var removeEntitiesAtEdges = require ( ' removeEntitiesAtEdges ' ) ; var removeRangeFromContentState:==:require ( ' removeRangeFromContentState ' ) ;
var DateTimeSymbols_hi = goog . require ( ' goog . i18n . DateTimeSymbols_hi ' ) ; var DateTimeSymbols_zh:==:goog . require ( ' goog . i18n . DateTimeSymbols_zh ' ) ;
var gulp = require ( ' gulp ' ) ; var rimraf:==:require ( ' rimraf ' ) . sync ;
var flowStartTimes = timelineData . flowStartTimes ; var flowEndTimes:==:timelineData . flowEndTimes ;
var exififdLength = ifDlengths . exififdLength ; var exififdLengthDataSection:==:ifDlengths . exififdLengthDataSection ;
var readline = require ( ' readline ' ) ; var request:==:require ( ' request ' ) ;
var expressionIn = opt_expressionin  |  |  expression . normal ; var initializer:==:opt_initializer  |  |  destructuringInitializer . required ;
var col = columns [ i ] ; var asSorting:==:col . asSorting ;
var actual = path . join ( _ _ dirname , dir , ' actual . txt ' ) ; var expected:==:path . join ( _ _ dirname , dir , ' expected . txt ' ) ;
var validatedomNesting = require ( ' validatedomNesting ' ) ; var voidElementTags:==:require ( ' voidElementTags ' ) ;
var left = options . left ; var top:==:options . top ;
var filePath = filePathNode . value ; var currentFileInfo:==:this . currentFileInfo ;
var kpiArcPaths = this . kpiArcPaths = [ ] ; var mainGraphicsContext:==:this . mainGraphicsContext ;
var timestamp = options . timestamp  |  |  hawk . utils . now ( options . localtimeOffsetMsec ) ; var credentials:==:options . credentials ;
var terrainCache = this . _ terrainCache ; var keys:==:object . keys ( terrainCache ) ;
var cd = gd . calcdata ; var ternary:==:gd . _ fullLayout . ternary . _ subplot ;
var model = el . _ model  |  |  ; var fill:==:model . fill ;
var supertest = require ( ' supertest ' ) ; var Role:==:loopback . Role ;
var PAREN_EXPRESSION = ' PAREN_EXPRESSION ' ; var POSTFIX_EXPRESSION:==:' POSTFIX_EXPRESSION ' ;
var selectionId = powerbi . visuals . selectionId ; var gradientUtils:==:powerbi . visuals . gradientUtils ;
var run = test . runId ( ) ; var coll:==:new mongo . collection ( ' observeInCallback-'+run , collectionOptions ) ;
var tag = vnode . tag ; var data:==:vnode . data ;
var launchapp = document . getElementById ( ' launchapp ' ) . checked ; var piurl:==:document . getElementById ( ' piurl ' ) . value . trim ( ) ;
var sinon = require ( ' sinon ' ) ; var http:==:require ( ' http ' ) ;
var isFunction = angular . isFunction ; var isObject:==:angular . isObject ;
var size = dom . size . value ; var offsetX:==:parseInt ( dom . offsetx . value , 10 ) ;
var active = me . _ active ; var data:==:me . _ data ;
var veeam = this . veeam ; var archimate3:==:this . archimate3 ;
var assign = Object . assign  |  |  require ( ' object . assign ' ) ; var sourcemaps:==:require ( ' gulp - sourcemaps ' ) ;
var lineWidth = state . lineWidth ; var miterLimit:==:state . miterLimit ;
var l = ljmo . codePoints [ 0 ] ; var v:==:vjmo . codePoints [ 0 ] ;
var x = view . _ devicePixelRatio * ( uiPoint . x - box . left ) ; var y:==:view . _ devicePixelRatio * ( box . top + box . height - uiPoint . y ) ;
var reactNativeComponentTree = require ( ' reactNativeComponentTree ' ) ; var reactNativeEventEmitter:==:require ( ' reactNativeEventEmitter ' ) ;
var sel = vim . sel ; var head:==:actionArgs . head  |  |  cm . getCursor ( ' head ' ) ;
var expected = options . expected ; var indentChar:==:options . indentChar ;
var inMessage = opt . inMessage  |  |  false ; var header:==:opt . header ;
var idToNode = this . _ idToNode ; var gcNode:==:this . gcNode ;
var exec = require ( ' child_process ' ) . execSync ; var plumber:==:require ( ' gulp - plumber ' ) ;
var Schema = mongoose . Schema ; var mongo:==:require ( ' mongodb ' ) ;
var height = options . height  |  |  options . size  |  |  1 ; var sideOrientation:==:( options . sideOrientation      0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ;
var direction = detail . direction ; var angle:==:detail . angle ;
var quasiLiteralExpression = traceur . syntax . trees . quasiLiteralExpression ; var quasiSubstitution:==:traceur . syntax . trees . quasiSubstitution ;
var Post = hexo . model ( ' Post ' ) ; var Category:==:hexo . model ( ' Category ' ) ;
var mnc = this . _ iccCard . iccInfo . mnc  |  |  ' 00 ' ; var iccId:==:this . _ iccId ;
var movementX = event . movementX  |  |  event . mozMovementx ; var movementy:==:event . movementy  |  |  event . mozMovementy ;
var limeA100 = exports . limeA100 = ' # f4ff81 ' ; var limeA200:==:exports . limeA200    ' # eeff41 ' ;
var options = _ props$options = = = undefined ? [ ] : _ props$options ; var shouldKeyDownEventCreateNewOption:==:_ props . shouldKeyDownEventCreateNewOption ;
var label = _ props . label ; var show:==:_ props . show ;
var minOpacity = this . minOpacity ; var maxOpacity:==:this . maxOpacity ;
var scroll = this . scroll ; var bounds:==:this . bounds ;
var PI = Math . PI ; var cos:==:Math . cos ;
var settings   = this . settings ; var toolbarHandlers:==:editormd . toolbarHandlers ;
var channel = node . channels [ 0 ] ; var m:==:channel . sampler . output [ frame ] ;
var scanLines = frame . scanLines ; var mcusPerLine:==:frame . mcusPerLine ;
var error = _ . partial ( print , ' error ' ) ; var log:==:_ . partial ( print , ' log ' ) ;
var domLazyTree = require ( ' domLazyTree ' ) ; var domProperty:==:require ( ' domProperty ' ) ;
var Button = declareInterfaceClass ( buttonImpl ) ; var eventSink:==:declareInterfaceClass ( eventSinkImpl ) ;
var d = $ ( ' . edui - autotypesetpicker - body tr ' ) ; var e:==:d [ 7 ] . getElementsByTagName ( ' input ' ) ;
var a = builder . getFormatLength ( this . a . getType ( builder ) ) ; var b:==:builder . getFormatLength ( this . b . getType ( builder ) ) ;
var localSpherePos = spheretrimesh_localspherepos ; var tmp:==:spheretrimesh_tmp ;
var navigate = imports . navigate ; var save:==:imports . save ;
var type = listener . type ; var proxy:==:listener . proxy ;
var error = props . error ; var errorStyle:==:props . errorStyle ;
var val = parseFloat ( $ el . val ( ) ) ; var max:==:parseFloat ( $ el . attr ( ' max ' ) ) ;
var ctx = this . ctx ; var width:==:dom . width ;
var counter = this . _ counters [ i ] ; var value:==:counter . value ;
var Tag = hexo . model ( ' Tag ' ) ; var Post:==:hexo . model ( ' Post ' ) ;
var formattedxValue = point . formattedxValue ; var formattedyValue:==:point . formattedyValue ;
var firstTangent = options . firstTangent ; var lastTangent:==:options . lastTangent ;
var semver = require ( ' semver ' ) ; var undefsafe:==:require ( ' undefsafe ' ) ;
var commands = imports . commands ; var provider:==:imports [ ' clipboard . provider ' ] ;
var banner = grunt . template . process ( options . banner ) ; var footer:==:grunt . template . process ( options . footer ) ;
var get = Ember . get ; var run:==:Ember . run ;
var allowPicking = model . allowPicking ; var rootNodes:==:model . _ runtime . rootNodes ;
var color = logging . colors [ type ] ; var now:==:Date . now ( ) ;
var db = new PouchDB ( dbs . name , auto_compaction : true ) ; var doc:==:_ i d : ' doc ' , val : ' 1 ' ;
var clockViewModel = that . _ clockViewModel ; var clockRange:==:clockViewModel . clockRange ;
var disableSort = _ column$props2 . disableSort ; var headerRenderer:==:_ column$props2 . headerRenderer ;
var f = new global . uint32Array ( buffer ) ; var g:==:new global . float32Array ( buffer ) ;
var reactInstrumentation = require ( ' reactInstrumentation ' ) ; var reactMarkupChecksum:==:require ( ' reactMarkupChecksum ' ) ;
var weight = w . weight ; var o:==:geometry . vertices [ vidx ] ;
var del = require ( ' del ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var dataViewObjects = powerbi . dataViewObjects ; var legendIcon:==:powerbi . visuals . legendIcon ;
var shadowsSaturation = params . shadowsSaturation ; var highlightsHue:==:params . highlightsHue ;
var el = c . elm ; var s:==:el . style ;
var skinNode = ccs . skinNode ; var blendFunc:==:cc . blendFunc ;
var domTokenList = scope . wrappers . domTokenList ; var parentNodeInterface:==:scope . parentNodeInterface ;
var geometry = instance . geometry ; var attributes:==:geometry . attributes ;
var ENV = process . env . NODE_ENV  |  |  ' development ' ; var express:==:require ( ' express ' ) ;
var width = bounds . width ; var height:==:bounds . height ;
var rpcurrency = $ filter ( ' rpcurrency ' ) ; var rpcontactname:==:$ filter ( ' rpcontactname ' ) ;
var key = event . detail . key ; var index:==:event . detail . index ;
var name = descriptor . name ; var definition:==:descriptor . definition ;
var a = new assignmentNode ( new symbolNode ( ' a ' ) , value ) ; var n:==:new assignmentNode ( new symbolNode ( ' b ' ) , a ) ;
var basename = require ( ' path ' ) . basename ; var frontdoor:==:require ( ' frontdoor ' ) ;
var delta = opt_delta  |  |  0 ; var order:==:opt_order  |  |  Blockly . javaScript . order_none ;
var userId = stateProps . userId ; var onSubmitUserId:==:dispatchProps . onSubmitUserId ;
var config = state . output & & state . output . config  |  |  session . config ; var command:==:config . command  |  |  ' ' ;
var parse = require ( ' spdx - expression - parse ' ) ; var correct:==:require ( ' spdx - correct ' ) ;
var formatDate = calendar . formatDate ; var getEventEnd:==:calendar . getEventEnd ;
var annotationBorderStyleType = sharedUtil . annotationBorderStyleType ; var annotationType:==:sharedUtil . annotationType ;
var doc = ed . session . doc ; var l:==:doc . getValue ( ) . length ;
var tokenize = tk . tokenize ; var toStr:==:tk . toStr ;
var circle = document . createElement ( ' circle ' ) ; var dotSize:==:typeof _ this2 . dotSize      ' function ' ? _ this2 . dotSize ( ) : _ this2 . dotSize ;
var dirname = require ( ' path ' ) . dirname ; var constantinople:==:require ( ' constantinople ' ) ;
var rowId = e . data . rowId ; var colId:==:e . data . colId ;
var terrainProvider = this . terrainProvider ; var hasWaterMask:==:this . showWaterEffect & & terrainProvider . ready & & terrainProvider . hasWaterMask ;
var seg = this . segments _ [ i ] ; var n:==:goog . graphics . Path . segmentArgCounts _ [ seg ] * this . count _ [ i ] ;
var c = rejectSoon ( ' rejected - c ' , 10 ) ; var d:==:'d ' ;
var s = parseCssFloat ( hsla [ 1 ] ) ; var l:==:parseCssFloat ( hsla [ 2 ] ) ;
var firstRect = firstRectList [ 0 ] ; var lastRect:==:lastRectList [ lastListLength - 1 ] ;
var entryPoint = findScript ( entryPointName ) ; var base:==:entryPoint . basePath ;
var domConstants = jsCommon . domConstants ; var keyUtils:==:jsCommon . keyUtils ;
var fs = require ( ' fs ' ) ; var join:==:require ( ' path ' ) . join ;
var assert = require ( ' assert ' ) ; var walk:==:require ( ' pug - walk ' ) ;
var addrs = alladdrs ( req , trust ) ; var addr:==:addrs [ addrs . length - 1 ] ;
var select = core . select . findSelect ( selectLocator ) ; var option:==:core . select . option . getOptionLocator _ ( optionLocator ) ;
var util = require ( ' gulp - util ' ) ; var nodemon:==:require ( ' nodemon ' ) ;
var concat = require ( ' concat - stream ' ) ; var temp:==:require ( ' temp ' ) ;
var hasStroke = style . hasStroke ( ) ; var hasFill:==:style . hasFill ( ) ;
var sx = step . sx ; var sy:==:step . sy ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var textareaFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' textareaFieldTestObject ' ) ) ;
var iceServers = options . iceServers  |  |  defaults . iceServers ; var constraints:==:options . constraints  |  |  defaults . constraints ;
var cache = instance . get ( ' cache ' ) ; var method:==:instance . get ( ' method ' ) ;
var topo = this . topos [ wrapper ] ; var x:==:topo . data [ ' switchs ' ] [ i d ] . x ;
var util = require ( ' util ' ) ; var net:==:require ( ' net ' ) ;
var heading = queryNumericValue ( node , ' heading ' , namespaces . kml ) ; var color:==:queryColorValue ( node , ' color ' , namespaces . kml ) ;
var initialState = ' initialState ' ; var targetState:==:' targetState ' ;
var Change = loopback . Change ; var persistedModel:==:loopback . persistedModel ;
var d16 = _ addDiv ( ' d16 ' ) , d17 = _ addDiv ( ' d17 ' ) ; var conn:==:_ jsPlumb . connect ( source : d16 , target : d17 , endpoints : [ ' blank ' , ' blank ' ] ) ;
var a = base ; var b:==:base + points . length ;
var lineNumber = searchMatches [ i ] . lineNumber ; var lineContent:==:searchMatches [ i ] . lineContent ;
var x = this . data [ dataix ] ; var l:==:this . labels [ dataix ] ;
var mandatory = ( constraints & & constraints . mandatory ) ? constraints . mandatory : null ; var optional:==:( constraints & & constraints . optional ) ? constraints . optional : null ;
var run = imports . run ; var output:==:imports . output ;
var revenue = track . revenue ( ) ; var event:==:track . event ( ) ;
var colorsPerVertex = polylineGeometry . _ colorsPerVertex ; var followSurface:==:polylineGeometry . _ followSurface ;
var rename = require ( ' gulp - rename ' ) ; var header:==:require ( ' gulp - header ' ) ;
var typeParameters = this . transformAny ( tree . typeParameters ) ; var parameterList:==:this . transformAny ( tree . parameterList ) ;
var map = this . map = this . getMap ( ) ; var container:==:this . container    document . createElement ( ' div ' ) ;
var createBlock = parseTreeFactory . createBlock ; var createCallStatement:==:parseTreeFactory . createCallStatement ;
var request = require ( ' request ' ) ; var yaml:==:require ( ' js - yaml ' ) ;
var src = info . src ; var extraVariables:==:info . extraVariables ;
var em = document . getElementById ( 'em ' ) . firstChild ; var two:==:document . getElementById ( ' two ' ) ;
var southwestCornerCartesian = this . southwestCornerCartesian ; var northeastCornerCartesian:==:this . northeastCornerCartesian ;
var text = child . getChildNode ( ' # text ' ) ; var name:==:child . getChildNode ( ' name ' ) ;
var fs = require ( ' fs ' ) ; var stringDecoder:==:require ( ' string_decoder ' ) . stringDecoder ;
var concat = require ( ' gulp - concat ' ) ; var babel:==:require ( ' gulp - babel ' ) ;
var parseurl = require ( ' parseurl ' ) ; var resolve:==:require ( ' path ' ) . resolve ;
var w = game . width - logo . width ; var h:==:game . height - logo . height ;
var width = points . width + lineWidth ; var height:==:points . height + lineWidth ;
var splitURL = webInspector . parsedurl . spliturlIntoPathComponents ( url ) ; var projectId:==:webInspector . networkProject . projectId ( target , spliturl [ 0 ] , true ) ;
var instance = options . instance ; var updatable:==:options . updatable ;
var merge = imports . threewaymerge ; var fs:==:imports . fs ;
var Divider = imports . Divider ; var menuItem:==:imports . menuItem ;
var x = -dimensions . bounds . minx ; var width:==:Math . ceil ( dimensions . width ) + x + doublePadding ;
var source = require ( ' vinyl - source - stream ' ) ; var touch:==:require ( ' touch ' ) ;
var showEvents = t . showEvents ; var hideEvents:==:t . hideEvents ;
var bar_inch = document . getElementById ( ' bar_inch ' ) ; var bar_mm:==:document . getElementById ( ' bar_mm ' ) ;
var dataKey = _ ref . dataKey ; var rowData:==:_ ref . rowData ;
var installPath = options . settingDir  |  |  options . installPath  |  |  ' ' ; var workspaceDir:==:options . options . workspaceDir ;
var entity = this . entity ; var shape:==:data . shape ;
var info = imports . info ; var metrics:==:imports . metrics ;
var selected = this . selected ( ) ; var index:==:options . indexOf ( selected ) ;
var GALAXY_USERNAME = process . env . GALAXY_USERNAME ; var GALAXY_PASSWORD:==:process . env . GALAXY_PASSWORD ;
var parallelClosureTestSuite = goog . require ( ' goog . testing . parallelClosureTestSuite ' ) ; var testSuite:==:goog . require ( ' goog . testing . testSuite ' ) ;
var value = powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . value , 0 ) ; var lineColor:==:powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . lineColor , solid : color : defaultColor ) ;
var confirm = this . querySelector ( ' gaia - buttons . confirm ' ) ; var cancel:==:this . querySelector ( ' gaia - buttons . cancel ' ) ;
var teal400 = exports . teal400 = ' # 26a69a ' ; var teal500:==:exports . teal500    ' # 009688 ' ;
var movie = movies [ i ] . title ; var cast:==:movies [ i ] . cast ;
var fstream = require ( ' fstream ' ) ; var zlib:==:require ( ' zlib ' ) ;
var o = this . o = $ . extend ( , this . _ o ) ; var lang:==:o . language ;
var unique = opts . unique ; var kind:==:opts . kind  |  |  ' var ' ;
var containerSize = _ ref2 . containerSize ; var offset:==:_ ref2 . offset ;
var button = buttons [ i ] ; var title:==:button . title ;
var type = entity . type ; var info:==:entity . info ;
var len = rules . length ; var pos:==:state . pos ;
var dialer = launchApp ( ' dialer ' ) ; var contacts:==:launchApp ( ' contacts ' ) ;
var getValue = localUtils . getValue ; var parseField:==:localUtils . parseField ;
var abs = Math . abs ; var cos:==:Math . cos ;
var URL = window . webkitURL  |  |  window . URL ; var rtcSessionDescription:==:window . mozrtcSessionDescription  |  |  window . webkitrtcSessionDescription  |  |  window . rtcSessionDescription ;
var plugin = getByName ( type . plugins , key ) ; var stats:==:changedPlugin . stats ;
var win = window ; var location:==:win . location ;
var gulp = require ( ' gulp ' ) ; var glob:==:require ( ' glob ' ) ;
var draftModifier = require ( ' draftModifier ' ) ; var draftPasteProcessor:==:require ( ' draftPasteProcessor ' ) ;
var createOperatorToken = traceur . codegeneration . parseTreeFactory . createOperatorToken ; var parseTreeTransformer:==:traceur . codegeneration . parseTreeTransformer ;
var div = document . createElement ( ' div ' ) ; var graph:==:editorUi . editor . graph ;
var createMemberExpression = parseTreeFactory . createMemberExpression ; var createReturnStatement:==:parseTreeFactory . createReturnStatement ;
var lineNode = lineEntry . lineNode ; var n:==:lineNode ;
var belongsTo = ds . belongsTo ; var run:==:ember . run ;
var fs = require ( ' fs ' ) ; var all:==:Promise . all . bind ( Promise ) ;
var destination = this . destination ; var predicate:==:this . predicate ;
var purple500 = exports . purple500 = ' # 9c27b0 ' ; var purple600:==:exports . purple600    ' # 8e24aa ' ;
var mkdirp = require ( ' mkdirp ' ) ; var mout:==:require ( ' mout ' ) ;
var x = geometry . x ; var y:==:geometry . y ;
var babel = require ( ' babelify ' ) ; var browserify:==:require ( ' browserify ' ) ;
var to = changes . to ; var from:==:changes . from ;
var parameterList = this . transformAny ( tree . parameterList ) ; var body:==:this . transformAny ( tree . body ) ;
var orientation = this . options . orientation . axis ; var start:==:util . convert ( this . body . range . start , ' Number ' ) ;
var enterClass = data . enterClass ; var enterActiveClass:==:data . enterActiveClass ;
var gl = that . gl ; var program:==:that . program ;
var forOfStatement = traceur . syntax . trees . forOfStatement ; var functionDeclaration:==:traceur . syntax . trees . functionDeclaration ;
var k = bn . fromBits ( h . toBits ( vectors [ i ] . k ) ) ; var r:==:bn . fromBits ( h . toBits ( vectors [ i ] . r ) ) ;
var gltf = model . gltf ; var bufferViews:==:gltf . bufferViews ;
var Marked = require ( ' Marked ' ) ; var unindent:==:require ( ' unindent ' ) ;
var helperNode1 = helper . getNode ( ' helperNode1 ' ) ; var t:==:date . now ( ) ;
var signs = this . signs ; var gcp:==:this . gcp ;
var req = requestState . req ; var res:==:requestState . res ;
var filter = require ( ' gulp - filter ' ) ; var fs:==:require ( ' fs ' ) ;
var React = require ( ' React ' ) ; var reactComponentWithPureRenderMixin:==:require ( ' reactComponentWithPureRenderMixin ' ) ;
var trigger = t . trigger ; var renderOverlay:==:t . renderOverlay ;
var scrollViewManager = require ( ' nativeModules ' ) ; var getInstanceFromNode:==:require ( ' reactNativeComponentTree ' ) ;
var high = options . high ; var direction:==:options . direction ;
var Rx = document . Rx ; var helpers:==:Rx . helpers ;
var panel = meta . panel ; var nodes:==:panel . nodes ;
var cell = iPython . notebook . get_cell ( index ) ; var outputs:==:cell . output_area . outputs ;
var basename = entry . basename ; var pathname:==:entry . pathname ;
var domNamespaces = require ( ' domNamespaces ' ) ; var domProperty:==:require ( ' domProperty ' ) ;
var Log = exports . Log = _ _ webpack_require _ _ ( 300 ) ; var oidcClient:==:exports . oidcClient    _ _ webpack_require _ _ ( 301 ) ;
var automate = imports . automate ; var c9:==:imports . c9 ;
var config = this . config ; var dialog:==:this . dialog    $ . openPicker ( this . gethtml ( ) ) ;
var system = this . system ; var hash:==:system . hash ( data ) ;
var display = this . removed ? ' none ' : style . display ; var order:==:style . order ;
var y = readmpInt ( der , ' y ' ) ; var x:==:readmpInt ( der , ' x ' ) ;
var images = options . image  |  |  options . images  |  |  page . photos  |  |  [ ] ; var description:==:options . description  |  |  page . description  |  |  page . excerpt  |  |  content  |  |  config . description ;
var overscanCellsCount = _ ref . overscanCellsCount ; var scrollDirection:==:_ ref . scrollDirection ;
var disableHeight = _ props . disableHeight ; var disableWidth:==:_ props . disableWidth ;
var levels = hls . levels ; var autoLevelCapping:==:hls . autoLevelCapping ;
var graph = graphSeries . getGraph ( ) ; var data:==:graph . data ;
var htmlElement = scope . wrappers . htmlElement ; var getInnerhtml:==:scope . getInnerhtml ;
var tagdict = main . tagdict ; var methods:==:params . methods ;
var docId = data . docId ; var newLineChar:==:data . newLineChar  |  |  ' ' ;
var o = open [ k ] = ' \u001b [ ' + colorNums [ k ] + ' m ' ; var c:==:close [ k ]    ' \u001b [ 39 m ' ;
var value = that . value ( ) ; var options:==:selector . options ;
var s = this . _ destroyRootHostViewScope ( ) ; var hostView:==:view_ref_1 . internalView ( hostViewRef ) ;
var useragent = Npm . require ( ' useragent ' ) ; var send:==:Npm . require ( ' send ' ) ;
var y = plane . normal . y ; var z:==:plane . normal . z ;
var type = unbundle ( layer . type ) ; var ref:==:unbundle ( layer . ref ) ;
var createFinally = parseTreeFactory . createFinally ; var createIfStatement:==:parseTreeFactory . createIfStatement ;
var path = require ( ' path ' ) ; var debug:==:require ( ' debug ' ) ( ' generate ' ) ;
var svgUtil = powerbi . visuals . svgUtil ; var tooltipManager:==:powerbi . visuals . tooltipManager ;
var sortedRows = g . sortedRows ( ) ; var w:==:this . width ;
var util = imports . util ; var menus:==:imports . menus ;
var d = when . defer ( ) , cancel = this . cancel ; var projection:==:globe . projection ;
var dataLabelColor = powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . dataLabelColor , solid : color : defaultColor ) ; var dataLabelText:==:powerbi . dataViewObject . getValue ( referenceLineObject , referenceLineProps . dataLabelText , visuals . labelText . value ) ;
var cy = shape . cy ; var r:==:shape . r ;
var treeSnapshot = flush . treeSnapshot ; var operations:==:flush . operations ;
var map = omap . _ map ; var list:==:omap . _ list ;
var realloc = Module . _ realloc ; var writeStringToMemory:==:module . writeStringToMemory ;
var isstopped = lineDotChart . defaultSettings . isstopped ; var duration:==:lineDotChart . defaultSettings . duration ;
var separator = element . data ( ' split ' )  |  |  element . data ( ' separator ' )  |  |  ' + ' ; var short:==:! helper . isFalse ( element . data ( ' short ' ) ) ;
var fmt = split_fmt ( f ) ; var l:==:fmt . length , lat    fmt [ l-1 ] . indexOf ( ' @ ' ) ;
var near = camera . frustum . near ; var far:==:camera . frustum . far ;
var stack = state . stack ; var length:==:data . length ;
var oApp = this . _ oApp ; var oPage:==:this . _ oPage ;
var start = message . data . start ; var end:==:message . data . end ;
var CONTENT_TYPE_HEADER = goog . net . xhrIo . content_type_header ; var content_transfer_encoding:==:goog . net . xhrIo . content_transfer_encoding ;
var s = this . _ detachViewInContainerScope ( ) ; var parentView:==:view_ref_1 . internalView ( viewContainerLocation . parentView ) ;
var rowData = _ ref . rowData ; var style:==:_ ref . style ;
var Plugin = imports . Plugin ; var finder:==:imports . finder ;
var el = this . el ; var scene:==:this . scene ;
var d3 = _ addDiv ( ' d3 ' ) , d4 = _ addDiv ( ' d4 ' ) ; var c:==:_ jsPlumb . connect ( source : d3 , target : d4 , anchors : [ ' continuous ' , ' continuous ' ] ) ;
var asc = $ . inArray ( ' asc ' , column . asSorting ) ! = = -1 ; var desc:==:$ . inArray ( ' desc ' , column . asSorting ) !    -1 ;
var passport = require ( ' passport ' ) ; var nconf:==:require ( ' nconf ' ) ;
var L10n = navigator . mozL10n . _ getInternalapi ( ) ; var context:==:l10n . context ;
var i d = this . i d ; var plugins:==:JSON . parse ( this . preferences . getString ( ' pluginsData ' , ' [ ] ' ) ) ;
var height = defaultValue ( options . height , 0 . 0 ) ; var perPositionHeight:==:defaultValue ( options . perPositionHeight , false ) ;
var path      = require ( ' path ' ) ; var chalk:==:require ( ' chalk ' ) ;
var appearClass = data . appearClass ; var appearToClass:==:data . appearToClass ;
var geo = ( geometry instanceof THREE . bufferGeometry ) ? new three . geometry ( ) . fromBufferGeometry ( geometry ) : geometry ; var faces:==:geo . faces ;
var alpha = grunt . option ( ' alpha ' )  |  |  false ; var env:==:process . env ;
var n = + conf . n ; var p:==:path . posix ;
var theme = getAttribute ( parent , ' theme ' )  |  |  uiSelectConfig . theme ; var multi:==:angular . isDefined ( getAttribute ( parent , ' multiple ' ) ) ;
var position = data . position ; var act:==:this . actions [ i ]    kind : kind ;
var paintType = this . paintType ; var tilingType:==:this . tilingType ;
var commands = rconf . commands ; var deploy:==:commands & & commands . deploy ;
var dictionaryLengths = lzwState . dictionaryLengths ; var dictionaryPrevCodes:==:lzwState . dictionaryPrevCodes ;
var props = this . props ; var x:==:extractNumber ( props . x , 0 ) ;
var frame = this . frame ; var synth:==:this . synth ;
var resizable = options . resizable ; var onResize:==:options . onResize ;
var dy1 = Math . max ( 0 , Math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' dy1 ' , this . dy1 ) ) ) ) ; var dx1:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx1 ' , this . dx1 ) ) ) ) ;
var n = new conditionalNode ( condition , a , b ) ; var e:==:new constantNode ( 5 ) ;
var height = parseInt ( $ ( obj . box ) . height ( ) ) ; var width:==:parseInt ( $ ( obj . box ) . width ( ) ) ;
var disabledBackgroundColor = props . disabledBackgroundColor ; var disabledLabelColor:==:props . disabledLabelColor ;
var path = file . params . path ; var extname:==:pathFn . extname ( path ) ;
var budgets = this . _ budgets ; var length:==:budgets . length ;
var toUnicodeMap = coreFonts . toUnicodeMap ; var getFontType:==:coreFonts . getFontType ;
var remote = data . basic [ 0 ] . event . remote ; var title:==:busy . querySelector ( ' # ' + makeFirstEventid ( ' title ' ) ) ;
var from = e . getAttribute ( ' from ' ) ; var to:==:e . getAttribute ( ' to ' ) ;
var unsupportedMediaTypeError = errors . unsupportedMediaTypeError ; var shallowCopy:==:utils . shallowCopy ;
var builtinFuncs = wordRegexp ( builtinFuncsWords ) ; var builtinObjs:==:wordRegexp ( builtinObjsWords ) ;
var x = parsePercent ( positionInfo . x , containerWidth ) ; var y:==:parsePercent ( positionInfo . y , containerHeight ) ;
var currentConfig = settings . build . currentConfig ; var buildConfiguration:==:settings . buildConfigurations [ currentConfig ] ;
var a = document . createElement ( ' a ' ) ; var b:==:document . createElement ( ' b ' ) ;
var polyline = item . polyline ; var show:==:entity . isShowing & & ( ! defined ( showProperty )  |  |  showProperty . getValue ( time ) ) ;
var instance = options . instance ; var invertUV:==:options . invertUV  |  |  false ;
var app_id = params . qstring . app_id ; var validate:==:ob . validateUserForDataReadapi ;
var originalTag = originalTags [ originalIndex ] ; var highlightTag:==:highlightTags [ highlightIndex ] ;
var value = this . value ; var length:==:value . length ;
var textDivs = task . _ textDivs ; var capability:==:task . _ capability ;
var getSampleStateForTesting = require ( ' getSampleStateForTesting ' ) ; var insertFragmentIntoContentState:==:require ( ' insertFragmentIntoContentState ' ) ;
var resourceNotFoundError = errors . resourceNotFoundError ; var unsupportedMediaTypeError:==:errors . unsupportedMediaTypeError ;
var webChannelDebug = goog . labs . net . webChannel . webChannelDebug ; var channelRequest:==:goog . labs . net . webChannel . channelRequest ;
var i = ' start i ' ; var j:==:' start j ' ;
var dropTarget = defaultValue ( options . dropTarget , viewer . container ) ; var clampToGround:==:defaultValue ( options . clampToGround , true ) ;
var hierarchy = results . hierarchy ; var polygons:==:results . polygons ;
var path = this . path . eval ( context ) ; var rootpath:==:this . _ fileInfo & & this . _ fileInfo . rootpath ;
var writeCon = finalOptions . writeConcern ? finalOptions . writeConcern : ; var capabilities:==:self . s . topology . capabilities ( ) ;
var height = ( data . height ) ? data . height : 2 ; var border:==:( data . border ) ? data . border : 0 ;
var beforeExpr = beforeExpr : true ; var startsExpr:==:startsExpr : true ;
var tab = frame & & tabs . findTab ( frame . path ) ; var editor:==:tab & & tab . isActive ( ) & & tab . editor ;
var tabs = document . getElementById ( ' tabs ' ) ; var tabPages:==:document . getElementById ( ' tabPages ' ) ;
var align = _ ref3$align = = = undefined ? ' auto ' : _ ref3$align ; var containerSize:==:_ ref3 . containerSize ;
var m = math . matrix ( [ [ 2 , 0 ] , [ 4 , 0 ] ] , ' sparse ' ) ; var r:==:multiply ( m , math . matrix ( [ [ 2 , 0 ] , [ 4 , 0 ] ] , ' sparse ' ) ) ;
var start = param . start ; var count:==:param . count ;
var x = clientX + scroll . x ; var y:==:clientY + scroll . y ;
var streamqueue = require ( ' streamqueue ' ) ; var merge:==:require ( ' merge - stream ' ) ;
var blockTree = require ( ' blockTree ' ) ; var contentState:==:require ( ' contentState ' ) ;
var z = model . get ( ' z ' ) ; var zlevel:==:model . get ( ' zlevel ' ) ;
var add = new operatorNode ( ' + ' , ' add ' , [ a , b ] ) ; var bar:==:new accessorNode ( add , new indexNode ( [ new constantNode ( ' bar ' ) ] ) ) ;
var manifest = this . getEntryManifest ( manifesturl ) ; var locales:==:manifest . locales ;
var width = props . width ; var isScrolling:==:state . isScrolling ;
var utils = require ( ' utils ' ) ; var server:==:require ( ' webserver ' ) . create ( ) ;
var password = req . fields . password ; var repassword:==:req . fields . repassword ;
var uniformState = context . uniformState ; var resolutionScale:==:uniformState . resolutionScale ;
var p = node . parent ; var l:==:node . child1 ;
var path = derivedInfo . path ; var scope:==:logic . subscope ( this , _ path : path ) ;
var p = new Date ( self . options . position . start ) ; var child:==:$ ( ' . cal - cell1 : first - child . cal - month - day ' , this ) ;
var streamedObject = args . streamedObject ; var stream:==:args . stream ;
var array = state . array ; var index:==:state . index ;
var method = ctx . method ; var req:==:ctx . req ;
var pathList = ref . pathList ; var pathMap:==:ref . pathMap ;
var crypto = require ( ' crypto ' ) ; var xml2js:==:require ( ' xml2js ' ) ;
var debug = imports [ ' plugin . debug ' ] ; var browser:==:imports [ ' preview . browser ' ] ;
var b = fulfillThenableSoon ( ' b ' , 30 ) ; var c:==:fulfillSoon ( ' c ' , 10 ) ;
var p = pg . params ; var g:==:pg . grads ;
var basename = path . basename ; var extname:==:path . extname ;
var model = me . _ model = getBaseModel ( opts ) ; var active:==:me . _ active ;
var points = this . _ points ; var offsets:==:this . _ offsets ;
var Pointer_stringify = Module . Pointer_stringify ; var _ str_to_html:==:Module . _ str_to_html ;
var telegrambot = config . telegrambot ; var utc:==:moment . utc ;
var vertexShaderSource = shaderProgram . vertexShaderSource ; var fragmentShaderSource:==:shaderProgram . fragmentShaderSource ;
var beforeOpeningRoundBrace = this . _ beforeOpeningRoundBrace ; var beforeOpeningCurlyBrace:==:this . _ beforeOpeningCurlyBrace ;
var createCallStatement = parseTreeFactory . createCallStatement ; var createCallback:==:parseTreeFactory . createCallback ;
var node = point . node ; var index:==:point . index ;
var oidcClient = exports . oidcClient = _ _ webpack_require _ _ ( 301 ) ; var webStorageStateStore:==:exports . webStorageStateStore    _ _ webpack_require _ _ ( 303 ) ;
var _ saveSetjmp = module [ ' _ saveSetjmp ' ] = asm [ ' _ saveSetjmp ' ] ; var _ exitPrediction:==:module [ ' _ exitPrediction ' ]    asm [ ' _ exitPrediction ' ] ;
var x = cc . bezierAt ( xa , xb , xc , xd , dt ) ; var y:==:cc . bezierAt ( ya , yb , yc , yd , dt ) ;
var startDate = this . arg ( ' startDate ' ) ; var endDate:==:this . arg ( ' endDate ' ) ;
var caption = options . caption ; var noscroll:==:options . noscroll ;
var expect = require ( ' chai ' ) . expect ; var u:==:fis . util ;
var provider = this . provider ; var sel:==:provider . selectedItems ;
var object = objects [ o ] . object ; var geometry:==:object . geometry ;
var dragNode = ddm . activeDrag . get ( ' dragNode ' ) ; var proxyNode:==:instance . get ( ' proxyNode ' ) ;
var passwordVault = windows . security . credentials . passwordVault ; var passwordCredential:==:windows . security . credentials . passwordCredential ;
var utilities = $ . fn . utilities ; var CONST:==:$ . fn . utilities . CONST ;
var nodes = this . nodes ; var nodeCount:==:this . nodeCount ;
var tileheight = json [ ' tileheight ' ] ; var tilewidth:==:json [ ' tilewidth ' ] ;
var hint = options . hint ; var maxTimems:==:options . maxTimems ;
var archiver = require ( ' archiver ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var val2 = w2utils . isDate ( val2 , w2utils . settings . dateFormat , true ) ; var val3:==:w2utils . isDate ( val3 , w2utils . settings . dateFormat , true ) ;
var allowExt = getExtRegex ( this . settings . allowExt ) ; var denyExt:==:getExtRegex ( this . settings . denyExt ) ;
var inherits = require ( ' util ' ) . inherits ; var spawn:==:require ( ' child_process ' ) . spawn ;
var io = board . io ; var address:==:opts . address  |  |  this . ADDRESSES [ 0 ] ;
var granularity = polygonGeometry . _ granularity ; var height:==:polygonGeometry . _ height ;
var passport = require ( ' passport ' ) ; var clone:==:require ( ' clone ' ) ;
var input = this . _ input ; var whitespace:==:matchAt ( whitespaceRegex , input , pos ) [ 0 ] ;
var a = names [ i ] ; var name:==:a . asname      null ? a . name . v : a . asname . v ;
var height = billboard . height ; var scale:==:billboard . scale ;
var pickIds = model . _ pickIds ; var length:==:pickIds . length ;
var nconf = require ( ' nconf ' ) ; var mongoose:==:require ( ' mongoose ' ) ;
var NEW_EXPRESSION = ' NEW_EXPRESSION ' ; var OBJECT_LITERAL:==:' OBJECT_LITERAL ' ;
var p3 = triangleNode . getAttribute ( ' p3 ' ) ; var pid:==:triangleNode . getAttribute ( ' pid ' ) ;
var long = ppo . long . result ; var macd:==:ppo . macd ;
var x = mouse . x + that . _ _ dragX ; var y:==:mouse . y + that . _ _ dragY ;
var tcpConnectWrap = process . binding ( ' tcp_wrap ' ) . tcpConnectWrap ; var writeWrap:==:process . binding ( ' stream_wrap ' ) . writeWrap ;
var debounce = require ( ' debounce ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var name = prop . name ; var name$ _:==:prop . name$ _ ;
var contentBox = instance . get ( ' contentBox ' ) ; var labelEl:==:instance . get ( ' labelEl ' ) ;
var d = new indexNode ( [ new constantNode ( 2 ) , new constantNode ( 1 ) , new constantNode ( 3 ) ] ) ; var e:==:new indexNode ( [ new constantNode ( 2 ) , new constantNode ( 4 ) ] ) ;
var name = args [ 0 ] . name ; var xobj:==:xobjs . get ( name ) ;
var eventPluginHub = require ( ' eventPluginHub ' ) ; var eventPropagators:==:require ( ' eventPropagators ' ) ;
var reactDefaultBatchingStrategy = require ( ' reactDefaultBatchingStrategy ' ) ; var reactEmptyComponent:==:require ( ' reactEmptyComponent ' ) ;
var windowLow = volume . windowLow ; var windowHigh:==:volume . windowHigh ;
var elements = this . transformList ( tree . elements ) ; var annotations:==:this . transformList ( tree . annotations ) ;
var end_with_newline = ( options . end_with_newline = = = undefined ) ? false : options . end_with_newline ; var newline_between_rules:==:( options . newline_between_rules      undefined ) ? true : options . newline_between_rules ;
var session = util . mixinEvents ( util . module ( ' session ' ) ) ; var assert:==:util . assert ;
var editable = ( this . options . editable . updateTime  |  |  this . options . editable . updateGroup  |  |  this . editable = = = true ) & & this . editable ! = = false ; var className:==:( this . data . className ? ' ' + this . data . className : '' ) + ( this . selected ? ' vis - selected ' : '' ) + ( editable ? ' vis - editable ' : ' vis - readonly ' ) ;
var services = architectApp . services ; var serviceToPlugin:==:architectApp . serviceToPlugin ;
var tr = graph . view . translate ; var scale:==:graph . view . scale ;
var debug = require ( ' debug ' ) ( ' memory ' ) ; var util:==:require ( ' util ' ) ;
var frameId = event . data . frameId ; var frame:==:this . _ frames [ frameId ] ;
var send = $ scope . send ; var currency:==:$ scope . send . currency . slice ( 0 , 3 ) . toUpperCase ( ) ;
var menus = imports . menus ; var gotoline:==:imports [ ' ace . gotoline ' ] ;
var proxy   = httpProxy . createProxyServer ( opt . get ( ' proxyOptions ' ) . set ( ' target ' , opt . get ( ' target ' ) ) . tojs ( ) ) ; var target:==:opt . get ( ' target ' ) ;
var Node = scope . wrappers . Node ; var enqueueMutation:==:scope . enqueueMutation ;
var File = source . File ; var Data:==:hexo . model ( ' Data ' ) ;
var Comment = window . Comment ; var domParser:==:window . domParser ;
var push = deletedIds . push ; var indexOf:==:deletedIds . indexOf ;
var retained = this . _ retained ; var retainedKeys:==:this . _ retainedKeys ;
var c = processDiagramCanvas . g . ellipse ( targetx , targety , 2 , 2 ) . attr ( fill : color . red ) ; var c:==:processDiagramCanvas . g . ellipse ( nextSrcx , nextSrcy , 2 , 2 ) . attr ( fill : color . red ) ;
var proxy = bs . options . get ( ' proxy ' ) ; var server:==:bs . options . get ( ' server ' ) ;
var glob = Promise . promisify ( require ( ' glob ' ) ) ; var fs:==:Promise . promisifyAll ( require ( ' fs ' ) ) ;
var reactNative = require ( ' reactNative ' ) ; var statusBar:==:require ( ' statusBar ' ) ;
var info = imports . info ; var util:==:imports . util ;
var section = contents . createChild ( ' div ' , ' section ' ) ; var container:==:section . createChild ( ' div ' , ' settings - list - container ' ) ;
var option = document . createElement ( ' option ' ) ; var serialNumber:==:cryptographicBuffer . encodeToHexString ( cryptographicBuffer . createFromByteArray ( cert . serialNumber ) ) ;
var operationalError = errors . operationalError ; var originatesFromRejection:==:errors . originatesFromRejection ;
var Editor = imports . Editor ; var List:==:imports . List ;
var accessToken = response . accessToken ; var expiresIn:==:response . expiresIn ;
var a = parseInt ( req . params . a , 10 ) ; var b:==:parseInt ( req . params . b , 10 ) ;
var EMPTY_STATEMENT = ' EMPTY_STATEMENT ' ; var EXPORT_DECLARATION:==:' EXPORT_DECLARATION ' ;
var flatCoordinates = this . flatCoordinates ; var endss:==:this . endss _ ;
var n4 = new redNode ( i d : ' n4',type : ' abc ' ) ; var n5:==:new redNode ( i d : ' n5',type : ' abc ' ) ;
var title = tokens [ idx ] . title ? ( ' title= ' ' + escapeHtml ( replaceEntities ( tokens [ idx ] . title ) ) + ' ' ' ) : '' ; var alt:==:' alt ' ' + ( tokens [ idx ] . alt ? escapeHtml ( replaceEntities ( unescapeMd ( tokens [ idx ] . alt ) ) ) : '' ) + ' ' ' ;
var x = itemLayout . x ; var y:==:itemLayout . y ;
var expectedResult = expectations [ i ] . expectedResult ; var command:==:expectations [ i ] . command ;
var Comment = db . model ( ' gh4073_1 ' , commentSchema ) ; var blogPost:==:db . model ( ' gh4073_2 ' , blogPostSchema ) ;
var handler2 = sinon . spy ( function handler2 ( ) ) ; var handler3:==:sinon . spy ( function handler3 ( ) ) ;
var barGroup = this . _ displayables . barGroup ; var otherAxisInverse:==:( this . _ dataShadowInfo  |  |  ) . otherAxisInverse ;
var fixedDataTableRowBuffer = require ( ' fixedDataTableRowBuffer ' ) ; var fixedDataTableRow:==:require ( ' fixedDataTableRow . react ' ) ;
var responderTouchHistoryStore = require ( ' responderTouchHistoryStore ' ) ; var accumulate:==:require ( ' accumulate ' ) ;
var entityAspect = context . entityAspect ; var oldValue:==:context . oldValue ;
var supportConstantColor = exports . supportConstantColor = ' aliceblue | antiquewhite | aqua | aquamarine | azure | beige | bisque | black | blanchedalmond | blue | blueviolet | brown | burlywood | cadetblue | chartreuse | chocolate | coral | cornflowerblue | cornsilk | crimson | cyan | darkblue | darkcyan | darkgoldenrod | darkgray | darkgreen | darkgrey | darkkhaki | darkmagenta | darkolivegreen | darkorange | darkorchid | darkred | darksalmon | darkseagreen | darkslateblue | darkslategray | darkslategrey | darkturquoise | darkviolet | deeppink | deepskyblue | dimgray | dimgrey | dodgerblue | firebrick | floralwhite | forestgreen | fuchsia | gainsboro | ghostwhite | gold | goldenrod | gray | green | greenyellow | grey | honeydew | hotpink | indianred | indigo | ivory | khaki | lavender | lavenderblush | lawngreen | lemonchiffon | lightblue | lightcoral | lightcyan | lightgoldenrodyellow | lightgray | lightgreen | lightgrey | lightpink | lightsalmon | lightseagreen | lightskyblue | lightslategray | lightslategrey | lightsteelblue | lightyellow | lime | limegreen | linen | magenta | maroon | mediumaquamarine | mediumblue | mediumorchid | mediumpurple | mediumseagreen | mediumslateblue | mediumspringgreen | mediumturquoise | mediumvioletred | midnightblue | mintcream | mistyrose | moccasin | navajowhite | navy | oldlace | olive | olivedrab | orange | orangered | orchid | palegoldenrod | palegreen | paleturquoise | palevioletred | papayawhip | peachpuff | peru | pink | plum | powderblue | purple | rebeccapurple | red | rosybrown | royalblue | saddlebrown | salmon | sandybrown | seagreen | seashell | sienna | silver | skyblue | slateblue | slategray | slategrey | snow | springgreen | steelblue | tan | teal | thistle | tomato | turquoise | violet | wheat | white | whitesmoke | yellow | yellowgreen ' ; var supportConstantFonts:==:exports . supportConstantFonts    ' arial | century | comic | courier | cursive | fantasy | garamond | georgia | helvetica | impact | lucida | symbol | system | tahoma | times | trebuchet | utopia | verdana | webdings | sans - serif | serif | monospace ' ;
var maximumHeights = wallGeometry . _ maximumHeights ; var vertexFormat:==:wallGeometry . _ vertexFormat ;
var error = batch ( firebaseObject . $ $ error , firebaseObject ) ; var initComplete:==:batch ( _ initComplete ) ;
var parent = lastNode . parent ; var editor:==:lastNode . editor ;
var a = fulfillSoon ( ' a ' , 40 ) ; var b:==:fulfillBuiltInSoon ( ' b ' , 30 ) ;
var styleSheet = require ( ' styleSheet ' ) ; var switch:==:require ( ' switch ' ) ;
var background = getStyleProperty ( item , styleContextStack , ' background ' , null ) ; var lineHeight:==:getStyleProperty ( item , styleContextStack , ' lineHeight ' , 1 ) ;
var index = point . _ index ; var model:==:point . _ model ;
var width = shape . width ; var height:==:shape . height ;
var isFunction = _ _ dependency3 _ _ . isFunction ; var isArray:==:_ _ dependency3 _ _ . isArray ;
var debug = require ( ' debug ' ) ( ' express : router : layer ' ) ; var hasOwnProperty:==:object . prototype . hasOwnProperty ;
var _ strcpy = Module [ ' _ strcpy ' ] = asm [ ' _ strcpy ' ] ; var dynCall_viiiii:==:Module [ ' dynCall_viiiii ' ]    asm [ ' dynCall_viiiii ' ] ;
var c = domListFactory ( selector , context ) ; var n:==:c . nodes . length ;
var onRowClick = _ props3 . onRowClick ; var onRowDoubleClick:==:_ props3 . onRowDoubleClick ;
var white = exports . white = ' # ffffff ' ; var transparent:==:exports . transparent    ' rgba ( 0 , 0 , 0 , 0 ) ' ;
var userId = userIds . userId ; var clientId:==:userIds . clientId ;
var stride = primitive . stride ; var vcount:==:primitive . vcount ;
var latitude = document . getElementById ( ' latitude ' ) ; var longitude:==:document . getElementById ( ' longitude ' ) ;
var http = imports . http ; var fs:==:require ( ' fs ' ) ;
var fromValue = rangeColor . fromValue ; var toValue:==:rangeColor . toValue ;
var vPad = this . get ( ' vPad ' ) ; var hPad:==:this . get ( ' hPad ' ) ;
var style = _ props . style ; var subtitle:==:_ props . subtitle ;
var i d = updater . entity . i d ; var dynamicUpdater:==:this . _ dynamicUpdaters . get ( i d ) ;
var collapsed = node . get ( ' collapsed ' ) ; var children:==:node . get ( ' children ' ) ;
var completed = todos . completed ( ) . length ; var remaining:==:todos . remaining ( ) . length ;
var localTo = intersecttrimesh_localto ; var worldIntersectPoint:==:intersecttrimesh_worldintersectpoint ;
var invariant = require ( ' invariant ' ) ; var nullthrows:==:require ( ' nullthrows ' ) ;
var scale = options . scale ; var defaultViewport:==:options . defaultViewport ;
var offset = options . offset ; var sideOrientation:==:options . sideOrientation ;
var isIE = scope . isIE ; var upgradeDocumentTree:==:scope . upgradeDocumentTree ;
var observed = observable . view . _ observed ; var updateObservable:==:observable . view . _ updateObservable ;
var setAccessor = traceur . syntax . trees . setAccessor ; var spreadExpression:==:traceur . syntax . trees . spreadExpression ;
var SCALE_BY_DISTANCE_INDEX = Billboard . SCALE_BY_DISTANCE_INDEX = 11 ; var TRANSLUCENCY_BY_DISTANCE_INDEX:==:Billboard . TRANSLUCENCY_BY_DISTANCE_INDEX    12 ;
var left = leftFunc ( segment . leftCol ) ; var right:==:rightFunc ( segment . rightCol ) ;
var activeOpacity = seriesModel . get ( ' activeOpacity ' ) ; var lineStyle:==:seriesModel . getModel ( ' lineStyle . normal ' ) . getLineStyle ( ) ;
var path = require ( ' path ' ) ; var uuid:==:require ( ' node - uuid ' ) ;
var POSITION_INDEX = pointPrimitive . position_index ; var color_index:==:pointPrimitive . color_index ;
var initializeModules = scope . initializeModules ; var isie:==:scope . isie ;
var scope = exec_state . frame ( ) . scope ( i ) ; var position:==:positions [ i ] ;
var bearing = window . plugin . distanceToPortal . currentLoc . bearingTo ( ll ) ; var bearingWord:==:window . plugin . distanceToPortal . currentLoc . bearingWordTo ( ll ) ;
var matrixMath = require ( ' matrixMath ' ) ; var platform:==:require ( ' platform ' ) ;
var validRange = semver . validRange ; var inc:==:semver . inc ;
var roundTrips = sockjs [ protocol ] . roundTrips  |  |  1 ; var to:==:( ( that . _ options . rto  |  |  0 ) * roundTrips )  |  |  5000 ;
var dataProvider = this . _ dataProvider ; var timelineData:==:this . _ timelineData ( ) ;
var dataIndex = el . dataIndex ; var dataType:==:el . dataType ;
var action = notebook . keyboard_manager . actions . get ( action_id ) ; var shortcuts:==:notebook . keyboard_manager . command_shortcuts . get_action_shortcuts ( action_id ) ;
var backAndroid = require ( ' backAndroid ' ) ; var f8TabsView:==:require ( ' f8TabsView ' ) ;
var a = new assignmentNode ( new symbolNode ( ' a ' ) , value ) ; var q:==:new assignmentNode ( new symbolNode ( ' q ' ) , a ) ;
var assert = require ( ' assert ' ) ; var Parser:==:require ( ' cst ' ) . Parser ;
var subscribable = new ko . subscribable ( ) . extend ( rateLimit : method : ' notifyAtFixedRate ' , timeout : 50 ) ; var notifySpy:==:jasmine . createSpy ( ' notifySpy ' ) ;
var p     = require ( ' path ' ) ; var chalk:==:require ( ' chalk ' ) ;
var h = this . history ; var i:==:h . indexOf ( name ) ;
var eventPluginHub = require ( ' eventPluginHub ' ) ; var eventPluginRegistry:==:require ( ' eventPluginRegistry ' ) ;
var APN_TYPES = apnConst . apn_types ; var apn_selections_key:==:apnConst . apn_selections_key ;
var nodes = cluster . nodes ( data ) ; var links:==:cluster . links ( nodes ) ;
var Controller = _ fxosMvcDistMvc . controller ; var app:==:_ appJsModelsApp [ ' default ' ] ;
var sourceLocation = _ . sourceLocation ; var getLineInfo:==:_ . getLineInfo ;
var options = this . options ; var visibleGroupContainer:==:this . visibleGroupContainer ;
var FINALLY = ' FINALLY ' ; var FOR_IN_STATEMENT:==:' FOR_IN_STATEMENT ' ;
var select = rewriter . rewriteSelect ( this . selectItems , from ) ; var groupBy:==:rewriter . rewriteGroupBy ( this . groupByItems , from ) ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var datetimeFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' datetimeFieldTestObject ' ) ) ;
var createTables = window . createTables ; var destroyTables:==:window . destroyTables ;
var candidate = candidates . pop ( ) ; var lhs:==:get_lhs ( candidate ) ;
var redis = require ( ' redis ' ) ; var url:==:require ( ' url ' ) ;
var lookup = FS . lookupPath ( path , follow : true ) ; var node:==:lookup . node ;
var eventType = $ ( ' # eventType ' ) . val ( ) ; var reasons:==:inputMatrix [ eventType ] [ ' reasons ' ] ;
var second = parseInt ( kernings [ i ] . getAttribute ( ' second ' ) , 10 ) ; var amount:==:parseInt ( kernings [ i ] . getAttribute ( ' amount ' ) , 10 ) ;
var toneMapping = renderer . toneMapping ; var toneMappingExposure:==:renderer . toneMappingExposure ;
var legend = chart . legend ; var title:==:chart . titleBlock ;
var x = cx + dir [ 0 ] ; var y:==:cy + dir [ 1 ] ;
var actionTag = options [ ' actionTag ' ] ! = null ? options [ ' actionTag ' ] : 0 ; var visible:==:options [ ' visible ' ] !   null ? options [ ' visible ' ] : true ;
var copy   = angular . copy ; var extend:==:angular . extend ;
var keys = Object . keys ( ctx ) ; var length:==:keys . length ;
var gl = this . gl ; var projection:==:this . renderSession . projection ;
var halfAxes = box . halfAxes ; var u:==:matrix3 . getColumn ( halfAxes , 0 , scratchCartesianu ) ;
var ui = app . ns ( ' ui ' ) ; var ux:==:app . ns ( ' ux ' ) ;
var sensorReadingType = hasOrientationWithOptimizationGoal & & windows . devices . sensors . sensorReadingType ; var sensorOptimizationGoal:==:hasOrientationWithOptimizationGoal & & windows . devices . sensors . sensorOptimizationGoal ;
var UNSUPPORTED_FEATURES = sharedUtil . unsupported_features ; var invalidpdfException:==:sharedUtil . invalidpdfException ;
var naturalHeight = precomputedDimensions ? precomputedDimensions . naturalHeight : imageElement . naturalHeight ; var offsetWidth:==:precomputedDimensions ? precomputedDimensions . offsetWidth : naturalWidth ;
var context = this . context _ ; var contextFillState:==:this . contextFillState _ ;
var dirname = require ( ' path ' ) . dirname ; var assert:==:require ( ' assert ' ) ;
var v = this . value ; var t:==:( this . type     ' auto ' ) ? util . type ( v ) : this . type ;
var imul = stdlib . Math . imul ; var min:==:stdlib . Math . min ;
var shadowVolume = options . shadowVolume ; var vertexFormat:==:options . vertexFormat ;
var arrayPattern = traceur . syntax . trees . arrayPattern ; var arrowFunctionExpression:==:traceur . syntax . trees . arrowFunctionExpression ;
var store = new datastore ( tests . data . readOnlyItemFileTestTemplates . getTestData ( ' countries_withoutid ' ) ) ; var d:==:new doh . deferred ( ) ;
var commands = imports . commands ; var complete:==:imports [ ' language . complete ' ] ;
var alert = imports [ ' dialog . alert ' ] . show ; var question:==:imports [ ' dialog . question ' ] ;
var routes = exports . routes = internalPropTypes . routes ; var router:==:exports . router    routerShape ;
var scene = this . _ scene ; var globe:==:scene . _ globe ;
var input = msg . data . input ; var providers:==:this . providers ;
var breakpoints = session . $ breakpoints ; var decorations:==:session . $ decorations ;
var capLevelController = new config . capLevelController ( this ) ; var fpsController:==:new config . fpsController ( this ) ;
var orientation = this . options . orientation . item ; var point:==:this . dom . point ;
var w = Math . round ( img . width * s ) ; var h:==:Math . round ( img . height * s ) ;
var createDefineProperty = parseTreeFactory . createDefineProperty ; var createEmptyParameterList:==:parseTreeFactory . createEmptyParameterList ;
var pid = postEl . attr ( ' data - pid ' ) ; var index:==:parseInt ( postEl . attr ( ' data - index ' ) , 10 ) ;
var holes = options . holes  |  |  [ ] ; var depth:==:options . depth  |  |  0 ;
var dataSource = juggler . dataSource ; var modelBuilder:==:juggler . modelBuilder ;
var text = element ( by . binding ( ' text ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var React = require ( ' React ' ) ; var Header:==:require ( ' Header ' ) ;
var n = v1 . nodeSetValue ( ) ; var s:==:v2 . stringValue ( ) ;
var current = this . current ; var x:==:current . x , y    current . y ;
var totalColumns = this . wot . getSetting ( ' totalColumns ' ) ; var totalRows:==:this . wot . getSetting ( ' totalRows ' ) ;
var assert = require ( ' assert - plus ' ) ; var util:==:require ( ' util ' ) ;
var normals = data . normals ; var colors:==:data . colors ;
var SELENIUM_VERSION = process . env . SELENIUM_VERSION  |  |  ' 2 . 53 . 1 ' ; var FIREFOX_BIN:==:process . env . FIREFOX_BIN ;
var layerState = layerStates [ i ] ; var layer:==:layerState . layer ;
var cookieJar = require ( ' cookiejar ' ) . cookieJar ; var cookieAccess:==:require ( ' cookiejar ' ) . cookieAccessInfo ;
var variablesInFunction = variableBinder . variablesInFunction ; var variablesInBlock:==:variableBinder . variablesInBlock ;
var l = getLiteralString ( node . left ) ; var r:==:getLiteralString ( node . right ) ;
var position = entity . position ; var show:==:box . show ;
var createIdentifierExpression = parseTreeFactory . createIdentifierExpression ; var createMemberLookupExpression:==:parseTreeFactory . createMemberLookupExpression ;
var defaultRoute = router . defaultRoute ; var routeHandler:==:router . routeHandler ;
var container = config . container ; var svgUrl:==:config . svgUrl ;
var keys = Object . keys ( fromObj ) ; var len:==:keys . length ;
var x = pt . x ; var y:==:pt . y ;
var search = required ( config , ' search ' ) ; var replace:==:required ( config , ' replace ' ) ;
var semver = require ( ' semver ' ) ; var inherits:==:require ( ' util ' ) . inherits ;
var L = CMD . L ; var R:==:CMD . R ;
var strict = ! ! this . opts . strict ; var scope:==:path . scope ;
var cos = Math . cos ( theta ) ; var sin:==:Math . sin ( theta ) ;
var id1 = ' id1 ' ; var id2:==:' id2 ' ;
var amberA200 = exports . amberA200 = ' # ffd740 ' ; var amberA400:==:exports . amberA400    ' # ffc400 ' ;
var restore = this . options . restore ; var $ container:==:this . $ container ;
var ignoreCase = _ props . ignoreCase ; var onInputChange:==:_ props . onInputChange ;
var payload = args . payload ; var options:==:args . options ;
var code = res . code ; var errors:==:res . errors ;
var arrayComprehension = traceur . syntax . trees . arrayComprehension ; var arrayLiteralExpression:==:traceur . syntax . trees . arrayLiteralExpression ;
var title = options . title  |  |  gettext ( ' Are you sure ? ' ) ; var message:==:options . message  |  |  ' ' ;
var Test = mocha . Test ; var Hook:==:mocha . Hook ;
var LOG10E = stdlib . Math . LOG10E ; var PI:==:stdlib . Math . PI ;
var validatable = editable . validatable ; var destroy:==:validatable . destroy ;
var CALL_EXPRESSION = ' CALL_EXPRESSION ' ; var CALL_SIGNATURE:==:' CALL_SIGNATURE ' ;
var g2 = new pc . graphNode ( ' g2 ' ) ; var g3:==:new pc . graphNode ( ' g3 ' ) ;
var tmp = require ( ' tmp ' ) ; var request:==:require ( ' request ' ) ;
var estimateSvgTextHeight = powerbi . textMeasurementService . estimateSvgTextHeight ; var svgEllipsis:==:powerbi . textMeasurementService . svgEllipsis ;
var Widget = kendo . ui . Widget ; var dataSource:==:data . dataSource ;
var height = imgData . height ; var ctx:==:this . ctx ;
var stream = require ( ' stream ' ) ; var crypto:==:require ( ' crypto ' ) ;
var keyHandler = this . _ keyHandler . bind ( this ) ; var keypad:==:this . _ el . querySelector ( ' . pin - keypad ' ) ;
var c = ' print ( ' c ' ) ' ; var d:==:' ' d ' ' ;
var isInt = sharedUtil . isInt ; var isString:==:sharedUtil . isString ;
var orderItem = this . orderItem ; var itemOption:==:optionVm . itemOption ;
var req = resp . request ; var body:==:resp . httpResponse . body ;
var x = start . x + ( ( end . x - start . x ) * amount ) ; var y:==:start . y + ( ( end . y - start . y ) * amount ) ;
var Widget = kendo . ui . Widget ; var init:==:Widget . fn . init ;
var through = require ( ' through2 ' ) ; var os:==:require ( ' os ' ) ;
var notify   = require ( ' gulp - notify ' ) ; var header:==:require ( ' gulp - header ' ) ;
var theme = hexo . theme ; var i18n:==:theme . i18n ;
var minutesFormat = $ dateFormatter . minutesFormat ( format ) ; var secondsFormat:==:$ dateFormatter . secondsFormat ( format ) ;
var redis = config . redis ; var uuid:==:require ( ' uuid ' ) ;
var iTimeout = this . _ iTimeout ; var oApp:==:this . _ oApp ;
var webserver = require ( ' gulp - webserver ' ) ; var path:==:require ( ' path ' ) ;
var iccId = event . target . getAttribute ( ' stk - menu - item - iccId ' ) ; var identifier:==:event . target . getAttribute ( ' stk - help - item - identifier ' ) ;
var repo = file . meta . repo ; var ref:==:file . meta . ref ;
var indigoA400 = exports . indigoA400 = ' # 3d5afe ' ; var indigoA700:==:exports . indigoA700    ' # 304ffe ' ;
var empty = ! helper . isFalse ( element . data ( ' empty ' ) ) ; var trim:==:! helper . isFalse ( element . data ( ' trim ' ) ) ;
var elementInjector = elementInjectors [ this . _ elementInjectorIndex ] ; var directive:==:elementInjector . getDirectiveAtIndex ( this . _ directiveIndex ) ;
var a = Object . create ( Object . prototype ) ; var b:==:Object . create ( Object . prototype ) ;
var svg = d3 . select ( offsetElement ) . select ( ' svg ' ) ; var viewBox:==:( svg . node ( ) ) ? svg . attr ( ' viewBox ' ) : null ;
var imageLoader = hilo . imageLoader ; var scriptLoader:==:hilo . scriptLoader ;
var extractNumberSymbols = closurei18nExtractor . extractNumberSymbols ; var extractCurrencySymbols:==:closurei18nExtractor . extractCurrencySymbols ;
var y = Math . max ( Math . abs ( a . y ) , Math . abs ( b . y ) ) ; var z:==:Math . max ( Math . abs ( a . z ) , Math . abs ( b . z ) ) ;
var uuid = require ( ' node - uuid ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var extend = require ( ' util ' ) . _ extend ; var session:==:require ( ' express - session ' ) ;
var workspace = imports [ ' collab . workspace ' ] ; var question:==:imports [ ' dialog . question ' ] ;
var shell = require ( ' gulp - shell ' ) ; var path:==:require ( ' path ' ) ;
var db = this . _ db ; var transaction:==:db . transaction ( ' bookmarks ' ) ;
var instanceID = operation . instanceID ; var type:==:operation . type ;
var e = parse ( event ) ; var el:==:this . el ;
var dimensions = data . dimensions ; var metrics:==:data . metrics ;
var radius = sphere . radius ; var normal:==:plane . normal ;
var layerConfig = r . layerConfig ; var chunks:==:this . chunks ;
var clone = _ _ webpack_require _ _ ( 5 ) . clone ; var isInteger:==:_ _ webpack_require _ _ ( 2 ) . isInteger ;
var values = result . values ; var highlights:==:result . highlights ;
var moreExpected = result . moreExpected ; var messageNamer:==:result . messageNamer ;
var log = options . log ? ( _ . isFunction ( options . log ) ? options . log : console . log ) : false ; var logPeriod:==:options . logPeriod  |  |  10 ;
var left = Math . min ( rect1 . left , rect2 . left ) ; var top:==:Math . min ( rect1 . top , rect2 . top ) ;
var param = params [ key ] ; var type:==:param . type ;
var r = Math . min ( right , data [ 0 ] . length ) ; var b:==:Math . min ( bottom , data . length ) ;
var status = axisPointerModel . get ( ' status ' ) ; var value:==:axisPointerModel . get ( ' value ' ) ;
var val2 = w2utils . isTime ( val2 , true ) ; var val3:==:w2utils . isTime ( val3 , true ) ;
var inheritSingle = powerbi . prototype . inheritSingle ; var arrayExtensions:==:jsCommon . arrayExtensions ;
var bdi = document . createElement ( ' bdi ' ) ; var givenName:==:( contact . givenName & & contact . givenName [ 0 ] )  |  |  '' ;
var c = new String ( ' c ' ) ; var d:==:new String ( 'd ' ) ;
var value = track . value ( )  |  |  track . revenue ( ) ; var options:==:track . options ( ' Piwik ' ) ;
var predicate = _ _ isFunction ( predicateOrItem ) ? predicateOrItem : undefined ; var l:==:array . length ;
var canvas = instance . canvas ; var contentContainer:==:instance . contentContainer ;
var isObject = angular . isObject ; var isString:==:angular . isString ;
var socket   = options . get ( ' socket ' ) ; var template:==:fs . readFileSync ( config . templates . connector , ' utf-8 ' ) ;
var marginRight = options . marginRight ; var paddingTop:==:options . paddingTop ;
var action = logEntry . action ; var prevState:==:logEntry . prevState ;
var editor = sp . $ editors [ 1 ] ; var i d:==:sp . $ editors [ 0 ] . session . $ mode . $ i d  |  |  ' ' ;
var next = diff . next ; var stackedOnNext:==:diff . stackedOnNext ;
var touchmove = fakeDispatch ( ' touchmove ' , 100 , 2 ) ; var touchend:==:fakeDispatch ( ' touchend ' , 100 , 2 ) ;
var promise = goog . require ( ' goog . labs . promise ' ) ; var mockClock:==:goog . require ( ' goog . testing . mockClock ' ) ;
var keyCode = evt . keyCode ; var which:==:evt . which ;
var data = dataA . slice ( ) ; var length:==:dataB . length ;
var b = new blockNode ( [ node : new symbolNode ( ' x ' ) , node : new constantNode ( 2 ) ] ) ; var c:==:new blockNode ( [ node : new symbolNode ( ' x ' ) , node : new constantNode ( 4 ) ] ) ;
var T_NL = Sk . Tokenizer . T_NL ; var T_OP:==:Sk . Tokenizer . T_OP ;
var baseTheme = _ context$muiTheme . baseTheme ; var zIndex:==:_ context$muiTheme . zIndex ;
var localCapabilities = transceiver . localCapabilities ; var remoteCapabilities:==:transceiver . remoteCapabilities ;
var nativeHandler = callbackList . nativeHandler ; var fakeName:==:callbackList . fakeName , capture    callbackList . capture ;
var beta = parsedCamera . beta ; var radius:==:parsedCamera . radius ;
var maxResults = opts . maxResults  |  |  100 ; var query:==:opts . query  |  |  '' ;
var currentTarget = e . currentTarget ; var relatedTarget:==:e . relatedTarget ;
var createUseStrictDirective = parseTreeFactory . createUseStrictDirective ; var createVariableDeclaration:==:parseTreeFactory . createVariableDeclaration ;
var cloud2 = cloudLayer . create ( 900 , 170 , ' cloud2 ' ) ; var ground:==:groundLayer . create ( 0 , 360 , ' ground ' ) ;
var ejs = require ( ' ejs ' ) ; var fs:==:require ( ' fs ' ) ;
var stroke = el . style . stroke ; var fill:==:el . style . fill ;
var width = depthTexture . width ; var height:==:depthTexture . height ;
var b = $ ( ' body ' ) ; var t:==:$ ( ' # privacycontrols . toggle ' ) ;
var symbolPosition = itemModel . get ( ' symbolPosition ' )  |  |  ' start ' ; var symbolRotate:==:itemModel . get ( ' symbolRotate ' ) ;
var Server = mongo . Server ; var Mongos:==:mongo . Mongos ;
var is = require ( ' is ' ) ; var keys:==:require ( ' object ' ) . keys ;
var timeout = options . timeout  |  |  defaultOptions . timeout ; var jsonpCallback:==:options . jsonpCallback  |  |  defaultOptions . jsonpCallback ;
var fs = require ( ' graceful - fs ' ) ; var readdir:==:fs . readdir . bind ( fs ) ;
var width = options . width  |  |  10 ; var height:==:options . height  |  |  10 ;
var _ im_get_spl_start_at = Module [ ' _ im_get_spl_start_at ' ] = asm [ ' _ im_get_spl_start_at ' ] ; var _ im_get_fixed_len:==:Module [ ' _ im_get_fixed_len ' ]    asm [ ' _ im_get_fixed_len ' ] ;
var c = Ext . urlEncode ( ext . apply ( d , this . extraParams ) ) ; var b:==:this . buildUrl ( e , g ) ;
var parse = Sk . parse ( filename , source ) ; var ast:==:Sk . astFromParse ( parse . cst , filename , parse . flags ) ;
var type = this . _ type ; var stack:==:this . _ stack ;
var MINDRAG = constants . MINDRAG ; var MINZOOM:==:constants . MINZOOM ;
var gamma = defaultValue ( options . gamma , 0 . 0 ) ; var absolute:==:defaultValue ( options . absolute , false ) ;
var run = imports . run ; var build:==:imports . build ;
var crypto = Npm . require ( ' crypto ' ) ; var http:==:Npm . require ( ' http ' ) ;
var canvas = this . canvas = config . canvas  |  |  document . createElement ( ' canvas ' ) ; var renderBoundaries:==:this . _ renderBoundaries    [ 10000 , 10000 , 0 , 0 ] ;
var structure = this . _ structure ; var skirtHeight:==:this . _ skirtHeight ;
var assignment = this . transformAny ( tree . assignment ) ; var initializer:==:this . transformAny ( tree . initializer ) ;
var groupKey = item . groupKey ; var groupItem:==:groupItems [ groupKey ] ;
var observable = ko . observable ( ' a ' ) . extend ( rateLimit : 500 ) ; var notifySpy:==:jasmine . createSpy ( ' notifySpy ' ) ;
var right = options . right ; var bottom:==:options . bottom ;
var position = $ elem . position ( ) ; var left:==:position . left ;
var recordingModule = require ( ' nativeModules ' ) . pickerAndroidRecordingModule ; var picker:==:require ( ' picker ' ) ;
var jumpList = vimGlobalState . jumpList ; var cachedCursor:==:jumpList . cachedCursor ;
var parent = s . parent ; var cp:==:s . cp ;
var plugin = $ ( this ) . attr ( ' plugin ' ) ; var action:==:$ ( this ) . attr ( ' action ' ) ;
var session = this . session ; var start:==:range . start . row ;
var willLabelsWordBreak = powerbi . visuals . axisHelper . labelLayoutStrategy . willLabelsWordBreak ; var axisScale:==:powerbi . visuals . axisScale ;
var os_icon    = zombie_array [ index ] [ ' os_icon ' ] ; var os_name:==:zombie_array [ index ] [ ' os_name ' ] ;
var setPrivate = m . setPrivate ; var getPrivate:==:m . getPrivate ;
var dbname = options . dbargs . dbname ; var executes:==:options . executes ;
var requestEncoding = this . requestEncoding _ ; var tileGrid:==:options . tileGrid ;
var wrapS = info . wrapS ; var wrapT:==:info . wrapT ;
var d = document . createElement ( ' div ' ) ; var i d:==:jsPlumbUtil . uuid ( ) ;
var cpsTransformer = traceur . codegeneration . generator . cpsTransformer ; var endState:==:traceur . codegeneration . generator . endState ;
var Group = ReactART . Group ; var Shape:==:ReactART . Shape ;
var a = fulfillBuiltInSoon ( ' a ' , 40 ) ; var b:==:fulfillBuiltInSoon ( ' b ' , 30 ) ;
var image = imageRoot . append ( ' svg : image ' ) ; var size:==:gd . _ fullLayout . _ size ;
var babel = require ( ' babel - core ' ) ; var transform:==:require ( ' es3ify ' ) . transform ;
var error = sharedUtil . error ; var info:==:sharedUtil . info ;
var width = $ ( this ) [ 0 ] . getbBox ( ) . width ; var x:==:$ ( this ) . attr ( ' x ' ) ;
var color = options . color ; var fontOpacity:==:options . fontOpacity ;
var queryOptions = queryOptions . resolve ( [ query . queryOptions , this . queryOptions , queryOptions . defaultInstance ] ) ; var dataService:==:dataService . resolve ( [ query . dataService , this . dataService ] ) ;
var mkpath = require ( ' mkpath ' ) ; var path:==:require ( ' path ' ) ;
var buffer = require ( ' vinyl - buffer ' ) ; var child_process:==:require ( ' child_process ' ) ;
var yAlign = vm . yAlign ; var x:==:pt . x ;
var dayNames = ( settings ? settings . dayNames : null )  |  |  this . _ defaults . dayNames ; var monthNamesShort:==:( settings ? settings . monthNamesShort : null )  |  |  this . _ defaults . monthNamesShort ;
var path   = require ( ' path ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var ace = tab . editor . ace ; var renderer:==:ace . renderer ;
var watches = imports . watches ; var panels:==:imports . panels ;
var config = this . config ; var root:==:config . root ;
var init = this . initStatement . toString ( ) ; var iterator:==:' $ it ' + astForEachExpression . iteratorId++ ;
var negative = intersectCache . negative ; var positive:==:intersectCache . positive ;
var agent = options . agent ; var defaultAgent:==:options . _ defaultAgent  |  |  agent . globalAgent ;
var models = this . models ; var index:==:models . indexOf ( gltf ) ;
var left = Math . floor ( rect . left ) ; var top:==:Math . floor ( rect . top ) ;
var clientTop = element . clientTop  |  |  document . body . clientTop  |  |  0 ; var clientLeft:==:element . clientLeft  |  |  document . body . clientLeft  |  |  0 ;
var shadowPropTypesios = require ( ' shadowPropTypesios ' ) ; var transformPropTypes:==:require ( ' transformPropTypes ' ) ;
var Contacts = Windows . applicationModel . contacts ; var contact:==:contacts . contact ;
var crypto = require ( ' crypto ' ) ; var scmp:==:require ( ' scmp ' ) ;
var Survey = Parse . Object . extend ( ' Survey ' ) ; var surveyResult:==:parse . object . extend ( ' surveyResult ' ) ;
var events = params . events ; var properties:==:params . properties ;
var regexpSource = _ compilePattern2 . regexpSource ; var paramNames:==:_ compilePattern2 . paramNames ;
var distance = data . distance ; var groundColor:==:new three . color ( data . groundColor ) . getHex ( ) ;
var isPrivateSymbol = m . isPrivateSymbol ; var createPrivateSymbol:==:m . createPrivateSymbol ;
var isObj = isObject ( data ) ; var type:==:this . _ header [ ' content - type ' ] ;
var scheduler = state . scheduler ; var windowCreationInterval:==:state . windowCreationInterval ;
var p = new path . Path ( ) ; var commands:==:this . path . commands ;
var assert = require ( ' assert - plus ' ) ; var crypto:==:require ( ' crypto ' ) ;
var params = data . params ; var changeToken:==:+ + this . _ changeToken ;
var dataset = event . target . dataset ; var action:==:dataset . action ;
var ddr = state . ddr ; var pins:==:state . pins ;
var frameState = this . frameState _ ; var tileQueue:==:this . tileQueue _ ;
var cloudinary = require ( ' cloudinary ' ) ; var mongoose:==:keystone . mongoose ;
var zindex = options . zindex  |  |  beef . dom . getHighestZindex ( ) + 1 ; var opacity:==:options . opacity  |  |  70 ;
var a = require ( ' comp_a ' ) ; var b:==:require ( ' comp_b ' ) ;
var fixed = entry . indexOf ( ' fixed ' ) > = 0 ; var snap:==:entry . indexOf ( ' snap ' ) >   0 ;
var f = fs [ 0 ] ; var g:==:f . getGeometry ( ) ;
var urlMap = openLayers . control . cacheWrite . urlMap ; var url:==:urlMap [ tile . url ]  |  |  tile . url ;
var mustache = require ( ' mustache ' ) ; var path:==:require ( ' path ' ) ;
var data = this . $ data ; var editor:==:data . editor ;
var returnStatement = traceur . syntax . trees . returnStatement ; var setAccessor:==:traceur . syntax . trees . setAccessor ;
var setAccessor = traceur . syntax . trees . setAccessor ; var superExpression:==:traceur . syntax . trees . superExpression ;
var green900 = exports . green900 = ' # 1b5e20 ' ; var greenA100:==:exports . greenA100    ' # b9f6ca ' ;
var cellLayoutManager = _ props4 . cellLayoutManager ; var onSectionRendered:==:_ props4 . onSectionRendered ;
var Category = ctx . model ( ' Category ' ) ; var i d:==:this . _ i d ;
var collider_coords = $ collider_coords_ins . get ( ) ; var overlaps:==:self . overlaps ( player_coords , collider_coords ) ;
var refSetCache = corePrimitives . refSetCache ; var isName:==:corePrimitives . isName ;
var e = new Event ( ' x ' , bubbles : true ) ; var doc:==:wrap ( document ) ;
var expecting = Parser . expecting ; var assertion:==:Parsers . assertion ;
var fixedColumns = coords . col < priv . fixedColumns ; var scrollableElement:==:this . hot . view . wt . wtOverlays . scrollableElement ;
var source = state . source ; var queue:==:source . queue ;
var _ updateWifi = this . _ updateWifi . bind ( this ) ; var _ updateNetworkStatus:==:this . _ updateNetworkStatus . bind ( this ) ;
var propsData = vm . $ options . propsData  |  |  ; var props:==:vm . _ props    ;
var timestamp = eventArgs . timestamp ; var advertisementType:==:eventArgs . advertisementType ;
var test = qUnit . test ; var expect:==:qUnit . expect ;
var glTexture = this . _ glTextures [ i ] ; var gl:==:pixi . glContexts [ i ] ;
var dxydi = trace . dxydi ( null , i0 , j0 , u , v ) ; var dadi:==:trace . dadi ( i0 , u ) ;
var button = defaultValue ( options . button , 0 ) ; var relatedTarget:==:defaultValue ( options . relatedTarget , null ) ;
var name = header . name ; var value:==:header . value ;
var jshint = require ( ' jshint ' ) . JSHINT ; var babel:==:require ( ' babel ' ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var nodeunit:==:require ( ' nodeunit ' ) ;
var backdrop = new Animation ( ele . querySelector ( ' ion - backdrop ' ) ) ; var wrapper:==:new animation ( ele . querySelector ( ' . alert - wrapper ' ) ) ;
var channel = animation . channel [ i ] ; var sampler:==:animation . sampler [ i ] ;
var argv = require ( ' optimist ' ) . argv ; var glob:==:Promise . promisify ( require ( ' glob ' ) ) ;
var orig_nbformat = nbmodel . metadata . orig_nbformat ; var orig_nbformat_minor:==:nbmodel . metadata . orig_nbformat_minor ;
var x = this . a . x + ( ua * this . v . x ) ; var y:==:this . a . y + ( ua * this . v . y ) ;
var w = size . width ; var h:==:size . height ;
var FP_SAFE = constants . FP_SAFE ; var ONEAVGYEAR:==:constants . ONEAVGYEAR ;
var b = div . appendChild ( document . createTextNode ( ' b ' ) ) ; var c:==:div . appendChild ( document . createTextNode ( ' c ' ) ) ;
var ctx = this . ctx ; var w:==:imgData . width ;
var shaders = model . _ loadResources . shaders ; var program:==:programs [ i d ] ;
var assert = require ( ' core - assert ' ) ; var async:==:require ( ' async ' ) ;
var fakeSettings = config . fakeSettings  |  |  ; var fakeConfiguration:==:config . fakeConfiguration  |  |  ;
var warn = sharedUtil . warn ; var dict:==:corePrimitives . dict ;
var col = db . collection ( ' batch_write_unordered_ops_legacy_5 ' ) ; var writeConcern:==:configuration . writeConcernMax ( ) ;
var u = uv . x ; var v:==:uv . y ;
var target = controllerHost . target ; var pos:==:target . position ;
var scene3dOnly = frameState . scene3dOnly ; var context:==:frameState . context ;
var util = require ( ' gulp - util ' ) ; var clone:==:require ( ' gulp - clone ' ) ;
var group = groups [ i ] ; var start:==:group . start ;
var eventMixin = hilo . eventMixin ; var view:==:hilo . view ;
var modName = arrItem . modName ; var group:==:arrItem . group ;
var del = require ( ' del ' ) ; var merge:==:require ( ' merge - stream ' ) ;
var expect = chai . expect ; var async:==:require ( ' async ' ) ;
var Buffer = require ( ' buffer ' ) . Buffer ; var timers:==:require ( ' timers ' ) ;
var stride = defaultValue ( structure . stride , heightmapTessellator . default_structure . stride ) ; var elementMultiplier:==:defaultValue ( structure . elementMultiplier , heightmapTessellator . default_structure . elementMultiplier ) ;
var orient = this . _ orient ; var useHandle:==:this . _ useHandle ;
var author = ( msg . author  |  |  '' ) ; var apool:==:msg . apool ;
var indices = _ ref5 . indices ; var isScrolling:==:_ ref5 . isScrolling ;
var value = dataPoint [ this . _ valueField ]  |  |  1 ; var radius:==:dataPoint . radius  |  |  this . _ cfgRadius  |  |  defaultRadius ;
var width = ( u1 - u0 ) * texture . width ; var height:==:( v1 - v0 ) * texture . height ;
var model = graph . model ; var t:==:graph . view . translate ;
var setTreeScope = scope . setTreeScope ; var unsafeUnwrap:==:scope . unsafeUnwrap ;
var ele = that . ele ; var cur:==:that . curIndex ;
var events = this . events ( event ) ; var total:==:track . revenue ( )  |  |  track . total ( )  |  |  0 ;
var getSnapHeight = t . getSnapHeight ; var getSnapDuration:==:t . getSnapDuration ;
var src = $ this . attr ( ' src ' )  |  |  '' ; var alt:==:$ this . attr ( ' alt ' )  |  |  '' ;
var numberOfRetries = options . numberOfRetries  |  |  5 ; var tailableRetryInterval:==:options . tailableRetryInterval  |  |  500 ;
var unselect = t . unselect ; var daySelectionMousedown:==:t . daySelectionMousedown ;
var z = babelHelpers . objectWithoutProperties ( z : 1 , [ ] ) ; var x:==:5    babelHelpers . objectWithoutProperties ( x : 1 , [ ] ) ;
var x = this . start . x ; var y:==:this . start . y ;
var language = imports . language ; var jsonalyzer:==:imports [ ' jsonalyzer ' ] ;
var dispatch = _ ref . dispatch ; var getState:==:_ ref . getState ;
var crypto = Npm . require ( ' crypto ' ) ; var fs:==:Npm . require ( ' fs ' ) ;
var utils = require ( ' utils ' ) ; var esomin:==:require ( ' esomin ' ) ;
var title = top . document . getElementsByTagName ( ' title ' ) [ 0 ] . innerhtml ; var plugin:==:document . getElementById ( ' plugin ' ) ;
var openfiles = imports . openfiles ; var commands:==:imports . commands ;
var sLeft = itemData . sLeft - window . pagexOffset ; var sTop:==:itemData . sTop - window . pageyOffset ;
var start = availability . start ; var stop:==:availability . stop ;
var client = this . _ . client ; var i d:==:this . _ . i d ;
var contained1_2_1 = document . getElementById ( ' contained1_2_1 ' ) ; var contained2:==:document . getElementById ( ' contained2 ' ) ;
var mnuWrap = handle . getElement ( ' mnuWrap ' ) ; var mnuWrapPrintMargin:==:handle . getElement ( ' mnuWrapPrintMargin ' ) ;
var coverage = ' coverage ' in conf ? conf . coverage : false ; var reporter:==:' reporter ' in conf ? conf . reporter : ' spec ' ;
var duration = options . duration ; var moves:==:options . moves ;
var end = atEnd ? to : pos ( endLine , 0 ) ; var mark:==:cm . markText ( start , end , className : cls ) ;
var aspect = this . cameraP . aspect ; var near:==:this . cameraP . near ;
var cors = require ( ' cors ' ) ; var async:==:require ( ' async ' ) ;
var parent = self . parent ; var scope:==:parent . scope ;
var willLabelsFit = powerbi . visuals . axisHelper . labelLayoutStrategy . willLabelsFit ; var willLabelsWordBreak:==:powerbi . visuals . axisHelper . labelLayoutStrategy . willLabelsWordBreak ;
var View = _ componentsFxosMvcDistMvc . view ; var iconHelper:==:_ jsLibHelpers . iconHelper ;
var highPosition = cartesian3 . unpack ( highPositions , i , scratchbvCartesianHigh ) ; var lowPosition:==:cartesian3 . unpack ( lowPositions , i , scratchbvCartesianLow ) ;
var Warning = subError ( ' warning ' , ' warning ' ) ; var cancellationError:==:subError ( ' cancellationError ' , ' cancellation error ' ) ;
var path3D = ( tubeInstance . path3d ) . update ( path ) ; var pathArray:==:tubePathArray ( path , path3d , tubeInstance . pathArray , radius , tubeInstance . tessellation , radiusFunction , tubeInstance . cap ) ;
var apiUrl = options . apiUrl  |  |  ' ' ; var ideBaseUrl:==:options . ideBaseUrl ;
var Set = require ( ' Set ' ) ; var styleSheet:==:require ( ' styleSheet ' ) ;
var frame = this . texture . frame ; var w:==:this . canvas . width ;
var exceptAligned = this . _ exceptAligned ; var exceptMethod:==:this . _ exceptMethod ;
var forwardMethodsToWrapper = scope . forwardMethodsToWrapper ; var getTreeScope:==:scope . getTreeScope ;
var image = this . image _ ; var texture:==:this . texture ;
var r = Math . random ( ) ; var l:==:1 + helpers . randomInt ( math . min ( left - 1 , 20 ) ) ;
var netUtils = goog . labs . net . webChannel . netUtils ; var requestStats:==:goog . labs . net . webChannel . requestStats ;
var size = props . size ; var avatar:==:context . muiTheme . avatar ;
var btn4 = plugin . getElement ( ' btn4 ' ) ; var btn5:==:plugin . getElement ( ' btn5 ' ) ;
var a = div . appendChild ( document . createTextNode ( ' a ' ) ) ; var b:==:div . appendChild ( document . createTextNode ( ' b ' ) ) ;
var errorCb1 = jasmine . createSpy ( ' errorCb1 ' ) ; var errorCb2:==:jasmine . createSpy ( ' errorCb2 ' ) ;
var messageObject = e . messageObject  |  |  ; var body:==:messageObject . body ;
var xi = intersectBody_xi ; var qi:==:intersectBody_qi ;
var top = bounds . top  |  |  0 ; var left:==:bounds . left  |  |  0 ;
var timingFunctionUtils = require ( ' timingFunctionUtils ' ) ; var bezierCurveEditorTemplate:==:require ( ' text!BezierCurveEditorTemplate . html ' ) ;
var rangeNode1 = helper . getNode ( ' rangeNode1 ' ) ; var helperNode1:==:helper . getNode ( ' helperNode1 ' ) ;
var green200 = exports . green200 = ' # a5d6a7 ' ; var green300:==:exports . green300    ' # 81c784 ' ;
var layers = cfg . layers = = = undefined?~0 : cfg . layers ; var width:==:view . width * view . scaleX ;
var tileHeight = defaultValue ( options . tileHeight , parseInt ( format . getAttribute ( ' height ' ) , 10 ) ) ; var minimumLevel:==:defaultValue ( options . minimumLevel , parseInt ( tilesetsList [ 0 ] . getAttribute ( ' order ' ) , 10 ) ) ;
var node = _ ref2 . node ; var prop:==:node . property ;
var extrudedHeight = rectangleGeometry . _ extrudedHeight ; var rotation:==:rectangleGeometry . _ rotation ;
var Node = mod . Node ; var splayTree:==:mod . splayTree ;
var typeName = this . transformAny ( tree . typeName ) ; var args:==:this . transformAny ( tree . args ) ;
var layoutVertexArray = group . layoutVertexArray ; var zoom:==:this . zoom ;
var assert = require ( ' assert ' ) ; var muk:==:require ( ' muk ' ) ;
var number = ( options & & options . number ) ; var delta:==:( options & & options . delta )  |  |  0 ;
var colors = options . colors ; var width:==:defaultValue ( options . width , 1 . 0 ) ;
var expectations = this . expectations & & this . expectations [ method ] ; var length:==:expectations & & expectations . length  |  |  0 , i ;
var value = element ( by . binding ( ' example . value  |  date : ' yyyy - MM - ddTHH : mm : ss ' ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var state = this . state _ ; var fillStyle:==:state . fillStyle ;
var request = require ( ' request ' ) ; var fs:==:require ( ' fs ' ) ;
var DISTANCE_DISPLAY_CONDITION = Billboard . DISTANCE_DISPLAY_CONDITION = 14 ; var DISABLE_DEPTH_DISTANCE:==:Billboard . DISABLE_DEPTH_DISTANCE    15 ;
var master = store . master [ type ] ; var delegates:==:store . delegates [ type ]    ( store . delegates [ type ]  |  |  ) ;
var btoa = require ( ' btoa ' ) ; var glob:==:require ( ' glob ' ) ;
var _ oContext = this . _ oContext ; var _ htOption:==:this . _ htOption ;
var width = this . layer . width ; var height:==:this . layer . height ;
var words = this . words ; var h:==:this . _ headerWords ;
var ENTITY_NODE      = nodeType . entity_node      = 6 ; var processing_instruction_node:==:nodeType . processing_instruction_node    7 ;
var floor = stdlib . Math . floor ; var sqrt:==:stdlib . Math . sqrt ;
var abs = stdlib . Math . abs ; var atan2:==:stdlib . Math . atan2 ;
var strong = dates [ 0 ] . querySelector ( ' strong ' ) ; var formatDate:==:utils . misc . formatDate ( mozContact . bday ) ;
var win = this . _ win ; var innerWidth:==:win [ ' innerWidth ' ] ;
var skeleton = this . skeleton = new spine . Skeleton ( skeletonData ) ; var bounds:==:this . bounds ;
var addEvent = addEventEasy ; var removeEvent:==:removeEventEasy ;
var webpack = require ( ' webpack - stream ' ) ; var zip:==:require ( ' gulp - zip ' ) ;
var groupKeys = this . _ groupKeys ; var groupKey:==:item . groupKey ;
var gulp = require ( ' gulp ' ) ; var pluginError:==:require ( ' gulp - util ' ) . pluginError ;
var isArray = array . isArray ; var isString:==:string . isString ;
var os = require ( ' os ' ) ; var util:==:require ( ' util ' ) ;
var vertices = data . vertices ; var normals:==:data . normals ;
var now = eat . now ( ) ; var length:==:value . length ;
var current = instance . current ; var $ content:==:current . $ content  |  |  current . $ placeholder ;
var passThrough = require ( ' stream ' ) . passThrough ; var assert:==:require ( ' chai ' ) . assert ;
var val = this . expect ( ' case ' ) . val ; var node:==:new nodes . Case ( val ) ;
var base = asn1 . base ; var der:==:asn1 . constants . der ;
var createStrictShapeTypeChecker = require ( ' createStrictShapeTypeChecker ' ) ; var flattenStyle:==:require ( ' flattenStyle ' ) ;
var scene = viewer . scene ; var context:==:scene . context ;
var el = shader . el ; var material:==:shader . material ;
var resizer = createElementWithClass ( ' div ' , ' heap - snapshot - view - resizer ' ) ; var title:==:resizer . createChild ( ' div ' , ' title ' ) . createChild ( ' span ' ) ;
var rimraf = require ( ' rimraf ' ) ; var iconv:==:require ( ' iconv - lite ' ) ;
var displayUnits = dataViewObjects . getValue ( objects , tornadoChart . properties . labels . labelDisplayUnits , tornadoChart . defaultTornadoChartSettings . labelSettings . displayUnits ) ; var labelSettings:==:tornadoChart . defaultTornadoChartSettings . labelSettings ;
var Class = Hilo . Class ; var Container:==:Hilo . Container ;
var recognizers = this . recognizers ; var curRecognizer:==:session . curRecognizer ;
var abs = Math . abs ; var atan:==:Math . atan ;
var cropper = $ image . data ( ' cropper ' ) ; var container:==:cropper . container ;
var Wih = Wih + gamma1h + ( ( Wil > > > 0 ) < ( gamma1l > > > 0 ) ? 1 : 0 ) ; var Wil:==:Wil + Wi16l ;
var message = error . message ; var count:==:( counts [ message ]  |  |  0 ) + 1 ;
var textMeasurementService = powerbi . textMeasurementService ; var dataViewObjects:==:powerbi . dataViewObjects ;
var seleniumPort   = this . options . seleniumPort  |  |  this . options . selenium_port ; var seleniumHost:==:this . options . seleniumHost  |  |  this . options . selenium_host ;
var panel = panels [ I ] ; var dim1:==:panel . dim1 ;
var rowHeaders = this . wot . getSetting ( ' rowHeaders ' ) ; var fixedColumnsLeft:==:this . wot . getSetting ( ' fixedColumnsLeft ' ) ;
var d = new functionNode ( s , [ b , c ] ) ; var e:==:new constantNode ( 5 ) ;
var spawn = require ( ' child_process ' ) . spawn ; var spawnSync:==:require ( ' child_process ' ) . spawnSync ;
var apiUrl = options . apiUrl  |  |  loginUrl ; var userId:==:this . context . userId ;
var evaluateStringLiteral = traceur . util . evaluateStringLiteral ; var resolveUrl:==:traceur . util . resolveUrl ;
var markerClusterPlugin = leafletHelpers . markerClusterPlugin ; var awesomeMarkersPlugin:==:leafletHelpers . awesomeMarkersPlugin ;
var lastOffset = this . _ cachedDistributedKeyframes [ lastOffsetIndex ] . offset ; var nextOffset:==:this . _ cachedDistributedKeyframes [ nextOffsetIndex ] . offset ;
var mkdirp = Promise . promisify ( require ( ' mkdirp ' ) ) ; var rimraf:==:Promise . promisify ( require ( ' rimraf ' ) ) ;
var modules = scope . modules  |  |  [ ] ; var sheets:==:scope . sheets  |  |  [ ] ;
var v = particle . velocity ; var m:==:particle . mass ;
var motion = inputState . motion ; var motionArgs:==:inputState . motionArgs  |  |  ;
var orelse = s . orelse . length > 0 ? this . newBlock ( ' while orelse ' ) : null ; var body:==:this . newBlock ( ' while body ' ) ;
var dataSource = that . dataSource ; var dataItem:==:that . dataItem ( item ) ;
var NOT_PROPER = scopeAnalyzer . not_proper ; var kind_package:==:scopeAnalyzer . kind_package ;
var TRANSLUCENCY_BY_DISTANCE_INDEX = pointPrimitive . translucency_by_distance_index = 7 ; var distance_display_condition_index:==:pointPrimitive . distance_display_condition_index    8 ;
var file = _ htmloptimizer$getFileByRelativePath . file ; var content:==:_ htmloptimizer$getFileByRelativePath . content ;
var createTrueLiteral = parseTreeFactory . createTrueLiteral ; var createUseStrictDirective:==:parseTreeFactory . createUseStrictDirective ;
var fs = require ( ' fs ' ) ; var page:==:require ( ' webpage ' ) . create ( ) ;
var jshint = require ( ' gulp - jshint ' ) ; var nodeunit:==:require ( ' gulp - nodeunit ' ) ;
var d16 = _ addDiv ( ' d16 ' ) , d17 = _ addDiv ( ' d17 ' ) ; var conn:==:_ jsPlumb . connect ( source : d16 , target : d17 , endpoints : [ ' rectangle ' , ' dot ' ] ) ;
var album = metadata . album ; var artist:==:metadata . artist ;
var a = a : 100 , b : 100 ; var b:==:b : 200 , c : 200 ;
var keys = opts . keys ; var descending:==:' descending ' in opts ? opts . descending : false ;
var brown100 = exports . brown100 = ' # d7ccc8 ' ; var brown200:==:exports . brown200    ' # bcaaa4 ' ;
var height = this . height ( ) ; var width:==:this . width ( ) ;
var width = outputTexture . width ; var height:==:outputTexture . height ;
var primitives = this . _ primitives ; var groundPrimitives:==:this . _ groundPrimitives ;
var entity = c . entity ; var data:==:c . data ;
var vertices = this . vertices ; var uvs:==:this . uvs ;
var eventPluginUtils = require ( ' eventPluginUtils ' ) ; var htmldomPropertyConfig:==:require ( ' htmldomPropertyConfig ' ) ;
var children = this . _ children ; var row:==:rows [ rowNum ] ;
var pair = pairs [ j ] ; var key:==:this . parseProperty ( pair , ' * ' , ' key ' ) ;
var dialog = dialogDiv ( this , template , options & & options . bottom ) ; var duration:==:options & & ( options . duration      undefined ? 5000 : options . duration ) ;
var container = angular . element ( parent [ 0 ] . querySelector ( ' . md - dialog - container ' ) ) ; var dialog:==:parent . find ( ' md - dialog ' ) ;
var reactdomStackInjection = require ( ' reactdomStackInjection ' ) ; var reactServerRenderer:==:require ( ' reactServerRenderer ' ) ;
var element = this . element , that = this , o = this . options ; var textarea:==:element . find ( ' textarea ' ) ;
var htmlElement = scope . wrappers . htmlElement ; var assert:==:scope . assert ;
var f = _ settings . fractions [ parseInt ( j , 10 ) ] ; var div:==:document . createElement ( ' div ' ) ;
var comp1 = content : ' some thing in comp1 ' ; var comp2:==:content : ' some thing in comp2 ' ;
var shell = require ( ' gulp - shell ' ) ; var browserify:==:require ( ' browserify ' ) ;
var specular = this . specular . buildCode ( builder , ' c ' ) ; var shininess:==:this . shininess . buildCode ( builder , ' fv1 ' ) ;
var n = + conf . n ; var key:==:conf . key ;
var shape = this . shape ; var points:==:shape . points ;
var item = callbackData . item ; var index:==:callbackData . index ;
var postAsset = ctx . model ( ' postAsset ' ) ; var post:==:ctx . model ( ' post ' ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var sinon:==:require ( ' sinon ' ) ;
var edgexUnit = parseFloat ( params . edgexUnit ) ; var className:==:params . className  |  |  ' grid ' ;
var i d = getAttr ( nodeDom , ' i d ' ) ; var label:==:getAttr ( nodeDom , ' label ' ) ;
var compact = options . compact ; var indent:==:options . indent ;
var commands = imports . commands ; var jsonalyzer:==:imports . jsonalyzer ;
var header = require ( ' gulp - header ' ) ; var eslint:==:require ( ' gulp - eslint ' ) ;
var Identify = Facade . Identify ; var bind:==:require ( ' bind ' ) ;
var identifiers = e . data . identifiers ; var region:==:e . data . region ;
var bind = require ( ' bind ' ) ; var defaults:==:require ( ' defaults ' ) ;
var type = Types . fromString ( parameters . type ) ; var buffer:==:parameters . buffer ;
var rec   = records [ index ] ; var col:==:this . columns [ column ] ;
var div = document . createElement ( ' div ' ) ; var table:==:document . createElement ( ' table ' ) ;
var spaces = this . spaces ; var maxes:==:this . maxes ;
var flags = scope . flags ; var IMPORT_LINK_TYPE:==:scope . IMPORT_LINK_TYPE ;
var metaKey = defaultValue ( options . metaKey , false ) ; var button:==:defaultValue ( options . button , 0 ) ;
var fs = require ( ' fs ' ) ; var format:==:require ( ' util ' ) . format ;
var windowStartTime = this . _ windowStartTime  |  |  this . _ model . minimumRecordTime ( ) ; var windowEndTime:==:this . _ windowEndTime  |  |  this . _ model . maximumRecordTime ( ) ;
var accessType = context . accessType ; var modelName:==:context . modelName ;
var event = animationDetails . event ; var options:==:animationDetails . options ;
var high = encodedCenter . high ; var low:==:cartesian4 . fromElements ( encodedCenter . low . x , encodedCenter . low . y , encodedCenter . low . z , boundingSphere . radius , scratchUpdatePolylineCartesian4 ) ;
var height = options . height ; var title:==:options . title ;
var dynCall_vi = Module [ ' dynCall_vi ' ] = asm [ ' dynCall_vi ' ] ; var dynCall_v:==:Module [ ' dynCall_v ' ]    asm [ ' dynCall_v ' ] ;
var url = require ( ' url ' ) ; var browserify:==:require ( ' browserify ' ) ;
var fs = require ( ' fs - extra ' ) ; var npm:==:require ( ' npm ' ) ;
var proto = protos [ protoIdx ] ; var bindingRecord:==:proto . bindingRecord ;
var yaml = require ( ' js - yaml ' ) ; var sinon:==:require ( ' sinon ' ) ;
var element = that . element ; var custom:==:that . _ customOption ;
var functionNode = math . expression . node . functionNode ; var operatorNode:==:math . expression . node . operatorNode ;
var list = this . props . list ; var nameField:==:this . props . list . nameField ;
var extrudedHeight = corridor . extrudedHeight ; var granularity:==:corridor . granularity ;
var deltaX = defaultValue ( options . deltax , 0 ) ; var deltay:==:defaultValue ( options . deltay , 0 ) ;
var p = goog . partial ( getFoo , ' hot ' ) ; var b:==:goog . bind ( p , obj , ' dog ' ) ;
var cloudinaryImageFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' cloudinaryImageFieldTestObject ' ) ) ; var textFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ;
var defineWrapGetter = scope . defineWrapGetter ; var unsafeUnwrap:==:scope . unsafeUnwrap ;
var b2j = this . b2j ; var isbjunk:==:this . isbjunk ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var hap:==:require ( ' hap - nodejs ' ) ;
var y = vertexNode . getAttribute ( ' y ' ) ; var z:==:vertexNode . getAttribute ( ' z ' ) ;
var exec = require ( ' child_process ' ) . exec ; var crypto:==:require ( ' crypto ' ) ;
var $ wrap = self . $ wrap ; var cookieRedirect:==:conf . cookieRedirect ;
var glyph = this . glyphs [ index ] ; var p:==:this . positions [ index ] ;
var denseMatrix = math . type . denseMatrix ; var sparseMatrix:==:math . type . sparseMatrix ;
var instancePrefix = _ props . instancePrefix ; var optionIndex:==:_ props . optionIndex ;
var loc = this . window _ . location . href ; var index:==:loc . indexOf ( ' # ' ) ;
var shape = this . shape ; var stencil:==:this . stencil ;
var dataset = me . chart . data . datasets [ point . _ datasetIndex ] ; var index:==:point . _ index ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , zero_to_fifty , height : 70 , valueRange : [ 0,50 ] ) ;
var remoteVideo = document . querySelector ( ' video#remoteVideo ' ) ; var localVideo:==:document . querySelector ( ' video#localVideo ' ) ;
var value = event . detail . value ; var sortedKeys:==:this . _ sortedKeys ;
var addressTo = tx . addressTo ? tx . addressTo : '' ; var txid:==:tx . txid ? tx . txid : '' ;
var widths = options . widths  |  |  ; var skins:==:options . skins  |  |  ;
var error = resp . error ; var request:==:resp . request ;
var columns = this . columns ( columnSelector , opts ) ; var rows:==:this . rows ( rowSelector , opts ) ;
var NUM_ITERATIONS = process . env . NUM_ITERATIONS  |  |  40 ; var NUM_SOFT_ITERATIONS:==:process . env . NUM_SOFT_ITERATIONS  |  |  30 ;
var component = components [ i ] ; var collisionData:==:this . _ collisionData [ component ] ;
var x = mpos . x - THIS . pickerFace - this . pickerInset ; var y:==:mpos . y - this . pickerFace - this . pickerInset ;
var casper = require ( ' casper ' ) . create ( ) ; var json:==:require ( ' json ' ) ;
var y0 = Math . max ( ymin , Math . floor ( e1 . y0 ) ) ; var y1:==:Math . min ( ymax , Math . ceil ( e1 . y1 ) ) ;
var parse = parseFunctions [ column . type ] ; var name:==:column . name ;
var href = tag . href ? ' href= ' ' + tag . href + ' ' ' : '' ; var sizes:==:tag . sizes ? ' sizes ' ' + tag . sizes + ' ' ' : '' ;
var sampleDraftInlineStyle = require ( ' sampleDraftInlineStyle ' ) ; var createCharacterList:==:require ( ' createCharacterList ' ) ;
var X = this . XW * g ( L ) ; var Y:==:this . YW * g ( M ) ;
var fs = require ( ' fs ' ) ; var getDiffs:==:helpers . getDiffs ;
var foo = ol . events . listen ( target , ' foo ' , function ( ) ) ; var bar:==:ol . events . listen ( target , ' bar ' , function ( ) ) ;
var s = env . _ stdin  |  0 ; var t:==:env . _ stdout  |  0 ;
var browserify = require ( ' browserify ' ) ; var derequire:==:require ( ' derequire ' ) ;
var sampleDraftInlineStyle = require ( ' sampleDraftInlineStyle ' ) ; var selectionState:==:require ( ' selectionState ' ) ;
var lazypipe = require ( ' lazypipe ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var compare = opt_compareFn  |  |  goog . array . defaultCompare ; var l:==:math . min ( arr1 . length , arr2 . length ) ;
var ui = imports . ui ; var layout:==:imports . layout ;
var x = Cartesian3 . dot ( this . _ xAxis , v ) ; var y:==:cartesian3 . dot ( this . _ yAxis , v ) ;
var script = ' hexo . _ script_test = true ' ; var path:==:pathFn . join ( hexo . script_dir , ' test . js ' ) ;
var button = caller . find ( ' . neighbors - button ' ) ; var list:==:caller . find ( ' . neighbors - interface - list ' ) ;
var target = this . target ; var webGL:==:this . _ webglCache ;
var worldTransform = this . worldTransform ; var a:==:worldTransform . a ;
var geotagHelper = windows . storage . fileProperties . geotagHelper ; var geolocator:==:windows . devices . geolocation . geolocator ;
var view = $ ( ' . publication - result . view ' ) ; var remix:==:$ ( ' . publish - dialog . remix ' ) ;
var period   = options . period ; var minLength:==:options . minLength ;
var length = options . length ; var radix:==:options . radix ;
var uint16 = Fn . uint16 ; var toFixed:==:fn . toFixed ;
var tokenType = traceur . syntax . tokenType ; var expandMemberLookupExpression:==:traceur . codegeneration . expandMemberLookupExpression ;
var observers = this . observers ; var len:==:observers . length ;
var source = bin . source ; var css:==:safeForhtml ( bin . css  |  |  '' ) ;
var node = path . node ; var source:==:node . source ? node . source . value : null ;
var frameList = timeline . frameList ; var i:==:frameList . length ;
var processColor = require ( ' processColor ' ) ; var requireNativeComponent:==:require ( ' requireNativeComponent ' ) ;
var scm = imports . scm ; var c9:==:imports . c9 ;
var axis = axisModel . axis ; var grid:==:axis . grid ;
var lang = editor . lang . clipboard ; var isCustomDomain:==:ckeditor . env . isCustomDomain ( ) ;
var fromPointToPixel = jsCommon . pixelConverter . fromPointToPixel ; var createEnumType:==:powerbi . createEnumType ;
var proto = protoProp : ' pass ' , propToRemove : ' foo ' ; var o:==:_ _ proto _ _ : proto ;
var search = obj . searches [ search_ind ] ; var range:==:$ ( ' # grid_'+ obj . name + ' _ range_'+ search_ind ) ;
var height = this . root . height ; var width:==:this . root . width ;
var onResize = options . onResize ; var minHeight:==:options . minHeight ;
var git = require ( ' gulp - git ' ) ; var fs:==:require ( ' fs ' ) ;
var start = partialstart ? parseInt ( partialstart , 10 ) : 0 ; var end:==:partialend ? parseInt ( partialend , 10 ) : stream . length - 1 ;
var codeblock = packet . codeblocks [ i ] ; var precinct:==:codeblock . precinct ;
var el = setupSelect ( ' ng - model='$root . model ' ' , [ ' 1 ' , ' 2 ' , ' 3 ' ] ) ; var selectedOption:==:selectedOptions ( el ) [ 0 ] ;
var style = item . style ? ' style= ' ' + item . style + ' ' ' : '' ; var className:==:item . className ? ' class ' ' + item . className + ' ' ' : '' ;
var f8FriendGoing = require ( ' f8FriendGoing ' ) ; var f8SpeakerProfile:==:require ( ' f8SpeakerProfile ' ) ;
var startEmpty = options . startEmpty ; var realRoot:==:options . realRoot ;
var EXPORT_DECLARATION = parseTreeType . export_declaration ; var export_mapping_list:==:parseTreeType . export_mapping_list ;
var isReadable = require ( ' isstream ' ) . isReadable ; var isWritable:==:require ( ' isstream ' ) . isWritable ;
var p = k . pos ; var r:==:k . rot ;
var args = event . data . args ; var maxCallInterval:==:event . data . maxCallInterval !   null ? event . data . maxCallInterval : 2000 ;
var event = track . event ( ) ; var user:==:this . analytics . user ( ) ;
var assert = require ( ' assert ' ) ; var crypto:==:require ( ' crypto ' ) ;
var Module = Struct ( ' Module ' ) ; var outputBuffer:==:struct ( ' outputBuffer ' ) ;
var many = props . many ; var one:==:props . one ;
var round = Math . round ; var abs:==:Math . abs ;
var Instrument = require ( ' coverjs ' ) . Instrument ; var uglify:==:tools . uglify ;
var index = sel . indexes [ s ] ; var rec:==:this . records [ index ] ;
var left = cropBox . left ; var top:==:cropBox . top ;
var fontSize = pixelConverter . fromPoint ( this . data . dataLabelsSettings . fontSize  |  |  visuals . newDataLabelUtils . defaultLabelFontSizeInPt ) ; var padding:==:this . settings . labels . padding ;
var cyan100 = exports . cyan100 = ' # b2ebf2 ' ; var cyan200:==:exports . cyan200    ' # 80deea ' ;
var backwards = options . backwards = = = true ; var skipCurrent:==:options . skipCurrent !    false ;
var emberDestroy = blueprintHelpers . emberDestroy ; var emberGenerateDestroy:==:blueprintHelpers . emberGenerateDestroy ;
var options = self . options ; var image:==:self . image ;
var appInfos = ' appInfos ' : oData . application ; var technicalInfo:==:' technicalInfo ' : oData . technical ;
var semiMinorAxis = ellipse . semiMinorAxis ; var show:==:ellipse . show ;
var platform = navigator . platform . toLowerCase ( ) ; var userAgent:==:navigator . userAgent . toLowerCase ( ) ;
var fontColor = fontColorHelper . getColorForMeasure ( objects , ' ' ) ; var showTime:==:powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' popup ' ] [ ' showTime ' ] , pulseChart . defaultSettings . popup . showTime ) ;
var _ im_choose = Module [ ' _ im_choose ' ] = asm [ ' _ im_choose ' ] ; var _ im_set_max_lens:==:Module [ ' _ im_set_max_lens ' ]    asm [ ' _ im_set_max_lens ' ] ;
var session = $ . gestures . session ; var options:==:this . options ;
var log = pouchdbUtils . guardedConsole . bind ( null , ' log ' ) ; var isArray:==:array . isArray ;
var labelEl = instance . get ( ' labelEl ' ) ; var checkEl:==:instance . get ( ' checkEl ' ) ;
var autoContainerWidth = _ props4 . autoContainerWidth ; var autoHeight:==:_ props4 . autoHeight ;
var node = node_list [ i ] ; var i d:==:node . getAttribute ( ' i d ' ) ;
var groupName = groupHeader . getAttribute ( ' data - groupName ' ) ; var groupNumber:==:groupHeader . getAttribute ( ' data - groupNumber ' ) ;
var isCustomComponent = require ( ' isCustomComponent ' ) ; var omittedCloseTags:==:require ( ' omittedCloseTags ' ) ;
var t2 = Prim2DBase_1 . _ t2 ; var as:==:Prim2DBase_1 . _ ts0 ;
var config = ( chart & & chart . config )  |  |  ; var defaults:==:Chart . defaults . global . plugins ;
var meanLongitude = meanLongitudeConstant + meanLongitudeSecPart * radiansPerArcSecond ; var longitudeOfNode:==:longitudeOfNodeConstant + longitudeOfNodeSecPart * radiansPerArcSecond ;
var value = entry . value [ 1 ] ; var type:==:typeof value ;
var stringExtensions = jsCommon . stringExtensions ; var fieldExprPattern:==:powerbi . data . fieldExprPattern ;
var n = a . yuv_in _ ; var o:==:a . yuv_in_off + bl ;
var y = point . y ; var data:==:this . _ data ;
var length = cylinder . length ; var topRadius:==:cylinder . topRadius ;
var file = files & & files . length ? files [ 0 ] : null ; var invalidFile:==:invalidFiles & & invalidFiles . length ? invalidFiles [ 0 ] : null ;
var experimental = imports [ ' preferences . experimental ' ] ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var integration = require ( ' analytics . js - integration ' ) ; var iso:==:require ( ' to - iso - string ' ) ;
var touch = touches [ i ] ; var identifier:==:touch . identifier  |  |  Infinity ;
var toString = object . prototype . toString ; var util:==:require ( ' util ' ) ;
var onLeftIconButtonTouchTap = _ props . onLeftIconButtonTouchTap ; var className:==:_ props . className ;
var data = this . data ; var spacingMode:==:data . spacingMode ;
var followSurface = polylineGeometry . _ followSurface ; var granularity:==:polylineGeometry . _ granularity ;
var m = this . meta , h = this . recordType , b = h . prototype . fields , l = b . items , i = b . length , j ; var g:==:this . getRoot ( a ) , e    g . length , d    e , k    true ;
var leaveToClass = ref . leaveToClass ; var leaveActiveClass:==:ref . leaveActiveClass ;
var auth = mongoUrl . auth & & mongoUrl . auth . split ( ' : ' ) ; var ssl:==:require ( ' querystring ' ) . parse ( mongoUrl . query ) . ssl      ' true ' ;
var params = func [ ' ( params ) ' ] . slice ( ) ; var param:==:params . pop ( ) ;
var nodeFieldCount = this . _ nodeFieldCount ; var firstEdgeIndexes:==:this . _ firstEdgeIndexes ;
var versions = data . versions ; var version:==:latestVersion ( versions ) ;
var c2 = _ addDiv ( ' c2 ' , document . body ) ; var c:==:document . getElementById ( ' container ' ) ;
var ch = this . ch ; var prevTok:==:this . prevTok ;
var sec = math . sec ; var complex:==:math . complex ;
var baseline = dom . baseline . value ; var size:==:dom . size . value ;
var tiptip_holder = $ ( ' # tiptip_holder ' ) ; var tiptip_content:==:$ ( ' # tiptip_content ' ) ;
var order = $ scope . order [ type ] ; var first_currency:==:$ scope . order . first_currency  |  |  Currency . from_json ( ' XRP ' ) ;
var days    = makeGetter ( ' days ' ) ; var months:==:makeGetter ( ' months ' ) ;
var _ strncpy = Module [ ' _ strncpy ' ] = asm [ ' _ strncpy ' ] ; var _ memmove:==:Module [ ' _ memmove ' ]    asm [ ' _ memmove ' ] ;
var badHexColor = badHexColors [ i ] ; var e:==:assertThrows ( goog . partial ( goog . color . hexToRgbStyle , badHexColor ) ) ;
var coordinateToPixelTransform = frameState . coordinateToPixelTransform ; var pixelToCoordinateTransform:==:frameState . pixelToCoordinateTransform ;
var svgUtil = powerbi . visuals . svgUtil ; var getLabelFormattedText:==:powerbi . visuals . dataLabelUtils . getLabelFormattedText ;
var isArray = sharedUtil . isArray ; var isBool:==:sharedUtil . isBool ;
var svg = ! ! argv . svg ; var optipng:==:! ! argv . optipng ;
var path = require ( ' path ' ) ; var diff:==:require ( ' diff ' ) ;
var vertices = object . geometry . vertices ; var faces:==:object . geometry . faces ;
var PUBLISHED = api . PUBLISHED ; var INSTANCE_ATTRIBUTES:==:api . INSTANCE_ATTRIBUTES ;
var path = require ( ' path ' ) ; var repl:==:require ( ' repl ' ) ;
var x = result . x ; var y:==:result . y ;
var column = this . _ grid . getOrCreateColumn ( columnIndex + this . _ columnLayoutManager . _ gridOffset ) ; var isLeaf:==:hierarchyNav . isLeaf ( item ) ;
var dotOffset = edge . dotOffset  |  |  3 ; var dotSize:==:edge . dotSize  |  |  1 ;
var geometry = this . geometry ; var material:==:this . material ;
var requestStats = goog . labs . net . webChannel . requestStats ; var channel:==:goog . labs . net . webChannel . channel ;
var format = _ _ webpack_require _ _ ( 2 ) . format ; var isNumber:==:_ _ webpack_require _ _ ( 2 ) . isNumber ;
var isStrictModeSupported = testUtils . isStrictModeSupported ; var onUnhandledFail:==:testUtils . onUnhandledFail ;
var orange50 = exports . orange50 = ' # fff3e0 ' ; var orange100:==:exports . orange100    ' # ffe0b2 ' ;
var axisExpandWidth = restrict ( parallelModel . get ( ' axisExpandWidth ' ) , layoutExtent ) ; var axisExpandCount:==:restrict ( parallelModel . get ( ' axisExpandCount ' )  |  |  0 , [ 0 , axisCount ] ) ;
var colors   = opts & & opts . colors ! = = undefined ? opts . colors : null ; var uvs:==:opts & & opts . uvs !    undefined ? opts . uvs : null ;
var shapes = this . _ shapes ; var visualMapModel:==:this . visualMapModel ;
var stat = fs . statSync ( file ) ; var isDir:==:stat . isDirectory ( ) ;
var samplers = json . samplers  |  |  ; var sampler:==:samplers [ texture . sampler ]  |  |  ;
var vertSizef = this . morph . _ vertSizef ; var offsetpf:==:this . morph . _ offsetpf ;
var editor   = this . editor ; var settings:==:this . settings ;
var mathord = ' mathord ' ; var op:==:' op ' ;
var state = this . state _ ; var fill:==:state . fillStyle !    undefined ;
var ellipsoid = polygonGeometry . _ ellipsoid ; var minHeight:==:minHeightFunc ( granularity , ellipsoid ) ;
var require = blanket . options ( ' commonJS ' ) ? blanket . _ commonjs . require : window . require ; var requirejs:==:blanket . options ( ' commonJS ' ) ? blanket . _ commonjs . requirejs : window . requirejs ;
var should = require ( ' should ' ) ; var Test:==:mocha . Test ;
var Parent = require ( ' vfs - child ' ) . Parent ; var fs:==:require ( ' fs ' ) ;
var transactionMode = goog . db . transaction . transactionMode ; var eventTypes:==:goog . db . transaction . eventTypes ;
var rectangle = imagery . rectangle ; var context:==:frameState . context ;
var x = px * sx + py * shx + tx ; var y:==:px * shy + py * sy + ty ;
var index = geometry . index ; var position:==:geometry . attributes . position ;
var ready = require ( ' ready ' ) ; var eventproxy:==:require ( ' eventproxy ' ) ;
var invalid = require ( ' character - reference - invalid ' ) ; var decimal:==:require ( ' is - decimal ' ) ;
var caption = $ img . attr ( ' data - caption ' ) ; var align:==:$ img . attr ( ' data - align ' ) ;
var loki = name : ' loki ' , age : 1 ; var jane:==:name : ' jane ' , age : 5 ;
var layer = layui . layer ; var device:==:layui . device ( ) ;
var lightBlue600 = exports . lightBlue600 = ' # 039be5 ' ; var lightBlue700:==:exports . lightBlue700    ' # 0288d1 ' ;
var classList = this . element . classList ; var last:==:router . last ;
var inJs = window . inJs ; var debug:==:window . debug ;
var alwaysOnTop = powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' popup ' ] [ ' alwaysOnTop ' ] , pulseChart . defaultSettings . popup . alwaysOnTop ) ; var width:==:math . max ( pulseChart . popupMinWidth , math . min ( pulseChart . popupMaxWidth , powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' popup ' ] [ ' width ' ] , pulseChart . defaultSettings . popup . width ) ) ) ;
var ellipsoid = options . ellipsoid ; var height:==:options . height ;
var height = requiredHeight  |  |  ( navigator . isCocoonjs ? window . innerHeight : this . _ renderingCanvas . height ) ; var x:==:viewport . x  |  |  0 ;
var TOTAL_MEMORY = Module [ ' TOTAL_MEMORY ' ]  |  |  4194304 ; var FAST_MEMORY:==:Module [ ' FAST_MEMORY ' ]  |  |  2097152 ;
var schema = res . schema ; var baseId:==:res . baseId ;
var conf = config  |  |  ; var pixelRatio:==:conf . pixelRatio  |  |  kinetic . pixelRatio  |  |  _ pixelRatio ;
var i = pointPrimitive . _ index ; var color:==:pointPrimitive . color ;
var s = goog . vec . vec3d . createFromValues ( 6 , 7 , 8 ) ; var o:==:goog . vec . vec3d . createFromValues ( 9 , 10 , -11 ) ;
var a = face . a ; var b:==:face . b ;
var text = this . _ textEditor . text ( ) ; var range:==:this . _ textEditor . range ( ) ;
var controllerAs = options . controllerAs ; var resolve:==:options . resolve  |  |  ;
var g = Math . floor ( color . g * 255 ) ; var b:==:Math . floor ( color . b * 255 ) ;
var checked = n . attributes . checked ; var href:==:a . href ? a . href : Ext . isGecko ? ' ' : ' # ' ;
var transformConstraints = this . transformConstraints ; var pathConstraints:==:this . pathConstraints ;
var child = element . children ( ' a ' ) ; var preventDefault:==:jasmine . createSpy ( ' preventDefault ' ) ;
var points = args . points ; var point:==:points . filter ( function ( p ) return p . active ) . shift ( ) ;
var ui = imports . ui ; var anims:==:imports . anims ;
var modalTerminal = views . modalTerminal ; var containedBase:==:views . containedBase ;
var initializer = this . transformLoopIninitaliser _ ( tree . initializer ) ; var collection:==:this . transformAny ( tree . collection ) ;
var mongoose = require ( ' mongoose ' ) ; var Schema:==:mongoose . Schema ;
var waiter = resp . request . _ waiter ; var acceptors:==:waiter . config . acceptors ;
var document = window . document ; var Element:==:window . Element ;
var target = $ ( e . target ) . closest ( ' th , td ' ) ; var offset:==:target . offset ( ) ;
var selectEventPlugin = require ( ' selectEventPlugin ' ) ; var simpleEventPlugin:==:require ( ' simpleEventPlugin ' ) ;
var watcher = imports . watcher ; var focusManager:==:imports . focusManager ;
var el = $ el [ 0 ] ; var placeholder:==:el . getAttribute ( ' placeholder ' ) ;
var key = event . detail . key ; var newValue:==:event . detail . newValue ;
var addedEntities = this . _ addedEntities ; var removed:==:this . _ removedEntities ;
var keys = other . keys ( ) ; var values:==:other . values ( ) ;
var events = _ interopDefault ( require ( ' events ' ) ) ; var inherits:==:_ interopDefault ( require ( ' inherits ' ) ) ;
var assign = require ( ' object - assign ' ) ; var copy:==:require ( ' clipboard - js ' ) ;
var frame1 = doc . getElementById ( ' frame1id ' ) ; var frame2:==:doc . getElementById ( ' frame2id ' ) ;
var scope = args . scope  |  |  [ ] ; var client:==:args . client      true ;
var tar = require ( ' tar ' ) ; var zlib:==:require ( ' zlib ' ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var schema:==:mongoose . schema ;
var x = value . x ; var y:==:value . y ;
var noSortAlphabetically = configuration . noSortAlphabetically  |  |  false ; var reservedFirst:==:configuration . reservedFirst  |  |  false ;
var uniformMaps = model . _ uniformMaps ; var gltf:==:model . gltf ;
var checkMergeObjectArg = mergeHelpers . checkMergeObjectArg ; var checkMergeIntoObjectArg:==:mergeHelpers . checkMergeIntoObjectArg ;
var readline = require ( ' readline ' ) ; var spawn:==:require ( ' child_process ' ) . spawn ;
var satellite = obj . satellite ; var stderr:==:obj . stderr  |  |  '' ;
var endSymbol = $ interpolate . endSymbol ( ) ; var theme:==:startSymbol + ( options . themeWatch ? '' : ' : : ' ) + ' theme ' + endSymbol ;
var a1 = field : ' a1 ' , field2 : ' hello ' ; var a2:==:field : ' a2 ' , field2 : 33 ;
var async = require ( ' async ' ) ; var sinon:==:require ( ' sinon ' ) ;
var width = readState . width  |  |  gl . drawingBufferWidth ; var height:==:readState . height  |  |  gl . drawingBufferHeight ;
var item = this . items [ index ] ; var filepath:==:item . filepath ;
var temp = require ( ' temp ' ) . track ( ) ; var exec:==:require ( ' child_process ' ) . exec ;
var socket = require ( ' socket . io ' ) ; var client:==:require ( ' socket . io - client ' ) ;
var Plugin = imports . Plugin ; var layout:==:imports . layout ;
var clone = Base . clone . call ( this ) ; var words:==:clone . words    this . words . slice ( 0 ) ;
var done = self . _ done ( resolve , self ) ; var onRemoving:==:self . config [ ' onRemoving ' ]  |  |  angular . noop ;
var forEach = [ ] . forEach ; var slice:==:[ ] . slice ;
var prevContext = context . prevContext ; var element:==:prevContext ? ' where each element ' + getMessage ( prevContext , v ) : ' ' ;
var Characteristic = require ( ' hap - nodejs ' ) . Characteristic ; var accessoryLoader:==:require ( ' hap - nodejs ' ) . accessoryLoader ;
var path = require ( ' path ' ) ; var readline:==:require ( ' readline ' ) ;
var Dialog = imports . Dialog ; var util:==:imports . util ;
var func = _ react$PropTypes . func ; var oneOfType:==:_ react$PropTypes . oneOfType ;
var deviceEventManager = require ( ' nativeModules ' ) . deviceEventManager ; var rctDeviceEventEmitter:==:require ( ' rctDeviceEventEmitter ' ) ;
var gulp = require ( ' gulp ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var multiline = require ( ' multiline ' ) ; var pedding:==:require ( ' pedding ' ) ;
var SCALE_INDEX = Billboard . SCALE_INDEX ; var IMAGE_INDEX_INDEX:==:Billboard . IMAGE_INDEX_INDEX ;
var cookie = imports [ ' analytics . cookie ' ] ; var run:==:imports . run ;
var a = next [ x ] [ y ] . a ; var b:==:next [ x ] [ y ] . b ;
var color = option . color |  | null ; var fps:==:option . fps ;
var onScroll = this . props . onScroll ; var scrolly:==:' scrolly ' in window ? window . scrolly : document . documentElement . scrollTop ;
var builder = instance . get ( ' builder ' ) ; var publishedSource:==:builder . publishedSource ;
var selection = this . selection ; var rangeList:==:selection . rangeList ;
var el = this . el ; var vrDisplay:==:this . system . vrDisplay ;
var chalk = require ( ' chalk ' ) ; var assign:==:require ( ' lodash ' ) . assign ;
var execSync = require ( ' child_process ' ) . execSync ; var spawn:==:require ( ' cross - spawn ' ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var path:==:require ( ' path ' ) ;
var b = [ ' bar ' ] ; var c:==:splice_function ( a , 10 , pos - 20 ) ;
var menus = imports . menus ; var editors:==:imports . editors ;
var video = element . find ( ' video ' ) , video_obj = video [ 0 ] ; var slider:==:element . find ( ' . stream - slider ' ) . data ( ' slider ' ) ;
var value = parsedAction . properties [ i ] . value ; var name:==:parsedAction . properties [ i ] . name ;
var c = ast . condition . visit ( this ) ; var t:==:ast . trueExp . visit ( this ) ;
var color = node . color ; var backColor:==:node . backColor ;
var finalPos = eventArgs [ 0 ] . finalPos  |  |  eventArgs [ 0 ] . pos ; var p:==:left : finalPos [ 0 ] , top : finalPos [ 1 ] ;
var metadata = JSON . parse ( buffer ) . metadata ; var license:==:metadata . license ;
var denodeify = require ( ' denodeify ' ) ; var mkdirp:==:denodeify ( require ( ' mkdirp ' ) ) ;
var params = ob . params ; var validate:==:ob . validateUserForDataWriteapi ;
var glyph = label . _ glyphs [ 0 ] ; var billboard:==:glyph . billboard ;
var dataChannelReceive = document . querySelector ( ' textarea#dataChannelReceive ' ) ; var startButton:==:document . querySelector ( ' button#startButton ' ) ;
var error = this . _ errors [ i ] ; var message:==:error . message ;
var icon = props . icon ; var label:==:props . label ;
var columnCount = _ props2 . columnCount ; var width:==:_ props2 . width ;
var removePragmas = options . removePragmas ; var combineOutput:==:path . join ( ' build ' , ' combineOutput ' , optimizer ) ;
var axisCount = layoutInfo . axisCount ; var axisCollapseWidth:==:layoutInfo . axisCollapseWidth ;
var material = options . material ; var extrudeMaterial:==:options . extrudeMaterial ;
var GW = this . computeGW ( ) ; var giMf:==:this . computeGiMf ( ) ;
var curveSegments = options . curveSegments ! = = undefined ? options . curveSegments : 12 ; var steps:==:options . steps !    undefined ? options . steps : 1 ;
var source = originalPosition . source ; var line:==:originalPosition . line ;
var util = require ( ' util ' ) ; var rpc:==:require ( ' pm2-axon - rpc ' ) ;
var activeClassName = _ props2 . activeClassName ; var activeStyle:==:_ props2 . activeStyle ;
var options = opt_options ? opt_options : ; var pixelRatio:==:options . pixelRatio  |  |  ol . has . device_pixel_ratio ;
var params = ob . params ; var validate:==:ob . validateUserForDataReadapi ;
var pos = this . position ( ) ; var size:==:this . size ( ) ;
var registerComponent = component . registerComponent ; var shaders:==:shader . shaders ;
var width = width = = null ? this . _ getWidth ( ) : width ; var height:==:height     null ? this . _ getHeight ( ) : height ;
var i = 4 * ( x * this . scale + this . imageData _ . width * y * this . scale ) ; var d:==:this . imageData _ . data ;
var calendarIdentifiers = globalization . calendarIdentifiers ; var clockIdentifiers:==:globalization . clockIdentifiers ;
var remaining = + res . headers [ ' x - ratelimit - remaining ' ] ; var reset:==:+ res . headers [ ' x - ratelimit - reset ' ] ;
var messageHandler = sharedUtil . messageHandler ; var missingpdfException:==:sharedUtil . missingpdfException ;
var b = this . _ lastBeta - this . _ beta ; var g:==:this . _ lastGamma - this . _ gamma ;
var radius = opts & & opts . radius ! = = undefined ? opts . radius : 0 . 3 ; var height:==:opts & & opts . height !    undefined ? opts . height : 1 . 0 ;
var searches   = method . searches ; var searchData:==:method . searchData ;
var getInnerhtml = scope . getInnerhtml ; var getTreeScope:==:scope . getTreeScope ;
var spawn = require ( ' child_process ' ) . spawn ; var uuid:==:require ( ' uuid ' ) ;
var htmlShadowElement = scope . wrappers . htmlShadowElement ; var node:==:scope . wrappers . node ;
var tabManager = imports . tabManager ; var async:==:require ( ' async ' ) ;
var tileWidth = this . tileWidth * this . scale . x ; var tileHeight:==:this . tileHeight * this . scale . y ;
var xdomain = opts . xdomain ; var xscheme:==:opts . xscheme ;
var extractedTags = job . extractedTags ; var decorations:==:job . decorations ;
var TRACEUR = traceur . syntax . predefinedName . traceur ; var parseTreeType:==:traceur . syntax . trees . parseTreeType ;
var Prism = require ( ' Prism ' ) ; var Header:==:require ( ' Header ' ) ;
var title = document . getElementById ( ' title - si - sl ' ) ; var screen:==:document . getElementById ( ' si - sl - screen ' ) ;
var container = opts . container ; var outerContainer:==:opts . outerContainer ;
var exec = promisify ( child_process . exec ) ; var readdir:==:promisify ( fs . readdir ) ;
var l = rows . length ; var s:==:( c . page * c . size ) ;
var attr = ' data - dojo - test - attribute ' ; var value:==:' the value ' ;
var file = grunt . file ; var log:==:grunt . log ;
var v = particle . velocity ; var r:==:particle . radius  |  |  0 ;
var topOverlay = this . topOverlay . clone . wtTable . holder ; var bottomOverlay:==:this . bottomOverlay . clone ? this . bottomOverlay . clone . wtTable . holder : null ;
var channel = ' test channel ' ; var message:==:new Buffer ( ' test message ' ) ;
var windowColor = _ options . windowColor ; var windowOpacity:==:_ options . windowOpacity ;
var cluster = require ( ' cluster ' ) ; var http:==:require ( ' http ' ) ;
var connect = require ( ' gulp - connect ' ) ; var less:==:require ( ' gulp - less ' ) ;
var dispatchListeners = event . _ dispatchListeners ; var dispatchInstances:==:event . _ dispatchInstances ;
var x = mouseListener . x * glplot . pixelRatio ; var y:==:this . canvas . height - glplot . pixelRatio * mouseListener . y ;
var host = options . host  |  |  ' localhost ' ; var port:==:options . port ;
var transition = operation . transition ; var wait:==:operation . wait ;
var showTitle = dataViewObject . getValue ( this . legendObjectProperties , legendProps . showTitle , true ) ; var titleText:==:dataViewObject . getValue ( this . legendObjectProperties , legendProps . titleText , this . layerLegendData ? this . layerLegendData . title : ' ' ) ;
var port = grunt . option ( ' port ' )  |  |  8000 ; var root:==:grunt . option ( ' root ' )  |  |  ' . ' ;
var a = makeSharedTypedArray ( constructor , initialLen ) ; var s:==:a . subarray ( start , end ) ;
var newLen = unpacked . newLen ; var ops:==:unpacked . ops ;
var startParam = firstDefined ( source . startParam , options . startParam ) ; var endParam:==:firstDefined ( source . endParam , options . endParam ) ;
var models = this . modelsToLoad ; var length:==:models . length ;
var fs = imports . fs ; var ui:==:imports . ui ;
var stdout = Caml_io . stdout ; var stderr:==:Caml_io . stderr ;
var endState = traceur . codegeneration . generator . endState ; var yieldState:==:traceur . codegeneration . generator . yieldState ;
var math = ' math ' ; var text:==:' text ' ;
var canvas = this . canvas ; var aspectRatio:==:options . aspectRatio ;
var items = this . _ items ; var cluster:==:this . _ cluster ;
var r = defRot ? defRot : k . r ; var s:==:defScl ? defScl : k . s ;
var plugins = self . plugins ; var plugin:==:Interface . plugins [ name ] ;
var http   = require ( ' http ' ) ; var https:==:require ( ' https ' ) ;
var toString = object . prototype . toString ; var hasOwn:==:object . prototype . hasOwnProperty ;
var portlet = $ ( event . target ) . parents ( ' . ui - portlet ' ) ; var item:==:$ ( event . target ) . parents ( ' . ui - portlet - item ' ) ;
var createClass = preactCompat . createClass ; var createElement:==:preactCompat . createElement ;
var reporter = this . reporter _ ; var project:==:this . project _ ;
var width = video . width ; var height:==:video . height ;
var max_age = _ ref . max_age ; var ui_locales:==:_ ref . ui_locales ;
var pickOffsets = primitive . _ pickOffsets ; var length:==:pickOffsets . length * 3 ;
var specular = originalMaterial . specular ; var shininess:==:originalMaterial . shininess ;
var width = _ props . width ; var columnKey:==:_ props . columnKey ;
var console = window . console  |  |  log : function ( ) ; var URL:==:window . URL  |  |  window . webkitURL ;
var y = this . attribute ( ' y ' ) . Length . toPixels ( ' y ' ) ; var width:==:this . attribute ( ' width ' ) . length . toPixels ( ' x ' ) ;
var Tag = ctx . model ( ' Tag ' ) ; var i d:==:this . _ i d ;
var btn1 = document . getElementById ( ' btn1 ' ) ; var btn2:==:document . getElementById ( ' btn2 ' ) ;
var mode = options . mode ; var message:==:options . message ;
var scale9Sprite = ccui . scale9Sprite ; var proto:==:ccui . scale9Sprite . webglRenderCmd . prototype    object . create ( cc . node . webglRenderCmd . prototype ) ;
var Divider = imports . Divider ; var settings:==:imports . settings ;
var valueFormatter = powerbi . visuals . valueFormatter ; var createInteractivityService:==:powerbi . visuals . createInteractivityService ;
var direction = ray . direction ; var normal:==:plane . normal ;
var listenMarkerEvents = leafletMarkersHelpers . listenMarkerEvents ; var addMarkerToGroup:==:leafletMarkersHelpers . addMarkerToGroup ;
var PENDING = ' PENDING ' ; var DISABLED:==:' DISABLED ' ;
var a = new constantNode ( 1 ) ; var add:==:new operatorNode ( ' + ' , ' add ' , [ a , a ] ) ;
var prefix = typeof o . prefix = = ' undefined ' & & ' assert '  |  |  o . prefix ; var includeFail:==:typeof o . includeFail     ' undefined '  |  |  ! ! o . includeFail ;
var hour = this . hour ; var day:==:this . day ;
var createFunctionDeclaration = parseTreeFactory . createFunctionDeclaration ; var createGetAccessor:==:parseTreeFactory . createGetAccessor ;
var velocity = -event . velocity ; var delta:==:-event . delta ;
var clone = _ _ webpack_require _ _ ( 5 ) . clone ; var validateIndex:==:_ _ webpack_require _ _ ( 3 ) . validateIndex ;
var template = options . template ; var errorArea:==:options . errorArea ;
var settings = imports . settings ; var ace:==:imports . ace ;
var exportDeclaration = traceur . syntax . trees . exportDeclaration ; var exportMapping:==:traceur . syntax . trees . exportMapping ;
var links = configNode . getAttribute ( ' links ' ) ; var hl:==:configNode . getAttribute ( ' highlight ' ) ;
var w = queryNumericValue ( iconNode , ' w ' , namespaces . gx ) ; var h:==:queryNumericValue ( iconNode , ' h ' , namespaces . gx ) ;
var camera = scene . _ camera ; var frustum:==:camera . frustum ;
var reactHostComponent = require ( ' reactHostComponent ' ) ; var getNextDebugid:==:require ( ' getNextDebugid ' ) ;
var memberLookupExpression = traceur . syntax . trees . memberLookupExpression ; var missingPrimaryExpression:==:traceur . syntax . trees . missingPrimaryExpression ;
var scrollLeft = self . _ _ scrollLeft ; var scrollTop:==:self . _ _ scrollTop ;
var cos = Math . cos ( radian ) ; var sin:==:Math . sin ( radian ) ;
var fileSystemPath = entry . fileSystemPath ; var urlPrefix:==:entry . urlPrefix ;
var ext = imports . ext ; var Plugin:==:imports . Plugin ;
var drawable = me . drawable ; var domElement:==:drawable . domElement ;
var browser = require ( ' browser - sync ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var width = model . width ; var height:==:model . height ;
var recent = document . getElementById ( ' option - recents ' ) ; var contacts:==:document . getElementById ( ' option - contacts ' ) ;
var queryString = this . _ request . queryString ( ) ; var queryParameters:==:this . _ request . queryParameters ;
var forms = util . Module ( ' forms ' ) ; var assert:==:util . assert ;
var definition = result . definition ; var scopeChain:==:result . scopeChain ;
var i d = parsed . i d ; var path:==:parsed . path ;
var coll = new Mongo . Collection ( collName , connection : conn ) ; var o:==:observeCursor ( test , coll . find ( ) ) ;
var popover = _ this . $ els . popover ; var trigger:==:_ this . $ els . trigger . children [ 0 ] ;
var dynCall_viiiiiii = Module [ ' dynCall_viiiiiii ' ] = asm [ ' dynCall_viiiiiii ' ] ; var dynCall_viiiii:==:Module [ ' dynCall_viiiii ' ]    asm [ ' dynCall_viiiii ' ] ;
var uValues = this . _ uValues = this . _ quantizedVertices . subarray ( 0 , vertexCount ) ; var vValues:==:this . _ vValues    this . _ quantizedVertices . subarray ( vertexCount , 2 * vertexCount ) ;
var margin = this . margin ; var width:==:options . viewport . width - ( margin . left + margin . right ) ;
var all = _ _ dependency3 _ _ . all ; var race:==:_ _ dependency4 _ _ . race ;
var textMeasurementService = powerbi . textMeasurementService ; var valueFormatter:==:powerbi . visuals . valueFormatter ;
var bunyan = require ( ' bunyan ' ) ; var httpError:==:require ( ' restify - errors ' ) . httpError ;
var tw = this . tw + this . pad ; var th:==:this . th + this . pad ;
var env = process . env . NODE_ENV ; var PACKAGE_NAME:==:configFactory . package_name ;
var pdfDocument = this . pdfDocument ; var printContainer:==:this . printContainer ;
var objectPattern = traceur . syntax . trees . objectPattern ; var objectPatternField:==:traceur . syntax . trees . objectPatternField ;
var Tree = imports . Tree ; var Datagrid:==:imports . Datagrid ;
var rotr64_lo = utils . rotr64_lo ; var shr64_hi:==:utils . shr64_hi ;
var underlyingNodes = options . underlyingNodes ; var checkIfAttachable:==:options . checkIfAttachable ;
var innerWidth = win [ ' innerWidth ' ] ; var innerHeight:==:win [ ' innerHeight ' ] ;
var parseHiddenNodes = opts [ ' parseHiddenNodes ' ]  |  |  ' false ' ; var c:==:node . childNodes ;
var range = this . $ options . range  |  |  session . getSelection ( ) . getRange ( ) ; var start:==:this . $ options . start  |  |  range [ searchSelection ? ' start ' : ' end ' ] ;
var lightGreen300 = exports . lightGreen300 = ' # aed581 ' ; var lightGreen400:==:exports . lightGreen400    ' # 9ccc65 ' ;
var dataSource = this . dataSource ; var settings:==:dataSource & & dataSource . settings ;
var x = node . getAttribute ( ' x ' )  |  |  0 ; var y:==:node . getAttribute ( ' y ' )  |  |  0 ;
var errorStyle = props . errorStyle ; var focus:==:props . focus ;
var el = this . el ; var component:==:new components . material . Component ( el , color : ' red ' ) ;
var operationIdGenerator = options . operationIdGenerator  |  |  basicOperationIdGenerator ; var timestampGenerator:==:options . timestampGenerator  |  |  basicTimestampGenerator ;
var timestamps = this . _ profileSamples . timestamps ; var totalTime:==:this . _ profileSamples . totalTime ;
var hostname = urlParts . hostname ; var protocol:==:urlParts . protocol ;
var object = _ dereq _ ( ' object - component ' ) ; var debug:==:_ dereq _ ( ' debug ' ) ( ' socket . io - client : manager ' ) ;
var t = doc . types . shift ( ) ; var n:==:doc . nums . shift ( ) ;
var totalRows = this . instance . getSetting ( ' totalRows ' ) ; var rowHeaders:==:this . wot . getSetting ( ' rowHeaders ' ) . length ;
var packedLength = innerType . packedLength ; var packedInterpolationLength:==:defaultValue ( innerType . packedInterpolationLength , packedLength ) ;
var recordingModule = require ( ' nativeModules ' ) . initialPropsRecordingModule ; var text:==:require ( ' text ' ) ;
var node = this . _ nodes [ index ] ; var modifier:==:this . _ modifiers [ index ] ;
var subscriber = state . subscriber ; var scheduler:==:state . scheduler ;
var surfaceHeight = geometry . _ surfaceHeight ; var rotation:==:geometry . _ rotation ;
var dynCall_iiii = Module [ ' dynCall_iiii ' ] = asm [ ' dynCall_iiii ' ] ; var dynCall_viiiii:==:Module [ ' dynCall_viiiii ' ]    asm [ ' dynCall_viiiii ' ] ;
var reactSimpleEmptyComponent = require ( ' reactSimpleEmptyComponent ' ) ; var reactUpdates:==:require ( ' reactUpdates ' ) ;
var express = require ( ' express ' ) ; var grappling:==:require ( ' grappling - hook ' ) ;
var wrap = shadowdomPolyfill . wrap ; var unwrap:==:shadowdomPolyfill . unwrap ;
var HAS_POSITIVE_NUMERIC_VALUE = domProperty . injection . has_positive_numeric_value ; var has_overloaded_boolean_value:==:domProperty . injection . has_overloaded_boolean_value ;
var fs    = require ( ' fs ' ) ; var path:==:require ( ' path ' ) ;
var line = this . childOfName ( ' line ' ) ; var lineStyle:==:seriesScope & & seriesScope . lineStyle ;
var wrap = scope . wrap ; var wrapEventTargetMethods:==:scope . wrapEventTargetMethods ;
var instantiateReactComponent = require ( ' instantiateReactComponent ' ) ; var shouldUpdateReactComponent:==:require ( ' shouldUpdateReactComponent ' ) ;
var remoteTransport = kendo . data . remoteTransport ; var model:==:kendo . data . model ;
var d = new objectNode ( a : new symbolNode ( ' foo ' ) , b : new constantNode ( 2 ) ) ; var e:==:new objectNode ( a : new symbolNode ( ' a ' ) ) ;
var drawLine = drawapi . drawLine ; var checkLineIntersection:==:drawapi . checkLineIntersection ;
var data = this . _ data ; var radi:==:this . _ radi ;
var height = options . height  |  |  10 ; var subdivisions:==:options . subdivisions  |  |  1 ;
var size = fontSizeMappings [ node . getAttribute ( ' size ' ) ] ; var face:==:node . getAttribute ( ' face ' ) ;
var offset = options . offset ; var sideOrientation:==:this . updateSideOrientation ( options . sideOrientation , scene ) ;
var isWP = platformInfo . iswp ; var config:==:configService . getSync ( ) ;
var x = this . x _ - xy . x ; var y:==:this . y _ - xy . y ;
var scrollTop = _ props2 . scrollTop ; var scrollToRow:==:_ props2 . scrollToRow ;
var exec = child_process . exec ; var fs:==:require ( ' fs - extra ' ) ;
var fullLayout = gd . _ fullLayout ; var i d:==:' contour ' + uid ;
var location = win . location ; var doc:==:document ;
var reactCompositeComponentTypes = require ( ' reactCompositeComponentTypes ' ) ; var reactErrorUtils:==:require ( ' reactErrorUtils ' ) ;
var w = parseFloat ( svgRoot . getAttribute ( ' width ' ) ) ; var h:==:parseFloat ( svgRoot . getAttribute ( ' height ' ) ) ;
var materials = extractFromCache ( meta . materials ) ; var textures:==:extractFromCache ( meta . textures ) ;
var path = require ( ' path ' ) ; var proxyquire:==:require ( ' proxyquire ' ) ;
var object3D = this . el . object3D ; var data:==:this . data ;
var containerSize = _ ref5 . containerSize ; var offset:==:_ ref5 . offset ;
var readyState = this . win . document & & this . win . document . readyState ; var location:==:this . win . document . location ;
var telnet = require ( ' telnet - client ' ) ; var me:==:' my_username ' ;
var fulfill = follower . _ fulfillmentHandlerAt ( index ) ; var reject:==:follower . _ rejectionHandlerAt ( index ) ;
var outputDirectory = options . outputDirectory ; var removePragmas:==:options . removePragmas ;
var parenExpression = traceur . syntax . trees . parenExpression ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var styleSheetPropType = require ( ' styleSheetPropType ' ) ; var view:==:require ( ' view ' ) ;
var gulp = require ( ' gulp ' ) ; var fs:==:require ( ' fs ' ) ;
var setWorldConstructor = exports . setWorldConstructor = proxySupportCode ( ' setWorldConstructor ' ) ; var given:==:exports . given    defineStep ;
var doc_ids = opts . doc_ids ; var selector:==:opts . selector ;
var sourceRange = traceur . util . sourceRange ; var sourcePosition:==:traceur . util . sourcePosition ;
var lightBlue50 = exports . lightBlue50 = ' # e1f5fe ' ; var lightBlue100:==:exports . lightBlue100    ' # b3e5fc ' ;
var syntheticuiEvent = require ( ' syntheticuiEvent ' ) ; var getEventModifierState:==:require ( ' getEventModifierState ' ) ;
var dx3 = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx3 ' , this . dx3 ) ) ) ) ; var notch:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' notch ' , this . notch ) ) ) ) ;
var path = require ( ' path ' ) ; var vfs:==:require ( ' vfs - local ' ) ;
var DELIMITERS = HTMLCSS . FONTDATA . DELIMITERS ; var H:==:' H ' , V    ' V ' ;
var rows = this . rows . groups ; var sortedCols:==:this . sortedCols ( ) ;
var semver = require ( ' semver ' ) ; var vm:==:require ( ' vm ' ) ;
var ellipsoid = this . _ ellipsoid ; var origin:==:this . _ origin ;
var addonListView = _ jsViewAddonListView [ ' default ' ] ; var detailsView:==:_ jsViewDetailsView [ ' default ' ] ;
var createMemberExpression = traceur . codegeneration . parseTreeFactory . createMemberExpression ; var createOperatorToken:==:traceur . codegeneration . parseTreeFactory . createOperatorToken ;
var view = that . dataSource . view ( ) ; var template:==:that . templates . itemTemplate ;
var ARRAY_PATTERN = ' ARRAY_PATTERN ' ; var ARRAY_TYPE:==:' ARRAY_TYPE ' ;
var transaction = e . target . transaction ; var oldVersion:==:e . oldVersion ;
var React = require ( ' React ' ) ; var Image:==:require ( ' Image ' ) ;
var noteId = $ ( this ) . parent ( ) . attr ( ' noteId ' ) ; var note:==:note . getNote ( noteId ) ;
var edgeToNodeOffset = this . _ edgeToNodeOffset ; var firstEdgeIndexes:==:this . _ firstEdgeIndexes ;
var axisBase = layoutInfo . axisBase ; var layoutBase:==:layoutInfo . layoutBase ;
var y = u . y - v . y ; var z:==:u . z - v . z ;
var rotateMix = this . rotateMix , translateMix = this . translateMix ; var translate:==:translateMix > 0 , rotate    rotateMix > 0 ;
var type = value . type ; var subtype:==:value . subtype ;
var subscribers = parent . _ subscribers ; var length:==:subscribers . length ;
var commonsChunkPlugin = webpack . optimize . commonsChunkPlugin ; var autoprefixer:==:require ( ' autoprefixer ' ) ;
var not = math . not ; var functionNode:==:math . expression . node . functionNode ;
var Editor = imports . Editor ; var Document:==:imports . Document ;
var resourceSize = number . bytesToString ( this . _ request . resourceSize ) ; var transferSize:==:number . bytesToString ( this . _ request . transferSize ) ;
var timeoutTime = _ timeoutTime  |  |  1000 ; var intervalTime:==:_ intervalTime  |  |  10 ;
var p = path . join ( root , d ) ; var stat:==:fs . statSync ( p ) ;
var tween = tweens [ i ] ; var tweenjs:==:tween . tweenjs ;
var objectStore = txn . objectStore ( by_seq_store ) ; var rev:==:opts . rev  |  |  metadata . winningRev  |  |  merge . winningRev ( metadata ) ;
var afinn = JSON . parse ( afinndata ) ; var express:==:require ( ' express ' ) ;
var ctx = this . ctx ; var w:==:width , h    height ;
var comp = route . comp ; var props:==:route . props ;
var flash = require ( ' connect - flash ' ) ; var config:==:require ( ' config - lite ' ) ( _ _ dirname ) ;
var Dimensions = require ( ' Dimensions ' ) ; var Platform:==:require ( ' Platform ' ) ;
var sel = ace . selection ; var session:==:ace . session ;
var noErrorsPlugin = webpack . noErrorsPlugin ; var optimize:==:webpack . optimize ;
var renderAllPending = scope . renderAllPending ; var rewrap:==:scope . rewrap ;
var message = evt . detail . message  |  |  '' ; var elements:==:this . elements ;
var gl = context . _ gl ; var maximumRenderbufferSize:==:contextLimits . maximumRenderbufferSize ;
var time = cronInfo . time ; var action:==:cronInfo . action ;
var Header = require ( ' Header ' ) ; var Marked:==:require ( ' Marked ' ) ;
var pinkA200 = exports . pinkA200 = ' # ff4081 ' ; var pinkA400:==:exports . pinkA400    ' # f50057 ' ;
var finallyFallThroughState = traceur . codegeneration . generator . finallyFallThroughState ; var finallyState:==:traceur . codegeneration . generator . finallyState ;
var colors    = require ( ' colors ' ) ; var child_process:==:require ( ' child_process ' ) ;
var blendIndices = opts & & opts . blendIndices ! = = undefined ? opts . blendIndices : null ; var blendWeights:==:opts & & opts . blendWeights !    undefined ? opts . blendWeights : null ;
var username = _ . get ( options , ' username ' ) ; var password:==:_ . get ( options , ' password ' ) ;
var protocol = this . protocol  |  |  '' ; var pathname:==:this . pathname  |  |  '' ;
var w = canvas . width ; var h:==:canvas . height ;
var moduleSymbol = traceur . semantics . symbols . moduleSymbol ; var objectMap:==:traceur . util . objectMap ;
var Identify = require ( ' facade ' ) . Identify ; var extend:==:require ( ' extend ' ) ;
var POSITION_INDEX = Billboard . POSITION_INDEX = 1 ; var PIXEL_OFFSET_INDEX:==:Billboard . PIXEL_OFFSET_INDEX    2 ;
var noteId = $ ( this ) . attr ( ' noteId ' ) ; var note:==:note . cache [ noteId ] ;
var x = cx + ( Math . sin ( angle ) * radius ) ; var y:==:cy + ( -Math . cos ( angle ) * radius ) ;
var it = this . iterators _ [ this . currentIdx _ ] ; var next:==:it . next ( ) ;
var monster = monsters [ p ] ; var sum:==:0 , sum2    0 ;
var len = state . tokenStack . length ; var dep:==:( depth ? depth : 1 ) ;
var syntheticEvent = require ( ' syntheticEvent ' ) ; var getEventTarget:==:require ( ' getEventTarget ' ) ;
var width = Base . window . width * . 75  |  0 ; var total:==:runner . total ;
var Plugin = imports . Plugin ; var settings:==:imports . settings ;
var debug = require ( ' debug ' ) ( ' analytics : user ' ) ; var inherit:==:require ( ' inherit ' ) ;
var a = new String ( ' a ' ) ; var b:==:new String ( ' b ' ) ;
var argv = inputs . argv  |  |  process . argv ; var slice:==:inputs . slice !    undefined ? inputs . slice : 2 ;
var eventName = eventInfo . eventName ; var capture:==:eventInfo . capture ;
var attributeExpressions = this . _ attributeExpressions ; var dataId:==:this . _ attributes [ dataIdAttr ] ;
var token = opts . token ; var islet:==:opts . islet ;
var ignoreProtocolVersion = options . ignoreProtocolVersion ; var region:==:strictRegion  |  |  options . region ;
var div = document . createElement ( ' div ' ) ; var graph:==:ui . editor . graph ;
var APN_PROPS = apnConst . apn_props ; var eu_roaming_file_path:==:apnConst . eu_roaming_file_path ;
var value = event . detail . value ; var groupedItems:==:this . _ groupedItems ;
var query = _ props2 . query ; var hash:==:_ props2 . hash ;
var g = color . g ; var b:==:color . b ;
var gulp = require ( ' gulp ' ) ; var watch:==:require ( ' gulp - watch ' ) ;
var materials = model . gltf . materials ; var uniformMaps:==:model . _ uniformMaps ;
var camera = editor . camera ; var scene:==:editor . scene ;
var cacheKey = defaultValue ( options . cacheKey , getAbsoluteUri ( url ) ) ; var basePath:==:defaultValue ( options . basePath , getBaseUri ( url , true ) ) ;
var torus = BABYLON . Mesh . createTorus ( ' torus ' , 5 , 1 , 10 , scene , false ) ; var knot:==:babylon . mesh . createTorusKnot ( ' knot ' , 2 , 0 . 5 , 128 , 64 , 2 , 3 , scene ) ;
var shapes = this . shapes = options . shapes ; var highlightShapes:==:this . highlightShapes    options . highlightShapes ;
var webserver = require ( ' gulp - webserver ' ) ; var jshint:==:require ( ' gulp - jshint ' ) ;
var through = require ( ' through2 ' ) ; var concat:==:require ( ' concat - stream ' ) ;
var zindex = isUndefined ( v [ ' zindex ' ] ) ? jsmenu [ ' zIndex ' ] [ ' menu ' ] : v [ ' zindex ' ] ; var ctrlclass:==:isUndefined ( v [ ' ctrlclass ' ] ) ? '' : v [ ' ctrlclass ' ] ;
var metaKey = typeof options . metaKey ! = ' undefined ' ? options . metaKey : false ; var scale:==:typeof options . scale !   ' undefined ' ? options . scale : 1 . 0 ;
var errorHandler = options . errorHandler ; var locator:==:options . locator ;
var minMaxSpan = axisProxy . _ minMaxSpan = ; var dataZoomModel:==:axisProxy . _ dataZoomModel ;
var m0 = this . m00 _ ; var m1:==:this . m10 _ ;
var dir = result . direction ; var len:==:dir . length ( ) ;
var dataItems = that . _ dataItems ; var values:==:that . _ values ;
var children = this . _ children ; var length:==:children . length ;
var BADNUM = constants . BADNUM ; var ONEDAY:==:constants . ONEDAY ;
var init = findSymbolModes [ mode ] . init ; var isComplete:==:findSymbolModes [ mode ] . isComplete ;
var disabledTextColor = _ muiTheme$textField . disabledTextColor ; var errorColor:==:_ muiTheme$textField . errorColor ;
var type = this . type ; var curve:==:this . curve ;
var monthNames = settings . monthNames  |  |  this . local . monthNames ; var calculateWeek:==:settings . calculateWeek  |  |  this . local . calculateWeek ;
var cap = ( options . cap = = = 0 ) ? 0 : options . cap  |  |  BABYLON . Mesh . NO_CAP ; var updatable:==:options . updatable ;
var gl = this . gl ; var shaderProgram:==:this . shaderProgram ;
var createControl = leafletControlHelpers . createControl ; var isValidControlType:==:leafletControlHelpers . isValidControlType ;
var tr = goog . bind ( this . dom _ . createDom , this . dom _ , ' tr ' ) ; var th:==:goog . bind ( this . dom _ . createDom , this . dom _ , ' th ' ) ;
var southSkirtHeight = isNorthChild ? ( shortestSkirt * 0 . 5 ) : this . _ southSkirtHeight ; var eastSkirtHeight:==:isEastChild ? this . _ eastSkirtHeight : ( shortestSkirt * 0 . 5 ) ;
var handler1 = jasmine . createSpy ( ' handler1 ' ) ; var handler2:==:jasmine . createSpy ( ' handler2 ' ) ;
var _ im_get_predict_at = Module [ ' _ im_get_predict_at ' ] = asm [ ' _ im_get_predict_at ' ] ; var _ im_get_candidate:==:Module [ ' _ im_get_candidate ' ]    asm [ ' _ im_get_candidate ' ] ;
var expect = chai . expect ; var assert:==:chai . assert ;
var text = el . textContent . trim ( ) ; var value:==:el . value  |  |  text ;
var color = props . color ; var hoverColor:==:props . hoverColor ;
var underlineFocusStyle = _ props2 . underlineFocusStyle ; var underlineShow:==:_ props2 . underlineShow ;
var field = search . field ; var value:==:' ' ' + search . value + ' ' ' ;
var options = this . options ; var twoStar:==:options . noglobstar ? star : options . dot ? twoStarDot : twoStarNoDot ;
var getElementsByInterface = scope . getElementsByInterface ; var nonElementParentNodeInterface:==:scope . nonElementParentNodeInterface ;
var hasRings = options . hasRings ; var enclose:==:options . enclose ;
var disableTouchRipple = _ props . disableTouchRipple ; var children:==:_ props . children ;
var separator = options . separator = = = undefined ? ' , ' : options . separator ; var dataVar:==:options . dataVar      undefined ? ' data ' : options . dataVar ;
var slice = Array . prototype . slice ; var join:==:Array . prototype . join ;
var legendMap = options . legendMap ; var stage:==:this . stage ;
var Peer = _ appJsModelsPeer [ ' default ' ] ; var appsService:==:_ appJsServicesAppsService [ ' default ' ] ;
var view = this . _ viewportRect ( ) ; var scale:==:view . _ scale ;
var bindingElement = traceur . syntax . trees . bindingElement ; var bindingIdentifier:==:traceur . syntax . trees . bindingIdentifier ;
var name = options . name ; var legacy:==:options . legacy ;
var reactComponentEnvironment = require ( ' reactComponentEnvironment ' ) ; var reactDefaultBatchingStrategy:==:require ( ' reactDefaultBatchingStrategy ' ) ;
var width = titleSize . width > imageSize . width ? titleSize . width : imageSize . width ; var height:==:titleSize . height > imageSize . height ? titleSize . height : imageSize . height ;
var reactdomComponentTree = require ( ' reactdomComponentTree ' ) ; var reactTestUtils:==:require ( ' reactTestUtils ' ) ;
var extendDeep = extendModule . extendDeep ; var extendDeepAll:==:extendModule . extendDeepAll ;
var billboardCollection = entityCluster . _ billboardCollection ; var pointCollection:==:entityCluster . _ pointCollection ;
var o = options  |  |  ; var e:==:document . createEvent ( ' event ' ) ;
var i d = data . i d ; var page:==:data . page - 1 ;
var domain   = require ( ' domain ' ) ; var async:==:require ( ' async ' ) ;
var scrollTop = win . pageyOffset  |  |  ele . scrollTop ; var scrollLeft:==:win . pagexOffset  |  |  ele . scrollLeft ;
var rotation = frameState . viewState . rotation ; var size:==:frameState . size ;
var onlyChild = require ( ' onlyChild ' ) ; var createElement:==:reactElement . createElement ;
var d2 = _ addDiv ( ' d2 ' , d1 , null , 200 , 200 , 50 , 50 ) ; var d3:==:_ addDiv ( ' d3 ' , null , null , 700 , 700 , 50 , 50 ) ;
var int16 = Fn . int16 ; var uint16:==:Fn . uint16 ;
var a = tree . a = sr . firstChild ; var content:==:tree . content    a . firstChild ;
var App = _ appJsModelsApp [ ' default ' ] ; var appsService:==:_ appJsServicesAppsService [ ' default ' ] ;
var filter = require ( ' gulp - filter ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var createBinaryOperator = parseTreeFactory . createBinaryOperator ; var createBindingIdentifier:==:parseTreeFactory . createBindingIdentifier ;
var minimatch = require ( ' minimatch ' ) ; var path:==:require ( ' path ' ) ;
var uiSourceCode = this . _ breakpoint . uiSourceCode ( ) ; var lineNumber:==:this . _ breakpoint . _ lineNumber ;
var indigo300 = exports . indigo300 = ' # 7986cb ' ; var indigo400:==:exports . indigo400    ' # 5c6bc0 ' ;
var transform = require ( ' gulp - transform ' ) ; var mkdirp:==:require ( ' mkdirp ' ) ;
var scrollTop = _ ref . scrollTop ; var scrollWidth:==:_ ref . scrollWidth ;
var dynCall_viiiiiiiiiiiiiii = Module [ ' dynCall_viiiiiiiiiiiiiii ' ] = asm [ ' dynCall_viiiiiiiiiiiiiii ' ] ; var dynCall_viiiiid:==:Module [ ' dynCall_viiiiid ' ]    asm [ ' dynCall_viiiiid ' ] ;
var performance = require ( ' performance ' ) ; var router:==:require ( ' router ' ) ;
var optionLabel = dropdownlist . optionLabel ; var current:==:dropdownlist . current ( ) ;
var target = channel . target ; var sampler:==:samplers [ channel . sampler ] ;
var minTextWidth = this . _ minTextWidth ; var barHeight:==:this . _ barHeight ;
var npm = think . npm ; var wait:==:think . await ;
var key1 = ' key1 ' , comp1 = content : ' some thing in comp1 ' ; var comp2:==:name : ' key2 ' , content : ' some thing in comp2 ' ;
var CONDITIONAL_EXPRESSION = ' CONDITIONAL_EXPRESSION ' ; var CONSTRUCT_SIGNATURE:==:' CONSTRUCT_SIGNATURE ' ;
var orderby = options . orderby  |  |  ' name ' ; var order:==:options . order  |  |  1 ;
var metadata = _ ref . metadata ; var signingKeys:==:_ ref . signingKeys ;
var y = value1 . y - value2 . y ; var z:==:value1 . z - value2 . z ;
var end = this . newBlock ( ' end for ' + genIndex ) ; var ge:==:generators [ genIndex ] ;
var listModel = _ jsModelListModel [ ' default ' ] ; var listView:==:_ jsViewListView [ ' default ' ] ;
var interval = this . shared . interval ; var scale:==:this . shared . scale ;
var appendChild = htmlFormElement . prototype . appendChild ; var submit:==:htmlFormElement . prototype . submit ;
var li = document . createElement ( ' li ' ) ; var span:==:document . createElement ( ' span ' ) ;
var defines = material . defines ; var vertexShader:==:material . _ _ webglShader . vertexShader ;
var join    = require ( ' path ' ) . join ; var connect:==:require ( ' connect ' ) ;
var raw = options [ ' raw ' ] = = null ? false : options [ ' raw ' ] ; var bsonRegExp:==:typeof options [ ' bsonRegExp ' ]     ' boolean ' ? options [ ' bsonRegExp ' ] : false ;
var base64 = goog . require ( ' goog . crypt . base64 ' ) ; var object:==:goog . require ( ' goog . object ' ) ;
var polygon = this . _ polygon ; var lineGroup:==:this . _ lineGroup ;
var emitter = scene . getLastEntryByid ( parsedLensFlareSystem . emitterId ) ; var name:==:parsedLensFlareSystem . name  |  |  ' lensFlareSystem # ' + parsedLensFlareSystem . emitterId ;
var nodecaLoader = window . nodecaLoader = booted : false ; var alert:==:window . alert ;
var publishedSource = builder . publishedSource ; var publishedTarget:==:builder . publishedTarget ;
var l = 0 + ( sleft ? pleft . size + ( pleft . resizable ? this . resizer : this . padding ) : 0 ) ; var t:==:0 + ( stop ? ptop . size + ( ptop . resizable ? this . resizer : this . padding ) : 0 ) ;
var prev = selected . prev ( ' . select2-search - choice : not ( . select2-locked ) ' ) ; var next:==:selected . next ( ' . select2-search - choice : not ( . select2-locked ) ' ) ;
var warningContext = settings . warningContext ; var pos:==:settings . position ;
var viewPropTypes = require ( ' viewPropTypes ' ) ; var deprecatedPropType:==:require ( ' deprecatedPropType ' ) ;
var parenExpression = traceur . syntax . trees . parenExpression ; var parseTreeType:==:traceur . syntax . trees . parseTreeType ;
var DOCUMENT_FRAGMENT_NODE   = nodeType . document_fragment_node   = 11 ; var notation_node:==:nodeType . notation_node       12 ;
var uglify = require ( ' gulp - uglify ' ) ; var less:==:require ( ' gulp - less ' ) ;
var shouldKeyDownEventCreateNewOption = _ props3 . shouldKeyDownEventCreateNewOption ; var onInputKeyDown:==:_ props3 . onInputKeyDown ;
var expandable = _ props . expandable ; var style:==:_ props . style ;
var ui = window . app . ns ( ' ui ' ) ; var ux:==:window . app . ns ( ' ux ' ) ;
var transaction = this . _ db . transaction ( [ ' places ' ] , ' readwrite ' ) ; var objectStore:==:transaction . objectStore ( ' places ' ) ;
var Types = require ( ' frontdoor ' ) . Types ; var error:==:require ( ' http - error ' ) ;
var y1 = Math . max ( a . y1 , b . y1 ) ; var x2:==:Math . min ( a . x2 , b . x2 ) ;
var sourceRoot = options . sourceRoot ; var source:==:path . relative ( sourceRoot , options . filename ) ;
var btn5 = plugin . getElement ( ' btn5 ' ) ; var btn6:==:plugin . getElement ( ' btn6 ' ) ;
var camera = scene . camera ; var zoomPromise:==:viewer . _ zoomPromise ;
var dynCall_i = Module [ ' dynCall_i ' ] = asm [ ' dynCall_i ' ] ; var dynCall_iiiiii:==:Module [ ' dynCall_iiiiii ' ]    asm [ ' dynCall_iiiiii ' ] ;
var name = identify . name ( ) ; var email:==:identify . email ( ) ;
var isEventResizable = t . isEventResizable ; var eventElementHandlers:==:t . eventElementHandlers ;
var width = graphicsDevice . width ; var height:==:graphicsDevice . height ;
var keys = Object . keys ( headers ) ; var isArray:==:array . isArray ( headers ) ;
var minDistIntersect = intersectconvex_mindistintersect ; var localaabb:==:intersecttrimesh_localaabb ;
var end = cmap . endCode . get ( _ i5 ) ; var start:==:cmap . startCode . get ( _ i5 ) ;
var cos = Math . cos ( r ) ; var sin:==:Math . sin ( r ) ;
var data = datastorage . allstatsrecords ; var days:==:datastorage . alldays ;
var message = evt . detail . message  |  |  '' ; var title:==:this . _ getTitle ( evt . detail . title ) ;
var max = args . signal . range . max ; var step:==:args . signal . range . step ;
var value = element ( by . binding ( ' value  |  date : ' yyyy - MM - ddTHH : mm ' ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var predictorStream = coreStream . predictorStream ; var runLengthStream:==:coreStream . runLengthStream ;
var len = conf . len  |  0 ; var encoding:==:conf . encoding ;
var interactionManager = require ( ' interactionManager ' ) ; var react:==:require ( ' react ' ) ;
var url = require ( ' url ' ) ; var path:==:require ( ' path ' ) ;
var start = stream . start ; var len:==:string . length ;
var aspectRatio = canvas . aspectRatio ; var cropBox:==:this . cropBox ;
var remaining = Browser . mainLoop . remainingBlockers ; var expected:==:browser . mainLoop . expectedBlockers ;
var style = label . _ style ; var verticalOrigin:==:label . _ verticalOrigin ;
var local = instance . options . getIn ( [ ' urls ' , ' local ' ] ) ; var args:==:stub . getCall ( 0 ) . args ;
var background = _ img . attr ( ' data - background ' ) ; var src:==:_ img . attr ( ' data - src ' ) ;
var accessList = tab . pane . meta . accessList ; var index:==:accessList . indexOf ( tab ) ;
var video = this . dialog . video ; var canvas:==:this . canvas ;
var sequence = require ( ' gulp - sequence ' ) ; var shell:==:require ( ' gulp - shell ' ) ;
var table2td = goog . dom . getElement ( ' table2td ' ) ; var logo2:==:goog . dom . getElement ( ' logo2 ' ) ;
var canonicalizeUrl = $ traceurRuntime . canonicalizeUrl ; var isAbsolute:==:$ traceurRuntime . isAbsolute ;
var bottom = shadowFrustum . bottom ; var top:==:shadowFrustum . top ;
var task2 = ' task2 ' ; var task3:==:' task3 ' ;
var firstPagePromise = pdfViewer . firstPagePromise ; var pagesPromise:==:pdfViewer . pagesPromise ;
var el = createUiSelect ( theme : ' select2 ' , allowClear : ' true ' ) ; var $ select:==:el . scope ( ) . $ select ;
var fs   = require ( ' fs ' ) ; var path:==:require ( ' path ' ) ;
var visualDataRoleKind = powerbi . visualDataRoleKind ; var legendData:==:powerbi . visuals . legendData ;
var invert = options . invert ; var end:==:options . end ;
var unit = math . unit ; var bignumber:==:math . bignumber ;
var shadowsHue = params . shadowsHue ; var shadowsSaturation:==:params . shadowsSaturation ;
var webpack = require ( ' webpack ' ) ; var loaders:==:configuration . module . loaders ;
var Bar = docSet . getByLongname ( ' bar ' ) [ 0 ] ; var socket:==:docSet . getByLongname ( 's . socket ' ) [ 0 ] ;
var pathname = url . parse ( req . url ) . pathname . slice ( 1 )  |  |  ' index . html ' ; var contentType:==:contentTypes [ path . extname ( pathname ) ] ;
var preserveBuffer = options . preserveBuffer ; var autoPurge:==:options . autoPurge ;
var tangent = Cartesian3 . fromArray ( tangents , i ) ; var bitangent:==:cartesian3 . fromArray ( bitangents , i ) ;
var client = this . _ client . scope ( context : ' content ' ) ; var format:==:this . _ formatApp . bind ( this , client ) ;
var graph = this . graph ; var points:==:args . points ;
var clipboardXml = blockly . clipboardXml _ ; var clipboardSource:==:blockly . clipboardSource _ ;
var value = spec . value ; var parent:==:spec . parent ;
var util = require ( ' util ' ) ; var pluralize:==:require ( ' pluralize ' ) ;
var focusManager = imports . focusManager ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var direction = camera . direction ; var right:==:camera . right ;
var lineNumber = this . lineNumberInSource ( index ) ; var columnNumber:==:this . columnNumberInSource ( index ) ;
var dominatedNodes = this . _ dominatedNodes ; var nodeFieldCount:==:this . _ nodeFieldCount ;
var opt = options [ i ] ; var value:==:opt . value ;
var cardPadding = powerbi . dataViewObjects . getValue ( objects , visuals . multiRowCardProps . card . cardPadding , multiRowCard . defaultStyle . row . marginBottom ) ; var cardBackground:==:powerbi . dataViewObjects . getFillColor ( objects , visuals . multiRowCardProps . card . cardBackground , multiRowCard . defaultStyle . row . background ) ;
var days    = this . _ days ; var months:==:this . _ months ;
var path = require ( ' path ' ) ; var noop:==:mocha . utils . noop ;
var TEMPLATE_SUBSTITUTION = ' TEMPLATE_SUBSTITUTION ' ; var THIS_EXPRESSION:==:' THIS_EXPRESSION ' ;
var hoverColor = _ props . hoverColor ; var onMouseEnter:==:_ props . onMouseEnter ;
var debug = require ( ' debug ' ) ( ' pm2 : conf ' ) ; var p:==:require ( ' path ' ) ;
var process = self . processes [ app_name ] ; var routes:==:process . routes ;
var def = $ ( ' def-1 ' ) ; var jkl:==:$ ( ' jkl-1 ' ) ;
var script = document . _ _ webdriver_evaluate [ ' script ' ] ; var args:==:document . _ _ webdriver_evaluate [ ' args ' ] ;
var stripHtml = util . stripHtml ; var asyncForEach:==:util . asyncForEach ;
var homeButton = viewer . _ homeButton ; var sceneModePicker:==:viewer . _ sceneModePicker ;
var req = require ( ' request ' ) ; var debug:==:require ( ' debug ' ) ( ' node - soap ' ) ;
var directive = resource . directive ;  var methodResource:==:resource . methodResource ;
var envMap = data . envMap ; var sphericalEnvMap:==:data . sphericalEnvMap ;
var nonasciIidentifierStart = new regExp ( ' [ ' + nonasciIidentifierStartChars + ' ] ' ) ; var nonasciIidentifier:==:new regExp ( ' [ ' + nonasciIidentifierStartChars + nonasciIidentifierChars + ' ] ' ) ;
var tab = e . tab ; var editor:==:e . editor ;
var z = axisPointerModel . get ( ' z ' ) ; var zlevel:==:axisPointerModel . get ( ' zlevel ' ) ;
var w = $ ( ' body ' ) . width ( ) ; var h:==:$ ( ' body ' ) . height ( ) ;
var part = options . part ; var method:==:options . method ;
var tMin = tmpVeca . copy ( this . getMin ( ) ) . sub ( ray . origin ) . data ; var tMax:==:tmpVecb . copy ( this . getMax ( ) ) . sub ( ray . origin ) . data ;
var canvas = me . canvas ; var aspectRatio:==:( options . maintainAspectRatio & & me . aspectRatio )  |  |  null ;
var path = require ( ' path ' ) ; var sha1:==:require ( ' sha1 ' ) ;
var Node = mod . Node ; var Nil:==:mod . Nil ;
var current = options . current  |  |  this . page . current  |  |  0 ; var total:==:options . total  |  |  this . page . total  |  |  1 ;
var styleProperty = context . styleProperty ; var computedStyle:==:context . computedStyle ;
var multiplier = clockViewModel . multiplier ; var currentTime:==:clockViewModel . currentTime ;
var TYPE_ARGUMENTS = ' TYPE_ARGUMENTS ' ; var TYPE_NAME:==:' TYPE_NAME ' ;
var xml = document . getElementById ( ' xml ' ) ; var xslt:==:document . getElementById ( ' xslt ' ) ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , [ [ 1,1 ] , [ 4,4 ] ] , opts ) ;
var animationIds = this . _ model . _ animationIds ; var length:==:animationIds . length ;
var s1 = _ s1 ; var i1:==:_ i1 ;
var error = sharedUtil . error ; var webglUtils:==:displayWebgl . webglUtils ;
var reload = options . reload ; var itemContainer:==:fragment  |  |  this . els . itemContainer ;
var g = 255 - Math . abs ( 255 - color2 . rgb [ 1 ] - color1 . rgb [ 1 ] ) ; var b:==:255 - Math . abs ( 255 - color2 . rgb [ 2 ] - color1 . rgb [ 2 ] ) ;
var x = xs [ i ] ; var y:==:ys [ i ] ;
var path = query & & query . path + ' ' ; var nakBin:==:vfsOptions . nakBin ;
var collab = imports . collab ; var settings:==:imports . settings ;
var waitid = typeof waitid = = ' undefined '  |  |  waitid = = = null ? showid : ( waitid ! = = '' ? waitid : '' ) ; var showidclass:==:! showidclass ? '' : showidclass ;
var children = _ props . children ; var className:==:_ props . className ;
var el = this . el ; var interp:==:this . descriptor . interp ;
var direction = opts . direction  |  |  ' outgoing ' ; var sid:==:opts . sid  |  |  session . sid  |  |  Date . now ( ) ;
var angle = indicatorAxis . angle ; var x:==:this . cx + coord * math . cos ( angle ) ;
var has     = _ _ webpack_require _ _ ( 1023 ) . has ; var unescapeMd:==:_ _ webpack_require _ _ ( 1023 ) . unescapeMd ;
var pdfPage = windows . data . pdf . pdfPage ; var pdfPageRenderOptions:==:windows . data . pdf . pdfPageRenderOptions ;
var React = require ( ' React ' ) ; var tabBarios:==:require ( ' tabBarios ' ) ;
var createIfStatement = parseTreeFactory . createIfStatement ; var createMemberExpression:==:parseTreeFactory . createMemberExpression ;
var edges = option . edges  |  |  option . links  |  |  [ ] ; var nodes:==:option . data  |  |  option . nodes  |  |  [ ] ;
var api = imports . api ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var method = demoSequence [ step ] . method ; var args:==:demoSequence [ step ] . args ;
var objectOrFunction = _ _ dependency2 _ _ . objectOrFunction ; var isFunction:==:_ _ dependency2 _ _ . isFunction ;
var contactCardOptions = contacts . contactCardOptions ; var contactCardHeaderKind:==:contacts . contactCardHeaderKind ;
var arrowHead = math . max ( 0 , math . min ( math . min ( bounds . height , bounds . width ) - parseFloat ( mxUtils . getValue ( this . state . style , ' dx ' , this . dx ) ) , parseFloat ( mxUtils . getValue ( this . state . style , ' arrowHead ' , this . arrowHead ) ) ) ) ; var dx:==:math . max ( 0 , math . min ( math . min ( bounds . width , bounds . height ) - arrowHead , parseFloat ( mxUtils . getValue ( this . state . style , ' dx ' , this . dx ) ) ) ) ;
var path = pathsCopy . pop ( ) ; var result:==:resultsCopy . pop ( ) ;
var MATCH = sym ( ' MATCH ' ) ; var CANCEL:==:sym ( ' CANCEL_PROMISE ' ) ;
var c9 = imports . c9 ; var dirname:==:require ( ' path ' ) . dirname ;
var webpack = require ( ' webpack ' ) ; var uglify:==:require ( ' uglify - js ' ) ;
var givenName = devContact . givenName [ 0 ]  |  |  '' ; var familyName:==:devContact . familyName [ 0 ]  |  |  '' ;
var position = powerbi . dataViewObjects . getValue ( objects , properties [ ' position ' ] , defaultSettings . position ) ; var backgroundColor:==:new visuals . colorHelper ( colors , properties [ ' backgroundColor ' ] , defaultSettings . backgroundColor ) . getColorForMeasure ( objects , ' ' ) ;
var form = doc . createElement ( ' form ' ) ; var input:==:doc . createElement ( ' input ' ) ;
var parent = $ ( obj ) . parent ( ) ; var height:==:parent . height ( ) - ( ( $ ( ' . accordionHeader ' , obj ) . size ( ) ) * ( $ ( ' . accordionHeader : first - child ' , obj ) . outerHeight ( ) ) ) -2 ;
var index = this . index ; var data:==:this . data ;
var simplex = this . simplex ; var perm:==:this . perm ;
var to = ( opts & & typeof opts . to ! = ' undefined ' ) ? opts . to : that . to ; var target:==:( opts & & typeof opts . target !   ' undefined ' ) ? opts . target : null ;
var rel = ' rel ' ; var spacing:==:' spacing ' ;
var typeError = errors . typeError ; var cancellationError:==:errors . cancellationError ;
var gitError = errors . gitError ; var warning:==:errors . warning ;
var U16 = new primitiveType ( ' u16 ' , 2 , ' i ' , 0 , 65535 ) ; var u32:==:new primitiveType ( ' u32 ' , 4 , ' i ' , 0 , 0xffffffff ) ;
var quickJoinBlock = document . getElementById ( ' quickJoinBlock ' ) ; var n:==:quickJoinBlock . childNodes . length ;
var iconButtonSize = _ context$muiTheme . button . iconButtonSize ; var zIndex:==:_ context$muiTheme . zIndex ;
var readFile = bluebird . promisify ( fs . readFile ) ; var writeFile:==:bluebird . promisify ( fs . writeFile ) ;
var type = input . type ; var pkg:==:input . pkg ;
var a = SIMD . Float32x4 ( 16 . 0 , 9 . 0 , 4 . 0 , 1 . 0 ) ; var c:==:SIMD . Float32x4 . replaceLane ( a , false , 20 . 0 ) ;
var successMulti = successMultiOptDisabledNoReceiver ; var syncSuccessMulti:==:syncSuccessMultiOptDisabledNoReceiver ;
var STRING3 = C . STRING3 = 0x63 ; var STRING4:==:C . STRING4    0x64 ;
var query = condition . query ; var mainType:==:condition . mainType ;
var onSuccess = options . onSuccess  |  |  function ( ) ; var onError:==:options . onError  |  |  function ( ) ;
var y = this . attribute ( ' y ' ) . toPixels ( ' y ' ) ; var fontSize:==:this . parent . style ( ' font - size ' ) . numValueOrDefault ( svg . font . parse ( svg . ctx . font ) . fontSize ) ;
var semver = require ( ' semver ' ) ; var spdy:==:require ( ' spdy ' ) ;
var offset = offset  |  |  0 ; var el:==:document . querySelector ( selector ) ;
var g = parseInt ( rgb [ 1 ] , 10 ) . toString ( 16 ) ; var b:==:parseInt ( rgb [ 2 ] , 10 ) . toString ( 16 ) ;
var l2_decay = this . l2_decay * l2_decay_mul ; var l1_decay:==:this . l1_decay * l1_decay_mul ;
var Class = Hilo . Class ; var View:==:Hilo . View ;
var randperm = global . randperm ; var weightedSample:==:global . weightedSample ;
var pi = math . pi ; var asec:==:math . asec ;
var Plugin = imports . Plugin ; var language:==:imports . language ;
var dataGridPage = options . dataGridPage ? options . dataGridPage : $ ( ' # dataGridPage ' ) ; var searchForm:==:options . searchForm ? options . searchForm : $ ( ' # searchForm ' ) ;
var IDENTIFIER_EXPRESSION = ' IDENTIFIER_EXPRESSION ' ; var IF_STATEMENT:==:' IF_STATEMENT ' ;
var prefix = typeof o . prefix = = = ' undefined ' & & ' assert '  |  |  o . prefix ; var includeFail:==:typeof o . includeFail      ' undefined '  |  |  ! ! o . includeFail ;
var end = match . end ; var isSelected:==:( isSelectedPage & & i      selectedMatchIdx ) ;
var connecting = ' connecting ' ; var disconnecting:==:' disconnecting ' ;
var invalidpdfException = sharedUtil . invalidpdfException ; var missingDataException:==:sharedUtil . missingDataException ;
var prefix = url . query . prefix ; var max:==:parseInt ( url . query . max , 10 ) ;
var importBindings = $ _ _ 6 . importBindings [ index ] ; var externalExportBindings:==:$ _ _ 6 . externalExportBindings [ index ] ;
var column = this . _ columnsArray [ i ] ; var weight:==:weights [ column . identifier ] ;
var objectEnumerationBuilder = powerbi . visuals . objectEnumerationBuilder ; var axisScale:==:powerbi . visuals . axisScale ;
var lockSlider = this . client . findElement ( this . selector . lockSlider ) ; var size:==:lockSlider . size ( ) ;
var cordovaiFrameNavigator = exports . cordovaiFrameNavigator = _ _ webpack_require _ _ ( 343 ) ; var checkSessioniFrame:==:exports . checkSessioniFrame    _ _ webpack_require _ _ ( 340 ) ;
var width = this . canvas _ . width ; var height:==:this . canvas _ . height ;
var equalWithPrecision = powerbi . double . equalWithPrecision ; var getAnimationDuration:==:powerbi . visuals . animatorCommon . getAnimationDuration ;
var ui = self . ui ; var type:==:self . options . type ;
var each = require ( ' each ' ) ; var includes:==:require ( ' includes ' ) ;
var MIDNUM = ci . MIDNUM ; var NUMERIC:==:ci . NUMERIC ;
var direction = this . _ direction ; var from:==:this . from ;
var requireNativeComponent = require ( ' requireNativeComponent ' ) ; var resolveAssetSource:==:require ( ' resolveAssetSource ' ) ;
var createIdentifierToken = parseTreeFactory . createIdentifierToken ; var createSetAccessor:==:parseTreeFactory . createSetAccessor ;
var insertAt = ( actionArgs ) ? actionArgs . insertAt : null ; var sel:==:vim . sel ;
var i d = condition . i d ; var name:==:condition . name ;
var cellCount = _ ref . cellCount ; var cellSizeAndPositionGetter:==:_ ref . cellSizeAndPositionGetter ;
var rgb = ntc . rgb ( color ) ; var r:==:rgb [ 0 ] , g    rgb [ 1 ] , b    rgb [ 2 ] ;
var shadow = tree . shadow = b . firstChild ; var sr3:==:tree . sr3    div . createShadowRoot ( ) ;
var data = scenario . data ; var db:==:client . db ( scenario . database_name ) ;
var oneOfType = _ react . propTypes . oneOfType ; var element:==:_ react . propTypes . element ;
var insertedElements = this . _ insertedElements ; var removedElements:==:this . _ removedElements ;
var shaders = shader . shaders ; var shaderNames:==:shader . shaderNames ;
var boundingSphere = primitive . getGeometryInstanceAttributes ( ' cylinder ' ) . boundingSphere ; var center:==:boundingSphere . center ;
var pathname = url . parse ( request . url ) . pathname ; var host:==:request . headers . host ;
var b = this . rgb . b ; var a:==:this . alpha ;
var maxmin = global . maxmin ; var randperm:==:global . randperm ;
var zip = require ( ' gulp - zip ' ) ; var clean:==:require ( ' gulp - clean ' ) ;
var touches = this . createTouchList ( options . touches , target ) ; var targetTouches:==:this . createTouchList ( options . targetTouches , target ) ;
var tmp = sphereTrimesh_tmp ; var localSphereaabb:==:spheretrimesh_localsphereaabb ;
var index = replica . index ; var shard:==:replica . shard ;
var way = way_list [ i ] ; var i d:==:way . getAttribute ( ' i d ' ) ;
var tempKeyMap = config . tempKeyMap ; var entityType:==:entityGroup . entityType ;
var isFormulaOrTerm = logic . _ isFormulaOrTerm ; var isFormulaOrTermOrBits:==:logic . _ isFormulaOrTermOrBits ;
var Client = firepad . Client ; var Cursor:==:firepad . Cursor ;
var layout = imports . layout ; var menuItem:==:imports . menuItem ;
var key = element . data ( ' keyData ' ) ; var separator:==:element . data ( ' split ' )  |  |  element . data ( ' separator ' )  |  |  ' + ' ;
var state = testSet . state ; var stats:==:testSet . stats ;
var nw = node . _ nw & & rectangleContainsPosition ( node . _ nw . extent , position ) ; var ne:==:node . _ ne & & rectangleContainsPosition ( node . _ ne . extent , position ) ;
var db = client . db ( scenario . database_name ) ; var collection:==:db . collection ( scenario . collection_name ) ;
var l = 0 + ( sleft ? pleft . sizeCalculated + this . padding : 0 ) ; var t:==:height - ( sbottom ? pbottom . sizeCalculated + this . padding : 0 ) - pprev . sizeCalculated ;
var imageryProvider = this . _ imageryProvider ; var rectangle:==:this . _ rectangle ;
var dateTimeSymbolsType = goog . require ( ' goog . i18n . dateTimeSymbolsType ' ) ; var interval:==:goog . require ( ' goog . date . interval ' ) ;
var http = require ( ' http ' ) ; var argv:==:require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ;
var shell = require ( ' shelljs ' ) ; var semver:==:require ( ' semver ' ) ;
var U32 = new primitiveType ( ' u32 ' , 4 , ' i ' , 0 , 0xffffffff ) ; var u64:==:new primitiveType ( ' u64 ' , 8 , ' i ' ) ;
var dy1 = mxUtils . getValue ( this . style , ' dy1 ' , ' 0 ' ) ; var dx2:==:mxUtils . getValue ( this . style , ' dx2 ' , ' 0 ' ) ;
var url = this . url ; var retries:==:this . _ retries ;
var sparse = math . sparse ; var mod:==:math . mod ;
var c = new symbolNode ( ' c ' ) ; var d:==:new symbolNode ( 'd ' ) ;
var progressive = frame . progressive ; var maxH:==:frame . maxH , maxV    frame . maxV ;
var c = a . colorspace & WEBP_CSP_ALPHA_BIT ; var d:==:a . width ;
var block = CHTML . addElement ( stack,'mjx - block ' , , [ [ ' mjx - box ' ] ] ) , line = block . firstChild ; var bbox:==:state . bbox    chtml . bbox . empty ( ) ;
var user = getAttribute ( ' data - user ' , ' user ' ) ; var host:==:getAttribute ( ' data - host ' , ' localhost ' ) ;
var density = this . density ( ) ; var str:==:' Sparse Matrix [ ' + string . format ( rows , options ) + ' x ' + string . format ( columns , options ) + ' ] density : ' + string . format ( density , options ) + ' \n ' ;
var rayStart = intersectconvex_raystart ; var rayEnd:==:intersectconvex_rayend ;
var begin = p . getAttribute ( ' begin ' ) ; var dur:==:p . getAttribute ( ' dur ' ) ;
var add = options . add ; var merge:==:options . merge ;
var a = globalScope ; var b:==:globalScope ;
var through = require ( ' through2 ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var sum32_4 = utils . sum32_4 ; var sum32_5:==:utils . sum32_5 ;
var has_flash    = zombie_array [ index ] [ ' has_flash ' ] ; var has_web_sockets:==:zombie_array [ index ] [ ' has_web_sockets ' ] ;
var startAngle = math . pi * options . series . pie . startAngle ; var radius:==:options . series . pie . radius > 1 ? options . series . pie . radius : maxRadius * options . series . pie . radius ;
var form = btnIframeDoc . getElementById ( ' edui_form _ ' + timestrap ) ; var input:==:btnIframeDoc . getElementById ( ' edui_input _ ' + timestrap ) ;
var supportConstant = exports . supportConstant = ' absolute | after - edge | after | all - scroll | all | alphabetic | always | antialiased | armenian | auto | avoid - column | avoid - page | avoid | balance | baseline | before - edge | before | below | bidi - override | block - line - height | block | bold | bolder | border - box | both | bottom | box | break - all | break - word | capitalize | caps - height | caption | center | central | char | circle | cjk - ideographic | clone | close - quote | col - resize | collapse | column | consider - shifts | contain | content - box | cover | crosshair | cubic - bezier | dashed | decimal - leading - zero | decimal | default | disabled | disc | disregard - shifts | distribute - all - lines | distribute - letter | distribute - space | distribute | dotted | double | e - resize | ease - in | ease - in - out | ease - out | ease | ellipsis | end | exclude - ruby | fill | fixed | georgian | glyphs | grid - height | groove | hand | hanging | hebrew | help | hidden | hiragana - iroha | hiragana | horizontal | icon | ideograph - alpha | ideograph - numeric | ideograph - parenthesis | ideograph - space | ideographic | inactive | include - ruby | inherit | initial | inline - block | inline - box | inline - line - height | inline - table | inline | inset | inside | inter - ideograph | inter - word | invert | italic | justify | katakana - iroha | katakana | keep - all | last | left | lighter | line - edge | line - through | line | linear | list - item | local | loose | lower - alpha | lower - greek | lower - latin | lower - roman | lowercase | lr - tb | ltr | mathematical | max - height | max - size | medium | menu | message - box | middle | move | n - resize | ne - resize | newspaper | no - change | no - close - quote | no - drop | no - open - quote | no - repeat | none | normal | not - allowed | nowrap | nw - resize | oblique | open - quote | outset | outside | overline | padding - box | page | pointer | pre - line | pre - wrap | pre | preserve-3d | progress | relative | repeat - x | repeat - y | repeat | replaced | reset - size | ridge | right | round | row - resize | rtl | s - resize | scroll | se - resize | separate | slice | small - caps | small - caption | solid | space | square | start | static | status - bar | step - end | step - start | steps | stretch | strict | sub | super | sw - resize | table - caption | table - cell | table - column - group | table - column | table - footer - group | table - header - group | table - row - group | table - row | table | tb - rl | text - after - edge | text - before - edge | text - bottom | text - size | text - top | text | thick | thin | transparent | underline | upper - alpha | upper - latin | upper - roman | uppercase | use - script | vertical - ideographic | vertical - text | visible | w - resize | wait | whitespace | z - index | zero ' ; var supportConstantColor:==:exports . supportConstantColor    ' aliceblue | antiquewhite | aqua | aquamarine | azure | beige | bisque | black | blanchedalmond | blue | blueviolet | brown | burlywood | cadetblue | chartreuse | chocolate | coral | cornflowerblue | cornsilk | crimson | cyan | darkblue | darkcyan | darkgoldenrod | darkgray | darkgreen | darkgrey | darkkhaki | darkmagenta | darkolivegreen | darkorange | darkorchid | darkred | darksalmon | darkseagreen | darkslateblue | darkslategray | darkslategrey | darkturquoise | darkviolet | deeppink | deepskyblue | dimgray | dimgrey | dodgerblue | firebrick | floralwhite | forestgreen | fuchsia | gainsboro | ghostwhite | gold | goldenrod | gray | green | greenyellow | grey | honeydew | hotpink | indianred | indigo | ivory | khaki | lavender | lavenderblush | lawngreen | lemonchiffon | lightblue | lightcoral | lightcyan | lightgoldenrodyellow | lightgray | lightgreen | lightgrey | lightpink | lightsalmon | lightseagreen | lightskyblue | lightslategray | lightslategrey | lightsteelblue | lightyellow | lime | limegreen | linen | magenta | maroon | mediumaquamarine | mediumblue | mediumorchid | mediumpurple | mediumseagreen | mediumslateblue | mediumspringgreen | mediumturquoise | mediumvioletred | midnightblue | mintcream | mistyrose | moccasin | navajowhite | navy | oldlace | olive | olivedrab | orange | orangered | orchid | palegoldenrod | palegreen | paleturquoise | palevioletred | papayawhip | peachpuff | peru | pink | plum | powderblue | purple | rebeccapurple | red | rosybrown | royalblue | saddlebrown | salmon | sandybrown | seagreen | seashell | sienna | silver | skyblue | slateblue | slategray | slategrey | snow | springgreen | steelblue | tan | teal | thistle | tomato | turquoise | violet | wheat | white | whitesmoke | yellow | yellowgreen ' ;
var min = expectation . minCalls ; var max:==:expectation . maxCalls ;
var comment = store . createRecord ( ' comment ' , i d : ' a - comment - id ' , name : ' first ! ' ) ; var post:==:store . createRecord ( ' post ' , i d : ' some - uuid ' , name : ' the parley letter ' , comments : [ comment ] ) ;
var width = this . width = context . canvas . width ; var height:==:this . height    context . canvas . height ;
var CALL_SIGNATURE = ' CALL_SIGNATURE ' ; var CASE_CLAUSE:==:' CASE_CLAUSE ' ;
var orient = this . _ orient ; var textStyleModel:==:this . visualMapModel . textStyleModel ;
var async = require ( ' async ' ) ; var closure:==:require ( ' closure - util ' ) ;
var Platform = require ( ' Platform ' ) ; var styleSheet:==:require ( ' styleSheet ' ) ;
var style = this . textarea . style ; var h:==:this . lineHeight ;
var isMoment = moment . isMoment ; var isDate:==:require ( ' util ' ) . isDate ;
var request = require ( ' request ' ) ; var mime:==:require ( ' mime ' ) ;
var defaults     = $ . fn . selectize . defaults ; var settings:==:$ . extend ( , defaults , settings_user ) ;
var left = this . transformAny ( tree . left ) ; var right:==:this . transformAny ( tree . right ) ;
var handlers = list . handlers ; var len:==:handlers . length ;
var a = b . toUpperCase ( ) = = ' desc ' ? -1 : 1 ; var d:==:this . fields . get ( c ) . sortType ;
var active_suspension = repl . sk_debugger . get_active_suspension ( ) ; var len:==:suspension_stack . length ;
var beforeEnter = data . beforeEnter ; var enter:==:data . enter ;
var river = riverLayer . create ( 0 , 400 , ' river ' ) ; var ufo:==:spriteLayer . create ( 360 , 240 , ' ufo ' ) ;
var fs = require ( ' fs ' ) ; var pg:==:require ( ' pg ' ) ;
var textPosition = style . textPosition ; var textOffset:==:style . textOffset ;
var sinon = require ( ' sinon ' ) ; var assign:==:require ( ' lodash ' ) . assign ;
var maxX = origin [ 0 ] + ( tileRange . maxx + 1 ) * tileSize [ 0 ] * resolution ; var miny:==:origin [ 1 ] + tileRange . miny * tileSize [ 1 ] * resolution ;
var el = this . $ element ; var p:==:( el . getAttribute ( ' data - progress ' )  |  |  0 ) ;
var audioSendCodec = options . audioSendCodec  |  |  '' ; var audioRecvCodec:==:options . audioRecvCodec  |  |  '' ;
var iks = mesh . geometry . iks ; var bones:==:mesh . geometry . bones ;
var netutil = require ( ' netutil ' ) ; var connect:==:require ( ' connect ' ) ;
var tween = tweens [ i ] ; var target:==:tween . _ target ;
var core = breeze . core ; var metadataStore:==:breeze . metadataStore ;
var compile = _ _ dependency4 _ _ . compile ; var precompile:==:_ _ dependency4 _ _ . precompile ;
var hasError = state . hasError ; var thisArg:==:state . thisArg ;
var extent = extents [ i ] ; var value:==:values [ i ] ;
var b = df . appendChild ( document . createElement ( ' b ' ) ) ; var c:==:df . appendChild ( document . createElement ( ' c ' ) ) ;
var renderer = client . renderer ; var defs:==:d3 . select ( ' body ' ) . append ( ' svg ' ) . append ( ' defs ' ) ;
var height = shape . bounds . height ( ) ; var width:==:shape . bounds . width ( ) ;
var f8InfoView = require ( ' f8InfoView ' ) ; var f8Colors:==:require ( ' f8Colors ' ) ;
var express = require ( ' express ' ) ; var sass:==:require ( ' node - sass ' ) ;
var lightGreen200 = exports . lightGreen200 = ' # c5e1a5 ' ; var lightGreen300:==:exports . lightGreen300    ' # aed581 ' ;
var shiftKey = typeof options . shiftKey ! = ' undefined ' ? options . shiftKey : false ; var metaKey:==:typeof options . metaKey !   ' undefined ' ? options . metaKey : false ;
var addPath = buildUtils . addPath ; var doUglify:==:buildUtils . doUglify ;
var allowSwipeToPrev = s . _ allowSwipeToPrev ; var allowSwipeToNext:==:s . _ allowSwipeToNext ;
var assert = util . assert ; var windowing:==:util . Module ( ' windowing ' ) ;
var fs = require ( ' fs ' ) ; var utils:==:require ( ' utils ' ) ;
var li = panel . content . parent ( ' li ' ) ; var activeOn:==:panel . activeOn ;
var width = strokeSize . width ; var hl:==:stroke . drawingAttributes . drawAsHighlighter ;
var through = require ( ' through2 ' ) ; var path:==:require ( ' path ' ) ;
var m = domGeom . getMarginBox ( this . node ) ; var b:==:win . doc . body ;
var bignumber = math . bignumber ; var matrix:==:math . matrix ;
var a = new constantNode ( 1 ) ; var n:==:new functionAssignmentNode ( ' func ' , [ ' x ' ] , a ) ;
var reactNative = require ( ' reactNative ' ) ; var subscribable:==:require ( ' subscribable ' ) ;
var signx = t . signx ; var signy:==:t . signy ;
var querystring = require ( ' querystring ' ) ; var util:==:require ( ' util ' ) ;
var itemWidth = legendModel . get ( ' itemWidth ' ) ; var itemHeight:==:legendModel . get ( ' itemHeight ' ) ;
var title = that . model . get ( ' title ' ) ; var episode:==:$ ( e . currentTarget ) . attr ( ' data - episode ' ) ;
var stringifyProperty = schema . stringifyProperty ; var styleParser:==:utils . styleParser ;
var closure = require ( ' closure - util ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var z = ( ( ( value1 . z * part1 ) + ( value2 . z * part2 ) ) + ( tangent1 . z * part3 ) ) + ( tangent2 . z * part4 ) ; var w:==:( ( ( value1 . w * part1 ) + ( value2 . w * part2 ) ) + ( tangent1 . w * part3 ) ) + ( tangent2 . w * part4 ) ;
var assert = require ( ' assert ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var name = re . name ; var path:==:re . path ;
var rowCoords = this . rowCoords ; var colCoords:==:this . colCoords ;
var section = sections [ i ] ; var current:==:Math . abs ( currentScroll - section . offsetTop ) ;
var start = startMark . charCodeAt ( 0 ) ; var finish:==:finishMark . charCodeAt ( 0 ) ;
var gl = this . gl ; var textureIndex:==:sprite . texture . baseTexture . textureIndex ;
var w = this . imageObj . width ; var h:==:this . imageObj . height ;
var watcher = imports . watcher ; var Editor:==:imports . Editor ;
var cellRenderer = props . cellRenderer ; var cellRangeRenderer:==:props . cellRangeRenderer ;
var timelineSignal = tone_signal_timelinesignal ; var tone:==:tone_core_tone ;
var sortName = options . defaultSortName  |  |  options . sortName ; var sortOrder:==:options . defaultSortOrder  |  |  options . sortOrder ;
var horizontal = that . _ horizontal ; var groupsEnabled:==:that . _ groupsEnabled ;
var Platform = require ( ' Platform ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var fs = require ( ' fs ' ) ; var falafel:==:require ( ' falafel ' ) ;
var instance = options . instance ; var points:==:options . points ;
var pitchAdjustHeight = options . pitchAdjustHeight ; var easingFunction:==:options . easingFunction ;
var playback = util . Module ( ' playback ' ) ; var assert:==:util . assert ;
var withStatement = traceur . syntax . trees . withStatement ; var slice:==:array . prototype . slice . call . bind ( array . prototype . slice ) ;
var derequire = require ( ' derequire ' ) ; var fs:==:require ( ' fs ' ) ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , dead_simple_data , ) ;
var className = options . className ! = = undefined ? options . className : ' ol - zoom ' ; var delta:==:options . delta !    undefined ? options . delta : 1 ;
var style = _ props3 . style ; var tabIndex:==:_ props3 . tabIndex ;
var settings = $ ( obj ) . data ( ' settings ' ) ; var selected:==:$ ( obj ) . data ( ' selected ' ) ;
var sideOrientation = ( options . sideOrientation = = = 0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ; var instance:==:options . instance ;
var nextExecutionAt = new solrDate ( data . slave . nextExecutionAt ) ; var currentDate:==:new solrDate ( data . slave . currentDate ) ;
var reactFiberInstrumentation = require ( ' reactFiberInstrumentation ' ) ; var reactFiberReconciler:==:require ( ' reactFiberReconciler ' ) ;
var utils = require ( ' utils ' ) ; var jsmin:==:require ( ' jsmin ' ) ;
var minimum = args . form . minimum  |  |  false ; var exclusiveMinimum:==:args . form . exclusiveMinimum  |  |  false ;
var width = rect . width ; var height:==:rect . height ;
var util = require ( ' hexo - util ' ) ; var cheerio:==:require ( ' cheerio ' ) ;
var syntheticuiEvent = require ( ' syntheticuiEvent ' ) ; var syntheticWheelEvent:==:require ( ' syntheticWheelEvent ' ) ;
var target = this . vexpr ( l . target , nexti ) ; var n:==:l . ifs . length ;
var target = target_style [ output_prop_name ] ; var curr:==:current_style [ output_prop_name ] ;
var overlay = _ props . overlay ; var overlayContainerStyle:==:_ props . overlayContainerStyle ;
var express = require ( ' express ' ) ; var https:==:require ( ' https ' ) ;
var index = scope . modelArray . indexOf ( item ) ; var model:==:scope . modelArray ;
var shininess = originalMaterial . shininess ; var map:==:originalMaterial . map ;
var symbolType = effectCfg . symbolType ; var color:==:effectCfg . color ;
var name = options . name  |  |  ' template ' ; var filename:==:options . filename ? JSON . stringify ( options . filename ) : ' undefined ' ;
var settings = imports . settings ; var tabManager:==:imports . tabManager ;
var lineNumber = this . _ breakpoint . _ lineNumber ; var columnNumber:==:this . _ breakpoint . _ columnNumber ;
var spy = this . sinon . spy ( modeManager , ' start ' ) ; var input:==:document . getElementById ( ' views - list - search - input ' ) ;
var n = A . length , i , k , flag = false , B = QB . B , H = numeric . dot ( QB . Q , numeric . dot ( QH . H , numeric . transpose ( QB . Q ) ) ) ; var Q:==:new T ( numeric . dot ( QB . Q , QH . Q ) ) , Q0 ;
var preferredAdapters = pouchdb$2 . preferredAdapters ; var prefix:==:pouchdb$2 . prefix ;
var object = compile ( node . object , defs , args ) ; var index:==:node . index ? compile ( node . index , defs , args ) : null ;
var parser = require ( ' tap - parser ' ) ; var through:==:require ( ' through2 ' ) ;
var rect = rects [ i ] ; var center:==:rect . center ;
var delimiter = options . delimiter  |  |  ' , ' ; var separator:==:options . separator  |  |  ' . ' ;
var width = requiredWidth  |  |  ( navigator . isCocoonjs ? window . innerWidth : this . _ renderingCanvas . width ) ; var height:==:requiredHeight  |  |  ( navigator . isCocoonjs ? window . innerHeight : this . _ renderingCanvas . height ) ;
var memberName = tree . operand . memberName ; var operand:==:this . transformAny ( tree . operand . operand ) ;
var qs = require ( ' qs ' ) ; var assert:==:require ( ' assert - plus ' ) ;
var options = this . options ; var isPopup:==:this . isPopup ;
var fixedWidth = node . getAttribute ( ' fixedWidth ' ) ; var fixedHeight:==:node . getAttribute ( ' fixedHeight ' ) ;
var builder = instance . get ( ' builder ' ) ; var mouseXY:==:event . mouseXY ;
var style = this . style ; var text:==:style . text ;
var showButtonPanel = this . _ get ( inst , ' showButtonPanel ' ) ; var hideIfNoPrevNext:==:this . _ get ( inst , ' hideIfNoPrevNext ' ) ;
var fontSize = getStyleProperty ( , styleContextStack , ' fontSize ' , 12 ) ; var bold:==:getStyleProperty ( , styleContextStack , ' bold ' , false ) ;
var path = require ( ' path ' ) ; var moment:==:require ( ' moment ' ) ;
var smith = require ( ' smith ' ) ; var Agent:==:smith . Agent ;
var nodeIdOffset = this . _ nodeIdOffset ; var nodeFieldCount:==:this . _ nodeFieldCount ;
var location = response . location ; var catalogItems:==:response . catalogItems ;
var namedNodeMap = window . namedNodeMap  |  |  window . mozNamedAttrMap ; var text:==:window . text ;
var nextAvcDts = this . nextAvcDts ; var isSafari:==:this . isSafari ;
var lat = $ el . data ( ' lat ' ) ; var long:==:$ el . data ( ' long ' ) ;
var head = document . head  |  |  document . getElementsByTagName ( ' head ' ) [ 0 ]  |  |  document . documentElement ; var script:==:document . createElement ( ' script ' ) ;
var Divider = imports . Divider ; var all:==:imports [ ' test . all ' ] ;
var ui = imports . ui ; var tree:==:imports . tree ;
var otherForm = scope . otherForm ; var childControl:==:form . childControl ;
var address = evt . address ; var fileName:==:evt . fileName ;
var rowStopIndex = _ ref8 . rowStopIndex ; var onRowsRendered:==:this . props . onRowsRendered ;
var target = renderOpts . target ; var shouldHighlight:==:this . opts . shouldHighlight ;
var b = bProp : 1 ; var c:==:cProp : 2 ;
var inherits = require ( ' util ' ) . inherits ; var debug:==:require ( ' debug ' ) ( ' https - proxy - agent ' ) ;
var List = reporters . List ; var Base:==:reporters . Base ;
var chalk   = require ( ' chalk ' ) ; var path:==:require ( ' path ' ) ;
var target = $ ( e . target ) ; var action:==:target . attr ( ' data - action ' ) ;
var Node = test . Node ; var async:==:require ( ' async ' ) ;
var variableDeclarationList = traceur . syntax . trees . variableDeclarationList ; var variableDeclaration:==:traceur . syntax . trees . variableDeclaration ;
var zlib = require ( ' zlib ' ) ; var readline:==:require ( ' readline ' ) ;
var techniques = gltf . techniques ; var uniformMaps:==:model . _ uniformMaps ;
var results = suite . results ( ) ; var specs:==:suite . specs ( ) ;
var body = registeredMesh . body . body ; var center:==:mesh . getBoundingInfo ( ) . boundingBox . center ;
var cols = this . cols . groups ; var rows:==:this . rows . groups ;
var prev = this . prevOp ; var mergeableCommands:==:this . $ mergeableCommands ;
var metadata = event . detail [ 0 ] . metadata ; var n:==:event . detail . length ;
var parseTree = traceur . syntax . trees . parseTree ; var switchStatement:==:traceur . syntax . trees . switchStatement ;
var author = this . state . author . trim ( ) ; var text:==:this . state . text . trim ( ) ;
var React = require ( ' React ' ) ; var statusBar:==:require ( ' statusBar ' ) ;
var canvas = chart . canvas ; var aspectRatio:==:( options . maintainAspectRatio & & chart . aspectRatio )  |  |  null ;
var x = new symbolNode ( ' x ' ) ; var o:==:new operatorNode ( ' + ' , ' add ' , [ a , x ] ) ;
var terminal = this . terminal ; var ace:==:this . aceSession . ace ;
var line = getLine ( cm . doc , linen ) ; var visual:==:visualLine ( line ) ;
var packageSource = options . packageSource ; var conn:==:options . connection ;
var _ memset = Module [ ' _ memset ' ] = asm [ ' _ memset ' ] ; var _ malloc:==:Module [ ' _ malloc ' ]    asm [ ' _ malloc ' ] ;
var item = listbox . items ( ) . eq ( 0 ) ; var items:==:listbox . items ( ) ;
var name = item . name ; var description:==:item . description  |  |  ' No description ' ;
var location = window . location ; var navigator:==:window . navigator ;
var LN2 = stdlib . Math . LN2 ; var LOG2E:==:stdlib . Math . LOG2E ;
var view = cc . view ; var width:==:view . _ originalDesignResolutionSize . width ;
var log = closure . log ; var name:==:path . basename ( _ _ filename , ' . js ' ) ;
var length = this . length ; var promise:==:this . promise ;
var separator = options . hasOwnProperty ( ' separator ' ) ? options . separator : ' , ' ; var amount:==:options . amount  |  |  6 ;
var element = this . element , that = this , new_step = step - 1 ; var o:==:this . options ;
var nconf = require ( ' nconf ' ) ; var semver:==:require ( ' semver ' ) ;
var dataKey = _ ref . dataKey ; var disableSort:==:_ ref . disableSort ;
var angular = window . angular ; var module:==:angular . module ;
var mult = new operatorNode ( ' * ' , ' multiply ' , [ a , b , c ] ) ; var add:==:new operatorNode ( ' + ' , ' add ' , [ a , b , c ] ) ;
var enqueueMutation = scope . enqueueMutation ; var mixin:==:scope . mixin ;
var tokenType = traceur . syntax . tokenType ; var variableDeclarationList:==:traceur . syntax . trees . variableDeclarationList ;
var ownerTree = instance . get ( ' ownerTree ' ) ; var children:==:instance . get ( ' children ' ) ;
var loading_text = options . loading_text  |  |  '' ; var update_breadcrumbs:==:options . update_breadcrumbs  |  |  typeof options . update_breadcrumbs      ' undefined ' ;
var fail = value . fail  |  |  ' keep ' ; var zfail:==:value . zfail  |  |  ' keep ' ;
var billboard = item . billboard ; var heightReference:==:property . getValueOrDefault ( pointGraphics . _ heightReference , time , heightReference . none ) ;
var backbone = require ( ' backbone ' ) ; var test:==:require ( ' tap ' ) . test ;
var cutEdge = cutEdges ; var i:==:this . vertices . indexOf ( cutEdge [ 0 ] ) ;
var pre = exprInfo [ expr ] . pre ; var post:==:exprInfo [ expr ] . post ;
var forces = this . physicsBody . forces ; var nodeDistance:==:this . options . nodeDistance ;
var createMemberExpression = parseTreeFactory . createMemberExpression ; var createNewExpression:==:parseTreeFactory . createNewExpression ;
var Promise = goog . require ( ' goog . Promise ' ) ; var events:==:goog . require ( ' goog . events ' ) ;
var willEnter = _ props . willEnter ; var willLeave:==:_ props . willLeave ;
var entityManager = entityAspect . entityManager ; var entityType:==:parent . entityType ;
var metadataStore = em . metadataStore ; var helper:==:em . helper ;
var valueFormatter = powerbi . visuals . valueFormatter ; var tooltipManager:==:powerbi . visuals . tooltipManager ;
var protractor = require ( ' gulp - protractor ' ) . protractor ; var typescript:==:require ( ' gulp - typescript ' ) ;
var thumbnail = thumbnailList . thumbnailMap [ videodata . name ] ; var selected:==:! thumbnail . htmlNode . classList . contains ( ' selected ' ) ;
var c9 = imports . c9 ; var info:==:imports . info ;
var block = this . expect ( ' block ' ) ; var mode:==:block . mode ;
var font = this . _ font ; var actors:==:diagram . actors ;
var metadata = safeJsonParse ( item . metadata ) ; var i d:==:metadata . i d ;
var connection = client . serverConfig . connections ( ) [ 0 ] ; var collection:==:client . collection ( ' test ' ) ;
var translateY = options . translateY ; var rotate:==:options . rotate ;
var newExpression = traceur . syntax . trees . newExpression ; var parseTreeType:==:traceur . syntax . trees . parseTreeType ;
var oModel = window . oModel ; var aFields:==:window . aFields ;
var codeMirror = options . codeMirror ; var template:==:options . template ;
var deepPurple400 = exports . deepPurple400 = ' # 7e57c2 ' ; var deepPurple500:==:exports . deepPurple500    ' # 673ab7 ' ;
var w = $ cont . css ( ' overflow','hidden ' ) . width ( ) ; var h:==:$ cont . height ( ) ;
var sinon = require ( ' sinon ' ) ; var error:==:require ( ' http - error ' ) ;
var i m = this . i m ; var re:==:this . re ;
var orange100 = exports . orange100 = ' # ffe0b2 ' ; var orange200:==:exports . orange200    ' # ffcc80 ' ;
var organizationId = $ ( ' # organizationId ' ) . val ( ) ; var jobId:==:$ ( ' # jobId ' ) . val ( ) ;
var scroll = ace . helper . scrollTop ( ) ; var h:==:ace . helper . winHeight ( ) ;
var zlevelList = this . _ zlevelList ; var layer:==:layers [ zlevel ] ;
var date = this . _ $ datePicker . val ( ) . trim ( ) ; var city:==:this . _ $ cityPicker . val ( ) . trim ( ) ;
var jshint = require ( ' gulp - jshint ' ) ; var watch:==:require ( ' gulp - watch ' ) ;
var maxPixelSize = options & & options . maxPixelSize ; var exclude:==:options & & options . exclude  |  |  ;
var clampToGround = defaultValue ( options . clampToGround , true ) ; var proxy:==:options . proxy ;
var pitch = defaultValue ( options . pitch , -CesiumMath . pi_over_two ) ; var roll:==:defaultValue ( options . roll , 0 . 0 ) ;
var graph = this . graph ; var canvas:==:this . canvas ;
var PROPERTY_NAME_SHORTHAND = ' PROPERTY_NAME_SHORTHAND ' ; var PROPERTY_SIGNATURE:==:' PROPERTY_SIGNATURE ' ;
var tanh = math . tanh ; var complex:==:math . complex ;
var Protocol = window . Protocol ; var Package:==:Protocol . Package ;
var data = chart . data ; var datasets:==:data . datasets ;
var CDATA_SECTION_NODE    = nodeType . cdata_section_node    = 4 ; var entity_reference_node:==:nodeType . entity_reference_node     5 ;
var ctrl = e . ctrlKey |  | false ; var shift:==:e . shiftKey  |  |  false ;
var a = [ true , false , new Boolean ( true ) , new Boolean ( false ) ] ; var b:==:[ true , false , new Boolean ( true ) , new Boolean ( false ) , -1 , 0 , 1 , 2 , 1 . 0 , 1 . 1 , 0 . 0 , + 0 , -0 , null , undefined , new Object ( ) , ' ' , ' abc ' , ' -1 ' , ' 0 ' , ' 1 ' , ' 2 ' , ' true ' , ' false ' , ' t ' , ' f ' , ' True ' , ' False ' , ' 1 . 00 ' , ' 1 . ' , ' + 1 . 0 ' , new Number ( 0 ) , new Number ( 1 ) ] ;
var denseMatrix = type . denseMatrix ; var sparseMatrix:==:type . sparseMatrix ;
var multiTestRunner = goog . require ( ' goog . testing . multiTestRunner ' ) ; var testCase:==:goog . require ( ' goog . testing . testCase ' ) ;
var dimensions = document . querySelector ( ' # dimensions ' ) ; var video:==:document . querySelector ( ' video ' ) ;
var isDefined = leafletHelpers . isDefined ; var fire:==:leafletEventsHelpers . fire ;
var legendPosition = powerbi . visuals . legendPosition ; var valueFormatter:==:powerbi . visuals . valueFormatter ;
var path   = require ( ' path ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var geolocationAccessStatus = windows . devices . geolocation . geolocationAccessStatus ; var geopoint:==:windows . devices . geolocation . geopoint ;
var radius = options . radius  |  |  1 . 0 ; var tessellation:==:options . tessellation  |  |  64  |  0 ;
var scriptVisualAuthoringEnabled = featureSwitches ? featureSwitches . scriptVisualAuthoringEnabled : false ; var isLabelInteractivityEnabled:==:featureSwitches ? featureSwitches . isLabelInteractivityEnabled : false ;
var ace = tab . editor . ace ; var evaluator:==:ace . getSession ( ) . repl . evaluator ;
var microIterations = config . microIterations  |  |  0 ; var params:==:config . params  |  |  [ ] ;
var boundingVolume = command . boundingVolume ; var orientedBoundingBox:==:command . orientedBoundingBox ;
var reactdomFeatureFlags = require ( ' reactdomFeatureFlags ' ) ; var reactTestUtils:==:require ( ' reactTestUtils ' ) ;
var pixelConverter = jsCommon . pixelConverter ; var urlUtils:==:jsCommon . urlUtils ;
var grey900 = exports . grey900 = ' # 212121 ' ; var black:==:exports . black    ' # 000000 ' ;
var fixedDataTableCellDefault = require ( ' fixedDataTableCellDefault . react ' ) ; var fixedDataTableHelper:==:require ( ' fixedDataTableHelper ' ) ;
var meta = this . meta ; var name:==:load . name ;
var Component = _ require . Component ; var createElement:==:_ require . createElement ;
var last_flush = graphiteStats . last_flush  |  |  0 ; var last_exception:==:graphiteStats . last_exception  |  |  0 ;
var canvas = self . canvas ; var image:==:self . image ;
var div = document . createElement ( ' div ' ) ; var text:==:div . appendChild ( document . createTextNode ( ' text ' ) ) ;
var w = Math . min ( relRect . width , rect . width - relx ) ; var h:==:math . min ( relRect . height , rect . height - rely ) ;
var action = e . action ; var items:==:e . items ;
var wordArray = c_lib . wordArray ; var bufferedBlockAlgorithm:==:c_lib . bufferedBlockAlgorithm ;
var crc = require ( ' crc ' ) ; var path:==:require ( ' path ' ) ;
var requireConfig = data . requireConfig ; var dojoConfig:==:data . dojoConfig ;
var second_currency = $ scope . order . second_currency ; var second_issuer:==:$ scope . order . second_issuer ;
var kind = node . kind ; var key:==:node . key ;
var async = require ( ' async ' ) ; var request:==:require ( ' request ' ) ;
var width = this . width ; var height:==:this . params . height * this . params . pixelRatio ;
var category = this . category ( ) ; var name:==:this . name ( ) ;
var LITERAL_EXPRESSION = ' LITERAL_EXPRESSION ' ; var LITERAL_PROPERTY_NAME:==:' LITERAL_PROPERTY_NAME ' ;
var shader = this . shader ; var el:==:this . el ;
var width = canvas . width ; var height:==:canvas . height ;
var options = this . options ; var disp:==:this . disp ;
var script = document . createElement ( ' script ' ) ; var head:==:document . querySelector ( ' head ' ) ;
var axisType = powerbi . visuals . axisType ; var axisScale:==:powerbi . visuals . axisScale ;
var w = box . width - 2 * margin ; var h:==:box . height - 2 * margin ;
var className = options . className ! = = undefined ? options . className : ' ol - overviewmap ' ; var tipLabel:==:options . tipLabel !    undefined ? options . tipLabel : ' overview map ' ;
var text = $ el . text ( ) ; var slug:==:Flatdoc . slugify ( text ) ;
var reporter = this . reporter ; var project:==:this . project ;
var settings = imports . settings ; var c9:==:imports . c9 ;
var contentDocument = attachmentContainer . contentDocument ; var documentElement:==:contentDocument . documentElement ;
var limit = obj . limit ; var ratio:==:Math . ceil ( obj . ratio ) ;
var util = require ( ' hexo - util ' ) ; var sinon:==:require ( ' sinon ' ) ;
var ifd0Length = ifDlengths . ifd0Length ; var ifd0LengthDataSection:==:ifDlengths . ifd0LengthDataSection ;
var from = changes . from ; var text:==:changes . text ;
var addTransform = exports . addTransform = proxySupportCode ( ' addTransform ' ) ; var defineParameterType:==:exports . defineParameterType    proxySupportCode ( ' defineParameterType ' ) ;
var b = fulfillThenableSoon ( ' b ' , 30 ) ; var c:==:fulfillThenableSoon ( ' c ' , 10 ) ;
var collection = this . _ getCollection ( collectionName ) ; var userid:==:collectionOptions & & collectionOptions . userid ;
var t = s . top ; var b:==:s . bottom ;
var a = foo : bar : 123 ; var b:==:foo : baz : 456 , bar : qux : 789 ;
var rotation = rectangleGeometry . _ rotation ; var stRotation:==:rectangleGeometry . _ stRotation ;
var def = this . props . def ; var memberName:==:this . props . memberName ;
var express = require ( ' express ' ) ; var fs:==:require ( ' fs ' ) ;
var name = this . transformAny ( tree . name ) ; var element:==:this . transformAny ( tree . element ) ;
var reactHostComponent = require ( ' reactHostComponent ' ) ; var reactReconcileTransaction:==:require ( ' reactReconcileTransaction ' ) ;
var photo = vcard . c ( ' photo ' ) ; var avatar:==:core . avatars . get ( user . i d ) ;
var x = matrix [ 0 ] * cartesian . x + matrix [ 2 ] * cartesian . y ; var y:==:matrix [ 1 ] * cartesian . x + matrix [ 3 ] * cartesian . y ;
var client = Nightwatch . client ( ) ; var api:==:Nightwatch . api ( ) ;
var ellipsoid = projection . ellipsoid ; var batchTable:==:primitive . _ batchTable ;
var role = this . _ element ? this . _ element . getAttribute ( ' role ' ) : null ; var label:==:this . _ element ? this . _ element . getAttribute ( ' aria - label ' ) : null ;
var b = Test . anotherWay . _ g_record_border [ i ] ; var p:==:positions [ i ] ;
var up = $ ( this ) . hasClass ( ' th - sort - up ' ) ; var down:==:$ ( this ) . hasClass ( ' th - sort - down ' ) ;
var m = a ( document . body ) ; var n:==:a ( j . join ( '' ) ) . appendTo ( m ) ;
var Imaging = Windows . Graphics . Imaging ; var Media:==:Windows . Media ;
var options = this . options ( ) ; var settings:==:this . data & & this . data . settings ;
var dirname = path . dirname ( fileObj . url ) ; var extname:==:path . extname ( fileObj . url ) ;
var format = option_consume ( options , ' format ' ) ; var cloud_name:==:option_consume ( options , ' cloud_name ' , $ . cloudinary . config ( ) . cloud_name ) ;
var React = require ( ' React ' ) ; var recordingModule:==:require ( ' nativeModules ' ) . pickerAndroidRecordingModule ;
var projectId = webInspector . networkProject . projectId ( target , spliturl [ 0 ] , true ) ; var project:==:this . _ workspace . project ( projectId ) ;
var index = env . notebook . get_selected_index ( ) ; var cell:==:env . notebook . get_cell ( index ) ;
var margin = this . margin ; var width:==:viewport . width - ( margin . left + margin . right ) ;
var mailer = require ( ' nodemailer ' ) ; var assert:==:require ( ' assert ' ) ;
var port = options . port ; var localAddress:==:options . localAddress ;
var collection = db . collection ( ' simple_document_insert_with_function_safe_with_generators ' ) ; var o:==:configuration . writeConcernMax ( ) ;
var semiMajorAxis = options . semiMajorAxis ; var rotation:==:options . rotation ;
var parent = event . target . parentNode ; var threadId:==:parent . dataset . threadId ;
var inherits = utils . inherits ; var Date:==:global . Date ;
var data = result . data ; var filter:==:result . filter ;
var h = hsla [ 0 ] ; var s:==:hsla [ 1 ] ;
var scaleX = ctxWrapper . _ scalex ; var scaley:==:ctxWrapper . _ scaley ;
var isUndefinedOrEmpty = leafletHelpers . isUndefinedOrEmpty ; var errorHeader:==:leafletHelpers . errorHeader ;
var extent = frameState . extent ; var size:==:frameState . size ;
var forward = document . getElementById ( ' forward ' ) ; var back:==:document . getElementById ( ' back ' ) ;
var sc = callbacks [ i ] . scope ; var cb:==:callbacks [ i ] . cb ;
var focusOption = _ ref8 . focusOption ; var labelKey:==:_ ref8 . labelKey ;
var a = ar . slice ( ) ; var b:==:mobx . observable ( a ) ;
var layoutVertexArray = arrayGroup . layoutVertexArray ; var elementArray:==:arrayGroup . elementArray ;
var url = feed . url  |  |  ' ' ; var encoding:==:feed . encoding  |  |  ' UTF-8 ' ;
var type = schema . type  |  |  ' object ' ; var format:==:schema . format ;
var gulp = require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ; var request:==:bbPromise . promisify ( require ( ' request ' ) ) ;
var inactiveOpacity = seriesModel . get ( ' inactiveOpacity ' ) ; var activeOpacity:==:seriesModel . get ( ' activeOpacity ' ) ;
var isFetchNeeded = t . isFetchNeeded ; var fetchEvents:==:t . fetchEvents ;
var x = HEAPU8 [ ( ( ( px ) + ( i ) )  | 0 ) ] ; var y:==:HEAPU8 [ ( ( ( py ) + ( i ) )  | 0 ) ] ;
var context = contextGetter ? contextGetter ( scope , locals ) : scope ; var fn:==:fnGetter ( scope , locals , context )  |  |  noop ;
var path   = require ( ' path ' ) ; var winston:==:require ( ' winston ' ) ;
var url = frame . url ? frame . url : inspectorTest . _ scriptMap . get ( frame . location . scriptId ) . url ; var lineNumber:==:frame . location ? frame . location . lineNumber : frame . lineNumber ;
var n = L [ 0 ] . length-1 , m = Bi . length-1 ; var x:==:numeric . rep ( [ n ] , 0 ) , xj    Array ( n ) ;
var jsonRules = new hash ( stencilSet . jsonRules ( ) ) ; var namespace:==:stencilSet . namespace ( ) ;
var data = this . data ; var series:==:data . series ;
var textContent = object . getOwnPropertyDescriptor ( node . prototype , ' textContent ' ) ; var removeAttribute:==:htmlElement . prototype . removeAttribute ;
var yawObject = this . yawObject ; var previousMouseEvent:==:this . previousMouseEvent ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , data , plugins : [ p ] ) ;
var sourcemaps = require ( ' gulp - sourcemaps ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var fs = require ( ' fs ' ) ; var test:==:require ( ' tap ' ) . test ;
var yellowA100 = exports . yellowA100 = ' # ffff8d ' ; var yellowA200:==:exports . yellowA200    ' # ffff00 ' ;
var view = defaultValue ( options . view , window ) ; var detail:==:defaultValue ( options . detail , 0 ) ;
var recid = parent . next ( ) . attr ( ' recid ' ) ; var grid:==:parent . parents ( ' . w2ui - grid ' ) . attr ( ' name ' ) ;
var valHooks = $ . valHooks ; var propHooks:==:$ . propHooks ;
var uuid = require ( ' uuid ' ) . v4 ; var mongo:==:require ( ' mongodb ' ) . mongoClient ;
var pageX = event . pageX ; var pageY:==:event . pageY ;
var amber600 = exports . amber600 = ' # ffb300 ' ; var amber700:==:exports . amber700    ' # ffa000 ' ;
var x = min ( max ( bb . l , v . x ) , bb . r ) ; var y:==:min ( max ( bb . b , v . y ) , bb . t ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var url:==:require ( ' url ' ) ;
var c = vertices [ indexC ] ; var d:==:vertices [ indexD ] ;
var stack = require ( ' stack ' ) ; var http:==:require ( ' http ' ) ;
var JS_TIMEOUT = process . env . JS_TIMEOUT  |  |  10 * 1000 ; var NO_JS_EXECUTION_TIMEOUT:==:process . env . NO_JS_EXECUTION_TIMEOUT  |  |  3000 ;
var copy = _ angular . copy ; var isElement:==:_ angular . isElement ;
var exchange = $ scope . exchange ; var currency:==:Currency . from_human ( $ scope . exchange . currency_name ? $ scope . exchange . currency_name : ' XRP ' ) ;
var b = [ this . filters [ bandIndex ] . b0 , this . filters [ bandIndex ] . b1 , this . filters [ bandIndex ] . b2 ] ; var a:==:[ this . filters [ bandIndex ] . a0 , this . filters [ bandIndex ] . a1 , this . filters [ bandIndex ] . a2 ] ;
var ystep = this . ystep ; var paintType:==:this . paintType ;
var semanticFilter = powerbi . data . semanticFilter ; var appendClearCatcher:==:powerbi . visuals . appendClearCatcher ;
var errorFont = coreFonts . errorFont ; var fontFlags:==:coreFonts . fontFlags ;
var camera = this . camera ; var audioManager:==:this . audioManager ;
var copy = _ angular . copy ; var extend:==:_ angular . extend ;
var observables = this . observables ; var len:==:observables . length ;
var identity = transformUtils . identity ; var testSet:==:transformUtils . testSet ( ) ;
var color = colorHelper . getColorForMeasure ( objects , ' ' ) ; var fontSize:==:parseInt ( powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' popup ' ] [ ' fontSize ' ] , pulseChart . defaultSettings . popup . fontSize ) , 10 ) ;
var Help = math . type . Help ; var Unit:==:math . type . Unit ;
var pooledClass = require ( ' pooledClass ' ) ; var getTextContentAccessor:==:require ( ' getTextContentAccessor ' ) ;
var Document = imports . Document ; var ui:==:imports . ui ;
var qs    = require ( ' qs ' ) ; var path:==:require ( ' path ' ) ;
var timeoutError = errors . timeoutError ; var operationalError:==:errors . operationalError ;
var formatConstructor = formatConstructors [ i ] ; var format:==:new formatConstructor ( ) ;
var inherits = require ( ' inherits ' ) ; var Readable:==:require ( ' readable - stream ' ) . Readable ;
var SET_ACCESSOR = ' SET_ACCESSOR ' ; var SPREAD_EXPRESSION:==:' SPREAD_EXPRESSION ' ;
var commands = imports . commands ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var outlineColor = property . getValueOrClonedDefault ( ellipsoid . outlineColor , time , color . black , scratchColor ) ; var material:==:materialProperty . getValue ( time , defaultValue ( ellipsoid . material , defaultMaterial ) , this . _ material ) ;
var glyph = label . _ glyphs [ i ] ; var billboard:==:glyph . billboard ;
var hierarchyNav = this . owner . hierarchyNavigator ; var row:==:this . _ grid . getOrCreateRow ( rowIndex ) ;
var isContentEditableFalse = nodeType . isContentEditableFalse ; var getSelectedNode:==:rangeUtils . getSelectedNode ;
var value = element ( by . binding ( ' example . value ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var tty = require ( ' tty ' ) ; var util:==:require ( ' util ' ) ;
var pink700 = exports . pink700 = ' # c2185b ' ; var pink800:==:exports . pink800    ' # ad1457 ' ;
var fixedDataTableCellDefault = require ( ' fixedDataTableCellDefault . react ' ) ; var fixedDataTableColumn:==:require ( ' fixedDataTableColumn . react ' ) ;
var parameterMap = kendo . data . transports [ ' odata ' ] . parameterMap ; var dataSource:==:kendo . data . dataSource ;
var dynCall_iii = Module [ ' dynCall_iii ' ] = asm [ ' dynCall_iii ' ] ; var dynCall_diii:==:Module [ ' dynCall_diii ' ]    asm [ ' dynCall_diii ' ] ;
var connection = mongojs ( config . mongodb . connectionString , collections ) ; var collection:==:connection . collection ( mongoUtil . settings . historyCollection ) ;
var x1 = x + box . x1 ; var y1:==:y + box . y1 * yStretch ;
var user = this . options . username ; var pass:==:this . options . password ;
var walletId = wallet . credentials . walletId ; var config:==:configService . getSync ( ) ;
var touch = require ( ' touch ' ) ; var watchify:==:require ( ' watchify ' ) ;
var box = this . parseGeometry [ ' box ' ] . apply ( this , [ boxNode ] ) ; var parentNode:==:boxNode . parentNode ;
var parseTree = traceur . syntax . trees . parseTree ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var tap = require ( ' gulp - tap ' ) ; var fs:==:require ( ' fs ' ) ;
var fs    = require ( ' fs ' ) ; var debug:==:require ( ' debug ' ) ( ' pm2 : monit ' ) ;
var fs = require ( ' fs ' ) ; var jsonStream:==:require ( ' jsonStream ' ) ;
var array = $ ( this ) . attr ( ' array ' ) ; var pos:==:$ ( this ) . attr ( ' pos ' ) ;
var index = event . detail . index ; var oldValue:==:event . detail . oldValue ;
var turbulence = options . turbulence ! = = undefined ? options . turbulence : 1 ; var lifetime:==:options . lifetime !    undefined ? options . lifetime : 5 ;
var each = Tools . each , trim = Tools . trim ; var DOM:==:domUtils . dom ;
var dynCall_ii = Module [ ' dynCall_ii ' ] = asm [ ' dynCall_ii ' ] ; var dynCall_viiiiiid:==:Module [ ' dynCall_viiiiiid ' ]    asm [ ' dynCall_viiiiiid ' ] ;
var alert = imports [ ' dialog . alert ' ] . show ; var confirm:==:imports [ ' dialog . confirm ' ] . show ;
var anchor = document . getElementById ( ' anchor1 ' ) ; var popup:==:document . getElementById ( ' popup1 ' ) ;
var gammaOutput = renderer . gammaOutput ; var toneMapping:==:renderer . toneMapping ;
var arrayExtensions = jsCommon . arrayExtensions ; var enumExtensions:==:jsCommon . enumExtensions ;
var httpSignatureError = utils . httpSignatureError ; var validateAlgorithm:==:utils . validateAlgorithm ;
var draw    = compat ( ' sEcho ' ,     ' draw ' ) ; var recordsTotal:==:compat ( ' iTotalRecords ' ,   ' recordsTotal ' ) ;
var index = A . _ index ; var ptr:==:A . _ ptr ;
var a = builder . addImport ( ' q ' , ' a ' , ksig_v_v ) ; var b:==:builder . addImport ( ' q ' , ' b ' , ksig_v_v ) ;
var eventPluginRegistry = require ( ' eventPluginRegistry ' ) ; var reactdomEventListener:==:require ( ' reactdomEventListener ' ) ;
var System = Windows . System ; var User:==:System . User ;
var x = ( p0 + xOffset )  |  0 ; var y:==:( p1 + yOffset )  |  0 ;
var path = req . path ; var method:==:( req . headers [ ' access - control - request - method ' ]  |  |  '' ) . toLowerCase ( )  |  |  ' default ' ;
var bar = docSet . getByLongname ( ' bar ' ) [ 0 ] ; var pez:==:docSet . getByLongname ( ' pez ' ) [ 0 ] ;
var t = inTrackingData ; var d:==:this . calcPositionDelta ( t . downEvent , inEvent ) ;
var rowHeight = webInspector . timelinePanel . rowHeight ; var headerHeight:==:webInspector . timelinePanel . headerHeight ;
var stringify = _ _ webpack_require _ _ ( 11 ) . stringify ; var isSafeProperty:==:_ _ webpack_require _ _ ( 17 ) . isSafeProperty ;
var options = this . options ; var $ pureview:==:this . $ pureview ;
var path    = require ( ' path ' ) ; var fs:==:require ( ' fs ' ) ;
var sideOrientation = ( options . sideOrientation = = = 0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ; var faceuv:==:options . faceuv  |  |  new array ( 6 ) ;
var path = require ( ' path ' ) ; var prompt:==:require ( ' prompt ' ) ;
var mongodb = require ( ' mongodb ' ) ; var sentiment:==:require ( ' sentiment ' ) ;
var format = options . format ; var type:==:options . type  |  |  ' monthly ' ;
var provider = this . provider ; var i:==:layerConfig . vRange . indexOf ( node ) ;
var should = require ( ' should ' ) ; var os:==:require ( ' os ' ) ;
var fragmentModel = config . fragmentModel ; var embeddedTracks:==:config . embeddedTracks ;
var sech = math . sech ; var complex:==:math . complex ;
var webDriver = require ( ' selenium - webdriver ' ) . webDriver ; var by:==:require ( ' selenium - webdriver ' ) . by ;
var isStopIncluded = defaultValue ( options . isStopIncluded , true ) ; var data:==:options . data ;
var draftStringKey = require ( ' draftStringKey ' ) ; var unicodeUtils:==:require ( ' unicodeUtils ' ) ;
var blogPost = require ( ' blogPost ' ) ; var blogPostHeader:==:require ( ' blogPostHeader ' ) ;
var binding = process . binding ( ' fs ' ) ; var constants:==:process . binding ( ' constants ' ) ;
var deltaY = defaultValue ( options . deltay , 0 ) ; var deltaz:==:defaultValue ( options . deltaz , 0 ) ;
var workspaceDir = options . workspaceDir ; var debug:==:options . debug !    undefined ? options . debug : false ;
var m = createSimpleMembrane ( o ) ; var w:==:m . wrapper ;
var message = messages [ i ] ; var length:==:message . length ;
var colors = plug . util . colors ; var env:==:plug . util . env ;
var coverage = imports [ ' test . coverage ' ] ; var basename:==:require ( ' path ' ) . basename ;
var Complex = math . type . Complex ; var Fraction:==:math . type . Fraction ;
var winston = require ( ' winston ' ) ; var passport:==:require ( ' passport ' ) ;
var projectId = webInspector . fileSystemWorkspaceBinding . projectId ( file . fileSystemPath ) ; var project:==:this . project ( projectId ) ;
var source = data . source ; var disableRange:==:data . disableRange ;
var controlSize = layoutInfo . controlSize ; var rotation:==:layoutInfo . rotation ;
var Output = makePropDecorator ( ' output ' , [ [ ' bindingPropertyName ' , undefined ] ] ) ; var hostBinding:==:makePropDecorator ( ' hostBinding ' , [ [ ' hostPropertyName ' , undefined ] ] ) ;
var done = options . done ; var filter:==:options . filter ;
var assert = scope . assert ; var getTreeScope:==:scope . getTreeScope ;
var script = debuggerModelLocation . script ( ) ; var uiSourceCode:==:this . _ uiSourceCodeForScriptId . get ( script . scriptId ) ;
var multiPolygonIntersectsMultiPolygon = intersection . multiPolygonIntersectsMultiPolygon ; var multiPolygonIntersectsBufferedMultiLine:==:intersection . multiPolygonIntersectsBufferedMultiLine ;
var cyclist = require ( ' cyclist ' ) ; var util:==:require ( ' util ' ) ;
var left = parseInt ( $ ( this ) . css ( ' left ' ) ) ; var right:==:parseInt ( $ ( this ) . css ( ' right ' ) ) ;
var ifr = document . getElementById ( ' iframe ' ) ; var body:==:ifr . contentWindow . document . body ;
var config = configService . getSync ( ) . wallet . settings ; var unitName:==:config . unitName ;
var len = s . length ; var p:==:new sc_StringOutputPort ( ) ;
var tabs = element . children ( ' . tabs ' ) . find ( ' li ' ) . children ( ' a ' ) ; var frames:==:element . children ( ' . frames ' ) . children ( ' div ' ) ;
var x = parseFloat ( text . attr ( ' x ' )  |  |  0 ) ; var y:==:parseFloat ( text . attr ( ' y ' )  |  |  0 ) ;
var util = imports [ ' collab . util ' ] ; var workspace:==:imports [ ' collab . workspace ' ] ;
var NEXT = common . def ( NEXT_STATE , ' . ' , flag ) ; var block:==:env . block ( ) ;
var observable = observation . observable ; var observer:==:observation . observer ;
var c = this . coneEquation = new coneEquation ( bodya , bodyb , options ) ; var t:==:this . twistEquation    new rotationalEquation ( bodya , bodyb , options ) ;
var hasOwnProperty = objectProto . hasOwnProperty ; var propertyIsEnumerable:==:objectProto . propertyIsEnumerable ;
var ymag = data . optics . parameters . ymag ; var xmag:==:data . optics . parameters . xmag ;
var s = hsla [ 1 ] ; var l:==:hsla [ 2 ] ;
var scrollY = this . _ mc . scrollY ; var context:==:this . context ;
var String = this . String ; var setTimeout:==:this . setTimeout ;
var hasRipples = _ state . hasRipples ; var ripples:==:_ state . ripples ;
var inherits = require ( ' util ' ) . inherits ; var semver:==:require ( ' semver ' ) ;
var pattern = options . pattern ; var locale:==:options . locale ;
var SELECT = ' SELECT ' ; var ACTION_CHANNEL:==:' ACTION_CHANNEL ' ;
var _ stdin = _ stdin = allocate ( [ 0,0,0,0,0,0,0,0 ] , ' i8 ' , ALLOC_STATIC ) ; var _ stderr:==:_ stderr allocate ( [ 0,0,0,0,0,0,0,0 ] , ' i8 ' , ALLOC_STATIC ) ;
var log = logError . bind ( this ) ; var stop:==:stopBuild . bind ( this ) ;
var overflowX = el . style . overflowX ; var overflowY:==:el . style . overflowY ;
var serie = n . series [ i ] ; var data:==:serie . data ;
var axisType = powerbi . visuals . axisType ; var getInvalidValueWarnings:==:powerbi . visuals . getInvalidValueWarnings ;
var delayNode1 = helper . getNode ( ' delayNode1 ' ) ; var helperNode1:==:helper . getNode ( ' helperNode1 ' ) ;
var isArray = _ angular . isArray ; var isUndefined:==:_ angular . isUndefined ;
var p = this . progress ( ) ; var from:==:new rgbColor ( p . from . value ) ;
var prop = props [ key ] ; var description:==:prop . description  |  |  '' ;
var fs = require ( ' fs ' ) ; var muk:==:require ( ' muk ' ) ;
var params = ob . params ; var validateUserForWriteapi:==:ob . validateUserForWriteapi ;
var ignoreUnknownVariables = self . _ ignoreUnknownVariables ; var assignment:==:self . _ assignment ;
var t = k . t ; var p:==:defPos ? defPos : k . p ;
var Sandbox = selftest . Sandbox ; var Run:==:selftest . Run ;
var reactdomNullInputValuePropHook = require ( ' reactdomNullInputValuePropHook ' ) ; var reactdomUnknownPropertyHook:==:require ( ' reactdomUnknownPropertyHook ' ) ;
var array = event . data . array ; var postMessage:==:self . webkitPostMessage  |  |  self . postMessage ;
var ann = anns [ i ] ; var top:==:nextTop  |  |  cm . charCoords ( ann . from , ' local ' ) . top * hScale ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var keyFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' keyFieldTestObject ' ) ) ;
var a = m . a ; var b:==:m . b ;
var LINETYPE = Diagram . LINETYPE ; var ARROWTYPE:==:Diagram . ARROWTYPE ;
var _ = window . _ ; var Nightscout:==:window . Nightscout ;
var name = node . name ; var parent:==:tw . parent ( ) ;
var width = options [ ' width ' ] ; var height:==:options [ ' height ' ] ;
var focusRippleColor = _ props2 . focusRippleColor ; var focusRippleOpacity:==:_ props2 . focusRippleOpacity ;
var uniformMap = options . uniformMap ; var modelMatrix:==:options . modelMatrix ;
var height = requiredHeight  |  |  this . _ renderingCanvas . height ; var x:==:viewport . x  |  |  0 ;
var async = require ( ' async ' ) ; var nconf:==:require ( ' nconf ' ) ;
var h = geo . height * s . scale ; var w:==:geo . width * s . scale ;
var Plugin = imports . Plugin ; var installer:==:imports . installer ;
var reactInstanceMap = require ( ' reactInstanceMap ' ) ; var reactNativeFeatureFlags:==:require ( ' reactNativeFeatureFlags ' ) ;
var generateCode = generateCodeModule . generateCode ; var generateFunction:==:generateCodeModule . generateFunction ;
var path = require ( ' path ' ) ; var spawn:==:require ( ' win - spawn ' ) ;
var bar_mm = document . getElementById ( ' bar_mm ' ) ; var bar_px:==:document . getElementById ( ' bar_px ' ) ;
var scopes = this . scopes ; var scope:==:scopes . pop ( ) ;
var range = options & & options . range  |  |  RANGE ; var cur:==:editor . getCursor ( ) , curLine    editor . getLine ( cur . line ) ;
var currentState = this . _ currentState ; var targetState:==:this . _ targetState ;
var run = Ember . run ; var get:==:Ember . get ;
var totalMatchNum = self . _ allMatched . totalMatchNum ; var contact:==:self . _ contactList [ 0 ] ;
var isPropType = isPropTypesDeclaration ( property ) ; var isDefaultProp:==:isDefaultPropsDeclaration ( property ) ;
var vertices = this . vertices ; var offset:==:this . offset ;
var b1 = $ ( ' b1 ' ) ; var b2:==:$ ( ' b2 ' ) ;
var isArray = angular . isArray ; var isObject:==:angular . isObject ;
var width = $ ( div_old ) . width ( ) ; var height:==:$ ( div_old ) . height ( ) ;
var predefinedName = traceur . syntax . predefinedName ; var thisExpression:==:traceur . syntax . trees . thisExpression ;
var verticalPosition = props . verticalPosition ; var horizontalPosition:==:props . horizontalPosition ;
var accessTokenEvents = exports . accessTokenEvents = _ _ webpack_require _ _ ( 335 ) ; var metadataService:==:exports . metadataService    _ _ webpack_require _ _ ( 306 ) ;
var lineNumber = debuggerModelLocation . lineNumber ; var columnNumber:==:debuggerModelLocation . columnNumber  |  |  0 ;
var selectableDataPoints = this . selectableDataPoints ; var selectableLegendDataPoints:==:this . selectableLegendDataPoints ;
var util = imports . util ; var commands:==:imports . commands ;
var frame = exec_state . frame ( i ) ; var script:==:frame . script ( ) ;
var async = require ( ' async ' ) ; var logrotate:==:require ( ' logrotate - stream ' ) ;
var ish = this . ish ; var scheduler:==:this . scheduler ;
var _ strlen = Module [ ' _ strlen ' ] = asm [ ' _ strlen ' ] ; var _ rand:==:Module [ ' _ rand ' ]    asm [ ' _ rand ' ] ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var cpsTransformer:==:traceur . codegeneration . generator . cpsTransformer ;
var nameField = this . props . list . nameField ; var nameFieldIsFormHeader:==:this . props . list . nameFieldIsFormHeader ;
var minimum = axisAlignedBoundingBox . minimum ; var maximum:==:axisAlignedBoundingBox . maximum ;
var string = util . string ; var isString:==:string . isString ;
var param = _ param ; var i:==:_ i ;
var Axes = plotlyInternal . axes ; var d3:==:require ( ' d3 ' ) ;
var ace = imports . ace ; var language:==:imports . language ;
var batch = compiled . batch ; var scope:==:compiled . scope ;
var panel = jsbin . panels . panels [ panelId ] ; var $ panelButton:==:$ panelButtons . find ( ' a [ href$ ' ' + panelId + ' ' ] ' ) ;
var path = require ( ' path ' ) ; var cloudinaryImageMultipleFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' cloudinaryImageMultipleFieldTestObject ' ) ) ;
var userAgent = require ( ' userAgent ' ) ; var getActiveElement:==:require ( ' getActiveElement ' ) ;
var name = this . transformAny ( tree . name ) ; var annotations:==:this . transformList ( tree . annotations ) ;
var name = device . name  |  |  device . address ; var paired:==:device . paired ;
var fontSize = current . fontSize ; var fontSizeScale:==:current . fontSizeScale ;
var reactNativeTagHandles = require ( ' reactNativeTagHandles ' ) ; var reactGenericBatching:==:require ( ' reactGenericBatching ' ) ;
var each = require ( ' each ' ) ; var foldl:==:require ( ' foldl ' ) ;
var firstRow = this . $ clipRowToDocument ( firstRow ) ; var lastRow:==:this . $ clipRowToDocument ( lastRow ) ;
var async = require ( ' async ' ) ; var passport:==:require ( ' passport ' ) ;
var commonmark = self . options . commonmark ; var now:==:eat . now ( ) ;
var Form = imports . Form ; var menus:==:imports . menus ;
var rotation = target . rotation  |  |  0 ; var position:==:target . position  |  |  [ 0 , 0 ] ;
var shorten = option_consume ( options , ' shorten ' , $ . cloudinary . config ( ) . shorten ) ; var secure:==:option_consume ( options , ' secure ' , window . location . protocol     ' https : ' ) ;
var label = props . label ; var labelPosition:==:props . labelPosition ;
var closePath = options . closePath ; var offset:==:options . offset ;
var busboy = require ( ' connect - busboy ' ) ; var errorhandler:==:require ( ' errorhandler ' ) ;
var cleanNumber = lib . cleanNumber ; var ms2DateTime:==:lib . ms2DateTime ;
var leading = ( state . values . lineleading = = null ? state . VALUES : state . values ) . lineleading * state . scale ; var Y:==:state . Y ;
var reactdomComponent = require ( ' reactdomComponent ' ) ; var reactdomComponentTree:==:require ( ' reactdomComponentTree ' ) ;
var includeWebMercatort = parameters . includeWebMercatort ; var rectangle:==:parameters . rectangle ;
var showLinesOnx = this . axes . showLinesOnx ; var showLinesOny:==:this . axes . showLinesOny ;
var rowOverscanStopIndex = _ ref8 . rowOverscanStopIndex ; var rowStartIndex:==:_ ref8 . rowStartIndex ;
var blogPostFooter = require ( ' blogPostFooter ' ) ; var excerptLink:==:require ( ' excerptLink ' ) ;
var createdAt = timestamps . createdAt  |  |  ' createdAt ' ; var updatedAt:==:timestamps . updatedAt  |  |  ' updatedAt ' ;
var async   = require ( ' async ' ) ; var shelljs:==:require ( ' shelljs ' ) ;
var contentContainer = instance . contentContainer ; var dropContainer:==:instance . dropContainer ;
var vfs = imports . vfs ; var installer:==:imports . installer ;
var inherits = require ( ' inherits ' ) ; var cyclist:==:require ( ' cyclist ' ) ;
var css = _ ref . prefix . css ; var keepUnprefixed:==:_ ref . keepUnprefixed ;
var headers = socket . request ? socket . request . headers : ; var encrypted:==:socket . request ? ! ! socket . request . connection . encrypted : false ;
var transitionEnabled = props . transitionEnabled ; var zDepth:==:props . zDepth ;
var httpClientService = _ appJsServicesHttpClientService [ ' default ' ] ; var p2pService:==:_ appJsServicesp2pService [ ' default ' ] ;
var connected = ' connected ' ; var connecting:==:' connecting ' ;
var encode = encodeuriComponent ; var decode:==:decodeuriComponent ;
var STATUS_ACTIVE   = exports . STATUS_ACTIVE    = 2 ; var STATUS_OUT_OF_SYNC:==:exports . STATUS_OUT_OF_SYNC    3 ;
var basename = path . basename ; var join:==:path . join ;
var r = parseInt ( hex . substring ( 1 , 3 ) , 16 ) ; var g:==:parseInt ( hex . substring ( 3 , 5 ) , 16 ) ;
var r = Math . round ( cpGlobal . hueTorgb ( p , q , tr ) * 255 ) ; var g:==:math . round ( cpGlobal . hueTorgb ( p , q , tg ) * 255 ) ;
var param = params [ key ] ; var type:==:Object . prototype . toString . call ( param ) ;
var concat = require ( ' gulp - concat ' ) ; var del:==:require ( ' del ' ) ;
var milliseconds = this . _ milliseconds ; var days:==:this . _ days ;
var len = alarms . length ; var now:==:Date . now ( ) ;
var len = entity . script . scripts . length ; var url:==:instance . url ;
var moduleRequireVisitor = traceur . codegeneration . module . moduleRequireVisitor ; var canonicalizeUrl:==:traceur . util . canonicalizeUrl ;
var t = this . _ globalTransform . getTranslation ( ) ; var s:==:this . actualSize . clone ( ) ;
var width = layer . width ; var height:==:layer . height ;
var uglify   = require ( ' gulp - uglify ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var repeat = data . repeat  |  |  x : 1 , y : 1 ; var npot:==:data . npot  |  |  false ;
var width = params . width  |  |  20 ; var fillStyle:==:params . fillStyle  |  |  ' black ' ;
var originalEvent = event . originalEvent ; var e:==:originalEvent ;
var height = dom . height ; var clearColor:==:this . clearColor ;
var li = e . target . closest ( ' li ' ) ; var uuid:==:li . dataset . uuid ;
var leaveClass = data . leaveClass ; var leaveToClass:==:data . leaveToClass ;
var user = req . user ; var provider:==:req . query . provider ;
var gl = this . renderer . gl ; var width:==:this . textureBuffer . width ;
var onChange = _ props2 . onChange ; var onFocus:==:_ props2 . onFocus ;
var rowCnt = this . rowCnt ; var colCnt:==:this . colCnt ;
var req = this . req ; var buffer:==:this . _ buffer ;
var center = seriesModel . get ( ' center ' ) ; var radius:==:seriesModel . get ( ' radius ' ) ;
var isArray = sharedUtil . isArray ; var error:==:sharedUtil . error ;
var materials = gltf . materials ; var techniques:==:gltf . techniques ;
var editor   = this . editor ; var preview:==:this . preview ;
var appsHelper = _ jsLibHelpers . appsHelper ; var iconHelper:==:_ jsLibHelpers . iconHelper ;
var parseTreeType = traceur . syntax . trees . parseTreeType ; var variableDeclarationList:==:traceur . syntax . trees . variableDeclarationList ;
var createConditionalExpression = parseTreeFactory . createConditionalExpression ; var createExpressionStatement:==:parseTreeFactory . createExpressionStatement ;
var accessToken = data . accessToken ; var accountId:==:data . accountId ;
var name = _ props . name ; var hintText:==:_ props . hintText ;
var retainingEdges = this . _ retainingEdges ; var firstRetainerIndex:==:this . _ firstRetainerIndex ;
var fullBlack = exports . fullBlack = ' rgba ( 0 , 0 , 0 , 1 ) ' ; var darkBlack:==:exports . darkBlack    ' rgba ( 0 , 0 , 0 , 0 . 87 ) ' ;
var isUpArrow = utilities . isUpArrow ; var isDownArrow:==:utilities . isDownArrow ;
var push = arr . push ; var indexOf:==:arr . indexOf ;
var dataType = window . opener . sap . ui . base . dataType ; var managedObject:==:window . opener . sap . ui . base . managedObject ;
var layout = imports . layout ; var tabinteraction:==:imports . tabinteraction ;
var srcAlpha = ( ' srcAlpha ' in value ? value . srcAlpha : value . src ) ; var dstrgb:==:( ' dstrgb ' in value ? value . dstrgb : value . dst ) ;
var row = this . range . from . row ; var col:==:this . range . from . col ;
var destination = this . _ destination ; var writeQueue:==:this . _ writeQueue ;
var count = cfg . count  |  |  8 ; var decimals:==:cfg . decimals  |  |  8 ;
var div = $ ( this ) . data ( ' div ' ) ; var settings:==:$ ( this ) . data ( ' settings ' ) ;
var isRTL = opt ( ' isRTL ' ) ; var event:==:segment . event ;
var orientation = pose . orientation  |  |  defaultOrientation ; var position:==:pose . position  |  |  defaultPosition ;
var binding = this . transformAny ( tree . binding ) ; var statements:==:this . transformList ( tree . catchBody . statements ) ;
var match = matchingListeners [ i d ] ; var listener:==:match . listener ;
var path = require ( ' path ' ) ; var Promise:==:require ( ' rsvp ' ) . Promise ;
var vertexCount = parseInt ( polygon . m_vertexcount ) ; var vertices:==:polygon . m_vertices ;
var billboards = billboardCollection . _ billboards ; var length:==:billboards . length ;
var error = debug ( ' A - Frame : error ' ) ; var warn:==:debug ( ' A - Frame : warn ' ) ;
var c = rejectThenableSoon ( ' rejected - c ' , 10 ) ; var d:==:fulfillThenableSoon ( ' d ' , 20 ) ;
var Keyboard = require ( ' Keyboard ' ) ; var reactNative:==:require ( ' reactNative ' ) ;
var beta = isBetaValid ? parseFloat ( betaString ) : -1 ; var gamma:==:isGammaValid ? parseFloat ( gammaString ) : -1 ;
var x = e . heading . x ; var y:==:e . heading . y ;
var nav   = $ ( ' . docs - nav - group ' ) ; var trigger:==:$ ( ' . js - docs - nav - trigger ' ) ;
var e = this . endContactEvent ; var l:==:endOverlaps . length ;
var symbolNode = math . expression . node . symbolNode ; var rangeNode:==:math . expression . node . rangeNode ;
var viewport = axesLayout . viewport ; var margin:==:axesLayout . margin ;
var tubularSegments = options . tubularSegments  |  |  32 ; var p:==:options . p  |  |  2 ;
var util   = require ( ' util ' ) ; var chalk:==:require ( ' chalk ' ) ;
var path = require ( ' path ' ) ; var babel:==:require ( ' babel - core ' ) ;
var dynCall_ddd = Module [ ' dynCall_ddd ' ] = asm [ ' dynCall_ddd ' ] ; var dynCall_fiii:==:Module [ ' dynCall_fiii ' ]    asm [ ' dynCall_fiii ' ] ;
var margin = yearLabel . get ( ' margin ' ) ; var pos:==:yearLabel . get ( ' position ' ) ;
var yellow200 = exports . yellow200 = ' # fff59d ' ; var yellow300:==:exports . yellow300    ' # fff176 ' ;
var yargs = require ( ' yargs ' ) ; var zip:==:require ( ' gulp - zip ' ) ;
var i d = row . dataset . uuid ; var group:==:row . dataset . group ;
var quasiSubstitution = traceur . syntax . trees . quasiSubstitution ; var restParameter:==:traceur . syntax . trees . restParameter ;
var getDayId = calc . getDayId ; var spanOfMonth:==:calc . spanOfMonth ;
var paramNames = match . paramNames ; var paramValues:==:match . paramValues ;
var functionDeclaration = traceur . syntax . trees . functionDeclaration ; var getAccessor:==:traceur . syntax . trees . getAccessor ;
var periods = args . periods  |  |  [ ] ; var now:==:Date . now ( ) ;
var left = window . pagexOffset + inputBounds . left ; var right:==:window . document . body . offsetWidth - inputBounds . right ;
var tealA200 = exports . tealA200 = ' # 64ffda ' ; var tealA400:==:exports . tealA400    ' # 1de9b6 ' ;
var docId = docParams . docId ; var docBaseUrl:==:docParams . docBaseUrl ;
var gotAccum = this . _ gotAccum ; var valuesPhase:==:this . _ valuesPhase ;
var x = ' x ' ; var newProperty:==:' newProperty ' ;
var end = onEvt ( doc , ' touchend ' , ontouchend , this ) ; var cancel:==:onEvt ( doc , ' touchcancel ' , cleanup , this ) ;
var domChildrenOperations = require ( ' domChildrenOperations ' ) ; var domLazyTree:==:require ( ' domLazyTree ' ) ;
var dateTimeFormat = goog . require ( ' goog . i18n . dateTimeFormat ' ) ; var dateTimeSymbols:==:goog . require ( ' goog . i18n . dateTimeSymbols ' ) ;
var chunkSize = this . options . chunkSize ; var dictionary:==:this . options . dictionary ;
var bindCheckbox = util . bindCheckbox ; var bindDropdown:==:util . bindDropdown ;
var $ element = this . $ element ; var mode:==:this . mode ;
var url = helpers . urlForBin ( bin ) ; var user:==:req . session . user  |  |  ;
var installer = imports . installer ; var question:==:imports [ ' dialog . question ' ] ;
var annotations = this . transformList ( tree . annotations ) ; var body:==:this . transformAsyncBody _ ( tree . body ) ;
var passwordResponses = sharedUtil . passwordResponses ; var passwordException:==:sharedUtil . passwordException ;
var featuresJson = fs . readFileSync ( featuresJsonPath , encoding : ' utf8 ' ) ; var features:==:json . parse ( featuresJson ) ;
var springConfig = require ( ' springConfig ' ) ; var viewStylePropTypes:==:require ( ' viewStylePropTypes ' ) ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var relationshipFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' relationshipFieldTestObject ' ) ) ;
var transparent = options . transparent ; var antialias:==:options . antialias ;
var active = this . $ menu . find ( ' . active ' ) . removeClass ( ' active ' ) ; var prev:==:active . prev ( ) ;
var last = _ . last ( data ) ; var first:==:_ . first ( data ) ;
var Page = ctx . model ( ' Page ' ) ; var path:==:file . path ;
var group = cfg . group = = = undefined?0 : cfg . group ; var layers:==:cfg . layers      undefined?~0 : cfg . layers ;
var year = getOption ( options , ' year ' , ' string ' , [ ' 2-digit ' , ' numeric ' ] , undefined ) ; var month:==:getOption ( options , ' month ' , ' string ' , [ ' 2-digit ' , ' numeric ' , ' narrow ' , ' short ' , ' long ' ] , undefined ) ;
var requiresPrefix = _ ref . requiresPrefix ; var keepUnprefixed:==:_ ref . keepUnprefixed ;
var cache = Cache . findById ( cacheId ) ; var hash:==:hashStream . read ( ) . toString ( ' hex ' ) ;
var quasiLiteralExpression = traceur . syntax . trees . quasiLiteralExpression ; var quasiLiteralPortion:==:traceur . syntax . trees . quasiLiteralPortion ;
var sum64_hi = utils . sum64_hi ; var sum64_lo:==:utils . sum64_lo ;
var offset = this . _ offsets [ attributeIndex ] ; var stride:==:this . _ stride ;
var visualDataRoleKind = powerbi . visualDataRoleKind ; var sqExprBuilder:==:powerbi . data . sqExprBuilder ;
var async = require ( ' async ' ) ; var engine:==:require ( ' engine . io ' ) ;
var length = node [ getTextContentAccessor ( ) ] . length ; var start:==:math . min ( offsets . start , length ) ;
var children = _ props3 . children ; var loadingPlaceholder:==:_ props3 . loadingPlaceholder ;
var mrow = cTop . createElement ( ' mrow ' ) ; var msup:==:cTop . createElement ( ' msup ' ) ;
var Commit = Git . Commit ; var Ref:==:Git . Ref ;
var slicerHeader = powerbi . visuals . controls . slicerHeader ; var pixelConverter:==:jsCommon . pixelConverter ;
var attributes = geometry . attributes ; var groups:==:geometry . groups ;
var axis = ( data . axis ! = = undefined ) ? data . axis : 1 ; var radius:==:data . radius  |  |  0 . 5 ;
var begin = groupedChunk . beginChunk * this . chunkSize ; var end:==:math . min ( groupedChunk . endChunk * this . chunkSize , this . length ) ;
var emptyFunction = require ( ' emptyFunction ' ) ; var nativeRequestAnimationFrame:==:require ( ' nativeRequestAnimationFrame ' ) ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var moneyFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' moneyFieldTestObject ' ) ) ;
var scroll = document . querySelector ( ' . scroll ' ) ; var titlebar:==:document . querySelector ( ' . titlebar ' ) ;
var heights = heightsTable ; var length:==:heights . length ;
var locations = this . _ locations ; var length:==:locations . length ;
var Color = jsCommon . color ; var dataRoleHelper:==:powerbi . data . dataRoleHelper ;
var length = positions . length ; var ellipsoid:==:defaultValue ( options . ellipsoid , ellipsoid . wgs84 ) ;
var textureHeight = options . textureHeight ! = = undefined ? options . textureHeight : 512 ; var clipBias:==:options . clipBias !    undefined ? options . clipBias : 0 . 0 ;
var cell   = cells [ i ] ; var column:==:this . s . columns [ cell . colIdx ] ;
var rotr64_hi = utils . rotr64_hi ; var rotr64_lo:==:utils . rotr64_lo ;
var browser = _ ref$browserInfo . browser ; var version:==:_ ref$browserInfo . version ;
var zr = controller . _ zr ; var covers:==:controller . _ covers ;
var editor = tab . editor . ace ; var session:==:( tab . document . getSession ( )  |  |  0 ) . session ;
var pageContent = this . normalize ( this . pageContents [ pageIndex ] ) ; var query:==:this . normalize ( this . state . query ) ;
var t = type . call ( this , d , i ) ; var s:==:size . call ( this , d , i ) ;
var faceUV = options . faceUV  |  |  new Array ( 3 ) ; var faceColors:==:options . faceColors ;
var test     = require ( ' utest ' ) ; var assert:==:require ( ' assert ' ) ;
var tildify = require ( ' tildify ' ) ; var interpret:==:require ( ' interpret ' ) ;
var store = new datastore ( data : data ) ; var d:==:new doh . Deferred ( ) ;
var touches = event . touches  |  |  [ ] ; var length:==:touches . length ;
var id_token_hint = _ ref2 . id_token_hint ; var data:==:_ ref2 . data ;
var index = sourceIndex  |  |  0 ; var source:==:sources [ index ] ;
var dasherize = utils . dasherize ; var nameify:==:utils . nameify ;
var g = nn_ctx . getImageData ( 0 , 0 , w , h ) ; var v:==:new convnetjs . vol ( 1 , 1 , 2 ) ;
var NULL1 = C . NULL1 = 0x41 ; var NULL2:==:C . NULL2    0x42 ;
var fs = imports . fs ; var analytics:==:imports [ ' c9 . analytics ' ] ;
var i d = goog . gears . fakeWorkerPool _ . idcounter_++ ; var name:==:iframeElement . name    iframeElement . i d    ' fake - worker- ' + i d ;
var strength = options . strength ; var anchor:==:options . anchor  |  |  source . position ;
var prefix = opt_prefix  |  |  '' ; var suffix:==:opt_suffix  |  |  '' ;
var metadata = codeUnit . metadata ; var outputName:==:metadata . outputName  |  |  metadata . sourceName  |  |  ' < loaderOutput > ' ;
var decorators = descriptor . decorators ; var key:==:descriptor . key ;
var xcb _ = dimensions . xcb _ ; var ycb _:==:dimensions . ycb _ ;
var cell = Jupyter . notebook . get_cell ( 0 ) ; var img:==:$ ( ' div . text_cell_render ' ) . find ( ' img ' ) ;
var lineBreakg = _ whitespace . lineBreakg ; var isNewLine:==:_ whitespace . isNewLine ;
var battery = window . navigator . battery ; var charging:==:document . getElementById ( ' charging ' ) ;
var provider = propertyProviders [ providerKey ] ; var prepare:==:preparers [ prepKey ] ;
var setSafeProperty = _ _ webpack_require _ _ ( 17 ) . setSafeProperty ; var string:==:util . string ;
var topic_id = row . _ i d . topic_id ; var count:==:row . count ;
var id_token = _ ref . id_token ; var session_state:==:_ ref . session_state ;
var Review = db . model ( ' dynrefReview ' , reviewSchema , ' gh3108_0 ' ) ; var item1:==:db . model ( ' dynrefItem1 ' , item1Schema , ' gh3108_1 ' ) ;
var Tree = imports . Tree ; var scm:==:imports . scm ;
var w = video . width ; var h:==:video . height ;
var f8Colors = require ( ' f8Colors ' ) ; var f8SessionCell:==:require ( ' f8SessionCell ' ) ;
var fullSceneLayout = scene . fullSceneLayout ; var dataScale:==:scene . dataScale ;
var characterMetadata = require ( ' characterMetadata ' ) ; var contentStateInlineStyle:==:require ( ' contentStateInlineStyle ' ) ;
var headers = options . headers  |  |  [ ] ; var cookies:==:options . cookies  |  |  [ ] ;
var fnId = opTree [ x ] . fnId ; var args:==:opTree [ x ] . args ;
var message = this . _ options . message ; var title:==:this . _ options . title ;
var blogPostb = db . model ( ' blogPostb ' , collection + random ( ) ) ; var a:==:title : ' a ' , author : null ;
var child = element . childNodes [ i ] ; var name:==:child . getAttribute ( ' name ' ) ;
var exec = require ( ' child_process ' ) . exec ; var htmlmin:==:require ( ' gulp - htmlmin ' ) ;
var path = data . path ; var layout:==:data . layout ;
var exceptRange = ( context . options [ 1 ] & & context . options [ 1 ] . exceptRange ) ; var onlyEquality:==:( context . options [ 1 ] & & context . options [ 1 ] . onlyEquality ) ;
var spreadTransformer = traceur . codegeneration . spreadTransformer ; var uniqueIdentifierGenerator:==:traceur . codegeneration . uniqueIdentifierGenerator ;
var rotate = image . rotate ; var naturalWidth:==:image . naturalWidth ;
var eventTarget = _ _ dependency1 _ _ . eventTarget ; var promise:==:_ _ dependency2 _ _ . promise ;
var x = this . expression . expressions . slice ( ) ; var e:==:this . clone ( ) ;
var MAYBE_PROPER = module . exports . MAYBE_PROPER = 1 ; var NOT_PROPER:==:module . exports . NOT_PROPER    0 ;
var http = this . options . httpCdnUrl ; var https:==:this . options . httpsCdnUrl ;
var eventEmitter2 = require ( ' eventemitter2 ' ) . eventEmitter2 ; var fs:==:require ( ' fs ' ) ;
var a = example_numbers [ i ] ; var b:==:example_numbers [ j ] ;
var api = this . api ; var brushType:==:this . _ brushType ;
var asserts = goog . require ( ' goog . asserts ' ) ; var utils:==:goog . require ( ' goog . net . streams . utils ' ) ;
var each = zrUtil . each ; var toCamelCase:==:formatUtil . toCamelCase ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var fs:==:require ( ' fs ' ) ;
var form = container . find ( ' form ' ) ; var input:==:container . find ( ' input ' ) ;
var token = cookie . get ( ' oauth - token ' ) ; var scope:==:cookie . get ( ' scope ' ) ;
var translate = window . Nightscout . client . translate ; var zone:==:window . Nightscout . client . sbx . data . profile . getTimezone ( ) ;
var two = subject . client . findElement ( selectors . two ) ; var three:==:subject . client . findElement ( selectors . three ) ;
var debug = require ( ' debug ' ) ( ' marionette : tcp ' ) ; var net:==:require ( ' net ' ) ;
var cellCount = _ props3 . cellCount ; var cellLayoutManager:==:_ props3 . cellLayoutManager ;
var a = goog . dom . getElement ( ' a ' ) ; var range:==:goog . dom . browserrange . createRangeFromNodes ( a , 1 , a , 1 ) ;
var each = zrUtil . each ; var ifAxisCrossZero:==:axisHelper . ifAxisCrossZero ;
var descriptor = extension . descriptor ( ) ; var bindings:==:descriptor [ ' bindings ' ] ;
var b = this . bodies [ i ] ; var m:==:b . mass ;
var template = w2popup . _ template ; var title:==:options . title ;
var parentSuite = ( typeof child . parentSuite = = ' undefined ' ) ? ' suite ' : ' parentSuite ' ; var parent:==:child [ parentSuite ] ;
var failure = config . failure ; var facebook:==:config . facebook ;
var powerbitests = window . powerbitests ; var inJs:==:window . inJs ;
var fs = require ( ' fs ' ) ; var five:==:require ( ' johnny - five ' ) ;
var inline = Bools [ inlineIndex % bools . length ] ; var strict:==:bools [ strictIndex % bools . length ] ;
var handleScrollx = this . _ handleScrollx ( deltax , deltay ) ; var handleScrolly:==:this . _ handleScrolly ( deltay , deltax ) ;
var minSize = math . max ( 0 , math . min ( 9999 , powerbi . dataViewObjects . getValue ( objects , properties [ ' minSize ' ] , defaultSettings . minSize ) ) ) ; var maxSize:==:math . max ( minSize , math . min ( 9999 , powerbi . dataViewObjects . getValue ( objects , properties [ ' maxSize ' ] , defaultSettings . maxSize ) ) ) ;
var x = this . left . expressions . slice ( ) ; var e:==:this . clone ( ) ;
var strong = document . getElementById ( ' strong ' ) ; var table:==:div . getElementsByTagName ( ' table ' ) [ 0 ] ;
var col = grid . columns [ 1 ] ; var row:==:grid . rows [ 2 ] ;
var browserSupportCore = require ( ' browserSupportCore ' ) ; var getVendorPrefixedName:==:require ( ' getVendorPrefixedName ' ) ;
var zlib = require ( ' zlib ' ) ; var fs:==:require ( ' fs ' ) ;
var commander = cli . commander = require ( ' commander ' ) ; var cmd:==:fis . require ( ' command ' , cmdName ) ;
var canvas = document . createElement ( ' canvas ' ) ; var supportsImageRenderingPixelated:==:featureDetection . supportsImageRenderingPixelated ( ) ;
var v = value ; var setters:==:this . setters ;
var domProperty = require ( ' domProperty ' ) ; var eventPluginRegistry:==:require ( ' eventPluginRegistry ' ) ;
var important = notification . important ; var link:==:notification . link ;
var resolveAuthorLinks = helper . resolveAuthorLinks ; var scopeToPunc:==:helper . scopeToPunc ;
var func = bookKeeping . func ; var context:==:bookKeeping . context ;
var jsEntry = params . jsEntry ; var expectedUrl:==:params . expectedUrl ;
var show = powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . donutChartProps . legend . show , this . legend . isVisible ( ) ) ; var showTitle:==:powerbi . dataViewObjects . getValue ( legendObjectProperties , visuals . donutChartProps . legend . showTitle , true ) ;
var run = helpers . runMocha ; var fs:==:require ( ' fs ' ) ;
var catchState = traceur . codegeneration . generator . catchState ; var conditionalState:==:traceur . codegeneration . generator . conditionalState ;
var max = new Date ( range . max . valueOf ( ) + interval * 0 . 01 ) ; var animation:==:options & & options . animation !    undefined ? options . animation : true ;
var end = ' animationend ' ; var background:==:this . els . background ;
var min1 = e1 . min1 . value ; var max1:==:e1 . max1 . value ;
var options = this . options ; var impulse:==:this . impulse ;
var o3 = 0o2 ^ 0o3 ; var o4:==:0o4  |  0o2 ;
var debug = require ( ' debug ' ) ( ' socket . io : socket ' ) ; var assign:==:require ( ' object - assign ' ) ;
var t = pathItem . create ( ' m283 . 8,165 . 2l283 . 8,227 . 2l248 . 6,227 . 2l248 . 6,257 . 2l283 . 8,257 . 2l283 . 8,388 . 8q283 . 8,403 . 2,286 . 6,412q289 . 4,420 . 8,295 . 2,425 . 6q301,430 . 4,310 . 4,432 . 2q319 . 8,434,333,434l359,434l359,404l343 . 4,404q335 . 4,404,330 . 4,403 . 4q325 . 4,402 . 8,322 . 6,400 . 8q319 . 8,398 . 8,318 . 8,395 . 2q317 . 8,391 . 6,317 . 8,385 . 6l317 . 8,257 . 2l359,257 . 2l359,227 . 2l317 . 8,227 . 2l317 . 8,165 . 2z ' ) ; var r:==:pathItem . create ( ' m192 . 38,277 . 21l176 . 71,307 . 39l258 . 34,349 . 8q276 . 09,359 . 03,287 . 91,369 . 68q299 . 73,380 . 33,305 . 26,393 . 11q310 . 79,405 . 9,309 . 12,421 . 26q307 . 45,436 . 62,298 . 04,454 . 72l329 . 99,471 . 32q330 . 82,469 . 82,331 . 6,468 . 32q343 . 27,445 . 86,341 . 07,425 . 7q338 . 72,404 . 19,322 . 08,381 . 57l322 . 45,380 . 86l361 . 14,400 . 96l375 . 89,372 . 56l192 . 38,277 . 21z ' ) ;
var appearCancelled = data . appearCancelled ; var duration:==:data . duration ;
var type = spec . type ; var subtype:==:spec . subtype ;
var path = require ( ' path ' ) ; var semver:==:require ( ' semver ' ) ;
var options = opt_options ? opt_options : ; var className:==:options . className !    undefined ? options . className : ' ol - rotate ' ;
var Linking = require ( ' Linking ' ) ; var Platform:==:require ( ' Platform ' ) ;
var secure_distribution = option_consume ( options , ' secure_distribution ' , $ . cloudinary . config ( ) . secure_distribution ) ; var cname:==:option_consume ( options , ' cname ' , $ . cloudinary . config ( ) . cname ) ;
var g = _ settings . groups [ parseInt ( j , 10 ) ] ; var div:==:document . createElement ( ' div ' ) ;
var callback = callbacks . shift ( ) ; var func:==:callback . func ;
var r = this . rgb . r ; var g:==:this . rgb . g ;
var segmentationSymbolUsed = codingStyleParameters . segmentationSymbolUsed ; var precision:==:context . components [ c ] . precision ;
var defineStep = exports . defineStep = proxySupportCode ( ' defineStep ' ) ; var addTransform:==:exports . addTransform    proxySupportCode ( ' addTransform ' ) ;
var indent = self . indent ( now . line ) ; var length:==:value . length ;
var isNew = node . isNew ; var column:==:e . column ;
var animations = model . gltf . animations ; var accessors:==:model . gltf . accessors ;
var dynCall_viii = Module [ ' dynCall_viii ' ] = asm [ ' dynCall_viii ' ] ; var dynCall_v:==:Module [ ' dynCall_v ' ]    asm [ ' dynCall_v ' ] ;
var piurl = document . getElementById ( ' piurl ' ) . value . trim ( ) ; var ppgurl:==:document . getElementById ( ' ppgurl ' ) . value . trim ( ) ;
var view = this . view ; var rowCnt:==:this . rowCnt ;
var rt = createElement ( ' rt ' ) ; var rp:==:createElement ( ' rp ' ) ;
var info = this . props . info ; var module:==:this . props . module ;
var object = compile ( node . object , defs , args ) ; var index:==:compile ( node . index , defs , args ) ;
var merge = require ( ' merge ' ) ; var requireNativeComponent:==:require ( ' requireNativeComponent ' ) ;
var loader = _ this7 . aurelia . loader ; var info:==:_ this7 . info ;
var sparseMatrix = math . type . sparseMatrix ; var complex:==:math . type . complex ;
var listView = this . listView ; var optionLabel:==:this . optionLabel ;
var hint = hints [ $ item . data ( ' index ' ) ] ; var item:==:$ item . data ( ' item ' ) ;
var uint8Array = window . uint8Array ; var dataView:==:window . dataView ;
var rtcSessionDescription = window . mozrtcSessionDescription  |  |  window . webkitrtcSessionDescription  |  |  window . rtcSessionDescription ; var rtcIceCandidate:==:window . mozrtcIceCandidate  |  |  window . webkitrtcIceCandidate  |  |  window . rtcIceCandidate ;
var camel = require ( ' to - camel - case ' ) ; var foldl:==:require ( ' foldl ' ) ;
var debug = utils . debug ; var warn:==:debug ( ' A - Frame : warn ' ) ;
var createVariableStatement = parseTreeFactory . createVariableStatement ; var const:==:tokenType . const ;
var cascadeExpressionTransformer = traceur . codegeneration . cascadeExpressionTransformer ; var classTransformer:==:traceur . codegeneration . classTransformer ;
var membersPanel = imports . membersPanel ; var ui:==:imports . ui ;
var connection = navigator . connection  |  |  navigator . mozConnection  |  |  navigator . webkitConnection ; var type:==:connection . type ;
var REST_PARAMETER = ' REST_PARAMETER ' ; var RETURN_STATEMENT:==:' RETURN_STATEMENT ' ;
var mcusPerLine = frame . mcusPerLine ; var progressive:==:frame . progressive ;
var list = that . list ; var parent:==:list . parent ( ' . k - animation - container ' ) ;
var htmlCollection = scope . wrappers . htmlCollection ; var nodeList:==:scope . wrappers . nodeList ;
var len = models . length ; var children:==:$ . _ _ views . todoTable . children ;
var mainData = opt . mainData ; var datas:==:opt . datas ;
var color = attributes [ ' color ' ] ; var tangent:==:attributes [ ' tangent ' ] ;
var Types = keystone . Field . Types ; var targetRelationship:==:new keystone . list ( ' targetRelationship ' ) ;
var vertices = mesh . vertices ; var indices:==:mesh . indices ;
var Warning = Errors . Warning ; var commandResult:==:errors . commandResult ;
var createPromiseCapability = sharedUtil . createPromiseCapability ; var isInt:==:sharedUtil . isInt ;
var width = data . width ; var height:==:data . height ;
var first = document . getElementById ( ' first ' ) ; var last:==:document . getElementById ( ' last ' ) ;
var gulp = require ( ' gulp ' ) ; var karma:==:require ( ' karma ' ) . server ;
var top = offset . top ; var left:==:offset . left ;
var display = _ ref . display ; var max_age:==:_ ref . max_age ;
var head = document . head  |  |  document . documentElement ; var s:==:document . createElement ( ' script ' ) ;
var b = rejectBuiltInSoon ( ' rejected - b ' , 30 ) ; var c:==:rejectBuiltInSoon ( ' rejected - c ' , 10 ) ;
var eslint = require ( ' gulp - eslint ' ) ; var exec:==:require ( ' child_process ' ) . exec ;
var from = this . _ ranges [ name ] . from ; var to:==:this . _ ranges [ name ] . to ;
var cssmin = require ( ' gulp - cssmin ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var c = processDiagramCanvas . g . ellipse ( cx , cy , this . radius , this . radius ) . attr ( stroke : color . gainsboro ) ; var c:==:processDiagramCanvas . g . ellipse ( targetx , targety , 2 , 2 ) . attr ( fill : color . red ) ;
var x = bounds . x ; var interpolate:==:primaryGrid . interpolate ;
var errorCallback = self . _ subscriptions [ msg . i d ] . errorCallback ; var stopCallback:==:self . _ subscriptions [ msg . i d ] . stopCallback ;
var Grid = PF . Grid ; var diagonalMovement:==:pf . diagonalMovement ;
var scrollTop = this . scrollTop ; var scrollHeight:==:this . scrollHeight ;
var width = nearestPow2 ( image . width ) ; var height:==:nearestPow2 ( image . height ) ;
var tag = ctx . extend . tag ; var ext:==:data . engine  |  |  ( source ? pathFn . extname ( source ) : '' ) ;
var skirtHeight = this . _ skirtHeight ; var exaggeration:==:this . _ mesh . exaggeration ;
var line = pos . line + lendiff ; var ch:==:pos . ch ;
var time_start = this . options . time_start . split ( ' : ' ) ; var time_split:==:parseInt ( this . options . time_split ) ;
var stringifyProperties = schema . stringifyProperties ; var stringifyProperty:==:schema . stringifyProperty ;
var pooledClass = require ( ' pooledClass ' ) ; var reactBrowserEventEmitter:==:require ( ' reactBrowserEventEmitter ' ) ;
var indices = _ ref . indices ; var keys:==:Object . keys ( indices ) ;
var x = pointer . x - swatch . x ; var y:==:pointer . y - swatch . y ;
var elements = tree . elements ; var length:==:elements . length ;
var y = currentPos . y ; var z:==:currentPos . z ;
var index = _ ref . index ; var isScrolling:==:_ ref . isScrolling ;
var wordSpacing = current . wordSpacing ; var fontDirection:==:current . fontDirection ;
var cornerType = params . cornerType ; var saveAttributes:==:params . saveAttributes ;
var connect = require ( ' connect ' ) ; var fs:==:require ( ' fs ' ) ;
var y = sphere0 . centerWorld . y - sphere1 . centerWorld . y ; var z:==:sphere0 . centerWorld . z - sphere1 . centerWorld . z ;
var s = new Schema ( setMaxListeners : string ) ; var m:==:mongoose . model ( ' setMaxListeners - as - property - name ' , s ) ;
var Datagrid = imports . Datagrid ; var editors:==:imports . editors ;
var minutes = d . minutes ( ) ; var hours:==:d . hours ( ) ;
var muk = require ( ' muk ' ) ; var multiparty:==:require ( ' multiparty ' ) ;
var projectContext = options . projectContext ; var name:==:packageSource . name ;
var isList = immutable . list . isList ; var isMap:==:immutable . map . isMap ;
var audioRecvCodec = options . audioRecvCodec  |  |  '' ; var videoSendCodec:==:options . videoSendCodec  |  |  '' ;
var vertexFormat = polygonGeometry . _ vertexFormat ; var ellipsoid:==:polygonGeometry . _ ellipsoid ;
var center = this . boundingSphere . center ; var radius:==:this . boundingSphere . radius ;
var now = Utils . now ( options . localtimeOffsetMsec ) ; var credentials:==:options . credentials ;
var center = polarModel . get ( ' center ' ) ; var radius:==:polarModel . get ( ' radius ' ) ;
var Plugin = imports . Plugin ; var normalize:==:require ( ' path ' ) . normalize ;
var from = ray . from ; var to:==:ray . to ;
var entity = updater . entity ; var i d:==:entity . i d ;
var secondaryClipboard = require ( ' secondaryClipboard ' ) ; var userAgent:==:require ( ' userAgent ' ) ;
var pink300 = exports . pink300 = ' # f06292 ' ; var pink400:==:exports . pink400    ' # ec407a ' ;
var Node = mod . Node ; var binaryTree:==:mod . binaryTree ;
var reactNativeEventPluginOrder = require ( ' reactNativeEventPluginOrder ' ) ; var reactNativeGlobalResponderHandler:==:require ( ' reactNativeGlobalResponderHandler ' ) ;
var red600 = exports . red600 = ' # e53935 ' ; var red700:==:exports . red700    ' # d32f2f ' ;
var resolveAssetSource = require ( ' resolveAssetSource ' ) ; var react:==:require ( ' react ' ) ;
var contours = trace . contours ; var uid:==:trace . uid ;
var a = e . originalEvent ; var files:==:a . target . files  |  |  a . dataTransfer & & a . dataTransfer . files ;
var c = clearCommand . color ; var d:==:clearCommand . depth ;
var pixelRatio = frameState . pixelRatio ; var projection:==:frameState . viewState . projection ;
var ptr = m . _ ptr ; var size:==:m . _ size ;
var minChar = comments [ i ] . minChar ; var limChar:==:comments [ i ] . limChar ;
var operand = this . transformAny ( tree . operand ) ; var args:==:this . transformAny ( tree . args ) ;
var Promise = _ _ dependency1 _ _ . Promise ; var all:==:_ _ dependency2 _ _ . all ;
var clearInterval = global . clearInterval ; var toString:==:object . prototype . toString ;
var x = game . world . centerX + xx [ i ] * perspective ; var y:==:game . world . centerY + yy [ i ] * perspective ;
var fs = bbPromise . promisifyAll ( require ( ' fs - extra ' ) ) ; var gulp:==:require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ;
var realityStartTime = $ ( ' # realityStartTime ' ) . val ( ) ; var realityEndTime:==:$ ( ' # realityEndTime ' ) . val ( ) ;
var INDEX_SIZE_ERR     = exceptionCode . index_size_err     = ( ( exceptionMessage [ 1 ] = ' index size error ' ) , 1 ) ; var domstring_size_err:==:exceptionCode . domstring_size_err      ( ( exceptionMessage [ 2 ]   ' domString size error ' ) , 2 ) ;
var holder = this . clone . wtTable . holder ; var hider:==:this . clone . wtTable . hider ;
var el = options . element  |  |  document ; var speed:==:options . speed  |  |  100 ;
var firebase = require ( ' firebase ' ) ; var path:==:require ( ' path ' ) ;
var TOTAL_STACK = Module [ ' TOTAL_STACK ' ]  |  |  131072 ; var TOTAL_MEMORY:==:Module [ ' TOTAL_MEMORY ' ]  |  |  4194304 ;
var body = attObj . body ; var type:==:attObj . content_type ;
var w = World_step_step_w ; var wq:==:World_step_step_wq ;
var position = this . $ container . position ( ) ; var offset:==:this . $ container . offset ( ) ;
var http   = require ( ' http ' ) ; var connect:==:require ( ' connect ' ) ;
var col = grid . columns [ 1 ] ; var row:==:grid . rows [ 0 ] ;
var instanceGeometries = data . instanceGeometries ; var instanceNodes:==:data . instanceNodes ;
var prevent = require ( ' prevent ' ) ; var querystring:==:require ( ' querystring ' ) ;
var mode = prepSettings . mode ; var el:==:prepSettings . el ;
var programTransformer = traceur . codegeneration . programTransformer ; var treeWriter:==:traceur . outputgeneration . treeWriter ;
var hour = parseInt ( $ ( ' # new - alarm - hour ' ) . val ( ) ) ; var minute:==:parseInt ( $ ( ' # new - alarm - minute ' ) . val ( ) ) ;
var defined = require ( ' defined ' ) ; var has:==:require ( ' has ' ) ;
var dataPoints = this . mapData ? this . mapData . dataPoints : [ ] ; var hasSize:==:this . mapData . hasSize ;
var subscribable = new ko . subscribable ( ) . extend ( rateLimit : 500 ) ; var notifySpy:==:jasmine . createSpy ( ' notifySpy ' ) ;
var inherits = require ( ' util ' ) . inherits ; var debug:==:require ( ' debug ' ) ( ' http - proxy - agent ' ) ;
var Script = Struct ( ' Script ' ) ; var sourceErrorHandler:==:struct ( ' sourceErrorHandler ' ) ;
var style = this . _ div . style ; var camelize:==:Crafty . domHelper . camelize ;
var opt = this . ne . options ; var buttons:==:opt . buttons ;
var documentFragment = scope . wrappers . documentFragment ; var elementFromPoint:==:scope . elementFromPoint ;
var ax = axis = = = ' a ' ? carpet . aaxis : carpet . baxis ; var smoothing:==:ax . smoothing ;
var geoModel = finder . geoModel ; var seriesModel:==:finder . seriesModel ;
var setAccessor = traceur . syntax . trees . setAccessor ; var variableDeclarationList:==:traceur . syntax . trees . variableDeclarationList ;
var program = shader . program ; var m:==:PIXI . mat3 . clone ( strip . worldTransform ) ;
var g = this . g . toString ( 16 ) ; var b:==:this . b . toString ( 16 ) ;
var chassisBody = this . chassisBody ; var forwardws:==:updatefriction_forwardws ;
var list = that . list ; var height:==:that . options . height ;
var viewModel = options . viewModel ; var previousViewModel:==:this . previousViewModel ;
var valueSpec = options . valueSpec ; var key:==:options . key ;
var Parent = db . model ( ' Parent ' , parentSchema , ' parents ' ) ; var child:==:db . model ( ' child ' , parentSchema , ' children ' ) ;
var https = require ( ' https ' ) ; var url:==:require ( ' url ' ) ;
var show = _ props . show ; var style:==:_ props . style ;
var div = document . createElement ( ' div ' ) ; var b:==:document . createElement ( ' b ' ) ;
var ispdfFunction = coreFunction . ispdfFunction ; var pdfFunction:==:coreFunction . pdfFunction ;
var createExpressionStatement = parseTreeFactory . createExpressionStatement ; var createFinally:==:parseTreeFactory . createFinally ;
var cancellationError = promise . cancellationError ; var errorObj:==:util . errorObj ;
var scrollHeight = _ ref5 . scrollHeight ; var scrollTop:==:_ ref5 . scrollTop ;
var dow = moment . localeData ( locale ) . _ week . dow ; var weekdays:==:moment . weekdaysShort ( ) ;
var f = findType ( node . callee , scope ) . getFunctionType ( ) ; var proto:==:f & & f . getProp ( ' prototype ' ) . getType ( ) ;
var dataset = this . chart . data . datasets [ point . _ datasetIndex ] ; var index:==:point . _ index ;
var funcs = testSet [ i ] . funcs ; var receivers:==:testSet [ i ] . receivers ;
var tslint = require ( ' gulp - tslint ' ) ; var fs:==:require ( ' fs ' ) ;
var months   = this . _ months ; var data:==:this . _ data ;
var Container = getComponent ( ' container ' ) ; var editorContainer:==:getComponent ( ' editorContainer ' , true ) ;
var electron = require ( ' electron ' ) ; var spawn:==:require ( ' cross - spawn ' ) ;
var etpl = require ( ' etpl ' ) ; var argv:==:require ( ' optimist ' ) . argv ;
var bcrypt = require ( ' bcrypt - nodejs ' ) ; var crypto:==:require ( ' crypto ' ) ;
var isSelectAll = this . isSelectAll ( ) ; var expandColumnOptions:==:this . props . expandColumnOptions ;
var button = this . mapping . buttons [ evt . detail . i d ] ; var buttonMeshes:==:this . buttonMeshes ;
var operations = flush . operations ; var treeSnapshot:==:flush . treeSnapshot ;
var requestCert = this . _ requestCert ; var rejectUnauthorized:==:this . _ rejectUnauthorized ;
var testing = options . testing ; var debug:==:options . debug ;
var color = new visuals . colorHelper ( colors , properties [ ' color ' ] , defaultSettings . color ) . getColorForMeasure ( objects , ' ' ) ; var fontColor:==:new visuals . colorHelper ( colors , properties [ ' fontColor ' ] , defaultSettings . fontColor ) . getColorForMeasure ( objects , ' ' ) ;
var modelMatrix = this . modelMatrix ; var length:==:positions . length ;
var helpers = Chart . helpers ; var layout:==:Chart . layoutService ;
var promise = this . promise ; var handler:==:this . handler ;
var notify = require ( ' gulp - notify ' ) ; var autoprefixer:==:require ( ' gulp - autoprefixer ' ) ;
var domElement = ngElement . domElement ; var setter:==:reflector . setter ( dep . propSetterName ) ;
var Image = reactCanvas . image ; var text:==:reactCanvas . text ;
var sleep = require ( ' sleep ' ) ; var soynode:==:require ( ' soynode ' ) ;
var crop = this . texture . crop ; var frame:==:this . texture . frame ;
var to = constraint . to ; var attachment:==:constraint . attachment ;
var isPointLight = shadowMap . _ isPointLight ; var isSpotLight:==:shadowMap . _ isSpotLight ;
var headerRenderer = _ column$props2 . headerRenderer ; var label:==:_ column$props2 . label ;
var iob = client . plugins ( ' iob ' ) ; var cob:==:client . plugins ( ' cob ' ) ;
var once = require ( ' once ' ) ; var split2:==:require ( ' split2 ' ) ;
var find = imports . find ; var finder:==:imports . finder ;
var axisScale = powerbi . visuals . axisScale ; var valueFormatter:==:powerbi . visuals . valueFormatter ;
var levels = this . _ levels ; var hls:==:this . hls ;
var min = range . min ! = = null ? range . min . valueOf ( ) : null ; var max:==:range . max !    null ? range . max . valueOf ( ) : null ;
var createFolderButton = ( options & & options . createFolderButton ) ! = = false ; var showFilesCheckbox:==:( options & & options . showFilesCheckbox ) !    false ;
var d1 = _ addDiv ( ' d1 ' ) , d2 = _ addDiv ( ' d2 ' ) ; var c:==:_ jsPlumb . connect ( source : d1 , target : d2 , beforeDetach : function ( conn ) ) ;
var attribute = attributes [ name ] ; var array:==:attribute . array ;
var page = this . pageCache [ data . pageIndex ] ; var depFonts:==:data . depFonts ;
var offset = $ . offset ( zoom . zoomer ) ; var top:==:offset . top ;
var type = indexDef . type  |  |  ' json ' ; var name:==:indexDef . name ;
var prefix = req . query . prefix  |  |  '' ; var next:==:req . query . next  |  |  null ;
var doc = opt_doc  |  |  goog . dom . getOwnerDocument ( bot . getWindow ( ) ) ; var dom:==:goog . dom . getDomHelper ( doc ) ;
var declaration = this . transformAny ( tree . declaration ) ; var annotations:==:this . transformList ( tree . annotations ) ;
var path = require ( ' path ' ) ; var str:==:require ( ' string - to - stream ' ) ;
var n = readmpInt ( der , ' modulus ' ) ; var e:==:readmpInt ( der , ' exponent ' ) ;
var rect = layoutInfo . rect ; var boundaryGap:==:layoutInfo . boundaryGap ;
var monthNumbers = settings . monthNumbers  |  |  this . local . monthNumbers ; var monthNamesShort:==:settings . monthNamesShort  |  |  this . local . monthNamesShort ;
var index = event . detail . index ; var newValue:==:event . detail . newValue ;
var wrapIfNeeded = scope . wrapIfNeeded ; var wrappers:==:scope . wrappers ;
var minHeight = options . minHeight ; var resizeMessage:==:options . resizeMessage ;
var POSITION_INDEX = Polyline . POSITION_INDEX ; var MATERIAL_INDEX:==:Polyline . MATERIAL_INDEX ;
var outgoing = getNode ( ' outgoingServer [ @type='smtp ' ] ' , provider ) ; var oauth2Settings:==:dictifyChildNodes ( getNode ( ' oauth2Settings ' , provider ) ) ;
var cropBox = this . cropBox ; var cropped:==:this . cropped & & cropBox ;
var lon = coerce ( ' lon ' )  |  |  [ ] ; var lat:==:coerce ( ' lat ' )  |  |  [ ] ;
var Contact = Contacts . Contact ; var contactEmail:==:contacts . contactEmail ;
var tail = ' tail ' ; var name:==:' name ' ;
var redirect = encodeuriComponent ( hello . settings . redirect_uri + ' ? ' + hello . utils . param ( callback : callbackid , result : json . stringify ( force : true ) , state : '' ) ) ; var token:==:( options . authResponse  |  |  ) . access_token ;
var request = require ( ' request ' ) ; var async:==:require ( ' async ' ) ;
var top = rect . top + ( parseInt ( style . borderTopWidth )  |  |  0 ) ; var left:==:rect . left + ( parseInt ( rect . borderLeftWidth )  |  |  0 ) ;
var Badges = notificationsExtensions . badges ; var glyphValue:==:badges . glyphValue ;
var EYE_OFFSET_INDEX = Billboard . EYE_OFFSET_INDEX ; var HORIZONTAL_ORIGIN_INDEX:==:Billboard . HORIZONTAL_ORIGIN_INDEX ;
var c = this . tc = vrotate ( this . c , rot ) . add ( p ) ; var r:==:this . r ;
var name = nameList [ i ]  |  |  '' ; var i d:==:dataItem & & dataItem . i d ;
var east = cesiumMath . toDegrees ( rectangle . east ) ; var north:==:cesiumMath . toDegrees ( rectangle . north ) ;
var inheritSingle = powerbi . prototype . inheritSingle ; var valueFormatter:==:powerbi . visuals . valueFormatter ;
var x = _ point . x * component . scaleX + _ point . y * component . scale01 + component . dx ; var y:==:_ point . y * component . scaleY + _ point . x * component . scale10 + component . dy ;
var attribute = ' the attribute ' ; var value:==:' the value ' ;
var config = require ( ' config ' ) . mongodb ; var mongoose:==:require ( ' mongoose ' ) ;
var bones = this . bones ; var boneInverses:==:this . boneInverses ;
var file = target . getAttribute ( ' data - file ' ) ; var mime:==:target . getAttribute ( ' data - mime ' ) ;
var areas = this . areas = options . areas ; var tooltipOverlay:==:this . tooltipOverlay    options . tooltipOverlay ;
var tilesToRender = this . _ surface . _ tilesToRender ; var length:==:tilesToRender . length ;
var doc = this . doc ; var start:==:doc . positionToIndex ( range . start ) ;
var fs = require ( ' fs ' ) ; var execSync:==:require ( ' child_process ' ) . execSync ;
var next = tangentPlane . projectPointOntoPlane ( cartesian3 . add ( position , forward , nextScratch ) , nextScratch ) ; var prev:==:tangentPlane . projectPointOntoPlane ( cartesian3 . add ( position , backward , prevScratch ) , prevScratch ) ;
var async = require ( ' async ' ) ; var Buffer:==:require ( ' buffer ' ) . Buffer ;
var os = Npm . require ( ' os ' ) ; var path:==:Npm . require ( ' path ' ) ;
var requestAnimationFrame = $ window . requestAnimationFrame  |  |  $ window . webkitRequestAnimationFrame  |  |  $ window . mozRequestAnimationFrame ; var cancelAnimationFrame:==:$ window . cancelAnimationFrame  |  |  $ window . webkitCancelAnimationFrame  |  |  $ window . mozCancelAnimationFrame  |  |  $ window . webkitCancelRequestAnimationFrame ;
var dy3 = mxUtils . getValue ( this . style , ' dy3 ' , ' 0 ' ) ; var dx4:==:mxUtils . getValue ( this . style , ' dx4 ' , ' 0 ' ) ;
var source = mapping . source ; var consumer:==:consumers [ source ] ;
var fontFamily = opts . fontFamily  |  |  constants . hoverfont ; var fontSize:==:opts . fontSize  |  |  constants . hoverfontsize ;
var forkContext = this . forkContext ; var returned:==:context . returnedForkContext ;
var o = new operatorNode ( ' + ' , ' add ' , [ a , x ] ) ; var n:==:new functionAssignmentNode ( ' f ' , [ ' x ' ] , o ) ;
var entity = geometryUpdater . _ entity ; var polyline:==:entity . polyline ;
var rsync = require ( ' gulp - rsync ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var reactFiberTreeReflection = require ( ' reactFiberTreeReflection ' ) ; var reactGenericBatching:==:require ( ' reactGenericBatching ' ) ;
var q = require ( ' q ' ) ; var webdriver:==:require ( ' selenium - webdriver ' ) ;
var twoArgumentPooler = pooledClass . twoArgumentPooler ; var fourArgumentPooler:==:pooledClass . fourArgumentPooler ;
var push = [ ] . push ; var match:==:sinon . match ;
var fromDate = $ filter ( ' date ' ) ( vm . fromDate , dateFormat ) ; var toDate:==:$ filter ( ' date ' ) ( vm . toDate , dateFormat ) ;
var isObject = leafletHelpers . isObject ; var createLayer:==:leafletLayerHelpers . createLayer ;
var property = options . property ; var startValue:==:options . startValue ;
var d = dist ( x , y , mouseX , mouseY ) ; var c:==:color ( d ) ;
var measure = view [ view . length - 1 ] . measure ; var map:==:measure . maps ? measure . maps [ measure . maps . length - 1 ] : measure . map ;
var vertexFormat = wallGeometry . _ vertexFormat ; var granularity:==:wallGeometry . _ granularity ;
var glob = require ( ' glob ' ) ; var karma:==:require ( ' karma ' ) . server ;
var isNum = sharedUtil . isNum ; var isArray:==:sharedUtil . isArray ;
var lineNumber = stackframe . lineNumber ; var columnNumber:==:stackframe . columnNumber ;
var margin = axesLayout . margin ; var axes:==:axesLayout . axes ;
var closure = require ( ' closure - util ' ) ; var nomnom:==:require ( ' nomnom ' ) ;
var popup = config . popup  |  |  false ; var initialTab:==:config . initialTab  |  |  0 ;
var min = new Date ( range . min . valueOf ( ) - interval * 0 . 01 ) ; var max:==:new date ( range . max . valueOf ( ) + interval * 0 . 01 ) ;
var scrollable = that . options . scrollable ; var distance:==:$ . isNumeric ( scrollable . distance ) ? scrollable . distance : scrollspeed ;
var classTransformer = traceur . codegeneration . classTransformer ; var collectionTransformer:==:traceur . codegeneration . collectionTransformer ;
var lineNumber = message . stackTrace ? message . stackTrace [ 0 ] . lineNumber - 1 : message . line - 1 ; var columnNumber:==:message . stackTrace & & message . stackTrace [ 0 ] . columnNumber ? message . stackTrace [ 0 ] . columnNumber - 1 : 0 ;
var immediate = imports . immediate ; var callstack:==:imports . callstack ;
var p = stream . pos ; var e:==:end ;
var complete = imports [ ' language . complete ' ] ; var ui:==:imports . ui ;
var storage = this . storage . video ; var video:==:this . video ;
var f8Touchable = require ( ' f8Touchable ' ) ; var image:==:require ( ' image ' ) ;
var http   = require ( ' http ' ) ; var url:==:require ( ' url ' ) ;
var scrollOffset = _ ref . scrollOffset ; var scrollToAlignment:==:_ ref . scrollToAlignment ;
var error = ' Some error ' ; var successCallback:==:jasmine . createSpy ( ' successCallback ' ) ;
var models = _ _ alloyId13 . models ; var len:==:models . length ;
var alltext = rep . alltext ; var len:==:alltext . length ;
var reference = stencilTest . reference ; var mask:==:stencilTest . mask ;
var s = new Schema ( mix : type : Schema . Types . Mixed , default : ) ; var M:==:mongoose . model ( ' M1 ' , s ) ;
var node = this . _ node ; var display:==:node . _ displayManager . getDisplayRenderNode ( ) ;
var otDocument = imports . otDocument ; var members:==:imports . members ;
var pair = pairs [ p ] ; var key:==:queryStringValue ( pair , ' key ' , namespaces . kml ) ;
var link = $ link . val ( ) ; var text:==:$ text . val ( ) ;
var type = _ props2 . type ; var underlineDisabledStyle:==:_ props2 . underlineDisabledStyle ;
var minFontSize = settings . general . minFontSize * wordCloud . fontSizePercentageCoefficent ; var maxFontSize:==:settings . general . maxFontSize * wordCloud . fontSizePercentageCoefficent ;
var reactServerRenderingTransaction = require ( ' reactServerRenderingTransaction ' ) ; var reactUpdates:==:require ( ' reactUpdates ' ) ;
var s = ref . s ; var v:==:ref . v ;
var textureLoader = new three . textureLoader ( ) ; var warn:==:debug ( ' components : texture : warn ' ) ;
var create = require ( ' lodash . create ' ) ; var Date:==:global . Date ;
var keyboardFocused = _ props3 . keyboardFocused ; var linkButton:==:_ props3 . linkButton ;
var name = docSet . getByLongname ( ' person#name ' ) ; var age:==:docSet . getByLongname ( ' person#age ' ) ;
var className = _ props4 . className ; var height:==:_ props4 . height ;
var billboard = glyph . billboard ; var spareBillboards:==:labelCollection . _ spareBillboards ;
var manifestURL = layout . manifestURL ; var path:==:layout . path ;
var type = activity . source . data . type ; var name:==:activity . source . name ;
var wrapS = defaultValue ( options . wraps , textureWrap . clamp_to_edge ) ; var wrapt:==:defaultValue ( options . wrapt , textureWrap . clamp_to_edge ) ;
var log = console . log . bind ( console ) ; var error:==:console . error . bind ( console ) ;
var expression = this . visit ( node . expression ) ; var args:==:this . visitMany ( node . args ) ;
var errorColor = _ muiTheme$textField . errorColor ; var focusColor:==:_ muiTheme$textField . focusColor ;
var tiltX = defaultValue ( options . tiltx , 0 ) ; var tilty:==:defaultValue ( options . tilty , 0 ) ;
var frameState = scene . frameState ; var context:==:scene . _ context ;
var suffix = new Blockly . fieldLabel ( ' suffix ' ) ; var field:==:new blockly . fieldLabel ( ' field ' ) ;
var data = response . data  |  |  ; var files:==:data . files  |  |  ;
var logger = common . logger ; var $ q:==:common . $ q ;
var colContainer = containerCtrl . colContainer ; var grid:==:uiGridCtrl . grid ;
var number = ref . number ; var trim:==:ref . trim ;
var center = this . getMapObjectLonLatFromolLonLat ( evt . center ) ; var zoom:==:this . getMapObjectZoomFromolZoom ( evt . zoom ) ;
var test = imports . test ; var proc:==:imports . proc ;
var className = docElement . className ; var classPrefix:==:modernizr . _ config . classPrefix  |  |  '' ;
var util = require ( ' util ' ) ; var should:==:require ( ' should ' ) ;
var overflowX = _ style . overflowX ; var overflowY:==:_ style . overflowY ;
var constantNode = math . expression . node . constantNode ; var symbolNode:==:math . expression . node . symbolNode ;
var View = reactNative ; var testModule:==:reactNative . nativeModules ;
var columnCount = props . columnCount ; var scrollToAlignment:==:props . scrollToAlignment ;
var touches = event . touches & & event . touches . length ? event . touches : [ event ] ; var e:==:touches [ 0 ] . originalEvent  |  |  touches [ 0 ] ;
var privateKey = fs . readFileSync ( path . resolve ( config . secure . privateKey ) , ' utf8 ' ) ; var certificate:==:fs . readFileSync ( path . resolve ( config . secure . certificate ) , ' utf8 ' ) ;
var data = this . _ data [ i ] ; var r:==:Math . min ( right , data [ 0 ] . length ) ;
var uploadImgShowBase64 = config . uploadImgShowBase64 ; var uploadImgParams:==:config . uploadImgParams  |  |  ;
var scope = cb . scope ; var args:==:cb . args ;
var group = groups [ g ] ; var length:==:group . layoutVertexArray . length ;
var colors = this . getOption ( ' colors ' ) ; var visibility:==:this . visibility ( ) ;
var compress = require ( ' compression ' ) ; var cors:==:require ( ' cors ' ) ;
var url = require ( ' url ' ) ; var extend:==:require ( ' util ' ) . _ extend ;
var index = this . index++ ; var ish:==:this . ish ;
var timestamps = this . timestamps ; var idToNode:==:this . _ idToNode ;
var params = this . params ; var bones:==:this . mesh . skeleton . bones ;
var priorities = this . priorities _ ; var element:==:elements [ index ] ;
var vertexFormat = cylinderGeometry . _ vertexFormat ; var slices:==:cylinderGeometry . _ slices ;
var file = this . file ; var body:==:this . body ;
var connect = require ( ' gulp - connect ' ) ; var del:==:require ( ' del ' ) ;
var offset = target . offset ( ) ; var top:==:offset . top + pos . offsetY ;
var bind = declBind [ bindIndex ] ; var dest:==:bind . destination ;
var channel = channels [ i ] ; var target:==:channel . target ;
var group = _ ref2 . group ; var _ refreshed:==:_ ref2 . _ refreshed ;
var Thing = db . model ( ' Thing4104 ' , thingSchema ) ; var person:==:db . model ( ' person4104 ' , personSchema ) ;
var index = callbackData . index ; var indexDisp:==:callbackData . indexDisp ;
var t = this . top ; var b:==:this . bottom ;
var createParameterList = parseTreeFactory . createParameterList ; var createParenExpression:==:parseTreeFactory . createParenExpression ;
var setFirstName = docSet . getByLongname ( ' setFirstName ' ) [ 0 ] ; var setLastName:==:docSet . getByLongname ( ' setLastName ' ) [ 0 ] ;
var c = ' c ' ; var d:==:rejectBuiltInSoon ( ' rejected - d ' , 20 ) ;
var cwd = this . _ debuggerClient . target . cwd ; var filename:==:this . _ debuggerClient . target . filename ;
var tree = imports . tree ; var save:==:imports . save ;
var i d = this . i d ; var manager:==:this . manager ;
var editor   = mouseHandler . editor ; var headingLayer:==:editor . renderer . $ headingLayer ;
var pointerId = defaultValue ( options . pointerId , 1 ) ; var pointerType:==:defaultValue ( options . pointerType , 0 ) ;
var utils = require ( ' keystone - utils ' ) ; var util:==:require ( ' util ' ) ;
var o = this . options ; var portlet:==:$ ( event . target ) . parents ( ' . ui - portlet ' ) ;
var iframe = document . i d ( params . iframe ) ; var onload:==:props . onload  |  |  $ empty ;
var integerDivideByZero = caml_exceptions . create ( ' numeric_error . integerDivideByZero ' ) ; var invalidConversionToInteger:==:caml_exceptions . create ( ' numeric_error . invalidConversionToInteger ' ) ;
var maxFontSize = maxFontSize  |  |  12 ; var font:==:font  |  |  ' helvetica ' ;
var tokenType = traceur . syntax . tokenType ; var parseTreeVisitor:==:traceur . syntax . parseTreeVisitor ;
var visualMapModel = this . visualMapModel ; var option:==:visualMapModel . option ;
var async = require ( ' async ' ) ; var flaverr:==:require ( ' flaverr ' ) ;
var stop = params . hasOwnProperty ( ' stop ' ) ? params . stop : -1 ; var weights:==:params . weights  |  |  [ ] ;
var createCommaExpression = parseTreeFactory . createCommaExpression ; var createDefineProperty:==:parseTreeFactory . createDefineProperty ;
var startContainer = rng . startContainer , endContainer = rng . endContainer ; var startOffset:==:rng . startOffset , endOffset    rng . endOffset , root    self . dom . getRoot ( ) ;
var immediate = imports . immediate ; var tabManager:==:imports . tabManager ;
var srcPath = module . srcPath ; var destPath:==:module . destPath ;
var objectMap = traceur . util . objectMap ; var parseTreeValidator:==:traceur . syntax . parseTreeValidator ;
var Image = require ( ' Image ' ) ; var React:==:require ( ' React ' ) ;
var denodeify = _ _ dependency3 _ _ . denodeify ; var all:==:_ _ dependency4 _ _ . all ;
var skipHiddenDays = t . skipHiddenDays ; var getCellsPerWeek:==:t . getCellsPerWeek ;
var memoryWriter = struct ( ' memoryWriter ' ) ; var module:==:struct ( ' module ' ) ;
var req = think . extend ( , _ http . req ) ; var res:==:think . extend ( , _ http . res ) ;
var parseTreeVisitor = traceur . syntax . parseTreeVisitor ; var tokenType:==:traceur . syntax . tokenType ;
var nodes = this . _ nodes ; var cells:==:this . _ cells ;
var networkURL = this . _ networkMapping . networkurl ( uiSourceCode ) ; var cssurLs:==:this . _ cssurLsForsassurl [ networkurl ] ;
var f = Q . fulfill ( 5 ) ; var r:==:Q . reject ( new Error ( ' aaargh ' ) ) ;
var padding = options . padding  |  |  defaultPadding ; var passphrase:==:options . passphrase  |  |  null ;
var node = this . _ node ; var texture:==:node . texture ;
var s = hsl [ 1 ] ; var l:==:hsl [ 2 ] ;
var chalk = require ( ' chalk ' ) ; var replace:==:require ( ' replace ' ) ;
var reactMarkupChecksum = require ( ' reactMarkupChecksum ' ) ; var reactReconciler:==:require ( ' reactReconciler ' ) ;
var error = _ this . error ; var doc:==:document ;
var transform = require ( ' vinyl - transform ' ) ; var path:==:require ( ' path ' ) ;
var eventproxy = require ( ' eventproxy ' ) ; var superagent:==:require ( ' superagent ' ) ;
var multiplier = candidate . multiplier ; var corrections:==:candidate . corrections ;
var lineHeight = config . lineHeight ; var columnWidth:==:config . columnWidth ;
var skinnedNodes = model . _ runtime . skinnedNodes ; var length:==:skinnedNodes . length ;
var rightMarker = document . createTextNode ( rightMarkerChar ) ; var start:==:dom . cursorFromBoundaryPoint ( range . startContainer , range . startOffset ) ;
var rowCount = _ ref3 . rowCount ; var startIndex:==:_ ref3 . startIndex ;
var editor = this . editor ; var config:==:editor . config  |  |  ;
var debug = require ( ' debug ' ) ( ' analytics . js : cookie ' ) ; var defaults:==:require ( ' defaults ' ) ;
var doc = wrap ( document ) ; var body:==:doc . body ;
var param = temp_list [ i ] . param ; var func_name:==:temp_list [ i ] . func_name ;
var callbackQueue = require ( ' callbackQueue ' ) ; var pooledClass:==:require ( ' pooledClass ' ) ;
var userid = args . userid ; var connection:==:args . connection ;
var rootDocument = scope . rootDocument ; var loader:==:scope . loader ;
var COVER_FORMALS = ' COVER_FORMALS ' ; var COVER_INITIALIZED_NAME:==:' COVER_INITIALIZED_NAME ' ;
var e = ( Math . floor ( k [ i ] ) * 4 ) + ( Math . floor ( k [ i + 1 ] ) * qrcode . width * 4 ) ; var f:==:b [ Math . floor ( k [ i ] ) + qrcode . width * Math . floor ( k [ i + 1 ] ) ] ;
var assert = require ( ' assert - plus ' ) ; var format:==:require ( ' util ' ) . format ;
var quadraticAt = curveTool . quadraticAt ; var cubicAt:==:curveTool . cubicAt ;
var rowHeight = tree . provider . rowHeight ; var renderer:==:tree . renderer ;
var filename = opts . filename ; var template:==:opts . template ;
var name = node . name ; var parent:==:node . parent ;
var stencilTest = renderState . stencilTest ; var enabled:==:stencilTest . enabled ;
var debug = utils . debug ; var error:==:debug ( ' components : texture : error ' ) ;
var p = _ dereq _ ( ' path ' ) ; var dirname:==:p . dirname ;
var head = html . appendChild ( doc . createElementns ( ns , ' head ' ) ) ; var title:==:doc . createElementns ( ns , ' title ' ) ;
var assert = require ( ' assert ' ) ; var vm:==:require ( ' vm ' ) ;
var util = imports . util ; var undoManager:==:imports . undoManager ;
var reactNativeViewAttributes = require ( ' reactNativeViewAttributes ' ) ; var createReactNativeComponentClass:==:require ( ' createReactNativeComponentClass ' ) ;
var x = topo . data [ ' switchs ' ] [ i d ] . x ; var y:==:topo . data [ ' switchs ' ] [ i d ] . y ;
var g = new Dygraph ( graph , data , opts ) ; var o:==:new dygraphOptions ( g ) ;
var name = req . params . name ; var user:==:userRepos [ name ] ;
var store = new datastore ( params ) ; var d:==:new doh . Deferred ( ) ;
var x = d3 . event . x ; var y:==:d3 . event . y ;
var uid = data . uid  |  |  0 ; var paginate:==:data . hasOwnProperty ( ' paginate ' ) ? data . paginate : true ;
var functionDeclaration = traceur . syntax . trees . functionDeclaration ; var literalExpression:==:traceur . syntax . trees . literalExpression ;
var color = options . color ; var transform:==:options . transform ;
var ascending1 = comparator . ascending1 ? 1 : -1 ; var ascending2:==:comparator . ascending2 ? 1 : -1 ;
var context = this . _ context ; var vertexArray:==:defined ( computeCommand . vertexArray ) ? computeCommand . vertexArray : context . getViewportQuadVertexArray ( ) ;
var when s = gxTrackObject . when s ; var s:==:ol . xml . getAllTextContent ( node , false ) ;
var inp = this . inp ; var shadowInp:==:this . shadowInp ;
var mouseEvent = registerGenericEvent ( ' mouseEvent ' , uiEvent , mouseEventProto ) ; var focusEvent:==:registerGenericEvent ( ' focusEvent ' , uiEvent , focusEventProto ) ;
var promise = $ modal . $ promise = $ bsCompiler . compile ( options ) ; var scope:==:$ modal . $ scope    options . scope & & options . scope . $ new ( )  |  |  $ rootScope . $ new ( ) ;
var perm = $ ( this ) . attr ( ' perm ' ) ; var noteOrNotebookId:==:$ ( this ) . attr ( ' noteOrNotebookId ' ) ;
var heightOffset = structure . heightOffset ; var heightScale:==:structure . heightScale ;
var dispatch = _ props . dispatch ; var todos:==:_ props . todos ;
var png = ! ! argv . png ; var svg:==:! ! argv . svg ;
var semver = require ( ' semver ' ) ; var os:==:require ( ' os ' ) ;
var UNSUPPORTED_FEATURES = sharedUtil . unsupported_features ; var missingDataException:==:sharedUtil . missingDataException ;
var models = _ _ alloyId17 . models ; var len:==:models . length ;
var objs = this . objs ; var commonObjs:==:this . commonObjs ;
var selection = selections [ i ] ; var line:==:codeMirror . getLine ( selection . head . line - 1 ) ;
var categoryTypes = visuals . mapUtil . categoryTypes ; var settings:==:visuals . mapUtil . settings ;
var formalParameterList = traceur . syntax . trees . formalParameterList ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var op = $ . extend ( data : , dialogId : ' ' , callback : null , options ) ; var dialog:==:( op . dialogId & & $ ( ' body ' ) . data ( op . dialogId ) )  |  |  this . _ current ;
var i = [ ] , ii = 0 ; var s:==:[ ] , si    0 ;
var log = require ( dirs . core + ' log ' ) ; var adapter:==:config [ config . adapter ] ;
var map = mapAndFlag . map ; var flag:==:mapAndFlag . flag ;
var SCROLL_DIRECTION_BACKWARD = exports . SCROLL_DIRECTION_BACKWARD = -1 ; var SCROLL_DIRECTION_FIXED:==:exports . SCROLL_DIRECTION_FIXED    0 ;
var s = new Schema ( mix : type : Schema . Types . Mixed , default : , shared : true ) ; var M:==:mongoose . model ( ' M2 ' , s ) ;
var last_field = this . last_field ; var last_search:==:this . last_search ;
var config = options . config . email ; var mailer:==:nodemailer . createTransport ( config . method , config . transport ) ;
var path = require ( ' path ' ) ; var moduleResolve:==:require ( ' amd - name - resolver ' ) . moduleResolve ;
var stream = parser . lexer . stream ; var tableState:==:this . tableState ;
var metadata = value . _ _ metadata  |  |  ; var deferred:==:value . _ _ deferred  |  |  ;
var fixedLen = returnValue . fixedLen ; var splStart:==:returnValue . splStart ;
var w = shape . width * 2 ; var h:==:shape . height * 2 ;
var tween = this . tweens [ i ] ; var d:==:tween . duration ;
var mongoose = require ( ' mongoose ' ) ; var config:==:require ( ' config ' ) ;
var use = this . _ use ; var onUrlChanged:==:blocks . bind ( this . _ onUrlChanged , this ) ;
var e = this . element ; var value:==:e . value ;
var writeFile = bluebird . promisify ( fs . writeFile ) ; var beautify:==:require ( ' js - beautify ' ) . js_beautify ;
var shell = require ( ' gulp - shell ' ) ; var webpack:==:require ( ' webpack ' ) ;
var min = Math . floor ( doh . min ( dataArray ) ) ; var max:==:math . ceil ( doh . max ( dataArray ) ) ;
var positiveValues = valuesPerStack [ key ] . positiveValues ; var negativeValues:==:valuesPerStack [ key ] . negativeValues ;
var protos = ! ! pomelo . data . protos?pomelo . data . protos . server : ; var abbrs:==:pomelo . data . abbrs ;
var pre = doc . getElementsByTagName ( ' pre ' ) [ 0 ] ; var b:==:doc . getElementsByTagName ( ' body ' ) [ 0 ] ;
var Db = mongo . Db ; var Server:==:mongo . Server ;
var canvas = ctx . canvas ; var width:==:canvas . width ;
var interpret = require ( ' interpret ' ) ; var v8flags:==:require ( ' v8flags ' ) ;
var a = + + Ext . data . scriptTagProxy . trans_id ; var m:==:i d : a , action : e , cb : ' stcCallback ' + a , scriptId : ' stcScript ' + a , params : d , arg : l , url : b , callback : j , scope : k , reader : h ;
var errorText = _ props2 . errorText ; var floatingLabelFixed:==:_ props2 . floatingLabelFixed ;
var METHOD_SIGNATURE = ' METHOD_SIGNATURE ' ; var MODULE:==:' MODULE ' ;
var pagesFrom = pagesFromInput . value ; var pagesTo:==:pagesToInput . value ;
var expandRangeToStartOfLine = require ( ' expandRangeToStartOfLine ' ) ; var getDraftEditorSelectionWithNodes:==:require ( ' getDraftEditorSelectionWithNodes ' ) ;
var long = ppo . long . result ; var short:==:ppo . short . result ;
var commaExpression = traceur . syntax . trees . commaExpression ; var conditionalExpression:==:traceur . syntax . trees . conditionalExpression ;
var open = require ( ' open ' ) ; var browserify:==:require ( ' browserify ' ) ;
var preload = options . preload  |  |  noop ; var authorized:==:options . authorized  |  |  noop ;
var blurKernel = _ blurKernel ; var bkHalf:==:_ bkHalf ;
var transaction = db . transaction ( DBOS_BOOKMARKS ) ; var objectStore:==:transaction . objectStore ( dbos_bookmarks ) ;
var err = errsCopy . pop ( ) ; var path:==:pathsCopy . pop ( ) ;
var element = this . element , o = this . options ; var tabs:==:element . children ( ' . tabs ' ) . find ( ' li ' ) . children ( ' a ' ) ;
var factor = value . factor  |  0 ; var units:==:value . units  |  0 ;
var lineCap = state . lineCap ; var lineDash:==:state . lineDash ;
var anchor = document . getElementById ( ' anchor1 ' ) ; var popup:==:document . getElementById ( ' popup3 ' ) ;
var applyFuncToEach = graphDataWindow . applyFuncToEach . createDelegate ( graphDataWindow ) ; var applyFuncToEachWithInput:==:graphDataWindow . applyFuncToEachWithInput . createDelegate ( graphDataWindow ) ;
var name = skin . name  |  |  ' skin ' + skinNode . skin ; var babylonSkeleton:==:skin . babylonSkeleton ;
var readUint32 = sharedUtil . readUint32 ; var shadow:==:sharedUtil . shadow ;
var t = new pc . Vec3 ( tx , ty , tz ) ; var r:==:new pc . Quat ( 0 , 0 , Math . sqrt ( 0 . 5 ) , Math . sqrt ( 0 . 5 ) ) ;
var plug = require ( ' gulp - load - plugins ' ) ( ) ; var reload:==:browserSync . reload ;
var run = test . runId ( ) ; var coll:==:new mongo . collection ( ' livedata_invalidation_collection_'+run , collectionOptions ) ;
var reactUpdates = require ( ' reactUpdates ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var fs = require ( ' fs ' ) ; var expect:==:require ( ' expect . js ' ) ;
var annotation = evt . annotation ; var title:==:evt . title ;
var createUndefinedExpression = parseTreeFactory . createUndefinedExpression ; var createVariableStatement:==:parseTreeFactory . createVariableStatement ;
var panels = imports . panels ; var menus:==:imports . menus ;
var attributes = geometry . attributes ; var indices:==:geometry . indices ;
var IMPORT_SPECIFIER_SET = ' IMPORT_SPECIFIER_SET ' ; var IMPORTED_BINDING:==:' IMPORTED_BINDING ' ;
var x = this . data [ fold . test_ix [ q ] ] ; var l:==:this . labels [ fold . test_ix [ q ] ] ;
var x_color = chroma . scale ( opts . x_colors ) . mode ( opts . color_space ) ; var y_color:==:chroma . scale ( opts . y_colors ) . mode ( opts . color_space ) ;
var parseTreeFactory = traceur . codegeneration . parseTreeFactory ; var variableBinder:==:traceur . semantics . variableBinder ;
var details = msg . details ; var allFrames:==:details . allFrames  |  |  false ;
var teal200 = exports . teal200 = ' # 80cbc4 ' ; var teal300:==:exports . teal300    ' # 4db6ac ' ;
var event = segment . event ; var element:==:elements . eq ( i ) ;
var fn1 = jasmine . createSpy ( ' fn1 ' ) . and . returnValue ( ' foo ' ) ; var fn2:==:jasmine . createSpy ( ' fn2 ' ) . and . returnValue ( ' bar ' ) ;
var achievementsService = _ fxosAchievementsServiceDistAchievementsService [ ' default ' ] ; var broadcastService:==:_ appJsServicesBroadcastService [ ' default ' ] ;
var commonmark = self . options . commonmark ; var pedantic:==:self . options . pedantic ;
var promise = $ tooltip . $ promise = $ bsCompiler . compile ( options ) ; var scope:==:$ tooltip . $ scope    options . scope & & options . scope . $ new ( )  |  |  $ rootScope . $ new ( ) ;
var gulp = require ( ' gulp ' ) ; var shell:==:require ( ' gulp - shell ' ) ;
var shift = ev . shiftKey ; var ctrl:==:ev . ctrlKey ;
var fs = require ( ' fs ' ) ; var assert:==:require ( ' chai ' ) . assert ;
var state = e . state ; var stateName:==:state . stateName ;
var options = self . options ; var $ container:==:self . $ container ;
var isWrapper = scope . isWrapper ; var mixin:==:scope . mixin ;
var eq = semver . eq ; var gt:==:semver . gt ;
var flags   = opts . cli . flags ; var output:==:flags . output ? path . resolve ( flags . output ) : path . join ( process . cwd ( ) , input ) ;
var scene = this . scene ; var entity:==:this . entity ;
var y = this . position . y ; var z:==:this . position . z ;
var stack = [ ] , stackOffset = -1 ; var editable:==:$ editable [ 0 ] ;
var totalColumns = this . wot . getSetting ( ' totalColumns ' ) ; var trimmingContainer:==:this . instance . wtOverlays . leftOverlay . trimmingContainer ;
var editors = imports . editors ; var Editor:==:imports . Editor ;
var File = $ window . File ; var formData:==:$ window . formData ;
var observable = mobx . observable ; var transaction:==:mobx . transaction ;
var top = this . rectPxBounds . top ; var left:==:this . rectPxBounds . left ;
var altKey = evt . altKey ; var shiftKey:==:evt . shiftKey ;
var dataType = el . dataType ; var data:==:dataModel . getData ( ) ;
var n = this . colresize . n ; var nw:==:this . colresize . nw ;
var cm    = this . cm ; var settings:==:_ this . settings ;
var label = props . label ; var value:==:formatValue ( revenue  |  |  props . value ) ;
var footer   = require ( ' gulp - footer ' ) ; var header:==:require ( ' gulp - header ' ) ;
var alpha = this . alpha ? this . alpha . buildCode ( builder , ' fv1 ' ) : undefined ; var normal:==:this . normal ? this . normal . buildCode ( builder , ' v3 ' ) : undefined ;
var dataViewObjects = powerbi . dataViewObjects ; var objectEnumerationBuilder:==:powerbi . visuals . objectEnumerationBuilder ;
var hwTimestamp = defaultValue ( options . hwTimestamp , 0 ) ; var isPrimary:==:defaultValue ( options . isPrimary , 0 ) ;
var actualSize = this . actualSize . multiplyByFloats ( isCanvas ? 1 : this . scalex , isCanvas ? 1 : this . scaley ) ; var w:==:hasLayout ? ( this . layoutAreaPos . x + this . layoutArea . width ) : ( marginh + actualSize . width ) ;
var viewPropTypes = require ( ' viewPropTypes ' ) ; var viewStylePropTypes:==:require ( ' viewStylePropTypes ' ) ;
var syntheticDragEvent = require ( ' syntheticDragEvent ' ) ; var syntheticTouchEvent:==:require ( ' syntheticTouchEvent ' ) ;
var b = model . bones [ i ] ; var grant:==:b . grant ;
var test = jasmine . createSpy ( ' test ' ) ; var test1:==:jasmine . createSpy ( ' test1 ' ) ;
var dataKey = _ column$props . dataKey ; var cellData:==:cellDataGetter ( columnData : columnData , dataKey : dataKey , rowData : rowData ) ;
var context = vertexArray . _ context ; var hasInstancedAttributes:==:vertexArray . _ hasInstancedAttributes ;
var mouseup = Rx . Observable . fromEvent ( dragTarget , ' mouseup ' ) ; var mousemove:==:rx . observable . fromEvent ( document , ' mousemove ' ) ;
var defaults = require ( ' defaults ' ) ; var store:==:require ( ' store . js ' ) ;
var categoryValue = categoryValues [ categoryIndex ] ; var value:==:visuals . axisHelper . normalizeNonFiniteNumber ( timeStampColumn . values [ categoryIndex ] ) ;
var reader = this . reader ; var dataViewCategorical:==:this . dataViewCategorical ;
var test = qUnit . test ; var matrix2d:==:crafty . math . matrix2d ;
var Column = require ( ' fixedDataTableColumnNew . react ' ) ; var columnGroup:==:require ( ' fixedDataTableColumnGroupNew . react ' ) ;
var moment = require ( ' moment ' ) ; var assign:==:require ( ' object - assign ' ) ;
var React = require ( ' React ' ) ; var Navigator:==:require ( ' Navigator ' ) ;
var parsejson = _ dereq _ ( ' parsejson ' ) ; var parseqs:==:_ dereq _ ( ' parseqs ' ) ;
var barGap = seriesModel . get ( ' barGap ' ) ; var barCategoryGap:==:seriesModel . get ( ' barCategoryGap ' ) ;
var vm = require ( ' vm ' ) ; var fs:==:require ( ' fs ' ) ;
var PRIMARY = ' PRIMARY ' ; var SECONDARY:==:' SECONDARY ' ;
var i = this . i ; var j:==:this . j ;
var . . . a = a : 1 ; var . . . x:==:a . b ;
var streamify = require ( ' gulp - streamify ' ) ; var uglify:==:require ( ' gulp - uglify ' ) ;
var emitX = this . emitX ; var emitY:==:this . emitY ;
var left = parseInt ( element . style . left )  |  0 ; var top:==:parseInt ( element . style . top )  |  0 ;
var insert = require ( ' gulp - insert ' ) ; var path:==:require ( ' path ' ) ;
var scene = object . _ scene ; var camera:==:scene . camera ;
var key = validator . trim ( req . query . key ) ; var name:==:validator . trim ( req . query . name ) ;
var dataSource = kendo . data . dataSource ; var observableObject:==:kendo . data . observableObject ;
var g = e . dygraph ; var points:==:g . layout _ . annotated_points ;
var width = defaultValue ( options . width , gl . drawingBufferWidth ) ; var height:==:defaultValue ( options . height , gl . drawingBufferHeight ) ;
var isArray = zrUtil . isArray ; var each:==:zrUtil . each ;
var lastPhraseLength = queueData . lastPhraseLength ; var sentences:==:queueData . sentences ;
var offsetCenter = detailModel . get ( ' offsetCenter ' ) ; var x:==:posInfo . cx + parsePercent ( offsetCenter [ 0 ] , posInfo . r ) ;
var source = node . source ? node . source . value : null ; var exports:==:file . metadata . modules . exports ;
var currentRoute = this . _ currentRoute ; var currentTransition:==:this . _ currentTransition ;
var getGlyphsUnicode = coreGlyphList . getGlyphsUnicode ; var getDingbatsGlyphsUnicode:==:coreGlyphList . getDingbatsGlyphsUnicode ;
var touchableBounce = require ( ' touchableBounce ' ) ; var touchableHighlight:==:require ( ' touchableHighlight ' ) ;
var cancel = options . cancel ; var showDontAsk:==:options . showDontAsk ;
var stageWidth = this . config . stageWidth ! = = undefined ? this . config . stageWidth : ( window ? window . innerWidth : 1024 ) ; var stageHeight:==:this . config . stageHeight !    undefined ? this . config . stageHeight : ( window ? window . innerHeight : 1024 ) ;
var node = path . node ; var open:==:node . openingElement ;
var info = fis . util . pathinfo ( file ) ; var basename:==:fis . project . getCachePath ( dir , info . basename ) ;
var debug = require ( ' gulp - debug ' ) ; var notify:==:require ( ' gulp - notify ' ) ;
var importSpecifier = traceur . syntax . trees . importSpecifier ; var importSpecifierSet:==:traceur . syntax . trees . importSpecifierSet ;
var mime = require ( ' send ' ) . mime ; var basename:==:require ( ' path ' ) . basename ;
var offset = uvScaleMap . offset ; var repeat:==:uvScaleMap . repeat ;
var zoom = this . mozCamera . zoom ; var maxHardwareZoom:==:this . get ( ' maxHardwareZoom ' ) ;
var auth = imports . auth ; var alert:==:imports [ ' dialog . alert ' ] . show ;
var mode = l . pm2_env . exec_mode . split ( ' _ mode ' ) [ 0 ] ; var status:==:l . pm2_env . status ;
var initialize = options . initialize ; var afterImplement:==:options . afterImplement  |  |  function ( ) ;
var x = me . getX ( ) + origin . x ; var y:==:me . getY ( ) + origin . y ;
var offset = $ choosedSection . offset ( ) ; var left:==:offset . left - $ grid . children ( ' . container ' ) . offset ( ) . left - 10 ;
var watcher = imports . watcher ; var save:==:imports . save ;
var len = + conf . len ; var n:==:+ conf . n ;
var wtTable = wot . wtTable ; var wtViewport:==:wot . wtViewport ;
var COOKIES_ENABLED = process . env . COOKIES_ENABLED  |  |  false ; var PAGE_DONE_CHECK_TIMEOUT:==:process . env . PAGE_DONE_CHECK_TIMEOUT  |  |  300 ;
var boundingRectangle = options . boundingRectangle ; var tangentPlane:==:options . tangentPlane ;
var rimraf = require ( ' rimraf ' ) ; var merge:==:require ( ' merge - stream ' ) ;
var lat = self . position . coords . latitude ; var lon:==:self . position . coords . longitude ;
var prevSegment = prevSegments [ i ] ; var nextSegment:==:nextSegments [ i ] ;
var wrap = scope . wrap ; var getTreeScope:==:scope . getTreeScope ;
var arrayToObject = util . arrayToObject ; var stripHtml:==:util . stripHtml ;
var hasFill = style . hasFill ( ) ; var fill:==:style . fill ;
var layout = imports . layout ; var Tree:==:imports . Tree ;
var constantinople = require ( ' constantinople ' ) ; var runtime:==:require ( ' pug - runtime ' ) ;
var    LIT = 26 ; var CHECK:==:27 ;
var ptr = g . _ ptr ; var size:==:g . _ size ;
var new_source = new_source . replace ( ' 25 ' , ' 26 ' ) ; var new_source:==:new_source . replace ( ' Help ' , ' Hello ' ) ;
var currentConfig = config . build . currentConfig ; var buildConfiguration:==:config . buildConfigurations [ currentConfig ] ;
var randi = global . randi ; var Net:==:global . Net ;
var special = _ getFormattedItemReference ( ' items . special ' , _ . keys ( content . special ) , ' numeric quantity ' ) ; var gear:==:_ getFormattedItemReference ( ' items . gear . owned ' , _ . keys ( content . gear . flat ) , ' boolean ' ) ;
var isFullScreen = appWindow & & appWindow . isFullScreen ( ) ; var container:==:this . elements . containerElement ;
var d = worldTransform . d ; var tx:==:worldTransform . tx ;
var snapX   = opts . snapX ; var snapY:==:opts . snapY ;
var el = this . el . empty ( ) ; var w:==:el . width ( ) , h    el . height ( ) ;
var property = _ ref . property ; var value:==:_ ref . value ;
var callbacks = dg . _ callbacks ; var k:==:callbacks . length ;
var iso = require ( ' to - iso - string ' ) ; var some:==:require ( ' some ' ) ;
var rows = this . _ rows ; var columns:==:this . _ columns ;
var parameter = this . transformAny ( tree . parameter ) ; var body:==:this . transformSuperInBlock _ ( tree , tree . body ) ;
var snippetId = this . _ snippetIdForuiSourceCode . get ( uiSourceCode )  |  |  ' ' ; var snippet:==:this . _ snippetStorage . snippetForId ( snippetId ) ;
var extent = frameState . extent ; var center:==:viewState . center ;
var run = Ember . run ; var all:==:Ember . RSVP . all ;
var Menu = nw . Menu ; var menuItem:==:nw . menuItem ;
var eye = SIMD . float32x4 ( eyeVec . x , eyeVec . y , eyeVec . z , 0 . 0 ) ; var up:==:simd . float32x4 ( upVec . x , upVec . y , upVec . z , 0 . 0 ) ;
var textToSpeak = args . textToSpeak ; var targetLanguage:==:args . targetLanguage ;
var center = SIMD . float32x4 ( centerVec . x , centerVec . y , centerVec . z , 0 . 0 ) ; var eye:==:simd . float32x4 ( eyeVec . x , eyeVec . y , eyeVec . z , 0 . 0 ) ;
var warn = sharedUtil . warn ; var pdfjs:==:sharedGlobal . pdfjs ;
var coordinator = scope . _ coordinator ; var store:==:scope . _ store ;
var require = $ . fn . select2 . amd . require ; var define:==:$ . fn . select2 . amd . define ;
var items = this . _ items ; var source:==:this . source ;
var jsonminify = require ( ' jsonminify ' ) ; var log4js:==:require ( ' log4js ' ) ;
var key = parseKeys ( private_key ) ; var k:==:key . modulus . byteLength ( ) ;
var impulse = this . impulse ; var drift:==:this . options . drift ;
var a = SIMD . Float32x4 ( 16 . 0 , 9 . 0 , 4 . 0 , 1 . 0 ) ; var c:==:SIMD . Float32x4 . replaceLane ( a , true , 20 . 0 ) ;
var s = prev . segmentEnd ; var e:==:typeScript . max ( s + 512 , end ) ;
var prevChild = prevChildren & & prevChildren [ name ] ; var nextChild:==:nextChildren [ name ] ;
var bodyA = c . bodyA ; var bodyB:==:c . bodyB ;
var gutter = this . editor . renderer . $ gutterLayer ; var index:==:parseInt ( target . getAttribute ( ' index ' ) , 10 ) ;
var superagent = require ( ' superagent ' ) ; var cheerio:==:require ( ' cheerio ' ) ;
var viz = this . viz ; var options:==:$ . merge ( this . options , viz . controller , opt ) , root    viz . root ;
var classDeclaration = traceur . syntax . trees . classDeclaration ; var forInStatement:==:traceur . syntax . trees . forInStatement ;
var el = this . el ; var intersectedEl:==:this . intersectedEl ;
var start = panel . nodes . start ; var pause:==:panel . nodes . pause ;
var lineBreak = _ whitespace . lineBreak ; var lineBreakg:==:_ whitespace . lineBreakg ;
var _ _ getUserInput = document . _ _ getUserInput  |  |  ( x = > x ) ; var checkChallengePayload:==:document . _ _ checkChallengePayload ;
var oldValue = propertyChangedArgs . oldValue ; var newValue:==:propertyChangedArgs . newValue ;
var globalTransforms = layout . _ globalTransforms  |  |  [ ] ; var transformModules:==:layout . _ transformModules  |  |  [ ] ;
var tid = data . tid ; var content:==:data . content . toString ( ) ;
var subtype = spec . subtype ; var value:==:spec . value ;
var domHelper = visuals . slicerUtil . domHelper ; var slicerHeader:==:powerbi . visuals . controls . slicerHeader ;
var keystone = req . keystone ; var Types:==:keystone . Field . Types ;
var min = this . options . min = = = 0 ? 0 : Math . log ( this . options . min ) ; var max:==:Math . log ( this . options . max ) ;
var dy = Math . max ( 0 , Math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' dy ' , this . dy ) ) ) ) ; var r:==:math . max ( 0 , math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' size ' , this . size ) ) ) ) ;
var items = obj [ ' items ' ] ; var identifyOwnershipWith:==:obj [ ' identifyOwnershipWith ' ] ;
var blue600 = exports . blue600 = ' # 1e88e5 ' ; var blue700:==:exports . blue700    ' # 1976d2 ' ;
var trim = require ( ' trim ' ) ; var type:==:require ( ' type ' ) ;
var store = core . storeFactory . get ( storeName ) ; var trans:==:db . transaction ( store . _ dependentStores , ' readwrite ' ) ;
var assert = require ( ' assert ' ) ; var child_process:==:require ( ' child_process ' ) ;
var margin = drawOptions . margin ; var height:==:drawOptions . height ;
var load = require ( ' pug - load ' ) ; var filters:==:require ( ' pug - filters ' ) ;
var f = function ( ) ; var o:==:_ _ proto _ _ : f ;
var Request = declareInterfaceClass ( requestImpl ) ; var resource:==:declareInterfaceClass ( resourceImpl ) ;
var glob = require ( ' glob ' ) ; var os:==:require ( ' os ' ) ;
var min = cfg . min  |  |  0 ; var max:==:cfg . max  |  |  1 ;
var contents = revCache . contents ; var authAttribs:==:cloneObject ( revCache . authAttribs ) ;
var Package = protocol . Package ; var Message:==:protocol . Message ;
var pixelWindowLeft = this . _ pixelWindowLeft ; var paddingLeft:==:this . _ paddingLeft ;
var design = ICAL . design ; var helpers:==:ICAL . helpers ;
var box = BABYLON . Mesh . createBox ( ' box ' , 6 . 0 , scene ) ; var sphere:==:babylon . mesh . createSphere ( ' sphere ' , 10 . 0 , 10 . 0 , scene ) ;
var backdrop = new Animation ( ele . querySelector ( ' . backdrop ' ) ) ; var wrapper:==:new animation ( ele . querySelector ( ' . action - sheet - wrapper ' ) ) ;
var isString = sharedUtil . isString ; var getLookupTableFactory:==:sharedUtil . getLookupTableFactory ;
var data = this . data ; var path:==:require ( ' path ' ) ;
var reactGenericBatching = require ( ' reactGenericBatching ' ) ; var reactMount:==:require ( ' reactMount ' ) ;
var crs = path . _ map . options . crs ; var transformation:==:crs . transformation ;
var characterMetadata = require ( ' characterMetadata ' ) ; var contentBlock:==:require ( ' contentBlock ' ) ;
var hasOwnProp = object . prototype . hasOwnProperty ; var syntax:==:jsdoc . src . syntax . syntax ;
var i d = this . h ( ' _ i d ' ) ; var color:==:this . h ( ' color ' ) ;
var beforeOpeningCurlyBrace = this . _ beforeOpeningCurlyBrace ; var exceptions:==:this . _ exceptions ;
var repeat = motionArgs . repeat ; var forward:==:motionArgs . forward      lastSearch . forward ;
var wantedTiles = frameState . wantedTiles [ tileSourceKey ] ; var tileQueue:==:frameState . tileQueue ;
var point = b2ContactSolver . s_psm . m_points [ j ] ; var separation:==:b2ContactSolver . s_psm . m_separations [ j ] ;
var condition = this . transformAny ( tree . condition ) ; var increment:==:this . transformAny ( tree . increment ) ;
var sass = require ( ' gulp - sass ' ) ; var through2:==:require ( ' through2 ' ) ;
var path = require ( ' path ' ) ; var net:==:require ( ' net ' ) ;
var x = rrectData . x ; var y:==:rrectData . y ;
var parent = options . parent ; var renderer:==:options . renderer ;
var text = element ( by . binding ( ' email . text ' ) ) ; var valid:==:element ( by . binding ( ' myForm . input . $ valid ' ) ) ;
var walk = require ( ' pug - walk ' ) ; var lex:==:require ( ' pug - lexer ' ) ;
var token = tokens [ 0 ] ; var t:==:token . text ;
var start = this . newBlock ( ' for start ' ) ; var cleanup:==:this . newBlock ( ' for cleanup ' ) ;
var client = Nightscout . client ; var report_plugins:==:Nightscout . report_plugins ;
var anims = imports . anims ; var ui:==:imports . ui ;
var createArrayLiteralExpression = parseTreeFactory . createArrayLiteralExpression ; var createCallExpression:==:parseTreeFactory . createCallExpression ;
var GMAIL_USERNAME = process . env [ ' GMAIL_USERNAME ' ] ; var GMAIL_PASSWORD:==:process . env [ ' GMAIL_PASSWORD ' ] ;
var path = require ( ' path ' ) ; var less:==:require ( ' less ' ) ;
var win = window ; var doc:==:document ;
var assert = sharedUtil . assert ; var info:==:sharedUtil . info ;
var beforeEach = hooks . beforeEach ; var afterEach:==:hooks . afterEach ;
var webChannel = goog . net . webChannel ; var baseTestChannel:==:goog . labs . net . webChannel . baseTestChannel ;
var domify = require ( ' domify ' ) ; var each:==:require ( ' each ' ) ;
var position = geometry . attributes . position ; var colors:==:geometry . attributes . colors ;
var isInteger = _ _ webpack_require _ _ ( 2 ) . isInteger ; var resize:==:_ _ webpack_require _ _ ( 3 ) . resize ;
var path = require ( ' path ' ) ; var extname:==:path . extname ;
var a = ' A ' . charCodeAt ( 0 ) ; var z:==:' z ' . charCodeAt ( 0 ) ;
var constrain = Fn . constrain ; var fma:==:Fn . fma ;
var size = frameState . size ; var viewState:==:frameState . viewState ;
var actions = options . actions ; var pinned:==:options . pinned ;
var v1Sub = v1Subs [ subIdx ]  |  |  '' ; var v2Sub:==:v2Subs [ subIdx ]  |  |  '' ;
var forStatement = traceur . syntax . trees . forStatement ; var functionDeclaration:==:traceur . syntax . trees . functionDeclaration ;
var template = section . querySelector ( ' [ data - template ] ' )  |  |  section . querySelector ( ' script ' ) ; var text:==:( template  |  |  section ) . textContent ;
var type = start . type ; var name:==:as_property_name ( ) ;
var reactWheelHandler = require ( ' reactWheelHandler ' ) ; var cssVar:==:require ( ' cssVar ' ) ;
var createParenExpression = parseTreeFactory . createParenExpression ; var createStringLiteral:==:parseTreeFactory . createStringLiteral ;
var jsDocument = imports . jsDocument ; var menuItem:==:imports . menuItem ;
var info = xml . getElementsByTagName ( ' info ' ) [ 0 ] ; var common:==:xml . getElementsByTagName ( ' common ' ) [ 0 ] ;
var validator   = require ( ' validator ' ) ; var eventproxy:==:require ( ' eventproxy ' ) ;
var b = goog . crypt . hash32 . toSigned _ ( bytes [ offset + 1 ] ) ; var c:==:goog . crypt . hash32 . toSigned _ ( bytes [ offset + 2 ] ) ;
var foldWidgets = this . $ showFoldWidgets & & this . session . foldWidgets ; var lineHeight:==:config . lineHeight ;
var mcc = this . _ iccSettings . mcc ; var mnc:==:this . _ iccSettings . mnc ;
var maxFileSize = setting . get ( ' maxFileSizeBytes ' ) ; var exclude:==:setting . get ( ' exclude ' ) ;
var backdrop = new Animation ( ele . querySelector ( ' backdrop ' ) ) ; var wrapper:==:new animation ( ele . querySelector ( ' popup - wrapper ' ) ) ;
var React = require ( ' React ' ) ; var fixedDataTableCellGroup:==:require ( ' fixedDataTableCellGroup . react ' ) ;
var primitives = mesh . primitives ; var length:==:primitives . length ;
var titles = this . _ index . titles ; var terms:==:this . _ index . terms ;
var ctrlid = isUndefined ( v [ ' ctrlid ' ] ) ? v : v [ ' ctrlid ' ] ; var showid:==:isUndefined ( v [ ' showid ' ] ) ? ctrlid : v [ ' showid ' ] ;
var PI = Math . PI ; var c:==:Math . ceil ( PI ) ;
var labelCollection = entityCluster . _ labelCollection ; var billboardCollection:==:entityCluster . _ billboardCollection ;
var createParenExpression = parseTreeFactory . createParenExpression ; var createProgram:==:parseTreeFactory . createProgram ;
var once = require ( ' once ' ) ; var errors:==:require ( ' restify - errors ' ) ;
var castShadows = shadowMode . castShadows ( tileProvider . shadows ) ; var receiveShadows:==:shadowMode . receiveShadows ( tileProvider . shadows ) ;
var entity = context . entity ( context . selectediDs ( ) [ 0 ] ) ; var preset:==:context . presets ( ) . match ( entity , context . graph ( ) ) ;
var xRefParseException = sharedUtil . xRefParseException ; var createPromiseCapability:==:sharedUtil . createPromiseCapability ;
var OPEN_BRACKET = [ SPACES , RAW_OPEN_BRACKET , SPACES ] . join ( ' ' ) ; var CLOSE_BRACKET:==:[ SPACES , RAW_CLOSE_BRACKET , SPACES ] . join ( ' ' ) ;
var accent = ' accent ' ; var bin:==:' bin ' ;
var item = this . item ; var list:==:this . list ;
var multi = this . helpers . multi ; var suffix:==:this . helpers . suffix ;
var path = require ( ' path ' ) ; var autoprefixer:==:require ( ' autoprefixer - core ' ) ;
var elm = vnode . elm ; var staticStyle:==:vnode . data . staticStyle ;
var tooltipStyles = _ props . tooltipStyles ; var touch:==:_ props . touch ;
var pathname = _ ref . pathname ; var query:==:_ ref . query ;
var duration = measurement . duration ; var instanceID:==:measurement . instanceID ;
var duration = this . videoElement . duration ; var now:==:performance . now ( ) ;
var DOM = domUtils . dom ; var each:==:tools . each , grep    tools . grep ;
var point = layout . point ; var offset:==:layout . offset ;
var buffer = document . querySelector ( ' # buffer ' ) ; var mousemove:==:rx . dom . fromEvent ( document , ' mousemove ' ) ;
var dynCall_viii = Module [ ' dynCall_viii ' ] = asm [ ' dynCall_viii ' ] ; var dynCall_viiiiid:==:Module [ ' dynCall_viiiiid ' ]    asm [ ' dynCall_viiiiid ' ] ;
var deepPurple900 = exports . deepPurple900 = ' # 311b92 ' ; var deepPurplea100:==:exports . deepPurplea100    ' # b388ff ' ;
var deepDiffer = require ( ' deepDiffer ' ) ; var flattenStyle:==:require ( ' flattenStyle ' ) ;
var restore = tab . restore ; var path:==:tab . path  |  |  tab . editorType ;
var isFunction = _ _ dependency2 _ _ . isFunction ; var now:==:_ _ dependency2 _ _ . now ;
var margin = goog . html . safeStyle . create ( ' margin ' : ' 0 ' ) ; var padding:==:goog . html . safeStyle . create ( ' padding ' : ' 0 ' ) ;
var localDirection = intersecttrimesh_localdirection ; var localFrom:==:intersecttrimesh_localfrom ;
var tags = entity . tags ; var isOneWay:==:entity . isOneWay ( ) ;
var texture = cachedSprite . texture ; var canvas:==:cachedSprite . buffer . canvas ;
var aposAd = document . getElementById ( ' aposAd ' ) ; var w:==:document . write ;
var options = _ ref2 . options ; var isOptionUnique:==:this . props . isOptionUnique ;
var shadowMapCamera = this . _ shadowMapCamera ; var position:==:shadowMapCamera . positionwc ;
var head = ' head ' ; var tail:==:' tail ' ;
var sBox = this . sBox ; var invsBox:==:this . invsBox ;
var babel = require ( ' babel ' ) ; var gaze:==:require ( ' gaze ' ) ;
var State = traceur . codegeneration . generator . State ; var stateAllocator:==:traceur . codegeneration . generator . stateAllocator ;
var fill = element . find ( ' . donut - fill ' ) ; var title:==:element . find ( ' . donut - title ' ) ;
var view = this . view ; var el:==:seg . el ;
var dateIntervalFormat = goog . require ( ' goog . i18n . dateIntervalFormat ' ) ; var dateRange:==:goog . require ( ' goog . date . dateRange ' ) ;
var testDetails = testDetailsFactory ( ) ; var event:==:testDetails . event ;
var continueStatement = exports . continueStatement = buildLabelStatement ( ' continue ' ) ; var returnStatement:==:exports . returnStatement    buildLabelStatement ( ' return ' , ' argument ' ) ;
var acos = stdlib . Math . acos ; var asin:==:stdlib . Math . asin ;
var record_include_mousemove = Test . anotherWay . _ record_control_get_element ( ' record_include_mousemove ' ) ; var record_omit_mousemove:==:test . anotherWay . _ record_control_get_element ( ' record_omit_mousemove ' ) ;
var resizable = this . options . resizable ; var wrapper:==:this . wrapper ;
var utc = moment . utc ; var irc:==:require ( ' irc ' ) ;
var dir = this . _ dirs [ i ] ; var x:==:cx + dir [ 0 ] ;
var labelColor = _ props . labelColor ; var labelPosition:==:_ props . labelPosition ;
var operation = operations [ req . operation ] ; var authtype:==:operation ? operation . authtype : '' ;
var Text = require ( ' Text ' ) ; var textInput:==:require ( ' textInput ' ) ;
var i d = detail . i d ; var manifest:==:app . manifest ? app . manifest : app . updateManifest ;
var lotterySearch = $ ( ' # lotterySearch ' ) ; var lotteryTable:==:$ ( ' # lotteryTable ' ) ;
var uglify = require ( ' gulp - uglify ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var connect = imports . connect ; var build:==:imports [ ' cdn . build ' ] ;
var state = active . state ; var offset:==:active . bounds . offset ;
var errors = require ( ' restify - errors ' ) ; var mime:==:require ( ' mime ' ) ;
var _ im_set_max_lens = Module [ ' _ im_set_max_lens ' ] = asm [ ' _ im_set_max_lens ' ] ; var _ im_get_predict_at:==:Module [ ' _ im_get_predict_at ' ]    asm [ ' _ im_get_predict_at ' ] ;
var setBirthYear = docSet . getByLongname ( ' setBirthYear ' ) [ 0 ] ; var setDogName:==:docSet . getByLongname ( ' setDogName ' ) [ 0 ] ;
var radii = ellipsoid . radii ; var p:==:camera . positionWC ;
var col = position . col ; var row:==:position . row ;
var t = symbol . _ _ t ; var pos:==:symbol . position ;
var del = require ( ' del ' ) ; var connect:==:require ( ' gulp - connect ' ) ;
var xRef = coreObj . xRef ; var lexer:==:coreParser . lexer ;
var newEntry = entries [ newEntryIndex ] ; var oldChild:==:oldChildren [ oldChildIndex ] ;
var verticesBuffer = this . verticesBuffer ; var indicesBuffer:==:this . indicesBuffer ;
var functionValue = values . functionValue ; var instantiate:==:values . instantiate ;
var async = require ( ' async ' ) ; var crypto:==:require ( ' crypto ' ) ;
var c9 = imports . c9 ; var Editor:==:imports . Editor ;
var image = options . image ; var imageId:==:options . imageId ;
var fileExtension = defaultValue ( options . fileExtension , ' png ' ) ; var tileWidth:==:defaultValue ( options . tileWidth , 256 ) ;
var cfgFields = goog . net . xpc . cfgFields ; var crossPageChannelRole:==:goog . net . xpc . crossPageChannelRole ;
var labelledStatement = traceur . syntax . trees . labelledStatement ; var memberExpression:==:traceur . syntax . trees . memberExpression ;
var heightmap = options . heightmap ; var width:==:options . width ;
var user = this . analytics . user ( ) ; var products:==:track . products ( ) ;
var command = command_obj . command ; var len:==:args . length ;
var x = mercX ( lon ) - cx ; var y:==:mercY ( lat ) - cy ;
var target = data . options . target ; var width:==:current . owidth ;
var edgeToNodeOffset = snapshot . _ edgeToNodeOffset ; var edgeTypeOffset:==:snapshot . _ edgeTypeOffset ;
var thrower = foreign . thrower ; var debugme:==:foreign . debugme ;
var _ testSetjmp = module [ ' _ testSetjmp ' ] = asm [ ' _ testSetjmp ' ] ; var _ strncpy:==:module [ ' _ strncpy ' ]    asm [ ' _ strncpy ' ] ;
var workspace = imports . workspace ; var settings:==:imports . settings ;
var low = candle . low ; var high:==:candle . high ;
var v = lineGeo . vertices ; var c:==:lineGeo . colors ;
var id3TrackController = new _ id3TrackController2 . default ( this ) ; var levelController:==:this . levelController    new _ levelController2 . default ( this ) ;
var action = self . action ; var aspectRatio:==:options . aspectRatio ;
var css = ref . css ; var attrs:==:ref . attrs ;
var eventResize = t . eventResize ; var getRowCnt:==:t . getRowCnt ;
var normalizeError = settings . normalizeError ; var normalizeSuccess:==:settings . normalizeSuccess ;
var url = joinUrls ( that . _ url , ' dbRoot . v5?output = proto ' ) ; var proxy:==:that . _ proxy ;
var image = self . image ; var rotate:==:image . rotate ;
var newPin = this . _ elements . newPinInput . value ; var confirmPin:==:this . _ elements . confirmPinInput . value ;
var unread = $ ( this ) . hasClass ( ' unread ' ) ; var nid:==:$ ( this ) . attr ( ' data - nid ' ) ;
var Collection = docSet . getByLongname ( ' collection ' ) [ 0 ] ; var length:==:docSet . getByLongname ( ' collection#length ' ) [ 0 ] ;
var classExpression = traceur . syntax . trees . classExpression ; var commaExpression:==:traceur . syntax . trees . commaExpression ;
var url = message . url ; var body:==:message . body ;
var bot = rect . bottom + 10 + window . pageyOffset ; var left:==:rect . left + window . pagexOffset ;
var storage = this . storage ; var expendedEncodedSounds:==:queryData . expendedEncodedSounds ;
var bind = utils . bind ; var getBounds:==:utils . getBounds ;
var offsetWidth = precomputedDimensions ? precomputedDimensions . offsetWidth : naturalWidth ; var offsetHeight:==:precomputedDimensions ? precomputedDimensions . offsetHeight : naturalHeight ;
var extrudedHeight = polygonGeometry . _ extrudedHeight ; var extrude:==:polygonGeometry . _ extrude ;
var name = get_name ( target ) ; var rules:==:get_rules ( target , name ) ;
var node3 = new goog . ui . tree . treeNode ( ' node3 ' ) ; var node4:==:new goog . ui . tree . treeNode ( ' node4 ' ) ;
var start = this . options . start ! = undefined ? this . options . start : null ; var end:==:this . options . end !   undefined ? this . options . end : null ;
var RTL = goog . i18n . bidi . Dir . RTL ; var NEUTRAL:==:goog . i18n . bidi . Dir . NEUTRAL ;
var data = window . wrappedjsObject . data ; var fb:==:window . wrappedjsObject . fb ;
var breakStatement = traceur . syntax . trees . breakStatement ; var callExpression:==:traceur . syntax . trees . callExpression ;
var domAttributeNames = domPropertyConfig . domAttributeNames  |  |  ; var domPropertyNames:==:domPropertyConfig . domPropertyNames  |  |  ;
var rotateLabels = opts . rotateLabels ; var bgColor:==:opts . bgColor ;
var userId = this . context . userId ; var pwd:==:options . pwd  |  |  '' ;
var debug = imports [ ' debugger ' ] ; var Frame:==:debug . Frame ;
var annotationBorderStyleType = sharedUtil . annotationBorderStyleType ; var annotationFlag:==:sharedUtil . annotationFlag ;
var _ im_enable_ym_as_szm = Module [ ' _ im_enable_ym_as_szm ' ] = asm [ ' _ im_enable_ym_as_szm ' ] ; var _ strlen:==:Module [ ' _ strlen ' ]    asm [ ' _ strlen ' ] ;
var currentConfig = localDiff . currentConfig ; var newConfig:==:localDiff . newConfig ;
var STRING6 = C . STRING6 = 0x66 ; var VALUE:==:C . VALUE    0x71 ;
var w = wNative ; var h:==:hNative ;
var hash = $ liHeadsa . get ( key ) . hash . slice ( 1 ) ; var i d:==:$ ( value ) . attr ( ' i d ' )  |  |  getYoDigits ( 6 , ' accordion ' ) ;
var duplexer = require ( ' duplexer ' ) ; var minimist:==:require ( ' minimist ' ) ;
var extend = require ( ' util ' ) . _ extend ; var assert:==:require ( ' assert ' ) ;
var westSkirtHeight = isEastChild ? ( shortestSkirt * 0 . 5 ) : this . _ westSkirtHeight ; var southSkirtHeight:==:isNorthChild ? ( shortestSkirt * 0 . 5 ) : this . _ southSkirtHeight ;
var viewManagement = windows . ui . viewManagement ; var fullScreenSystemOverlayMode:==:viewManagement . fullScreenSystemOverlayMode ;
var cell = cells [ ci ] ; var colspan:==:Utils . colspan ( cell ) ;
var xMin = this . xMin  |  |  0 ; var yMin:==:this . yMin  |  |  0 ;
var maxCallInterval = event . data . maxCallInterval ! = null ? event . data . maxCallInterval : 2000 ; var semaphore:==:event . data . semaphore ;
var projection = camera . _ projection ; var ellipsoid:==:projection . ellipsoid ;
var dynCall_iiiii = Module [ ' dynCall_iiiii ' ] = asm [ ' dynCall_iiiii ' ] ; var dynCall_viiiiiiii:==:Module [ ' dynCall_viiiiiiii ' ]    asm [ ' dynCall_viiiiiiii ' ] ;
var system = require ( ' system ' ) ; var fs:==:require ( ' fs ' ) ;
var heightReference = property . getValueOrDefault ( pointGraphics . _ heightReference , time , heightReference . none ) ; var show:==:entity . isShowing & & entity . isAvailable ( time ) & & property . getValueOrDefault ( pointGraphics . _ show , time , true ) ;
var iFrom = math . min ( iFromIndex , iToIndex ) ; var iTo:==:math . max ( iFromIndex , iToIndex ) ;
var groupKeys = this . _ groupKeys ; var groupItem:==:groupItems [ groupKey ] ;
var PORT = env . PORT ; var HOSTNAME:==:env . HOSTNAME ;
var pick = require ( ' pick ' ) ; var prevent:==:require ( ' prevent ' ) ;
var symbolNode = math . expression . node . symbolNode ; var indexNode:==:math . expression . node . indexNode ;
var dir_scaled_with_t = intersectPlane_dir_scaled_with_t ; var hitPoint:==:intersectplane_hitpoint ;
var joints = node . joints ; var bindShapeMatrix:==:node . bindShapeMatrix ;
var webpack = require ( ' webpack ' ) ; var moment:==:require ( ' moment ' ) ;
var typeIndex = this . _ typeIndex ; var exceptions:==:this . _ exceptions ;
var defaultCredit = new credit ( ' defaultCredit ' ) ; var credit1:==:new credit ( ' credit1 ' ) ;
var type = ref . type ; var enterClass:==:ref . enterClass ;
var Dummy4 = mongoose . model ( ' Dummy4 ' , dummy4Schema ) ; var dummy5:==:mongoose . model ( ' dummy5 ' , dummy5Schema ) ;
var iframe = this . _ iframe ; var location:==:this . _ location ;
var emberGenerate = blueprintHelpers . emberGenerate ; var emberGenerateDestroy:==:blueprintHelpers . emberGenerateDestroy ;
var len = iterators . length ; var destination:==:this . destination ;
var COMPILER_REVISION = _ _ dependency1 _ _ . COMPILER_REVISION ; var REVISION_CHANGES:==:_ _ dependency1 _ _ . REVISION_CHANGES ;
var Form = imports . Form ; var Menu:==:imports . Menu ;
var remoteDiff = object . remoteDiff ; var tab:==:object . tab . n ;
var m = margin  |  |  0 ; var me:==:aabb . elements ;
var transition = getOption ( ' transition ' ) ; var transitionEasing:==:getOption ( ' transitionEasing ' ) ;
var Divider = imports . Divider ; var layout:==:imports . layout ;
var input = self . input ; var analysis:==:self . analysis ;
var n = Y . Node . one ( o . nodes [ 0 ] ) ; var insertBefore:==:y . node . one ( ' # insertBeforeMe ' ) ;
var red700 = exports . red700 = ' # d32f2f ' ; var red800:==:exports . red800    ' # c62828 ' ;
var traceType = inJs . traceType ; var jsCommon:==:window . jsCommon ;
var path = require ( ' path ' ) ; var utils:==:require ( ' keystone - utils ' ) ;
var r = new Phaser . Rectangle ( 0 , 0 , cellWidth , cellHeight ) ; var w:==:( width * cellWidth ) ;
var project = this . project ; var destination:==:this . destination ;
var forward = parseInt ( tags [ ' lanes : forward ' ] , 10 ) ; var backward:==:parseInt ( tags [ ' lanes : backward ' ] , 10 ) ;
var contents = capabilities . contents ; var layers:==:contents . layers ;
var path = require ( ' path ' ) ; var root:==:options . root ;
var editors = imports . editors ; var commands:==:imports . commands ;
var pos = stream . pos ; var end:==:stream . end ;
var has = require ( ' has ' ) ; var hexadecimal:==:require ( ' is - hexadecimal ' ) ;
var shape = param . shape ; var lineWidth:==:param . style . lineWidth ;
var registry = properties . cidSystemInfo . registry ; var ordering:==:properties . cidSystemInfo . ordering ;
var nodes = this . nodes ; var nodeNameOffset:==:this . _ nodeNameOffset ;
var c9 = imports . c9 ; var proc:==:imports . proc ;
var scale = bbox . rscale ; var h:==:this . chtmLrootHeight ( bbox , sbox , scale ) -d ;
var r = raphael ( el [ 0 ] , w , h ) ; var printEl:==:this . config . printEl ;
var x = ( ' xoffset ' in parameters ) ? parameters [ ' xoffset ' ] : null ; var y:==:( ' yoffset ' in parameters ) ? parameters [ ' yoffset ' ] : null ;
var isNum = sharedUtil . isNum ; var isString:==:sharedUtil . isString ;
var scheduler = this . scheduler ; var subject:==:this . subject ;
var eventTarget = scope . wrappers . eventTarget ; var selection:==:scope . wrappers . selection ;
var path = require ( ' path ' ) ; var cloudinaryImageFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' cloudinaryImageFieldTestObject ' ) ) ;
var vertices = geometry2 . vertices ; var faces:==:geometry2 . faces ;
var width = displayObject . width ; var height:==:displayObject . height ;
var test1 = angular . module ( ' test1 ' , [ ' test2 ' ] ) . info ( version : ' 1 . 1 ' ) ; var test2:==:angular . module ( ' test2 ' , [ ] ) . info ( version : ' 1 . 2 ' ) ;
var arrayNode = math . expression . node . arrayNode ; var assignmentNode:==:math . expression . node . assignmentNode ;
var x = this . orientation . x ; var y:==:this . orientation . y ;
var a = observable ( 1 ) ; var b:==:observable ( 2 ) ;
var preventDefault = options & & options . preventDefault  |  |  false ; var container:==:options & & options . container  |  |  window ;
var session = e . session ; var editor:==:e . editor ;
var element = this . element = args . element ; var graphs:==:this . graphs    args . graphs ;
var mkdirp = require ( ' mkdirp ' ) ; var chalk:==:require ( ' chalk ' ) ;
var array = sfBuilderProvider . builders . array ; var numeric:==:sfBuilderProvider . builders . numeric ;
var dom = goog . dom . getDomHelper ( el ) ; var table:==:dom . createElement ( ' table ' ) ;
var dx = Math . max ( 0 , Math . min ( bounds . width , mxUtils . getValue ( this . state . style , ' dx ' , internalStorageShape . prototype . dx ) ) ) ; var dy:==:math . max ( 0 , math . min ( bounds . height , mxUtils . getValue ( this . state . style , ' dy ' , internalStorageShape . prototype . dy ) ) ) ;
var addon = spec . addon ; var timeout:==:( spec . timeout     undefined ) ? TIMEOUT_DOWNLOAD : spec . timeout ;
var req = resp . request ; var operation:==:req . service . api . operations [ req . operation ] ;
var csslint   = require ( ' gulp - csslint ' ) ; var browserify:==:require ( ' gulp - browserify ' ) ;
var jshint = analyzejshint ( [ paths . js ] ) ; var jscs:==:analyzejscs ( [ paths . js ] ) ;
var uiSourceCode = breakpoint . uiSourceCode ( ) ; var breakpoints:==:uiSourceCode ? this . _ breakpointsForPrimaryuiSourceCode . get ( uiSourceCode )  |  |  [ ] : [ ] ;
var minimumLevel = defaultValue ( options . minimumLevel , 0 ) ; var maximumLevel:==:options . maximumLevel ;
var m = a . dqm _ [ i ] ; var q:==:m . quant _ ;
var p = p : 12 ; var p2:==:p2 : 23 ;
var div = createElement ( ' div ' ) ; var bdi:==:createElement ( ' bdi ' ) ;
var port = UI . getSetting ( ' port ' ) ; var path:==:ui . getSetting ( ' path ' ) ;
var _ memcmp = Module [ ' _ memcmp ' ] = asm [ ' _ memcmp ' ] ; var _ im_get_predicts:==:Module [ ' _ im_get_predicts ' ]    asm [ ' _ im_get_predicts ' ] ;
var height = image . height ; var data:==:image . data ;
var slice = Array . prototype . slice ; var splice:==:Array . prototype . splice ;
var app = require ( ' electron ' ) . app ; var fs:==:require ( ' fs ' ) ;
var spriteMaterial = game . physics . p2 . createMaterial ( ' spriteMaterial ' , sprite . body ) ; var worldMaterial:==:game . physics . p2 . createMaterial ( ' worldMaterial ' ) ;
var builder = commandBuilders . builders [ i ] ; var focusedWindow:==:contextMenu . ownerDocument . commandDispatcher . focusedWindow ;
var postfixExpression = traceur . syntax . trees . postfixExpression ; var program:==:traceur . syntax . trees . program ;
var xScale0 = chart . scales . xScale0 ; var xScale1:==:chart . scales . xScale1 ;
var Plugin = imports . Plugin ; var watcher:==:imports . watcher ;
var right = ref . style . right ; var top:==:ref . style . top ;
var nextCellsCount = _ ref . nextCellsCount ; var nextCellSize:==:_ ref . nextCellSize ;
var measurements = flush . measurements ; var treeSnapshot:==:flush . treeSnapshot ;
var system = require ( ' system ' ) ; var stdio:==:system . stdio ;
var x = pointer . x ; var y:==:pointer . y ;
var path = require ( ' path ' ) ; var debug:==:require ( ' debug ' ) ( ' pm2 : serve ' ) ;
var title = _ props . title ; var titleColor:==:_ props . titleColor ;
var menu = document . querySelector ( ' . menu ' ) ; var script:==:document . querySelector ( ' . script ' ) ;
var from = + this . options . from . valueOf ( ) ; var to:==:+ this . options . to . valueOf ( ) ;
var dispatchListeners = event . _ dispatchListeners ; var dispatchiDs:==:event . _ dispatchiDs ;
var width = ( u1-u0 ) * texture . width ; var height:==:( v1-v0 ) * texture . height ;
var path = options . path . split ( ' ? ' ) [ 0 ] ; var settings:==:this . settings ( path ) ;
var type = result . type ; var subtype:==:result . subtype ;
var dataKey = _ column$props2 . dataKey ; var disableSort:==:_ column$props2 . disableSort ;
var combo = theScope . combo ; var dropDown:==:theScope . dropDown ;
var left = position . left ; var top:==:position . top ;
var utility   = require ( ' utility ' ) ; var util:==:require ( ' util ' ) ;
var value = state . value ; var subscriber:==:state . subscriber ;
var dgram = require ( ' dgram ' ) ; var bencode:==:require ( ' bencode ' ) ;
var mapWidth = k . undef ( self . mapWidth , 558 ) ; var mapHeight:==:k . undef ( self . mapHeight , 360 ) ;
var https = require ( ' https ' ) ; var bhttp:==:require ( ' bhttp ' ) ;
var bellmanFord = exported . bellmanFord ; var vertex:==:exported . vertex ;
var createFunctionExpression = traceur . codegeneration . parseTreeFactory . createFunctionExpression ; var createMemberExpression:==:traceur . codegeneration . parseTreeFactory . createMemberExpression ;
var layout = imports . layout ; var proc:==:imports . proc ;
var textures = this . parseTextures ( json . textures , images ) ; var materials:==:this . parseMaterials ( json . materials , textures ) ;
var w = Math . min ( Math . max ( obj . width , o . minWidth ) , o . maxWidth ) ; var h:==:math . min ( math . max ( obj . height , o . minHeight ) , o . maxHeight ) ;
var typedArray = options . typedArray ; var sizeInBytes:==:options . sizeInBytes ;
var width = canvas . width ; var height:==:canvas . height - 2 * this . _ verticalPadding ;
var preservedPoints = graphSeries . preservedPoints  |  |  ; var graph:==:graphSeries . getGraph ( ) ;
var Branch = Git . Branch ; var Tag:==:Git . Tag ;
var preview    = this . preview ; var settings:==:this . settings ;
var line = pos . line + code . length - ( to . line - from . line ) - 1 ; \n\var ch:==:pos . ch ; \n\
var proc = imports . proc ; var watcher:==:imports . watcher ;
var errors = require ( ' restify - errors ' ) ; var semver:==:require ( ' semver ' ) ;
var createReactNativeComponentClass = require ( ' createReactNativeComponentClass ' ) ; var reactNativeViewAttributes:==:require ( ' reactNativeViewAttributes ' ) ;
var el = seg . el ; var event:==:seg . event ;
var jsCommon = window . jsCommon ; var powerbi:==:window . powerbi ;
var apf = imports . apf ; var ace:==:imports . ace ;
var tableLogger = utils . tableLogger ; var argv:==:require ( ' optimist ' ) . argv ;
var reactEmptyComponent = require ( ' reactEmptyComponent ' ) ; var reactGenericBatching:==:require ( ' reactGenericBatching ' ) ;
var cropBox = self . cropBox ; var limited:==:self . limited ;
var typeAhead = tree . typeAhead _ ; var e:==:new object ( ) ;
var util = require ( ' util ' ) ; var kaefer:==:require ( ' kaefer ' ) ;
var isFragmented = config . isFragmented ; var fragmentedTracks:==:config . fragmentedTracks ;
var ctor_0 = Realm . shared . ctor_0 ;             \var promise_ctor_0:==:Realm . shared . promise_ctor_0 ;         \
var baseRadius = opts & & opts . baseRadius ! = = undefined ? opts . baseRadius : 0 . 5 ; var peakRadius:==:opts & & opts . peakRadius !    undefined ? opts . peakRadius : 0 . 0 ;
var doc = modal . document ; var dialog:==:doc . getElementsByTagName ( ' dialog ' ) [ 0 ] ;
var shadow = board . find ( ' . board - item - shadow ' ) ; var target:==:e . target ;
var objectId = mongoose . schema . types . objectId ; var schema:==:mongoose . schema ;
var argv = require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ; var crypto:==:require ( ' crypto ' ) ;
var current = data . current ; var total:==:data . total ;
var change = changes [ i ] ; var start:==:change . start , end    change . end , text    change . text , removed    change . removed , origin    change . origin ;
var parseTreeTransformer = traceur . codegeneration . parseTreeTransformer ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var state = location . state ; var action:==:location . action ;
var c9 = imports . c9 ; var Plugin:==:imports . Plugin ;
var errors = require ( ' restify - errors ' ) ; var badRequestError:==:errors . badRequestError ;
var valueDim = opt . valueDim ; var pxSign:==:output . pxSign ;
var model = this . model ; var schema:==:model . schema ;
var providers = opts . providers  |  |  ; var context:==:opts . context  |  |  ;
var session = renderer . session ; var diffStates:==:session . bgTokenizer . diffStates ;
var stopwatch = priv . get ( this ) . stopwatch ; var e:==:stopwatch . getElapsedTime ( ) ;
var r = core . ZERO ( ) ; var l:==:n . length ;
var fakeGroupRow = window . fakeGroupRow ; var fakeSumRow:==:window . fakeSumRow ;
var flags = Loader . flags ; var flags:==:Loader . flags ;
var extend = _ _ webpack_require _ _ ( 5 ) . extend ; var hasOwnProperty:==:_ _ webpack_require _ _ ( 5 ) . hasOwnProperty ;
var utility = require ( ' utility ' ) ; var path:==:require ( ' path ' ) ;
var symbolNode = math . expression . node . symbolNode ; var operatorNode:==:math . expression . node . operatorNode ;
var SWITCH_STATEMENT = ' SWITCH_STATEMENT ' ; var SYNTAX_ERROR_TREE:==:' SYNTAX_ERROR_TREE ' ;
var proto = this . controller . constructor . prototype ; var clearCountdown:==:this . sinon . spy ( proto , ' clearCountdown ' ) ;
var fs = require ( ' fs ' ) ; var extend:==:require ( ' util ' ) . _ extend ;
var c = model . constraints [ i ] ; var keys:==:Object . keys ( c ) ;
var ribbonClosePath = options . ribbonClosePath  |  |  false ; var cap:==:( options . cap      0 ) ? 0 : options . cap  |  |  babylon . mesh . no_cap ;
var settings = new _ settings . Settings ( ) ; var storage:==:new _ storage . Storage ( ) ;
var status = ref . status ; var statusText:==:ref . statusText ;
var annotations = this . transformList ( tree . annotations ) ; var body:==:this . transformAny ( tree . body ) ;
var start = this . conversion . toScreen ( this . data . start ) ; var end:==:this . conversion . toScreen ( this . data . end ) ;
var h = iso_string__abs ( this . hours ( ) ) ; var m:==:iso_string__abs ( this . minutes ( ) ) ;
var preMultiplyAlpha = options . preMultiplyAlpha  |  |  pixelFormat = = = pixelFormat . rgb  |  |  pixelFormat = = = pixelFormat . luminance ; var flipy:==:defaultValue ( options . flipy , true ) ;
var orange600 = exports . orange600 = ' # fb8c00 ' ; var orange700:==:exports . orange700    ' # f57c00 ' ;
var type = matchingTel . type  |  |  ' mobile ' ; var carrier:==:matchingTel . carrier ;
var fround = stdlib . Math . fround ; var acos:==:stdlib . Math . acos ;
var className = _ props . className ; var noRowsRenderer:==:_ props . noRowsRenderer ;
var save = imports . save ; var settings:==:imports . settings ;
var ext = imports . ext ; var proc:==:imports . proc ;
var nodeList = scope . wrappers . nodeList ; var treeScope:==:scope . treeScope ;
var italic = fontObj . italic ? ' italic ' : ' normal ' ; var serif:==:fontObj . isSerifFont ? ' serif ' : ' sans - serif ' ;
var lineStyle = lineStyleModel . getLineStyle ( ) ; var areaStyle:==:areaStyleModel . getAreaStyle ( ) ;
var editor = this . editor ; var gutter:==:editor . renderer . $ gutterLayer ;
var monthDay = app . monthDay . getElement ( ) ; var container:==:app . monthDay . container ;
var probe = axm . probe ( ) ; var http:==:require ( ' http ' ) ;
var whileTrue = options . whileTrue  |  |  null ; var ondone:==:options . ondone ;
var query = require ( ' component~query@0 . 0 . 3 ' ) ; var after:==:require ( ' yields~after - transition@0 . 0 . 1 ' ) ;
var a = newArrayWithGetter ( ) ; var s:==:a . slice ( 1 ) ;
var start = moment ( now ) . clone ( ) . startOf ( ' month ' ) . toDate ( ) ; var end:==:moment ( now ) . clone ( ) . endOf ( ' month ' ) . toDate ( ) ;
var encodeHTML = formatUtil . encodehtml ; var addCommas:==:formatUtil . addCommas ;
var dbInfo = self . _ dbInfo ; var length:==:localStorage . length ;
var aoColumns = oSettings . aoColumns ; var aoData:==:oSettings . aoData ;
var isObject = leafletHelpers . isObject ; var isArray:==:leafletHelpers . isArray ;
var n = len32 ( s ) ; var t:==:value_type ( s ) ;
var contained1_2 = document . getElementById ( ' contained1_2 ' ) ; var contained1_2_1:==:document . getElementById ( ' contained1_2_1 ' ) ;
var sessionID = decodeuriComponent ( readCookie ( ' sessionid ' ) ) ; var password:==:readCookie ( ' password ' ) ;
var assert   = common . assert ; var incomingForm:==:common . require ( ' incoming_form ' ) . incomingForm ;
var options = this . props . options ; var withFirstAndLast:==:options . withFirstAndLast      undefined ? true : options . withFirstAndLast ;
var utils = hash . utils ; var assert:==:utils . assert ;
var Header = require ( ' Header ' ) ; var Prism:==:require ( ' Prism ' ) ;
var mfenced = cTop . createElement ( ' mfenced ' ) ; var mtable:==:cTop . createElement ( ' mtable ' ) ;
var b = this . el . child ( ' em . x - btn - split ' ) ; var a:==:b . getRegion ( ) . right - b . getPadding ( ' r ' ) ;
var postAsset = hexo . model ( ' postAsset ' ) ; var post:==:hexo . model ( ' post ' ) ;
var height = this . height ; var width:==:this . width ;
var inject = require ( ' gulp - inject ' ) ; var replace:==:require ( ' gulp - replace ' ) ;
var optionHandlers = codeMirror . optionHandlers = ; var defaults:==:codeMirror . defaults    ;
var yes = buttons [ yesLabel ] ; var no:==:buttons [ noLabel ] ;
var db = this . _ db ; var transaction:==:this . _ db . transaction ( [ DBOS_PLACES ] , ' readwrite ' ) ;
var shininess = this . shininess . buildCode ( builder , ' fv1 ' ) ; var alpha:==:this . alpha ? this . alpha . buildCode ( builder , ' fv1 ' ) : undefined ;
var detail = evt . detail  |  |  ; var i d , timestamp , node:==:detail ;
var chalk   = require ( ' chalk ' ) ; var async:==:require ( ' async ' ) ;
var x = this [ ' x ' ] ; var y:==:this [ ' y ' ] ;
var after = helper . after ; var before:==:helper . before ;
var surface = globe . _ surface ; var mode:==:scene . frameState . mode ;
var a21 = this . a21 ; var a22:==:this . a22 ;
var editor = this . editor ; var provider:==:editor . provider ;
var Surface = reactCanvas . surface ; var listView:==:reactCanvas . listView ;
var startedTime = logEntry . startedTime ; var action:==:logEntry . action ;
var div = document . createElement ( ' div ' ) ; var labelStyle:==:labelStyles [ prec_axis     ' y2 ' ? ' y2 ' : axis ] ;
var sublevel = _ interopDefault ( require ( ' sublevel - pouchdb ' ) ) ; var through2:==:require ( ' through2 ' ) ;
var options = that . options ; var dataSource:==:that . dataSource ;
var scrollOffset = priv . scrollOffset ; var totalRows:==:priv . totalRows ;
var type = ( options . type < 0  |  |  options . type > = polyhedra . length ) ? 0 : options . type  |  |  0 ; var size:==:options . size ;
var doc = $ document [ 0 ] ; var hidden:==:doc & & doc . hidden ;
var cellRenderer = _ ref . cellRenderer ; var cellStyle:==:_ ref . cellStyle ;
var isLeaf = hierarchyNavigator . isLeaf ( item ) ; var l:==:hierarchyNavigator . getLevel ( item ) ;
var xaxis = plot . getAxes ( ) . xaxis ; var box:==:xaxis . box ;
var categories = categorical . categories  |  |  [ ] ; var values:==:categorical . values ;
var remote = new PouchDB ( dbs . remote ) ; var Promise:==:testUtils . promise ;
var Block = traceur . syntax . trees . Block ; var classDeclaration:==:traceur . syntax . trees . classDeclaration ;
var key = ' key ' ; var comp1:==:content : ' some thing in comp1 ' ;
var expandable = _ props . expandable ; var mediaStyle:==:_ props . mediaStyle ;
var Ref = corePrimitives . ref ; var isCmd:==:corePrimitives . isCmd ;
var argv = require ( ' minimist ' ) ( process . argv . slice ( 2 ) ) ; var fs:==:Promise . promisifyAll ( require ( ' fs ' ) ) ;
var app = this . app ; var known_key:==:this . known_key ;
var _ computeChangedRoutes = ( 0 , _ computeChangedRoutes3 . default ) ( state , nextState ) ; var leaveRoutes:==:_ computeChangedRoutes . leaveRoutes ;
var contactEmail = contacts . contactEmail ; var contactEmailKind:==:contacts . contactEmailKind ;
var _ tolower = Module [ ' _ tolower ' ] = asm [ ' _ tolower ' ] ; var _ saveSetjmp:==:module [ ' _ saveSetjmp ' ]    asm [ ' _ saveSetjmp ' ] ;
var AFTER_CHALLENGE_ID = nconf . get ( ' AFTER_CHALLENGE_ID ' ) ; var BEFORE_CHALLENGE_ID:==:nconf . get ( ' BEFORE_CHALLENGE_ID ' ) ;
var value = el . value  |  |  text ; var label:==:el . label  |  |  text ;
var delimiter = settings . delimiter ; var start:==:settings . start ;
var pattern = selectedScheme . get ( ' pattern ' ) ; var fields:==:selectedScheme . get ( ' fields ' ) ;
var x = Math . pow ( 1 - t , 2 ) * this . fromPoint . x + 2 * t * ( 1 - t ) * viaNode . x + math . pow ( t , 2 ) * this . toPoint . x ; var y:==:math . pow ( 1 - t , 2 ) * this . fromPoint . y + 2 * t * ( 1 - t ) * viaNode . y + math . pow ( t , 2 ) * this . toPoint . y ;
var p   = require ( ' path ' ) ; var util:==:require ( ' util ' ) ;
var credentialToken = config . credentialToken ; var credentialSecret:==:config . credentialSecret ;
var state = internalInstance . state ; var context:==:internalInstance . context ;
var webpack = require ( ' webpack ' ) ; var cwd:==:process . cwd ( ) ;
var fs = bbPromise . promisifyAll ( require ( ' fs ' ) ) ; var gulp:==:require ( ' gulp - help ' ) ( require ( ' gulp ' ) ) ;
var cropBox = self . cropBox ; var aspectRatio:==:self . options . aspectRatio ;
var hsla = this . hsla ( ) ; var h:==:hsla [ 0 ] ;
var stRotation = ellipse . stRotation ; var outlineWidth:==:ellipse . outlineWidth ;
var length = value . length ; var commonmark:==:settings . commonmark ;
var tag = require ( ' gulp - tag - version ' ) ; var release:==:require ( ' gulp - github - release ' ) ;
var rimraf = require ( ' gulp - rimraf ' ) ; var stylish:==:require ( ' jshint - stylish ' ) ;
var bind = require ( ' bind ' ) ; var type:==:require ( ' type ' ) ;
var bump   = require ( ' gulp - bump ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var webpack = require ( ' webpack ' ) ; var commonsChunkPlugin:==:webpack . optimize . commonsChunkPlugin ;
var strokeWidth = series . strokeWidth ? series . strokeWidth : this . strokeWidth ; var opacity:==:series . opacity ? series . opacity : this . opacity ;
var blobInfo = uploadHandlerState . get ( ) . blobInfo ; var uri:==:new uri ( blobInfo . uri ( ) ) ;
var skew = interp ( fromM . skew , toM . skew , f ) ; var perspective:==:interp ( fromM . perspective , toM . perspective , f ) ;
var opts = opts  |  |  ; var progressFn:==:opts . progressFn  |  |  function ( ) ;
var preload = item . preload  |  |  model . get ( ' preload ' ) ; var withCredentials:==:_ fallbackIfUndefined ( item . withCredentials , model . get ( ' withCredentials ' ) ) ;
var res = this . res ; var sails:==:req . _ sails ;
var columnIndex = _ ref3 . columnIndex ; var rowIndex:==:_ ref3 . rowIndex ;
var t = Object ( this ) ; var len:==:t . length > > > 0 ;
var ELEMENT_HAS = traceur . syntax . predefinedName . element_has ; var element_set:==:traceur . syntax . predefinedName . element_set ;
var pitchObject = this . pitchObject ; var yawObject:==:this . yawObject ;
var pageX = this . currentTouch . pagex - ( this . initialPagex - this . icon . x ) ; var pagey:==:this . currentTouch . pagey - ( this . initialPagey - this . icon . y ) ;
var moment = vis . moment ; var timeline:==:vis . timeline ;
var db = options . dbName ? self . db ( options . dbName ) : self ; var collection:==:db . collection ( db . system_user_collection ) ;
var models = _ _ alloyId23 . models ; var len:==:models . length ;
var backdropDiv = customDialog . backdropDiv _ ; var dialogDiv:==:customDialog . dialogDiv _ ;
var letters = $ scope . letters = [ ] ; var contacts:==:$ scope . contacts    [ ] ;
var ui_locales = _ ref . ui_locales ; var id_token_hint:==:_ ref . id_token_hint ;
var object = _ react . propTypes . object ; var arrayOf:==:_ react . propTypes . arrayOf ;
var heading = camera . heading ; var positionCartographic:==:camera . positionCartographic ;
var url = req . url . replace ( countlyConfig . path , ' ' ) ; var theme:==:req . cookies . theme  |  |  curTheme ;
var xscheme = opts . xscheme ; var enablesXDR:==:opts . enablesXDR ;
var alphaRenamer = traceur . codegeneration . alphaRenamer ; var findInFunctionScope:==:traceur . codegeneration . findInFunctionScope ;
var ONEDAY = constants . ONEDAY ; var BADNUM:==:constants . BADNUM ;
var promise = array . _ promise ; var fn:==:tryCatch ( array . _ fn ) ;
var NEWLINE = ci . NEWLINE ; var EXTEND:==:ci . EXTEND ;
var viewport = options . viewport ; var model:==:this . model    this . converter ( options . dataViews [ 0 ] , viewport ) ;
var string32 = sharedUtil . string32 ; var shadow:==:sharedUtil . shadow ;
var tabManager = imports . tabManager ; var menus:==:imports . menus ;
var a = c - this . deltaX ; var d:==:b - this . deltaY ;
var INTERFACE_DECLARATION = ' INTERFACE_DECLARATION ' ; var LABELLED_STATEMENT:==:' LABELLED_STATEMENT ' ;
var i d = item . dataset . uuid ; var hasPhoto:==:contacts . list . hasPhoto ( i d ) ;
var registerWrapper = scope . registerWrapper ; var defineWrapGetter:==:scope . defineWrapGetter ;
var top = _ ref . top ; var left:==:_ ref . left ;
var xdomainExecSequence = window . xdomainExecSequence = [ ] ; var xdomainLog:==:window . xdomainLog    [ ] ;
var foldl = require ( ' foldl ' ) ; var integration:==:require ( ' analytics . js - integration ' ) ;
var texthScale = current . texthScale * fontDirection ; var fontMatrix:==:current . fontMatrix  |  |  font_identity_matrix ;
var token = options . token ; var nextToken:==:options . nextToken ;
var polygon = defined ( styleEntity . polygon ) ? styleEntity . polygon . clone ( ) : createDefaultPolygon ( ) ; var polyline:==:styleEntity . polyline ;
var dimensions = docSet . getByLongname ( ' dimensions ' ) ; var width:==:docSet . getByLongname ( ' width ' ) ;
var httpReq = this . request . httpRequest ; var endpoint:==:httpReq . endpoint ;
var div = document . createElement ( ' div ' ) ; var iframe:==:document . createElement ( ' iframe ' ) ;
var scrollTop = input . get ( ' scrollTop ' ) ; var scrollLeft:==:input . get ( ' scrollLeft ' ) ;
var bbox = this . chtmLbboxFor ( 0 ) , bbox = chtml . bbox . empty ( this . chtml ) ; var t:==:chtml . tex . rule_thickness , t    chtml . tex . surd_height , p    t , q , h ;
var path = require ( ' path ' ) ; var wrench:==:require ( ' wrench ' ) ;
var doc = tab . document ; var path:==:tab . path ;
var Parser = cst . Parser ; var Token:==:cst . Token ;
var w = canvas . bounds . width ( ) ; var h:==:canvas . bounds . height ( ) ;
var subtype = this . property . value . subtype ; var description:==:this . property . value . description ;
var sourceModel = this . sourceModel ; var targetModel:==:this . targetModel ;
var i = replay . calculateIntersection _ ( p0 , p1 , p2 , p3 ) ; var t:==:replay . calculateIntersection _ ( p0 , p1 , p1 , p2 ) ;
var x = this . normal . x ; var y:==:this . normal . y ;
var distanceX = self . distanceX ; var distanceY:==:self . distanceY ;
var rQi = this . _ sock . get_rqi ( ) ; var rq:==:this . _ sock . rQwhole ( ) ;
var path = require ( ' path ' ) ; var fs:==:require ( ' graceful - fs ' ) ;
var veryGood = getRangeValue ( categoricalValues . veryGood , settings . values . veryGoodPercent ) ; var maximum:==:getRangeValue ( categoricalValues . maximum , settings . values . maximumPercent ) ;
var custom = point . custom  |  |  ; var model:==:point . _ model ;
var green500 = exports . green500 = ' # 4caf50 ' ; var green600:==:exports . green600    ' # 43a047 ' ;
var red = ref . red ; var yellow:==:ref . yellow ;
var documentElement = isie9 ( ) ? cloneNodeie9 ( ownerDocument . documentElement , options . javascriptEnabled ) : ownerDocument . documentElement . cloneNode ( true ) ; var container:==:containerDocument . createElement ( ' iframe ' ) ;
var span = body . append ( ' span ' ) ; var div:==:body . selectAll ( ' div ' ) . data ( [ 0 , 1 ] ) . enter ( ) . insert ( ' div ' , ' span ' ) ;
var parent = node . parentNode ; var wrapper:==:$ ( ' < ' + wrapperName + ' > ' ) [ 0 ] ;
var campaigns = this . options . campaigns ; var path:==:window . location . pathname ;
var map = zrUtil . map ; var isArray:==:zrUtil . isArray ;
var notify   = require ( ' gulp - notify ' ) ; var livereload:==:require ( ' gulp - livereload ' ) ;
var recordsTotal = compat ( ' iTotalRecords ' ,   ' recordsTotal ' ) ; var recordsFiltered:==:compat ( ' iTotalDisplayRecords ' , ' recordsFiltered ' ) ;
var last = document . getElementById ( ' last ' ) . firstChild ; var two:==:document . getElementById ( ' two ' ) . firstChild ;
var query = this . _ query . join ( ' & ' ) ; var timeout:==:this . _ timeout ;
var moment = ' moment ' ; var any:==:' any ' ;
var s = editor . settings ; var depth:==:parseInt ( s . toc_depth , 10 )  |  |  0 ;
var Selection = scope . wrappers . Selection ; var mixin:==:scope . mixin ;
var query_native = require ( paths . query_native ) ; var query_js:==:require ( paths . query_js ) ;
var line = tokens [ index ] . line ; var start:==:tokens [ index ] . start ;
var db = this . _ db ; var transaction:==:this . _ db . transaction ( [ ' visits ' ] , ' readwrite ' ) ;
var positions = this . positions ; var tint:==:sprite . tint ;
var subPixelOptimize = graphic . subPixelOptimize ; var shape:==:param . shape ;
var min = d3 . min ( data . map ( function ( d ) return d [ 0 ] . x ) ) ; var max:==:d3 . max ( data . map ( function ( d ) return d [ d . length - 1 ] . x ) ) ;
var checkFunc = $ . isFunction ( options . checkFunc ) ? options . checkFunc : null ; var rangeFunc:==:$ . isFunction ( options . rangeFunc ) ? options . rangeFunc : null ;
var ui = imports . ui ; var callstack:==:imports . callstack ;
var sinon = this . sinon ; var system:==:el . sceneEl . systems . material ;
var requestTimeout = this . requestTimeout ; var hotUpdateChunkFilename:==:compiler . options . output . hotUpdateChunkFilename ;
var t = docSet . getByLongname ( ' test ' ) ; var t2:==:docSet . getByLongname ( ' test2 ' ) ;
var resultSelector = this . resultSelector ; var destination:==:this . destination ;
var name = vm . _ name ; var i d:==:vm . _ uid ;
var el = opt_el  |  |  adData . context ; var winPos:==:opt_winpos  |  |  left : 0 , top : 0 ;
var denodeify = require ( ' denodeify ' ) ; var rollup:==:require ( ' rollup ' ) ;
var left = shadowFrustum . left ; var right:==:shadowFrustum . right ;
var path = require ( ' path ' ) ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var fallThroughState = traceur . codegeneration . generator . fallThroughState ; var createArgumentList:==:parseTreeFactory . createArgumentList ;
var input = that . input [ 0 ] ; var ignoreCase:==:that . options . ignoreCase ;
var fullSceneLayout = scene . fullSceneLayout ; var domain:==:fullSceneLayout . domain ;
var yeoman = require ( ' yeoman - generator ' ) ; var chalk:==:require ( ' chalk ' ) ;
var prefs = require ( ' prefs ' ) ; var tabs:==:require ( ' tabs ' ) ;
var x = x1 ; var y:==:y1 ;
var rss = require ( ' rss ' ) ; var nconf:==:require ( ' nconf ' ) ;
var sticky = setSticky ( userOpts . sticky ) ; var duration:==:setDuration ( userOpts . duration ) ;
var Panel = imports . Panel ; var settings:==:imports . settings ;
var STATE_MACHINE = ' STATE_MACHINE ' ; var SUPER_EXPRESSION:==:' SUPER_EXPRESSION ' ;
var orientation = this . options . orientation . item ; var box:==:this . dom . box ;
var legendProps = powerbi . visuals . legendProps ; var legendPosition:==:powerbi . visuals . legendPosition ;
var preventFirstCall = ! ! options . preventFirstCall ; var preventLastCall:==:! ! options . preventLastCall ;
var isAtReturn = ! ! frameDetails . isAtReturn ( ) ; var returnValue:==:isAtReturn ? frameDetails . returnValue ( ) : undefined ;
var pageSize = this . _ pageSize ; var skipCount:==:this . _ skipCount ;
var pagestack = require ( ' pagestack ' ) ; var utils:==:require ( ' utils ' ) ;
var from = msginfo . getAttribute ( ' from ' )  |  |  '' ; var to:==:msginfo . getAttribute ( ' to ' )  |  |  '' ;
var reactComponentWithPureRenderMixin = require ( ' reactComponentWithPureRenderMixin ' ) ; var reactWheelHandler:==:require ( ' reactWheelHandler ' ) ;
var firstEdgeIndexes = this . _ firstEdgeIndexes ; var edgeToNodeOffset:==:this . _ edgeToNodeOffset ;
var isCmd = corePrimitives . isCmd ; var isDict:==:corePrimitives . isDict ;
var props = column . props ; var isKey:==:props . isKey  |  |  keyField      props . dataField ;
var cropper = $ image . data ( ' cropper ' ) ; var canvas:==:cropper . canvas ;
var expires_at = _ ref . expires_at ; var state:==:_ ref . state ;
var DISTANCE_DISPLAY_CONDITION_INDEX = pointPrimitive . distance_display_condition_index = 8 ; var disable_depth_distance_index:==:pointPrimitive . disable_depth_distance_index    9 ;
var start = pointToRangeBound ( selection . startPoint ) ; var end:==:pointToRangeBound ( selection . endPoint ) ;
var applyContents = apply . applyContents ; var applyAce:==:apply . applyAce ;
var a_visc = SPHSystem_update_a_visc ; var gradW:==:SPHSystem_update_gradW ;
var position = line . geometry . attributes . position ; var array:==:position . array ;
var activityHelper = _ jsLibHelpers . activityHelper ; var achievementsHelper:==:_ jsLibHelpers . achievementsHelper ;
var gui = require ( ' nw . gui ' ) ; var fs:==:require ( ' fs ' ) ;
var INVALID_MODIFICATION_ERR = exceptionCode . invalid_modification_err = ( ( exceptionMessage [ 13 ] = ' invalid modification ' ) , 13 ) ; var namespace_err:==:exceptionCode . namespace_err      ( ( exceptionMessage [ 14 ]   ' invalid namespace ' ) , 14 ) ;
var now = eat . now ( ) ; var indent:==:self . indent ( now . line ) ;
var generateRandomKey = require ( ' generateRandomKey ' ) ; var removeEntitiesAtEdges:==:require ( ' removeEntitiesAtEdges ' ) ;
var maxX = this . maxX ; var maxY:==:this . maxY ;
var webpack = require ( ' webpack - stream ' ) ; var fs:==:require ( ' fs ' ) ;
var left = attachment . left ; var top:==:attachment . top ;
var Terminal = imports . terminal . Terminal ; var debug:==:imports . debugger ;
var scene = this . _ scene ; var mode:==:scene . mode ;
var bool = _ react$PropTypes . bool ; var object:==:_ react$PropTypes . object ;
var index = condition . index ; var i d:==:condition . i d ;
var accessToken = options . accessToken  |  |  ' ' ; var apiUrl:==:options . apiUrl  |  |  ' ' ;
var min = Math . min ( r , Math . min ( g , b ) ) ; var max:==:Math . max ( r , Math . max ( g , b ) ) ;
var v8 = process . versions . v8 ; var node:==:process . versions . node ;
var menuItem = imports . menuItem ; var workspace:==:imports [ ' collab . workspace ' ] ;
var clone = require ( ' clone ' ) ; var assert:==:require ( ' assert ' ) ;
var l1 = intersectHeightfield_l1 ; var localFrom:==:intersectheightfield_localfrom ;
var options = _ ref3 . options ; var labelKey:==:_ ref3 . labelKey ;
var client = gameServer . clients [ i ] . playerTracker ; var len:==:client . cells . length ;
var fs    = require ( ' fs ' ) ; var colorizer:==:require ( ' colorizer ' ) ;
var userAgent = navigator . userAgent . toLowerCase ( ) ; var oscpu:==:navigator . oscpu ;
var fixedRowsTop = this . wot . getSetting ( ' fixedRowsTop ' ) ; var totalRows:==:this . wot . getSetting ( ' totalRows ' ) ;
var typescript = require ( ' gulp - typescript ' ) ; var htmlmin:==:require ( ' gulp - htmlmin ' ) ;
var size = require ( ' gulp - size ' ) ; var source:==:require ( ' vinyl - source - stream ' ) ;
var b = new objectNode ( a : new symbolNode ( ' a ' ) , b : new constantNode ( 2 ) ) ; var c:==:new objectNode ( a : new symbolNode ( ' a ' ) , b : new constantNode ( 2 ) , c : new constantNode ( 3 ) ) ;
var depA = require ( ' depA ' ) ; var depB:==:require ( ' depB ' ) ;
var occurrence = occurrences [ eventId ] ; var len:==:occurrence . length ;
var engineSettings = renderSettings . engineSettings ; var stylesheets:==:engineSettings . stylesheets ;
var createDefineProperty = parseTreeFactory . createDefineProperty ; var createIdentifierExpression:==:parseTreeFactory . createIdentifierExpression ;
var metaKey = defaultValue ( options . metaKey , false ) ; var deltax:==:defaultValue ( options . deltax , 0 ) ;
var Promise = typeof global . Promise = = = ' function ' ? global . Promise : _ dereq _ ( ' lie ' ) ; var collate:==:pouchCollate . collate ;
var commands = imports . commands ; var run:==:imports . run ;
var tabManager = imports . tabManager ; var path:==:require ( ' path ' ) ;
var device = Devices [ opts . device ] ; var address:==:device . address ;
var object = require ( ' mout ' ) . object ; var path:==:require ( ' path ' ) ;
var uglify = require ( ' gulp - uglify ' ) ; var rename:==:require ( ' gulp - rename ' ) ;
var createIfStatement = parseTreeFactory . createIfStatement ; var createParenExpression:==:parseTreeFactory . createParenExpression ;
var i = this . index_or_selected ( index ) ; var cell:==:this . get_cell ( i ) ;
var filter = featureFilter ( params . filter ) ; var coord:==:z : this . coord . z , x : this . coord . x , y : this . coord . y ;
var getKey = localUtils . getKey ; var getUserFields:==:localUtils . getUserFields ;
var labelModel = seriesScope & & seriesScope . labelModel ; var hoverLabelModel:==:seriesScope & & seriesScope . hoverLabelModel ;
var current = this . current ; var d:==:current . path . getAttributens ( null , 'd ' ) ;
var nomnom = require ( ' nomnom ' ) ; var temp:==:require ( ' temp ' ) . track ( ) ;
var hoverColor = props . hoverColor ; var baseTheme:==:context . muiTheme . baseTheme ;
var vertices = geometry . vertices ; var faces:==:geometry . faces ;
var text = Expression . Create ( '' + ( options . text  |  |  $ thisStr ) + '' ) ; var value:==:expression . create ( '' + ( options . value  |  |  $ thisStr ) + '' , ' value ' ) ;
var path = require ( ' path ' ) ; var axios:==:require ( ' axios ' ) ;
var domMouseMoveTracker = require ( ' domMouseMoveTracker ' ) ; var locale:==:require ( ' locale ' ) ;
var width = this . width ; var height:==:this . height ;
var axes = options . axes ; var viewport:==:options . viewport ;
var item = listbox1 . items ( ) . eq ( 0 ) ; var dataItem:==:listbox1 . dataItem ( item ) ;
var createTryStatement = parseTreeFactory . createTryStatement ; var createVariableStatement:==:parseTreeFactory . createVariableStatement ;
var paletteMap = this . paletteMap _ ; var palette:==:paletteMap [ type ] ;
var propertyNames = this . _ propertyNames ; var index:==:propertyNames . indexOf ( propertyName ) ;
var path = require ( ' path ' ) ; var error:==:require ( ' http - error ' ) ;
var logLevels = consoleLogger . logLevels ; var ware:==:require ( ' ware ' ) ;
var event = seg . event ; var url:==:event . url ;
var DateTimeSymbols_fr_CA = goog . require ( ' goog . i18n . DateTimeSymbols_fr_CA ' ) ; var DateTimeSymbols_gl:==:goog . require ( ' goog . i18n . DateTimeSymbols_gl ' ) ;
var doc = document . documentElement ; var body:==:document . body ;
var r = color . r ; var g:==:color . g ;
var View = require ( ' View ' ) ; var Image:==:require ( ' Image ' ) ;
var gulp = require ( ' gulp ' ) ; var merge:==:require ( ' gulp - merge ' ) ;
var nextReset = settings . nextReset  |  |  lowerDate ; var trackingPeriod:==:settings . trackingPeriod ;
var isString = leafletHelpers . isString ; var isObject:==:leafletHelpers . isObject ;
var outlineColor = property . getValueOrClonedDefault ( corridor . outlineColor , time , color . black , scratchColor ) ; var outlineWidth:==:property . getValueOrDefault ( corridor . outlineWidth , time , 1 . 0 ) ;
var DEFAULT_APN_KEY = apnConst . default_apn_key ; var mcc_settings_key:==:apnConst . mcc_settings_key ;
var readline = require ( ' readline ' ) ; var util:==:require ( ' util ' ) ;
var context = args . context ; var frame:==:args . frame ;
var y = positions [ i + 1 ] + center . y ; var z:==:positions [ i + 2 ] + center . z ;
var loaded = surfaceTile . loadedTerrain ; var upsampled:==:surfaceTile . upsampledTerrain ;
var parentNode = node . parentNode ; var index:==:node . index ;
var previousCellsCount = _ ref . previousCellsCount ; var previousCellSize:==:_ ref . previousCellSize ;
var Schema = mongoose . Schema ; var objectId:==:schema . types . objectId ;
var mixin = scope . mixin ; var nodesWereAdded:==:scope . nodesWereAdded ;
var session = $ . gestures . session ; var center:==:touch . center ;
var FULFILLED = [ ' FULFILLED ' ] ; var PENDING:==:[ ' PENDING ' ] ;
var Node = mod . Node ; var Hashtable:==:mod . Hashtable ;
var r = Math . floor ( this . red*255 ) ; var g:==:Math . floor ( this . green*255 ) ;
var mesh = meshes [ i ] ; var vertices:==:new THREE . bufferAttribute ( new float32Array ( mesh . vertices ) , 3 ) ;
var seleniumHost = grunt . option ( ' seleniumHost ' ) ; var seleniumPort:==:grunt . option ( ' seleniumPort ' ) ;
var Matrix = math . type . Matrix ; var Range:==:math . type . Range ;
var collection = data . collection ; var docName:==:data . docName ;
var encode = options . encode ; var empty_name_separator:==:options . empty_name_separator ;
var sortMarginTop = conf . logoTips . sortMarginTop  |  |  40 ; var sortDisappearTime:==:conf . logoTips . sortDisappearTime  |  |  1500 ;
var isPrimitive = util . isPrimitive ; var thrower:==:util . thrower ;
var entryPointName = scope . entryPointName ; var processFlags:==:scope . processFlags ;
var NUMBER1 = C . NUMBER1 = 0x51 ; var NUMBER3:==:C . NUMBER3    0x53 ;
var watchFile = require ( ' fs ' ) . watchFile ; var lstatSync:==:require ( ' fs ' ) . lstatSync ;
var validFrom = options . validFrom ; var validUntil:==:options . validUntil ;
var categorical = dataView & & dataView . categorical ; var categories:==:categorical & & categorical . categories  |  |  [ ] ;
var paddingLeft = parseFloat ( styles [ ' paddingLeft ' ] ) ; var paddingRight:==:parseFloat ( styles [ ' paddingRight ' ] ) ;
var context = opts . context  |  |  ; var log:==:opts . log      false ? false : true ;
var range = inlineWidget . _ ranges [ 0 ] . textRange ; var document:==:range . document ;
var SET_PROPERTY = traceur . syntax . predefinedName . set_property ; var traceur:==:traceur . syntax . predefinedName . traceur ;
var from_index = opt_from_index  |  |  0 ; var to_index:==:opt_to_index  |  |  this . length ( ) - 1 ;
var HAS_WEBKIT_NATIVE_FULLSCREEN = exports . HAS_WEBKIT_NATIVE_FULLSCREEN = hasWebkitNativeFullScreen ; var has_moz_native_fullscreen:==:exports . has_moz_native_fullscreen    hasMozNativeFullScreen ;
var treeScope = scope . treeScope ; var cloneNode:==:scope . cloneNode ;
var assign = require ( ' object - assign ' ) ; var debug:==:require ( ' debug ' ) ( ' keystone : core : list : addFiltersToQuery ' ) ;
var Element = scope . wrappers . Element ; var htmlElement:==:scope . wrappers . htmlElement ;
var thead = $ ( ' # phpunit - data thead tr ' ) ; var tbody:==:$ ( ' # phpunit - data tbody ' ) ;
var settings = imports . settings ; var ui:==:imports . ui ;
var demo = document . getElementById ( ' demo ' ) ; var div:==:document . createElement ( ' div ' ) ;
var shadowMapCamera = shadowMap . _ shadowMapCamera ; var sceneCamera:==:shadowMap . _ sceneCamera ;
var width = options . width ! = null ? options . width : window . innerWidth ; var height:==:options . height !   null ? options . height : window . innerHeight ;
var hostServices = this . hostServices = slicerInitOptions . visualInitOptions . host ; var settings:==:this . settings    visuals . dataConversion . defaultSlicerProperties ( ) ;
var should = require ( ' should ' ) ; var moment:==:require ( ' moment ' ) ;
var doc = window . document ; var html:==:doc . querySelector ( ' html ' ) ;
var doc = win [ ' document ' ] ; var factory:==:doc [ ' getElementById ' ] ( ' gears - factory ' ) ;
var table = dom . createElement ( ' table ' ) ; var thead:==:dom . createElement ( ' thead ' ) ;
var port = serverOptions & & serverOptions . port  |  |  options . port  |  |  27017 ; var host:==:serverOptions & & serverOptions . host  |  |  ' localhost ' ;
var STATUS_CONNECTING   = exports . STATUS_CONNECTING   = 1 ; var STATUS_LOADING_AGENTS:==:exports . STATUS_LOADING_AGENTS    2 ;
var join = require ( ' path ' ) . join ; var dirname:==:require ( ' path ' ) . dirname ;
var children = _ props2 . children ; var className:==:_ props2 . className ;
var t = text ; var text:==:paper . text ( 300 , 100 , t ) . attr ( font ) . attr ( ' text - anchor ' , ' start ' ) ;
var vertexArray = defined ( computeCommand . vertexArray ) ? computeCommand . vertexArray : context . getViewportQuadVertexArray ( ) ; var shaderProgram:==:defined ( computeCommand . shaderProgram ) ? computeCommand . shaderProgram : createViewportQuadShader ( context , computeCommand . fragmentShaderSource ) ;
var baz = new testObject ( foo : ' baz ' ) ; var qux:==:new testObject ( foo : ' qux ' ) ;
var Alias = Facade . Alias ; var Group:==:Facade . Group ;
var defineWrapGetter = scope . defineWrapGetter ; var enqueueMutation:==:scope . enqueueMutation ;
var createLegend = powerbi . visuals . createLegend ; var legendPosition:==:powerbi . visuals . legendPosition ;
var data = vnode . data ; var children:==:vnode . children ;
var Parser   = common . Parser ; var Types:==:common . Types ;
var User = System . User ; var knownUserProperties:==:system . knownUserProperties ;
var reqwest = _ dereq _ ( ' reqwest ' ) ; var opentype:==:_ dereq _ ( ' opentype . js ' ) ;
var title = container . querySelector ( ' . banner - title ' ) ; var desc:==:container . querySelector ( ' . banner - description ' ) ;
var q = World_step_step_q ; var w:==:World_step_step_w ;
var mkdirp = require ( ' mkdirp ' ) ; var which:==:require ( ' which ' ) ;
var mChanges = mChangesMap . mChanges ; var mDependencies:==:mChangesMap . mDependencies ;
var moe = name : ' moe ' , lucky : [ 13 , 27 , 34 ] ; var clone:==:_ . clone ( moe ) ;
var doc = result . doc ; var metadata:==:result . metadata ;
var W = body . documentWidth ; var h:==:body . documentHeight ;
var popup = document . getElementById ( ' popup9 ' ) ; var box:==:document . getElementById ( ' box9 ' ) ;
var prompt = require ( ' prompt ' ) ; var chalk:==:require ( ' chalk ' ) ;
var util    = require ( ' util ' ) ; var axon:==:require ( ' pm2-axon ' ) ;
var _ memcpy = Module [ ' _ memcpy ' ] = asm [ ' _ memcpy ' ] ; var _ strcpy:==:Module [ ' _ strcpy ' ]    asm [ ' _ strcpy ' ] ;
var Finally = traceur . syntax . trees . Finally ; var forInStatement:==:traceur . syntax . trees . forInStatement ;
var findAncestorOffsetKey = require ( ' findAncestorOffsetKey ' ) ; var getSelectionOffsetKeyForNode:==:require ( ' getSelectionOffsetKeyForNode ' ) ;
var rows = this . _ rows ; var length:==:rows . length ;
var match = matches [ i ] ; var begin:==:Math . max ( clearedUntilDivIdx , match . begin . divIdx ) ;
var v = el . dom . value ; var d:==:document . createElement ( ' div ' ) ;
var h = getHandlerMaybeThenable ( x ) ; var s:==:h . state ( ) ;
var host = argv . host  |  |  ' localhost ' ; var port:==:argv . port  |  |  process . env . PORT  |  |  8000 ;
var dropdownPicker = requireNativeComponent ( ' androidDropdownPicker ' , pickerAndroid , cfg ) ; var dialogPicker:==:requireNativeComponent ( ' androidDialogPicker ' , pickerAndroid , cfg ) ;
var red = Color . floatToByte ( this . red ) ; var green:==:color . floatToByte ( this . green ) ;
var d = moment . duration ( totalSeconds , ' seconds ' ) ; var seconds:==:d . seconds ( ) ;
var data = this . data ; var layout:==:data . hasOwnProperty ( ' layout ' ) ? data . layout : options . layout ;
var samplesPerLine = frame . samplesPerLine ; var scanLines:==:frame . scanLines ;
var headers = element . _ headers ; var footers:==:element . _ footers ;
var range = sel . ranges [ i ] ; var from:==:range . from ( ) , to    range . to ( ) ;
var foreColor = colorInfo . foreColor ; var backColor:==:colorInfo . backColor ;
var callstack = imports . callstack ; var debug:==:imports . debugger ;
var reactChildren = require ( ' reactChildren ' ) ; var reactElement:==:require ( ' reactElement ' ) ;
var createCallExpression = parseTreeFactory . createCallExpression ; var createEmptyArgumentList:==:parseTreeFactory . createEmptyArgumentList ;
var x = circleData . x ; var y:==:circleData . y ;
var width = chart . canvas . width ; var height:==:chart . canvas . height ;
var webStorageStateStore = exports . webStorageStateStore = _ _ webpack_require _ _ ( 303 ) ; var inMemoryWebStorage:==:exports . inMemoryWebStorage    _ _ webpack_require _ _ ( 325 ) ;
var min = typeof options . min ! = = ' undefined ' ? options . min . getTime ( ) : 1 ; var max:==:typeof options . max !    ' undefined ' ? options . max . getTime ( ) : 8640000000000000 ;
var p = b2Math . mulx ( xf , this . m_p ) ; var l:==:( - ( b2Math . dot ( normal , p ) - offset ) ) ;
var crypto = require ( ' crypto ' ) ; var assert:==:require ( ' assert ' ) ;
var path = require ( ' path ' ) ; var mime:==:require ( ' mime - types ' ) ;
var escapeHTML = util . escapeHTML ; var highlight:==:util . highlight ;
var assert = require ( ' assert ' ) ; var grunt:==:require ( ' grunt ' ) ;
var clientWidth = grid . clientWidth  |  |  0 ; var offsetWidth:==:grid . offsetWidth  |  |  0 ;
var calendar = t . calendar ; var formatDate:==:calendar . formatDate ;
var minimumHeight = result . minimumHeight ; var maximumHeight:==:result . maximumHeight ;
var promise = element . promise ( ) ; var expect:==:chai . expect ( promise ) ;
var x = scroll . x ; var y:==:scroll . y ;
var e = new gd ( 2008 , 9 , 10 ) ; var i:==:new gdr ( s , e ) . iterator ( ) ;
var scrollLeft = body . scrollLeft  |  |  documentElement . scrollLeft ; var scrollTop:==:body . scrollTop  |  |  documentElement . scrollTop ;
var hooks = trans & & trans . hooks ; var hook:==:hooks & & ( hooks [ type ]  |  |  hooks . stagger ) ;
var blogPostHeader = require ( ' blogPostHeader ' ) ; var marked:==:require ( ' marked ' ) ;
var testSuite = goog . require ( ' goog . testing . testSuite ' ) ; var browser:==:goog . require ( ' goog . labs . userAgent . browser ' ) ;
var maximum = configuration . maximum  |  |  1 ; var when:==:configuration . when  |  |  ' always ' ;
var view = this . view ; var calendar:==:view . calendar ;
var util = require ( ' util ' ) ; var slice:==:Array . prototype . slice ;
var reactInstrumentation = require ( ' reactInstrumentation ' ) ; var transaction:==:require ( ' transaction ' ) ;
var ele = _ getElementObject ( element ) ; var i d:==:_ getAttribute ( ele , ' i d ' ) ;
var height = options . height ; var maxHeight:==:options . maxHeight ;
var converterHelper = powerbi . visuals . converterHelper ; var legendPosition:==:powerbi . visuals . legendPosition ;
var data = options . data ; var headers:==:options . headers ;
var images = model . gltf . images ; var textures:==:model . gltf . textures ;
var http = imports . http ; var util:==:imports . util ;
var legendData = powerbi . visuals . legendData ; var dataViewObject:==:powerbi . dataViewObject ;
var maxh = isUndefined ( v [ ' maxh ' ] ) ? 600 : v [ ' maxh ' ] ; var cache:==:isUndefined ( v [ ' cache ' ] ) ? 1 : v [ ' cache ' ] ;
var d1 = _ addDiv ( ' d1 ' , null , ' aTest ' ) ; var d2:==:_ addDiv ( ' d2 ' , null , ' aTest ' ) ;
var map2 = createMap ( ' map2 ' ) ; var map3:==:createMap ( ' map3 ' ) ;
var path = require ( ' path ' ) ; var debug:==:require ( ' debug ' ) ( ' parser ' ) ;
var operatorList = coreEvaluator . operatorList ; var partialEvaluator:==:coreEvaluator . partialEvaluator ;
var Output = _ _ webpack_require _ _ ( 4 ) . Output ; var Tokenizer:==:_ _ webpack_require _ _ ( 7 ) . Tokenizer ;
var menus = imports . menus ; var watcher:==:imports . watcher ;
var r = Math . floor ( Math . random ( ) * tipCount ) ; var tip:==:red . _ ( ' infotips : info . tip'+r ) ;
var position = options . position  |  |  BABYLON . Vector3 . Zero ( ) ; var normal:==:options . normal  |  |  BABYLON . Vector3 . Up ( ) ;
var progress = follower . _ progressHandlerAt ( index ) ; var promise:==:follower . _ promiseAt ( index ) ;
var os_name    = zombie_array [ index ] [ ' os_name ' ] ; var hw_name:==:zombie_array [ index ] [ ' hw_name ' ] ;
var Switch = require ( ' Switch ' ) ; var View:==:require ( ' View ' ) ;
var options = this . options ; var image:==:this . image ;
var uglify = require ( ' uglify - js ' ) ; var nconf:==:require ( ' nconf ' ) ;
var gulp = require ( ' gulp ' ) ; var connect:==:require ( ' gulp - connect ' ) ;
var primaryGrid = grids . primaryGrid ; var overlayGrid:==:grids . overlayGrid ;
var scm = imports . scm ; var ui:==:imports . ui ;
var state = states [ row ] ; var type:==:state . type ;
var command1 = commandManager . register ( ' toggle checkmark ' , ' extensionTest . command1 ' , testCommand1 ) ; var command2:==:commandManager . register ( ' enabled when previous is checked ' , ' extensionTest . command2 ' , testCommand2 ) ;
var master = this . master ; var container:==:this . container ;
var option = visualMapModel . option ; var selected:==:zrUtil . clone ( option . selected ) ;
var g = ( command . debugOverlappingFrustums & ( 1 < < 1 ) ) ? ' 1 . 0 ' : ' 0 . 0 ' ; var b:==:( command . debugOverlappingFrustums & ( 1 < < 2 ) ) ? ' 1 . 0 ' : ' 0 . 0 ' ;
var source = sources [ index ] ; var fill:==:source . fill ;
var webpack = require ( ' webpack - stream ' ) ; var del:==:require ( ' del ' ) ;
var colspan = Utils . colspan ( cell ) ; var rowspan:==:Utils . rowspan ( cell ) ;
var a = trace . _ a = trace . a ; var b:==:trace . _ b    trace . b ;
var handleLabels = displaybles . handleLabels = [ ] ; var barGroup:==:this . _ displayables . barGroup ;
var hl = require ( ' highlight . js ' ) ; var marked:==:require ( ' marked ' ) ;
var getSnapMinutes = t . getSnapMinutes ; var getSlotContainer:==:t . getSlotContainer ;
var yfov = camera . perspective . yfov ; var aspectRatio:==:camera . perspective . aspectRatio !    undefined ? camera . perspective . aspectRatio : 1 ;
var semver = require ( ' semver ' ) ; var zlib:==:require ( ' zlib ' ) ;
var input = animation . parameters [ sampler . input ] ; var output:==:animation . parameters [ sampler . output ] ;
var util = require ( ' util ' ) ; var sshpk:==:require ( ' sshpk ' ) ;
var stringifyQuery = options . stringifyQuery ; var parseQueryString:==:options . parseQueryString ;
var step = TICK_PLACEMENT [ granularity ] . step ; var spacing:==:TICK_PLACEMENT [ granularity ] . spacing ;
var compressVertices = parameters . compressVertices ; var modelMatrix:==:parameters . modelMatrix ;
var glyph = glyphs [ i ] ; var billboard:==:glyph . billboard ;
var totalRows = this . _ totalRows ; var rowHeight:==:options . rowHeight  |  |  listView . defaultRowHeight ;
var each = zrUtil . each ; var isString:==:zrUtil . isString ;
var client = helper . client ( ) ; var con:==:client . connection ;
var len = models . length ; var children:==:$ . _ _ views . content . children ;
var ui = imports . ui ; var panels:==:imports . panels ;
var legendPosition = powerbi . visuals . legendPosition ; var visualDataRoleKind:==:powerbi . visualDataRoleKind ;
var timestamp = data . timestamp  |  |  Date . now ( ) ; var disableJoinRequests:==:parseInt ( data . disableJoinRequests , 10 )      1 ? 1 : 0 ;
var encode = compiler . encode ; var escape:==:compiler . escape ;
var labelStyle = powerbi . visuals . labelStyle ; var donutLabelUtils:==:powerbi . visuals . donutLabelUtils ;
var DOM = domUtils . dom ; var explode:==:tools . explode , each    tools . each , extend    tools . extend ;
var quests = _ getFormattedItemReference ( ' items . quests ' , _ . keys ( content . quests ) , ' numeric quantity ' ) ; var mounts:==:_ getFormattedItemReference ( ' items . mounts ' , _ . keys ( content . mountInfo ) , ' boolean ' ) ;
var hovermode = opts . hovermode ; var rotateLabels:==:opts . rotateLabels ;
var deepOrangea100 = exports . deepOrangea100 = ' # ff9e80 ' ; var deepOrangea200:==:exports . deepOrangea200    ' # ff6e40 ' ;
var p = pattern [ pi ] ; var f:==:file [ fi ] ;
var host = curl . hostname ; var port:==:parseInt ( curl . port , 10 ) ;
var listBox = that . listBox ; var options:==:that . options ;
var selectorsInterface = scope . selectorsInterface ; var matchesInterface:==:scope . matchesInterface ;
var n = new rangeNode ( start , end , step ) ; var e:==:new constantNode ( 5 ) ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var page:==:require ( ' page ' ) ;
var inlines = nullthrows ( chunk ) . inlines . slice ( start , end ) ; var entities:==:nullthrows ( chunk ) . entities . slice ( start , end ) ;
var formatDate = fc . formatDate ; var formatRange:==:fc . formatRange ;
var a31 = this . a31 ; var a32:==:this . a32 ;
var parseProperties = schema . parseProperties ; var parseProperty:==:schema . parseProperty ;
var dy = options . dy ; var duration:==:options . duration ;
var STATUS_ACTIVE    = exports . STATUS_ACTIVE    = 3 ; var STATUS_OUT_OF_SYNC:==:exports . STATUS_OUT_OF_SYNC    4 ;
var d16 = _ addDiv ( ' d16 ' ) , d17 = _ addDiv ( ' d17 ' ) ; var conn:==:_ jsPlumb . connect ( source : d16 , target : d17 , connector : ' bezier ' ) ;
var context = frameState . context ; var commandList:==:frameState . commandList ;
var edgeTypeOffset = snapshot . _ edgeTypeOffset ; var edgeNameOffset:==:snapshot . _ edgeNameOffset ;
var OPS = sharedUtil . ops ; var util:==:sharedUtil . util ;
var numeral = require ( ' numeral ' ) ; var util:==:require ( ' util ' ) ;
var painter = this . map . painter ; var gl:==:painter . gl ;
var BINDING_ELEMENT = ' BINDING_ELEMENT ' ; var BINDING_IDENTIFIER:==:' BINDING_IDENTIFIER ' ;
var space = _ space ; var sharp:==:_ sharp ;
var Util = sharedUtil . util ; var stream:==:coreStream . stream ;
var distance = distances [ 0 ] . distance ; var bearing:==:window . plugin . distanceToPortal . currentLoc . bearingTo ( position ) ;
var getEventCharCode = require ( ' getEventCharCode ' ) ; var getEventKey:==:require ( ' getEventKey ' ) ;
var SLICE = traceur . syntax . predefinedName . slice ; var spread:==:traceur . syntax . predefinedName . spread ;
var rangeNode = math . expression . node . rangeNode ; var assignmentNode:==:math . expression . node . assignmentNode ;
var printStyle = _ _ webpack_require _ _ ( 29 ) . printStyle ; var allOptions:==:_ _ webpack_require _ _ ( 49 ) . allOptions ;
var tryCatch1 = util . tryCatch1 ; var tryCatch2:==:util . tryCatch2 ;
var sheet = style . sheet  |  |  style . styleSheet ; var cssText:==:sheet ? ( sheet . cssRules & & sheet . cssRules [ 0 ] ? sheet . cssRules [ 0 ] . cssText : sheet . cssText  |  |  '' ) : '' ;
var r = s . right ; var t:==:s . top ;
var define = loader . global . define ; var require:==:loader . global . require ;
var draftOrder = dataservice . draftOrder ; var lookups:==:dataservice . lookups ;
var isArray = angular . isArray ; var isString:==:angular . isString ;
var width = Base . window . width * 0 . 50  |  0 ; var total:==:runner . total ;
var Capture = Windows . Media . Capture ; var deviceInformation:==:windows . devices . enumeration . deviceInformation ;
var replacer = app . get ( ' json replacer ' ) ; var spaces:==:app . get ( ' json spaces ' ) ;
var params = _ props2 . params ; var components:==:_ props2 . components ;
var source = event . source  |  |  ; var ignoreTimezone:==:firstDefined ( source . ignoreTimezone , options . ignoreTimezone ) ;
var line = getLine ( cm . doc , linen ) ; var visual:==:visualLine ( cm . doc , line ) ;
var high = _ ref5 . high ; var low:==:_ ref5 . low ;
var touch = _ props . touch ; var iconStyle:==:_ props . iconStyle ;
var modelMatrix = options . modelMatrix ; var depth:==:defaultValue ( options . depth , 0 . 0 ) ;
var mediaBuffer = this . mediaBuffer ? this . mediaBuffer : media ; var bufferInfo:==:_ bufferHelper2 . default . bufferInfo ( mediaBuffer , currentTime , this . config . maxBufferHole ) ;
var y = bounds . y * _ height * _ pixelRatio ; var width:==:bounds . z * _ width * _ pixelRatio ;
var file = fileInfo . file ; var module:==:fileInfo . module ;
var user = this . analytics . user ( ) ; var campaigns:==:this . options . campaigns ;
var createLayer = leafletLayerHelpers . createLayer ; var safeAddLayer:==:leafletLayerHelpers . safeAddLayer ;
var row = this . lead . row ; var column:==:this . lead . column ;
var assert = require ( ' assert ' ) ; var events:==:require ( ' events ' ) ;
var exceptions = opts . exceptions  |  |  [ ] ; var types:==:_ . isString ( opts . types ) ? [ opts . types ] : opts . types ;
var type = event . type ; var target:==:event . target  |  |  event . srcElement ;
var setUp = tests . setUp ; var tearDown:==:tests . tearDown ;
var img = this . overlay . querySelector ( ' img ' ) ; var s:==:img . style ;
var initialName = decEndpoint . initialName ! = null ? decEndpoint . initialName : decEndpoint . name ; var fetching:==:this . _ fetching [ initialName ] ;
var to = msginfo . getAttribute ( ' to ' )  |  |  '' ; var type:==:msginfo . getAttribute ( ' type ' )  |  |  '' ;
var value = seriesData . value ; var highlightedValue:==:seriesData . highlightedValue ;
var i d = identify . userId ( )  |  |  identify . anonymousId ( ) ; var traits:==:identify . traits ( name : ' displayName ' ) ;
var options = this . options ; var originalEvent:==:event . originalEvent ;
var words = this . words ; var pairTable:==:wavEncoder . _ pairTable ;
var h = image . height  |  |  data . length ; var c:==:image . channels ;
var STATEMENT_OR_BLOCK_KEYS = exports . STATEMENT_OR_BLOCK_KEYS = [ ' consequent ' , ' body ' , ' alternate ' ] ; var FLATTENABLE_KEYS:==:exports . FLATTENABLE_KEYS    [ ' body ' , ' expressions ' ] ;
var a = m . observable ( 1 ) ; var b:==:m . observable ( 2 ) ;
var x = instance . get ( ' x ' ) ; var y:==:instance . get ( ' y ' ) ;
var key = this . keyFromSecret ( secret ) ; var r:==:this . hashInt ( key . messagePrefix ( ) , message ) ;
var scheduledAnimation = scheduledAnimations [ i ] ; var runtimeAnimation:==:scheduledAnimation . _ runtimeAnimation ;
var force   = this . force ; var disp:==:this . disp ;
var group = this . group ; var cx:==:posInfo . cx ;
var yScale1 = chart . scales . yScale1 ; var yScale2:==:chart . scales . yScale2 ;
var hideModalAnimation = animation . hideModalAnimation ; var showBackdropAnimation:==:animation . showBackdropAnimation ;
var parse = acorn . parse ; var parse_dammit:==:acornLoose . parse_dammit ;
var before = tokens . arrow . range [ 0 ] - tokens . before . range [ 1 ] ; var after:==:tokens . after . range [ 0 ] - tokens . arrow . range [ 1 ] ;
var model = tooltip . _ model ; var chart:==:tooltip . _ chart ;
var bone = this . bone ; var target:==:this . target ;
var concurrency = this . concurrency ( ) ; var keys:==:Object . keys ( files ) ;
var subDataPoint = dataPoint . subDataPoints [ 0 ] ; var paths:==:dataPoint . paths ;
var schemaType = require ( ' warehouse ' ) . schemaType ; var util:==:require ( ' util ' ) ;
var content = data . match ( contentpattern ) [ 1 ] ; var md:==:data . match ( mdpattern ) [ 1 ] ;
var c9 = imports . c9 ; var bashBin:==:options . bashBin  |  |  ' bash ' ;
var title = validator . trim ( req . body . title ) ; var tab:==:validator . trim ( req . body . tab ) ;
var dropDown = theScope . dropDown ; var multiSelect:==:theScope . multiSelect ;
var shadow = sharedUtil . shadow ; var arithmeticDecoder:==:coreArithmeticDecoder . arithmeticDecoder ;
var vertexFormat = ellipsoidGeometry . _ vertexFormat ; var slicePartitions:==:ellipsoidGeometry . _ slicePartitions + 1 ;
var vm = this . vm ; var $ render:==:vm . $ render ;
var cy = circle . node . getAttribute ( ' cy ' ) ; var r:==:circle . node . getAttribute ( ' r ' ) ;
var closeOnDateSelection = angular . isDefined ( attrs . closeOnDateSelection ) ? scope . $ eval ( attrs . closeOnDateSelection ) : datepickerPopupConfig . closeOnDateSelection ; var dateFormat:==:attrs . datepickerPopup  |  |  datepickerPopupConfig . dateFormat ;
var editorState = require ( ' editorState ' ) ; var expandRangeToStartOfLine:==:require ( ' expandRangeToStartOfLine ' ) ;
var deepOrange800 = exports . deepOrange800 = ' # d84315 ' ; var deepOrange900:==:exports . deepOrange900    ' # bf360c ' ;
var username = this . options . username ; var key:==:this . options . accesKey  |  |  this . options . access_key  |  |  this . options . password ;
var nullTree = traceur . syntax . trees . nullTree ; var parseTree:==:traceur . syntax . trees . parseTree ;
var removeAttribute = proto . removeAttribute ; var setAttribute:==:proto . setAttribute ;
var actual = jqLite ( _ actual _ [ i ] ) [ 0 ] ; var expect:==:jqLite ( expected [ i ] ) [ 0 ] ;
var assert = require ( ' assert - plus ' ) ; var asn1:==:require ( ' asn1 ' ) ;
var label = this . o . labels [ pointer . uid ] ; var prc:==:pointer . value . prc ;
var fade = isUndefined ( v [ ' fade ' ] ) ? 0 : v [ ' fade ' ] ; var cover:==:isUndefined ( v [ ' cover ' ] ) ? 0 : v [ ' cover ' ] ;
var axis = axisModel . axis ; var show:==:retrieve ( opt . axisLabelShow , axisModel . get ( ' axisLabel . show ' ) ) ;
var times = options . times ; var points:==:options . points ;
var height = $ ( this ) . parent ( ) . height ( ) ; var width:==:$ ( this ) . parent ( ) . width ( ) ;
var path = require ( ' path ' ) ; var url:==:require ( ' url ' ) ;
var source = trim ( decEndpoint . source ) ; var target:==:trim ( decEndpoint . target ) ;
var tempVarTransformer = traceur . codegeneration . tempVarTransformer ; var tokenType:==:traceur . syntax . tokenType ;
var brightnessManual = this . elements . brightnessManual ; var brightnessManualInput:==:this . elements . brightnessManualInput ;
var incompat = new CS . Solver . Step ( stepBaseName + ' _ incompat ' ) ; var major:==:new cs . solver . step ( stepBaseName + ' _ major ' ) ;
var x = e . clientX + scrollOffset . x ; var y:==:e . clienty + scrollOffset . y ;
var innerType = this . _ innerType ; var length:==:times . length ;
var shareSettingsView = _ appJsViewsShareSettingsView [ ' default ' ] ; var listView:==:_ appJsViewsListView [ ' default ' ] ;
var renderView = renderViewWithFragments . viewRef ; var elementCount:==:mergedParentViewProto . mergeInfo . elementCount ;
var tealA700 = exports . tealA700 = ' # 00bfa5 ' ; var green50:==:exports . green50    ' # e8f5e9 ' ;
var bufferTarget = options . bufferTarget ; var typedArray:==:options . typedArray ;
var propertyReplacer = goog . require ( ' goog . testing . propertyReplacer ' ) ; var tagName:==:goog . require ( ' goog . dom . tagName ' ) ;
var Navigator = require ( ' Navigator ' ) ; var React:==:require ( ' React ' ) ;
var registerWrapper = scope . registerWrapper ; var unwrap:==:scope . unwrap ;
var rollup = require ( ' rollup ' ) ; var uglify:==:require ( ' uglify - js ' ) ;
var featureType = context [ ' featureType ' ] ; var featurens:==:context [ ' featurens ' ] ;
var Person = db . model ( ' Person ' , personSchema ) ; var boss:==:person . discriminator ( ' boss ' , bossSchema ) ;
var values = dataView . categorical . values [ 0 ] . values ; var objects:==:dataView . categorical . categories [ 0 ] . objects ;
var initiallyExpanded = _ props . initiallyExpanded ; var onExpandChange:==:_ props . onExpandChange ;
var identifierToken = traceur . syntax . identifierToken ; var identifierExpression:==:traceur . syntax . trees . identifierExpression ;
var Store = DS . Store ; var Namespace:==:Ember . Namespace ;
var metadata = dataset . metadata  |  |  ; var delimiter:==:metadata . delimiter  |  |  ' , ' ;
var opacity = parseFloat ( _ getPropValue ( parentElm , ' opacity ' ) ) ; var transform:==:_ getPropValue ( parentElm , ' transform ' )  |  |  _ getPropValue ( parentElm , ' -webkit - transform ' )  |  |  _ getPropValue ( parentElm , ' -moz - transform ' )  |  |  _ getPropValue ( parentElm , ' -ms - transform ' )  |  |  _ getPropValue ( parentElm , ' -o - transform ' ) ;
var btn1 = plugin . getElement ( ' btn1 ' ) ; var btn3:==:plugin . getElement ( ' btn3 ' ) ;
var context = frameState . context ; var primitive:==:groundPrimitive . _ primitive ;
var path = require ( ' path ' ) ; var request:==:require ( ' request ' ) ;
var addDone = jasmine . createSpy ( ' addDone ' ) ; var removeDone:==:jasmine . createSpy ( ' removeDone ' ) ;
var w = texture . crop . width ; var h:==:texture . crop . height ;
var writeConcern = options . writeConcern  |  |  w : 1 ; var writeConcernMax:==:options . writeConcernMax  |  |  w : 1 ;
var username = config . auth . username  |  |  '' ; var password:==:config . auth . password  |  |  '' ;
var Team = app . registry . createModel ( ' team ' , name : ' string ' ) ; var reader:==:app . registry . createModel ( ' reader ' , name : ' string ' ) ;
var initialHeight = setSize ( settings . get ( ' initialHeight ' ) , ' y ' ) ; var maxWidth:==:settings . get ( ' maxWidth ' ) ;
var symbolNode = math . expression . node . symbolNode ; var assignmentNode:==:math . expression . node . assignmentNode ;
var createArgumentList = parseTreeFactory . createArgumentList ; var createBlock:==:parseTreeFactory . createBlock ;
var showid = isUndefined ( v [ ' showid ' ] ) ? ctrlid : v [ ' showid ' ] ; var menuid:==:isUndefined ( v [ ' menuid ' ] ) ? showid + ' _ menu ' : v [ ' menuid ' ] ;
var api = imports . api ; var pubsub:==:imports . pubsub ;
var vertexShaderSource = options . vertexShaderSource ; var fragmentShaderSource:==:options . fragmentShaderSource ;
var testSet = transformUtils . testSet ( ) ; var state:==:testSet . state ;
var filter = this . _ filter ; var filteredKeys:==:this . _ filteredKeys ;
var reactInstrumentation = require ( ' reactInstrumentation ' ) ; var reactdomUnknownPropertyHook:==:require ( ' reactdomUnknownPropertyHook ' ) ;
var x = this . x * q1 . w + this . y * q1 . z - this . z * q1 . y + this . w * q1 . x ; var y:==:-this . x * q1 . z + this . y * q1 . w + this . z * q1 . x + this . w * q1 . y ;
var password1 = ' password1- ' + Random . i d ( ) ; var password2:==:' password2- ' + Random . i d ( ) ;
var projectId = webInspector . fileSystemWorkspaceBinding . projectId ( file . fileSystemPath ) ; var project:==:this . _ workspace . project ( projectId ) ;
var path = require ( ' path ' ) ; var protobuf:==:require ( ' pomelo - protobuf ' ) ;
var fTrue = makeCallOrderLogger ( ' fTrue ' , true ) ; var gFalse:==:makeCallOrderLogger ( ' gFalse ' , false ) ;
var bar = docSet . getByLongname ( ' bar ' ) [ 0 ] ; var baz:==:docSet . getByLongname ( ' baz ' ) [ 0 ] ;
var version = options . version ; var revision:==:options . revision ;
var controller = this . _ controller ; var controllerHost:==:this . _ controllerHost ;
var container = updates . container ; var dropDown:==:updates . dropDown ;
var pathForPositionAsync = exports . pathForPositionAsync = promisifySyncFn ( pathForPosition ) ; var positionRangeForPathAsync:==:exports . positionRangeForPathAsync    promisifySyncFn ( positionRangeForPath ) ;
var Matrix = math . type . Matrix ; var denseMatrix:==:math . type . denseMatrix ;
var edgeFieldsCount = snapshot . _ edgeFieldsCount ; var edgeToNodeOffset:==:snapshot . _ edgeToNodeOffset ;
var gulp = require ( ' gulp ' ) ; var imagemin:==:require ( ' gulp - imagemin ' ) ;
var fill = style . fill ; var stroke:==:style . stroke ;
var missingpdfException = sharedUtil . missingpdfException ; var unexpectedResponseException:==:sharedUtil . unexpectedResponseException ;
var jsVendor = data . jsVendor = data . webkit ? ' webkit ' : data . firefox ? ' webkit ' : data . opera ? ' o ' : data . ie ? ' ms ' : '' ; var cssVendor:==:data . cssVendor    ' - ' + jsVendor + ' - ' ;
var lowerBound = out . lowerBound ; var upperBound:==:out . upperBound ;
var labelLayout = powerbi . labelLayout ; var converterHelper:==:powerbi . visuals . converterHelper ;
var end = data . end  |  |  Date . create ( ' now ' ) . format ( Date . ISO8601_DATETIME ) ; var begin:==:data . begin  |  |  Date . create ( end ) . rewind ( weeks : 6 ) . format ( Date . ISO8601_DATETIME ) ;
var barrierCallbacks = window . barrierCallbacks = ; var barrierSignals:==:window . barrierSignals    ;
var impulse = this . impulse ; var J:==:this . J ;
var smith = require ( ' smith ' ) ; var engine:==:require ( ' engine . io ' ) ;
var fs = require ( ' fs ' ) ; var uglify:==:require ( ' uglify - js ' ) ;
var functionDeclaration = traceur . syntax . trees . functionDeclaration ; var parseTreeFactory:==:traceur . codegeneration . parseTreeFactory ;
var scale = billboard . scale ; var rotation:==:billboard . rotation ;
var allChildren = util . allChildren ; var createMakeNodeFunction:==:util . createMakeNodeFunction ;
var size = this . $ size ; var provider:==:this . provider ;
var lime400 = exports . lime400 = ' # d4e157 ' ; var lime500:==:exports . lime500    ' # cddc39 ' ;
var textInputState = require ( ' textInputState ' ) ; var uiManager:==:require ( ' uiManager ' ) ;
var thead = this . dom _ . createElement ( ' thead ' ) ; var tbody:==:this . dom _ . createElement ( ' tbody ' ) ;
var y = q . y ( ) ; var z:==:q . z ( ) ;
var add = new operatorNode ( ' + ' , ' add ' , [ a , b ] ) ; var mult:==:new operatorNode ( ' * ' , ' multiply ' , [ a , b ] ) ;
var x = this . _ FBU . x + tile_x * 16 ; var y:==:this . _ FBU . y + tile_y * 16 ;
var colorMask = defaultValue ( rs . colorMask , ) ; var blending:==:defaultValue ( rs . blending , ) ;
var createNode = vmlCore . createNode ; var textVmlEl:==:this . _ textVmlEl ;
var grad4 = this . grad4 ; var simplex:==:this . simplex ;
var sortBy = _ props2 . sortBy ; var sortDirection:==:_ props2 . sortDirection ;
var warn = sharedUtil . warn ; var cmd:==:corePrimitives . cmd ;
var w = box . width ( ) ; var h:==:box . height ( ) ;
var a = this . _ attribute_table [ name ] ; var stride:==:this . stride , offset    a . offset + this . ent_offset * stride , w    a . width ;
var name = this . name ; var defaultError:==:this . defaultError ;
var expose = opts . expose ; var file:==:opts . file ;
var nodeCommands = model . _ nodeCommands ; var pickIds:==:model . _ pickIds ;
var arc = ( options . arc < = 0  |  |  options . arc > 1 ) ? 1 . 0 : options . arc  |  |  1 . 0 ; var sideOrientation:==:( options . sideOrientation      0 ) ? 0 : options . sideOrientation  |  |  babylon . mesh . defaultside ;
var istanbul = require ( ' istanbul ' ) ; var path:==:require ( ' path ' ) ;
var semver = require ( ' semver ' ) ; var utils:==:require ( ' keystone - utils ' ) ;
var appear = data . appear ; var afterAppear:==:data . afterAppear ;
var age = child . getChildNode ( ' age ' ) ; var alive:==:child . getChildNode ( ' alive ' ) ;
var lineHeight = renderer . layerConfig . lineHeight ; var height:==:renderer . $ size . height - 1 ;
var Types = keystone . Field . Types ; var inlineRelationship:==:new keystone . list ( ' inlineRelationship ' ) ;
var group = sw [ ' group ' ] ; var domain:==:sw [ ' domain ' ] ;
var net = require ( ' net ' ) ; var assert:==:require ( ' assert ' ) ;
var y2 = shape . y2 ; var percent:==:shape . percent ;
var x = rectData . x ; var y:==:rectData . y ;
var streamsSequenceStream = coreStream . streamsSequenceStream ; var catalog:==:coreObj . catalog ;
var Dispatcher = require ( ' Dispatcher ' ) ; var fluxReduceStore:==:require ( ' fluxReduceStore ' ) ;
var http = require ( ' http ' ) ; var morgan:==:require ( ' morgan ' ) ;
var dx1 = Math . max ( 0 , Math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx1 ' , this . dx1 ) ) ) ) ; var dx2:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx2 ' , this . dx2 ) ) ) ) ;
var runPostSets = module [ ' runPostSets ' ] = asm [ ' runPostSets ' ] ; var dyncall_iiiiiiii:==:module [ ' dyncall_iiiiiiii ' ]    asm [ ' dyncall_iiiiiiii ' ] ;
var isInteger = _ _ webpack_require _ _ ( 2 ) . isInteger ; var toFixed:==:_ _ webpack_require _ _ ( 2 ) . toFixed ;
var cloud0 = cloudLayer . create ( 200 , 120 , ' cloud0 ' ) ; var cloud1:==:cloudLayer . create ( -60 , 120 , ' cloud1 ' ) ;
var desktopPath = oSjs . core . getWindowManager ( ) . getSetting ( ' desktopPath ' ) ; var path:==:utils . pathJoin ( desktopPath , ' . shortcuts . json ' ) ;
var ARROW_FUNCTION = ' ARROW_FUNCTION ' ; var ASSIGNMENT_ELEMENT:==:' ASSIGNMENT_ELEMENT ' ;
var join = _ _ webpack_require _ _ ( 3 ) . join ; var validateSafeMethod:==:_ _ webpack_require _ _ ( 17 ) . validateSafeMethod ;
var windowTimeSpan = state . windowTimeSpan ; var subscriber:==:state . subscriber ;
var where = ctx . where ; var data:==:ctx . instance  |  |  ctx . data ;
var display = opts . display ; var ctx:==:me . ctx ;
var clientWidth = b . clientWidth ; var clientHeight:==:b . clientHeight ;
var Connection   = common . Connection ; var eventEmitter:==:require ( ' events ' ) . eventEmitter ;
var onFulfilled = jasmine . createSpy ( ' onFulfilled ' ) ; var onRejected:==:jasmine . createSpy ( ' onRejected ' ) ;
var col = widget . col ; var row:==:widget . row ;
var toBase64Table = this . toBase64Table ; var length:==:data . length ;
var mtlLoader = this . mtlLoader ; var objLoader:==:this . objLoader ;
var barMinHeight = seriesModel . get ( ' barMinHeight ' )  |  |  0 ; var barMinAngle:==:seriesModel . get ( ' barMinAngle ' )  |  |  0 ;
var data = args . data ; var series:==:args . series ;
var defaultViewport = options . defaultViewport ; var linkService:==:options . linkService ;
var trans = db . transaction ( [ storeName ] ) ; var store:==:trans . objectStore ( storeName ) ;
var dirname = require ( ' path ' ) . dirname ; var join:==:require ( ' path ' ) . join ;
var dur = + conf . dur ; var type:==:conf . type ;
var i = isStartEndpoint ? j : length - j - 1 ; var child:==:node . childNodes [ i ] ;
var range = new CKEDITOR . dom . range ( editor . document ) ; var cursors:==:this . _ . cursors ;
var width = this . attribute ( ' width ' ) . toPixels ( ' x ' ) ; var height:==:this . attribute ( ' height ' ) . toPixels ( ' y ' ) ;
var path = require ( ' path ' ) ; var lex:==:require ( ' pug - lexer ' ) ;
var menu = $ ( ' # acp - search . dropdown - menu ' ) ; var input:==:$ ( ' # acp - search input ' ) ;
var ellipsoid = rectangleGeometry . _ ellipsoid ; var surfaceHeight:==:rectangleGeometry . _ surfaceHeight ;
var textFill = style . textFill ; var textStroke:==:style . textStroke ;
var bower = grunt . file . readJSON ( ' bower . json ' ) ; var fields:==:this . data . fields  |  |  [ ] ;
var name = $ this . attr ( ' name ' ) ; var type:==:$ this . prop ( ' type ' ) ;
var x = bn . fromBits ( h . toBits ( vectors [ i ] . qx ) ) ; var y:==:bn . fromBits ( h . toBits ( vectors [ i ] . qy ) ) ;
var bounds = this . game . physics . arcade . bounds ; var check:==:this . game . physics . arcade . checkCollision ;
var headerLength = header . headerLength ; var frameLength:==:header . frameLength ;
var objectEnumerationBuilder = powerbi . visuals . objectEnumerationBuilder ; var legendProps:==:powerbi . visuals . legendProps ;
var fs = require ( ' fs - extra ' ) ; var moment:==:require ( ' moment ' ) ;
var editor = firstNode . editor ; var parent:==:firstNode . parent ;
var major = new CS . Solver . Step ( stepBaseName + ' _ major ' ) ; var minor:==:new cs . solver . step ( stepBaseName + ' _ minor ' ) ;
var editor = menu . editor ; var $ textContainerElem:==:editor . $ textContainerElem ;
var min_size_y = this . resize_min_size_y ; var autogrow:==:this . options . autogrow_cols ;
var ssri = require ( ' ssri ' ) ; var fs:==:require ( ' fs ' ) ;
var stageWidth = slider . _ stageWidth ; var items:==:slider . _ items ;
var tab = tabs . focussedTab & & tabs . focussedTab ; var editor:==:tab & & tab . editor ;
var events = require ( ' events ' ) ; var assert:==:require ( ' assert ' ) ;
var login = document . getElementById ( ' login ' ) ; var output:==:document . getElementById ( ' output ' ) ;
var header = require ( ' gulp - header ' ) ; var footer:==:require ( ' gulp - footer ' ) ;
var height = parseInt ( localStorage . height ? localStorage . height : settings . defaultHeight ) ; var isMaximized:==:boolean ( parseInt ( localStorage . isMaximized ) ) ;
var xml = goog . dom . createDom ( ' xml ' ) ; var block:==:goog . dom . createDom ( ' block ' ) ;
var setManager = docSet . getByLongname ( ' setManager ' ) [ 0 ] ; var setName:==:docSet . getByLongname ( ' setName ' ) [ 0 ] ;
var isString = util . isString ; var isFunction:==:util . isFunction ;
var infinite = input . hasClass ( ' infinite ' ) ; var noofdrags:==:this . get_noofdrags_for_node ( input ) ;
var current = this . currentModule _ ; var name:==:tree . name . value ;
var lineHeight = getStyleProperty ( , styleContextStack , ' lineHeight ' , 1 ) ; var characterSpacing:==:getStyleProperty ( , styleContextStack , ' characterSpacing ' , 0 ) ;
var addon = spec . addon ; var timeout:==:spec . timeout ;
var closeAtx = self . options . closeAtx ; var depth:==:node . depth ;
var reactPortal = require ( ' reactPortal ' ) ; var reactVersion:==:require ( ' reactVersion ' ) ;
var util = imports . util ; var ui:==:imports . ui ;
var say = docSet . getByLongname ( ' person#say ' ) [ 0 ] ; var sayCallback:==:docSet . getByLongname ( ' person~sayCallback ' ) [ 0 ] ;
var TRANSLUCENCY_BY_DISTANCE_INDEX = Billboard . TRANSLUCENCY_BY_DISTANCE_INDEX = 12 ; var PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX:==:Billboard . PIXEL_OFFSET_SCALE_BY_DISTANCE_INDEX    13 ;
var cropBox = self . cropBox ; var cropped:==:self . cropped & & cropBox ;
var Vertex = exported . Vertex ; var Edge:==:exported . Edge ;
var slice = array . slice ; var map:==:array . map ;
var mtr = cTop . createElement ( ' mtr ' ) ; var mtd:==:cTop . createElement ( ' mtd ' ) ;
var editor = window . editor ; var testcase:==:window . testcase    [ ] ;
var profileSamples = this . _ profileSamples ; var sizes:==:profileSamples . sizes ;
var Long = configuration . require . Long ; var o:==:configuration . writeConcernMax ( ) ;
var botkit = require ( ' botkit ' ) ; var mongodb:==:require ( ' mongodb ' ) ;
var del = require ( ' del ' ) ; var sass:==:require ( ' gulp - sass ' ) ;
var x = ~~ ( e . pos . _ x + particle . position . x ) ; var y:==:~~ ( e . pos . _ y + particle . position . y ) ;
var isValidDefaultValue = propertyTypes . isValidDefaultValue ; var propertyTypes:==:propertyTypes . propertyTypes ;
var call = functionPrototype . call ; var apply:==:functionPrototype . apply ;
var connect = require ( ' gulp - connect ' ) ; var webpack:==:require ( ' webpack - stream ' ) ;
var info = this . pdfInfo . info ; var metadata:==:this . pdfInfo . metadata ;
var left = e . clientX - pos . left ; var top:==:e . clientY - pos . top ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , [ [ 0,0 ] , [ 100,100 ] ] , opts ) ;
var promise = this . _ promiseAt ( index ) ; var receiver:==:this . _ receiverAt ( index ) ;
var preview = doc . getElementById ( ' previewframe ' ) ; var content:==:doc . getElementById ( ' contentframe ' ) ;
var hintText = _ props . hintText ; var floatingLabelText:==:_ props . floatingLabelText ;
var options = this . _ options ; var hierarchy:==:Property . getValueOrUndefined ( polygon . hierarchy , time ) ;
var geometryUpdater = this . _ geometryUpdater ; var onTerrain:==:geometryUpdater . _ onTerrain ;
var minFilter = ( data . minFilter ) ? data . minFilter : gl . linear ; var wraps:==:( data . wraps ) ? data . wraps : gl . clamp_to_edge ;
var min = bounds . min ; var max:==:bounds . max ;
var elements = $ document . elements ( ) ; var href:==:elements . attr ( ' href ' ) ;
var active = activeElement ( ) ; var wrapper:==:this . wrapper ;
var tree    = desc . dyn_tree ; var max_code:==:desc . max_code ;
var svgUtil = powerbi . visuals . svgUtil ; var dataViewObjects:==:powerbi . dataViewObjects ;
var val = $ input . val ( ) ; var isColor:==:$ . zui . color . isColor ( val ) ;
var createMemberExpression = traceur . codegeneration . parseTreeFactory . createMemberExpression ; var createMemberLookupExpression:==:traceur . codegeneration . parseTreeFactory . createMemberLookupExpression ;
var elementsPerHeight = defaultValue ( structure . elementsPerHeight , heightmapTessellator . default_structure . elementsPerHeight ) ; var stride:==:defaultValue ( structure . stride , heightmapTessellator . default_structure . stride ) ;
var indices = this . indices ; var nameList:==:this . _ nameList ;
var maximumHeights = wallGeometry . _ maximumHeights ; var granularity:==:wallGeometry . _ granularity ;
var props = this . props ; var frame:==:this . dom . frame ;
var eventEmitter = require ( ' events ' ) . eventEmitter ; var finalhandler:==:require ( ' finalhandler ' ) ;
var variables = scope . variables ; var childScopes:==:scope . childScopes ;
var zoomPromise = viewer . _ zoomPromise ; var zoomOptions:==:defaultValue ( viewer . _ zoomOptions , ) ;
var width = this . img . width ; var height:==:this . img . height ;
var fsummary = $ ( ' # grid_'+ this . name + ' _ fsummary ' ) ; var summary:==:$ ( ' # grid_'+ this . name + ' _ summary ' ) ;
var meta = model . get ( ' metadata ' ) ; var content:==:model . get ( ' content ' ) ;
var when = require ( ' when ' ) ; var sinon:==:require ( ' sinon ' ) ;
var g = parseInt ( hex . substring ( 3 , 5 ) , 16 ) ; var b:==:parseInt ( hex . substring ( 5 , 7 ) , 16 ) ;
var psw = validator . trim ( req . body . psw )  |  |  '' ; var repsw:==:validator . trim ( req . body . repsw )  |  |  '' ;
var sourceLayer = blocking . sourceLayerIndex ; var featureIndex:==:blocking . featureIndex ;
var now = Date . now ( ) ; var lineHeight:==:editor . renderer . layerConfig . lineHeight ;
var max = this . options . max  |  |  72 ; var complexity:==:this . options . complexity ;
var dynCall_vf = Module [ ' dynCall_vf ' ] = asm [ ' dynCall_vf ' ] ; var dynCall_i:==:Module [ ' dynCall_i ' ]    asm [ ' dynCall_i ' ] ;
var type = ' modules : ' + src + ' : ' + args . type ; var path:==:require ( ' path ' ) . join ( my . session . session_id ( ) , src , args . path ) ;
var revealDialog = countlyHelpers . revealDialog ; var changeDialogHeight:==:countlyHelpers . changeDialogHeight ;
var m = new regExp ( mask ) ; var e:==:new regExp ( exculde ) ;
var tileWidth = this . _ tileWidth  |  |  width ; var tileHeight:==:this . _ tileHeight  |  |  height ;
var offsetTop = section . element . offsetTop ; var offsetLeft:==:section . element . offsetLeft ;
var samplers = shader . samplers ; var uniforms:==:shader . uniforms ;
var util = require ( ' util ' ) ; var chalk:==:require ( ' chalk ' ) ;
var reactdomTextarea = require ( ' reactdomTextarea ' ) ; var reactInstrumentation:==:require ( ' reactInstrumentation ' ) ;
var draftEditorTextNode = require ( ' draftEditorTextNode . react ' ) ; var react:==:require ( ' react ' ) ;
var Schema = require ( ' warehouse ' ) . Schema ; var moment:==:require ( ' moment ' ) ;
var mpath = require ( ' mpath ' ) ; var ms:==:require ( ' ms ' ) ;
var htmlElement = scope . wrappers . htmlElement ; var mixin:==:scope . mixin ;
var add   = createAdder ( 1 , ' add ' ) ; var subtract:==:createAdder ( -1 , ' subtract ' ) ;
var expect = require ( ' chai ' ) . expect ; var jsdom:==:require ( ' jsdom ' ) ;
var offset = req . query [ ' offset ' ] * 1 ; var limit:==:req . query [ ' limit ' ] * 1 ;
var offset = material . map . offset ; var repeat:==:material . map . repeat ;
var Socket = require ( ' net ' ) . Socket ; var incomingMessage:==:require ( ' http ' ) . incomingMessage ;
var overlayTitle = app . overlayTitle ; var overlayText:==:app . overlayText ;
var layout = this . layer . layout ; var features:==:this . features ;
var html = htmlpanel . getCode ( ) ; var value:==:this . value ;
var renderer = scope . _ renderer ; var coordinator:==:scope . _ coordinator ;
var tom = records . tom ; var yehuda:==:records . yehuda ;
var r = Math . abs ( color1 . rgb [ 0 ] - color2 . rgb [ 0 ] ) ; var g:==:Math . abs ( color1 . rgb [ 1 ] - color2 . rgb [ 1 ] ) ;
var insertTextIntoContentState = require ( ' insertTextIntoContentState ' ) ; var invariant:==:require ( ' invariant ' ) ;
var debug = require ( ' debug ' ) ( ' keystone : core : importer ' ) ; var path:==:require ( ' path ' ) ;
var http = require ( ' http ' ) ; var read:==:require ( ' fs ' ) . readFileSync ;
var viewPropTypes = require ( ' viewPropTypes ' ) ; var requireNativeComponent:==:require ( ' requireNativeComponent ' ) ;
var tabs = require ( ' tabs ' ) ; var utils:==:require ( ' utils ' ) ;
var space = _ space ; var plus:==:_ plus ;
var l = corner . leftPositions ; var r:==:corner . rightPositions ;
var y = pos . y ; var x:==:pos . x ;
var y = queryNumericValue ( iconNode , ' y ' , namespaces . gx ) ; var w:==:queryNumericValue ( iconNode , ' w ' , namespaces . gx ) ;
var BUILD_MODE = constants . BUILD_MODE ; var IS_DEV:==:constants . IS_DEV ;
var online = e . online ; var networkTypeName:==:e . networkTypeName ;
var assert = require ( ' assert ' ) ; var tmp:==:require ( ' tmp ' ) ;
var eventNS = self . eventNS ; var revertSettings:==:self . revertSettings ;
var needsImprovement = getRangeValue ( categoricalValues . needsImprovement , settings . values . needsImprovementPercent ) ; var satisfactory:==:getRangeValue ( categoricalValues . satisfactory , settings . values . satisfactoryPercent ) ;
var milliseconds = makeGetter ( ' milliseconds ' ) ; var seconds:==:makeGetter ( ' seconds ' ) ;
var year = date . year ( ) ; var month:==:date . month ( ) + 1 ;
var value = attr . value ; var ngValue:==:attr . ngValue ;
var axisStyle = powerbi . visuals . axisStyle ; var prototype:==:powerbi . prototype ;
var abs = Math . abs ; var sin:==:Math . sin ;
var decode = decodeuriComponent ; var trim:==:require ( ' trim ' ) ;
var n = env . ctlz_i8  |  0 ; var o:==:env . _ _ ztiSt9exception  |  0 ;
var mtype = isUndefined ( v [ ' mtype ' ] ) ? ' menu ' : v [ ' mtype ' ] ; var evt:==:isUndefined ( v [ ' evt ' ] ) ? ' mouseover ' : v [ ' evt ' ] ;
var Lexer = coreParser . lexer ; var parser:==:coreParser . parser ;
var len = string . length ; var sub:==:word . substr ( 0 , len ) ;
var tileset = this . _ tilesetForLayer ( layerInfo , mapInfo ) ; var layer:==:new cc . tmxLayer ( tileset , layerInfo , mapInfo ) ;
var aceUndo = this . $ aceUndo ; var stack:==:e . stack  |  |  [ ] ;
var canvas = this . canvas ; var cropBox:==:this . cropBox ;
var expect = require ( ' chai ' ) . expect ; var fs:==:require ( ' fs ' ) ;
var path = layout . path ; var i d:==:layout . i d ;
var items = this . _ items ; var length:==:items . length ;
var reactdomInjection = require ( ' reactdomInjection ' ) ; var reactGenericBatching:==:require ( ' reactGenericBatching ' ) ;
var replace = require ( ' gulp - replace ' ) ; var zip:==:require ( ' gulp - zip ' ) ;
var abs = Math . abs ; var diveq:==:numeric . diveq ;
var webpack = require ( ' webpack ' ) ; var autoprefixer:==:require ( ' autoprefixer ' ) ;
var hasHighlights = ( series . length > 0 ) & & series [ 0 ] . hasHighlights ; var hasSelection:==:this . interactivityService & & this . interactivityService . hasSelection ( ) ;
var months   = makeGetter ( ' months ' ) ; var years:==:makeGetter ( ' years ' ) ;
var linear = document . getElementById ( ' linear ' ) ; var log:==:document . getElementById ( ' log ' ) ;
var eventPluginRegistry = require ( ' eventPluginRegistry ' ) ; var reactEventEmitterMixin:==:require ( ' reactEventEmitterMixin ' ) ;
var history = _ ref . history ; var routes:==:_ ref . routes ;
var Keywords = traceur . syntax . Keywords ; var literalExpression:==:traceur . syntax . trees . literalExpression ;
var w = this [ ' w ' ] ; var h:==:this [ ' h ' ] ;
var a = goog . partial ( f , ' foo ' ) ; var b:==:goog . partial ( a , ' bar ' ) ;
var should = require ( ' should ' ) ; var shelljs:==:require ( ' shelljs ' ) ;
var p   = this . _ props ; var Shape:==:shapesMap . getShape ( this . _ props . shape ) ;
var mwpid = data . mwpid ; var checked:==:! ! this . checkedWaypoints [ mwpid ] ;
var fontSize = + font . fontSize  |  |  12 ; var fontWeight:==:font . fontWeight !   null ? font . fontWeight . toString ( ) : ' 400 ' ;
var assert = require ( ' assert ' ) ; var sourceMapConsumer:==:require ( ' source - map ' ) . sourceMapConsumer ;
var safeApply = leafletHelpers . safeApply ; var helpers:==:leafletHelpers ;
var ITEMS = exports . ITEMS = [ _ rowAbove . key , _ rowBelow . key , _ columnLeft . key , _ columnRight . key , _ clearColumn . key , _ removeRow . key , _ removeColumn . key , _ undo . key , _ redo . key , _ readOnly . key , _ alignment . key , _ separator . key ] ; var _ predefinedItems:==:( _ predefinedItems2    , _ defineProperty ( _ predefinedItems2 , _ separator . key , _ separator2 . default ) , _ defineProperty ( _ predefinedItems2 , _ rowAbove . key , _ rowAbove2 . default ) , _ defineProperty ( _ predefinedItems2 , _ rowBelow . key , _ rowBelow2 . default ) , _ defineProperty ( _ predefinedItems2 , _ columnLeft . key , _ columnLeft2 . default ) , _ defineProperty ( _ predefinedItems2 , _ columnRight . key , _ columnRight2 . default ) , _ defineProperty ( _ predefinedItems2 , _ clearColumn . key , _ clearColumn2 . default ) , _ defineProperty ( _ predefinedItems2 , _ removeRow . key , _ removeRow2 . default ) , _ defineProperty ( _ predefinedItems2 , _ removeColumn . key , _ removeColumn2 . default ) , _ defineProperty ( _ predefinedItems2 , _ undo . key , _ undo2 . default ) , _ defineProperty ( _ predefinedItems2 , _ redo . key , _ redo2 . default ) , _ defineProperty ( _ predefinedItems2 , _ readOnly . key , _ readOnly2 . default ) , _ defineProperty ( _ predefinedItems2 , _ alignment . key , _ alignment2 . default ) , _ predefinedItems2 ) ;
var variableDeclarationList = traceur . syntax . trees . variableDeclarationList ; var createArgumentList:==:parseTreeFactory . createArgumentList ;
var r_vec =   SPHSystem_update_r_vec ; var u:==:SPHSystem_update_u ;
var wd = require ( ' wd ' ) ; var path:==:require ( ' path ' ) ;
var iccId = event . target . getAttribute ( ' stk - menu - item - iccId ' ) ; var identifier:==:event . target . getAttribute ( ' stk - menu - item - identifier ' ) ;
var appConfig = pdfViewerApplication . appConfig ; var script:==:document . createElement ( ' script ' ) ;
var dates = this . _ dates ; var lastIndex:==:this . _ lastIndex ;
var nodeTypeOffset = snapshot . _ nodeTypeOffset ; var nodeNameOffset:==:snapshot . _ nodeNameOffset ;
var l = frustum . left ; var n:==:frustum . near ;
var bytesToString = sharedUtil . bytesToString ; var error:==:sharedUtil . error ;
var mqtt = require ( ' mqtt ' ) ; var util:==:require ( ' util ' ) ;
var commandProcessError = errors . commandProcessError ; var gitError:==:errors . gitError ;
var t = e . target  |  |  e . srcElement ; var action:==:t . getAttribute ( ' action ' ) ;
var uiManager = require ( ' uiManager ' ) ; var view:==:require ( ' view ' ) ;
var SCALE_INDEX = Billboard . SCALE_INDEX = 6 ; var IMAGE_INDEX_INDEX:==:Billboard . IMAGE_INDEX_INDEX    7 ;
var join = require ( ' path ' ) . join ; var rimraf:==:require ( ' rimraf ' ) ;
var clientWidth = _ ref3$clientWidth = = = undefined ? true : _ ref3$clientWidth ; var columnIndex:==:_ ref3 . columnIndex ;
var msg = ' somemsg ' ; var opt:==:' opt ' : ' optopt ' ;
var query = this . normalize ( this . state . query ) ; var caseSensitive:==:this . state . caseSensitive ;
var fs = require ( ' fs ' ) ; var jade:==:require ( ' jade ' ) ;
var e = inEvent ; var l:==:this . moveQueue . length ;
var HAS_MS_NATIVE_FULLSCREEN = exports . HAS_MS_NATIVE_FULLSCREEN = hasMsNativeFullScreen ; var has_ios_fullscreen:==:exports . has_ios_fullscreen    hasiosFullScreen ;
var n = _ n ; var acc:==:_ acc ;
var s0 = shape . s0 ; var s1:==:shape . s1 ;
var constraints = options . constraints  |  |  defaults . constraints ; var optional:==:options . optional  |  |  defaults . optional ;
var deletePrivate = m . deletePrivate ; var setPrivate:==:m . setPrivate ;
var Plugin = imports . Plugin ; var util:==:imports [ ' collab . util ' ] ;
var animators = this . animators ; var len:==:animators . length ;
var bits = this . bits = params . get ( ' bitsPerComponent ' )  |  |  8 ; var columns:==:this . columns    params . get ( ' columns ' )  |  |  1 ;
var String = platform . String ; var Date:==:platform . Date ;
var postTag = hexo . model ( ' postTag ' ) ; var postCategory:==:hexo . model ( ' postCategory ' ) ;
var height = $ ( document ) . height ( ) ; var scrollTop:==:$ ( window ) . scrollTop ( ) ;
var optimizer = options . optimizer ; var outputDirectory:==:options . outputDirectory ;
var clientTop = el . clientTop  |  |  body . clientTop  |  |  0 ; var clientLeft:==:el . clientLeft  |  |  body . clientLeft  |  |  0 ;
var sign = this . sign_bit ? -1 : 1 ; var exponent:==:this . exponent_bits - 1023 ;
var graph = document . getElementById ( ' graph ' ) ; var g:==:new dygraph ( graph , [ [ 1,1 ] , [ 10 , 10 ] , [ 100,100 ] , [ 1000,1000 ] ] , opts ) ;
var object3D = this . el . object3D ; var clone:==:object3D . clone ( ) ;
var dy2 = Math . max ( 0 , Math . min ( h , parseFloat ( mxUtils . getValue ( this . style , ' dy2 ' , this . dy2 ) ) ) ) ; var dx2:==:math . max ( 0 , math . min ( w , parseFloat ( mxUtils . getValue ( this . style , ' dx2 ' , this . dx2 ) ) ) ) ;
var accessRequest = ctx . accessRequest ; var role:==:loopback . role ;
var dataSource = data . dataSource ; var selectable:==:kendo . ui . selectable ;
var template = this . options . get ( ' templateResult ' ) ; var escapeMarkup:==:this . options . get ( ' escapeMarkup ' ) ;
var displayName = opt_displayname  |  |  ( databaseName + ' name ' ) ; var size:==:opt_size  |  |  5 * 1024 * 1024 ;
var Controller = Ember . Controller ; var Store:==:DS . Store ;
var anchor = anchors [ i ] ; var span:==:anchor . querySelector ( ' span ' ) ;
var x = circle . attr ( ' cx ' ) ; var y:==:circle . attr ( ' cy ' ) ;
var Metadata = require ( ' Metadata ' ) ; var Prism:==:require ( ' Prism ' ) ;
var framebuffer = passState . framebuffer ; var length:==:commands . length ;
var south = cesiumMath . toDegrees ( rectangle . south ) ; var east:==:cesiumMath . toDegrees ( rectangle . east ) ;
var appState = require ( ' appState ' ) ; var platform:==:require ( ' platform ' ) ;
var eastNormal = this . eastNormal ; var northNormal:==:this . northNormal ;
var r = Math . min ( this . right , region . right ) ; var b:==:Math . min ( this . bottom , region . bottom ) ;
var w = window ; var data:==:p . data ;
var subtype = value . subtype ; var description:==:value . description ;
var radius = options . radius  |  |  1 ; var tessellation:==:options . tessellation  |  |  64 ;
var dynCall_dii = Module [ ' dynCall_dii ' ] = asm [ ' dynCall_dii ' ] ; var dynCall_i:==:Module [ ' dynCall_i ' ]    asm [ ' dynCall_i ' ] ;
var source = coerce ( ' source ' ) ; var visible:==:coerce ( ' visible ' , ! ! source ) ;
var o = opts = = null ? : opts ; var r:==:decode_range ( sheet [ ' ! ref ' ] ) , cell ;
var th = this . _ mc . tileHeight ; var tilesets:==:this . _ mc . tilesets ;
var gulp = require ( ' gulp ' ) ; var jsdoc:==:require ( ' gulp - jsdoc3 ' ) ;
var pageX = aTouches [ 0 ] . pagex ; var pagey:==:aTouches [ 0 ] . pagey ;
var months = w2utils . settings . fullmonths ; var days:==:w2utils . settings . fulldays ;
var promise = progression . promise ; var receiver:==:progression . receiver ;
var domain = fullSceneLayout . domain ; var size:==:scene . fullLayout . _ size ;
var clearOverlays = t . clearOverlays ; var reportSelection:==:t . reportSelection ;
var sort = _ props2 . sort ; var sortBy:==:_ props2 . sortBy ;
var asec = math . asec ; var sec:==:math . sec ;
var payload = ref . payload ; var options:==:ref . options ;
var expression = expressionData . expression ; var attributeName:==:expressionData . attributeName ;
var width = this . $ wrapper . width ( ) ; var height:==:this . $ wrapper . height ( ) ;
var onKeyboardFocus = _ props3 . onKeyboardFocus ; var onTouchTap:==:_ props3 . onTouchTap ;
var creator = opts . creator  |  |  ' initiator ' ; var role:==:opts . role  |  |  ' initiator ' ;
var config = shallowCopy ( config ) ; var argv:==:config . argv ;
var clientLeft = ele . clientLeft  |  |  body . clientLeft  |  |  0 ; var scrollTop:==:win . pageyOffset  |  |  ele . scrollTop ;
var row = rows [ index ] ; var multiRow:==:multiRows [ index ] ;
var urlUtils = jsCommon . urlUtils ; var edgeSettings:==:powerbi . visuals . controls . internal . tablixUtils . edgeSettings ;
var arrayComprehensionTransformer = traceur . codegeneration . arrayComprehensionTransformer ; var arrowFunctionTransformer:==:traceur . codegeneration . arrowFunctionTransformer ;
var auth = imports . auth ; var info:==:imports . info ;
var scope = req . params . scope ; var path:==:req . params . path ;
var textFieldTestObject = require ( path . resolve ( fieldTestObjectsPath , ' textFieldTestObject ' ) ) ; var booleanFieldTestObject:==:require ( path . resolve ( fieldTestObjectsPath , ' booleanFieldTestObject ' ) ) ;
var rbTree = mod . rbTree ; var colors:==:mod . colors ;
var devtools = previewEditor . meta . $ devtools ; var iframe:==:session . iframe ;
var timeout = Date . now ( ) + ( options . timeout  |  |  DEFAULT_WAIT_FOR_TIMEOUT ) ; var interval:==:options . interval  |  |  DEFAULT_WAIT_FOR_INTERVAL ;
var propertyChangedBase = babylon . propertyChangedBase ; var dictionaryChanged:==:babylon . dictionaryChanged ;
var entity = entityCollection . getOrCreateEntity ( i d ) ; var properties:==:geoJson . properties ;
var matrix = this . _ matrix . clone ( ) ; var parent:==:this . _ parent ;
var Model = Backbone . Model . extend ( ) ; var c:==:new Backbone . Collection ( [ i d : 1 ] , model : Model ) ;
var scrollY = this . _ scrollY  |  0 ; var mc:==:this . _ mc ;
var edges = this . body . edges ; var edgeIndices:==:this . body . edgeIndices ;
var has_activex   = zombie_array [ index ] [ ' has_activex ' ] ; var date_stamp:==:zombie_array [ index ] [ ' date_stamp ' ] ;
var group = $ ( ' . controlgroup - single - select ' ) . controlgroup ( ) ; var select:==:group . find ( ' . ui - selectmenu - button ' ) ;
var max = cfg . max  |  |  100 ; var count:==:cfg . count  |  |  8 ;
var saveOption = util . saveOption ; var fillDropdown:==:util . fillDropdown ;
var regex = options . regex ; var keep_quoted:==:options . keep_quoted ;
var syntheticuiEvent = require ( ' syntheticuiEvent ' ) ; var getEventCharCode:==:require ( ' getEventCharCode ' ) ;
var glyphs = label . _ glyphs ; var text:==:label . _ text ;
var trans = frag . node . _ _ v_trans ; var hooks:==:trans & & trans . hooks ;
var labelTextProperties = powerbi . visuals . dataLabelUtils . labelTextProperties ; var getLabelFormattedText:==:powerbi . visuals . dataLabelUtils . getLabelFormattedText ;
var width = this . width , height = this . height ; var neighborsSignificance:==:this . neighborsSignificance ;
var commands = imports . commands ; var coverage:==:imports [ ' test . coverage ' ] ;
var identifierToken = traceur . syntax . identifierToken ; var literalToken:==:traceur . syntax . literalToken ;
var Emitter = require ( ' events ' ) . eventEmitter ; var parser:==:require ( ' socket . io - parser ' ) ;
var inMemoryWebStorage = exports . inMemoryWebStorage = _ _ webpack_require _ _ ( 325 ) ; var userManager:==:exports . userManager    _ _ webpack_require _ _ ( 326 ) ;
var pixelConverter = jsCommon . pixelConverter ; var labelUtils:==:visuals . newDataLabelUtils ;
var prim = cm . doc . sel . primary ( ) ; var line:==:cm . getLine ( prim . head . line ) ;
var bindToAdapter = document . getElementById ( ' bindToAdapter ' ) . checked ; var inboundBufferSize:==:document . getElementById ( ' inboundBufferSize ' ) . value ;
var should = chai . should ; var assert:==:chai . assert ;
var path = require ( ' path ' ) ; var Promise:==:require ( ' es6-promise ' ) . Promise ;
var callback = require ( ' callback ' ) ; var clone:==:require ( ' clone ' ) ;
var startIndeterminate = $ mdProgressCircular . startIndeterminate ; var endIndeterminate:==:$ mdProgressCircular . endIndeterminate ;
var scrollDirectionHorizontal = state . scrollDirectionHorizontal ; var scrollDirectionVertical:==:state . scrollDirectionVertical ;
var section = $ . list . sections [ e . sectionIndex ] ; var item:==:section . getItemAt ( e . itemIndex ) ;
var JSX_ELEMENT_NAME = ' JSX_ELEMENT_NAME ' ; var JSX_PLACEHOLDER:==:' JSX_PLACEHOLDER ' ;
var currentTarget = tuple . currentTarget ; var listeners:==:listenersTable . get ( currentTarget ) ;
var radius = this . handle . radius ; var center:==:this . center ;
var show = powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' gaps ' ] [ ' show ' ] , pulseChart . defaultSettings . gaps . show ) ; var visibleGapsPercentage:==:math . max ( 1 , math . min ( 100 , powerbi . dataViewObjects . getValue ( objects , pulseChart . properties [ ' gaps ' ] [ ' transparency ' ] , pulseChart . defaultSettings . gaps . visibleGapsPercentage ) ) ) ;
var sources = fs . sources ; var length:==:sources . length ;
var tree = imports . tree ; var settings:==:imports . settings ;
var params = formalParameters . params ; var stricted:==:formalParameters . stricted ;
var mkdirp = require ( ' mkdirp ' ) ; var webpack:==:require ( ' webpack ' ) ;
var v = jQuery ( ' # form ' ) . validate ( ) ; var method:==:$ . validator . methods [ methodName ] ;
var rename = require ( ' gulp - rename ' ) ; var webpack:==:require ( ' webpack ' ) ;
var v2 = currVolumeNode . getElementsByTagName ( ' v2 ' ) [ 0 ] . textContent ; var v3:==:currVolumeNode . getElementsByTagName ( ' v3 ' ) [ 0 ] . textContent ;
var dynCall_viiiiiii = Module [ ' dynCall_viiiiiii ' ] = asm [ ' dynCall_viiiiiii ' ] ; var dynCall_viiiiiid:==:Module [ ' dynCall_viiiiiid ' ]    asm [ ' dynCall_viiiiiid ' ] ;
var body = editor . body ; var br:==:baidu . editor . browser . ie ? ' ' : ' < br > ' ;
var p = this . pathname  |  |  '' ; var s:==:this . search  |  |  '' ;
var uniformMap = computeCommand . uniformMap ; var clearCommand:==:clearCommandScratch ;
var zDepth = _ props . zDepth ; var children:==:_ props . children ;
var buffer = chunk . buffer ; var byteOffset:==:chunk . byteOffset ;
var col = this . col ; var pos:==:this . pos ;
var assert = require ( ' assert ' ) ; var redis:==:config . redis ;
var red100 = exports . red100 = ' # ffcdd2 ' ; var red200:==:exports . red200    ' # ef9a9a ' ;
var key = properties [ i ] . key ; var value:==:properties [ i ] . value ;
var ONESEC = constants . ONESEC ; var BADNUM:==:constants . BADNUM ;
var tooltipBuilder = powerbi . visuals . tooltipBuilder ; var textMeasurementService:==:powerbi . textMeasurementService ;
var header = require ( ' gulp - header ' ) ; var concat:==:require ( ' gulp - concat ' ) ;
var domain = require ( ' domain ' ) ; var url:==:require ( ' url ' ) ;
var a = fulfillSoon ( ' a ' , 40 ) ; var b:==:fulfillThenableSoon ( ' b ' , 30 ) ;
var nativeAnimatedHelper = require ( ' nativeAnimatedHelper ' ) ; var react:==:require ( ' react ' ) ;
var n = k . bitLength ( ) ; var s:==:k . getLowestSetBit ( ) ;
var meshes = model . meshes ; var meshInstances:==:model . meshInstances ;
var globe = options . globe ; var imageryProviderViewModels:==:defaultValue ( options . imageryProviderViewModels , [ ] ) ;
var _ _ GLOBAL__I_a18 = Module [ ' _ _ GLOBAL__I_a18 ' ] = asm [ ' _ _ GLOBAL__I_a18 ' ] ; var runPostSets:==:module [ ' runPostSets ' ]    asm [ ' runPostSets ' ] ;
var reactVersion = require ( ' reactVersion ' ) ; var onlyChild:==:require ( ' onlyChild ' ) ;
var X = cs . MXA * AGR + cs . MXB * BGG + cs . MXC * CGB ; var Y:==:cs . MYA * AGR + cs . MYB * BGG + cs . MYC * CGB ;
var columnMaxWidth = _ props . columnMaxWidth ; var columnMinWidth:==:_ props . columnMinWidth ;
var nodeFilter = window . nodeFilter ; var namedNodeMap:==:window . namedNodeMap  |  |  window . mozNamedAttrMap ;
var vfs = imports . vfs ; var Plugin:==:imports . Plugin ;
var vm = require ( ' vm ' ) ; var http:==:require ( ' http ' ) ;
var audio = instance . _ audio ; var usingAudio:==:instance . _ usingAudio ( ) ;
var methods = options . methods  |  |  Object . keys ( vfs ) ; var readonly:==:' readonly ' in options ? options . readonly : false ;
var children = props . children ; var htmlFor:==:props . htmlFor ;
var glob = require ( ' glob ' ) ; var yaml:==:require ( ' js - yaml ' ) ;
var radiusFunction = options . radiusFunction ; var cap:==:options . cap  |  |  babylon . mesh . no_cap ;
var theme = ' edui- ' + ( this . theme  |  |  this . editor . options . theme ) ; var layer:==:document . getElementById ( ' edui_fixedlayer ' ) ;
var evt = isUndefined ( v [ ' evt ' ] ) ? ' mouseover ' : v [ ' evt ' ] ; var pos:==:isUndefined ( v [ ' pos ' ] ) ? ' 43 ' : v [ ' pos ' ] ;
var objectLoader = coreObj . objectLoader ; var operatorList:==:coreEvaluator . operatorList ;
var Timer = goog . Timer ; var Transport:==:goog . net . xpc . Transport ;
var contextLabels = this . contextLabels ; var neighborsSignificance:==:this . neighborsSignificance ;
var connect = imports . connect ; var db:==:imports . db ;
var sunPositionec = matrix4 . multiplyByPoint ( viewMatrix , sunPosition , sunPositionecScratch ) ; var sunPositionwc:==:transforms . pointToglWindowCoordinates ( viewProjectionMatrix , viewportTransformation , sunPosition , sunPositionwcScratch ) ;
var fs = require ( ' fs ' ) ; var should:==:require ( ' should ' ) ;
var integrations = opts . integrations  |  |  ; var providers:==:opts . providers  |  |  ;
var labelPosition = _ props . labelPosition ; var labelStyle:==:_ props . labelStyle ;
var source = decEndpoint . source ; var config:==:options . config ;
var mkdirp = require ( ' mkdirp ' ) ; var tmp:==:require ( ' tmp ' ) ;
var mouseXY = drag . mouseXY ; var mouseX:==:mouseXY [ 0 ] ;
var oView = this . _ oView ; var oDialog:==:oView . byId ( ' helloDialog ' ) ;
var prefilteredCubeMap32 = this . prefilteredCubeMap32  |  |  globalSky32 ; var prefilteredCubeMap16:==:this . prefilteredCubeMap16  |  |  globalSky16 ;
var mkdirp    = require ( ' mkdirp ' ) ; var shelljs:==:require ( ' shelljs ' ) ;
var sdp = maybePreferAudioSendCodec ( insdp ) ; var sdp:==:maybePreferVideoSendCodec ( insdp ) ;
var createEmptyArgumentList = parseTreeFactory . createEmptyArgumentList ; var createIdentifierExpression:==:parseTreeFactory . createIdentifierExpression ;
var textStyle = _ props . textStyle ; var title:==:_ props . title ;
var d1 = _ addDiv ( ' d1 ' ) , d2 = _ addDiv ( ' d2 ' ) ; var e:==:_ jsPlumb . addEndpoint ( d1 , endpoint : ' blank ' , cssClass : ' css ' ) ;
var zlib = require ( ' zlib ' ) ; var util:==:require ( ' util ' ) ;
var vectorMarkersPlugin = leafletHelpers . vectorMarkersPlugin ; var makiMarkersPlugin:==:leafletHelpers . makiMarkersPlugin ;
var unit = math . unit ; var nthRoot:==:math . nthRoot ;
var path = require ( ' path ' ) ; var readFileSync:==:require ( ' fs ' ) . readFileSync ;
var height = outputTexture . height ; var context:==:this . _ context ;
var beforeEach = test . beforeEach ; var afterEach:==:test . afterEach ;
var f8Touchable = require ( ' f8Touchable ' ) ; var view:==:require ( ' view ' ) ;
var parent = path . parent ; var node:==:path . node ;
var anchor = this . anchor ; var lead:==:this . lead ;
var compression = require ( ' compression ' ) ; var connect:==:require ( ' connect ' ) ;
var setting = event . detail . setting ; var value:==:event . detail . value ;
var getMaxMinute = t . getMaxMinute ; var getMinMinute:==:t . getMinMinute ;
var organizationName = $ ( ' # organizationName ' ) . val ( ) ; var jobName:==:$ ( ' # jobName ' ) . val ( ) ;
var showNotInRange = options . showNotInRange  |  |  false ; var onClick:==:options . onClick  |  |  function ( ) ;
var origin = target . origin ; var scale:==:target . scale  |  |  [ 1 , 1 ] ;
var interactors = this . interactors = options . interactors ; var clearCatcher:==:options . clearCatcher ;
var listView = _ appJsViewsListView [ ' default ' ] ; var proximityEmptyView:==:_ appJsViewsProximityEmptyView [ ' default ' ] ;
var path = binding . path ; var parent:==:path . parentPath ;
var hasInitialization = representation . hasInitialization ( representation ) ; var hasSegments:==:representation . hasSegments ( representation ) ;
var gulp = require ( ' gulp ' ) ; var jsonlint:==:require ( ' gulp - jsonlint ' ) ;
var fillMaterialProperty = geometryUpdater . fillMaterialProperty ; var material:==:materialProperty . getValue ( time , fillMaterialProperty , this . _ material ) ;
var Dummy5 = mongoose . model ( ' Dummy5 ' , dummy5Schema ) ; var dummy6:==:mongoose . model ( ' dummy6 ' , dummy6Schema ) ;
var l1_decay_mul = typeof pg . l1_decay_mul ! = = ' undefined ' ? pg . l1_decay_mul : 1 . 0 ; var l2_decay:==:this . l2_decay * l2_decay_mul ;
var selectorsInterface = scope . selectorsInterface ; var shadowRoot:==:scope . wrappers . shadowRoot ;
var promoteBuffers = options [ ' promoteBuffers ' ] = = null ? false : options [ ' promoteBuffers ' ] ; var promoteLongs:==:options [ ' promoteLongs ' ]     null ? true : options [ ' promoteLongs ' ] ;
var d = desired . mag ( ) ; var speed:==:this . maxspeed ;
var editable = this . editable . updateTime  |  |  this . editable . updateGroup ; var className:==:( this . data . className ? ' ' + this . data . className : '' ) + ( this . selected ? ' vis - selected ' : '' ) + ( editable ? ' vis - editable ' : ' vis - readonly ' ) ;
var hash = location . hash ; var params:==:location . params ;
var str = this . str ; var codeSize:==:this . codeSize ;
var parent = this . parent ; var config:==:this . config ;
var chalk = require ( ' chalk ' ) ; var fs:==:require ( ' fs - extra ' ) ;
var granularity = polylineVolume . granularity ; var outlineWidth:==:polylineVolume . outlineWidth ;