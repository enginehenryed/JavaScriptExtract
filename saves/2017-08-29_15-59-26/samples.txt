source: 
var sets = params . sets ;
query: params .
target: has <CAM> own <CAM> property ( ' start ' ) ? params . start : 0 ;
output: start . . . . ;
------------------------------------------

source: 
var hint <CAM> color = _ context$mui <CAM> theme$tex . hint <CAM> color ;
query: _ context$mui
target: <CAM> theme$tex . error <CAM> color ;
output: <CAM> <CAM> <CAM> _ ;
------------------------------------------

source: 
var m = matrix ;
query: m . a
target: ;
output: ;
------------------------------------------

source: 
var moe = name : ' moe ' , lucky : [ 13 , 27 , 34 ] ;
query: _ . clone (
target: moe ) ;
output: ' ;
------------------------------------------

source: 
var uglify = require ( ' gulp - uglify ' ) ;
query: require ( ' stringify
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var sails = req . _ sails ;
query: req . options .
target: parse <CAM> blueprint <CAM> options  |  |  req . _ sails . config . blueprints . parse <CAM> blueprint <CAM> options ;
output: _ <CAM> . . . . |  |  | . options req . options . req . options <CAM> options . options .
------------------------------------------

source: 
var create <CAM> legend = powerbi . visuals . create <CAM> legend ;
query: powerbi . visuals
target: . legend <CAM> position ;
output: . legend <CAM> . ;
------------------------------------------

source: 
var w = + width ( ) - stroke ( ) - left <CAM> padding ;
query: + height ( )
target: - stroke ( ) - bottom <CAM> padding ;
output: . h <CAM> ) ;
------------------------------------------

source: 
var d = clear <CAM> command . depth ;
query: clear <CAM> command .
target: stencil ;
output: clear ;
------------------------------------------

source: 
var contact <CAM> card <CAM> options = Contacts . contact <CAM> card <CAM> options ;
query: Contacts . contact <CAM>
target: card <CAM> header <CAM> kind ;
output: <CAM> <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var path = require ( ' path ' ) ;
query: require ( '
target: serialize - javascript ' ) ;
output: ' ' ' ' ) ;
------------------------------------------

source: 
var redirect <UND> uri = _ ref . redirect <UND> uri ;
query: _ ref . data
target: ;
output: ;
------------------------------------------

source: 
var gulp = require ( ' gulp ' ) ;
query: require
target: ( ' browser - sync ' ) ;
output: ( ' ' ' gulp ' ) ;
------------------------------------------

source: 
var fold <CAM> widgets = this . $ show <CAM> fold <CAM> widgets & & session . fold <CAM> widgets ;
query: session . bg <CAM>
target: tokenizer . diff <CAM> states ;
output: <CAM> ;
------------------------------------------

source: 
var util = require ( ' util ' ) ;
query: process .
target: binding ( ' fs ' ) ;
output: binding binding ' ' ' ) ;
------------------------------------------

source: 
var warn = debug ( ' extras : primitives : warn ' ) ;
query: module . exports .
target: primitives    ;
output: primitives . |  '
------------------------------------------

source: 
var stride = structure . stride ;
query: structure . elements <CAM>
target: per <CAM> height ;
output: <CAM> <CAM> <CAM> ;
------------------------------------------

source: 
var blue500 = exports . blue500 = ' # 2196f3 ' ;
query: exports .
target: blue600    ' # 1e88e5 ' ;
output: blue600  |  ' # ' ' ;
------------------------------------------

source: 
var callbacks <CAM> last = configuration . callbacks <CAM> last  |  |  false ;
query: configuration . shorthand
target: <CAM> first  |  |  false ;
output:   <CAM> |  |  | ;
------------------------------------------

source: 
var condition = this . transform <CAM> any ( tree . condition ) ;
query: this .
target: transform <CAM> any ( tree . left ) ;
output: left . . ( ' . left ) ;
------------------------------------------

source: 
var literal <CAM> expression = traceur . syntax . trees . literal <CAM> expression ;
query: traceur . codegeneration .
target: parse <CAM> tree <CAM> factory ;
output: trees <CAM> . <CAM> . <CAM>
------------------------------------------

source: 
var dark <CAM> white = exports . dark <CAM> white = ' rgba ( 255 , 255 , 255 , 0 . 87 ) ' ;
query: exports . light
target: <CAM> white    ' rgba ( 255 , 255 , 255 , 0 . 54 ) ' ;
output: <CAM> <CAM> <CAM>   ' # <CAM> ' <CAM> ' <CAM> ' <CAM> ' ) light <CAM> ;
------------------------------------------

source: 
var x0 = vertices [ index0 ] ;
query: vertices
target: [ index1 ] ;
output: . 0 ] ;
------------------------------------------

source: 
var blob = request . source . data . blob ;
query: document . get <CAM>
target: element <CAM> by <CAM> id ( ' header ' ) ;
output: . ( by <CAM> id ( ' . . ) ;
------------------------------------------

source: 
var rendering <CAM> queue = options . rendering <CAM> queue ;
query: options . text
target: <CAM> layer <CAM> factory ;
output: <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var outline <CAM> color = Property . get <CAM> value <CAM> or <CAM> cloned <CAM> default ( box . outline <CAM> color , time , Color . BLACK , scratch <CAM> color ) ;
query: Property . get <CAM>
target: value <CAM> or <CAM> default ( box . outline <CAM> width , time , 1 . 0 ) ;
output: <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> get <CAM> <CAM> ) <CAM> ) , <CAM> outline <CAM> <CAM>
------------------------------------------

source: 
var location = response . location ;
query: response . catalog
target: <CAM> items ;
output: . . ;
------------------------------------------

source: 
var class <CAM> name = _ props . class <CAM> name ;
query: _ props . children
target: ;
output: ;
------------------------------------------

source: 
var format = definition . format ;
query: definition . xml 
target: |  |  ;
output:   |  |
------------------------------------------

source: 
var doc = ' content <CAM> document ' in this ? this . content <CAM> document : this . content <CAM> window . document ;
query: doc .
target: domain ;
output: content ;
------------------------------------------

source: 
var year = date . year ( ) ;
query: date . month (
target: ) + 1 ;
output: . ;
------------------------------------------

source: 
var crypto = require ( ' crypto ' ) ;
query: require ( '
target: semver ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var alltext = rep . alltext ;
query: alltext . length
target: ;
output: ;
------------------------------------------

source: 
var store = new datastore ( tests . data . read <CAM> only <CAM> item <CAM> file <CAM> test <CAM> templates . get <CAM> test <CAM> data ( ' countries <UND> withDates ' ) ) ;
query: new doh . Deferred
target: ( ) ;
output:  ' <CAM>
------------------------------------------

source: 
var create <CAM> assignment <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> assignment <CAM> expression ;
query: parse <CAM> tree <CAM>
target: factory . create <CAM> call <CAM> call ;
output: <CAM> . create <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var info = imports . info ;
query: imports .
target: api ;
output: api ;
------------------------------------------

source: 
var symbol <CAM> node = math . expression . node . symbol <CAM> node ;
query: math . expression
target: . node . index <CAM> node ;
output: . symbol . symbol <CAM> . ;
------------------------------------------

source: 
var minimist = require ( ' minimist ' ) ;
query: require ( ' fs
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var visual <CAM> bounds = this . dom . visual <CAM> bounds ;
query: this .
target: dom . layout <CAM> bounds ;
output: layout <CAM> layout <CAM> <CAM> ;
------------------------------------------

source: 
var create <CAM> call <CAM> expression = parse <CAM> tree <CAM> factory . create <CAM> call <CAM> expression ;
query: parse <CAM> tree
target: <CAM> factory . create <CAM> cascade <CAM> expression ;
output: <CAM> <CAM> . create <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var forces = this . physics <CAM> body . forces ;
query: this . physics
target: <CAM> body . velocities ;
output: ;
------------------------------------------

source: 
var scale = options . scale ;
query: options .
target: default <CAM> viewport ;
output: default <CAM> . .
------------------------------------------

source: 
var layer = selection . select <CAM> all ( ' . layer - hit ' ) ;
query: context . mode (
target: ) ;
output: ' .
------------------------------------------

source: 
var scroll <CAM> left = _ props2 . scroll <CAM> left ;
query: _ props2 .
target: scroll <CAM> to <CAM> column ;
output: scroll <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var dy1 = mx <CAM> utils . get <CAM> value ( this . style , ' dy1 ' , ' 0 ' ) ;
query: mx <CAM> utils
target: . get <CAM> value ( this . style , ' dx2 ' , ' 0 ' ) ;
output: . dx2 <CAM> ' ( ' <CAM> get ) ' ' ' ) ' ' ' ) ;
------------------------------------------

source: 
var rename = require ( ' gulp - rename ' ) ;
query: require (
target: ' gulp - header ' ) ;
output: ' ' - header ' ) ;
------------------------------------------

source: 
var pending = this . pending <CAM> tabs _ . shift ( ) ;
query: this . tab <CAM>
target: bar _ . index <CAM> of <CAM> child ( pending ) ;
output: . . _ . <CAM> . <CAM> . ;
------------------------------------------

source: 
var s0 = shape . s0 ;
query: shape . s1
target: ;
output: ;
------------------------------------------

source: 
var user <CAM> agent = goog . user <CAM> agent ;
query: goog .
target: labs . net . xhr ;
output: xhr ;
------------------------------------------

source: 
var scope = options . scope ;
query: options . scroll <CAM>
target: view ;
output: . <CAM>
------------------------------------------

source: 
var data = connection . data ;
query: data
target: & & data . network ;
output: . & data . network ;
------------------------------------------

source: 
var top = ~dir . index <CAM> of ( ' top ' )   & & ' top ' ;
query: ~dir .
target: index <CAM> of ( ' bottom ' ) & & ' bottom ' ;
output: bottom <CAM> ' ( ' ' ' ) ;
------------------------------------------

source: 
var on <CAM> success = options . on <CAM> success  |  |  function ( ) ;
query: options . on <CAM>
target: error  |  |  function ( ) ;
output: <CAM>    |  | <CAM> <CAM> ;
------------------------------------------

source: 
var r = Q . reject ( new Error ( ' aaargh ' ) ) ;
query: Q
target: . promise ( function ( ) ) ;
output: . reject ;
------------------------------------------

source: 
var sort <CAM> data   = method . sort <CAM> data ;
query: method . post <CAM>
target: data ;
output: <CAM> <CAM>
------------------------------------------

source: 
var lang = supported <CAM> languages [ lang <CAM> index ] ;
query: document . create <CAM>
target: element ( ' option ' ) ;
output: element ( ' <CAM> ' ) ;
------------------------------------------

source: 
var tag = vnode . tag ;
query: vnode .
target: data ;
output: vnode ;
------------------------------------------

source: 
var spawn = require ( ' child <UND> process ' ) . spawn ;
query: require ( ' graceful
target: - readlink ' ) . readlink <CAM> sync ;
output: ' ' ' ) ;
------------------------------------------

source: 
var ui = imports . ui ;
query: imports .
target: util ;
output: util ;
------------------------------------------

source: 
var o = open [ k ] = ' \u001b [ ' + color <CAM> nums [ k ] + ' m ' ;
query: close [
target: k ]    ' \u001b [ 39 m ' ;
output: ' ' ' |  ' ' ' ' ' c '
------------------------------------------

source: 
var root = _ ref . root ;
query: _ ref .
target: on <CAM> change ;
output: on <CAM> . ;
------------------------------------------

source: 
var log2 = shared <CAM> util . log2 ;
query: shared <CAM> util
target: . read <CAM> int8 ;
output: . read <CAM> <CAM> ;
------------------------------------------

source: 
var flaverr = require ( ' flaverr ' ) ;
query: require ( ' rttc
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var sinon = require ( ' sinon ' ) ;
query: test <CAM> utils
target: . is <CAM> nodejs ;
output: . is <CAM> <CAM> <CAM>
------------------------------------------

source: 
var line = position . line + 1 ;
query: position . character +
target: 1 ;
output: . ;
------------------------------------------

source: 
var graph = editor <CAM> ui . editor . graph ;
query: document . create <CAM>
target: element ( ' div ' ) ;
output: element ( ' . ' ) ;
------------------------------------------

source: 
var template = props . template  |  |  base <CAM> proto . template <CAM> string ;
query: props . extensible 
target:   props . has <CAM> own <CAM> property ( ' extensible ' ) ? props . extensible : true ;
output:    . extensible   <CAM>      ) ;
------------------------------------------

source: 
var lazypipe = require ( ' lazypipe ' ) ;
query: require ( ' glob
target: ' ) . sync ;
output: ' ) ;
------------------------------------------

source: 
var quadratic <CAM> at = curve <CAM> util . quadratic <CAM> at ;
query: curve <CAM>
target: util . quadratic <CAM> derivative <CAM> at ;
output: <CAM> . quadratic <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var msecs = options . msecs ! = null ? options . msecs : new Date ( ) . get <CAM> time ( ) ;
query: options .
target: nsecs !   null ? options . nsecs : _ lastn <CAM> secs + 1 ;
output: get .    ? options . get . options options . . . . ;
------------------------------------------

source: 
var ready = require ( ' ready ' ) ;
query: require ( ' eventproxy
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var name = state . name . identifier <CAM> token ;
query: create <CAM> function <CAM>
target: declaration ( name , parameters , function <CAM> body ) ;
output: <CAM> ( <CAM> . <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> ;
------------------------------------------

source: 
var mkdirp = require ( ' mkdirp ' ) ;
query: require ( '
target: path ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var rot = array [ j ] . rotation ;
query: array [ j
target: ] . interpolation ;
output: & <CAM> interpolation .
------------------------------------------

source: 
var name = current <CAM> attachment . name ;
query: current <CAM>
target: attachment . blob ;
output: <CAM> . properties ;
------------------------------------------

source: 
var active = this . $ menu . find ( ' . active ' ) . remove <CAM> class ( ' active ' ) ;
query: active .
target: prev ( ) ;
output: prev . ' .
------------------------------------------

source: 
var text <CAM> color = default <CAM> value ( parse <CAM> color <CAM> string ( query <CAM> string <CAM> value ( node , ' text <CAM> color ' , namespaces . kml ) ) , Color . BLACK ) ;
query: query <CAM> string <CAM>
target: value ( node , ' text ' , namespaces . kml ) ;
output: <CAM> ( ' <CAM> ' , <CAM> ) ' <CAM> text <CAM> ;
------------------------------------------

source: 
var a = reject <CAM> thenable <CAM> soon ( ' rejected - a ' , 40 ) ;
query: reject <CAM> thenable <CAM>
target: soon ( ' rejected - b ' , 30 ) ;
output: <CAM> ( ' ' <CAM> ' <CAM> ) ' <CAM> ;
------------------------------------------

source: 
var c = ec * 8 ;
query: dB -
target: du ;
output: . .
------------------------------------------

source: 
var caption = $ img . attr ( ' data - caption ' ) ;
query: $ img . attr
target: ( ' data - align ' ) ;
output: ( ' ' ' ' ' ) ;
------------------------------------------

source: 
var event = track . event ( ) ;
query: track . properties (
target: ) ;
output: . ;
------------------------------------------

source: 
var message = self . _ escapeHTML ( e . detail . message ) ;
query: e .
target: detail . initial <CAM> value ;
output: _ . message . . (
------------------------------------------

source: 
var bn = _ dereq _ ( ' bn . js ' ) ;
query: _
target: dereq _ ( ' brorand ' ) ;
output: _ . _ ' _ ' ) ;
------------------------------------------

source: 
var Dispatcher = require ( ' Dispatcher ' ) ;
query: require (
target: ' flux <CAM> store ' ) ;
output: ' ' ' ' ' ) ;
------------------------------------------

source: 
var browserify = require ( ' browserify ' ) ;
query: require ( ' derequire
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var shapes = this . _ shapes ;
query: visual <CAM> map <CAM>
target: model . item <CAM> size ;
output: <CAM> . _ <CAM> <CAM> ;
------------------------------------------

source: 
var request = this . _ request ;
query: request .
target: initiator <CAM> info ( ) ;
output: _ ;
------------------------------------------

source: 
var http   = require ( ' http ' ) ;
query: require ( '
target: path ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var postcss = require ( ' gulp - postcss ' ) ;
query: require (
target: ' doiuse ' ) ;
output: ' ' ' ) ;
------------------------------------------

source: 
var State = traceur . codegeneration . generator . State ;
query: traceur . codegeneration
target: . generator . state <CAM> allocator ;
output: . codegeneration . codegeneration ;
------------------------------------------

source: 
var Stream = core <CAM> stream . Stream ;
query: core <CAM> glyph <CAM>
target: list . get <CAM> glyphs <CAM> unicode ;
output: <CAM> <CAM> get <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var payload = payloads [ i ] ;
query: payload <UND> callbacks [
target: payload . source ] ;
output: [ ] payload <UND> ;
------------------------------------------

source: 
var create <CAM> variable <CAM> statement = parse <CAM> tree <CAM> factory . create <CAM> variable <CAM> statement ;
query: parse <CAM>
target: tree <CAM> factory . create <CAM> while <CAM> statement ;
output: <CAM> <CAM> factory <CAM> create <CAM> <CAM> <CAM> <CAM> ;
------------------------------------------

source: 
var Tcp = require ( ' marionette - client ' ) . Drivers . Tcp ;
query: marionette .
target: client ( driver : Tcp ) ;
output: client . ' . ' . ;
------------------------------------------

source: 
var dynCall <UND> iiiii = Module [ ' dynCall <UND> iiiii ' ] = asm [ ' dynCall <UND> iiiii ' ] ;
query: Module [ ' dynCall
target: <UND> fii ' ]    asm [ ' dynCall <UND> fii ' ] ;
output: ' ' ' ]     ' ' ' <UND> <UND> ' ] ;
------------------------------------------

source: 
var table2td = goog . dom . get <CAM> element ( ' table2td ' ) ;
query: goog . dom .
target: get <CAM> element ( ' logo2 ' ) ;
output: dom . . ( ' ' ' ) ;
------------------------------------------

source: 
var tab = tabs . focussed <CAM> tab ;
query: args . toggle
target:  |  |  args . source     ' click ' ;
output: ;
------------------------------------------

source: 
var async = Promise . _ async ;
query: util . try <CAM>
target: catch ;
output: . .
------------------------------------------

source: 
var weight = w . weight ;
query: geometry . vertices [
target: vidx ] ;
output: . . ;
------------------------------------------

source: 
var integration = require ( ' analytics . js - integration ' ) ;
query: require ( ' to
target: - snake - case ' ) ;
output: ' snake ' ' ' ) ;
------------------------------------------

source: 
var startX = this . startX ;
query: this .
target: height ;
output: height ;
------------------------------------------

source: 
var lane <CAM> sets = process <CAM> definition <CAM> diagram <CAM> layout . lane <CAM> sets ;
query: process <CAM> definition <CAM>
target: diagram <CAM> layout . activities ;
output: <CAM> <CAM> <CAM> <CAM> lane <CAM>
------------------------------------------

source: 
var w = rect . width ;
query: rect .
target: height ;
output: h ;
------------------------------------------

source: 
var flatten <CAM> style = require ( ' flatten <CAM> style ' ) ;
query: require ( ' merge
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var l = frustum . left ;
query: frustum .
target: near ;
output: frustum ;
------------------------------------------

source: 
var identifier <CAM> token = traceur . syntax . identifier <CAM> token ;
query: traceur . syntax .
target: literal <CAM> token ;
output: literal <CAM> . ;
------------------------------------------

source: 
var a = require ( ' a ' ) ;
query: require ( ' test
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var do <CAM> browserify = build <CAM> utils . do <CAM> browserify ;
query: build <CAM> utils
target: . write <CAM> file ;
output: <CAM> do <CAM> <CAM> <CAM>
------------------------------------------

source: 
var helpers = Chart . helpers ;
query: helpers .
target: noop ;
output: noop ;
------------------------------------------

source: 
var react <CAM> simple <CAM> empty <CAM> component = require ( ' react <CAM> simple <CAM> empty <CAM> component ' ) ;
query: require (
target: ' react <CAM> updates ' ) ;
output: ' react <CAM> <CAM> <CAM> ) ;
------------------------------------------

source: 
var w = Math . min ( Math . max ( obj . width , o . min <CAM> width ) , o . max <CAM> width ) ;
query: Math . min (
target: Math . max ( obj . height , o . min <CAM> height ) , o . max <CAM> height ) ;
output: . . min . . . min ) . . width . . ) ;
------------------------------------------

source: 
var font <CAM> size = + font . font <CAM> size  |  |  12 ;
query: font . font <CAM>
target: weight !   null ? font . font <CAM> weight . to <CAM> string ( ) : ' 400 ' ;
output: font <CAM>    ?  <CAM> font <CAM> font <CAM> font <CAM> font ( font ;
------------------------------------------

source: 
var points = spline . points ;
query: spline . times
target: ;
output: ;
------------------------------------------

source: 
var qs    = require ( ' qs ' ) ;
query: require ( '
target: path ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var decoration = get <CAM> style <CAM> property ( item , style <CAM> context <CAM> stack , ' decoration ' , null ) ;
query: get <CAM>
target: style <CAM> property ( item , style <CAM> context <CAM> stack , ' decoration <CAM> color ' , null ) ;
output: <CAM> <CAM> <CAM> <CAM> ' <CAM> ' <CAM> <CAM> <CAM> <CAM> <CAM> , , <CAM> <CAM> <CAM> ) ' ) ;
------------------------------------------

source: 
var error <CAM> handler = options . error <CAM> handler ;
query: options . locator
target: ;
output: ;
------------------------------------------

source: 
var task = g <CAM> require ( ' task ' ) ;
query: g <CAM> require (
target: ' help ' ) ;
output: ' ' ' ) ;
------------------------------------------

source: 
var base = this . texture . base <CAM> texture ;
query: this . texture .
target: crop ;
output: crop crop
------------------------------------------

source: 
var a = Math . abs ( this [ ' re ' ] ) ;
query: Math . abs
target: ( this [ ' i m ' ] ) ;
output: . ' . ' ' ' ' ) ' ;
------------------------------------------

source: 
var red500 = exports . red500 = ' # f44336 ' ;
query: exports . red600
target:    ' # e53935 ' ;
output:    ' # ' ' ;
------------------------------------------

source: 
var orderby = options . orderby  |  |  ' date ' ;
query: options . order
target:  |  |  -1 ;
output: ' |  |  | ;
------------------------------------------

source: 
var estimate <CAM> svg <CAM> text <CAM> height = powerbi . text <CAM> measurement <CAM> service . estimate <CAM> svg <CAM> text <CAM> height ;
query: powerbi . text
target: <CAM> measurement <CAM> service . svg <CAM> ellipsis ;
output: <CAM> <CAM> <CAM> <CAM> <CAM> svg <CAM> <CAM> <CAM>
------------------------------------------

source: 
var winston = require ( ' winston ' ) ;
query: require ( ' events
target: ' ) . event <CAM> emitter ;
output: ' ) ;
------------------------------------------

source: 
var p2 = [ cp2x , cp2y ] ;
query: [ p3x , p3y
target: ] ;
output: , ;
------------------------------------------

source: 
var path    = require ( ' path ' ) ;
query: require ( ' fs
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var stamp = header . stamp ;
query: header . header <CAM>
target: length ;
output: header ;
------------------------------------------

source: 
var item = items [ i ] ;
query: item . entity
target: ;
output: 
------------------------------------------

source: 
var start = node . loc . start . line ;
query: node .
target: loc . end . line ;
output: end . end . end ;
------------------------------------------

source: 
var scroll <CAM> view = require ( ' scroll <CAM> view ' ) ;
query: require
target: ( ' scroll <CAM> responder ' ) ;
output: ( ' scroll <CAM> <CAM> <CAM> ) ;
------------------------------------------

source: 
var default <CAM> credit = new Credit ( ' default <CAM> credit ' ) ;
query: new Credit (
target: ' credit1 ' ) ;
output: ' ' ' ) ;
------------------------------------------

source: 
var subset = settings . subset ;
query: subset ?
target: to <CAM> expression ( subset ) : EXPRESSION <UND> ESCAPE ;
output: . <CAM> subset ;
------------------------------------------

source: 
var height = options [ ' height ' ] ! = null ? options [ ' height ' ] : 0 ;
query: options [
target: ' x ' ] !   null ? options [ ' x ' ] : 0 ;
output: ' ' ' ] ;
------------------------------------------

source: 
var from = this . from ;
query: distance <CAM>
target: from <CAM> intersection ( from , this . _ direction , position ) ;
output: var <CAM> from ;
------------------------------------------

source: 
var read <CAM> file <CAM> sync = require ( ' fs ' ) . read <CAM> file <CAM> sync ;
query: require (
target: ' path ' ) . join ;
output: ' ' <CAM> ) ;
------------------------------------------

source: 
var gulp = require ( ' gulp ' ) ;
query: require ( ' gulp
target: - jscs ' ) ;
output: - gulp ' ) ;
------------------------------------------

source: 
var tooltip <CAM> manager = powerbi . visuals . tooltip <CAM> manager ;
query: powerbi .
target: visuals . svg <CAM> util ;
output: svg . visuals <CAM> <CAM> ;
------------------------------------------

source: 
var recording <CAM> module = require ( ' native <CAM> modules ' ) . date <CAM> picker <CAM> dialog <CAM> recording <CAM> module ;
query: require ( ' View
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var e = this . end <CAM> contact <CAM> event ;
query: end <CAM> overlaps .
target: length ;
output: <CAM> ;
------------------------------------------

source: 
var Compiler = _ _ dependency4 _ _ . Compiler ;
query: _ _ dependency4 _
target: _ . compile ;
output: _ _ _ ;
------------------------------------------

source: 
var focus <CAM> manager = imports . focus <CAM> manager ;
query: imports [ ' dialog
target: . alert ' ] . show ;
output: <CAM> focus <CAM> ] ;
------------------------------------------

source: 
var eddsa = this . eddsa ;
query: this . hash (
target: ) ;
output: . ;
------------------------------------------

source: 
var parser = _ dereq _ ( ' engine . io - parser ' ) ;
query: _ dereq _ (
target: ' parseqs ' ) ;
output: ' ' ' ) ;
------------------------------------------

source: 
var type = event . data [ ' type ' ] ;
query: event . data
target: [ ' payload ' ] ;
output: . ' ' ' ] ;
------------------------------------------

source: 
var i d = i d  |  |  options . size ( ) ;
query: chart <UND> option
target: <UND> number ( ) ;
output:  option  options ;
------------------------------------------

source: 
var projection = view <CAM> state . projection ;
query: view <CAM> state
target: . resolution ;
output: . resolution ;
------------------------------------------

source: 
var profile = profiles [ key ] ;
query: profile . video
target: ;
output: ;
------------------------------------------

source: 
var open = options . interpolation . open ;
query: options .
target: interpolation . close ;
output: interpolation ;
------------------------------------------

source: 
var old <CAM> item = event . detail . old <CAM> item ;
query: event .
target: detail . new <CAM> item ;
output: new . detail <CAM> <CAM> <CAM>
------------------------------------------

source: 
var x = anchor <CAM> point . x ;
query: anchor <CAM> point
target: . y ;
output: <CAM> anchor <CAM>
------------------------------------------

source: 
var Renderer = Hilo . Renderer ;
query: Hilo . Drawable
target: ;
output: ;
------------------------------------------

source: 
var actors = diagram . actors ;
query: diagram
target: . signals ;
output: ;
------------------------------------------

source: 
var sum64 <UND> lo = utils . sum64 <UND> lo ;
query: utils . sum64
target: <UND> 4 <UND> hi ;
output: ;
------------------------------------------

source: 
var header <CAM> types = parse <CAM> output . header <CAM> types ;
query: parse <CAM> output
target: . errors ;
output: <CAM> errors <CAM>
------------------------------------------

source: 
var container = this . container ;
query: util
target: . extend ( , this . options ) ;
output: . util ;
------------------------------------------

source: 
var show <CAM> time = powerbi . data <CAM> view <CAM> objects . get <CAM> value ( objects , pulse <CAM> chart . Properties [ ' popup ' ] [ ' show <CAM> time ' ] , pulse <CAM> chart . default <CAM> settings . popup . show <CAM> time ) ;
query: powerbi . data <CAM>
target: view <CAM> objects . get <CAM> value ( objects , pulse <CAM> chart . Properties [ ' popup ' ] [ ' show <CAM> title ' ] , pulse <CAM> chart . default <CAM> settings . popup . show <CAM> title ) ;
output: <CAM> <CAM> <CAM> <CAM> data <CAM> <CAM> <CAM> ' <CAM> ' <CAM> ' <CAM> data <CAM> ' ' <CAM> ] ;
------------------------------------------

source: 
var state = this . state _ ;
query: state . stroke
target: <CAM> style ;
output: ;
------------------------------------------

source: 
var attributes = batch <CAM> table . _ attributes ;
query: attributes [ attribute
target: <CAM> index ] ;
output: <CAM> attributes ] ;
------------------------------------------

source: 
var type = definition . type ;
query: definition . format
target: ;
output: ;
------------------------------------------

source: 
var environment <CAM> state = scene . _ environment <CAM> state ;
query: scene . _ frame
target: <CAM> state . passes ;
output: <CAM> state ;
------------------------------------------

source: 
var path = options . path ;
query: options . args
target: ;
output: ;
------------------------------------------

source: 
var deep <CAM> purple100 = exports . deep <CAM> purple100 = ' # d1c4e9 ' ;
query: exports . deep
target: <CAM> purple200    ' # b39ddb ' ;
output: deep deep <CAM>   ' # ' ' ;
------------------------------------------

source: 
var argv = require ( ' yargs ' ) . argv ;
query: require ( '
target: fs ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var symbol = definition . symbol ;
query: object . color
target:  |  |  definition . color  |  |  ' # fff ' ;
output: ;
------------------------------------------

source: 
var scroll <CAM> left = _ ref . scroll <CAM> left ;
query: _ ref .
target: scroll <CAM> top ;
output: scroll <CAM> <CAM> ;
------------------------------------------

source: 
var x = ( ( ( value1 . x * part1 ) + ( value2 . x * part2 ) ) + ( tangent1 . x * part3 ) ) + ( tangent2 . x * part4 ) ;
query: ( ( ( value1
target: . y * part1 ) + ( value2 . y * part2 ) ) + ( tangent1 . y * part3 ) ) + ( tangent2 . y * part4 ) ;
output: . ( . ( . ;
------------------------------------------

source: 
var score = scores [ k ] . score ;
query: create <CAM> element (
target: ' li ' , initials + ' : ' + score ) ;
output: score create ' ) 10 <CAM> score create storage not ' <CAM> ;
------------------------------------------

source: 
var rowheight = options . rowheight  |  |  40 ;
query: options .
target: colwidth  |  |  300 ;
output: rowheight  |  |   
------------------------------------------

source: 
var path = sm . source  |  |  bp . path ;
query: sm .
target: line  |  |  bp . line ;
output: line  |  |   . line ;
------------------------------------------

source: 
var margin <CAM> limits = axes <CAM> layout . margin <CAM> limits ;
query: axes <CAM> layout
target: . plot <CAM> area ;
output: <CAM> plot <CAM> <CAM> <CAM>
------------------------------------------

source: 
var max <CAM> resolution = this . max <CAM> resolution _ ;
query: this . min
target: <CAM> resolution _ ;
output: <CAM> <CAM> ;
------------------------------------------

source: 
var promise = element . promise ( ) ;
query: chai . expect (
target: promise ) ;
output: . . ;
------------------------------------------

source: 
var start = range . start <CAM> container ;
query: range . end <CAM>
target: container ;
output: . ;
------------------------------------------

source: 
var title <CAM> color = this . context . mui <CAM> theme . card <CAM> media . title <CAM> color ;
query: this . context .
target: mui <CAM> theme . card <CAM> media . subtitle <CAM> color ;
output: subtitle . . . context . . <CAM> context . . <CAM>
------------------------------------------

source: 
var pick = require ( ' pick ' ) ;
query: require ( '
target: prevent ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var quasi <CAM> literal <CAM> transformer = traceur . codegeneration . quasi <CAM> literal <CAM> transformer ;
query: traceur . codegeneration .
target: rest <CAM> parameter <CAM> transformer ;
output: rest <CAM> <CAM> <CAM> <CAM> ;
------------------------------------------

source: 
var number <CAM> format = kendo . get <CAM> culture ( this . options . culture ) . number <CAM> format ;
query: this .
target: _ rules ;
output: get rules 
------------------------------------------

source: 
var declare <CAM> ident <CAM> in <CAM> local <CAM> scope = utils . declare <CAM> ident <CAM> in <CAM> local <CAM> scope ;
query: utils . init
target: <CAM> scope <CAM> metadata ;
output: <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var helper <CAM> node1 = helper . get <CAM> node ( ' helper <CAM> node1 ' ) ;
query: require (
target: ' sinon ' ) ;
output: ' ' <CAM> ) ;
------------------------------------------

source: 
var STRING1 = C . STRING1 = 0x61 ;
query: C . STRING2
target:    0x62 ;
output: ;
------------------------------------------

source: 
var contents = capabilities . contents ;
query: contents .
target: layers ;
output: layers ;
------------------------------------------

source: 
var props = assign ( , element . props ) ;
query: element .
target: key ;
output: key ;
------------------------------------------

source: 
var next <CAM> reset = settings . next <CAM> reset  |  |  lower <CAM> date ;
query: settings .
target: tracking <CAM> period ;
output: tracking <CAM> <CAM> <CAM>
------------------------------------------

source: 
var auto <CAM> container <CAM> width = _ props4 . auto <CAM> container <CAM> width ;
query: _ props4 . auto
target: <CAM> height ;
output: <CAM> <CAM> ;
------------------------------------------

source: 
var expr = this . expr ;
query: this . node
target: ;
output: ;
------------------------------------------

source: 
var event <CAM> target = scope . wrappers . event <CAM> target ;
query: scope .
target: wrappers . Selection ;
output: Selection ;
------------------------------------------

source: 
var text <CAM> style <CAM> prop <CAM> types = require ( ' text <CAM> style <CAM> prop <CAM> types ' ) ;
query: require ( ' unimplemented
target: <CAM> view ' ) ;
output: <CAM> ' <CAM> ) ;
------------------------------------------

source: 
var node <CAM> name <CAM> offset = snapshot . _ node <CAM> name <CAM> offset ;
query: snapshot . nodes
target: ;
output: ;
------------------------------------------

source: 
var source = source <CAM> expr ? source <CAM> expr . value : null ;
query: provider <CAM> expr ?
target: provider <CAM> expr . value : null ;
output: <CAM> <CAM> <CAM> <CAM> provider <CAM> expr ;
------------------------------------------

source: 
var fs = imports . fs ;
query: imports .
target: util ;
output: util ;
------------------------------------------

source: 
var weighted <CAM> sample = global . weighted <CAM> sample ;
query: global . getopt
target: ;
output: ;
------------------------------------------

source: 
var mm = require ( ' mm ' ) ;
query: require ( ' nock
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var esprima = require ( ' esprima ' ) ;
query: require (
target: ' escodegen ' ) ;
output: ' ' ' ) ;
------------------------------------------

source: 
var should = require ( ' should ' ) ;
query: require (
target: ' sinon ' ) ;
output: ' ' ' ) ;
------------------------------------------

source: 
var paper = this . _ paper ;
query: font  |
target:  |  ;
output: . |  |
------------------------------------------

source: 
var is <CAM> array = shared <CAM> util . is <CAM> array ;
query: shared <CAM> util .
target: error ;
output: error ;
------------------------------------------

source: 
var data = options . data ;
query: options . base
target: <CAM> url ;
output: . data ;
------------------------------------------

source: 
var NO <UND> MODIFICATION <UND> ALLOWED <UND> ERR = exception <CAM> code . NO <UND> MODIFICATION <UND> ALLOWED <UND> ERR = ( ( exception <CAM> message [ 7 ] = ' No modification allowed ' ) , 7 ) ;
query: exception <CAM>
target: code . NOT <UND> FOUND <UND> ERR       ( ( exception <CAM> message [ 8 ]   ' Not found ' ) , 8 ) ;
output: <UND> <UND> create <UND> ERR <UND> ERR <UND> |  ' ' ' ' ' ' <UND> <UND> <UND> ' <UND> <UND>   # <UND> <UND> ) ;
------------------------------------------

source: 
var data = _ ref . data ;
query: _ ref . prompt
target: ;
output: ;
------------------------------------------

source: 
var w = canvas . bounds . width ( ) ;
query: canvas . bounds
target: . height ( ) ;
output: . bounds ;
------------------------------------------

source: 
var before = ' before ' + section ;
query: ' after ' +
target: section ;
output: ' '
------------------------------------------

source: 
var button = _ context$mui <CAM> theme . button ;
query: _ context$mui
target: <CAM> theme . raised <CAM> button ;
output: <CAM> button <CAM> _ <CAM> button ;
------------------------------------------

source: 
var after <CAM> items <CAM> node = options . after <CAM> items <CAM> node ;
query: options . container <CAM>
target: node ;
output: <CAM> <CAM>
------------------------------------------

source: 
var renderer = this . _ renderer ;
query: this . _
target: element <CAM> ref . native <CAM> element ;
output: ;
------------------------------------------

source: 
var l = 0 + ( sleft ? pleft . size + ( pleft . resizable ? this . spacer : this . padding ) : 0 ) ;
query: this . height -
target: ( sbottom ? pbottom . size + ( pbottom . resizable ? this . spacer : this . padding ) : 0 ) - pprev . size ;
output: . size . this . 0 . . this . 0 . this . 0 . this . 0 . ;
------------------------------------------

source: 
var scaleX = ( typeof node . _ scaleX = = = ' number ' ) ? node . _ scaleX : 1 ;
query: ( typeof node
target: . _ scaleY      ' number ' ) ? node . _ scaleY : 1 ;
output:  _ sprite ;
------------------------------------------

source: 
var f8 <CAM> touchable = require ( ' f8 <CAM> touchable ' ) ;
query: require ( ' f8
target: <CAM> text ' ) ;
output: ' ' ' ) ;
------------------------------------------

source: 
var m = this . transform ;
query: ctx . dpr 
target: |  |  1 ;
output:   |  | ;
------------------------------------------

source: 
var size = settings . size ;
query: ' bold ' +
target: ( settings . m <CAM> size * size ) + ' px ' + settings . fontname ;
output: ' ' . font ' ' ' ' ' ;
------------------------------------------

source: 
var dynCall <UND> viiddddddiiii = Module [ ' dynCall <UND> viiddddddiiii ' ] = asm [ ' dynCall <UND> viiddddddiiii ' ] ;
query: Module [ ' dynCall
target: <UND> iiiiiiiiiiiidd ' ]    asm [ ' dynCall <UND> iiiiiiiiiiiidd ' ] ;
output: ' ' ' ]     ' ' ' <UND> <UND> ' ] ;
------------------------------------------

source: 
var y <CAM> scale = axis <CAM> options . y <CAM> scale ;
query: axis <CAM> options
target: . series <CAM> offset <CAM> scale ;
output: . y <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var top <CAM> positions = pos . top <CAM> positions ;
query: top <CAM> positions
target: . length ;
output: <CAM> top ;
------------------------------------------

source: 
var dt   = this . s . dt ;
query: this . c .
target: details ;
output: dt ;
------------------------------------------

source: 
var data <CAM> model = el . data <CAM> model  |  |  series <CAM> model ;
query: el . data <CAM>
target: index ;
output: <CAM> <CAM>
------------------------------------------

source: 
var array <CAM> extensions = js <CAM> common . array <CAM> extensions ;
query: powerbi . data
target: . semantic <CAM> filter ;
output: <CAM> semantic <CAM> <CAM> ;
------------------------------------------

source: 
var e = true  |  |  ' 1 ' ;
query: false 
target: |  |  ' 0 ' ;
output:   |  |  ' ;
------------------------------------------

source: 
var num <CAM> corners = pos . num <CAM> corners ;
query: top <CAM> positions .
target: length ;
output: top ;
------------------------------------------

source: 
var unwrap = shadowdom <CAM> polyfill . unwrap ;
query: shadowdom <CAM> polyfill .
target: wrap ;
output: shadowdom <CAM>
------------------------------------------

source: 
var deep <CAM> orange300 = exports . deep <CAM> orange300 = ' # ff8a65 ' ;
query: exports . deep <CAM>
target: orange400    ' # ff7043 ' ;
output: <CAM> <CAM>    # <CAM> ' ;
------------------------------------------

source: 
var pi = math . pi ;
query: math .
target: atanh ;
output: atanh ;
------------------------------------------

source: 
var create <CAM> path = leaflet <CAM> paths <CAM> helpers . create <CAM> path ;
query: leaflet <CAM> path
target: <CAM> events . bind <CAM> path <CAM> events ;
output: <CAM> <CAM> <CAM> create <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var HIDE <UND> SPINNER = exports . HIDE <UND> SPINNER = ' HIDE <UND> SPINNER ' ;
query: exports . GET
target: <UND> GITHUB <UND> INITIATE    ' GET <UND> GITHUB <UND> INITIATE ' ;
output:  GET <UND> HIDE <UND> |  ' # <UND> HIDE <UND> HIDE <UND> )
------------------------------------------

source: 
var nodes = this . body . nodes ;
query: this . body .
target: edges ;
output: body ;
------------------------------------------

source: 
var row = row <UND> col [ 0 ] ;
query: row <UND> col
target: [ 1 ] ;
output: . <UND> ] ;
------------------------------------------

source: 
var tier = tiers [ index ] ;
query: document . create
target: <CAM> element ( ' th ' ) ;
output: <CAM> element ( ' th ' ) ;
------------------------------------------

source: 
var block <CAM> map <CAM> builder = require ( ' block <CAM> map <CAM> builder ' ) ;
query: require ( ' character
target: <CAM> metadata ' ) ;
output: ' <CAM> <CAM> ) ;
------------------------------------------

source: 
var height = ellipse . height ;
query: ellipse . extruded
target: <CAM> height ;
output: . height ;
------------------------------------------

source: 
var label = _ props . label ;
query: _ props . label
target: <CAM> color ;
output: . label ;
------------------------------------------

source: 
var match = value <CAM> to <CAM> match ( v , prop <CAM> val , matches [ i ] , false , true ) ;
query: duplicates [ ' _
target: ' + match . i d ] ;
output: ' _ ' <CAM> _ d <CAM> ;
------------------------------------------

source: 
var HAS <UND> BOOLEAN <UND> VALUE = dom <CAM> property . injection . HAS <UND> BOOLEAN <UND> VALUE ;
query: dom <CAM> property .
target: injection . HAS <UND> NUMERIC <UND> VALUE ;
output: HAS <UND> HAS <UND> HAS <UND> HAS <UND>
------------------------------------------

source: 
var view = this . view ;
query: this . projection
target: <CAM> view ;
output: . view .
------------------------------------------

source: 
var now = _ _ dependency2 _ _ . now ;
query: _ _ dependency3
target: _ _ . all ;
output: . _ _ _ ;
------------------------------------------

source: 
var webdriver = require ( ' selenium - webdriver ' ) ;
query: require
target: ( ' async ' ) ;
output: ( ' ' ' ) ;
------------------------------------------

source: 
var p0 = segment . p0 ;
query: segment . p1
target: ;
output: ;
------------------------------------------

source: 
var view <CAM> style <CAM> prop <CAM> types = require ( ' view <CAM> style <CAM> prop <CAM> types ' ) ;
query: require ( ' flatten
target: <CAM> style ' ) ;
output: <CAM> ' <CAM> ) ;
------------------------------------------

source: 
var orientation = this . options . orientation ;
query: this . options
target: . show <CAM> minor <CAM> labels ;
output: . show <CAM> . . . ;
------------------------------------------

source: 
var set <CAM> private = m . set <CAM> private ;
query: m . get
target: <CAM> private ;
output: <CAM> <CAM> <CAM>
------------------------------------------

source: 
var pct <CAM> threshold = metrics . pct <CAM> threshold ;
query: metrics . histogram
target: ;
output: ;
------------------------------------------

source: 
var keyboard <CAM> focused = _ props3 . keyboard <CAM> focused ;
query: _ props3 .
target: link <CAM> button ;
output: link <CAM> <CAM> ;
------------------------------------------

source: 
var scroll <CAM> top = $ WINDOW . scroll <CAM> top ( ) ;
query: $
target: WINDOW . scroll <CAM> left ( ) ;
output: ( <CAM> scroll <CAM> <CAM> ;
------------------------------------------

source: 
var minute = parse <CAM> int ( $ ( ' # timer - minute ' ) . val ( ) ) % 60 ;
query: parse <CAM> int
target: ( $ ( ' # timer - second ' ) . val ( ) ) % 60 ;
output: ( ' <CAM> ' ' <CAM> ' error ' ) ;
------------------------------------------

source: 
var exec <CAM> sync = require ( ' child <UND> process ' ) . exec <CAM> sync ;
query: require ( ' chalk
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var use <CAM> selenium <CAM> jar = grunt . option ( ' use <CAM> selenium <CAM> jar ' ) ;
query: grunt . option (
target: ' selenium <CAM> address <CAM> proxy ' ) ;
output: ' ' <CAM> <CAM> <CAM> <CAM> <CAM> ) ;
------------------------------------------

source: 
var React = require ( ' React ' ) ;
query: require ( '
target: native <CAM> modules ' ) . time <CAM> picker <CAM> dialog <CAM> recording <CAM> module ;
output: ' ' ' ' ) ;
------------------------------------------

source: 
var panels = imports . panels ;
query: imports . menus
target: ;
output: ;
------------------------------------------

source: 
var literal <CAM> token = traceur . syntax . literal <CAM> token ;
query: traceur . syntax
target: . parse <CAM> tree <CAM> type ;
output: <CAM> syntax <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var each = zr <CAM> util . each ;
query: format
target: <CAM> util . to <CAM> camel <CAM> case ;
output: <CAM> <CAM> <CAM> to <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var clone = require ( ' lodash . clone ' ) ;
query: require ( ' lodash
target: . defaultsdeep ' ) ;
output: ' js ' ) ;
------------------------------------------

source: 
var con = client . connection ;
query: client . query
target: ( ' whatever ' ) ;
output: ;
------------------------------------------

source: 
var request = require ( ' request ' ) ;
query: require
target: ( ' assert ' ) ;
output: ( ' ' ' ) ;
------------------------------------------

source: 
var _ bitshift64 <CAM> shl = Module [ ' _ bitshift64 <CAM> shl ' ] = asm [ ' _ bitshift64 <CAM> shl ' ] ;
query: Module [ '
target: _ test <CAM> setjmp ' ]    asm [ ' _ test <CAM> setjmp ' ] ;
output: _ ' <CAM> _ ' ]     ' ' ' _ <CAM> ' ' ] 
------------------------------------------

source: 
var pos = is <CAM> undefined ( v [ ' pos ' ] ) ? ' 43 ' : v [ ' pos ' ] ;
query: is <CAM> undefined (
target: v [ ' layer ' ] ) ? 1 : v [ ' layer ' ] ;
output: ' ' ' ' ' ] ;
------------------------------------------

source: 
var data = this . data ;
query: this
target: . camera ;
output: . this ;
------------------------------------------

source: 
var doc = this . doc = new Document ( ' ' ) ;
query: this . deferred
target: <CAM> update    lang . delayed <CAM> call ( this . on <CAM> update . bind ( this ) ) ;
output: . ' ' | ' ' . deferred . ' ( ' . deferred . ' ' deferred ( ' . ;
------------------------------------------

source: 
var div = document . create <CAM> element ( ' div ' ) ;
query: label <CAM>
target: styles [ prec <UND> axis     ' y2 ' ? ' y2 ' : axis ] ;
output: <CAM> . ' ] ' ' |  ' ' # <CAM> ;
------------------------------------------

source: 
var loaded = surface <CAM> tile . loaded <CAM> terrain ;
query: surface
target: <CAM> tile . upsampled <CAM> terrain ;
output: . <CAM> <CAM> upsampled ;
------------------------------------------

source: 
var d1 = _ add <CAM> div ( ' d1 ' , null , null , 0 , 0 , 500 , 500 ) ;
query: _ add <CAM> div
target: ( ' d2 ' , d1 , null , 200 , 200 , 50 , 50 ) ;
output: <CAM> ' , ' ) , , , ) , , , , , , , , ;
------------------------------------------

source: 
var lis = $ . event . listeners ;
query: lis . length
target: ;
output: ;
------------------------------------------

source: 
var name = identify . name ( ) ;
query: identify .
target: email ( ) ;
output: email ;
------------------------------------------

source: 
var el = elements [ x ] ;
query: el .
target: parent <CAM> node ;
output: parent ;
------------------------------------------

source: 
var extend = _ angular . extend ;
query: _ angular .
target: element ;
output: _ ;
------------------------------------------

source: 
var n = new index <CAM> node ( [ b , c ] ) ;
query: new constant <CAM>
target: node ( 5 ) ;
output: ( ( <CAM> <CAM> ;
------------------------------------------

source: 
var path = require ( ' path ' ) ;
query: require ( ' axios
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var type = message . type . to <CAM> lower <CAM> case ( ) ;
query: message .
target: data ;
output: type ;
------------------------------------------

source: 
var nock = require ( ' nock ' ) ;
query: require ( '
target: http ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var ANON <UND> BLOCK = ' ANON <UND> BLOCK ' ;
query: '
target: ARGUMENT <UND> LIST ' ;
output: ' ' ' ' )
------------------------------------------

source: 
var message = _ ref4 . message ;
query: _ ref4
target: . assert ;
output: ;
------------------------------------------

source: 
var node <CAM> list = scope . wrappers . node <CAM> list ;
query: scope . register <CAM>
target: wrapper ;
output: <CAM> ;
------------------------------------------

source: 
var store = cursor <CAM> tx . object <CAM> store ( ' store ' ) ;
query: store . get <CAM>
target: index ( ' index ' ) ;
output: element ( ' ' <CAM> ) ;
------------------------------------------

source: 
var f = objf . f ;
query: objf . f
target: <CAM> async ;
output: . f ;
------------------------------------------

source: 
var height = $ ( this ) . parent ( ) . height ( ) ;
query: $ ( this
target: ) . parent ( ) . width ( ) ;
output: . . width . ) ;
------------------------------------------

source: 
var script = debugger <CAM> model <CAM> location . script ( ) ;
query: this . _ ui
target: <CAM> source <CAM> code <CAM> for <CAM> script <CAM> id . get ( script . script <CAM> id ) ;
output: <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> ui <CAM> <CAM> ) ;
------------------------------------------

source: 
var leave <CAM> to <CAM> class = data . leave <CAM> to <CAM> class ;
query: data . leave
target: <CAM> active <CAM> class ;
output: <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var domify = require ( ' domify ' ) ;
query: require ( '
target: each ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var create <CAM> number <CAM> literal = traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> number <CAM> literal ;
query: traceur . codegeneration .
target: parse <CAM> tree <CAM> factory . create <CAM> variable <CAM> statement ;
output: create <CAM> <CAM> <CAM> <CAM> <CAM> create <CAM> <CAM> <CAM> <CAM> ;
------------------------------------------

source: 
var request <CAM> camera = this . camera . request <CAM> camera ;
query: this .
target: camera . release ;
output: release ;
------------------------------------------

source: 
var $ tip = $ ( this . $ tip ) ;
query: $ . Event
target: ( ' hide . bs . ' + this . type ) ;
output: . $ $ ' e . e e ' . e ) ;
------------------------------------------

source: 
var zip = require ( ' gulp - zip ' ) ;
query: require ( ' gulp
target: - shell ' ) ;
output: - gulp ' ) ;
------------------------------------------

source: 
var b = this . b ;
query: b . length
target: ;
output: ;
------------------------------------------

source: 
var north = rectangle . north ;
query: Ellipsoid . clone
target: ( parameters . ellipsoid ) ;
output: ;
------------------------------------------

source: 
var stacks = this . stacks ;
query: this . source
target: ;
output: ;
------------------------------------------

source: 
var update <CAM> ownership <CAM> data = denodeify ( session . models . user . update <CAM> ownership <CAM> data ) . bind ( session . models . user ) ;
query: denodeify ( session
target: . models . user . update <CAM> key ) . bind ( session . models . user ) ;
output: . update . update . update . . . ;
------------------------------------------

source: 
var operand = this . transform <CAM> any ( tree . left . operand ) ;
query: this
target: . transform <CAM> any ( tree . left . member <CAM> expression ) ;
output: . member . . ( . . transform ) transform . . ) ;
------------------------------------------

source: 
var light <CAM> greena400 = exports . light <CAM> greena400 = ' # 76ff03 ' ;
query: exports . light <CAM>
target: greena700    ' # 64dd17 ' ;
output: <CAM> <CAM>    # ' ' ;
------------------------------------------

source: 
var focus <CAM> ripple <CAM> opacity = _ props2 . focus <CAM> ripple <CAM> opacity ;
query: _ props2 . touch
target: <CAM> ripple <CAM> color ;
output: <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var Media = Windows . Media ;
query: Windows . Devices
target: . Sensors . simple <CAM> orientation ;
output: . Windows ;
------------------------------------------

source: 
var path = paths [ i ] ;
query: query . _
target: conditions [ path ] ;
output: var ;
------------------------------------------

source: 
var locks = mock <CAM> request <CAM> wake <CAM> lock . locks ;
query: locks [ 0 ]
target: ;
output:     
------------------------------------------

source: 
var data <CAM> type = window . opener . sap . ui . base . data <CAM> type ;
query: window . opener .
target: sap . ui . base . managed <CAM> object ;
output: data <CAM> managed <CAM> managed . window . . .
------------------------------------------

source: 
var r = this . r . to <CAM> string ( 16 ) ;
query: this . g .
target: to <CAM> string ( 16 ) ;
output: g <CAM> . ( . ) ;
------------------------------------------

source: 
var buffer = require ( ' vinyl - buffer ' ) ;
query: require (
target: ' gulp - connect ' ) ;
output: ' ' - ' ' ) ;
------------------------------------------

source: 
var key <CAM> value = key <CAM> value <CAM> pairs [ i ] ;
query: key <CAM> value
target: . split ( ' ' ) ;
output: <CAM> key ( <CAM> key key ;
------------------------------------------

source: 
var divisor = divisors [ i ] ;
query: uint32 <CAM> div
target: ( divisor ) ;
output: . var <CAM> ;
------------------------------------------

source: 
var p = body . position ;
query: body . velocity
target: ;
output: ;
------------------------------------------

source: 
var DIRECTION <UND> UP = gesture <CAM> detector . DIRECTION <UND> UP = ' up ' ;
query: gesture <CAM> detector
target: . DIRECTION <UND> RIGHT    ' right ' ;
output: <CAM> DIRECTION <UND> DIRECTION <UND> |  ' # ' ;
------------------------------------------

source: 
var el = this . el ;
query: el . object3D
target: ;
output: ;
------------------------------------------

source: 
var dynCall <UND> iddddiii = Module [ ' dynCall <UND> iddddiii ' ] = asm [ ' dynCall <UND> iddddiii ' ] ;
query: Module [ ' dynCall
target: <UND> iiiiiiiiiiii ' ]    asm [ ' dynCall <UND> iiiiiiiiiiii ' ] ;
output: ' ' ' ]     ' ' ' <UND> <UND> ' ] ;
------------------------------------------

source: 
var async = require ( ' async ' ) ;
query: require ( ' nomnom
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var side <UND> ns1 = sphereBox <UND> side <UND> ns1 ;
query: sphereBox <UND> side <UND>
target: ns2 ;
output: <UND> <UND>
------------------------------------------

source: 
var dom <CAM> element = ng <CAM> element . dom <CAM> element ;
query: reflector . setter (
target: dep . prop <CAM> setter <CAM> name ) ;
output: <CAM> <CAM> setter <CAM> element ;
------------------------------------------

source: 
var recid = $ ( el ) . attr ( ' recid ' ) ;
query: $ ( el )
target: . attr ( ' field ' ) ;
output: . attr ( ' ' ' ) ;
------------------------------------------

source: 
var Model = Backbone . Model . extend ( ) ;
query: new Backbone
target: . Collection ( [ i d : 1 ] , model : Model ) ;
output:  create . ) a d ] . ] ;
------------------------------------------

source: 
var script <CAM> visual <CAM> enabled = feature <CAM> switches ? feature <CAM> switches . script <CAM> visual <CAM> enabled : false ;
query: feature <CAM> switches
target: ? feature <CAM> switches . script <CAM> visual <CAM> authoring <CAM> enabled : false ;
output: <CAM> script <CAM> <CAM> <CAM> script <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> ;
------------------------------------------

source: 
var timeline <CAM> data = this . _ timeline <CAM> data ( ) ;
query: timeline <CAM> data
target: . entry <CAM> start <CAM> times ;
output: <CAM> _ <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var n = doc . nums . pop ( ) ;
query: doc .
target: strs . pop ( ) ;
output: s ;
------------------------------------------

source: 
var y = -this . x * q1 . z + this . y * q1 . w + this . z * q1 . x + this . w * q1 . y ;
query: this . x
target: * q1 . y - this . y * q1 . x + this . z * q1 . w + this . w * q1 . z ;
output:  . . x . this . x . . . x . . . x . . . x . . . x . . . x .
------------------------------------------

source: 
var i = aindex [ k ] ;
query: inverse ?
target: cf ( b , avalues [ k ] ) : cf ( avalues [ k ] , b ) ;
output: var * h , var ) 0 ] ;
------------------------------------------

source: 
var home = this . state <CAM> stack _ [ this . state <CAM> stack _ . length - 2 ] . home ;
query: this . get <CAM>
target: runtime <CAM> expression ( ' super <CAM> constructor ' ) ;
output: . <CAM> . <CAM> _ _ <CAM> . <CAM> ) ;
------------------------------------------

source: 
var object = require ( ' mout ' ) . object ;
query: require ( ' path
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var header = require ( ' gulp - header ' ) ;
query: require ( ' gulp
target: - connect ' ) ;
output: - gulp ' ) ;
------------------------------------------

source: 
var tildify = require ( ' tildify ' ) ;
query: require (
target: ' interpret ' ) ;
output: ' ' ' ) ;
------------------------------------------

source: 
var rotation = rectangle . rotation ;
query: rectangle . outline
target: <CAM> width ;
output: . . ;
------------------------------------------

source: 
var is <CAM> zero = math . is <CAM> zero ;
query: math . bignumber
target: ;
output: ;
------------------------------------------

source: 
var protocol = require ( ' pomelo - protocol ' ) ;
query: require ( '
target: pomelo - logger ' ) . get <CAM> logger ( ' pomelo ' , _ _ filename ) ;
output: ' ' ' ' ) ;
------------------------------------------

source: 
var fill = style . fill ;
query: style .
target: stroke ;
output: stroke ;
------------------------------------------

source: 
var phi = phi <CAM> start + i * inverse <CAM> segments * phi <CAM> length ;
query: Math . sin (
target: phi ) ;
output: <CAM> <CAM> ;
------------------------------------------

source: 
var label <CAM> group = this . _ create <CAM> group ( ' label <CAM> group ' ) ;
query: this . _
target: axis    this . _ create <CAM> axis ( layout <CAM> info , timeline <CAM> model ) ;
output: ' <CAM> |  ' <CAM> _ _ <CAM> <CAM> <CAM> ' <CAM> <CAM> . ' <CAM> <CAM> . ;
------------------------------------------

source: 
var active <CAM> drag = DDM . active <CAM> drag ;
query: instance . active <CAM>
target: drop ;
output: <CAM> <CAM>
------------------------------------------

source: 
var blue50 = exports . blue50 = ' # e3f2fd ' ;
query: exports . blue100 
target:   ' # bbdefb ' ;
output:    # ' ' ;
------------------------------------------

source: 
var path = require ( ' path ' ) ;
query: mocha . utils .
target: noop ;
output: noop ;
------------------------------------------

source: 
var property = _ ref . property ;
query: _ ref .
target: value ;
output: value ;
------------------------------------------

source: 
var collab <CAM> panel = imports . collab <CAM> panel ;
query: imports . ui
target: ;
output: ;
------------------------------------------

source: 
var error = console . error . bind ( console ) ;
query: console . warn .
target: bind ( console ) ;
output: warn ( . . ;
------------------------------------------

source: 
var icon <CAM> button <CAM> size = _ context$mui <CAM> theme . button . icon <CAM> button <CAM> size ;
query: _ context$mui <CAM>
target: theme . z <CAM> index ;
output: <CAM> . z <CAM> <CAM> <CAM>
------------------------------------------

source: 
var iks = this . mesh . geometry . iks ;
query: this . mesh
target: . skeleton . bones ;
output: . mesh ;
------------------------------------------

source: 
var . . . x = z ;
query: a : 1
target: ;
output: .
------------------------------------------

source: 
var height = this . attribute ( ' height ' ) . to <CAM> pixels ( ' y ' ) ;
query: this . attribute (
target: ' rx ' ) . to <CAM> pixels ( ' x ' ) ;
output: ' ' ' ) ;
------------------------------------------

source: 
var a = new int8 <CAM> array ( 2 ) ;
query: a . subarray
target: ( 2 , 4 ) ;
output: <CAM> a ) a ) ;
------------------------------------------

source: 
var get <CAM> snap <CAM> height = t . get <CAM> snap <CAM> height ;
query: t . get
target: <CAM> snap <CAM> minutes ;
output: <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var scroll <CAM> to <CAM> column = _ state . scroll <CAM> to <CAM> column ;
query: _
target: state . scroll <CAM> to <CAM> row ;
output: <CAM> <CAM> scroll <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var version = option <UND> consume ( options , ' version ' ) ;
query: option <UND> consume
target: ( options , ' format ' ) ;
output: ' ' . ' ' ' ) ;
------------------------------------------

source: 
var dim = _ dim  |  |  false ;
query: _ label
target:  |  |  ' Loading . . . ' ;
output:  |  |  | #  _ _ _ _
------------------------------------------

source: 
var path = require ( ' path ' ) ;
query: require ( '
target: wrench ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var menus = imports . menus ;
query: imports [ ' tree
target: . favorites ' ] ;
output: ' var . ) ;
------------------------------------------

source: 
var create <CAM> variable <CAM> statement = traceur . codegeneration . parse <CAM> tree <CAM> factory . create <CAM> variable <CAM> statement ;
query: traceur . syntax
target: . predefined <CAM> name ;
output: <CAM> create <CAM> <CAM> <CAM>
------------------------------------------

source: 
var storage = this . _ _ storage ;
query: this . _ children
target: ;
output: .
------------------------------------------

source: 
var href = _ ie <CAM> uri <CAM> monitor . iframe . location . href ;
query: href . index
target: <CAM> of ( ' ? ' ) ;
output: ;
------------------------------------------

source: 
var offset = data . offset  |  |  x : 0 , y : 0 ;
query: data .
target: repeat  |  |  x : 1 , y : 1 ;
output: repeat  |  |  | ;
------------------------------------------

source: 
var width = this . get <CAM> pixels ( options . width ) ;
query: this
target: . get <CAM> pixels ( options . height ) ;
output: . height <CAM> width ( this . get ) ;
------------------------------------------

source: 
var view <CAM> model = options . view <CAM> model ;
query: this . previous <CAM>
target: view <CAM> model ;
output: <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var c = mc ( a <CAM> rot ) ;
query: ms (
target: a <CAM> rot ) ;
output: <CAM> . ( . .
------------------------------------------

source: 
var fill = ' local fill ' ;
query: ' local find
target: ' ;
output: ' )
------------------------------------------

source: 
var attributes = this . _ attributes ;
query: this . _ gl
target: ;
output: ;
------------------------------------------

source: 
var rotate = data . rotate ;
query: data .
target: scaleX ;
output: scaleX ;
------------------------------------------

source: 
var category <CAM> value = data <CAM> point . category <CAM> value ;
query: sub <CAM>
target: data <CAM> point . identity ;
output: <CAM> . <CAM> <CAM> identity <CAM>
------------------------------------------

source: 
var loc = document . location ;
query: loc . port
target:     ' ' ? ( loc . protocol     ' https : ' ? 443 : 80 ) : loc . port ;
output: ;
------------------------------------------

source: 
var path = require ( ' path ' ) ;
query: require ( ' concat
target: - stream ' ) ;
output: ' concat ' ) ;
------------------------------------------

source: 
var literals = this . literals _ ;
query: goog . bind
target: ( this . build <CAM> placeholder _ , this ) ;
output: . . . build <CAM> . ) build . . ;
------------------------------------------

source: 
var gl = render <CAM> session . gl ;
query: render <CAM> session
target: . projection ;
output: <CAM> projection <CAM>
------------------------------------------

source: 
var current = format <CAM> time ( e . current <CAM> time ) ;
query: format <CAM> time
target: ( e . duration ) ;
output: <CAM> <CAM> <CAM> time ) ;
------------------------------------------

source: 
var bool = _ react$ <CAM> prop <CAM> types . bool ;
query: _ react$ <CAM>
target: prop <CAM> types . object ;
output: <CAM> <CAM> <CAM> . _ ;
------------------------------------------

source: 
var express = require ( ' express ' ) ;
query: require ( ' sinon
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var get <CAM> tree <CAM> scope = scope . get <CAM> tree <CAM> scope ;
query: scope . mixin
target: ;
output: ;
------------------------------------------

source: 
var sp = env [ env <UND> sp ] ;
query: env [ env <UND>
target: state ] ;
output: state <UND> ;
------------------------------------------

source: 
var ember <CAM> generate = blueprint <CAM> helpers . ember <CAM> generate ;
query: blueprint <CAM> helpers
target: . ember <CAM> generate <CAM> destroy ;
output: <CAM> ember <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var selection <CAM> id = powerbi . visuals . selection <CAM> id ;
query: powerbi . visual
target: <CAM> data <CAM> role <CAM> kind ;
output: <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var n = vertices . length ;
query: geometry .
target: faces [ i ] ;
output: face ;
------------------------------------------

source: 
var x = this . orientation . x ;
query: this . orientation
target: . y ;
output: . y ;
------------------------------------------

source: 
var assets = this . system . app . assets ;
query: assets . get
target: ( i d ) ;
output: <CAM> . d ) ;
------------------------------------------

source: 
var coord = this . _ _ coord  |  |  [ 0 , 0 , 0 , 0 ] ;
query: this . draw <CAM>
target: vars . co ;
output: 0 ;
------------------------------------------

source: 
var sx = t . sx ;
query: t .
target: sy ;
output: t ;
------------------------------------------

source: 
var v = verts [ i ] ;
query: pointInPolygon <UND>
target: edge ;
output: var <UND>
------------------------------------------

source: 
var ui = app . ns ( ' ui ' ) ;
query: app . ns
target: ( ' ux ' ) ;
output: . ' ' ' ) ;
------------------------------------------

source: 
var level = frame [ ' @level ' ] ;
query: frame [ ' @lineno
target: ' ] - 1 ;
output: ' ) ;
------------------------------------------

source: 
var React = require ( ' React ' ) ;
query: require (
target: ' fixed <CAM> data <CAM> table <CAM> cell <CAM> group . react ' ) ;
output: <CAM> ' <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> data <CAM> ) ;
------------------------------------------

source: 
var bubbles = typeof options . bubbles ! = ' undefined ' ? options . bubbles : true ;
query: typeof options . cancelable
target: !   ' undefined ' ? options . cancelable : true ;
output:     # ' ? options . cancelable . options ;
------------------------------------------

source: 
var flux <CAM> store = require ( ' flux <CAM> store ' ) ;
query: require ( ' Dispatcher
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var scroll <CAM> left = body . scroll <CAM> left  |  |  document <CAM> element . scroll <CAM> left ;
query: body . scroll
target: <CAM> top  |  |  document <CAM> element . scroll <CAM> top ;
output: <CAM> <CAM> <CAM> |  |   . <CAM> <CAM> scroll <CAM> <CAM> ;
------------------------------------------

source: 
var ann = anns [ i ] ;
query: ann . severity
target: ;
output: ;
------------------------------------------

source: 
var gulp    = require ( ' gulp ' ) ;
query: require ( '
target: fs ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var U8 = new primitive <CAM> type ( ' U8 ' , 1 , ' i ' , 0 , 255 ) ;
query: new primitive <CAM>
target: type ( ' U16 ' , 2 , ' i ' , 0 , 65535 ) ;
output: , . ' , ' ) ' ) ' ' d , ' ) ' ' ;
------------------------------------------

source: 
var expect = require ( ' expect . js ' ) ;
query: require (
target: ' mout ' ) . object ;
output: ' ' ' ) ;
------------------------------------------

source: 
var through2 = require ( ' through2 ' ) ;
query: require (
target: ' child <UND> process ' ) . exec ;
output: ' ' ' process ' ) ;
------------------------------------------

source: 
var parse <CAM> tree <CAM> writer = traceur . outputgeneration . parse <CAM> tree <CAM> writer ;
query: traceur .
target: outputgeneration . parse <CAM> tree <CAM> map <CAM> writer ;
output: parse <CAM> parse <CAM> <CAM> <CAM> factory <CAM> <CAM> <CAM>
------------------------------------------

source: 
var assert    = require ( ' assert ' ) ;
query: common .
target: connection <CAM> config ;
output: connection '  ;
------------------------------------------

source: 
var cipher = this . _ cipher ;
query: cipher . block <CAM>
target: size ;
output: cipher ;
------------------------------------------

source: 
var yaw = parse <CAM> float ( e . yaw ) ;
query: parse <CAM> float
target: ( e . radius ) ;
output: . <CAM> . radius , ;
------------------------------------------

source: 
var plugin = $ ( this ) . attr ( ' plugin ' ) ;
query: $ ( this )
target: . attr ( ' action ' ) ;
output: . attr ( ' ' ' ) ;
------------------------------------------

source: 
var shader = this . shader ;
query: shader . samplers
target: ;
output: ;
------------------------------------------

source: 
var react <CAM> component <CAM> environment = require ( ' react <CAM> component <CAM> environment ' ) ;
query: require ( '
target: react <CAM> instance <CAM> map ' ) ;
output: ' <CAM> ' <CAM> <CAM> <CAM> ) ;
------------------------------------------

source: 
var fakexml <CAM> http <CAM> request = fake <CAM> xhr . fakexml <CAM> http <CAM> request ;
query: referee . assert
target: ;
output: ;
------------------------------------------

source: 
var half <CAM> axes = box . half <CAM> axes ;
query: Matrix3 . get
target: <CAM> column ( half <CAM> axes , 0 , scratch <CAM> cartesianu ) ;
output: <CAM> manager ;
------------------------------------------

source: 
var config = ctx . config ;
query: config . timezone
target: ;
output: ;
------------------------------------------

source: 
var ui <CAM> manager = require ( ' ui <CAM> manager ' ) ;
query: require ( '
target: ensure <CAM> positive <CAM> delay <CAM> props ' ) ;
output: ' <CAM> ' <CAM> ensure <CAM> ensure <CAM> ) ;
------------------------------------------

source: 
var position = this . $ container . position ( ) ;
query: this . $ container
target: . offset ( ) ;
output: . container ( ) ;
------------------------------------------

source: 
var inner = el . query <CAM> selector ( ' gui - list - view - inner ' ) ;
query: el . query <CAM>
target: selector ( ' gui - list - view - head ' ) ;
output: - ( ' ' ' ' ' sheet ' ' ' ' ;
------------------------------------------

source: 
var uvs = this . uvs ;
query: this
target: . colors ;
output: . colors ;
------------------------------------------

source: 
var pubsub = imports . pubsub ;
query: imports [ ' info
target: ' ] ;
output: . ] ;
------------------------------------------

source: 
var indent = self . indent ( now . line ) ;
query: value
target: . length ;
output: ( indent ;
------------------------------------------

source: 
var S = db . model ( ' update <CAM> one <CAM> strict <CAM> throw <CAM> schema ' ) ;
query: new S ( name
target: : ' orange crush ' ) ;
output: <CAM> ' ' <CAM> <CAM> ;
------------------------------------------

source: 
var text   = _ text  |  |  ' Warning ' ;
query: _ position  |
target:  |  ' center ' ;
output:  |  |  ' ;
------------------------------------------

source: 
var layers = cfg . layers = = = undefined?~0 : cfg . layers ;
query: view . width
target: * view . scaleX ;
output: ;
------------------------------------------

source: 
var e = in <CAM> event ;
query: this . move <CAM>
target: queue . length ;
output: <CAM> <CAM> <CAM> ;
------------------------------------------

source: 
var validator = lang <UND> 1 . is <CAM> present ( extra ) ? collection <UND> 1 . string <CAM> map <CAM> wrapper . get ( extra , ' validator ' ) : null ;
query: lang <UND> 1 .
target: is <CAM> present ( extra ) ? collection <UND> 1 . string <CAM> map <CAM> wrapper . get ( extra , ' async <CAM> validator ' ) : null ;
output: 1 <CAM> <CAM> <CAM> ' <CAM> ;
------------------------------------------

source: 
var model <CAM> name = context . model <CAM> name ;
query: context . method
target: <CAM> names ;
output: <CAM> <CAM> <CAM>
------------------------------------------

source: 
var touchstart = fake <CAM> dispatch ( ' touchstart ' , 100 , 0 ) ;
query: fake <CAM> dispatch (
target: ' touchmove ' , 100 , 2 ) ;
output: ( ' ' ) ' ) ' ) ;
------------------------------------------

source: 
var subscribers = parent . _ subscribers ;
query: subscribers .
target: length ;
output: _ ;
------------------------------------------

source: 
var search <CAM> matches = search <CAM> result . search <CAM> matches ;
query: this . _ search
target: <CAM> config . queries ( ) ;
output: <CAM> search <CAM> _ <CAM> result ;
------------------------------------------

source: 
var set <CAM> world <CAM> constructor = exports . set <CAM> world <CAM> constructor = proxy <CAM> support <CAM> code ( ' set <CAM> world <CAM> constructor ' ) ;
query: exports .
target: Given    define <CAM> step ;
output: <CAM> <CAM> |  ' <CAM> <CAM> <CAM>
------------------------------------------

source: 
var a = i d : 1 , name : ' a ' ;
query: i d : 2
target: , name : ' b ' ;
output: ' ' ' ' ' ' )
------------------------------------------

source: 
var types = _ . is <CAM> string ( opts . types ) ? [ opts . types ] : opts . types ;
query: _ . is <CAM>
target: string ( opts . locations ) ? [ opts . locations ] : opts . locations ;
output: . <CAM> . . create . ;
------------------------------------------

source: 
var updatable = options . updatable ;
query: options .
target: side <CAM> orientation  |  |  BABYLON . Mesh . DEFAULTSIDE ;
output: side <CAM> . ;
------------------------------------------

source: 
var metadata <CAM> url = _ ref . metadata <CAM> url ;
query: _ ref .
target: metadata ;
output: metadata ;
------------------------------------------

source: 
var x = data <CAM> point [ this . _ x <CAM> field ] ;
query: data <CAM>
target: point [ this . _ y <CAM> field ] ;
output: <CAM> . this <CAM> x x <CAM> <CAM> <CAM> ;
------------------------------------------

source: 
var group = groups [ i ] ;
query: group . start
target: ;
output: ;
------------------------------------------

source: 
var object <CAM> enumeration <CAM> builder = powerbi . visuals . object <CAM> enumeration <CAM> builder ;
query: powerbi . visuals .
target: value <CAM> formatter ;
output: value ;
------------------------------------------

source: 
var query = options . query ;
query: options . get
target: <CAM> name ;
output: <CAM> get <CAM>
------------------------------------------

source: 
var settings = bin . settings  |  |  ;
query: settings . desc
target:  |  |  settings . title ;
output: ;
------------------------------------------

source: 
var day <CAM> names = this . _ get ( inst , ' day <CAM> names ' ) ;
query: this .
target: _ get ( inst , ' day <CAM> names <CAM> short ' ) ;
output: _ day <CAM> ' <CAM> ' day <CAM> <CAM> <CAM> <CAM> <CAM> ) ;
------------------------------------------

source: 
var str <CAM> list = db . model ( ' str <CAM> list ' ) ;
query: new str <CAM>
target: list ( ) ;
output: <CAM> ( ' .
------------------------------------------

source: 
var v = particle . velocity ;
query: particle . position
target: ;
output: ;
------------------------------------------

source: 
var db = sync <CAM> browserdb . db . _ db ;
query: db . transaction
target: ( DBOS <UND> PLACES , ' readwrite ' ) ;
output: <CAM> . . db ) db transaction ' ) ;
------------------------------------------

source: 
var recorder = util . Module ( ' recorder ' ) ;
query: util . assert
target: ;
output: .
------------------------------------------

source: 
var spawn = require ( ' child <UND> process ' ) . spawn ;
query: pm2
target: <UND> env . exec <UND> interpreter  |  |  ' node ' ;
output: ' interpreter . spawn ;
------------------------------------------

source: 
var reference = Cartesian3 . most <CAM> orthogonal <CAM> axis ( f , reference <CAM> scratch ) ;
query: Cartesian3 .
target: normalize ( Cartesian3 . cross ( reference , first <CAM> axis , second <CAM> axis <CAM> scratch ) , second <CAM> axis <CAM> scratch ) ;
output: second <CAM> <CAM> <CAM> second <CAM> <CAM> <CAM> , <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> ) ;
------------------------------------------

source: 
var handlebars = require ( ' gulp - handlebars ' ) ;
query: require ( ' gulp
target: - concat ' ) ;
output: - concat ' ) ;
------------------------------------------

source: 
var setup <CAM> test <CAM> hooks = blueprint <CAM> helpers . setup <CAM> test <CAM> hooks ;
query: blueprint <CAM> helpers
target: . ember <CAM> new ;
output: . setup <CAM> <CAM> <CAM>
------------------------------------------

source: 
var name = this . transform <CAM> any ( tree . name ) ;
query: this . transform <CAM>
target: any ( tree . type <CAM> annotation ) ;
output: . ( . <CAM> transform ) . <CAM> ;
------------------------------------------

source: 
var velocityX = e . gesture . velocityX ;
query: e . gesture
target: . center . x ;
output: ;
------------------------------------------

source: 
var path = require ( ' path ' ) ;
query: require ( '
target: assert ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var commands = imports . commands ;
query: imports
target: . jsonalyzer ;
output: . jsonalyzer ;
------------------------------------------

source: 
var _ malloc = Module [ ' _ malloc ' ] = asm [ ' _ malloc ' ] ;
query: Module [ ' _
target: bitshift64 <CAM> ashr ' ]    asm [ ' _ bitshift64 <CAM> ashr ' ] ;
output: _ ' ' ' ] ;
------------------------------------------

source: 
var request <CAM> stats = goog . labs . net . web <CAM> channel . request <CAM> stats ;
query: goog . labs .
target: net . web <CAM> channel . Channel ;
output: Channel . goog . . . labs .
------------------------------------------

source: 
var body = this . body  |  |  ;
query: this . query
target:  |  |  ;
output: .   |  |
------------------------------------------

source: 
var assert = require ( ' chai ' ) . assert ;
query: require ( ' mkdirp
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var templates = require ( ' templates . js ' ) ;
query: require ( '
target: nodemailer ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var scroll <CAM> top = offset <CAM> parent . scroll <CAM> top ;
query: offset <CAM> parent .
target: scroll <CAM> left ;
output: scroll <CAM> <CAM> <CAM>
------------------------------------------

source: 
var array = event . data . array ;
query: self . webkit <CAM>
target: post <CAM> message  |  |  self . post <CAM> message ;
output: . <CAM> . . |  |  | . post <CAM> . .
------------------------------------------

source: 
var timestamp = + record . timestamp ;
query: record . i
target: d ;
output: ;
------------------------------------------

source: 
var dirname = _ path2 . default . dirname ( this . opts . filename )  |  |  process . cwd ( ) ;
query: ( 0 ,
target: _ resolve2 . default ) ( parser <CAM> opts . parser , dirname ) ;
output:  dirname . ( . ;
------------------------------------------

source: 
var tag <CAM> name = element . tag <CAM> name . to <CAM> lower <CAM> case ( ) ;
query: element . get <CAM>
target: attribute ( ' type ' ) ;
output: element ( <CAM> <CAM> ' ) ;
------------------------------------------

source: 
var key = relationship . key ;
query: snapshot . belongs <CAM>
target: to ( key ) ;
output: <CAM> <CAM> . ) ;
------------------------------------------

source: 
var c9 = imports . c9 ;
query: imports . info
target: ;
output: ;
------------------------------------------

source: 
var open = document . get <CAM> element <CAM> by <CAM> id ( ' open ' ) ;
query: document . get <CAM>
target: element <CAM> by <CAM> id ( ' opensave ' ) ;
output: element ( by <CAM> id ( ' ' <CAM> ) ;
------------------------------------------

source: 
var timers = require ( ' timers ' ) ;
query: require ( ' buffer
target: ' ) . Buffer ;
output: ' ) ;
------------------------------------------

source: 
var hostname = hosts . hosts [ key ] . hostname ;
query: hosts . hosts [
target: key ] . type ;
output: hosts ] ;
------------------------------------------

source: 
var clear = default <CAM> value ( options . clear , true ) ;
query: default <CAM> value (
target: options . epsilon , 0 ) ;
output: . . epsilon ) ( ) ;
------------------------------------------

source: 
var title = ' topup - incorrectcode - title2 ' ;
query: ' topup
target: - incorrectcode - message3 ' ;
output: ' message ' message ' )
------------------------------------------

source: 
var geo = this . geometry ;
query: this . _
target: template ;
output: template ;
------------------------------------------

source: 
var containment <CAM> edges = this . containment <CAM> edges ;
query: this .
target: _ edge <CAM> fields <CAM> count ;
output: edge edge <CAM> <CAM> <CAM> <CAM> ;
------------------------------------------

source: 
var app <CAM> name = options . app <CAM> name  |  |  '' ;
query: options . app <CAM>
target: key  |  |  '' ;
output: <CAM> <CAM>   |  | ;
------------------------------------------

source: 
var dynCall <UND> viiiiiiiiiiiii = Module [ ' dynCall <UND> viiiiiiiiiiiii ' ] = asm [ ' dynCall <UND> viiiiiiiiiiiii ' ] ;
query: Module [ '
target: dynCall <UND> di ' ]    asm [ ' dynCall <UND> di ' ] ;
output: dynCall <UND> <UND> ' ]     ' ' ' <UND> <UND> ' ] 
------------------------------------------

source: 
var shader <CAM> program = PIXI . shader <CAM> program ;
query: sprite .
target: tile <CAM> position ;
output: tile <CAM> <CAM> ;
------------------------------------------

source: 
var canvas = self . canvas ;
query: options .
target: aspect <CAM> ratio ;
output: aspect <CAM> . ;
------------------------------------------

source: 
var basename = path . basename ( plugin ) ;
query: path . dirname
target: ( plugin ) ;
output: ;
------------------------------------------

source: 
var gulp = require ( ' gulp ' ) ;
query: require ( '
target: gulp - webserver ' ) ;
output: ' - ' ' ) ;
------------------------------------------

source: 
var eggs = _ get <CAM> formatted <CAM> item <CAM> reference ( ' items . eggs ' , _ . keys ( Content . eggs ) , ' Numeric Quantity ' ) ;
query: _ get <CAM>
target: formatted <CAM> item <CAM> reference ( ' items . hatching <CAM> potions ' , _ . keys ( Content . hatching <CAM> potions ) , ' Numeric Quantity ' ) ;
output: <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> ' ' <CAM> _ <CAM> <CAM> <CAM> ) ' ' _ <CAM> ' <CAM> _ <CAM> <CAM> <CAM> ;
------------------------------------------

source: 
var fs = require ( ' fs ' ) ;
query: require ( '
target: muk ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var canvas = this . canvas ;
query: canvas .
target: width ;
output: canvas ;
------------------------------------------

source: 
var ds <CAM> foo = app <CAM> foo . data <CAM> source ( ' ds <CAM> foo ' , connector : ' memory ' ) ;
query: app <CAM> foo
target: . data <CAM> source ( ' ds <CAM> bar ' , connector : ' memory ' ) ;
output: <CAM> ds <CAM> <CAM> <CAM> ' ' <CAM> <CAM> <CAM> ) ' <CAM> ' ' <CAM> ) ;
------------------------------------------

source: 
var DOCUMENT <UND> POSITION <UND> CONTAINED <UND> BY = Node . DOCUMENT <UND> POSITION <UND> CONTAINED <UND> BY ;
query: Node . DOCUMENT <UND>
target: POSITION <UND> IMPLEMENTATION <UND> SPECIFIC ;
output: <UND> <UND> DOCUMENT <UND> DOCUMENT <UND>
------------------------------------------

source: 
var g = Object . get <CAM> own <CAM> property <CAM> descriptor ( o , ' m ' ) . get ;
query: Object . get <CAM>
target: own <CAM> property <CAM> descriptor ( o , ' m ' ) . set ;
output: <CAM> <CAM> <CAM> <CAM> <CAM> ( ' . ' ' <CAM> ) ;
------------------------------------------

source: 
var text <CAM> field <CAM> test <CAM> object = require ( path . resolve ( field <CAM> test <CAM> objects <CAM> path , ' text <CAM> field <CAM> test <CAM> object ' ) ) ;
query: require ( path
target: . resolve ( field <CAM> test <CAM> objects <CAM> path , ' html <CAM> field <CAM> test <CAM> object ' ) ) ;
output: <CAM> field <CAM> field <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> ) ' field <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> ) ;
------------------------------------------

source: 
var fs    = require ( ' fs ' ) ;
query: require ( '
target: debug ' ) ( ' pm2 : monit ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var x = e . heading . x ;
query: e .
target: heading . y ;
output: heading ;
------------------------------------------

source: 
var display <CAM> name = _ tree <CAM> snapshot$instanc2 . display <CAM> name ;
query: _ tree
target: <CAM> snapshot$instanc2 . ownerID ;
output: <CAM> <CAM> <CAM> ownerID <CAM>
------------------------------------------

source: 
var all = Ember . RSVP . all ;
query: Ember . RSVP .
target: hash ;
output: RSVP ;
------------------------------------------

source: 
var timing <CAM> function <CAM> utils = require ( ' timing <CAM> function <CAM> utils ' ) ;
query: require ( ' text!
target: <CAM> step <CAM> editor <CAM> template . html ' ) ;
output: <CAM> ' <CAM> <CAM> <CAM> <CAM> <CAM> step <CAM> ) ;
------------------------------------------

source: 
var name <CAM> statement = traceur . syntax . trees . name <CAM> statement ;
query: traceur . syntax
target: . trees . new <CAM> expression ;
output: . syntax . syntax <CAM> . ;
------------------------------------------

source: 
var email = req . param ( ' email ' ) . trim ( ) ;
query: req . param (
target: ' key ' ) ;
output: ' ' . ) ;
------------------------------------------

source: 
var radius <CAM> function = options . radius <CAM> function ;
query: options . cap 
target: |  |  BABYLON . Mesh . NO <UND> CAP ;
output: |  |  | . cap <CAM> radius <CAM> cap .
------------------------------------------

source: 
var interoperabilityifd <CAM> length = if <CAM> dlengths . interoperabilityifd <CAM> length ;
query: if <CAM> dlengths .
target: interoperability <CAM> length <CAM> data <CAM> section ;
output: interoperability <CAM> <CAM> ;
------------------------------------------

source: 
var point = intersection . point ;
query: intersection . object
target: ;
output: ;
------------------------------------------

source: 
var jshint = require ( ' gulp - jshint ' ) ;
query: require ( '
target: path ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var get <CAM> column <CAM> header = window . get <CAM> column <CAM> header ;
query: window .
target: get <CAM> row <CAM> header ;
output: get <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var transform = require ( ' gulp - transform ' ) ;
query: require
target: ( ' mkdirp ' ) ;
output: ( ' ' ' ) ;
------------------------------------------

source: 
var matches <CAM> names = scope . matches <CAM> names ;
query: scope . mixin
target: ;
output: ;
------------------------------------------

source: 
var random = utils . random ;
query: mongoose .
target: Schema ;
output: Schema ;
------------------------------------------

source: 
var line <CAM> height = config . line <CAM> height ;
query: this .
target: blame <CAM> column . blame <CAM> data ;
output: _ <CAM> <CAM> ;
------------------------------------------

source: 
var width = layer . width ;
query: layer . height
target: ;
output: ;
------------------------------------------

source: 
var search = entry . search ;
query: (
target: basename  |  |  '' ) + pathname + ( search  |  |  '' ) ;
output: var . |  |  | ;
------------------------------------------

source: 
var dims <CAM> def = ( opt . dims <CAM> def  |  |  [ ] ) . slice ( ) ;
query: zr <CAM> util
target: . create <CAM> hash <CAM> map ( opt . encode <CAM> def ) ;
output: . encode <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> encode <CAM> <CAM> <CAM> ;
------------------------------------------

source: 
var bounds = camera2 . bounds ;
query: bounds . x
target: * _ width * _ pixel <CAM> ratio ;
output: ;
------------------------------------------

source: 
var option = this . option ;
query: this
target: . icon <CAM> paths ;
output: . icon <CAM> this ;
------------------------------------------

source: 
var arg = args . join ( ' ' ) ;
query: ctx . config
target: . highlight  |  |  ;
output: . config . |  |  |
------------------------------------------

source: 
var hour = parse <CAM> int ( $ ( ' # new - alarm - hour ' ) . val ( ) ) ;
query: parse <CAM> int
target: ( $ ( ' # new - alarm - minute ' ) . val ( ) ) ;
output: ( ' <CAM> ' ' <CAM> ' minute ' error ' ) ;
------------------------------------------

source: 
var options = $ . extend ( , DRAG <UND> DEFAULTS , this . options ) ;
query: options . dx
target: ;
output: .
------------------------------------------

source: 
var Panel = imports . Panel ;
query: imports . tab <CAM>
target: manager ;
output: . .
------------------------------------------

source: 
var session <CAM> description = window . mozrtc <CAM> session <CAM> description  |  |  window . rtc <CAM> session <CAM> description ;
query: window . webkit
target: <CAM> media <CAM> stream  |  |  window . media <CAM> stream ;
output: <CAM>  <CAM> <CAM> <CAM> |  |  | <CAM> session <CAM> <CAM> ;
------------------------------------------

source: 
var gulp = require ( ' gulp ' ) ;
query: require ( ' aurelia
target: - tools ' ) ;
output: ' ' ' ) ;
------------------------------------------

source: 
var script = script <CAM> location . script ( ) ;
query: script <CAM> location .
target: target ( ) ;
output: script . script ;
------------------------------------------

source: 
var value = element ( by . binding ( ' value  |  date : ' yyyy - Www ' ' ) ) ;
query: element ( by
target: . binding ( ' my <CAM> form . input . $ valid ' ) ) ;
output: ' binding ( ' ' ' form . input ' input ' ' ) ;
------------------------------------------

source: 
var line <CAM> number = style <CAM> sheet <CAM> header . line <CAM> number <CAM> in <CAM> source ( rule <CAM> location . start <CAM> line ) ;
query: style <CAM>
target: sheet <CAM> header . column <CAM> number <CAM> in <CAM> source ( rule <CAM> location . start <CAM> line , rule <CAM> location . start <CAM> column ) ;
output: <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM> <CAM>
------------------------------------------

source: 
var current <CAM> config = config . build . current <CAM> config ;
query: config . build <CAM>
target: configurations [ current <CAM> config ] ;
output: <CAM> ;
------------------------------------------

source: 
var min = new Date ( this . _ min <CAM> year , 0 , 1 , 12 , 0 , 0 ) ;
query: new Date (
target: this . _ max <CAM> year , 11 , 31 , 12 , 0 , 0 ) ;
output: , . Date sprite ( , ( 1 , , , , , , ) 0 ) ;
------------------------------------------

source: 
var el = options . element  |  |  document ;
query: options . speed 
target: |  |  100 ;
output:   |  | ;
------------------------------------------

source: 
var sinon = require ( ' sinon ' ) ;
query: require ( ' should
target: ' ) ;
output: ' ) ;
------------------------------------------

source: 
var no <CAM> content <CAM> renderer = _ props4 . no <CAM> content <CAM> renderer ;
query: _ props4
target: . style ;
output: ;
------------------------------------------

source: 
var debug = require ( ' debug ' ) ( ' express : view ' ) ;
query: require ( '
target: path ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var display <CAM> name <CAM> keys = powerbi . visuals . slicer <CAM> util . display <CAM> name <CAM> keys ;
query: powerbi . visual .
target: controls . select <CAM> menu ;
output: select <CAM> select <CAM> <CAM> <CAM>
------------------------------------------

source: 
var buffers = this . buffers ;
query: buffers . length
target: ;
output: ;
------------------------------------------

source: 
var disabled = el . get <CAM> attribute ( ' data - disabled ' ) ! = = null ;
query: el .
target: get <CAM> attribute ( ' data - selected ' ) ;
output: get <CAM> = ( ' ' - error ' ) ;
------------------------------------------

source: 
var origin = apps [ app ] . origin  |  |  null ;
query: apps [ app ]
target: . install <CAM> origin  |  |  null ;
output:  var    |  |  | ;
------------------------------------------

source: 
var entity = this . entity ;
query: this . entity
target: <CAM> manager ;
output: . entity ;
------------------------------------------

source: 
var n = pts . length - 1 ;
query: state . view
target: . translate ;
output: . length ;
------------------------------------------

source: 
var def = $ q . defer ( ) ;
query: this . $ ref
target: ( ) . ref . push ( ) ;
output: . . ;
------------------------------------------

source: 
var allow <CAM> picking = model . allow <CAM> picking ;
query: model . _
target: runtime . root <CAM> nodes ;
output: <CAM> <CAM> allow <CAM> <CAM> <CAM>
------------------------------------------

source: 
var type = options . type  |  |  ' monthly ' ;
query: options . has <CAM>
target: own <CAM> property ( ' style ' ) ? options . style : ' list ' ;
output:     ' '  ) ;
------------------------------------------

source: 
var push = [ ] . push ;
query: Array . prototype .
target: slice ;
output: slice ;
------------------------------------------

source: 
var debug = require ( ' debug ' ) ( ' nodemon ' ) ;
query: require ( '
target: assert ' ) ;
output: ' ' ) ;
------------------------------------------

source: 
var o = goog . style . get <CAM> page <CAM> offset ( element ) ;
query: goog . style .
target: get <CAM> size ( element ) ;
output: style <CAM> . . . . ;
------------------------------------------

